<statement-end-operator> ::= `;`
<unknown-operator> ::= `?`
<lagrange-derivative-operator> ::= `"`
<leibniz-derivative-operator> ::= `\\\`
<leibniz-partial-derivative-operator> ::= `\\`
<comma-operator> ::= `,`
<single-colon-operator> ::= `:`
<double-colon-operator> ::= `::`
<single-dot-operator> ::= `.`
<double-dot-operator> ::= `..`
<triple-dot-operator> ::= `...`
<string-literal> ::= `'` <string-char-sequence> `'`

<semantic-assignment-operator> ::= <expression> <double-colon-operator> <string-literal>

<equivalent-operator> ::= `==`
<equivalent-expression> ::= <expression> <equivalent-operator> <expression>

<assignment-operator> ::= `=`
<assignment-expression> ::= <expression> <assignment-operator> <expression>

<expression> <double-colon-operator> <expression>

<group-expression> ::= `(` <expression> `)`

<range-expression> ::= <expression> <double-dot-operator> <expression>

<inclusive-range-expression> ::= <expression> <triple-dot-operator> <expression>

<rank-expression> ::= `<` <expression> `>`

<derivative-expression> ::=
<expression> <leibniz-derivative-operator> <expression>
<expression> <leibniz-partial-derivative-operator> <expression>
<expression> <lagrange-derivative-operator> <rank-expression>(opt)

<subscript-adjacency-list> ::=
<subscript-postfix-expression>
<subscript-postfix-expression> <comma-operator> <subscript-adjacency-list>

<subscript-postfix-expression> ::=
<expression>
<expression> `[` <subscript-adjacency-list> `]`

<subscript-expression> ::= <subscript-postfix-expression>

<pow-expression> ::= `pow` `(` <function-argument-list> `)`
<log-expression> ::= `log` `(` <function-argument-list> `)`
<mul-expression> ::= `mul` `(` <function-argument-list> `)`
<div-expression> ::= `div` `(` <function-argument-list> `)`
<mod-expression> ::= `mod` `(` <function-argument-list> `)`
<add-expression> ::= `add` `(` <function-argument-list> `)`
<sub-expression> ::= `sub` `(` <function-argument-list> `)`
<dot-expression> ::= `dot` `(` <function-argument-list> `)`
<for-statement>  ::= `for` `(` <range-expression> `)` <single-colon-operator> <expression> <statement-end-operator>(opt)
<sum-statement>  ::= `sum` `(` <range-expression> `)` <single-colon-operator> <expression> <statement-end-operator>(opt)
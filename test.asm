; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_03FKLJIKPC@lli@				; `string'
PUBLIC	??_C@_01PAPGNFGE@c@				; `string'
PUBLIC	??_C@_01INIBCBCB@f@				; `string'
PUBLIC	??_C@_09BNMCJOFC@kTYPENAME@			; `string'
PUBLIC	??_C@_07IAHFONEC@kSTRUCT@			; `string'
PUBLIC	??_C@_05OIHGIEOB@kENUM@				; `string'
PUBLIC	??_C@_05KGDOEPLA@kFUNC@				; `string'
PUBLIC	??_C@_06BGNALLDP@kARRAY@			; `string'
PUBLIC	??_C@_08FFICFHPK@kPOINTER@			; `string'
PUBLIC	??_C@_0M@HPBCLLBC@kIDENTIFIER@			; `string'
PUBLIC	??_C@_08BKDFKOGL@kINTEGER@			; `string'
PUBLIC	??_C@_06MDNIFDGL@kFLOAT@			; `string'
PUBLIC	??_C@_07PDINNHKE@kSTRING@			; `string'
PUBLIC	??_C@_06JGJHMLIN@kBLOCK@			; `string'
PUBLIC	??_C@_06ONKLFMOE@kLABEL@			; `string'
PUBLIC	??_C@_07MMABPBPE@kRETURN@			; `string'
PUBLIC	??_C@_05BJPOLIFB@kGOTO@				; `string'
PUBLIC	??_C@_06IALIMLAK@kWHILE@			; `string'
PUBLIC	??_C@_09OLCPCPNM@kDECLNAME@			; `string'
PUBLIC	??_C@_05DKHMEND@kDECL@				; `string'
PUBLIC	??_C@_08IBPDDPIF@kTERNARY@			; `string'
PUBLIC	??_C@_07CMLFGGDM@kBINARY@			; `string'
PUBLIC	??_C@_06HHELGEGJ@kUNARY@			; `string'
PUBLIC	??_C@_06KIBHGHIF@kGROUP@			; `string'
PUBLIC	??_C@_05DFLJMIKJ@kCALL@				; `string'
PUBLIC	??_C@_06DEPDNCAP@kINDEX@			; `string'
PUBLIC	??_C@_06FGJJDDNF@kTUNIT@			; `string'
PUBLIC	??_C@_0N@HHACOGAC@t_designator@			; `string'
PUBLIC	??_C@_0O@CEJCEKBM@t_designation@		; `string'
PUBLIC	??_C@_05EIDBELPO@LOCAL@				; `string'
PUBLIC	??_C@_05HCKLDGME@PARAM@				; `string'
PUBLIC	??_C@_07EKBCFBCP@ADDRESS@			; `string'
PUBLIC	??_C@_05CIPFEEPL@STORE@				; `string'
PUBLIC	??_C@_05JDMAOHF@FETCH@				; `string'
PUBLIC	??_C@_05HNODEPOI@ARITH@				; `string'
PUBLIC	??_C@_04BFLEPEFN@JUMP@				; `string'
PUBLIC	??_C@_05MLBIABON@JUMPT@				; `string'
PUBLIC	??_C@_05LDOMHBDO@JUMPF@				; `string'
PUBLIC	??_C@_05MOJLIFHL@JUMPC@				; `string'
PUBLIC	??_C@_07NMOOOLDL@TERNARY@			; `string'
PUBLIC	??_C@_05EMNIMLKD@ENTER@				; `string'
PUBLIC	??_C@_06DLHNAFG@INVOKE@				; `string'
PUBLIC	??_C@_06LJMOENAO@RETURN@			; `string'
;	COMDAT ??_C@_06LJMOENAO@RETURN@
CONST	SEGMENT
??_C@_06LJMOENAO@RETURN@ DB 'RETURN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLHNAFG@INVOKE@
CONST	SEGMENT
??_C@_06DLHNAFG@INVOKE@ DB 'INVOKE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNIMLKD@ENTER@
CONST	SEGMENT
??_C@_05EMNIMLKD@ENTER@ DB 'ENTER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMOOOLDL@TERNARY@
CONST	SEGMENT
??_C@_07NMOOOLDL@TERNARY@ DB 'TERNARY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MOJLIFHL@JUMPC@
CONST	SEGMENT
??_C@_05MOJLIFHL@JUMPC@ DB 'JUMPC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LDOMHBDO@JUMPF@
CONST	SEGMENT
??_C@_05LDOMHBDO@JUMPF@ DB 'JUMPF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLBIABON@JUMPT@
CONST	SEGMENT
??_C@_05MLBIABON@JUMPT@ DB 'JUMPT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFLEPEFN@JUMP@
CONST	SEGMENT
??_C@_04BFLEPEFN@JUMP@ DB 'JUMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNODEPOI@ARITH@
CONST	SEGMENT
??_C@_05HNODEPOI@ARITH@ DB 'ARITH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JDMAOHF@FETCH@
CONST	SEGMENT
??_C@_05JDMAOHF@FETCH@ DB 'FETCH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CIPFEEPL@STORE@
CONST	SEGMENT
??_C@_05CIPFEEPL@STORE@ DB 'STORE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EKBCFBCP@ADDRESS@
CONST	SEGMENT
??_C@_07EKBCFBCP@ADDRESS@ DB 'ADDRESS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HCKLDGME@PARAM@
CONST	SEGMENT
??_C@_05HCKLDGME@PARAM@ DB 'PARAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EIDBELPO@LOCAL@
CONST	SEGMENT
??_C@_05EIDBELPO@LOCAL@ DB 'LOCAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CEJCEKBM@t_designation@
CONST	SEGMENT
??_C@_0O@CEJCEKBM@t_designation@ DB 't_designation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HHACOGAC@t_designator@
CONST	SEGMENT
??_C@_0N@HHACOGAC@t_designator@ DB 't_designator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FGJJDDNF@kTUNIT@
CONST	SEGMENT
??_C@_06FGJJDDNF@kTUNIT@ DB 'kTUNIT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DEPDNCAP@kINDEX@
CONST	SEGMENT
??_C@_06DEPDNCAP@kINDEX@ DB 'kINDEX', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFLJMIKJ@kCALL@
CONST	SEGMENT
??_C@_05DFLJMIKJ@kCALL@ DB 'kCALL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06KIBHGHIF@kGROUP@
CONST	SEGMENT
??_C@_06KIBHGHIF@kGROUP@ DB 'kGROUP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HHELGEGJ@kUNARY@
CONST	SEGMENT
??_C@_06HHELGEGJ@kUNARY@ DB 'kUNARY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CMLFGGDM@kBINARY@
CONST	SEGMENT
??_C@_07CMLFGGDM@kBINARY@ DB 'kBINARY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBPDDPIF@kTERNARY@
CONST	SEGMENT
??_C@_08IBPDDPIF@kTERNARY@ DB 'kTERNARY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DKHMEND@kDECL@
CONST	SEGMENT
??_C@_05DKHMEND@kDECL@ DB 'kDECL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09OLCPCPNM@kDECLNAME@
CONST	SEGMENT
??_C@_09OLCPCPNM@kDECLNAME@ DB 'kDECLNAME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IALIMLAK@kWHILE@
CONST	SEGMENT
??_C@_06IALIMLAK@kWHILE@ DB 'kWHILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BJPOLIFB@kGOTO@
CONST	SEGMENT
??_C@_05BJPOLIFB@kGOTO@ DB 'kGOTO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MMABPBPE@kRETURN@
CONST	SEGMENT
??_C@_07MMABPBPE@kRETURN@ DB 'kRETURN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ONKLFMOE@kLABEL@
CONST	SEGMENT
??_C@_06ONKLFMOE@kLABEL@ DB 'kLABEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JGJHMLIN@kBLOCK@
CONST	SEGMENT
??_C@_06JGJHMLIN@kBLOCK@ DB 'kBLOCK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PDINNHKE@kSTRING@
CONST	SEGMENT
??_C@_07PDINNHKE@kSTRING@ DB 'kSTRING', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MDNIFDGL@kFLOAT@
CONST	SEGMENT
??_C@_06MDNIFDGL@kFLOAT@ DB 'kFLOAT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BKDFKOGL@kINTEGER@
CONST	SEGMENT
??_C@_08BKDFKOGL@kINTEGER@ DB 'kINTEGER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HPBCLLBC@kIDENTIFIER@
CONST	SEGMENT
??_C@_0M@HPBCLLBC@kIDENTIFIER@ DB 'kIDENTIFIER', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FFICFHPK@kPOINTER@
CONST	SEGMENT
??_C@_08FFICFHPK@kPOINTER@ DB 'kPOINTER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BGNALLDP@kARRAY@
CONST	SEGMENT
??_C@_06BGNALLDP@kARRAY@ DB 'kARRAY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KGDOEPLA@kFUNC@
CONST	SEGMENT
??_C@_05KGDOEPLA@kFUNC@ DB 'kFUNC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OIHGIEOB@kENUM@
CONST	SEGMENT
??_C@_05OIHGIEOB@kENUM@ DB 'kENUM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07IAHFONEC@kSTRUCT@
CONST	SEGMENT
??_C@_07IAHFONEC@kSTRUCT@ DB 'kSTRUCT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BNMCJOFC@kTYPENAME@
CONST	SEGMENT
??_C@_09BNMCJOFC@kTYPENAME@ DB 'kTYPENAME', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
ccalloctr DQ	FLAT:ccuseralloctr_
_TLS	ENDS
;	COMDAT ??_C@_01INIBCBCB@f@
CONST	SEGMENT
??_C@_01INIBCBCB@f@ DB 'f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01PAPGNFGE@c@
CONST	SEGMENT
??_C@_01PAPGNFGE@c@ DB 'c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03FKLJIKPC@lli@
CONST	SEGMENT
??_C@_03FKLJIKPC@lli@ DB 'lli', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
CONST	SEGMENT
pf	DB	069H
	DB	075H
	DB	063H
	DB	066H
fn	DB	078H
	DB	079H
	DB	07aH
	DB	077H
	ORG $+8
stbsp__bot DQ	03ff0000000000000r		; 1
	DQ	04024000000000000r		; 10
	DQ	04059000000000000r		; 100
	DQ	0408f400000000000r		; 1000
	DQ	040c3880000000000r		; 10000
	DQ	040f86a0000000000r		; 100000
	DQ	0412e848000000000r		; 1e+06
	DQ	0416312d000000000r		; 1e+07
	DQ	04197d78400000000r		; 1e+08
	DQ	041cdcd6500000000r		; 1e+09
	DQ	04202a05f20000000r		; 1e+10
	DQ	042374876e8000000r		; 1e+11
	DQ	0426d1a94a2000000r		; 1e+12
	DQ	042a2309ce5400000r		; 1e+13
	DQ	042d6bcc41e900000r		; 1e+14
	DQ	0430c6bf526340000r		; 1e+15
	DQ	04341c37937e08000r		; 1e+16
	DQ	04376345785d8a000r		; 1e+17
	DQ	043abc16d674ec800r		; 1e+18
	DQ	043e158e460913d00r		; 1e+19
	DQ	04415af1d78b58c40r		; 1e+20
	DQ	0444b1ae4d6e2ef50r		; 1e+21
	DQ	04480f0cf064dd592r		; 1e+22
	ORG $+8
stbsp__negbot DQ 03fb999999999999ar		; 0.1
	DQ	03f847ae147ae147br		; 0.01
	DQ	03f50624dd2f1a9fcr		; 0.001
	DQ	03f1a36e2eb1c432dr		; 0.0001
	DQ	03ee4f8b588e368f1r		; 1e-05
	DQ	03eb0c6f7a0b5ed8dr		; 1e-06
	DQ	03e7ad7f29abcaf48r		; 1e-07
	DQ	03e45798ee2308c3ar		; 1e-08
	DQ	03e112e0be826d695r		; 1e-09
	DQ	03ddb7cdfd9d7bdbbr		; 1e-10
	DQ	03da5fd7fe1796495r		; 1e-11
	DQ	03d719799812dea11r		; 1e-12
	DQ	03d3c25c268497682r		; 1e-13
	DQ	03d06849b86a12b9br		; 1e-14
	DQ	03cd203af9ee75616r		; 1e-15
	DQ	03c9cd2b297d889bcr		; 1e-16
	DQ	03c670ef54646d497r		; 1e-17
	DQ	03c32725dd1d243acr		; 1e-18
	DQ	03bfd83c94fb6d2acr		; 1e-19
	DQ	03bc79ca10c924223r		; 1e-20
	DQ	03b92e3b40a0e9b4fr		; 1e-21
	DQ	03b5e392010175ee6r		; 1e-22
stbsp__negboterr DQ 0bc5999999999999ar		; -5.55112e-18
	DQ	0bc0eb851eb851eb8r		; -2.08167e-19
	DQ	0bbd89374bc6a7efar		; -2.08167e-20
	DQ	0bbb6a161e4f765fer		; -4.79217e-21
	DQ	0bb8ee78183f91e64r		; -8.18031e-22
	DQ	03b4b5a63f9a49c2cr		; 4.52519e-23
	DQ	03b15e1e99483b023r		; 4.52519e-24
	DQ	0bad03023df2d4c94r		; -2.09226e-25
	DQ	0bab34674bfabb83br		; -6.22816e-26
	DQ	0ba720a5465df8d2cr		; -3.64322e-27
	DQ	03a47f7bc7b4d28aar		; 6.0503e-28
	DQ	039f97f27f0f6e886r		; 2.01134e-29
	DQ	0b9cecd79a5a0df95r		; -3.03737e-30
	DQ	0394ea70909833de7r		; 1.18069e-32
	DQ	0b97937831647f5a0r		; -7.77054e-32
	DQ	03925b4c2ebe68799r		; 2.09022e-33
	DQ	0b90db7b2080a3029r		; -7.15424e-34
	DQ	0b8d7c628066e8ceer		; -7.15424e-35
	DQ	0388a52b31e9e3d07r		; 2.47541e-36
	DQ	038675447a5d8e536r		; 5.48467e-37
	DQ	0383f769fb7e0b75er		; 9.24625e-38
	DQ	0b7fa7566d9cba769r		; -4.85968e-39
stbsp__top DQ	044b52d02c7e14af6r		; 1e+23
	DQ	0497c06a5ec5433c6r		; 1e+46
	DQ	04e428bc8abe49f64r		; 1e+69
	DQ	053088ba3bf284e24r		; 1e+92
	DQ	057d03e29f5c2b18cr		; 1e+115
	DQ	05c957f48bb41db7cr		; 1e+138
	DQ	0615c73892ecbfbf4r		; 1e+161
	DQ	06622d3d6f88f0b3dr		; 1e+184
	DQ	06ae8eb0138858d0ar		; 1e+207
	DQ	06fb07d457124123dr		; 1e+230
	DQ	07475d2ce55747a18r		; 1e+253
	DQ	0793ce2137f743382r		; 1e+276
	DQ	07e031cfd3999f7b0r		; 1e+299
	ORG $+8
stbsp__negtop DQ 03b282db34012b251r		; 1e-23
	DQ	0366244ce242c5561r		; 1e-46
	DQ	0319b9b6364f30304r		; 1e-69
	DQ	02cd4dbf7b3f71cb7r		; 1e-92
	DQ	0280f8587e7083e30r		; 1e-115
	DQ	02347d12a4670c123r		; 1e-138
	DQ	01e81fee341fc585dr		; 1e-161
	DQ	019bb31bb5dc320d2r		; 1e-184
	DQ	014f48c22ca71a1bdr		; 1e-207
	DQ	0102f0ce4839198dbr		; 1e-230
	DQ	00b677603725064a8r		; 1e-253
	DQ	006a1ba03f5b21000r		; 1e-276
	DQ	001dac9a7b3b7302fr		; 1e-299
	ORG $+8
stbsp__toperr DQ 04160000000000000r		; 8.38861e+06
	DQ	045ebb542c80deb40r		; 6.86018e+28
	DQ	0cae83b80b9aab60ar		; -7.25314e+52
	DQ	0cfa32e22d17a166cr		; -4.33773e+75
	DQ	0d4523606902e180er		; -1.55594e+98
	DQ	0d9296fb782462e87r		; -3.28416e+121
	DQ	0ddf358952c0bd011r		; -3.77459e+144
	DQ	0e2a78c1376a34b6cr		; -1.73567e+167
	DQ	0e7817569fc243adfr		; -3.88936e+190
	DQ	0ec5d9365a897aaa6r		; -9.95664e+213
	DQ	07119050c256123a0r		; 6.36413e+236
	DQ	0f5db1799d76cc7a6r		; -5.20691e+259
	DQ	0faa213fe39571a38r		; -5.25048e+282
	ORG $+8
stbsp__negtoperr DQ 037c13badb829e079r		; 3.95653e-40
	DQ	0b2ee46a98d3d9f64r		; -2.2999e-63
	DQ	02e3227c7218a2b65r		; 3.65062e-86
	DQ	02951d96999aa01e9r		; 1.18752e-109
	DQ	0a4acc2229efc3962r		; -5.06449e-132
	DQ	09fecd04a2263407ar		; -6.71568e-155
	DQ	09b123b80f187a157r		; -2.81208e-178
	DQ	0965c4e22914ed912r		; -5.77789e-201
	DQ	0119bc296cdf42f82r		; 7.49971e-224
	DQ	08cc9f9e7f4e16fe1r		; -4.64397e-247
	DQ	0880aeb0a72a8902ar		; -6.36911e-270
	DQ	0834e228e12c13408r		; -9.43681e-293
	DQ	00000000000fa1259r		; 8.09709e-317
	ORG $+8
stbsp__powten DQ 0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000064H
	DQ	00000000000003e8H
	DQ	0000000000002710H
	DQ	00000000000186a0H
	DQ	00000000000f4240H
	DQ	0000000000989680H
	DQ	0000000005f5e100H
	DQ	000000003b9aca00H
	DQ	00000002540be400H
	DQ	000000174876e800H
	DQ	000000e8d4a51000H
	DQ	000009184e72a000H
	DQ	00005af3107a4000H
	DQ	00038d7ea4c68000H
	DQ	002386f26fc10000H
	DQ	016345785d8a0000H
	DQ	0de0b6b3a7640000H
	DQ	8ac7230489e80000H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	stbsp_vsprintf
PUBLIC	stbsp_vsnprintf
PUBLIC	stbsp_sprintf
PUBLIC	stbsp_snprintf
PUBLIC	stbsp_vsprintfcb
PUBLIC	stbsp_set_separators
PUBLIC	gen_type
PUBLIC	gen_vectype
PUBLIC	gen_ptrtype
PUBLIC	gen_vartype
PUBLIC	gen_fixtype
PUBLIC	gen_typename_ex
PUBLIC	gen_typename
PUBLIC	emit_typename
PUBLIC	emit_modifier
PUBLIC	emit_vardecl_ex
PUBLIC	emit_vardecl
PUBLIC	emit_fundecl
PUBLIC	genmake
PUBLIC	emit_vecoprari
PUBLIC	emit_vectype
PUBLIC	emit_type
PUBLIC	?fib@@YAHH@Z					; fib
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_04MLLLIHIP@null@				; `string'
PUBLIC	??_C@_05FOLKAOND@_KMGT@				; `string'
PUBLIC	??_C@_05JPHLCBNH@_kMGT@				; `string'
PUBLIC	??_C@_03ICJPMMHB@NaN@				; `string'
PUBLIC	??_C@_03EJEJBNFP@Inf@				; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6@			; `string'
PUBLIC	??_C@_0BE@GMJDDHPH@?$CFs?3?5?$CFs?$FL?$CFi?$FN?5?$CFs?$CI?$CJ?5?$CFs?6@ ; `string'
PUBLIC	??_C@_0DN@MCEJNCBN@?8?$CFs?$FL0x?$CFx?$FN?8?3?5uncoupled?5tree?0?5?8?$CFs@ ; `string'
PUBLIC	??_C@_03JIDPIAJI@err@				; `string'
PUBLIC	??_C@_0DP@MHKFGEKJ@?8?$CFs?$FL0x?$CFx?$FN?8?3?5invalid?5mingling?5tr@ ; `string'
PUBLIC	??_C@_0BJ@OPCFLBFB@?$CFs?3?5identifier?5not?5found@ ; `string'
PUBLIC	??_C@_0CD@IALNCJCC@?8?$CFs?8?3?5undeclared?5lvalue?5identif@ ; `string'
PUBLIC	??_C@_0CD@LHDDGHLD@?8?$CFs?8?3?5undeclared?5rvalue?5identif@ ; `string'
PUBLIC	??_C@_0BH@MBJGJGMK@?$CFs?3?5already?5has?5a?5body@ ; `string'
PUBLIC	??_C@_0CM@GIHPCBBO@?8?$CFs?8?3?5local?5function?5defintions@ ; `string'
PUBLIC	??_C@_0BM@BIKCLCJM@?8?$CFs?8?3?5variable?5redefinition@ ; `string'
PUBLIC	??_C@_05ODGDKDLF@store@				; `string'
PUBLIC	??_C@_05MCKKOJDL@fetch@				; `string'
PUBLIC	??_C@_05LGHFKIKG@arith@				; `string'
PUBLIC	??_C@_05IHEOCMON@enter@				; `string'
PUBLIC	??_C@_06HJMAOIE@invoke@				; `string'
PUBLIC	??_C@_06LNOFJDNM@return@			; `string'
PUBLIC	??_C@_07LHEPONKL@address@			; `string'
PUBLIC	??_C@_06PHJKMIOD@$decls@			; `string'
PUBLIC	??_C@_06JABCEPLP@$enter@			; `string'
PUBLIC	??_C@_06LMOJBBHE@$leave@			; `string'
PUBLIC	??_C@_05MNIOPOB@__asm@				; `string'
PUBLIC	??_C@_07BECPAABE@__based@			; `string'
PUBLIC	??_C@_07KOLFKCDI@__cdecl@			; `string'
PUBLIC	??_C@_09HIJEGCPM@__clrcall@			; `string'
PUBLIC	??_C@_0L@JMKHOMEK@__fastcall@			; `string'
PUBLIC	??_C@_08FEOELIIN@__inline@			; `string'
PUBLIC	??_C@_09IFJBGAPI@__stdcall@			; `string'
PUBLIC	??_C@_0L@NPHFGOKO@__thiscall@			; `string'
PUBLIC	??_C@_0M@FJBNGECK@__vectorcal@			; `string'
PUBLIC	??_C@_08LCAALENH@_Alignof@			; `string'
PUBLIC	??_C@_08IPCLHPMJ@_Alignas@			; `string'
PUBLIC	??_C@_05BNCCCJPP@const@				; `string'
PUBLIC	??_C@_08NGGFOJBB@restrict@			; `string'
PUBLIC	??_C@_08PABEKFH@volatile@			; `string'
PUBLIC	??_C@_06OGMBMJA@inline@				; `string'
PUBLIC	??_C@_09JEIHJDJD@_Noreturn@			; `string'
PUBLIC	??_C@_06CPIODIKA@signed@			; `string'
PUBLIC	??_C@_08CLLOMHGD@unsigned@			; `string'
PUBLIC	??_C@_06EBGKOKIG@__int8@			; `string'
PUBLIC	??_C@_07ICFHOGAF@__int16@			; `string'
PUBLIC	??_C@_07OFLPPHGP@__int32@			; `string'
PUBLIC	??_C@_07LFCOJCAC@__int64@			; `string'
PUBLIC	??_C@_06BNJCAIGJ@double@			; `string'
PUBLIC	??_C@_05KNFBNCOH@float@				; `string'
PUBLIC	??_C@_04GOKPGOLB@long@				; `string'
PUBLIC	??_C@_03JBIPMCLC@int@				; `string'
PUBLIC	??_C@_05BFKKPKCG@short@				; `string'
PUBLIC	??_C@_04ENMBGAPA@char@				; `string'
PUBLIC	??_C@_04GKJNKENE@void@				; `string'
PUBLIC	??_C@_05HIFAKALE@_Bool@				; `string'
PUBLIC	??_C@_08PLEDNCDB@_Complex@			; `string'
PUBLIC	??_C@_07LPOMPHGP@_Atomic@			; `string'
PUBLIC	??_C@_04DBJPMPLO@enum@				; `string'
PUBLIC	??_C@_06PBJBIPGK@struct@			; `string'
PUBLIC	??_C@_07FIDIHKEG@typedef@			; `string'
PUBLIC	??_C@_04HAPDLBFF@auto@				; `string'
PUBLIC	??_C@_06PAMNHHEG@extern@			; `string'
PUBLIC	??_C@_08DHHIDNEP@register@			; `string'
PUBLIC	??_C@_06GGHJAEBN@static@			; `string'
PUBLIC	??_C@_0O@COIIMKFA@_Thread_local@		; `string'
PUBLIC	??_C@_0L@LOEMFGDG@__declspec@			; `string'
PUBLIC	??_C@_02HEBPBKGD@if@				; `string'
PUBLIC	??_C@_06DOPOGBGP@switch@			; `string'
PUBLIC	??_C@_04FHMCPBIP@else@				; `string'
PUBLIC	??_C@_04CKOINMPC@case@				; `string'
PUBLIC	??_C@_07DLHCIBDH@default@			; `string'
PUBLIC	??_C@_03JOHEBPFF@for@				; `string'
PUBLIC	??_C@_05OODBEKIG@while@				; `string'
PUBLIC	??_C@_02KNAFDCHJ@do@				; `string'
PUBLIC	??_C@_04MABHPDAO@goto@				; `string'
PUBLIC	??_C@_05ELPHFHOI@break@				; `string'
PUBLIC	??_C@_08DLICDMBN@continue@			; `string'
PUBLIC	??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@		; `string'
PUBLIC	??_C@_0N@ENGHABPN@expected?5?8?$FN?8@		; `string'
PUBLIC	??_C@_0CM@CFADJNLG@expected?5?8?3?8?5invalid?5conditiona@ ; `string'
PUBLIC	??_C@_0BP@IKEJFDCA@function?5that?5returns?5function@ ; `string'
PUBLIC	??_C@_03HMEPACKF@war@				; `string'
PUBLIC	??_C@_0BM@MNHMNFH@function?5that?5returns?5array@ ; `string'
PUBLIC	??_C@_0BP@HCJGMMGM@expected?5initializer?5after?5?8?$DN?8@ ; `string'
PUBLIC	??_C@_0CH@MONPNMKA@expected?5constant?5expression?5af@ ; `string'
PUBLIC	??_C@_0BE@MJILOMBI@expected?5declarator@	; `string'
PUBLIC	??_C@_0CC@ODCHBMFC@expected?5?8?$HL?8?5for?5struct?5specifi@ ; `string'
PUBLIC	??_C@_0N@BDNLGGP@expected?5?8?$DL?8@		; `string'
PUBLIC	??_C@_0CC@FDBKEOAC@expected?5?8?$HN?8?5for?5struct?5specifi@ ; `string'
PUBLIC	??_C@_0CN@NANEDLOL@unexpected?5?8?4?4?4?8?0?5must?5be?5at?5en@ ; `string'
PUBLIC	??_C@_0N@HFCKEHBN@expected?5?8?$HN?8@		; `string'
PUBLIC	??_C@_0BE@EHBOIFGG@expected?5expression@	; `string'
PUBLIC	??_C@_0N@BPFNKLEG@expected?5?8?$CI?8@		; `string'
PUBLIC	??_C@_0BD@BPNOKPDK@expected?5statement@		; `string'
PUBLIC	??_C@_0BO@IGLIBKMB@missing?5goto?5label?5identifier@ ; `string'
PUBLIC	??_C@_0DE@KEPEEDEI@invalid?5statement?0?5missing?5?8?3?8?5@ ; `string'
PUBLIC	??_C@_0BC@MIHHJFNA@invalid?5statement@		; `string'
PUBLIC	??_C@_05HIFJDKLD@array@				; `string'
PUBLIC	??_C@_07LKHFMGFB@integer@			; `string'
PUBLIC	??_C@_06MKGMLFO@?4JP?9WL@			; `string'
PUBLIC	??_C@_04GHJNJNPO@main@				; `string'
PUBLIC	??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@ ; `string'
PUBLIC	??_C@_0P@CGIBHDEL@constant?9value@		; `string'
PUBLIC	??_C@_0M@KKIOMGKI@local_alloc@			; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO@				; `string'
PUBLIC	??_C@_02EEKDKGMJ@?$DO?$DN@			; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM@				; `string'
PUBLIC	??_C@_02EHCHHCKH@?$DM?$DN@			; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK@				; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL@				; `string'
PUBLIC	??_C@_0P@NOFDAMLB@internal?9error@		; `string'
PUBLIC	??_C@_03GPCJKLEN@zro@				; `string'
PUBLIC	??_C@_05EHKFBNPG@arg?90@			; `string'
PUBLIC	??_C@_04JDNGKEJO@?$CFc?$CFi@			; `string'
PUBLIC	??_C@_07ELIBNAHE@?$CFc?$CFi_?$CFi@		; `string'
PUBLIC	??_C@_03PKIJPMHF@x?$CFi@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_01HNPIGOCE@?$CG@				; `string'
PUBLIC	??_C@_02GPECMEKF@?$FL?$FN@			; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_07PGOEDBHP@static?5@			; `string'
PUBLIC	??_C@_04JEGEICAJ@?$AN?6?$CFs@			; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI@				; `string'
PUBLIC	??_C@_01IHBHIGKO@?0@				; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ@				; `string'
PUBLIC	??_C@_03MPLDLMAM@?$CFsm@			; `string'
PUBLIC	??_C@_02MNJOIFPO@?$HL?5@			; `string'
PUBLIC	??_C@_01ICJEACDI@?$DL@				; `string'
PUBLIC	??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@ ; `string'
PUBLIC	??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@ ; `string'
PUBLIC	??_C@_03LFNJCDHL@?$HN?$AN?6@			; `string'
PUBLIC	??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@ ; `string'
PUBLIC	??_C@_03PBLGLLIO@?$CJ?$AN?6@			; `string'
PUBLIC	??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@ ; `string'
PUBLIC	??_C@_0BA@GHJONKJL@typedef?5struct?5@		; `string'
PUBLIC	??_C@_01HCONENDN@?$HL@				; `string'
PUBLIC	??_C@_04DDJEOHF@?$AN?6?5?5@			; `string'
PUBLIC	??_C@_02MJBDPJEM@?$HN?5@			; `string'
PUBLIC	??_C@_03LKGCEJK@?$DL?$AN?6@			; `string'
PUBLIC	??_C@_02FPIMKNGF@?$CK?$DN@			; `string'
PUBLIC	??_C@_02FJEHGPIO@?1?$DN@			; `string'
PUBLIC	??_C@_02FOEOMHFC@?$CL?$DN@			; `string'
PUBLIC	??_C@_02FKMDLLOA@?9?$DN@			; `string'
PUBLIC	??_C@_0L@NNJAJELN@test?4svm?4c@			; `string'
PUBLIC	??_C@_0M@IALGNGGL@done?5in?5?$CFf?6@		; `string'
PUBLIC	??_C@_0N@NHHCNFG@c?3?$CFi?5?9?5cc?3?$CFi@	; `string'
PUBLIC	??_C@_03MGHMBJCF@log@				; `string'
PUBLIC	??_C@_0CEP@GDNJNAFF@?$CDdefine?5f64?5double?$AN?6?$CDdefine?5f32@ ; `string'
PUBLIC	??_C@_09JFGGGBPA@gen?4ktt?4c@			; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	free:PROC
EXTRN	malloc:PROC
EXTRN	realloc:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	_Init_thread_epoch:DWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
_TLS	SEGMENT
ccerr	DD	01H DUP (?)
	ALIGN	8

cckey	DQ	01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
dummy	DB	0c0H DUP (?)
_BSS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?buf@?1??ccformatv@@9@4PADA
_TLS	SEGMENT
?buf@?1??ccformatv@@9@4PADA DB 0ffH DUP (?)		; `ccformatv'::`2'::buf
_TLS	ENDS
;	COMDAT ?buf@?1??cctrace_@@9@4PADA
_TLS	SEGMENT
?buf@?1??cctrace_@@9@4PADA DB 0fffH DUP (?)		; `cctrace_'::`2'::buf
_TLS	ENDS
_BSS	SEGMENT
func_decls DQ	01H DUP (?)
vari_decls DQ	01H DUP (?)
symbols	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A
_BSS	SEGMENT
?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A DB 018H DUP (?) ; `ccexec_edict'::`2'::zro
_BSS	ENDS
;	COMDAT ?$TSS0@?1??ccexec_edict@@9@4HA
_BSS	SEGMENT
?$TSS0@?1??ccexec_edict@@9@4HA DD 01H DUP (?)		; `ccexec_edict'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?buf@?1??gen_typename@@9@4PADA
_BSS	SEGMENT
?buf@?1??gen_typename@@9@4PADA DB 020H DUP (?)		; `gen_typename'::`2'::buf
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccuseralloctr_ DD imagerel ccuseralloctr_
	DD	imagerel ccuseralloctr_+56
	DD	imagerel $unwind$ccuseralloctr_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccinternalalloctr_ DD imagerel ccinternalalloctr_
	DD	imagerel ccinternalalloctr_+56
	DD	imagerel $unwind$ccinternalalloctr_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctrace_ DD imagerel cctrace_
	DD	imagerel cctrace_+169
	DD	imagerel $unwind$cctrace_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccclocktick DD imagerel ccclocktick
	DD	imagerel ccclocktick+25
	DD	imagerel $unwind$ccclocktick
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccclocksecs DD imagerel ccclocksecs
	DD	imagerel ccclocksecs+94
	DD	imagerel $unwind$ccclocksecs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccopenfile DD imagerel ccopenfile
	DD	imagerel ccopenfile+60
	DD	imagerel $unwind$ccopenfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccpullfile DD imagerel ccpullfile
	DD	imagerel ccpullfile+173
	DD	imagerel $unwind$ccpullfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccpushfile DD imagerel ccpushfile
	DD	imagerel ccpushfile+106
	DD	imagerel $unwind$ccpushfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_vsprintf DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$stbsp_vsprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_vsnprintf DD imagerel $LN23
	DD	imagerel $LN23+280
	DD	imagerel $unwind$stbsp_vsnprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_sprintf DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$stbsp_sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_snprintf DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$stbsp_snprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_vsprintfcb DD imagerel $LN1222
	DD	imagerel $LN1222+7104
	DD	imagerel $unwind$stbsp_vsprintfcb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp__real_to_str DD imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel $unwind$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stbsp__real_to_str DD imagerel stbsp__real_to_str+288
	DD	imagerel stbsp__real_to_str+293
	DD	imagerel $chain$0$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stbsp__real_to_str DD imagerel stbsp__real_to_str+293
	DD	imagerel stbsp__real_to_str+971
	DD	imagerel $chain$1$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stbsp__real_to_str DD imagerel stbsp__real_to_str+971
	DD	imagerel stbsp__real_to_str+997
	DD	imagerel $chain$2$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$stbsp__real_to_str DD imagerel stbsp__real_to_str+997
	DD	imagerel stbsp__real_to_str+1019
	DD	imagerel $chain$3$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+432
	DD	imagerel $unwind$stbsp__raise_to_power10
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10+432
	DD	imagerel stbsp__raise_to_power10+2447
	DD	imagerel $chain$1$stbsp__raise_to_power10
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10+2447
	DD	imagerel stbsp__raise_to_power10+2493
	DD	imagerel $chain$2$stbsp__raise_to_power10
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccformatv DD imagerel ccformatv
	DD	imagerel ccformatv+63
	DD	imagerel $unwind$ccformatv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccformatex DD imagerel ccformatex
	DD	imagerel ccformatex+29
	DD	imagerel $unwind$ccformatex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccformat DD imagerel ccformat
	DD	imagerel ccformat+83
	DD	imagerel $unwind$ccformat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblget DD imagerel ccdlb_tblget
	DD	imagerel ccdlb_tblget+144
	DD	imagerel $unwind$ccdlb_tblget
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblput DD imagerel ccdlb_tblput
	DD	imagerel ccdlb_tblput+219
	DD	imagerel $unwind$ccdlb_tblput
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblset DD imagerel ccdlb_tblset
	DD	imagerel ccdlb_tblset+220
	DD	imagerel $unwind$ccdlb_tblset
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_arradd_ DD imagerel ccdlb_arradd_
	DD	imagerel ccdlb_arradd_+180
	DD	imagerel $unwind$ccdlb_arradd_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_arradd DD imagerel ccdlb_arradd
	DD	imagerel ccdlb_arradd+89
	DD	imagerel $unwind$ccdlb_arradd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_stradd DD imagerel ccdlb_stradd
	DD	imagerel ccdlb_stradd+123
	DD	imagerel $unwind$ccdlb_stradd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblini DD imagerel ccdlb_tblini
	DD	imagerel ccdlb_tblini+28
	DD	imagerel $unwind$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccdlb_tblini DD imagerel ccdlb_tblini+28
	DD	imagerel ccdlb_tblini+36
	DD	imagerel $chain$0$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$ccdlb_tblini DD imagerel ccdlb_tblini+36
	DD	imagerel ccdlb_tblini+268
	DD	imagerel $chain$5$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$ccdlb_tblini DD imagerel ccdlb_tblini+268
	DD	imagerel ccdlb_tblini+296
	DD	imagerel $chain$6$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$ccdlb_tblini DD imagerel ccdlb_tblini+296
	DD	imagerel ccdlb_tblini+308
	DD	imagerel $chain$7$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$ccdlb_tblini DD imagerel ccdlb_tblini+308
	DD	imagerel ccdlb_tblini+315
	DD	imagerel $chain$8$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblcat DD imagerel ccdlb_tblcat
	DD	imagerel ccdlb_tblcat+176
	DD	imagerel $unwind$ccdlb_tblcat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdbl_query DD imagerel ccdbl_query
	DD	imagerel ccdbl_query+259
	DD	imagerel $unwind$ccdbl_query
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstr_vcatf DD imagerel ccstr_vcatf
	DD	imagerel ccstr_vcatf+135
	DD	imagerel $unwind$ccstr_vcatf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstr_catf DD imagerel ccstr_catf
	DD	imagerel ccstr_catf+136
	DD	imagerel $unwind$ccstr_catf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_new DD imagerel cctree_new
	DD	imagerel cctree_new+108
	DD	imagerel $unwind$cctree_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_clone DD imagerel cctree_clone
	DD	imagerel cctree_clone+122
	DD	imagerel $unwind$cctree_clone
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctreee_pointer_modifier DD imagerel cctreee_pointer_modifier
	DD	imagerel cctreee_pointer_modifier+85
	DD	imagerel $unwind$cctreee_pointer_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctreee_array_modifier DD imagerel cctreee_array_modifier
	DD	imagerel cctreee_array_modifier+101
	DD	imagerel $unwind$cctreee_array_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctreee_function_modifier DD imagerel cctreee_function_modifier
	DD	imagerel cctreee_function_modifier+101
	DD	imagerel $unwind$cctreee_function_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctreee_struct_specifier DD imagerel cctreee_struct_specifier
	DD	imagerel cctreee_struct_specifier+116
	DD	imagerel $unwind$cctreee_struct_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_translation_unit DD imagerel cctree_translation_unit
	DD	imagerel cctree_translation_unit+75
	DD	imagerel $unwind$cctree_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_group DD imagerel cctree_group
	DD	imagerel cctree_group+116
	DD	imagerel $unwind$cctree_group
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_call DD imagerel cctree_call
	DD	imagerel cctree_call+148
	DD	imagerel $unwind$cctree_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_index DD imagerel cctree_index
	DD	imagerel cctree_index+148
	DD	imagerel $unwind$cctree_index
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_block DD imagerel cctree_block
	DD	imagerel cctree_block+116
	DD	imagerel $unwind$cctree_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_while DD imagerel cctree_while
	DD	imagerel cctree_while+133
	DD	imagerel $unwind$cctree_while
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_label DD imagerel cctree_label
	DD	imagerel cctree_label+142
	DD	imagerel $unwind$cctree_label
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_goto DD imagerel cctree_goto
	DD	imagerel cctree_goto+131
	DD	imagerel $unwind$cctree_goto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_return DD imagerel cctree_return
	DD	imagerel cctree_return+116
	DD	imagerel $unwind$cctree_return
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_decl_name DD imagerel cctree_decl_name
	DD	imagerel cctree_decl_name+166
	DD	imagerel $unwind$cctree_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_decl DD imagerel cctree_decl
	DD	imagerel cctree_decl+133
	DD	imagerel $unwind$cctree_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_litide DD imagerel cctree_litide
	DD	imagerel cctree_litide+116
	DD	imagerel $unwind$cctree_litide
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_litint DD imagerel cctree_litint
	DD	imagerel cctree_litint+126
	DD	imagerel $unwind$cctree_litint
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_litflo DD imagerel cctree_litflo
	DD	imagerel cctree_litflo+126
	DD	imagerel $unwind$cctree_litflo
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_unary DD imagerel cctree_unary
	DD	imagerel cctree_unary+140
	DD	imagerel $unwind$cctree_unary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_binary DD imagerel cctree_binary
	DD	imagerel cctree_binary+149
	DD	imagerel $unwind$cctree_binary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_ternary DD imagerel cctree_ternary
	DD	imagerel cctree_ternary+148
	DD	imagerel $unwind$cctree_ternary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_decl DD imagerel cctree_solve_decl
	DD	imagerel cctree_solve_decl+772
	DD	imagerel $unwind$cctree_solve_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_statement DD imagerel cctree_solve_statement
	DD	imagerel cctree_solve_statement+73
	DD	imagerel $unwind$cctree_solve_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cctree_solve_statement DD imagerel cctree_solve_statement+73
	DD	imagerel cctree_solve_statement+97
	DD	imagerel $chain$0$cctree_solve_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cctree_solve_statement DD imagerel cctree_solve_statement+97
	DD	imagerel cctree_solve_statement+209
	DD	imagerel $chain$1$cctree_solve_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cctree_solve_statement DD imagerel cctree_solve_statement+209
	DD	imagerel cctree_solve_statement+245
	DD	imagerel $chain$2$cctree_solve_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cctree_solve_statement DD imagerel cctree_solve_statement+245
	DD	imagerel cctree_solve_statement+251
	DD	imagerel $chain$3$cctree_solve_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_include_invokable DD imagerel cctree_include_invokable
	DD	imagerel cctree_include_invokable+107
	DD	imagerel $unwind$cctree_include_invokable
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_resolve_symbol DD imagerel cctree_resolve_symbol
	DD	imagerel cctree_resolve_symbol+231
	DD	imagerel $unwind$cctree_resolve_symbol
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_mingle DD imagerel cctree_mingle
	DD	imagerel cctree_mingle+54
	DD	imagerel $unwind$cctree_mingle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cctree_mingle DD imagerel cctree_mingle+54
	DD	imagerel cctree_mingle+315
	DD	imagerel $chain$0$cctree_mingle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cctree_mingle DD imagerel cctree_mingle+315
	DD	imagerel cctree_mingle+385
	DD	imagerel $chain$1$cctree_mingle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_binary DD imagerel cctree_solve_binary
	DD	imagerel cctree_solve_binary+142
	DD	imagerel $unwind$cctree_solve_binary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_rvalue DD imagerel cctree_solve_rvalue
	DD	imagerel cctree_solve_rvalue+119
	DD	imagerel $unwind$cctree_solve_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_lvalue DD imagerel cctree_solve_lvalue
	DD	imagerel cctree_solve_lvalue+78
	DD	imagerel $unwind$cctree_solve_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_call DD imagerel cctree_solve_call
	DD	imagerel cctree_solve_call+143
	DD	imagerel $unwind$cctree_solve_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_index DD imagerel cctree_solve_index
	DD	imagerel cctree_solve_index+94
	DD	imagerel $unwind$cctree_solve_index
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_block DD imagerel cctree_solve_block
	DD	imagerel cctree_solve_block+71
	DD	imagerel $unwind$cctree_solve_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_decl_name DD imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+123
	DD	imagerel $unwind$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cctree_solve_decl_name DD imagerel cctree_solve_decl_name+123
	DD	imagerel cctree_solve_decl_name+499
	DD	imagerel $chain$2$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cctree_solve_decl_name DD imagerel cctree_solve_decl_name+499
	DD	imagerel cctree_solve_decl_name+698
	DD	imagerel $chain$3$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cctree_solve_decl_name DD imagerel cctree_solve_decl_name+698
	DD	imagerel cctree_solve_decl_name+713
	DD	imagerel $chain$4$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$cctree_solve_decl_name DD imagerel cctree_solve_decl_name+713
	DD	imagerel cctree_solve_decl_name+719
	DD	imagerel $chain$5$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_translation_unit DD imagerel cctree_solve_translation_unit
	DD	imagerel cctree_solve_translation_unit+138
	DD	imagerel $unwind$cctree_solve_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict DD imagerel ccedict
	DD	imagerel ccedict+59
	DD	imagerel $unwind$ccedict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_local DD imagerel ccedict_local
	DD	imagerel ccedict_local+58
	DD	imagerel $unwind$ccedict_local
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_param DD imagerel ccedict_param
	DD	imagerel ccedict_param+62
	DD	imagerel $unwind$ccedict_param
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_store DD imagerel ccedict_store
	DD	imagerel ccedict_store+69
	DD	imagerel $unwind$ccedict_store
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_fetch DD imagerel ccedict_fetch
	DD	imagerel ccedict_fetch+69
	DD	imagerel $unwind$ccedict_fetch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_arith DD imagerel ccedict_arith
	DD	imagerel ccedict_arith+83
	DD	imagerel $unwind$ccedict_arith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_enter DD imagerel ccedict_enter
	DD	imagerel ccedict_enter+57
	DD	imagerel $unwind$ccedict_enter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_jump DD imagerel ccedict_jump
	DD	imagerel ccedict_jump+62
	DD	imagerel $unwind$ccedict_jump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_fjump DD imagerel ccedict_fjump
	DD	imagerel ccedict_fjump+74
	DD	imagerel $unwind$ccedict_fjump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_call DD imagerel ccedict_call
	DD	imagerel ccedict_call+69
	DD	imagerel $unwind$ccedict_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_return DD imagerel ccedict_return
	DD	imagerel ccedict_return+57
	DD	imagerel $unwind$ccedict_return
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_address DD imagerel ccedict_address
	DD	imagerel ccedict_address+69
	DD	imagerel $unwind$ccedict_address
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccvalue DD imagerel ccvalue
	DD	imagerel ccvalue+58
	DD	imagerel $unwind$ccvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctype DD imagerel cctype
	DD	imagerel cctype+55
	DD	imagerel $unwind$cctype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock DD imagerel ccblock
	DD	imagerel ccblock+36
	DD	imagerel $unwind$ccblock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccprocd DD imagerel ccprocd
	DD	imagerel ccprocd+54
	DD	imagerel $unwind$ccprocd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_global DD imagerel ccemit_global
	DD	imagerel ccemit_global+39
	DD	imagerel $unwind$ccemit_global
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_include_global DD imagerel ccemit_include_global
	DD	imagerel ccemit_include_global+100
	DD	imagerel $unwind$ccemit_include_global
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_global_procd DD imagerel ccemit_global_procd
	DD	imagerel ccemit_global_procd+682
	DD	imagerel $unwind$ccemit_global_procd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccvalue_retarget DD imagerel ccvalue_retarget
	DD	imagerel ccvalue_retarget+42
	DD	imagerel $unwind$ccvalue_retarget
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_add DD imagerel ccblock_add
	DD	imagerel ccblock_add+240
	DD	imagerel $unwind$ccblock_add
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_add_edict DD imagerel ccblock_add_edict
	DD	imagerel ccblock_add_edict+265
	DD	imagerel $unwind$ccblock_add_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccprocd_local DD imagerel ccprocd_local
	DD	imagerel ccprocd_local+86
	DD	imagerel $unwind$ccprocd_local
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_store DD imagerel ccblock_store
	DD	imagerel ccblock_store+92
	DD	imagerel $unwind$ccblock_store
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_fetch DD imagerel ccblock_fetch
	DD	imagerel ccblock_fetch+92
	DD	imagerel $unwind$ccblock_fetch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_address DD imagerel ccblock_address
	DD	imagerel ccblock_address+92
	DD	imagerel $unwind$ccblock_address
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_arith DD imagerel ccblock_arith
	DD	imagerel ccblock_arith+106
	DD	imagerel $unwind$ccblock_arith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_enter DD imagerel ccblock_enter
	DD	imagerel ccblock_enter+79
	DD	imagerel $unwind$ccblock_enter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_return DD imagerel ccblock_return
	DD	imagerel ccblock_return+79
	DD	imagerel $unwind$ccblock_return
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_invoke DD imagerel ccblock_invoke
	DD	imagerel ccblock_invoke+92
	DD	imagerel $unwind$ccblock_invoke
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_jump DD imagerel ccblock_jump
	DD	imagerel ccblock_jump+99
	DD	imagerel $unwind$ccblock_jump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_fjump DD imagerel ccblock_fjump
	DD	imagerel ccblock_fjump+111
	DD	imagerel $unwind$ccblock_fjump
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_hash_init DD imagerel cclex_hash_init
	DD	imagerel cclex_hash_init+1810
	DD	imagerel $unwind$cclex_hash_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_next_token_internal DD imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+52
	DD	imagerel $unwind$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cclex_next_token_internal DD imagerel cclex_next_token_internal+52
	DD	imagerel cclex_next_token_internal+1600
	DD	imagerel $chain$2$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cclex_next_token_internal DD imagerel cclex_next_token_internal+1600
	DD	imagerel cclex_next_token_internal+1747
	DD	imagerel $chain$3$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cclex_next_token_internal DD imagerel cclex_next_token_internal+1747
	DD	imagerel cclex_next_token_internal+2084
	DD	imagerel $chain$4$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_next_token DD imagerel cclex_next_token
	DD	imagerel cclex_next_token+61
	DD	imagerel $unwind$cclex_next_token
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_identifier DD imagerel cclex_identifier
	DD	imagerel cclex_identifier+194
	DD	imagerel $unwind$cclex_identifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_readstr DD imagerel cclex_readstr
	DD	imagerel cclex_readstr+699
	DD	imagerel $unwind$cclex_readstr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_all_tokens DD imagerel ccread_all_tokens
	DD	imagerel ccread_all_tokens+290
	DD	imagerel $unwind$ccread_all_tokens
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccreader_move DD imagerel ccreader_move
	DD	imagerel ccreader_move+8
	DD	imagerel $unwind$ccreader_move
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$ccreader_move DD imagerel ccreader_move+8
	DD	imagerel ccreader_move+329
	DD	imagerel $chain$5$ccreader_move
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$ccreader_move DD imagerel ccreader_move+329
	DD	imagerel ccreader_move+359
	DD	imagerel $chain$6$ccreader_move
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_include DD imagerel ccread_include
	DD	imagerel ccread_include+9
	DD	imagerel $unwind$ccread_include
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$ccread_include DD imagerel ccread_include+9
	DD	imagerel ccread_include+505
	DD	imagerel $chain$5$ccread_include
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$ccread_include DD imagerel ccread_include+505
	DD	imagerel ccread_include+533
	DD	imagerel $chain$6$ccread_include
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_arglist DD imagerel ccread_arglist
	DD	imagerel ccread_arglist+434
	DD	imagerel $unwind$ccread_arglist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_expression DD imagerel ccread_expression
	DD	imagerel ccread_expression+163
	DD	imagerel $unwind$ccread_expression
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_cast DD imagerel ccread_cast
	DD	imagerel ccread_cast+141
	DD	imagerel $unwind$ccread_cast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_litide DD imagerel ccread_litide
	DD	imagerel ccread_litide+193
	DD	imagerel $unwind$ccread_litide
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_primary DD imagerel ccread_primary
	DD	imagerel ccread_primary+535
	DD	imagerel $unwind$ccread_primary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_postfix DD imagerel ccread_postfix
	DD	imagerel ccread_postfix+123
	DD	imagerel $unwind$ccread_postfix
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_postfix DD imagerel ccread_postfix+123
	DD	imagerel ccread_postfix+549
	DD	imagerel $chain$1$ccread_postfix
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_postfix DD imagerel ccread_postfix+549
	DD	imagerel ccread_postfix+1143
	DD	imagerel $chain$2$ccread_postfix
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_unary DD imagerel ccread_unary
	DD	imagerel ccread_unary+586
	DD	imagerel $unwind$ccread_unary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_multiplicative DD imagerel ccread_multiplicative
	DD	imagerel ccread_multiplicative+292
	DD	imagerel $unwind$ccread_multiplicative
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_additive DD imagerel ccread_additive
	DD	imagerel ccread_additive+277
	DD	imagerel $unwind$ccread_additive
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_shift DD imagerel ccread_shift
	DD	imagerel ccread_shift+277
	DD	imagerel $unwind$ccread_shift
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_relational DD imagerel ccread_relational
	DD	imagerel ccread_relational+307
	DD	imagerel $unwind$ccread_relational
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_equality DD imagerel ccread_equality
	DD	imagerel ccread_equality+42
	DD	imagerel $unwind$ccread_equality
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_equality DD imagerel ccread_equality+42
	DD	imagerel ccread_equality+292
	DD	imagerel $chain$0$ccread_equality
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_equality DD imagerel ccread_equality+292
	DD	imagerel ccread_equality+395
	DD	imagerel $chain$1$ccread_equality
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_bitwise_and DD imagerel ccread_bitwise_and
	DD	imagerel ccread_bitwise_and+262
	DD	imagerel $unwind$ccread_bitwise_and
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_bitwise_xor DD imagerel ccread_bitwise_xor
	DD	imagerel ccread_bitwise_xor+262
	DD	imagerel $unwind$ccread_bitwise_xor
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_bitwise_or DD imagerel ccread_bitwise_or
	DD	imagerel ccread_bitwise_or+262
	DD	imagerel $unwind$ccread_bitwise_or
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_logical_and DD imagerel ccread_logical_and
	DD	imagerel ccread_logical_and+262
	DD	imagerel $unwind$ccread_logical_and
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_logical_or DD imagerel ccread_logical_or
	DD	imagerel ccread_logical_or+262
	DD	imagerel $unwind$ccread_logical_or
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_conditional DD imagerel ccread_conditional
	DD	imagerel ccread_conditional+100
	DD	imagerel $unwind$ccread_conditional
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_conditional DD imagerel ccread_conditional+100
	DD	imagerel ccread_conditional+251
	DD	imagerel $chain$1$ccread_conditional
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_conditional DD imagerel ccread_conditional+251
	DD	imagerel ccread_conditional+273
	DD	imagerel $chain$2$ccread_conditional
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_assignment DD imagerel ccread_assignment
	DD	imagerel ccread_assignment+168
	DD	imagerel $unwind$ccread_assignment
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_param_type_list DD imagerel ccread_param_type_list
	DD	imagerel ccread_param_type_list+394
	DD	imagerel $unwind$ccread_param_type_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_decl_name DD imagerel ccread_decl_name
	DD	imagerel ccread_decl_name+61
	DD	imagerel $unwind$ccread_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_declaration_specifiers DD imagerel ccread_declaration_specifiers
	DD	imagerel ccread_declaration_specifiers+132
	DD	imagerel $unwind$ccread_declaration_specifiers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_specifier_qualifier_list DD imagerel ccread_specifier_qualifier_list
	DD	imagerel ccread_specifier_qualifier_list+121
	DD	imagerel $unwind$ccread_specifier_qualifier_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+116
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier+116
	DD	imagerel ccread_direct_decl_name_modifier+123
	DD	imagerel $chain$0$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier+123
	DD	imagerel ccread_direct_decl_name_modifier+471
	DD	imagerel $chain$1$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier+471
	DD	imagerel ccread_direct_decl_name_modifier+683
	DD	imagerel $chain$2$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier+683
	DD	imagerel ccread_direct_decl_name_modifier+938
	DD	imagerel $chain$3$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_direct_decl_name DD imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+115
	DD	imagerel $unwind$ccread_direct_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_direct_decl_name DD imagerel ccread_direct_decl_name+115
	DD	imagerel ccread_direct_decl_name+466
	DD	imagerel $chain$0$ccread_direct_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_direct_decl_name DD imagerel ccread_direct_decl_name+466
	DD	imagerel ccread_direct_decl_name+725
	DD	imagerel $chain$1$ccread_direct_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_decl_name_modifier_maybe DD imagerel ccread_decl_name_modifier_maybe
	DD	imagerel ccread_decl_name_modifier_maybe+156
	DD	imagerel $unwind$ccread_decl_name_modifier_maybe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_init_decl_name DD imagerel ccread_init_decl_name
	DD	imagerel ccread_init_decl_name+182
	DD	imagerel $unwind$ccread_init_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_struct_decl_name DD imagerel ccread_struct_decl_name
	DD	imagerel ccread_struct_decl_name+182
	DD	imagerel $unwind$ccread_struct_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_init_decl_name_list DD imagerel ccread_init_decl_name_list
	DD	imagerel ccread_init_decl_name_list+469
	DD	imagerel $unwind$ccread_init_decl_name_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_struct_decl_name_list DD imagerel ccread_struct_decl_name_list
	DD	imagerel ccread_struct_decl_name_list+469
	DD	imagerel $unwind$ccread_struct_decl_name_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_init_decl DD imagerel ccread_init_decl
	DD	imagerel ccread_init_decl+124
	DD	imagerel $unwind$ccread_init_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_struct_decl DD imagerel ccread_struct_decl
	DD	imagerel ccread_struct_decl+124
	DD	imagerel $unwind$ccread_struct_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+97
	DD	imagerel $unwind$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+97
	DD	imagerel ccread_struct_or_union_specifier+105
	DD	imagerel $chain$0$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+105
	DD	imagerel ccread_struct_or_union_specifier+566
	DD	imagerel $chain$3$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+566
	DD	imagerel ccread_struct_or_union_specifier+697
	DD	imagerel $chain$4$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+697
	DD	imagerel ccread_struct_or_union_specifier+721
	DD	imagerel $chain$5$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+721
	DD	imagerel ccread_struct_or_union_specifier+765
	DD	imagerel $chain$6$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_type_specifier DD imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+55
	DD	imagerel $unwind$ccread_type_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_type_specifier DD imagerel ccread_type_specifier+55
	DD	imagerel ccread_type_specifier+86
	DD	imagerel $chain$0$ccread_type_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_type_specifier DD imagerel ccread_type_specifier+86
	DD	imagerel ccread_type_specifier+532
	DD	imagerel $chain$1$ccread_type_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_param_decl DD imagerel ccread_param_decl
	DD	imagerel ccread_param_decl+135
	DD	imagerel $unwind$ccread_param_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_param_decl_list DD imagerel ccread_param_decl_list
	DD	imagerel ccread_param_decl_list+394
	DD	imagerel $unwind$ccread_param_decl_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_block DD imagerel ccread_block
	DD	imagerel ccread_block+100
	DD	imagerel $unwind$ccread_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_block DD imagerel ccread_block+100
	DD	imagerel ccread_block+271
	DD	imagerel $chain$0$ccread_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_block DD imagerel ccread_block+271
	DD	imagerel ccread_block+297
	DD	imagerel $chain$1$ccread_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_statement_list DD imagerel ccread_statement_list
	DD	imagerel ccread_statement_list+60
	DD	imagerel $unwind$ccread_statement_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_statement_list DD imagerel ccread_statement_list+60
	DD	imagerel ccread_statement_list+294
	DD	imagerel $chain$2$ccread_statement_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccread_statement_list DD imagerel ccread_statement_list+294
	DD	imagerel ccread_statement_list+310
	DD	imagerel $chain$3$ccread_statement_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_statement DD imagerel ccread_statement
	DD	imagerel ccread_statement+1451
	DD	imagerel $unwind$ccread_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_block_or_single_stmt DD imagerel ccread_block_or_single_stmt
	DD	imagerel ccread_block_or_single_stmt+64
	DD	imagerel $unwind$ccread_block_or_single_stmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_external_declaration DD imagerel ccread_external_declaration
	DD	imagerel ccread_external_declaration+151
	DD	imagerel $unwind$ccread_external_declaration
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_translation_unit DD imagerel ccread_translation_unit
	DD	imagerel ccread_translation_unit+401
	DD	imagerel $unwind$ccread_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_lvalue DD imagerel ccemit_lvalue
	DD	imagerel ccemit_lvalue+50
	DD	imagerel $unwind$ccemit_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccemit_lvalue DD imagerel ccemit_lvalue+50
	DD	imagerel ccemit_lvalue+146
	DD	imagerel $chain$0$ccemit_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccemit_lvalue DD imagerel ccemit_lvalue+146
	DD	imagerel ccemit_lvalue+180
	DD	imagerel $chain$1$ccemit_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_rvalue DD imagerel ccemit_rvalue
	DD	imagerel ccemit_rvalue+47
	DD	imagerel $unwind$ccemit_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccemit_rvalue DD imagerel ccemit_rvalue+47
	DD	imagerel ccemit_rvalue+129
	DD	imagerel $chain$0$ccemit_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccemit_rvalue DD imagerel ccemit_rvalue+129
	DD	imagerel ccemit_rvalue+149
	DD	imagerel $chain$1$ccemit_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccemit_rvalue DD imagerel ccemit_rvalue+149
	DD	imagerel ccemit_rvalue+267
	DD	imagerel $chain$2$ccemit_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccemit_rvalue DD imagerel ccemit_rvalue+267
	DD	imagerel ccemit_rvalue+294
	DD	imagerel $chain$3$ccemit_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_to_type DD imagerel cctree_to_type
	DD	imagerel cctree_to_type+45
	DD	imagerel $unwind$cctree_to_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cctree_to_type DD imagerel cctree_to_type+45
	DD	imagerel cctree_to_type+141
	DD	imagerel $chain$0$cctree_to_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cctree_to_type DD imagerel cctree_to_type+141
	DD	imagerel cctree_to_type+204
	DD	imagerel $chain$1$cctree_to_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_include_local DD imagerel ccemit_include_local
	DD	imagerel ccemit_include_local+156
	DD	imagerel $unwind$ccemit_include_local
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_constant DD imagerel ccemit_constant
	DD	imagerel ccemit_constant+76
	DD	imagerel $unwind$ccemit_constant
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_const_i32 DD imagerel ccemit_const_i32
	DD	imagerel ccemit_const_i32+64
	DD	imagerel $unwind$ccemit_const_i32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_resolve DD imagerel ccemit_resolve
	DD	imagerel ccemit_resolve+98
	DD	imagerel $unwind$ccemit_resolve
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_invoke_easy DD imagerel ccemit_invoke_easy
	DD	imagerel ccemit_invoke_easy+421
	DD	imagerel $unwind$ccemit_invoke_easy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_tree DD imagerel ccemit_tree
	DD	imagerel ccemit_tree+965
	DD	imagerel $unwind$ccemit_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_treelist DD imagerel ccemit_treelist
	DD	imagerel ccemit_treelist+123
	DD	imagerel $unwind$ccemit_treelist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_decl_name DD imagerel ccemit_decl_name
	DD	imagerel ccemit_decl_name+246
	DD	imagerel $unwind$ccemit_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_decl DD imagerel ccemit_decl
	DD	imagerel ccemit_decl+303
	DD	imagerel $unwind$ccemit_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_param DD imagerel ccemit_param
	DD	imagerel ccemit_param+145
	DD	imagerel $unwind$ccemit_param
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_function DD imagerel ccemit_function
	DD	imagerel ccemit_function+38
	DD	imagerel $unwind$ccemit_function
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccemit_function DD imagerel ccemit_function+38
	DD	imagerel ccemit_function+240
	DD	imagerel $chain$1$ccemit_function
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccemit_function DD imagerel ccemit_function+240
	DD	imagerel ccemit_function+374
	DD	imagerel $chain$2$ccemit_function
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_external_decl DD imagerel ccemit_external_decl
	DD	imagerel ccemit_external_decl+514
	DD	imagerel $unwind$ccemit_external_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_translation_unit DD imagerel ccemit_translation_unit
	DD	imagerel ccemit_translation_unit+147
	DD	imagerel $unwind$ccemit_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_sizeof DD imagerel ccexec_sizeof
	DD	imagerel ccexec_sizeof+106
	DD	imagerel $unwind$ccexec_sizeof
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_mingle DD imagerel ccstack_mingle
	DD	imagerel ccstack_mingle+50
	DD	imagerel $unwind$ccstack_mingle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_yield DD imagerel ccstack_yield
	DD	imagerel ccstack_yield+106
	DD	imagerel $unwind$ccstack_yield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_yield_rvalue DD imagerel ccstack_yield_rvalue
	DD	imagerel ccstack_yield_rvalue+223
	DD	imagerel $unwind$ccstack_yield_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_yield_lvalue DD imagerel ccstack_yield_lvalue
	DD	imagerel ccstack_yield_lvalue+51
	DD	imagerel $unwind$ccstack_yield_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccstack_yield_lvalue DD imagerel ccstack_yield_lvalue+51
	DD	imagerel ccstack_yield_lvalue+137
	DD	imagerel $chain$0$ccstack_yield_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccstack_yield_lvalue DD imagerel ccstack_yield_lvalue+137
	DD	imagerel ccstack_yield_lvalue+146
	DD	imagerel $chain$1$ccstack_yield_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_local_alloc DD imagerel ccstack_local_alloc
	DD	imagerel ccstack_local_alloc+185
	DD	imagerel $unwind$ccstack_local_alloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_invoke DD imagerel ccexec_invoke
	DD	imagerel ccexec_invoke+44
	DD	imagerel $unwind$ccexec_invoke
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ccexec_invoke DD imagerel ccexec_invoke+44
	DD	imagerel ccexec_invoke+576
	DD	imagerel $chain$4$ccexec_invoke
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$ccexec_invoke DD imagerel ccexec_invoke+576
	DD	imagerel ccexec_invoke+794
	DD	imagerel $chain$5$ccexec_invoke
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_edict DD imagerel ccexec_edict
	DD	imagerel ccexec_edict+92
	DD	imagerel $unwind$ccexec_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccexec_edict DD imagerel ccexec_edict+92
	DD	imagerel ccexec_edict+1070
	DD	imagerel $chain$0$ccexec_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccexec_edict DD imagerel ccexec_edict+1070
	DD	imagerel ccexec_edict+1418
	DD	imagerel $chain$2$ccexec_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccexec_edict DD imagerel ccexec_edict+1418
	DD	imagerel ccexec_edict+1518
	DD	imagerel $chain$3$ccexec_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ccexec_edict DD imagerel ccexec_edict+1518
	DD	imagerel ccexec_edict+1727
	DD	imagerel $chain$4$ccexec_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_translation_unit DD imagerel ccexec_translation_unit
	DD	imagerel ccexec_translation_unit+192
	DD	imagerel $unwind$ccexec_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_init DD imagerel ccexec_init
	DD	imagerel ccexec_init+60
	DD	imagerel $unwind$ccexec_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_type DD imagerel $LN11
	DD	imagerel $LN11+30
	DD	imagerel $unwind$gen_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_vectype DD imagerel $LN13
	DD	imagerel $LN13+49
	DD	imagerel $unwind$gen_vectype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_ptrtype DD imagerel $LN13
	DD	imagerel $LN13+35
	DD	imagerel $unwind$gen_ptrtype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_vartype DD imagerel $LN13
	DD	imagerel $LN13+67
	DD	imagerel $unwind$gen_vartype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_fixtype DD imagerel $LN13
	DD	imagerel $LN13+51
	DD	imagerel $unwind$gen_fixtype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_typename_ex DD imagerel $LN10
	DD	imagerel $LN10+228
	DD	imagerel $unwind$gen_typename_ex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_typename DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$gen_typename
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_typename DD imagerel $LN6
	DD	imagerel $LN6+60
	DD	imagerel $unwind$emit_typename
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_vardecl_ex DD imagerel $LN55
	DD	imagerel $LN55+313
	DD	imagerel $unwind$emit_vardecl_ex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_vardecl DD imagerel $LN55
	DD	imagerel $LN55+212
	DD	imagerel $unwind$emit_vardecl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_fundecl DD imagerel $LN18
	DD	imagerel $LN18+149
	DD	imagerel $unwind$emit_fundecl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$emit_fundecl DD imagerel $LN18+149
	DD	imagerel $LN18+212
	DD	imagerel $chain$0$emit_fundecl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$emit_fundecl DD imagerel $LN18+212
	DD	imagerel $LN18+247
	DD	imagerel $chain$1$emit_fundecl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$genmake DD imagerel $LN29
	DD	imagerel $LN29+414
	DD	imagerel $unwind$genmake
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_vecoprari DD imagerel $LN62
	DD	imagerel $LN62+323
	DD	imagerel $unwind$emit_vecoprari
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$emit_vecoprari DD imagerel $LN62+323
	DD	imagerel $LN62+387
	DD	imagerel $chain$0$emit_vecoprari
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$emit_vecoprari DD imagerel $LN62+387
	DD	imagerel $LN62+438
	DD	imagerel $chain$1$emit_vecoprari
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_vectype DD imagerel $LN273
	DD	imagerel $LN273+1758
	DD	imagerel $unwind$emit_vectype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_type DD imagerel $LN57
	DD	imagerel $LN57+26
	DD	imagerel $unwind$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$emit_type DD imagerel $LN57+26
	DD	imagerel $LN57+43
	DD	imagerel $chain$0$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$emit_type DD imagerel $LN57+43
	DD	imagerel $LN57+231
	DD	imagerel $chain$2$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$emit_type DD imagerel $LN57+231
	DD	imagerel $LN57+236
	DD	imagerel $chain$3$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$emit_type DD imagerel $LN57+236
	DD	imagerel $LN57+248
	DD	imagerel $chain$4$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?fib@@YAHH@Z DD imagerel $LN5
	DD	imagerel $LN5+16
	DD	imagerel $unwind$?fib@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?fib@@YAHH@Z DD imagerel $LN5+16
	DD	imagerel $LN5+49
	DD	imagerel $chain$0$?fib@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?fib@@YAHH@Z DD imagerel $LN5+49
	DD	imagerel $LN5+57
	DD	imagerel $chain$1$?fib@@YAHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN303
	DD	imagerel $LN303+27
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$main DD imagerel $LN303+27
	DD	imagerel $LN303+115
	DD	imagerel $chain$1$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$main DD imagerel $LN303+115
	DD	imagerel $LN303+706
	DD	imagerel $chain$2$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$main DD imagerel $LN303+706
	DD	imagerel $LN303+1006
	DD	imagerel $chain$3$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$main DD imagerel $LN303+1006
	DD	imagerel $LN303+1645
	DD	imagerel $chain$4$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$main DD imagerel $LN303+1645
	DD	imagerel $LN303+1719
	DD	imagerel $chain$5$main
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_09JFGGGBPA@gen?4ktt?4c@
CONST	SEGMENT
??_C@_09JFGGGBPA@gen?4ktt?4c@ DB 'gen.ktt.c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CEP@GDNJNAFF@?$CDdefine?5f64?5double?$AN?6?$CDdefine?5f32@
CONST	SEGMENT
??_C@_0CEP@GDNJNAFF@?$CDdefine?5f64?5double?$AN?6?$CDdefine?5f32@ DB '#de'
	DB	'fine f64 double', 0dH, 0aH, '#define f32 float', 0dH, 0aH, '#'
	DB	'ifdef _MSC_VER', 0dH, 0aH, '# define i64 signed   __int64', 0dH
	DB	0aH, '# define u64 unsigned __int64', 0dH, 0aH, '# define i32 '
	DB	'signed   __int32', 0dH, 0aH, '# define u32 unsigned __int32', 0dH
	DB	0aH, '# define i16 signed   __int16', 0dH, 0aH, '# define u16 '
	DB	'unsigned __int16', 0dH, 0aH, '# define i8  signed   __int8', 0dH
	DB	0aH, '# define u8  unsigned __int8', 0dH, 0aH, '#else', 0dH, 0aH
	DB	'# define i64 signed   long long', 0dH, 0aH, '# define u64 uns'
	DB	'igned long long', 0dH, 0aH, '# define i32 signed   int', 0dH, 0aH
	DB	'# define u32 unsigned int', 0dH, 0aH, '# define i16 signed   '
	DB	'short', 0dH, 0aH, '# define u16 unsigned short', 0dH, 0aH, '#'
	DB	' define i8  signed   char', 0dH, 0aH, '# define u8  unsigned '
	DB	'char', 0dH, 0aH, '#endif', 0dH, 0aH, '#define c8  char', 0dH, 0aH
	DB	'#define c16 wchar_t', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHMBJCF@log@
CONST	SEGMENT
??_C@_03MGHMBJCF@log@ DB 'log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NHHCNFG@c?3?$CFi?5?9?5cc?3?$CFi@
CONST	SEGMENT
??_C@_0N@NHHCNFG@c?3?$CFi?5?9?5cc?3?$CFi@ DB 'c:%i - cc:%i', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IALGNGGL@done?5in?5?$CFf?6@
CONST	SEGMENT
??_C@_0M@IALGNGGL@done?5in?5?$CFf?6@ DB 'done in %f', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNJAJELN@test?4svm?4c@
CONST	SEGMENT
??_C@_0L@NNJAJELN@test?4svm?4c@ DB 'test.svm.c', 00H	; `string'
CONST	ENDS
;	COMDAT ?ts@?2??main@@9@4QBUkttcc_type@@B
CONST	SEGMENT
?ts@?2??main@@9@4QBUkttcc_type@@B DD 02H		; `main'::`3'::ts
	DD	03H
	DD	040H
	DD	020H
	ORG $+16
	DD	02H
	DD	00H
	DD	040H
	DD	08H
	ORG $+16
	DD	02H
	DD	01H
	DD	040H
	DD	08H
	ORG $+16
	DD	02H
	DD	02H
	DD	08H
	DD	08H
	ORG $+16
CONST	ENDS
;	COMDAT ??_C@_02FKMDLLOA@?9?$DN@
CONST	SEGMENT
??_C@_02FKMDLLOA@?9?$DN@ DB '-=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FOEOMHFC@?$CL?$DN@
CONST	SEGMENT
??_C@_02FOEOMHFC@?$CL?$DN@ DB '+=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FJEHGPIO@?1?$DN@
CONST	SEGMENT
??_C@_02FJEHGPIO@?1?$DN@ DB '/=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPIMKNGF@?$CK?$DN@
CONST	SEGMENT
??_C@_02FPIMKNGF@?$CK?$DN@ DB '*=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LKGCEJK@?$DL?$AN?6@
CONST	SEGMENT
??_C@_03LKGCEJK@?$DL?$AN?6@ DB ';', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MJBDPJEM@?$HN?5@
CONST	SEGMENT
??_C@_02MJBDPJEM@?$HN?5@ DB '} ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDJEOHF@?$AN?6?5?5@
CONST	SEGMENT
??_C@_04DDJEOHF@?$AN?6?5?5@ DB 0dH, 0aH, '  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHJONKJL@typedef?5struct?5@
CONST	SEGMENT
??_C@_0BA@GHJONKJL@typedef?5struct?5@ DB 'typedef struct ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
CONST	SEGMENT
??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@ DB 0dH
	DB	0aH, '  r.%c=a.%c%cb.%c;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PBLGLLIO@?$CJ?$AN?6@
CONST	SEGMENT
??_C@_03PBLGLLIO@?$CJ?$AN?6@ DB ')', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
CONST	SEGMENT
??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@ DB 'static %s op'
	DB	'erator %s (', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFNJCDHL@?$HN?$AN?6@
CONST	SEGMENT
??_C@_03LFNJCDHL@?$HN?$AN?6@ DB '}', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
CONST	SEGMENT
??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@ DB 0dH, 0aH, '  return '
	DB	'r;', 0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@
CONST	SEGMENT
??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@ DB 0dH, 0aH, '  r.%c=%c'
	DB	';', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNJOIFPO@?$HL?5@
CONST	SEGMENT
??_C@_02MNJOIFPO@?$HL?5@ DB '{ ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPLDLMAM@?$CFsm@
CONST	SEGMENT
??_C@_03MPLDLMAM@?$CFsm@ DB '%sm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JEGEICAJ@?$AN?6?$CFs@
CONST	SEGMENT
??_C@_04JEGEICAJ@?$AN?6?$CFs@ DB 0dH, 0aH, '%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PGOEDBHP@static?5@
CONST	SEGMENT
??_C@_07PGOEDBHP@static?5@ DB 'static ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5@ DB '%s ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GPECMEKF@?$FL?$FN@
CONST	SEGMENT
??_C@_02GPECMEKF@?$FL?$FN@ DB '[]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HNPIGOCE@?$CG@
CONST	SEGMENT
??_C@_01HNPIGOCE@?$CG@ DB '&', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKIJPMHF@x?$CFi@
CONST	SEGMENT
??_C@_03PKIJPMHF@x?$CFi@ DB 'x%i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELIBNAHE@?$CFc?$CFi_?$CFi@
CONST	SEGMENT
??_C@_07ELIBNAHE@?$CFc?$CFi_?$CFi@ DB '%c%i_%i', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JDNGKEJO@?$CFc?$CFi@
CONST	SEGMENT
??_C@_04JDNGKEJO@?$CFc?$CFi@ DB '%c%i', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EHKFBNPG@arg?90@
CONST	SEGMENT
??_C@_05EHKFBNPG@arg?90@ DB 'arg-0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GPCJKLEN@zro@
CONST	SEGMENT
??_C@_03GPCJKLEN@zro@ DB 'zro', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NOFDAMLB@internal?9error@
CONST	SEGMENT
??_C@_0P@NOFDAMLB@internal?9error@ DB 'internal-error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EHCHHCKH@?$DM?$DN@
CONST	SEGMENT
??_C@_02EHCHHCKH@?$DM?$DN@ DB '<=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM@ DB '<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEKDKGMJ@?$DO?$DN@
CONST	SEGMENT
??_C@_02EEKDKGMJ@?$DO?$DN@ DB '>=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KKIOMGKI@local_alloc@
CONST	SEGMENT
??_C@_0M@KKIOMGKI@local_alloc@ DB 'local_alloc', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CGIBHDEL@constant?9value@
CONST	SEGMENT
??_C@_0P@CGIBHDEL@constant?9value@ DB 'constant-value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@
CONST	SEGMENT
??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@ DB 'value kind'
	DB	' is invalid, did you register this value and not set its cont'
	DB	'ents?', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main@
CONST	SEGMENT
??_C@_04GHJNJNPO@main@ DB 'main', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKGMLFO@?4JP?9WL@
CONST	SEGMENT
??_C@_06MKGMLFO@?4JP?9WL@ DB '.JP-WL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LKHFMGFB@integer@
CONST	SEGMENT
??_C@_07LKHFMGFB@integer@ DB 'integer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HIFJDKLD@array@
CONST	SEGMENT
??_C@_05HIFJDKLD@array@ DB 'array', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MIHHJFNA@invalid?5statement@
CONST	SEGMENT
??_C@_0BC@MIHHJFNA@invalid?5statement@ DB 'invalid statement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@KEPEEDEI@invalid?5statement?0?5missing?5?8?3?8?5@
CONST	SEGMENT
??_C@_0DE@KEPEEDEI@invalid?5statement?0?5missing?5?8?3?8?5@ DB 'invalid s'
	DB	'tatement, missing '':'' for label statement?', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IGLIBKMB@missing?5goto?5label?5identifier@
CONST	SEGMENT
??_C@_0BO@IGLIBKMB@missing?5goto?5label?5identifier@ DB 'missing goto lab'
	DB	'el identifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BPNOKPDK@expected?5statement@
CONST	SEGMENT
??_C@_0BD@BPNOKPDK@expected?5statement@ DB 'expected statement', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BPFNKLEG@expected?5?8?$CI?8@
CONST	SEGMENT
??_C@_0N@BPFNKLEG@expected?5?8?$CI?8@ DB 'expected ''(''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EHBOIFGG@expected?5expression@
CONST	SEGMENT
??_C@_0BE@EHBOIFGG@expected?5expression@ DB 'expected expression', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HFCKEHBN@expected?5?8?$HN?8@
CONST	SEGMENT
??_C@_0N@HFCKEHBN@expected?5?8?$HN?8@ DB 'expected ''}''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NANEDLOL@unexpected?5?8?4?4?4?8?0?5must?5be?5at?5en@
CONST	SEGMENT
??_C@_0CN@NANEDLOL@unexpected?5?8?4?4?4?8?0?5must?5be?5at?5en@ DB 'unexpe'
	DB	'cted ''...'', must be at end of function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FDBKEOAC@expected?5?8?$HN?8?5for?5struct?5specifi@
CONST	SEGMENT
??_C@_0CC@FDBKEOAC@expected?5?8?$HN?8?5for?5struct?5specifi@ DB 'expected'
	DB	' ''}'' for struct specifier', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BDNLGGP@expected?5?8?$DL?8@
CONST	SEGMENT
??_C@_0N@BDNLGGP@expected?5?8?$DL?8@ DB 'expected '';''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ODCHBMFC@expected?5?8?$HL?8?5for?5struct?5specifi@
CONST	SEGMENT
??_C@_0CC@ODCHBMFC@expected?5?8?$HL?8?5for?5struct?5specifi@ DB 'expected'
	DB	' ''{'' for struct specifier', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MJILOMBI@expected?5declarator@
CONST	SEGMENT
??_C@_0BE@MJILOMBI@expected?5declarator@ DB 'expected declarator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MONPNMKA@expected?5constant?5expression?5af@
CONST	SEGMENT
??_C@_0CH@MONPNMKA@expected?5constant?5expression?5af@ DB 'expected const'
	DB	'ant expression after '':''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HCJGMMGM@expected?5initializer?5after?5?8?$DN?8@
CONST	SEGMENT
??_C@_0BP@HCJGMMGM@expected?5initializer?5after?5?8?$DN?8@ DB 'expected i'
	DB	'nitializer after ''=''', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNHMNFH@function?5that?5returns?5array@
CONST	SEGMENT
??_C@_0BM@MNHMNFH@function?5that?5returns?5array@ DB 'function that retur'
	DB	'ns array', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMEPACKF@war@
CONST	SEGMENT
??_C@_03HMEPACKF@war@ DB 'war', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IKEJFDCA@function?5that?5returns?5function@
CONST	SEGMENT
??_C@_0BP@IKEJFDCA@function?5that?5returns?5function@ DB 'function that r'
	DB	'eturns function', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@CFADJNLG@expected?5?8?3?8?5invalid?5conditiona@
CONST	SEGMENT
??_C@_0CM@CFADJNLG@expected?5?8?3?8?5invalid?5conditiona@ DB 'expected '''
	DB	':'' invalid conditional expression', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@ENGHABPN@expected?5?8?$FN?8@
CONST	SEGMENT
??_C@_0N@ENGHABPN@expected?5?8?$FN?8@ DB 'expected '']''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@
CONST	SEGMENT
??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@ DB 'expected '')''', 00H ; `string'
CONST	ENDS
;	COMDAT ?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
_DATA	SEGMENT
?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A DD 01H		; `ccpeek'::`2'::end_tok
	ORG $+4
	ORG $+24
_DATA	ENDS
;	COMDAT ??_C@_08DLICDMBN@continue@
CONST	SEGMENT
??_C@_08DLICDMBN@continue@ DB 'continue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELPHFHOI@break@
CONST	SEGMENT
??_C@_05ELPHFHOI@break@ DB 'break', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MABHPDAO@goto@
CONST	SEGMENT
??_C@_04MABHPDAO@goto@ DB 'goto', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNAFDCHJ@do@
CONST	SEGMENT
??_C@_02KNAFDCHJ@do@ DB 'do', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while@
CONST	SEGMENT
??_C@_05OODBEKIG@while@ DB 'while', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JOHEBPFF@for@
CONST	SEGMENT
??_C@_03JOHEBPFF@for@ DB 'for', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default@
CONST	SEGMENT
??_C@_07DLHCIBDH@default@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKOINMPC@case@
CONST	SEGMENT
??_C@_04CKOINMPC@case@ DB 'case', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHMCPBIP@else@
CONST	SEGMENT
??_C@_04FHMCPBIP@else@ DB 'else', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOPOGBGP@switch@
CONST	SEGMENT
??_C@_06DOPOGBGP@switch@ DB 'switch', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if@
CONST	SEGMENT
??_C@_02HEBPBKGD@if@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOEMFGDG@__declspec@
CONST	SEGMENT
??_C@_0L@LOEMFGDG@__declspec@ DB '__declspec', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@COIIMKFA@_Thread_local@
CONST	SEGMENT
??_C@_0O@COIIMKFA@_Thread_local@ DB '_Thread_local', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGHJAEBN@static@
CONST	SEGMENT
??_C@_06GGHJAEBN@static@ DB 'static', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHHIDNEP@register@
CONST	SEGMENT
??_C@_08DHHIDNEP@register@ DB 'register', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PAMNHHEG@extern@
CONST	SEGMENT
??_C@_06PAMNHHEG@extern@ DB 'extern', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HAPDLBFF@auto@
CONST	SEGMENT
??_C@_04HAPDLBFF@auto@ DB 'auto', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FIDIHKEG@typedef@
CONST	SEGMENT
??_C@_07FIDIHKEG@typedef@ DB 'typedef', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBJBIPGK@struct@
CONST	SEGMENT
??_C@_06PBJBIPGK@struct@ DB 'struct', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBJPMPLO@enum@
CONST	SEGMENT
??_C@_04DBJPMPLO@enum@ DB 'enum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LPOMPHGP@_Atomic@
CONST	SEGMENT
??_C@_07LPOMPHGP@_Atomic@ DB '_Atomic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLEDNCDB@_Complex@
CONST	SEGMENT
??_C@_08PLEDNCDB@_Complex@ DB '_Complex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HIFAKALE@_Bool@
CONST	SEGMENT
??_C@_05HIFAKALE@_Bool@ DB '_Bool', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKJNKENE@void@
CONST	SEGMENT
??_C@_04GKJNKENE@void@ DB 'void', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENMBGAPA@char@
CONST	SEGMENT
??_C@_04ENMBGAPA@char@ DB 'char', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFKKPKCG@short@
CONST	SEGMENT
??_C@_05BFKKPKCG@short@ DB 'short', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int@
CONST	SEGMENT
??_C@_03JBIPMCLC@int@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOKPGOLB@long@
CONST	SEGMENT
??_C@_04GOKPGOLB@long@ DB 'long', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNFBNCOH@float@
CONST	SEGMENT
??_C@_05KNFBNCOH@float@ DB 'float', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNJCAIGJ@double@
CONST	SEGMENT
??_C@_06BNJCAIGJ@double@ DB 'double', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFCOJCAC@__int64@
CONST	SEGMENT
??_C@_07LFCOJCAC@__int64@ DB '__int64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OFLPPHGP@__int32@
CONST	SEGMENT
??_C@_07OFLPPHGP@__int32@ DB '__int32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICFHOGAF@__int16@
CONST	SEGMENT
??_C@_07ICFHOGAF@__int16@ DB '__int16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGKOKIG@__int8@
CONST	SEGMENT
??_C@_06EBGKOKIG@__int8@ DB '__int8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CLLOMHGD@unsigned@
CONST	SEGMENT
??_C@_08CLLOMHGD@unsigned@ DB 'unsigned', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPIODIKA@signed@
CONST	SEGMENT
??_C@_06CPIODIKA@signed@ DB 'signed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JEIHJDJD@_Noreturn@
CONST	SEGMENT
??_C@_09JEIHJDJD@_Noreturn@ DB '_Noreturn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGMBMJA@inline@
CONST	SEGMENT
??_C@_06OGMBMJA@inline@ DB 'inline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PABEKFH@volatile@
CONST	SEGMENT
??_C@_08PABEKFH@volatile@ DB 'volatile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NGGFOJBB@restrict@
CONST	SEGMENT
??_C@_08NGGFOJBB@restrict@ DB 'restrict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BNCCCJPP@const@
CONST	SEGMENT
??_C@_05BNCCCJPP@const@ DB 'const', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPCLHPMJ@_Alignas@
CONST	SEGMENT
??_C@_08IPCLHPMJ@_Alignas@ DB '_Alignas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LCAALENH@_Alignof@
CONST	SEGMENT
??_C@_08LCAALENH@_Alignof@ DB '_Alignof', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJBNGECK@__vectorcal@
CONST	SEGMENT
??_C@_0M@FJBNGECK@__vectorcal@ DB '__vectorcal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NPHFGOKO@__thiscall@
CONST	SEGMENT
??_C@_0L@NPHFGOKO@__thiscall@ DB '__thiscall', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IFJBGAPI@__stdcall@
CONST	SEGMENT
??_C@_09IFJBGAPI@__stdcall@ DB '__stdcall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FEOELIIN@__inline@
CONST	SEGMENT
??_C@_08FEOELIIN@__inline@ DB '__inline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMKHOMEK@__fastcall@
CONST	SEGMENT
??_C@_0L@JMKHOMEK@__fastcall@ DB '__fastcall', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIJEGCPM@__clrcall@
CONST	SEGMENT
??_C@_09HIJEGCPM@__clrcall@ DB '__clrcall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOLFKCDI@__cdecl@
CONST	SEGMENT
??_C@_07KOLFKCDI@__cdecl@ DB '__cdecl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BECPAABE@__based@
CONST	SEGMENT
??_C@_07BECPAABE@__based@ DB '__based', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNIOPOB@__asm@
CONST	SEGMENT
??_C@_05MNIOPOB@__asm@ DB '__asm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMOJBBHE@$leave@
CONST	SEGMENT
??_C@_06LMOJBBHE@$leave@ DB '$leave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JABCEPLP@$enter@
CONST	SEGMENT
??_C@_06JABCEPLP@$enter@ DB '$enter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PHJKMIOD@$decls@
CONST	SEGMENT
??_C@_06PHJKMIOD@$decls@ DB '$decls', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LHEPONKL@address@
CONST	SEGMENT
??_C@_07LHEPONKL@address@ DB 'address', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return@
CONST	SEGMENT
??_C@_06LNOFJDNM@return@ DB 'return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJMAOIE@invoke@
CONST	SEGMENT
??_C@_06HJMAOIE@invoke@ DB 'invoke', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHEOCMON@enter@
CONST	SEGMENT
??_C@_05IHEOCMON@enter@ DB 'enter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGHFKIKG@arith@
CONST	SEGMENT
??_C@_05LGHFKIKG@arith@ DB 'arith', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MCKKOJDL@fetch@
CONST	SEGMENT
??_C@_05MCKKOJDL@fetch@ DB 'fetch', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ODGDKDLF@store@
CONST	SEGMENT
??_C@_05ODGDKDLF@store@ DB 'store', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BIKCLCJM@?8?$CFs?8?3?5variable?5redefinition@
CONST	SEGMENT
??_C@_0BM@BIKCLCJM@?8?$CFs?8?3?5variable?5redefinition@ DB '''%s'': varia'
	DB	'ble redefinition', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@GIHPCBBO@?8?$CFs?8?3?5local?5function?5defintions@
CONST	SEGMENT
??_C@_0CM@GIHPCBBO@?8?$CFs?8?3?5local?5function?5defintions@ DB '''%s'': '
	DB	'local function defintions are illegal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MBJGJGMK@?$CFs?3?5already?5has?5a?5body@
CONST	SEGMENT
??_C@_0BH@MBJGJGMK@?$CFs?3?5already?5has?5a?5body@ DB '%s: already has a '
	DB	'body', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LHDDGHLD@?8?$CFs?8?3?5undeclared?5rvalue?5identif@
CONST	SEGMENT
??_C@_0CD@LHDDGHLD@?8?$CFs?8?3?5undeclared?5rvalue?5identif@ DB '''%s'': '
	DB	'undeclared rvalue identifier', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IALNCJCC@?8?$CFs?8?3?5undeclared?5lvalue?5identif@
CONST	SEGMENT
??_C@_0CD@IALNCJCC@?8?$CFs?8?3?5undeclared?5lvalue?5identif@ DB '''%s'': '
	DB	'undeclared lvalue identifier', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OPCFLBFB@?$CFs?3?5identifier?5not?5found@
CONST	SEGMENT
??_C@_0BJ@OPCFLBFB@?$CFs?3?5identifier?5not?5found@ DB '%s: identifier no'
	DB	't found', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@MHKFGEKJ@?8?$CFs?$FL0x?$CFx?$FN?8?3?5invalid?5mingling?5tr@
CONST	SEGMENT
??_C@_0DP@MHKFGEKJ@?8?$CFs?$FL0x?$CFx?$FN?8?3?5invalid?5mingling?5tr@ DB ''''
	DB	'%s[0x%x]'': invalid mingling tree, expected CALL or IDENTIFIE'
	DB	'R', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03JIDPIAJI@err@
CONST	SEGMENT
??_C@_03JIDPIAJI@err@ DB 'err', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@MCEJNCBN@?8?$CFs?$FL0x?$CFx?$FN?8?3?5uncoupled?5tree?0?5?8?$CFs@
CONST	SEGMENT
??_C@_0DN@MCEJNCBN@?8?$CFs?$FL0x?$CFx?$FN?8?3?5uncoupled?5tree?0?5?8?$CFs@ DB ''''
	DB	'%s[0x%x]'': uncoupled tree, ''%s'', checker did not do its jo'
	DB	'b', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GMJDDHPH@?$CFs?3?5?$CFs?$FL?$CFi?$FN?5?$CFs?$CI?$CJ?5?$CFs?6@
CONST	SEGMENT
??_C@_0BE@GMJDDHPH@?$CFs?3?5?$CFs?$FL?$CFi?$FN?5?$CFs?$CI?$CJ?5?$CFs?6@ DB '%'
	DB	's: %s[%i] %s() %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJEJBNFP@Inf@
CONST	SEGMENT
??_C@_03EJEJBNFP@Inf@ DB 'Inf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICJPMMHB@NaN@
CONST	SEGMENT
??_C@_03ICJPMMHB@NaN@ DB 'NaN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JPHLCBNH@_kMGT@
CONST	SEGMENT
??_C@_05JPHLCBNH@_kMGT@ DB '_kMGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOLKAOND@_KMGT@
CONST	SEGMENT
??_C@_05FOLKAOND@_KMGT@ DB '_KMGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null@
CONST	SEGMENT
??_C@_04MLLLIHIP@null@ DB 'null', 00H			; `string'
CONST	ENDS
;	COMDAT ?hexu@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hexu@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789ABCDEFXP', 00H ; `stbsp_vsprintfcb'::`2'::hexu
_DATA	ENDS
;	COMDAT ?hex@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hex@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789abcdefxp', 00H ; `stbsp_vsprintfcb'::`2'::hex
_DATA	ENDS
_DATA	SEGMENT
stbsp__period DB 02eH
stbsp__comma DB	02cH
	ORG $+14
stbsp__digitpair DW 00H
	DB	'00010203040506070809101112131415161718192021222324252627'
	DB	'2829303132333435363738394041424344454647484950515253545556575'
	DB	'8596061626364656667686970717273747576777879808182838485868788'
	DB	'8990919293949596979899', 00H
	ORG $+1
	ORG $+4
cctree_s DQ	FLAT:??_C@_09BNMCJOFC@kTYPENAME@
	DQ	FLAT:??_C@_07IAHFONEC@kSTRUCT@
	DQ	FLAT:??_C@_05OIHGIEOB@kENUM@
	DQ	FLAT:??_C@_05KGDOEPLA@kFUNC@
	DQ	FLAT:??_C@_06BGNALLDP@kARRAY@
	DQ	FLAT:??_C@_08FFICFHPK@kPOINTER@
	DQ	FLAT:??_C@_0M@HPBCLLBC@kIDENTIFIER@
	DQ	FLAT:??_C@_08BKDFKOGL@kINTEGER@
	DQ	FLAT:??_C@_06MDNIFDGL@kFLOAT@
	DQ	FLAT:??_C@_07PDINNHKE@kSTRING@
	DQ	FLAT:??_C@_06JGJHMLIN@kBLOCK@
	DQ	FLAT:??_C@_06ONKLFMOE@kLABEL@
	DQ	FLAT:??_C@_07MMABPBPE@kRETURN@
	DQ	FLAT:??_C@_05BJPOLIFB@kGOTO@
	DQ	FLAT:??_C@_06IALIMLAK@kWHILE@
	DQ	FLAT:??_C@_09OLCPCPNM@kDECLNAME@
	DQ	FLAT:??_C@_05DKHMEND@kDECL@
	DQ	FLAT:??_C@_08IBPDDPIF@kTERNARY@
	DQ	FLAT:??_C@_07CMLFGGDM@kBINARY@
	DQ	FLAT:??_C@_06HHELGEGJ@kUNARY@
	DQ	FLAT:??_C@_06KIBHGHIF@kGROUP@
	DQ	FLAT:??_C@_05DFLJMIKJ@kCALL@
	DQ	FLAT:??_C@_06DEPDNCAP@kINDEX@
	DQ	FLAT:??_C@_06FGJJDDNF@kTUNIT@
	DQ	FLAT:??_C@_0N@HHACOGAC@t_designator@
	DQ	FLAT:??_C@_0O@CEJCEKBM@t_designation@
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$main DD 021H
	DD	imagerel $LN303
	DD	imagerel $LN303+27
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$main DD 020021H
	DD	022f400H
	DD	imagerel $LN303
	DD	imagerel $LN303+27
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$main DD 021H
	DD	imagerel $LN303+27
	DD	imagerel $LN303+115
	DD	imagerel $chain$1$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$main DD 020821H
	DD	023d408H
	DD	imagerel $LN303+27
	DD	imagerel $LN303+115
	DD	imagerel $chain$1$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$main DD 040c21H
	DD	022f40cH
	DD	02ac404H
	DD	imagerel $LN303
	DD	imagerel $LN303+27
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	071801H
	DD	0240118H
	DD	0700be00dH
	DD	03009600aH
	DD	05008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?fib@@YAHH@Z DD 021H
	DD	imagerel $LN5
	DD	imagerel $LN5+16
	DD	imagerel $unwind$?fib@@YAHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?fib@@YAHH@Z DD 020521H
	DD	063405H
	DD	imagerel $LN5
	DD	imagerel $LN5+16
	DD	imagerel $unwind$?fib@@YAHH@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?fib@@YAHH@Z DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$emit_type DD 021H
	DD	imagerel $LN57
	DD	imagerel $LN57+26
	DD	imagerel $unwind$emit_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$emit_type DD 021H
	DD	imagerel $LN57+26
	DD	imagerel $LN57+43
	DD	imagerel $chain$0$emit_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$emit_type DD 040a21H
	DD	08740aH
	DD	076405H
	DD	imagerel $LN57+26
	DD	imagerel $LN57+43
	DD	imagerel $chain$0$emit_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$emit_type DD 020521H
	DD	065405H
	DD	imagerel $LN57
	DD	imagerel $LN57+26
	DD	imagerel $unwind$emit_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_type DD 040b01H
	DD	09340bH
	DD	0e007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_vectype DD 0c1e01H
	DD	0d741eH
	DD	0c641eH
	DD	0b541eH
	DD	0a341eH
	DD	0f01a521eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$emit_vecoprari DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+323
	DD	imagerel $unwind$emit_vecoprari
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$emit_vecoprari DD 020521H
	DD	086405H
	DD	imagerel $LN62
	DD	imagerel $LN62+323
	DD	imagerel $unwind$emit_vecoprari
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_vecoprari DD 081501H
	DD	0b7415H
	DD	0a5415H
	DD	093415H
	DD	0e0115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$genmake DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$emit_fundecl DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+149
	DD	imagerel $unwind$emit_fundecl
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$emit_fundecl DD 020521H
	DD	06e405H
	DD	imagerel $LN18
	DD	imagerel $LN18+149
	DD	imagerel $unwind$emit_fundecl
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_fundecl DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_vardecl DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_vardecl_ex DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_typename DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_typename DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_typename_ex DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_fixtype DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_vartype DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_ptrtype DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_vectype DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_type DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_init DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_translation_unit DD 081401H
	DD	0c6414H
	DD	0b5414H
	DD	0a3414H
	DD	070107214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ccexec_edict DD 021H
	DD	imagerel ccexec_edict
	DD	imagerel ccexec_edict+92
	DD	imagerel $unwind$ccexec_edict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccexec_edict DD 021H
	DD	imagerel ccexec_edict+92
	DD	imagerel ccexec_edict+1070
	DD	imagerel $chain$0$ccexec_edict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccexec_edict DD 041321H
	DD	016f413H
	DD	017d408H
	DD	imagerel ccexec_edict+92
	DD	imagerel ccexec_edict+1070
	DD	imagerel $chain$0$ccexec_edict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccexec_edict DD 020821H
	DD	01f3408H
	DD	imagerel ccexec_edict
	DD	imagerel ccexec_edict+92
	DD	imagerel $unwind$ccexec_edict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_edict DD 071d01H
	DD	018011dH
	DD	0c00fe011H
	DD	0600c700dH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$ccexec_invoke DD 040021H
	DD	011e400H
	DD	0183400H
	DD	imagerel ccexec_invoke
	DD	imagerel ccexec_invoke+44
	DD	imagerel $unwind$ccexec_invoke
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ccexec_invoke DD 0a3221H
	DD	011e432H
	DD	0183419H
	DD	010f411H
	DD	012c40bH
	DD	0137404H
	DD	imagerel ccexec_invoke
	DD	imagerel ccexec_invoke+44
	DD	imagerel $unwind$ccexec_invoke
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_invoke DD 051a01H
	DD	014011aH
	DD	0600dd00fH
	DD	0500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_local_alloc DD 0a1a01H
	DD	0d741aH
	DD	0c641aH
	DD	0b541aH
	DD	0a341aH
	DD	0e016721aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccstack_yield_lvalue DD 021H
	DD	imagerel ccstack_yield_lvalue
	DD	imagerel ccstack_yield_lvalue+51
	DD	imagerel $unwind$ccstack_yield_lvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccstack_yield_lvalue DD 020521H
	DD	063405H
	DD	imagerel ccstack_yield_lvalue
	DD	imagerel ccstack_yield_lvalue+51
	DD	imagerel $unwind$ccstack_yield_lvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_yield_lvalue DD 020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_yield_rvalue DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_yield DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_mingle DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_sizeof DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_translation_unit DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_external_decl DD 0c2101H
	DD	0d6421H
	DD	0c5421H
	DD	0a3421H
	DD	0f01d3221H
	DD	0d019e01bH
	DD	07015c017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccemit_function DD 021H
	DD	imagerel ccemit_function
	DD	imagerel ccemit_function+38
	DD	imagerel $unwind$ccemit_function
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccemit_function DD 040d21H
	DD	0a640dH
	DD	0bc405H
	DD	imagerel ccemit_function
	DD	imagerel ccemit_function+38
	DD	imagerel $unwind$ccemit_function
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_function DD 081101H
	DD	0c3411H
	DD	0f00d3211H
	DD	0d009e00bH
	DD	050067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_param DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_decl DD 0c2a01H
	DD	0c742aH
	DD	0b6422H
	DD	0a341aH
	DD	0f00a320eH
	DD	0d006e008H
	DD	05002c004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_decl_name DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_treelist DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_tree DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_invoke_easy DD 0b5c01H
	DD	06645cH
	DD	0105454H
	DD	0f0146218H
	DD	0d010e012H
	DD	0700cc00eH
	DD	0300bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_resolve DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_const_i32 DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_constant DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_include_local DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cctree_to_type DD 021H
	DD	imagerel cctree_to_type
	DD	imagerel cctree_to_type+45
	DD	imagerel $unwind$cctree_to_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cctree_to_type DD 020521H
	DD	083405H
	DD	imagerel cctree_to_type
	DD	imagerel cctree_to_type+45
	DD	imagerel $unwind$cctree_to_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_to_type DD 081301H
	DD	0a6413H
	DD	095413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccemit_rvalue DD 021H
	DD	imagerel ccemit_rvalue
	DD	imagerel ccemit_rvalue+47
	DD	imagerel $unwind$ccemit_rvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccemit_rvalue DD 020021H
	DD	083400H
	DD	imagerel ccemit_rvalue
	DD	imagerel ccemit_rvalue+47
	DD	imagerel $unwind$ccemit_rvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccemit_rvalue DD 021H
	DD	imagerel ccemit_rvalue
	DD	imagerel ccemit_rvalue+47
	DD	imagerel $unwind$ccemit_rvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccemit_rvalue DD 020521H
	DD	083405H
	DD	imagerel ccemit_rvalue
	DD	imagerel ccemit_rvalue+47
	DD	imagerel $unwind$ccemit_rvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_rvalue DD 081301H
	DD	0a6413H
	DD	095413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccemit_lvalue DD 021H
	DD	imagerel ccemit_lvalue
	DD	imagerel ccemit_lvalue+50
	DD	imagerel $unwind$ccemit_lvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccemit_lvalue DD 020521H
	DD	067405H
	DD	imagerel ccemit_lvalue
	DD	imagerel ccemit_lvalue+50
	DD	imagerel $unwind$ccemit_lvalue
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_lvalue DD 081501H
	DD	096415H
	DD	085415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_translation_unit DD 0c3701H
	DD	0c7437H
	DD	0a3430H
	DD	0d5412H
	DD	0f00e3212H
	DD	0d00ae00cH
	DD	06006c008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_external_declaration DD 083f01H
	DD	06743fH
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_block_or_single_stmt DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_statement DD 0a1801H
	DD	0c6418H
	DD	0b5418H
	DD	0a3418H
	DD	0f0145218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccread_statement_list DD 021H
	DD	imagerel ccread_statement_list
	DD	imagerel ccread_statement_list+60
	DD	imagerel $unwind$ccread_statement_list
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_statement_list DD 061b21H
	DD	04e41bH
	DD	05540fH
	DD	0c3405H
	DD	imagerel ccread_statement_list
	DD	imagerel ccread_statement_list+60
	DD	imagerel $unwind$ccread_statement_list
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_statement_list DD 061101H
	DD	0f00d5211H
	DD	0c009d00bH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_block DD 021H
	DD	imagerel ccread_block
	DD	imagerel ccread_block+100
	DD	imagerel $unwind$ccread_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_block DD 020521H
	DD	067405H
	DD	imagerel ccread_block
	DD	imagerel ccread_block+100
	DD	imagerel $unwind$ccread_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_block DD 081501H
	DD	096415H
	DD	085415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_param_decl_list DD 0a3601H
	DD	0d3436H
	DD	0f00c3210H
	DD	0d008e00aH
	DD	07004c006H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_param_decl DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_type_specifier DD 021H
	DD	imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+55
	DD	imagerel $unwind$ccread_type_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_type_specifier DD 020521H
	DD	043405H
	DD	imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+55
	DD	imagerel $unwind$ccread_type_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_type_specifier DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$ccread_struct_or_union_specifier DD 021H
	DD	imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+97
	DD	imagerel $unwind$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$ccread_struct_or_union_specifier DD 020021H
	DD	07f400H
	DD	imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+97
	DD	imagerel $unwind$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ccread_struct_or_union_specifier DD 020021H
	DD	07f400H
	DD	imagerel ccread_struct_or_union_specifier+97
	DD	imagerel ccread_struct_or_union_specifier+105
	DD	imagerel $chain$0$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccread_struct_or_union_specifier DD 060f21H
	DD	07f40fH
	DD	08c40aH
	DD	097405H
	DD	imagerel ccread_struct_or_union_specifier+97
	DD	imagerel ccread_struct_or_union_specifier+105
	DD	imagerel $chain$0$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_struct_or_union_specifier DD 020521H
	DD	0a5405H
	DD	imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+97
	DD	imagerel $unwind$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_struct_or_union_specifier DD 051401H
	DD	0e010a214H
	DD	0600cd00eH
	DD	0300bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_struct_decl DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_init_decl DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_struct_decl_name_list DD 0a2301H
	DD	0103423H
	DD	0f01f7223H
	DD	0d01be01dH
	DD	07017c019H
	DD	050156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_init_decl_name_list DD 0a2301H
	DD	0103423H
	DD	0f01f7223H
	DD	0d01be01dH
	DD	07017c019H
	DD	050156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_struct_decl_name DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_init_decl_name DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_decl_name_modifier_maybe DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_direct_decl_name DD 021H
	DD	imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+115
	DD	imagerel $unwind$ccread_direct_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_direct_decl_name DD 020521H
	DD	08c405H
	DD	imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+115
	DD	imagerel $unwind$ccread_direct_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_direct_decl_name DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccread_direct_decl_name_modifier DD 021H
	DD	imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+116
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_direct_decl_name_modifier DD 021H
	DD	imagerel ccread_direct_decl_name_modifier+116
	DD	imagerel ccread_direct_decl_name_modifier+123
	DD	imagerel $chain$0$ccread_direct_decl_name_modifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_direct_decl_name_modifier DD 020521H
	DD	06e405H
	DD	imagerel ccread_direct_decl_name_modifier+116
	DD	imagerel ccread_direct_decl_name_modifier+123
	DD	imagerel $chain$0$ccread_direct_decl_name_modifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_direct_decl_name_modifier DD 020521H
	DD	0f6405H
	DD	imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+116
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_direct_decl_name_modifier DD 071201H
	DD	0f00e6212H
	DD	0c00ad00cH
	DD	050077008H
	DD	03006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_specifier_qualifier_list DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_declaration_specifiers DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_decl_name DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_param_type_list DD 0a3601H
	DD	0d3436H
	DD	0f00c3210H
	DD	0d008e00aH
	DD	07004c006H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_assignment DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_conditional DD 021H
	DD	imagerel ccread_conditional
	DD	imagerel ccread_conditional+100
	DD	imagerel $unwind$ccread_conditional
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_conditional DD 041021H
	DD	0bf410H
	DD	0ae405H
	DD	imagerel ccread_conditional
	DD	imagerel ccread_conditional+100
	DD	imagerel $unwind$ccread_conditional
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_conditional DD 081201H
	DD	0d5412H
	DD	0c3412H
	DD	0c00e5212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_logical_or DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_logical_and DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_bitwise_or DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_bitwise_xor DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_bitwise_and DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_equality DD 021H
	DD	imagerel ccread_equality
	DD	imagerel ccread_equality+42
	DD	imagerel $unwind$ccread_equality
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_equality DD 020521H
	DD	0a7405H
	DD	imagerel ccread_equality
	DD	imagerel ccread_equality+42
	DD	imagerel $unwind$ccread_equality
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_equality DD 0a1901H
	DD	0d6419H
	DD	0c5419H
	DD	0b3419H
	DD	0f0155219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_relational DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_shift DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_additive DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_multiplicative DD 0c2f01H
	DD	08742fH
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_unary DD 081401H
	DD	0106414H
	DD	0f5414H
	DD	0e3414H
	DD	07010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_postfix DD 021H
	DD	imagerel ccread_postfix
	DD	imagerel ccread_postfix+123
	DD	imagerel $unwind$ccread_postfix
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_postfix DD 040a21H
	DD	04d40aH
	DD	0e5405H
	DD	imagerel ccread_postfix
	DD	imagerel ccread_postfix+123
	DD	imagerel $unwind$ccread_postfix
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_postfix DD 071201H
	DD	0f00e4212H
	DD	0c00ae00cH
	DD	060077008H
	DD	03006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_primary DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_litide DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_cast DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_expression DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_arglist DD 0b3601H
	DD	04d436H
	DD	0c342cH
	DD	0f00e4212H
	DD	0c00ae00cH
	DD	060077008H
	DD	05006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$ccread_include DD 021H
	DD	imagerel ccread_include
	DD	imagerel ccread_include+9
	DD	imagerel $unwind$ccread_include
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$ccread_include DD 0cea21H
	DD	011c4eaH
	DD	08f433H
	DD	09e41fH
	DD	0ad411H
	DD	010740aH
	DD	0f6404H
	DD	imagerel ccread_include
	DD	imagerel ccread_include+9
	DD	imagerel $unwind$ccread_include
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_include DD 030901H
	DD	05005a209H
	DD	03004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$ccreader_move DD 021H
	DD	imagerel ccreader_move
	DD	imagerel ccreader_move+8
	DD	imagerel $unwind$ccreader_move
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$ccreader_move DD 0c4a21H
	DD	06c44aH
	DD	0c7435H
	DD	0b6424H
	DD	0a541fH
	DD	04f417H
	DD	05d405H
	DD	imagerel ccreader_move
	DD	imagerel ccreader_move+8
	DD	imagerel $unwind$ccreader_move
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccreader_move DD 030801H
	DD	0e0046208H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_all_tokens DD 0d3901H
	DD	04f439H
	DD	0c7430H
	DD	0b642bH
	DD	0a5426H
	DD	0e008420cH
	DD	0c004d006H
	DD	03002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_readstr DD 0a1901H
	DD	0e3419H
	DD	0f0153219H
	DD	0d011e013H
	DD	0700dc00fH
	DD	0500b600cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_identifier DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_next_token DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cclex_next_token_internal DD 021H
	DD	imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+52
	DD	imagerel $unwind$cclex_next_token_internal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cclex_next_token_internal DD 020021H
	DD	0bf400H
	DD	imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+52
	DD	imagerel $unwind$cclex_next_token_internal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cclex_next_token_internal DD 060f21H
	DD	0bf40fH
	DD	0a540aH
	DD	093405H
	DD	imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+52
	DD	imagerel $unwind$cclex_next_token_internal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_next_token_internal DD 040901H
	DD	0e0053209H
	DD	060027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_hash_init DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_fjump DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_jump DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_invoke DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_return DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_enter DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_arith DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_address DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_fetch DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_store DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccprocd_local DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_add_edict DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_add DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccvalue_retarget DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_global_procd DD 0c1c01H
	DD	0d641cH
	DD	0c541cH
	DD	0b341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_include_global DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_global DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccprocd DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctype DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccvalue DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_address DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_return DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_call DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_fjump DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_jump DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_enter DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_arith DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_fetch DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_store DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_param DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_local DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_translation_unit DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$cctree_solve_decl_name DD 021H
	DD	imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+123
	DD	imagerel $unwind$cctree_solve_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cctree_solve_decl_name DD 060021H
	DD	08e400H
	DD	077400H
	DD	063400H
	DD	imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+123
	DD	imagerel $unwind$cctree_solve_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cctree_solve_decl_name DD 021H
	DD	imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+123
	DD	imagerel $unwind$cctree_solve_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cctree_solve_decl_name DD 061621H
	DD	08e416H
	DD	077411H
	DD	063405H
	DD	imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+123
	DD	imagerel $unwind$cctree_solve_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_decl_name DD 020601H
	DD	060023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_block DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_index DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_call DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_lvalue DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_rvalue DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_binary DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cctree_mingle DD 021H
	DD	imagerel cctree_mingle
	DD	imagerel cctree_mingle+54
	DD	imagerel $unwind$cctree_mingle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cctree_mingle DD 020521H
	DD	086405H
	DD	imagerel cctree_mingle
	DD	imagerel cctree_mingle+54
	DD	imagerel $unwind$cctree_mingle
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_mingle DD 081301H
	DD	0a5413H
	DD	093413H
	DD	0f00f3213H
	DD	0700be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_resolve_symbol DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_include_invokable DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cctree_solve_statement DD 021H
	DD	imagerel cctree_solve_statement
	DD	imagerel cctree_solve_statement+73
	DD	imagerel $unwind$cctree_solve_statement
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cctree_solve_statement DD 020021H
	DD	067400H
	DD	imagerel cctree_solve_statement
	DD	imagerel cctree_solve_statement+73
	DD	imagerel $unwind$cctree_solve_statement
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cctree_solve_statement DD 021H
	DD	imagerel cctree_solve_statement
	DD	imagerel cctree_solve_statement+73
	DD	imagerel $unwind$cctree_solve_statement
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cctree_solve_statement DD 020521H
	DD	067405H
	DD	imagerel cctree_solve_statement
	DD	imagerel cctree_solve_statement+73
	DD	imagerel $unwind$cctree_solve_statement
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_statement DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_decl DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_ternary DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_binary DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_unary DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_litflo DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_litint DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_litide DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_decl DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_decl_name DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_return DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_goto DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_label DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_while DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_block DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_index DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_call DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_group DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_translation_unit DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctreee_struct_specifier DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctreee_function_modifier DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctreee_array_modifier DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctreee_pointer_modifier DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_clone DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_new DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstr_catf DD 061901H
	DD	0e0155219H
	DD	060127013H
	DD	030105011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstr_vcatf DD 081201H
	DD	0a5412H
	DD	093412H
	DD	0e00e3212H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdbl_query DD 0a7601H
	DD	067476H
	DD	096415H
	DD	085415H
	DD	073415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblcat DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$ccdlb_tblini DD 021H
	DD	imagerel ccdlb_tblini
	DD	imagerel ccdlb_tblini+28
	DD	imagerel $unwind$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$ccdlb_tblini DD 021H
	DD	imagerel ccdlb_tblini+28
	DD	imagerel ccdlb_tblini+36
	DD	imagerel $chain$0$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$ccdlb_tblini DD 020021H
	DD	076400H
	DD	imagerel ccdlb_tblini+28
	DD	imagerel ccdlb_tblini+36
	DD	imagerel $chain$0$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$ccdlb_tblini DD 0a1d21H
	DD	04f41dH
	DD	05c419H
	DD	06740fH
	DD	07640bH
	DD	0c5404H
	DD	imagerel ccdlb_tblini+28
	DD	imagerel ccdlb_tblini+36
	DD	imagerel $chain$0$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccdlb_tblini DD 020421H
	DD	0b3404H
	DD	imagerel ccdlb_tblini
	DD	imagerel ccdlb_tblini+28
	DD	imagerel $unwind$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblini DD 020901H
	DD	0e0057209H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_stradd DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_arradd DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_arradd_ DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblset DD 0a1601H
	DD	0e5416H
	DD	0d3416H
	DD	0f0125216H
	DD	0c00ee010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblput DD 0a1601H
	DD	0e5416H
	DD	0d3416H
	DD	0f0125216H
	DD	0c00ee010H
	DD	0600b700cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblget DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccformat DD 021901H
	DD	030153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccformatex DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccformatv DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stbsp__raise_to_power10 DD 021H
	DD	imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+432
	DD	imagerel $unwind$stbsp__raise_to_power10
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stbsp__raise_to_power10 DD 040d21H
	DD	02780dH
	DD	036805H
	DD	imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+432
	DD	imagerel $unwind$stbsp__raise_to_power10
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp__raise_to_power10 DD 061c01H
	DD	0981cH
	DD	018814H
	DD	05007720eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$stbsp__real_to_str DD 021H
	DD	imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel $unwind$stbsp__real_to_str
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stbsp__real_to_str DD 021H
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel stbsp__real_to_str+293
	DD	imagerel $chain$0$stbsp__real_to_str
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stbsp__real_to_str DD 020521H
	DD	0bc405H
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel stbsp__real_to_str+293
	DD	imagerel $chain$0$stbsp__real_to_str
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stbsp__real_to_str DD 020521H
	DD	0a7405H
	DD	imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel $unwind$stbsp__real_to_str
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp__real_to_str DD 081301H
	DD	0d5413H
	DD	0c3413H
	DD	0f00f5213H
	DD	0600be00dH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01780H
	DW	01786H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_vsprintfcb DD 0103b19H
	DD	02d882aH
	DD	02e7825H
	DD	02f6821H
	DD	061011dH
	DD	0e00df00fH
	DD	0c009d00bH
	DD	060067007H
	DD	050043005H
	DD	imagerel __GSHandlerCheck
	DD	02c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_snprintf DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_sprintf DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_vsnprintf DD 051d19H
	DD	04a010bH
	DD	060037004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0240H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_vsprintf DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccpushfile DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccpullfile DD 081401H
	DD	0b6414H
	DD	0a5414H
	DD	093414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccopenfile DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccclocksecs DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccclocktick DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctrace_ DD 051701H
	DD	070138217H
	DD	050116012H
	DD	03010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccinternalalloctr_ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccuseralloctr_ DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
read$ = 96
emit$ = 208
exec$ = 232
argc$ = 336
l$3 = 344
out$4 = 344
argv$ = 344
l$5 = 352
l$6 = 360
main	PROC						; COMDAT
; File W:\cpp\void\ktt-c\test.c
; Line 15
$LN303:
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rdx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r14
	lea	rbp, QWORD PTR [rax-72]
	sub	rsp, 288				; 00000120H
	xorps	xmm0, xmm0
	mov	QWORD PTR [rax+8], r12
; File W:\cpp\void\ktt-c\ccread.c
; Line 10
	movups	XMMWORD PTR read$[rbp-208], xmm0
; File W:\cpp\void\ktt-c\test.c
; Line 15
	mov	QWORD PTR [rax-56], r15
; File W:\cpp\void\ktt-c\cclex.c
; Line 114
	lea	rcx, QWORD PTR read$[rsp]
; File W:\cpp\void\ktt-c\ccread.c
; Line 10
	xor	eax, eax
	movups	XMMWORD PTR read$[rbp-224], xmm0
	mov	QWORD PTR read$[rbp-160], rax
	movups	XMMWORD PTR read$[rbp-192], xmm0
	movups	XMMWORD PTR read$[rsp], xmm0
	movups	XMMWORD PTR read$[rsp+16], xmm0
	movups	XMMWORD PTR read$[rbp-176], xmm0
; File W:\cpp\void\ktt-c\cclex.c
; Line 113
	movups	XMMWORD PTR read$[rbp-216], xmm0
	movups	XMMWORD PTR read$[rbp-200], xmm0
; Line 114
	call	cclex_hash_init
; File W:\cpp\void\ktt-c\test.c
; Line 22
	lea	rdx, OFFSET FLAT:??_C@_0L@NNJAJELN@test?4svm?4c@
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_include
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	mov	rsi, rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+280], r13
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rsi], xmm0
	movups	XMMWORD PTR [rsi+16], xmm0
	movups	XMMWORD PTR [rsi+32], xmm0
	movups	XMMWORD PTR [rsi+48], xmm0
	movups	XMMWORD PTR [rsi+64], xmm0
	movups	XMMWORD PTR [rsi+80], xmm0
	movups	XMMWORD PTR [rsi+96], xmm0
	movups	XMMWORD PTR [rsi+112], xmm0
	movups	XMMWORD PTR [rsi+128], xmm0
	mov	QWORD PTR [rsi+144], rax
; Line 135
	mov	DWORD PTR [rsi], 23
$LN301@main:
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rcx, QWORD PTR read$[rbp-168]
	lea	rdi, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rdx, QWORD PTR read$[rbp-176]
	xor	r14d, r14d
	mov	r12, QWORD PTR gs:88
	cmp	rcx, rdx
	mov	r15d, DWORD PTR _tls_index
	mov	rax, rdi
	cmovb	rax, rcx
; Line 160
	mov	eax, DWORD PTR [rax]
	sub	eax, 64					; 00000040H
	cmp	eax, 7
	ja	SHORT $LN108@main
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN108@main
; Line 96
	mov	QWORD PTR read$[rbp-160], rcx
	add	rcx, 32					; 00000020H
	mov	QWORD PTR read$[rbp-168], rcx
$LN108@main:
; Line 1005
	mov	r8d, 20
	lea	rcx, QWORD PTR read$[rsp]
	mov	rdx, rsi
	call	ccread_type_specifier
; Line 62
	mov	rdx, QWORD PTR read$[rbp-168]
	mov	rcx, rdi
	mov	r8, QWORD PTR read$[rbp-176]
; Line 1005
	mov	rbx, rax
; Line 62
	cmp	rdx, r8
	cmovb	rcx, rdx
; Line 132
	mov	ecx, DWORD PTR [rcx]
	sub	ecx, 36					; 00000024H
	cmp	ecx, 2
	ja	SHORT $LN129@main
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN145@main
; Line 96
	mov	QWORD PTR read$[rbp-160], rdx
	add	rdx, 32					; 00000020H
	mov	QWORD PTR read$[rbp-168], rdx
$LN129@main:
; Line 64
	mov	rax, rdx
	cmp	rdx, r8
	jb	SHORT $LN144@main
$LN145@main:
; Line 69
	mov	rax, rdi
$LN144@main:
; Line 118
	mov	eax, DWORD PTR [rax]
	sub	eax, 32					; 00000020H
	cmp	eax, 1
	ja	SHORT $LN148@main
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN148@main
; Line 96
	mov	QWORD PTR read$[rbp-160], rdx
	add	rdx, 32					; 00000020H
	mov	QWORD PTR read$[rbp-168], rdx
$LN148@main:
; Line 62
	cmp	rdx, r8
	mov	rax, rdi
	cmovb	rax, rdx
; Line 174
	mov	eax, DWORD PTR [rax]
	sub	eax, 41					; 00000029H
	cmp	eax, 1
	ja	SHORT $LN167@main
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN167@main
; Line 96
	mov	QWORD PTR read$[rbp-160], rdx
	add	rdx, 32					; 00000020H
	mov	QWORD PTR read$[rbp-168], rdx
$LN167@main:
; Line 840
	test	rbx, rbx
	je	$LN92@main
; Line 842
	mov	r9, rbx
	lea	rcx, QWORD PTR read$[rsp]
	mov	r8d, 20
	mov	rdx, rsi
	call	ccread_init_decl_name_list
	test	rax, rax
	je	$LN91@main
; Line 843
	mov	r9, rax
	mov	r8, rbx
	mov	edx, 20
	mov	rcx, rsi
	call	cctree_decl
	mov	r13, rax
; Line 1260
	test	rax, rax
	je	$LN92@main
; Line 1265
	mov	rcx, QWORD PTR [rax+32]
	mov	rbx, QWORD PTR [rcx]
; Line 1271
	mov	rcx, QWORD PTR [rbx+48]
	cmp	DWORD PTR [rcx], 3
	jne	SHORT $LN83@main
; Line 1276
	xor	r8d, r8d
	lea	rcx, QWORD PTR read$[rsp]
	mov	rdx, rbx
	call	ccread_block
	mov	QWORD PTR [rbx+88], rax
; Line 1278
	test	rax, rax
	jne	SHORT $LN86@main
$LN83@main:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rax, QWORD PTR read$[rbp-160]
	test	BYTE PTR [rax+16], 2
	jne	SHORT $LN86@main
	lea	rdx, OFFSET FLAT:??_C@_0N@BDNLGGP@expected?5?8?$DL?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN86@main:
	mov	rax, QWORD PTR [rsi+32]
; Line 191
	mov	rdi, r14
; Line 241
	test	rax, rax
; Line 196
	mov	ecx, OFFSET FLAT:ccalloctr
; Line 241
	lea	rbx, QWORD PTR [rax-40]
; Line 196
	mov	rax, QWORD PTR [r12+r15*8]
; Line 241
	cmove	rbx, r14
; Line 196
	mov	r12, QWORD PTR [rcx+rax]
; Line 198
	test	rbx, rbx
	je	SHORT $LN188@main
; Line 199
	mov	rdi, QWORD PTR [rbx+24]
; Line 200
	mov	r14, QWORD PTR [rbx+32]
; Line 202
	mov	r12, QWORD PTR [rbx+8]
$LN188@main:
; Line 209
	lea	r15, QWORD PTR [r14+8]
	mov	rax, rbx
	cmp	rdi, r15
	jae	SHORT $LN191@main
; Line 213
	lea	rax, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rbx
	cmp	rax, r15
	mov	rdi, r15
	cmovae	rdi, rax
	lea	rcx, QWORD PTR [rdi+40]
	call	r12
; Line 220
	test	rbx, rbx
	jne	SHORT $LN191@main
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbx
; Line 224
	mov	QWORD PTR [rax+8], r12
$LN191@main:
; Line 228
	mov	QWORD PTR [rax+24], rdi
; Line 229
	mov	QWORD PTR [rax+32], r15
; Line 242
	add	rax, 40					; 00000028H
; Line 243
	shr	r14, 3
	mov	QWORD PTR [rsi+32], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 1250
	mov	QWORD PTR [rax+r14*8], r13
	jmp	$LN301@main
$LN91@main:
; Line 844
	lea	rdx, OFFSET FLAT:??_C@_0BE@MJILOMBI@expected?5declarator@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN92@main:
; File W:\cpp\void\ktt-c\cccheck.c
; Line 289
	mov	r13, QWORD PTR [rsp+280]
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\ccemit.c
; Line 371
	xor	eax, eax
	movups	XMMWORD PTR emit$[rbp-256], xmm0
	mov	QWORD PTR emit$[rbp-240], rax
; File W:\cpp\void\ktt-c\cccheck.c
; Line 289
	mov	rdi, QWORD PTR [rsi+32]
$LL216@main:
	mov	rbx, QWORD PTR [rsi+32]
	test	rbx, rbx
	je	SHORT $LN218@main
	mov	rax, QWORD PTR [rbx-8]
	jmp	SHORT $LN219@main
$LN218@main:
	mov	rax, r14
$LN219@main:
	and	rax, -8
	add	rax, rbx
	cmp	rdi, rax
	jae	SHORT $LL215@main
	mov	rcx, QWORD PTR [rdi]
	call	cctree_solve_decl
	add	rdi, 8
	jmp	SHORT $LL216@main
	npad	2
$LL215@main:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 366
	mov	rcx, QWORD PTR [rsi+32]
	test	rcx, rcx
	je	SHORT $LN211@main
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN212@main
$LN211@main:
	mov	rax, r14
$LN212@main:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN208@main
	mov	rdx, QWORD PTR [rbx]
	lea	rcx, QWORD PTR emit$[rbp-256]
	call	ccemit_external_decl
	add	rbx, 8
	jmp	SHORT $LL215@main
$LN208@main:
; File W:\cpp\void\ktt-c\ccfio.c
; Line 20
	lea	rcx, QWORD PTR l$5[rbp-256]
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 1073741824				; 40000000H
	call	malloc
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rsi, QWORD PTR [r12+r15*8]
; Line 217
	xor	edx, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	QWORD PTR exec$[rbp-248], rax
; File W:\cpp\void\ktt-c\ccexec.c
; Line 405
	lea	rax, QWORD PTR emit$[rbp-256]
	mov	QWORD PTR exec$[rbp-256], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_05EHKFBNPG@arg?90@
	mov	QWORD PTR $T1[rsp], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	eax, OFFSET FLAT:ccalloctr
; Line 217
	lea	ecx, QWORD PTR [rdx+64]
; File W:\cpp\void\ktt-c\ccexec.c
; Line 421
	mov	QWORD PTR exec$[rbp-240], 1073741824	; 40000000H
; Line 422
	mov	QWORD PTR exec$[rbp-232], r14
; File W:\cpp\void\ktt-c\ccexec.h
; Line 49
	mov	DWORD PTR $T1[rsp+8], 1
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rbx, QWORD PTR [rax+rsi]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR $T1[rsp+16], 22
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	edi, eax
; Line 217
	call	rbx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 408
	movups	xmm0, XMMWORD PTR $T1[rsp]
; Line 411
	lea	r8, QWORD PTR $T2[rsp]
	movsd	xmm1, QWORD PTR $T1[rsp+16]
	lea	rcx, QWORD PTR exec$[rbp-256]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 242
	lea	r9, QWORD PTR [rax+40]
; Line 223
	mov	QWORD PTR [rax+16], r14
; Line 224
	mov	QWORD PTR [rax+8], rbx
; Line 228
	mov	QWORD PTR [rax+24], 24
; Line 229
	mov	QWORD PTR [rax+32], 24
; File W:\cpp\void\ktt-c\ccexec.c
; Line 408
	movups	XMMWORD PTR [r9], xmm0
	movsd	QWORD PTR [r9+16], xmm1
; Line 411
	mov	rdx, QWORD PTR emit$[rbp-240]
	call	ccexec_invoke
; File W:\cpp\void\ktt-c\ccfio.c
; Line 20
	lea	rcx, QWORD PTR l$3[rbp-256]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 21
	mov	rbx, QWORD PTR l$3[rbp-256]
; Line 26
	lea	rcx, QWORD PTR l$6[rbp-256]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\ktt-c\test.c
; Line 47
	sub	rbx, QWORD PTR l$5[rbp-256]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 27
	xorps	xmm1, xmm1
; File W:\cpp\void\ktt-c\test.c
; Line 47
	mov	r12, QWORD PTR [rsp+336]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 27
	js	SHORT $LN294@main
	cvtsi2sd xmm1, rbx
	jmp	SHORT $LN295@main
$LN294@main:
	mov	rax, rbx
	and	ebx, 1
	shr	rax, 1
	or	rax, rbx
	cvtsi2sd xmm1, rax
	addsd	xmm1, xmm1
$LN295@main:
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\test.c
; Line 47
	lea	rcx, OFFSET FLAT:??_C@_0M@IALGNGGL@done?5in?5?$CFf?6@
; File W:\cpp\void\ktt-c\ccfio.c
; Line 27
	cvtsi2sd xmm0, QWORD PTR l$6[rbp-256]
	divsd	xmm1, xmm0
; File W:\cpp\void\ktt-c\test.c
; Line 47
	movq	rdx, xmm1
	call	printf
; File W:\cpp\void\ktt-c\ccread.c
; Line 18
	mov	rax, QWORD PTR read$[rbp-184]
	lea	rcx, QWORD PTR [rax-40]
	test	rax, rax
	jne	SHORT $LN252@main
	mov	rcx, r14
$LN252@main:
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	call	free
; File W:\cpp\void\ktt-c\test.c
; Line 8
	mov	ecx, 21
	call	?fib@@YAHH@Z				; fib
	mov	ecx, 20
	mov	ebx, eax
	call	?fib@@YAHH@Z				; fib
; Line 55
	mov	r9d, DWORD PTR $T2[rsp+16]
	lea	rdx, OFFSET FLAT:??_C@_0N@NHHCNFG@c?3?$CFi?5?9?5cc?3?$CFi@
	lea	rcx, OFFSET FLAT:??_C@_03MGHMBJCF@log@
; Line 9
	lea	r8d, DWORD PTR [rax+rbx]
; Line 55
	call	cctrace_
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rbx, QWORD PTR [rdi+rsi]
; Line 217
	xor	edx, edx
	mov	ecx, 631				; 00000277H
	call	rbx
; Line 256
	lea	rdx, OFFSET FLAT:??_C@_0CEP@GDNJNAFF@?$CDdefine?5f64?5double?$AN?6?$CDdefine?5f32@
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 242
	lea	r8, QWORD PTR [rax+40]
; Line 223
	mov	QWORD PTR [rax+16], r14
; Line 256
	mov	rcx, r8
; Line 224
	mov	QWORD PTR [rax+8], rbx
; Line 228
	mov	QWORD PTR [rax+24], 591			; 0000024fH
; Line 229
	mov	QWORD PTR [rax+32], 590			; 0000024eH
; Line 256
	mov	eax, 4
; Line 242
	mov	QWORD PTR out$4[rbp-256], r8
	npad	2
$LL293@main:
; Line 256
	lea	rcx, QWORD PTR [rcx+128]
	movups	xmm0, XMMWORD PTR [rdx]
	lea	rdx, QWORD PTR [rdx+128]
	movups	XMMWORD PTR [rcx-128], xmm0
	movups	xmm1, XMMWORD PTR [rdx-112]
	movups	XMMWORD PTR [rcx-112], xmm1
	movups	xmm0, XMMWORD PTR [rdx-96]
	movups	XMMWORD PTR [rcx-96], xmm0
	movups	xmm1, XMMWORD PTR [rdx-80]
	movups	XMMWORD PTR [rcx-80], xmm1
	movups	xmm0, XMMWORD PTR [rdx-64]
	movups	XMMWORD PTR [rcx-64], xmm0
	movups	xmm1, XMMWORD PTR [rdx-48]
	movups	XMMWORD PTR [rcx-48], xmm1
	movups	xmm0, XMMWORD PTR [rdx-32]
	movups	XMMWORD PTR [rcx-32], xmm0
	movups	xmm1, XMMWORD PTR [rdx-16]
	movups	XMMWORD PTR [rcx-16], xmm1
	sub	rax, 1
	jne	SHORT $LL293@main
	movups	xmm0, XMMWORD PTR [rdx]
; Line 228
	mov	r15d, r14d
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	lea	rsi, OFFSET FLAT:?ts@?2??main@@9@4QBUkttcc_type@@B+8
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 256
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1
	mov	rax, QWORD PTR [rdx+64]
	mov	QWORD PTR [rcx+64], rax
	mov	eax, DWORD PTR [rdx+72]
	mov	DWORD PTR [rcx+72], eax
	movzx	eax, WORD PTR [rdx+76]
	mov	WORD PTR [rcx+76], ax
; Line 257
	mov	BYTE PTR [r8+590], 0
	npad	7
$LL4@main:
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 325
	cmp	DWORD PTR [rsi-8], 2
	jne	$LN2@main
; Line 327
	mov	r14d, DWORD PTR [rsi+4]
	cmp	r14d, DWORD PTR [rsi]
	jg	$LN2@main
	npad	9
$LL11@main:
; Line 329
	mov	ebx, DWORD PTR [rsi-4]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
	mov	ecx, 32					; 00000020H
	mov	rdi, rax
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 35
	mov	DWORD PTR [rax], 3
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 75
	mov	DWORD PTR [rax+4], ebx
; Line 76
	mov	DWORD PTR [rax+16], r14d
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 331
	mov	rdx, rax
	lea	rcx, QWORD PTR out$4[rbp-256]
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rdi
; Line 46
	mov	DWORD PTR [rax+20], 2
; Line 331
	call	emit_vectype
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 332
	mov	rdx, rax
	lea	rcx, QWORD PTR out$4[rbp-256]
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rdi
; Line 46
	mov	DWORD PTR [rax+20], 3
; Line 332
	call	emit_vectype
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 333
	mov	rdx, rax
	lea	rcx, QWORD PTR out$4[rbp-256]
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rdi
; Line 46
	mov	DWORD PTR [rax+20], 4
; Line 333
	call	emit_vectype
	add	r14d, r14d
	cmp	r14d, DWORD PTR [rsi]
	jle	$LL11@main
$LN2@main:
; File W:\cpp\void\ktt-c\test.c
; Line 94
	inc	r15d
	add	rsi, 32					; 00000020H
	cmp	r15d, 4
	jb	$LL4@main
; File W:\cpp\void\ktt-c\ccfio.c
; Line 47
	xor	r14d, r14d
	lea	rcx, OFFSET FLAT:??_C@_09JFGGGBPA@gen?4ktt?4c@
	mov	QWORD PTR [rsp+48], r14
	xor	r9d, r9d
	mov	DWORD PTR [rsp+40], r14d
	mov	edx, -1073741824			; c0000000H
	mov	DWORD PTR [rsp+32], 4
	lea	r8d, QWORD PTR [r14+3]
	call	QWORD PTR __imp_CreateFileA
; File W:\cpp\void\ktt-c\test.c
; Line 99
	mov	rdi, QWORD PTR out$4[rbp-256]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 48
	mov	ebx, r14d
; File W:\cpp\void\ktt-c\test.c
; Line 99
	mov	r15, QWORD PTR [rsp+272]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 32
	cmp	rax, -1
; Line 48
	cmovne	rbx, rax
; File W:\cpp\void\ktt-c\test.c
; Line 99
	test	rdi, rdi
	je	SHORT $LN6@main
	mov	rsi, QWORD PTR [rdi-8]
	jmp	SHORT $LN7@main
$LN6@main:
	mov	rsi, r14
$LN7@main:
; File W:\cpp\void\ktt-c\ccfio.c
; Line 32
	cmp	rbx, -1
; Line 67
	je	SHORT $LN65@main
; Line 37
	xor	edx, edx
	mov	rcx, rbx
	call	QWORD PTR __imp_GetFileSize
; Line 71
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], r14
	mov	r8d, esi
	mov	rdx, rdi
	mov	rcx, rbx
	call	QWORD PTR __imp_WriteFile
$LN65@main:
; Line 42
	mov	rcx, rbx
	call	QWORD PTR __imp_CloseHandle
; File W:\cpp\void\ktt-c\test.c
; Line 104
	xor	eax, eax
	add	rsp, 288				; 00000120H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?fib@@YAHH@Z
_TEXT	SEGMENT
x$ = 48
?fib@@YAHH@Z PROC					; fib, COMDAT
; File W:\cpp\void\ktt-c\test.c
; Line 6
$LN5:
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	edi, ecx
	cmp	ecx, 2
	jl	SHORT $LN2@fib
; Line 7
	add	ecx, -2
	mov	QWORD PTR [rsp+48], rbx
	call	?fib@@YAHH@Z				; fib
; Line 8
	lea	ecx, DWORD PTR [rdi-1]
	mov	ebx, eax
	call	?fib@@YAHH@Z				; fib
; Line 9
	add	eax, ebx
	mov	rbx, QWORD PTR [rsp+48]
; Line 12
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@fib:
; Line 11
	mov	eax, edi
; Line 12
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?fib@@YAHH@Z ENDP					; fib
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_type
_TEXT	SEGMENT
out$ = 48
t$ = 56
emit_type PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 324
$LN57:
	mov	QWORD PTR [rsp+32], rbx
	push	r14
	sub	rsp, 32					; 00000020H
; Line 325
	cmp	DWORD PTR [rdx], 2
	mov	rbx, rdx
	mov	r14, rcx
	jne	$LN3@emit_type
; Line 327
	mov	QWORD PTR [rsp+48], rbp
	mov	ebp, DWORD PTR [rdx+12]
	cmp	ebp, DWORD PTR [rdx+8]
	jg	$LN55@emit_type
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+64], rdi
	npad	11
$LL4@emit_type:
; Line 329
	mov	edi, DWORD PTR [rbx+4]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
	mov	ecx, 32					; 00000020H
	mov	rsi, rax
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 35
	mov	DWORD PTR [rax], 3
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 75
	mov	DWORD PTR [rax+4], edi
; Line 76
	mov	DWORD PTR [rax+16], ebp
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 331
	mov	rdx, rax
	mov	rcx, r14
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rsi
; Line 46
	mov	DWORD PTR [rax+20], 2
; Line 331
	call	emit_vectype
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 332
	mov	rdx, rax
	mov	rcx, r14
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rsi
; Line 46
	mov	DWORD PTR [rax+20], 3
; Line 332
	call	emit_vectype
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 333
	mov	rdx, rax
	mov	rcx, r14
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rsi
; Line 46
	mov	DWORD PTR [rax+20], 4
; Line 333
	call	emit_vectype
	add	ebp, ebp
	cmp	ebp, DWORD PTR [rbx+8]
	jle	$LL4@emit_type
; Line 327
	mov	rdi, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+56]
$LN55@emit_type:
	mov	rbp, QWORD PTR [rsp+48]
$LN3@emit_type:
; Line 337
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
emit_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_vectype
_TEXT	SEGMENT
out$ = 80
t$ = 88
emit_vectype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 291
$LN273:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
; Line 292
	xor	r15d, r15d
	lea	r14, OFFSET FLAT:fn
	cmp	DWORD PTR [rdx], 4
	mov	rbp, rdx
	mov	rbx, rcx
	jne	$LN270@emit_vecty
; Line 293
	lea	rdx, OFFSET FLAT:??_C@_0BA@GHJONKJL@typedef?5struct?5@
	call	ccstr_catf
; Line 109
	lea	r8d, QWORD PTR [r15+32]
	mov	rcx, rbp
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 295
	lea	rdx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 296
	lea	rdx, OFFSET FLAT:??_C@_01HCONENDN@?$HL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 297
	lea	r12, QWORD PTR [rbp+24]
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN271@emit_vecty
	mov	rdi, r14
	npad	6
$LL4@emit_vecty:
; Line 298
	lea	rdx, OFFSET FLAT:??_C@_04DDJEOHF@?$AN?6?5?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 299
	movzx	r8d, BYTE PTR [rdi]
	mov	rcx, rbx
	mov	rdx, QWORD PTR [r12]
	call	emit_vardecl
; Line 300
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL4@emit_vecty
$LN271@emit_vecty:
; Line 302
	lea	rdx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 303
	lea	rdx, OFFSET FLAT:??_C@_02MJBDPJEM@?$HN?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 305
	lea	rdx, OFFSET FLAT:??_C@_03LKGCEJK@?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
	jmp	SHORT $LN5@emit_vecty
$LN270@emit_vecty:
	lea	r12, QWORD PTR [rdx+24]
$LN5@emit_vecty:
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 184
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rcx, OFFSET FLAT:??_C@_03MPLDLMAM@?$CFsm@
	call	ccformat
	movsxd	rsi, DWORD PTR [rbp+20]
; Line 164
	lea	rdx, OFFSET FLAT:??_C@_07PGOEDBHP@static?5@
; Line 184
	mov	r12, QWORD PTR [r12]
; Line 164
	mov	rcx, rbx
; Line 184
	mov	rdi, rax
; Line 164
	call	ccstr_catf
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 170
	mov	r8, rdi
	lea	rdx, OFFSET FLAT:??_C@_04JEGEICAJ@?$AN?6?$CFs@
	mov	rcx, rbx
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI@
	mov	rcx, rbx
	call	ccstr_catf
; Line 173
	test	rsi, rsi
	jle	SHORT $LN16@emit_vecty
	mov	rdi, r15
	npad	3
$LL17@emit_vecty:
; Line 174
	test	rdi, rdi
	je	SHORT $LN20@emit_vecty
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
$LN20@emit_vecty:
; Line 175
	movzx	r8d, BYTE PTR [rdi+r14]
	mov	rdx, r12
	mov	rcx, rbx
	call	emit_vardecl
	inc	rdi
	cmp	rdi, rsi
	jl	SHORT $LL17@emit_vecty
$LN16@emit_vecty:
; Line 177
	lea	rdx, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ@
	mov	rcx, rbx
	call	ccstr_catf
; Line 187
	lea	rdx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 188
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 190
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 191
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 193
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN9@emit_vecty
	mov	rdi, r14
$LL10@emit_vecty:
; Line 194
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@
	mov	r9d, r8d
	mov	rcx, rbx
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL10@emit_vecty
$LN9@emit_vecty:
; Line 197
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 198
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 203
	lea	r9, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
	mov	rcx, rbx
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	call	ccstr_catf
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN28@emit_vecty
	mov	rdi, r14
	npad	11
$LL29@emit_vecty:
; Line 223
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	mov	DWORD PTR [rsp+40], r8d
	mov	r9d, r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 42			; 0000002aH
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL29@emit_vecty
$LN28@emit_vecty:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 309
	lea	r8, OFFSET FLAT:??_C@_02FPIMKNGF@?$CK?$DN@
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vecoprari
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 203
	lea	r9, OFFSET FLAT:??_C@_01KMDKNFGN@?1@
	mov	rcx, rbx
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	call	ccstr_catf
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN77@emit_vecty
	mov	rdi, r14
	npad	14
$LL78@emit_vecty:
; Line 223
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	mov	DWORD PTR [rsp+40], r8d
	mov	r9d, r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 47			; 0000002fH
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL78@emit_vecty
$LN77@emit_vecty:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 310
	lea	r8, OFFSET FLAT:??_C@_02FJEHGPIO@?1?$DN@
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vecoprari
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 203
	lea	r9, OFFSET FLAT:??_C@_01MIFGBAGJ@?$CL@
	mov	rcx, rbx
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	call	ccstr_catf
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN126@emit_vecty
	mov	rdi, r14
	npad	14
$LL127@emit_vecty:
; Line 223
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	mov	DWORD PTR [rsp+40], r8d
	mov	r9d, r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 43			; 0000002bH
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL127@emit_vecty
$LN126@emit_vecty:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 311
	lea	r8, OFFSET FLAT:??_C@_02FOEOMHFC@?$CL?$DN@
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vecoprari
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 203
	lea	r9, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
	mov	rcx, rbx
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	call	ccstr_catf
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN175@emit_vecty
	npad	4
$LL176@emit_vecty:
; Line 223
	movsx	r8d, BYTE PTR [r14]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	mov	DWORD PTR [rsp+40], r8d
	mov	r9d, r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 45			; 0000002dH
	call	ccstr_catf
	inc	r15d
	lea	r14, QWORD PTR [r14+1]
	cmp	r15d, DWORD PTR [rbp+20]
	jl	SHORT $LL176@emit_vecty
$LN175@emit_vecty:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 312
	lea	r8, OFFSET FLAT:??_C@_02FKMDLLOA@?9?$DN@
	mov	rdx, rbp
	mov	rcx, rbx
; Line 321
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r12
; Line 312
	jmp	emit_vecoprari
emit_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_vecoprari
_TEXT	SEGMENT
out$ = 64
t$ = 72
opr$ = 80
emit_vecoprari PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 202
$LN62:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	r14, r8
	mov	rbx, rcx
; Line 109
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rdi
	mov	r8d, 32					; 00000020H
	call	gen_typename_ex
; Line 203
	mov	r9, r14
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	mov	rcx, rbx
	call	ccstr_catf
; Line 205
	mov	rax, -1
$LL60@emit_vecop:
	inc	rax
	cmp	BYTE PTR [r14+rax], 0
	jne	SHORT $LL60@emit_vecop
	cmp	rax, 2
	jne	SHORT $LN5@emit_vecop
	cmp	BYTE PTR [r14+1], 61			; 0000003dH
	jne	SHORT $LN5@emit_vecop
; Line 109
	lea	r8d, QWORD PTR [rax+30]
	mov	rcx, rdi
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	call	gen_typename_ex
; Line 127
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_03IKGEINEE@?$CFs?5@
	call	ccstr_catf
; Line 121
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
	mov	rcx, rbx
	call	ccstr_catf
; Line 142
	mov	r8d, 97					; 00000061H
	lea	rdx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	jne	SHORT $LN6@emit_vecop
	npad	4
$LL57@emit_vecop:
; Line 122
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	je	SHORT $LL57@emit_vecop
; Line 208
	jmp	SHORT $LN6@emit_vecop
$LN5@emit_vecop:
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rdi
	mov	rcx, rbx
	call	emit_vardecl
$LN6@emit_vecop:
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rdi
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rdi
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	xor	ebp, ebp
	cmp	DWORD PTR [rdi+20], ebp
	jle	SHORT $LN3@emit_vecop
	mov	QWORD PTR [rsp+64], rsi
	lea	rsi, OFFSET FLAT:fn
	npad	1
$LL4@emit_vecop:
; Line 223
	movsx	r8d, BYTE PTR [rsi]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	movsx	eax, BYTE PTR [r14]
	mov	r9d, r8d
	mov	DWORD PTR [rsp+40], r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], eax
	call	ccstr_catf
	inc	ebp
	lea	rsi, QWORD PTR [rsi+1]
	cmp	ebp, DWORD PTR [rdi+20]
	jl	SHORT $LL4@emit_vecop
; Line 222
	mov	rsi, QWORD PTR [rsp+64]
$LN3@emit_vecop:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
; Line 227
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
; Line 226
	jmp	ccstr_catf
emit_vecoprari ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT genmake
_TEXT	SEGMENT
out$ = 64
t$ = 72
genmake	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 183
$LN29:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14, rdx
	mov	rsi, rcx
; Line 109
	mov	rcx, r14
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	r8d, 32					; 00000020H
	call	gen_typename_ex
; Line 184
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rcx, OFFSET FLAT:??_C@_03MPLDLMAM@?$CFsm@
	call	ccformat
	movsxd	r15, DWORD PTR [r14+20]
; Line 164
	lea	rdx, OFFSET FLAT:??_C@_07PGOEDBHP@static?5@
; Line 184
	mov	r12, QWORD PTR [r14+24]
; Line 164
	mov	rcx, rsi
; Line 184
	mov	rbx, rax
; Line 164
	call	ccstr_catf
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, r14
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rsi
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 170
	mov	r8, rbx
	lea	rdx, OFFSET FLAT:??_C@_04JEGEICAJ@?$AN?6?$CFs@
	mov	rcx, rsi
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI@
	mov	rcx, rsi
	call	ccstr_catf
; Line 173
	xor	ebp, ebp
	lea	rdi, OFFSET FLAT:fn
	test	r15, r15
	jle	SHORT $LN10@genmake
	mov	ebx, ebp
$LL11@genmake:
; Line 174
	test	rbx, rbx
	je	SHORT $LN14@genmake
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rsi
	call	ccstr_catf
$LN14@genmake:
; Line 175
	movzx	r8d, BYTE PTR [rbx+rdi]
	mov	rdx, r12
	mov	rcx, rsi
	call	emit_vardecl
	inc	rbx
	cmp	rbx, r15
	jl	SHORT $LL11@genmake
$LN10@genmake:
; Line 177
	lea	rdx, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ@
	mov	rcx, rsi
	call	ccstr_catf
; Line 187
	lea	rdx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6@
	mov	rcx, rsi
	call	ccstr_catf
; Line 188
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rsi
	call	ccstr_catf
; Line 190
	mov	r8b, 114				; 00000072H
	mov	rdx, r14
	mov	rcx, rsi
	call	emit_vardecl
; Line 191
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rsi
	call	ccstr_catf
; Line 193
	cmp	DWORD PTR [r14+20], ebp
	jle	SHORT $LN3@genmake
	npad	2
$LL4@genmake:
; Line 194
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@
	mov	r9d, r8d
	mov	rcx, rsi
	call	ccstr_catf
	inc	ebp
	lea	rdi, QWORD PTR [rdi+1]
	cmp	ebp, DWORD PTR [r14+20]
	jl	SHORT $LL4@genmake
$LN3@genmake:
; Line 197
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rsi
	call	ccstr_catf
; Line 198
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rsi
; Line 199
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
; Line 198
	jmp	ccstr_catf
genmake	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_fundecl
_TEXT	SEGMENT
out$ = 48
t$ = 56
l$ = 64
r$ = 72
n$ = 80
emit_fundecl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 163
$LN18:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	movsxd	rsi, r8d
; Line 164
	lea	rdx, OFFSET FLAT:??_C@_07PGOEDBHP@static?5@
	mov	rbx, r9
	mov	rdi, rcx
	call	ccstr_catf
; Line 165
	test	rbx, rbx
	je	SHORT $LN5@emit_funde
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rdi
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 167
	jmp	SHORT $LN6@emit_funde
$LN5@emit_funde:
; Line 168
	lea	rdx, OFFSET FLAT:??_C@_04GKJNKENE@void@
	mov	rcx, rdi
	call	ccstr_catf
$LN6@emit_funde:
; Line 170
	mov	r8, QWORD PTR n$[rsp]
	lea	rdx, OFFSET FLAT:??_C@_04JEGEICAJ@?$AN?6?$CFs@
	mov	rcx, rdi
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI@
	mov	rcx, rdi
	call	ccstr_catf
; Line 173
	test	rsi, rsi
	jle	SHORT $LN3@emit_funde
	mov	QWORD PTR [rsp+48], r14
	xor	ebx, ebx
	lea	r14, OFFSET FLAT:fn
$LL4@emit_funde:
; Line 174
	test	rbx, rbx
	je	SHORT $LN7@emit_funde
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rdi
	call	ccstr_catf
$LN7@emit_funde:
; Line 175
	movzx	r8d, BYTE PTR [rbx+r14]
	mov	rdx, rbp
	mov	rcx, rdi
	call	emit_vardecl
	inc	rbx
	cmp	rbx, rsi
	jl	SHORT $LL4@emit_funde
; Line 173
	mov	r14, QWORD PTR [rsp+48]
$LN3@emit_funde:
; Line 177
	lea	rdx, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ@
	mov	rcx, rdi
; Line 179
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 177
	jmp	ccstr_catf
emit_fundecl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_vardecl
_TEXT	SEGMENT
out$ = 48
t$ = 56
name$ = 64
emit_vardecl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 158
$LN55:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	movsx	esi, r8b
	mov	rbx, rcx
; Line 109
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rdi
	mov	r8d, 32					; 00000020H
	call	gen_typename_ex
; Line 127
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_03IKGEINEE@?$CFs?5@
	call	ccstr_catf
$LL4@emit_varde:
; Line 135
	mov	eax, DWORD PTR [rdi]
	lea	ecx, DWORD PTR [rax-5]
	cmp	ecx, 1
	ja	SHORT $LN13@emit_varde
; Line 120
	cmp	eax, 5
	jne	SHORT $LN27@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
	mov	rcx, rbx
	call	ccstr_catf
; Line 121
	jmp	SHORT $LL4@emit_varde
$LN27@emit_varde:
	cmp	eax, 6
	jne	SHORT $LN28@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
	mov	rcx, rbx
	call	ccstr_catf
; Line 122
	jmp	SHORT $LL4@emit_varde
$LN28@emit_varde:
	cmp	eax, 7
	jne	SHORT $LL4@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 140
	jmp	SHORT $LL4@emit_varde
$LN13@emit_varde:
; Line 142
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	jne	SHORT $LN18@emit_varde
	npad	9
$LL50@emit_varde:
; Line 122
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	je	SHORT $LL50@emit_varde
$LN18@emit_varde:
; Line 160
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
emit_vardecl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_vardecl_ex
_TEXT	SEGMENT
out$ = 48
t$ = 56
override_modifier$ = 64
name$ = 72
emit_vardecl_ex PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 126
$LN55:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	movsx	esi, r9b
	mov	ebp, r8d
; Line 109
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
; Line 126
	mov	rbx, rcx
; Line 109
	mov	r8d, 32					; 00000020H
	mov	rcx, rdi
	call	gen_typename_ex
; Line 127
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_03IKGEINEE@?$CFs?5@
	call	ccstr_catf
; Line 129
	cmp	ebp, 5
	je	$LN47@emit_varde
	cmp	ebp, 6
	je	SHORT $LN48@emit_varde
	npad	6
$LL2@emit_varde:
; Line 135
	mov	ecx, DWORD PTR [rdi]
	lea	eax, DWORD PTR [rcx-5]
	cmp	eax, 1
	ja	SHORT $LN34@emit_varde
; Line 120
	cmp	ecx, 5
	jne	SHORT $LN25@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
	mov	rcx, rbx
	call	ccstr_catf
; Line 121
	jmp	SHORT $LL2@emit_varde
$LN25@emit_varde:
	cmp	ecx, 6
	jne	SHORT $LN26@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
	mov	rcx, rbx
	call	ccstr_catf
; Line 122
	jmp	SHORT $LL2@emit_varde
$LN26@emit_varde:
	cmp	ecx, 7
	jne	SHORT $LL2@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 140
	jmp	SHORT $LL2@emit_varde
$LN34@emit_varde:
; Line 142
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	mov	rcx, rbx
	call	ccstr_catf
; Line 144
	cmp	ebp, 7
	jne	SHORT $LN14@emit_varde
; Line 122
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 147
	jmp	SHORT $LN16@emit_varde
$LN48@emit_varde:
; Line 121
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
; Line 122
	jmp	SHORT $LN53@emit_varde
$LN47@emit_varde:
; Line 120
	lea	rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
$LN53@emit_varde:
; Line 150
	mov	rcx, rbx
	call	ccstr_catf
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	mov	rcx, rbx
	call	ccstr_catf
$LN14@emit_varde:
	cmp	DWORD PTR [rdi], 7
	jne	SHORT $LN16@emit_varde
	npad	13
$LL50@emit_varde:
; Line 122
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	je	SHORT $LL50@emit_varde
$LN16@emit_varde:
; Line 155
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
emit_vardecl_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_modifier
_TEXT	SEGMENT
out$ = 8
modifier$ = 16
emit_modifier PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 120
	cmp	edx, 5
	jne	SHORT $LN2@emit_modif
	lea	rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
; Line 123
	jmp	ccstr_catf
$LN2@emit_modif:
; Line 121
	cmp	edx, 6
	jne	SHORT $LN3@emit_modif
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
; Line 123
	jmp	ccstr_catf
$LN3@emit_modif:
; Line 122
	cmp	edx, 7
	jne	SHORT $LN4@emit_modif
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
; Line 123
	jmp	ccstr_catf
$LN4@emit_modif:
	ret	0
emit_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_typename
_TEXT	SEGMENT
out$ = 48
t$ = 56
emit_typename PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 114
$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rax, rdx
	mov	rbx, rcx
; Line 109
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	r8d, 32					; 00000020H
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
; Line 116
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 115
	jmp	ccstr_catf
emit_typename ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_typename
_TEXT	SEGMENT
t$ = 48
gen_typename PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 107
$LN4:
	sub	rsp, 40					; 00000028H
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	call	gen_typename_ex
; Line 110
	lea	rax, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
; Line 111
	add	rsp, 40					; 00000028H
	ret	0
gen_typename ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_typename_ex
_TEXT	SEGMENT
t$ = 64
buf$ = 72
len$ = 80
gen_typename_ex PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 87
$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
; Line 88
	mov	eax, DWORD PTR [rcx]
	mov	edi, r8d
	mov	rsi, rdx
	mov	rbx, rcx
	cmp	eax, 3
	jne	SHORT $LN2@gen_typena
; Line 90
	movsxd	rax, DWORD PTR [rcx+4]
	lea	r8, OFFSET FLAT:??_C@_04JDNGKEJO@?$CFc?$CFi@
	lea	rcx, OFFSET FLAT:pf
	mov	edx, edi
	movsx	r9d, BYTE PTR [rax+rcx]
	mov	rcx, rsi
	mov	eax, DWORD PTR [rbx+16]
	mov	DWORD PTR [rsp+32], eax
	call	ccformatex
; Line 104
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN2@gen_typena:
; Line 92
	cmp	eax, 1
	jne	SHORT $LN4@gen_typena
; Line 94
	movsxd	rax, DWORD PTR [rcx+4]
	lea	r8, OFFSET FLAT:??_C@_07ELIBNAHE@?$CFc?$CFi_?$CFi@
	lea	rcx, OFFSET FLAT:pf
	mov	edx, edi
	movsx	r9d, BYTE PTR [rax+rcx]
	mov	rcx, rsi
	mov	eax, DWORD PTR [rbx+12]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR [rbx+8]
	mov	DWORD PTR [rsp+32], eax
	call	ccformatex
; Line 104
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN4@gen_typena:
; Line 96
	cmp	eax, 4
	jne	SHORT $LN6@gen_typena
; Line 98
	mov	rcx, QWORD PTR [rcx+24]
	call	gen_typename_ex
; Line 99
	mov	r9d, DWORD PTR [rbx+20]
	lea	r8, OFFSET FLAT:??_C@_03PKIJPMHF@x?$CFi@
	sub	edi, eax
	movsxd	rcx, eax
	add	rcx, rsi
	mov	edx, edi
; Line 104
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
; Line 99
	jmp	ccformatex
$LN6@gen_typena:
; Line 104
	mov	rbx, QWORD PTR [rsp+64]
	xor	eax, eax
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
gen_typename_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_fixtype
_TEXT	SEGMENT
d$ = 48
b$ = 56
gen_fixtype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 72
$LN13:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 75
	mov	DWORD PTR [rax+4], ebx
; Line 79
	mov	rbx, QWORD PTR [rsp+48]
; Line 35
	mov	DWORD PTR [rax], 3
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 76
	mov	DWORD PTR [rax+16], edi
; Line 79
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
gen_fixtype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_vartype
_TEXT	SEGMENT
d$ = 48
i$ = 56
a$ = 64
gen_vartype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 61
$LN13:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	esi, r8d
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 61
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 64
	mov	DWORD PTR [rax+4], ebx
; Line 69
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax+8], esi
	mov	rsi, QWORD PTR [rsp+56]
; Line 35
	mov	DWORD PTR [rax], 2
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 65
	mov	DWORD PTR [rax+12], edi
; Line 69
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
gen_vartype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_ptrtype
_TEXT	SEGMENT
t$ = 48
gen_ptrtype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 52
$LN13:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 35
	mov	DWORD PTR [rax], 5
; Line 55
	mov	QWORD PTR [rax+24], rbx
; Line 58
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
gen_ptrtype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_vectype
_TEXT	SEGMENT
t$ = 48
length$ = 56
gen_vectype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 42
$LN13:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 45
	mov	QWORD PTR [rax+24], rbx
; Line 49
	mov	rbx, QWORD PTR [rsp+48]
; Line 35
	mov	DWORD PTR [rax], 4
; Line 46
	mov	DWORD PTR [rax+20], edi
; Line 49
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
gen_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_type
_TEXT	SEGMENT
k$ = 48
gen_type PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 32
$LN11:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 35
	mov	DWORD PTR [rax], ebx
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 39
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
gen_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_init
_TEXT	SEGMENT
exec$ = 48
ccexec_init PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 418
	push	rbx
	sub	rsp, 32					; 00000020H
	xorps	xmm0, xmm0
	mov	rbx, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 1073741824				; 40000000H
	call	malloc
; File W:\cpp\void\ktt-c\ccexec.c
; Line 420
	mov	QWORD PTR [rbx+8], rax
; Line 423
	mov	eax, 1
	mov	QWORD PTR [rbx+16], 1073741824		; 40000000H
	mov	QWORD PTR [rbx+24], 0
; Line 424
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccexec_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_translation_unit
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
exec$ = 88
emit$ = 96
ccexec_translation_unit PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 404
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 64					; 00000040H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r9d, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_05EHKFBNPG@arg?90@
	mov	QWORD PTR $T1[rsp], rax
; File W:\cpp\void\ktt-c\ccexec.c
; Line 404
	mov	rsi, rdx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccexec.c
; Line 404
	mov	rbp, rcx
; Line 405
	mov	QWORD PTR [rdx], r8
	mov	rdi, r8
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 217
	xor	edx, edx
	mov	ebx, OFFSET FLAT:ccalloctr
; File W:\cpp\void\ktt-c\ccexec.h
; Line 49
	mov	DWORD PTR $T1[rsp+8], 1
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR [rax+r9*8]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR $T1[rsp+16], 22
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 217
	lea	ecx, QWORD PTR [rdx+64]
	mov	rbx, QWORD PTR [rbx+rax]
	call	rbx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 408
	movups	xmm0, XMMWORD PTR $T1[rsp]
; Line 411
	mov	r8, rbp
	mov	rcx, rsi
	movsd	xmm1, QWORD PTR $T1[rsp+16]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 242
	lea	r9, QWORD PTR [rax+40]
; Line 223
	mov	QWORD PTR [rax+16], 0
; Line 224
	mov	QWORD PTR [rax+8], rbx
; Line 228
	mov	QWORD PTR [rax+24], 24
; Line 229
	mov	QWORD PTR [rax+32], 24
; File W:\cpp\void\ktt-c\ccexec.c
; Line 408
	movups	XMMWORD PTR [r9], xmm0
	movsd	QWORD PTR [r9+16], xmm1
; Line 411
	mov	rdx, QWORD PTR [rdi+16]
	call	ccexec_invoke
; Line 414
	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
ccexec_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_edict
_TEXT	SEGMENT
rval$3$ = 32
$T1 = 32
$T2 = 32
lval$3 = 32
lval$4 = 32
rval$5 = 56
rval$6 = 56
rval$7 = 56
rval$8 = 56
lval$9 = 56
rval$10 = 56
$T11 = 56
$T12 = 56
$T13 = 56
$T14 = 56
lval$15 = 80
rval$16 = 80
$T17 = 80
rval$18 = 80
list$1$ = 104
$T19 = 112
$T20 = 112
$T21 = 112
$T22 = 112
$T23 = 112
$T24 = 112
$T25 = 112
$T26 = 112
$T27 = 112
tv923 = 136
$T28 = 144
$T29 = 152
$T30 = 152
exec$ = 240
stack$ = 248
value$ = 256
sze_min$1$ = 264
ccexec_edict PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 156
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	lea	rbp, QWORD PTR [rsp-55]
	sub	rsp, 192				; 000000c0H
; Line 157
	mov	r9d, DWORD PTR _tls_index
	mov	rdi, rdx
	mov	rax, QWORD PTR gs:88
	xor	esi, esi
	mov	edx, OFFSET FLAT:_Init_thread_epoch
	mov	r12, r8
	mov	rax, QWORD PTR [rax+r9*8]
	mov	QWORD PTR tv923[rbp-137], rax
	mov	eax, DWORD PTR [rdx+rax]
	cmp	DWORD PTR ?$TSS0@?1??ccexec_edict@@9@4HA, eax
	jg	$LN172@ccexec_edi
	jmp	SHORT $LN2@ccexec_edi
$LN165@ccexec_edi:
; Line 164
	mov	rcx, QWORD PTR exec$[rbp-137]
$LN2@ccexec_edi:
	mov	r14, QWORD PTR [r12+48]
	mov	QWORD PTR [rsp+248], rbx
; Line 166
	movsxd	rax, DWORD PTR [r14]
	cmp	eax, 13
	ja	$LN29@ccexec_edi
	lea	rbx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN163@ccexec_edi[rbx+rax*4]
	add	rax, rbx
	jmp	rax
$LN8@ccexec_edi:
; Line 29
	mov	edx, 24
	lea	rcx, QWORD PTR [rdi+24]
	mov	r9, r12
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblget
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [rdi+24]
; Line 32
	cmp	DWORD PTR [rax+rcx*8+8], esi
	jne	$LN29@ccexec_edi
; Line 33
	lea	rdx, OFFSET FLAT:??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
; Line 171
	jmp	$LN29@ccexec_edi
$LN9@ccexec_edi:
; Line 174
	mov	r8, r12
	mov	rdx, rdi
	call	ccstack_local_alloc
; Line 175
	jmp	$LN29@ccexec_edi
$LN10@ccexec_edi:
; Line 185
	mov	r8, QWORD PTR [r14+16]
	lea	rcx, QWORD PTR $T13[rbp-137]
	mov	rbx, QWORD PTR [r14+24]
	mov	rdx, rdi
	call	ccstack_yield_lvalue
; Line 186
	mov	r8, rbx
	lea	rcx, QWORD PTR $T12[rbp-137]
	mov	rdx, rdi
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR lval$4[rbp-121], xmm1
	call	ccstack_yield_rvalue
; Line 191
	mov	rdx, r12
	movsd	xmm1, QWORD PTR [rax+16]
	mov	rax, QWORD PTR lval$4[rbp-121]
	movsd	QWORD PTR rval$18[rbp-121], xmm1
	mov	rcx, QWORD PTR rval$18[rbp-121]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 58
	mov	DWORD PTR $T11[rbp-129], 2
; File W:\cpp\void\ktt-c\ccexec.c
; Line 189
	lea	rcx, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR $T11[rbp-121], rcx
; File W:\cpp\void\ktt-c\ccexec.h
; Line 60
	lea	rax, OFFSET FLAT:??_C@_07LHEPONKL@address@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 191
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccexec.h
; Line 60
	mov	QWORD PTR $T11[rbp-137], rax
; File W:\cpp\void\ktt-c\ccexec.c
; Line 191
	call	ccstack_mingle
; Line 192
	movups	xmm0, XMMWORD PTR $T11[rbp-137]
	movsd	xmm1, QWORD PTR $T11[rbp-121]
	movups	XMMWORD PTR [rax], xmm0
	movsd	QWORD PTR [rax+16], xmm1
; Line 193
	jmp	$LN29@ccexec_edi
$LN11@ccexec_edi:
; Line 201
	mov	r8, QWORD PTR [r14+16]
	lea	rcx, QWORD PTR $T30[rbp-137]
	mov	rbx, QWORD PTR [r14+24]
	mov	rdx, rdi
	call	ccstack_yield_lvalue
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR lval$3[rbp-121], xmm1
; Line 203
	test	rbx, rbx
	je	SHORT $LN12@ccexec_edi
; Line 204
	mov	r8, rbx
	lea	rcx, QWORD PTR $T27[rbp-137]
	mov	rdx, rdi
	call	ccstack_yield_rvalue
	movsd	xmm1, QWORD PTR [rax+16]
	jmp	SHORT $LN166@ccexec_edi
$LN12@ccexec_edi:
; Line 206
	movsd	xmm1, QWORD PTR ?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A+16
$LN166@ccexec_edi:
; Line 211
	mov	rdx, r12
	movsd	QWORD PTR rval$10[rbp-121], xmm1
	mov	rcx, rdi
	call	ccstack_mingle
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	rcx, QWORD PTR rval$10[rbp-121]
	mov	rdx, QWORD PTR lval$3[rbp-121]
	mov	DWORD PTR $T17[rbp-129], 1
	mov	rdx, QWORD PTR [rdx+rcx*8]
; Line 51
	lea	rcx, OFFSET FLAT:??_C@_05MCKKOJDL@fetch@
	mov	QWORD PTR $T17[rbp-137], rcx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 212
	movups	xmm0, XMMWORD PTR $T17[rbp-137]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR $T17[rbp-121], rdx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 212
	movsd	xmm1, QWORD PTR $T17[rbp-121]
	movups	XMMWORD PTR [rax], xmm0
	movsd	QWORD PTR [rax+16], xmm1
; Line 213
	jmp	$LN29@ccexec_edi
$LN14@ccexec_edi:
; Line 217
	mov	r8, QWORD PTR [r14+16]
	lea	rcx, QWORD PTR $T26[rbp-137]
	mov	rdx, rdi
	call	ccstack_yield_lvalue
; Line 218
	mov	r8, QWORD PTR [r14+24]
	lea	rcx, QWORD PTR $T29[rbp-137]
	mov	rdx, rdi
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR lval$9[rbp-121], xmm1
	call	ccstack_yield_rvalue
; Line 223
	mov	rdx, r12
	mov	rcx, rdi
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR rval$3$[rbp-137], xmm0
	movsd	xmm0, QWORD PTR [rax+16]
	mov	rax, QWORD PTR lval$9[rbp-121]
	movsd	QWORD PTR rval$16[rbp-121], xmm0
	mov	rbx, QWORD PTR rval$16[rbp-121]
	mov	QWORD PTR [rax], rbx
	call	ccstack_mingle
; Line 226
	movups	xmm0, XMMWORD PTR rval$3$[rbp-137]
	movq	QWORD PTR [rax], xmm0
	mov	DWORD PTR [rax+8], 1
	mov	QWORD PTR [rax+16], rbx
; Line 227
	jmp	$LN29@ccexec_edi
$LN16@ccexec_edi:
; Line 246
	mov	r8, QWORD PTR [r14+32]
	lea	rcx, QWORD PTR $T25[rbp-137]
	mov	rdx, rdi
	call	ccstack_yield_rvalue
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR rval$8[rbp-121], xmm1
; Line 247
	cmp	DWORD PTR rval$8[rbp-121], esi
	jne	$LN29@ccexec_edi
$LN15@ccexec_edi:
; Line 332
	mov	rax, QWORD PTR [r14+16]
	mov	QWORD PTR [rdi+8], rax
	mov	eax, DWORD PTR [r14+24]
	mov	DWORD PTR [rdi+16], eax
	jmp	$LN29@ccexec_edi
$LN18@ccexec_edi:
; Line 260
	mov	r8, QWORD PTR [r14+32]
	lea	rcx, QWORD PTR $T24[rbp-137]
	mov	rdx, rdi
	call	ccstack_yield_rvalue
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR rval$7[rbp-121], xmm1
; Line 261
	cmp	DWORD PTR rval$7[rbp-121], esi
	je	$LN29@ccexec_edi
; Line 262
	mov	rax, QWORD PTR [r14+16]
	mov	QWORD PTR [rdi+8], rax
; Line 263
	mov	eax, DWORD PTR [r14+24]
	mov	DWORD PTR [rdi+16], eax
; Line 265
	jmp	$LN29@ccexec_edi
$LN20@ccexec_edi:
; Line 274
	mov	r8, QWORD PTR [r14+24]
	lea	rcx, QWORD PTR $T23[rbp-137]
	mov	rdx, rdi
	call	ccstack_yield_rvalue
; Line 275
	mov	r8, QWORD PTR [r14+32]
	lea	rcx, QWORD PTR $T22[rbp-137]
	mov	rdx, rdi
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR lval$15[rbp-121], xmm1
	call	ccstack_yield_rvalue
; Line 277
	mov	rdx, r12
	mov	rcx, rdi
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR rval$6[rbp-121], xmm1
	call	ccstack_mingle
; Line 127
	mov	ecx, DWORD PTR [r14+16]
; Line 277
	mov	r8, rax
; Line 127
	add	ecx, -93				; ffffffffffffffa3H
	cmp	ecx, 26
	ja	$LN132@ccexec_edi
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR $LN161@ccexec_edi[rbx+rcx]
	mov	edx, DWORD PTR $LN162@ccexec_edi[rbx+rcx*4]
	add	rdx, rbx
	jmp	rdx
$LN124@ccexec_edi:
; Line 129
	mov	rax, QWORD PTR rval$6[rbp-121]
	cmp	QWORD PTR lval$15[rbp-121], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01PPODPGHN@?$DO@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 129
	setg	sil
	jmp	$LN167@ccexec_edi
$LN125@ccexec_edi:
; Line 131
	mov	rax, QWORD PTR rval$6[rbp-121]
	cmp	QWORD PTR lval$15[rbp-121], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_02EEKDKGMJ@?$DO?$DN@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 131
	setge	sil
	jmp	$LN167@ccexec_edi
$LN126@ccexec_edi:
; Line 133
	mov	rax, QWORD PTR rval$6[rbp-121]
	cmp	QWORD PTR lval$15[rbp-121], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01MNNFJEPP@?$DM@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 133
	setl	sil
	jmp	SHORT $LN167@ccexec_edi
$LN127@ccexec_edi:
; Line 135
	mov	rax, QWORD PTR rval$6[rbp-121]
	cmp	QWORD PTR lval$15[rbp-121], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_02EHCHHCKH@?$DM?$DN@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 135
	setle	sil
	jmp	SHORT $LN167@ccexec_edi
$LN128@ccexec_edi:
; Line 137
	mov	rax, QWORD PTR rval$6[rbp-121]
	imul	rax, QWORD PTR lval$15[rbp-121]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR $T2[rbp-121], rax
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 137
	jmp	SHORT $LN168@ccexec_edi
$LN129@ccexec_edi:
; Line 139
	mov	rax, QWORD PTR lval$15[rbp-121]
	cdq
	idiv	QWORD PTR rval$6[rbp-121]
	mov	QWORD PTR $T2[rbp-121], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01KMDKNFGN@?1@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 139
	jmp	SHORT $LN168@ccexec_edi
$LN130@ccexec_edi:
; Line 141
	mov	rax, QWORD PTR lval$15[rbp-121]
	sub	rax, QWORD PTR rval$6[rbp-121]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR $T2[rbp-121], rax
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 141
	jmp	SHORT $LN168@ccexec_edi
$LN131@ccexec_edi:
; Line 143
	mov	rcx, QWORD PTR lval$15[rbp-121]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01MIFGBAGJ@?$CL@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 143
	add	rcx, QWORD PTR rval$6[rbp-121]
	mov	QWORD PTR $T2[rbp-121], rcx
	jmp	SHORT $LN168@ccexec_edi
$LN132@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_0P@NOFDAMLB@internal?9error@
$LN167@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 278
	mov	QWORD PTR $T2[rbp-121], rsi
$LN168@ccexec_edi:
	movsd	xmm1, QWORD PTR $T2[rbp-121]
	mov	DWORD PTR $T2[rbp-129], 1
	mov	QWORD PTR $T2[rbp-137], rax
	movups	xmm0, XMMWORD PTR $T2[rbp-137]
	movups	XMMWORD PTR [r8], xmm0
	movsd	QWORD PTR [r8+16], xmm1
; Line 279
	jmp	$LN29@ccexec_edi
$LN21@ccexec_edi:
; Line 283
	mov	rdx, r12
	mov	rcx, rdi
	call	ccstack_mingle
; Line 284
	mov	r8, QWORD PTR [r14+16]
	lea	rcx, QWORD PTR $T21[rbp-137]
	mov	rdx, rdi
	mov	rbx, rax
	call	ccstack_yield_rvalue
	movups	xmm1, XMMWORD PTR [rax]
	movsd	xmm0, QWORD PTR [rax+16]
; Line 285
	xor	eax, eax
	movups	XMMWORD PTR [rbx], xmm1
	movsd	QWORD PTR [rbx+16], xmm0
	jmp	$LN1@ccexec_edi
$LN22@ccexec_edi:
; Line 295
	mov	rdx, QWORD PTR [r14+24]
	mov	QWORD PTR [rsp+184], r13
	mov	r13, rsi
	mov	QWORD PTR [rsp+176], r15
$LN169@ccexec_edi:
	mov	rcx, QWORD PTR [r14+24]
	mov	QWORD PTR list$1$[rbp-137], rdx
	test	rcx, rcx
	je	SHORT $LN32@ccexec_edi
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN33@ccexec_edi
$LN32@ccexec_edi:
	mov	rax, rsi
$LN33@ccexec_edi:
	and	rax, -8
	lea	r15, QWORD PTR [r13-40]
	add	rax, rcx
	cmp	rdx, rax
	jae	$LN6@ccexec_edi
; Line 296
	mov	r8, QWORD PTR [rdx]
	lea	rcx, QWORD PTR $T20[rbp-137]
	mov	rdx, rdi
	call	ccstack_yield_rvalue
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rcx, QWORD PTR tv923[rbp-137]
; Line 241
	test	r13, r13
; Line 191
	mov	rbx, rsi
; Line 192
	mov	QWORD PTR sze_min$1$[rbp-137], rsi
; Line 241
	cmove	r15, rsi
; Line 192
	mov	r12, rsi
; File W:\cpp\void\ktt-c\ccexec.c
; Line 296
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR $T28[rbp-137], xmm1
	movups	xmm0, XMMWORD PTR [rax]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	eax, OFFSET FLAT:ccalloctr
; File W:\cpp\void\ktt-c\ccexec.c
; Line 296
	movups	XMMWORD PTR $T1[rbp-137], xmm0
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r13, QWORD PTR [rax+rcx]
; Line 198
	test	r15, r15
	je	SHORT $LN43@ccexec_edi
; Line 200
	mov	r12, QWORD PTR [r15+32]
	mov	rbx, QWORD PTR [r15+24]
; Line 202
	mov	r13, QWORD PTR [r15+8]
	mov	QWORD PTR sze_min$1$[rbp-137], r12
$LN43@ccexec_edi:
; Line 209
	add	r12, 24
	mov	rax, r15
	cmp	rbx, r12
	jae	SHORT $LN46@ccexec_edi
; Line 213
	lea	rax, QWORD PTR [rbx+rbx]
; Line 217
	mov	rdx, r15
	cmp	rax, r12
	mov	rbx, r12
	cmovae	rbx, rax
	lea	rcx, QWORD PTR [rbx+40]
	call	r13
; Line 220
	movups	xmm0, XMMWORD PTR $T1[rbp-137]
	test	r15, r15
	jne	SHORT $LN46@ccexec_edi
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rsi
; Line 224
	mov	QWORD PTR [rax+8], r13
$LN46@ccexec_edi:
; Line 228
	mov	QWORD PTR [rax+24], rbx
; Line 242
	lea	r13, QWORD PTR [rax+40]
; Line 229
	mov	QWORD PTR [rax+32], r12
; Line 243
	mov	rax, -6148914691236517205		; aaaaaaaaaaaaaaabH
	mul	QWORD PTR sze_min$1$[rbp-137]
	shr	rdx, 4
; File W:\cpp\void\ktt-c\ccexec.c
; Line 296
	lea	rax, QWORD PTR [rdx+rdx*2]
	mov	rdx, QWORD PTR list$1$[rbp-137]
	movups	XMMWORD PTR [r13+rax*8], xmm0
	add	rdx, 8
	movsd	xmm0, QWORD PTR $T28[rbp-137]
	movsd	QWORD PTR [r13+rax*8+16], xmm0
	jmp	$LN169@ccexec_edi
$LN6@ccexec_edi:
; Line 17
	mov	r9, QWORD PTR value$[rbp-137]
	lea	rcx, QWORD PTR [rdi+24]
	mov	edx, 24
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblset
; Line 300
	mov	rdx, QWORD PTR [r14+16]
	mov	r9, r13
	mov	rcx, QWORD PTR exec$[rbp-137]
; Line 17
	lea	r8, QWORD PTR [rax+rax*2]
	shl	r8, 3
	add	r8, QWORD PTR [rdi+24]
; Line 300
	call	ccexec_invoke
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	test	r13, r13
	cmove	r15, rsi
	mov	rcx, r15
	call	free
	mov	r15, QWORD PTR [rsp+176]
	mov	r13, QWORD PTR [rsp+184]
; File W:\cpp\void\ktt-c\ccexec.c
; Line 306
	jmp	SHORT $LN29@ccexec_edi
$LN24@ccexec_edi:
; Line 119
	mov	rax, QWORD PTR [r14+16]
	mov	QWORD PTR [rdi+8], rax
; Line 315
	jmp	SHORT $LN170@ccexec_edi
$LN25@ccexec_edi:
; Line 320
	mov	r8, QWORD PTR [r14+16]
	lea	rcx, QWORD PTR $T19[rbp-137]
	mov	rdx, rdi
	call	ccstack_yield_rvalue
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR rval$5[rbp-121], xmm1
; Line 323
	cmp	DWORD PTR rval$5[rbp-121], esi
	je	SHORT $LN26@ccexec_edi
; Line 324
	mov	rax, QWORD PTR [r14+24]
	test	rax, rax
	je	SHORT $LN29@ccexec_edi
; Line 119
	mov	QWORD PTR [rdi+8], rax
; Line 325
	jmp	SHORT $LN170@ccexec_edi
$LN26@ccexec_edi:
; Line 327
	mov	rcx, QWORD PTR [r14+32]
	test	rcx, rcx
	je	SHORT $LN29@ccexec_edi
; Line 119
	mov	QWORD PTR [rdi+8], rcx
$LN170@ccexec_edi:
; Line 332
	mov	DWORD PTR [rdi+16], esi
$LN29@ccexec_edi:
	mov	eax, 1
$LN1@ccexec_edi:
	mov	rbx, QWORD PTR [rsp+248]
; Line 333
	add	rsp, 192				; 000000c0H
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN172@ccexec_edi:
; Line 157
	lea	rcx, OFFSET FLAT:?$TSS0@?1??ccexec_edict@@9@4HA
	call	_Init_thread_header
	cmp	DWORD PTR ?$TSS0@?1??ccexec_edict@@9@4HA, -1
	jne	$LN165@ccexec_edi
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_03GPCJKLEN@zro@
	mov	DWORD PTR $T14[rbp-129], 1
	mov	QWORD PTR $T14[rbp-137], rax
; File W:\cpp\void\ktt-c\ccexec.c
; Line 157
	lea	rcx, OFFSET FLAT:?$TSS0@?1??ccexec_edict@@9@4HA
	movups	xmm0, XMMWORD PTR $T14[rbp-137]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR $T14[rbp-121], rsi
; File W:\cpp\void\ktt-c\ccexec.c
; Line 157
	movsd	xmm1, QWORD PTR $T14[rbp-121]
	movups	XMMWORD PTR ?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A, xmm0
	movsd	QWORD PTR ?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A+16, xmm1
	call	_Init_thread_footer
	jmp	$LN165@ccexec_edi
	npad	2
$LN163@ccexec_edi:
; Line 333
	DD	$LN9@ccexec_edi
	DD	$LN8@ccexec_edi
	DD	$LN10@ccexec_edi
	DD	$LN14@ccexec_edi
	DD	$LN11@ccexec_edi
	DD	$LN20@ccexec_edi
	DD	$LN15@ccexec_edi
	DD	$LN18@ccexec_edi
	DD	$LN16@ccexec_edi
	DD	$LN29@ccexec_edi
	DD	$LN25@ccexec_edi
	DD	$LN24@ccexec_edi
	DD	$LN22@ccexec_edi
	DD	$LN21@ccexec_edi
$LN162@ccexec_edi:
	DD	$LN128@ccexec_edi
	DD	$LN129@ccexec_edi
	DD	$LN131@ccexec_edi
	DD	$LN130@ccexec_edi
	DD	$LN124@ccexec_edi
	DD	$LN126@ccexec_edi
	DD	$LN125@ccexec_edi
	DD	$LN127@ccexec_edi
	DD	$LN132@ccexec_edi
$LN161@ccexec_edi:
	DB	0
	DB	1
	DB	8
	DB	2
	DB	3
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	7
ccexec_edict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_invoke
_TEXT	SEGMENT
tv585 = 32
tv592 = 40
$T1 = 48
$T2 = 72
$T3 = 72
stack$ = 96
exec$ = 192
procd$ = 200
r$ = 208
i$ = 216
ccexec_invoke PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 358
	mov	r11, rsp
	mov	QWORD PTR [r11+24], r8
	mov	QWORD PTR [r11+16], rdx
	push	rbp
	push	rsi
	push	r13
	lea	rbp, QWORD PTR [r11-95]
	sub	rsp, 160				; 000000a0H
; Line 362
	mov	rax, QWORD PTR [rdx+8]
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\ccemit.h
; Line 206
	mov	r10d, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccexec.c
; Line 360
	add	r9, 16
	mov	QWORD PTR [r11-32], rdi
	mov	r13, rcx
	mov	QWORD PTR [r11-40], r12
	xor	esi, esi
	mov	QWORD PTR [r11-56], r15
	movups	XMMWORD PTR stack$[rbp-89], xmm0
	mov	QWORD PTR [r11+8], rbx
	movups	XMMWORD PTR stack$[rbp-73], xmm0
; Line 362
	mov	r12, QWORD PTR [rax+48]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 206
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccexec.c
; Line 360
	mov	QWORD PTR tv585[rbp-89], r9
	mov	QWORD PTR [r11-48], r14
; Line 368
	mov	r15, QWORD PTR [r12+32]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 206
	lea	rdi, QWORD PTR [rax+r10*8]
	mov	QWORD PTR tv592[rbp-89], rdi
$LN70@ccexec_inv:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 368
	mov	rcx, QWORD PTR [r12+32]
	mov	r10d, 8
	test	rcx, rcx
	je	SHORT $LN10@ccexec_inv
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN11@ccexec_inv
$LN10@ccexec_inv:
	mov	rax, rsi
$LN11@ccexec_inv:
	and	rax, -8
	add	rax, rcx
	cmp	r15, rax
	jae	$LN3@ccexec_inv
; File W:\cpp\void\ktt-c\ccemit.h
; Line 205
	mov	r9, QWORD PTR [r15]
	lea	rbx, QWORD PTR [rdx+16]
	mov	rcx, rbx
	mov	r8d, -8
	mov	edx, r10d
	call	ccdlb_tblget
	mov	r14, rax
; Line 206
	mov	ecx, OFFSET FLAT:ccerr
	mov	rax, QWORD PTR [rdi]
	shl	r14, 3
	add	r14, QWORD PTR [rbx]
	cmp	DWORD PTR [rcx+rax], esi
	jne	SHORT $LN17@ccexec_inv
	mov	r14, QWORD PTR [r14]
	jmp	SHORT $LN16@ccexec_inv
$LN17@ccexec_inv:
; Line 207
	mov	r14, rsi
$LN16@ccexec_inv:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 101
	mov	rax, QWORD PTR [r14+48]
	mov	rdi, QWORD PTR [rax+16]
; Line 338
	mov	ecx, DWORD PTR [rdi+8]
	cmp	ecx, 1
	jne	$LN22@ccexec_inv
; Line 341
	mov	r8, QWORD PTR [rdi+24]
; Line 44
	xor	eax, eax
	mov	QWORD PTR $T1[rbp-73], rax
; Line 46
	mov	eax, DWORD PTR [r8]
	cmp	eax, 2
	je	SHORT $LN35@ccexec_inv
	cmp	eax, 5
	jne	SHORT $LN27@ccexec_inv
; Line 48
	mov	rcx, QWORD PTR [r8+48]
	mov	edx, DWORD PTR [rcx]
	sub	edx, 4
	je	SHORT $LN32@ccexec_inv
	sub	edx, 1
	je	SHORT $LN32@ccexec_inv
	cmp	edx, 7
	jne	SHORT $LN27@ccexec_inv
$LN32@ccexec_inv:
; Line 29
	mov	edx, 24
	lea	rcx, QWORD PTR stack$[rbp-65]
	mov	r9, r8
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblget
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR stack$[rbp-65]
; Line 32
	cmp	DWORD PTR [rax+rcx*8+8], esi
	lea	rbx, QWORD PTR [rax+rcx*8]
	jne	SHORT $LN40@ccexec_inv
; Line 33
	lea	rdx, OFFSET FLAT:??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN40@ccexec_inv:
; Line 52
	movsd	xmm1, QWORD PTR [rbx+16]
; Line 55
	jmp	SHORT $LN69@ccexec_inv
$LN35@ccexec_inv:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	rax, QWORD PTR [r8+56]
	mov	QWORD PTR $T2[rbp-73], rax
; Line 51
	lea	rax, OFFSET FLAT:??_C@_0P@CGIBHDEL@constant?9value@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 57
	movsd	xmm1, QWORD PTR $T2[rbp-73]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	mov	QWORD PTR $T2[rbp-89], rax
	mov	DWORD PTR $T2[rbp-81], 1
$LN69@ccexec_inv:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 343
	movsd	QWORD PTR $T1[rbp-73], xmm1
$LN27@ccexec_inv:
	mov	rdx, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR stack$[rbp-89]
	call	ccexec_sizeof
; Line 344
	imul	eax, DWORD PTR $T1[rbp-73]
; Line 346
	jmp	SHORT $LN24@ccexec_inv
$LN22@ccexec_inv:
; Line 348
	test	ecx, ecx
	mov	eax, esi
	mov	ecx, 8
	cmove	eax, ecx
$LN24@ccexec_inv:
; Line 104
	mov	rdi, QWORD PTR [r13+8]
; Line 105
	xor	edx, edx
	add	rdi, QWORD PTR [r13+24]
	mov	rcx, rdi
	mov	r8d, eax
	mov	ebx, eax
	call	memset
; Line 106
	add	QWORD PTR [r13+24], rbx
; Line 17
	lea	rcx, QWORD PTR stack$[rbp-65]
	mov	edx, 24
	mov	r9, r14
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblset
; Line 374
	mov	r8, QWORD PTR tv585[rbp-89]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 60
	lea	rdx, OFFSET FLAT:??_C@_0M@KKIOMGKI@local_alloc@
	mov	QWORD PTR $T3[rbp-89], rdx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 368
	mov	rdx, QWORD PTR procd$[rbp-89]
; Line 17
	lea	rcx, QWORD PTR [rax+rax*2]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 59
	mov	QWORD PTR $T3[rbp-73], rdi
; File W:\cpp\void\ktt-c\ccexec.c
; Line 17
	mov	rax, QWORD PTR stack$[rbp-65]
; Line 110
	movsd	xmm1, QWORD PTR $T3[rbp-73]
; Line 368
	mov	rdi, QWORD PTR tv592[rbp-89]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 58
	mov	DWORD PTR $T3[rbp-81], 2
; File W:\cpp\void\ktt-c\ccexec.c
; Line 110
	movups	xmm0, XMMWORD PTR $T3[rbp-89]
	movups	XMMWORD PTR [rax+rcx*8], xmm0
	movsd	QWORD PTR [rax+rcx*8+16], xmm1
; Line 374
	mov	rcx, QWORD PTR [rax+rcx*8+16]
	mov	eax, DWORD PTR [r8]
; Line 375
	add	r8, 24
	mov	QWORD PTR tv585[rbp-89], r8
	add	r15, 8
	mov	DWORD PTR [rcx], eax
	jmp	$LN70@ccexec_inv
$LN3@ccexec_inv:
; Line 119
	mov	rdx, QWORD PTR [rdx+32]
; Line 120
	mov	ecx, esi
	mov	r15, QWORD PTR [rsp+128]
	mov	r12, QWORD PTR [rsp+144]
	mov	rdi, QWORD PTR [rsp+152]
	mov	QWORD PTR stack$[rbp-81], rdx
	mov	DWORD PTR stack$[rbp-73], ecx
	npad	4
$LL5@ccexec_inv:
; Line 381
	mov	rdx, QWORD PTR [rdx+8]
	test	rdx, rdx
	je	SHORT $LN12@ccexec_inv
	mov	rax, QWORD PTR [rdx-8]
	jmp	SHORT $LN13@ccexec_inv
$LN12@ccexec_inv:
	mov	rax, rsi
$LN13@ccexec_inv:
	shr	rax, 3
	cmp	ecx, eax
	jge	$LN6@ccexec_inv
; Line 383
	movsxd	rax, ecx
; Line 384
	inc	ecx
	lea	rbx, QWORD PTR [rdx+rax*8]
	mov	DWORD PTR stack$[rbp-73], ecx
; Line 386
	mov	r8, QWORD PTR [rbx]
	lea	rdx, QWORD PTR stack$[rbp-89]
	mov	rcx, r13
	call	ccexec_edict
	test	eax, eax
	je	SHORT $LN68@ccexec_inv
	mov	ecx, DWORD PTR stack$[rbp-73]
	mov	rdx, QWORD PTR stack$[rbp-81]
	jmp	SHORT $LL5@ccexec_inv
$LN68@ccexec_inv:
; Line 389
	mov	r9, QWORD PTR [rbx]
; Line 391
	mov	rax, QWORD PTR [r9+48]
	cmp	DWORD PTR [rax], 13
	jne	SHORT $LN8@ccexec_inv
; Line 29
	mov	edx, 24
	lea	rcx, QWORD PTR stack$[rbp-65]
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblget
	lea	r8, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR stack$[rbp-65]
; Line 32
	cmp	DWORD PTR [rax+r8*8+8], esi
	lea	rbx, QWORD PTR [rax+r8*8]
	jne	SHORT $LN56@ccexec_inv
; Line 33
	lea	rdx, OFFSET FLAT:??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN56@ccexec_inv:
; Line 392
	mov	r14, QWORD PTR r$[rbp-89]
; Line 37
	movups	xmm1, XMMWORD PTR [rbx]
	movsd	xmm0, QWORD PTR [rbx+16]
; Line 392
	movups	XMMWORD PTR [r14], xmm1
	movsd	QWORD PTR [r14+16], xmm0
$LN8@ccexec_inv:
; Line 393
	mov	eax, 1
	jmp	SHORT $LN1@ccexec_inv
$LN6@ccexec_inv:
; Line 397
	mov	rax, QWORD PTR stack$[rbp-65]
	test	rax, rax
	je	SHORT $LN14@ccexec_inv
	lea	rsi, QWORD PTR [rax-40]
$LN14@ccexec_inv:
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	mov	rcx, rsi
	call	free
; File W:\cpp\void\ktt-c\ccexec.c
; Line 399
	xor	eax, eax
$LN1@ccexec_inv:
; Line 400
	mov	r14, QWORD PTR [rsp+136]
	mov	rbx, QWORD PTR [rsp+192]
	add	rsp, 160				; 000000a0H
	pop	r13
	pop	rsi
	pop	rbp
	ret	0
ccexec_invoke ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_edict_arith
_TEXT	SEGMENT
__$ReturnAddress$ = 8
opr$ = 16
lval$ = 24
rval$ = 32
ccexec_edict_arith PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 127
	add	edx, -93				; ffffffffffffffa3H
	cmp	edx, 26
	ja	$LN12@ccexec_edi
	movsxd	rax, edx
	lea	r10, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN32@ccexec_edi[r10+rax]
	mov	edx, DWORD PTR $LN33@ccexec_edi[r10+rax*4]
	add	rdx, r10
	jmp	rdx
$LN4@ccexec_edi:
; Line 129
	mov	rax, QWORD PTR [r9+16]
	xor	edx, edx
	cmp	QWORD PTR [r8+16], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01PPODPGHN@?$DO@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	setg	dl
	mov	DWORD PTR [rcx+8], 1
	mov	QWORD PTR [rcx+16], rdx
	ret	0
$LN5@ccexec_edi:
; Line 131
	mov	rax, QWORD PTR [r9+16]
	xor	edx, edx
	cmp	QWORD PTR [r8+16], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_02EEKDKGMJ@?$DO?$DN@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	setge	dl
	mov	DWORD PTR [rcx+8], 1
	mov	QWORD PTR [rcx+16], rdx
	ret	0
$LN6@ccexec_edi:
; Line 133
	mov	rax, QWORD PTR [r9+16]
	xor	edx, edx
	cmp	QWORD PTR [r8+16], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01MNNFJEPP@?$DM@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	setl	dl
	mov	DWORD PTR [rcx+8], 1
	mov	QWORD PTR [rcx+16], rdx
	ret	0
$LN7@ccexec_edi:
; Line 135
	mov	rax, QWORD PTR [r9+16]
	xor	edx, edx
	cmp	QWORD PTR [r8+16], rax
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_02EHCHHCKH@?$DM?$DN@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	setle	dl
	mov	DWORD PTR [rcx+8], 1
	mov	QWORD PTR [rcx+16], rdx
	ret	0
$LN8@ccexec_edi:
; Line 137
	mov	rax, QWORD PTR [r8+16]
	imul	rax, QWORD PTR [r9+16]
; Line 147
	mov	DWORD PTR [rcx+8], 1
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR [rcx+16], rax
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
$LN9@ccexec_edi:
; Line 139
	mov	rax, QWORD PTR [r8+16]
	cdq
; Line 147
	mov	DWORD PTR [rcx+8], 1
	idiv	QWORD PTR [r9+16]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR [rcx+16], rax
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01KMDKNFGN@?1@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	ret	0
$LN10@ccexec_edi:
; Line 141
	mov	rax, QWORD PTR [r8+16]
	sub	rax, QWORD PTR [r9+16]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR [rcx+16], rax
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	mov	DWORD PTR [rcx+8], 1
	ret	0
$LN11@ccexec_edi:
; Line 143
	mov	rax, QWORD PTR [r8+16]
	add	rax, QWORD PTR [r9+16]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	QWORD PTR [rcx+16], rax
; Line 51
	lea	rax, OFFSET FLAT:??_C@_01MIFGBAGJ@?$CL@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	mov	DWORD PTR [rcx+8], 1
	ret	0
$LN12@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	lea	rax, OFFSET FLAT:??_C@_0P@NOFDAMLB@internal?9error@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	DWORD PTR [rcx+8], 1
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	xor	edx, edx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 147
	mov	QWORD PTR [rcx], rax
	mov	rax, rcx
	mov	QWORD PTR [rcx+16], rdx
	ret	0
	npad	2
$LN33@ccexec_edi:
	DD	$LN8@ccexec_edi
	DD	$LN9@ccexec_edi
	DD	$LN11@ccexec_edi
	DD	$LN10@ccexec_edi
	DD	$LN4@ccexec_edi
	DD	$LN6@ccexec_edi
	DD	$LN5@ccexec_edi
	DD	$LN7@ccexec_edi
	DD	$LN12@ccexec_edi
$LN32@ccexec_edi:
	DB	0
	DB	1
	DB	8
	DB	2
	DB	3
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	7
ccexec_edict_arith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_enter
_TEXT	SEGMENT
stack$ = 8
block$ = 16
ccexec_enter PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 119
	mov	QWORD PTR [rcx+8], rdx
; Line 120
	mov	DWORD PTR [rcx+16], 0
; Line 121
	ret	0
ccexec_enter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_local_alloc
_TEXT	SEGMENT
$T1 = 32
exec$ = 80
stack$ = 88
value$ = 96
ccstack_local_alloc PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 90
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 64					; 00000040H
	mov	rsi, rdx
	mov	rdi, rcx
; Line 95
	mov	rdx, QWORD PTR [r8+48]
; Line 101
	mov	rcx, rsi
	mov	rbp, r8
	mov	rdx, QWORD PTR [rdx+16]
	call	ccexec_sizeof
; Line 104
	mov	r14, QWORD PTR [rdi+8]
; Line 105
	xor	edx, edx
	add	r14, QWORD PTR [rdi+24]
	mov	rcx, r14
	mov	r8d, eax
	mov	ebx, eax
	call	memset
; Line 106
	add	QWORD PTR [rdi+24], rbx
; Line 17
	lea	rcx, QWORD PTR [rsi+24]
	mov	edx, 24
	mov	r9, rbp
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblset
; Line 114
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+104]
; Line 17
	lea	rcx, QWORD PTR [rax+rax*2]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 58
	mov	DWORD PTR $T1[rsp+8], 2
; File W:\cpp\void\ktt-c\ccexec.c
; Line 17
	mov	rax, QWORD PTR [rsi+24]
; Line 114
	mov	rsi, QWORD PTR [rsp+96]
; Line 17
	shl	rcx, 3
	add	rax, rcx
; File W:\cpp\void\ktt-c\ccexec.h
; Line 59
	mov	QWORD PTR $T1[rsp+16], r14
; File W:\cpp\void\ktt-c\ccexec.c
; Line 110
	movsd	xmm1, QWORD PTR $T1[rsp+16]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 60
	lea	rcx, OFFSET FLAT:??_C@_0M@KKIOMGKI@local_alloc@
	mov	QWORD PTR $T1[rsp], rcx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 110
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rax], xmm0
	movsd	QWORD PTR [rax+16], xmm1
; Line 114
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
ccstack_local_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_yield_lvalue
_TEXT	SEGMENT
__$ReturnAddress$ = 48
stack$ = 56
couple$ = 64
ccstack_yield_lvalue PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 69
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 70
	xor	eax, eax
	xorps	xmm0, xmm0
; Line 72
	cmp	DWORD PTR [r8], 5
	mov	rdi, rcx
	movups	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	jne	SHORT $LN12@ccstack_yi
; Line 73
	mov	r9, QWORD PTR [r8+48]
	mov	ecx, DWORD PTR [r9]
	test	ecx, ecx
	je	SHORT $LN5@ccstack_yi
	sub	ecx, 1
	je	SHORT $LN5@ccstack_yi
	cmp	ecx, 1
	jne	SHORT $LN12@ccstack_yi
$LN5@ccstack_yi:
; Line 29
	mov	r9, r8
	mov	QWORD PTR [rsp+48], rbx
	lea	rbx, QWORD PTR [rdx+24]
	mov	edx, 24
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblget
	mov	rbx, QWORD PTR [rbx]
	lea	rcx, QWORD PTR [rax+rax*2]
	shl	rcx, 3
	add	rbx, rcx
; Line 32
	cmp	DWORD PTR [rbx+8], 0
	jne	SHORT $LN10@ccstack_yi
; Line 33
	lea	rdx, OFFSET FLAT:??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN10@ccstack_yi:
; Line 77
	movups	xmm0, XMMWORD PTR [rbx]
	movsd	xmm1, QWORD PTR [rbx+16]
; Line 83
	mov	rbx, QWORD PTR [rsp+48]
	movups	XMMWORD PTR [rdi], xmm0
	movsd	QWORD PTR [rdi+16], xmm1
$LN12@ccstack_yi:
; Line 84
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccstack_yield_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_yield_rvalue
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
stack$ = 88
couple$ = 96
ccstack_yield_rvalue PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 43
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
; Line 44
	xor	eax, eax
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
	mov	rbx, rdx
; Line 46
	mov	eax, DWORD PTR [r8]
	mov	rdi, rcx
	cmp	eax, 2
	je	SHORT $LN10@ccstack_yi
	cmp	eax, 5
	jne	$LN19@ccstack_yi
; Line 48
	mov	rdx, QWORD PTR [r8+48]
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 4
	je	SHORT $LN7@ccstack_yi
	sub	ecx, 1
	je	SHORT $LN7@ccstack_yi
	cmp	ecx, 7
	jne	$LN19@ccstack_yi
$LN7@ccstack_yi:
; Line 29
	mov	edx, 24
	lea	rcx, QWORD PTR [rbx+24]
	mov	r9, r8
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblget
	mov	rbx, QWORD PTR [rbx+24]
	lea	rcx, QWORD PTR [rax+rax*2]
	shl	rcx, 3
	add	rbx, rcx
; Line 32
	cmp	DWORD PTR [rbx+8], 0
	jne	SHORT $LN15@ccstack_yi
; Line 33
	lea	rdx, OFFSET FLAT:??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN15@ccstack_yi:
; Line 52
	movups	xmm0, XMMWORD PTR [rbx]
; Line 65
	mov	rax, rdi
	movsd	xmm1, QWORD PTR [rbx+16]
	movups	XMMWORD PTR [rdi], xmm0
	movsd	QWORD PTR [rdi+16], xmm1
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
$LN10@ccstack_yi:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 50
	mov	rax, QWORD PTR [r8+56]
	mov	QWORD PTR $T1[rsp+16], rax
; Line 51
	lea	rax, OFFSET FLAT:??_C@_0P@CGIBHDEL@constant?9value@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 57
	movsd	xmm1, QWORD PTR $T1[rsp+16]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 51
	mov	QWORD PTR $T1[rsp], rax
	mov	DWORD PTR $T1[rsp+8], 1
; File W:\cpp\void\ktt-c\ccexec.c
; Line 57
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movsd	QWORD PTR [rcx+16], xmm1
$LN19@ccstack_yi:
; Line 65
	mov	rbx, QWORD PTR [rsp+80]
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
ccstack_yield_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_yield
_TEXT	SEGMENT
__$ReturnAddress$ = 48
stack$ = 56
value$ = 64
ccstack_yield PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 26
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 29
	lea	rbx, QWORD PTR [rdx+24]
	mov	rdi, rcx
	mov	edx, 24
	mov	r9, r8
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblget
	mov	rbx, QWORD PTR [rbx]
	lea	rdx, QWORD PTR [rax+rax*2]
	shl	rdx, 3
	add	rbx, rdx
; Line 32
	cmp	DWORD PTR [rbx+8], 0
	jne	SHORT $LN2@ccstack_yi
; Line 33
	lea	rdx, OFFSET FLAT:??_C@_0EN@PNPBLILH@value?5kind?5is?5invalid?0?5did?5you?5@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN2@ccstack_yi:
; Line 37
	movups	xmm0, XMMWORD PTR [rbx]
	mov	rax, rdi
	movsd	xmm1, QWORD PTR [rbx+16]
; Line 38
	mov	rbx, QWORD PTR [rsp+48]
	movups	XMMWORD PTR [rdi], xmm0
	movsd	QWORD PTR [rdi+16], xmm1
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccstack_yield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_mingle
_TEXT	SEGMENT
stack$ = 48
value$ = 56
ccstack_mingle PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 14
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 17
	mov	r9, rdx
	lea	rbx, QWORD PTR [rcx+24]
	mov	edx, 24
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-32]
	call	ccdlb_tblset
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	rax, QWORD PTR [rbx]
	shl	rcx, 3
	add	rax, rcx
; Line 21
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccstack_mingle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_sizeof
_TEXT	SEGMENT
rval$1 = 32
$T2 = 56
_s$ = 96
_t$ = 104
ccexec_sizeof PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 337
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
; Line 338
	mov	r8d, DWORD PTR [rdx+8]
	mov	rbx, rdx
	mov	rdi, rcx
	cmp	r8d, 1
	jne	SHORT $LN2@ccexec_siz
; Line 341
	mov	r8, QWORD PTR [rdx+24]
	mov	rdx, rcx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccstack_yield_rvalue
; Line 343
	mov	rdx, QWORD PTR [rbx+16]
	mov	rcx, rdi
	movsd	xmm1, QWORD PTR [rax+16]
	movsd	QWORD PTR rval$1[rsp+16], xmm1
	call	ccexec_sizeof
; Line 344
	imul	eax, DWORD PTR rval$1[rsp+16]
; Line 353
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN2@ccexec_siz:
	mov	rbx, QWORD PTR [rsp+96]
	xor	eax, eax
	test	r8d, r8d
	mov	ecx, 8
	cmove	eax, ecx
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
ccexec_sizeof ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_init
_TEXT	SEGMENT
emit$ = 8
ccemit_init PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 371
	xorps	xmm0, xmm0
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
; Line 372
	ret	0
ccemit_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_translation_unit
_TEXT	SEGMENT
emit$ = 48
tree$ = 56
ccemit_translation_unit PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 362
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\cccheck.c
; Line 289
	mov	rdi, QWORD PTR [rdx+32]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 362
	mov	rsi, rdx
	mov	rbp, rcx
	npad	2
$LL11@ccemit_tra:
; File W:\cpp\void\ktt-c\cccheck.c
; Line 289
	mov	rbx, QWORD PTR [rsi+32]
	test	rbx, rbx
	je	SHORT $LN13@ccemit_tra
	mov	rax, QWORD PTR [rbx-8]
	jmp	SHORT $LN14@ccemit_tra
$LN13@ccemit_tra:
	xor	eax, eax
$LN14@ccemit_tra:
	and	rax, -8
	add	rax, rbx
	cmp	rdi, rax
	jae	SHORT $LL10@ccemit_tra
	mov	rcx, QWORD PTR [rdi]
	call	cctree_solve_decl
	add	rdi, 8
	jmp	SHORT $LL11@ccemit_tra
	npad	5
$LL10@ccemit_tra:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 366
	mov	rcx, QWORD PTR [rsi+32]
	test	rcx, rcx
	je	SHORT $LN6@ccemit_tra
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN7@ccemit_tra
$LN6@ccemit_tra:
	xor	eax, eax
$LN7@ccemit_tra:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN3@ccemit_tra
	mov	rdx, QWORD PTR [rbx]
	mov	rcx, rbp
	call	ccemit_external_decl
	add	rbx, 8
	jmp	SHORT $LL10@ccemit_tra
$LN3@ccemit_tra:
; Line 367
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccemit_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_external_decl
_TEXT	SEGMENT
emit$ = 80
tree$ = 88
ccemit_external_decl PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 338
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+16], rdx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 341
	mov	r13, QWORD PTR [rdx+32]
	mov	rax, rdx
	mov	r14, rcx
	npad	5
$LL4@ccemit_ext:
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN9@ccemit_ext
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN10@ccemit_ext
$LN9@ccemit_ext:
	xor	eax, eax
$LN10@ccemit_ext:
	and	rax, -8
	add	rax, rcx
	cmp	r13, rax
	jae	$LN3@ccemit_ext
; Line 342
	mov	rbp, QWORD PTR [r13]
; Line 344
	mov	rax, QWORD PTR [rbp+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN2@ccemit_ext
; Line 346
	mov	r8, QWORD PTR [rbp+24]
	mov	rdx, rbp
	mov	rcx, r14
	call	ccemit_global_procd
	mov	r15, rax
; Line 322
	mov	rcx, QWORD PTR [rax+40]
	mov	QWORD PTR [r14+8], rcx
; Line 326
	mov	rcx, QWORD PTR [rbp+48]
	mov	r12, QWORD PTR [rcx+32]
	npad	12
$LL14@ccemit_ext:
	mov	rcx, QWORD PTR [rbp+48]
	mov	rdx, QWORD PTR [rcx+32]
	test	rdx, rdx
	je	SHORT $LN19@ccemit_ext
	mov	rax, QWORD PTR [rdx-8]
	jmp	SHORT $LN20@ccemit_ext
$LN19@ccemit_ext:
	xor	eax, eax
$LN20@ccemit_ext:
	and	rax, -8
	add	rax, rdx
	cmp	r12, rax
	jae	SHORT $LN13@ccemit_ext
; Line 327
	mov	rsi, QWORD PTR [r12]
; Line 47
	mov	rdx, r15
	mov	r8, QWORD PTR [r14+8]
	mov	rcx, r14
	mov	r9, QWORD PTR [rsi+48]
	call	cctree_to_type
; Line 50
	mov	rbx, QWORD PTR [rsi+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 47
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 1
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	mov	QWORD PTR [rax+8], rbx
; Line 128
	mov	QWORD PTR [rax+16], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rcx, QWORD PTR [r15+32]
	call	ccblock_add_edict
; Line 55
	mov	edx, 8
	lea	rcx, QWORD PTR [r15+16]
	mov	r9, rsi
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 57
	mov	rcx, QWORD PTR [r15+16]
; Line 326
	add	r12, 8
; Line 57
	mov	QWORD PTR [rcx+rax*8], rdi
; Line 326
	jmp	$LL14@ccemit_ext
$LN13@ccemit_ext:
; Line 329
	mov	rax, QWORD PTR [rbp+88]
	mov	rbx, QWORD PTR [rax+32]
	npad	1
$LL17@ccemit_ext:
	mov	rax, QWORD PTR [rbp+88]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN21@ccemit_ext
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN22@ccemit_ext
$LN21@ccemit_ext:
	xor	eax, eax
$LN22@ccemit_ext:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN16@ccemit_ext
; Line 330
	mov	r9, QWORD PTR [rbx]
	mov	rdx, r15
	mov	r8, QWORD PTR [r14+8]
	mov	rcx, r14
	call	ccemit_tree
	add	rbx, 8
	jmp	SHORT $LL17@ccemit_ext
$LN16@ccemit_ext:
; Line 332
	mov	rbx, QWORD PTR [r15+40]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 332
	mov	rdi, QWORD PTR [r15+32]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	lea	rsi, OFFSET FLAT:??_C@_05IHEOCMON@enter@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 237
	mov	rdx, rax
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 11
	mov	QWORD PTR [rax+24], 0
	mov	QWORD PTR [rax+32], 0
; Line 103
	mov	QWORD PTR [rax+8], rsi
; Line 171
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 237
	call	ccblock_add_edict
; File W:\cpp\void\ktt-c\ccemit.c
; Line 349
	mov	rdx, QWORD PTR [rbp+24]
	lea	rsi, OFFSET FLAT:??_C@_04GHJNJNPO@main@
	xor	ecx, ecx
	npad	7
$LL73@ccemit_ext:
	movzx	eax, BYTE PTR [rdx+rcx]
	inc	rcx
	cmp	al, BYTE PTR [rsi+rcx-1]
	jne	SHORT $LN2@ccemit_ext
	cmp	rcx, 5
	jne	SHORT $LL73@ccemit_ext
; Line 350
	mov	QWORD PTR [r14+16], r15
$LN2@ccemit_ext:
; Line 341
	mov	rax, QWORD PTR tree$[rsp]
	add	r13, 8
	jmp	$LL4@ccemit_ext
$LN3@ccemit_ext:
; Line 358
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
ccemit_external_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_function
_TEXT	SEGMENT
emit$ = 80
procd$ = 88
tree$ = 96
ccemit_function PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 312
	mov	QWORD PTR [rsp+24], rbx
	push	rbp
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 322
	mov	rax, QWORD PTR [rdx+40]
	mov	r14, r8
	mov	QWORD PTR [rcx+8], rax
	mov	r15, rdx
; Line 326
	mov	rax, QWORD PTR [r8+48]
	mov	rbp, rcx
	mov	QWORD PTR [rsp+88], r12
	xor	r13d, r13d
	mov	QWORD PTR [rsp+80], rsi
	mov	r12, QWORD PTR [rax+32]
	npad	9
$LL4@ccemit_fun:
	mov	rax, QWORD PTR [r14+48]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN9@ccemit_fun
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN10@ccemit_fun
$LN9@ccemit_fun:
	mov	rax, r13
$LN10@ccemit_fun:
	and	rax, -8
	add	rax, rcx
	cmp	r12, rax
	jae	SHORT $LN3@ccemit_fun
; Line 327
	mov	rsi, QWORD PTR [r12]
; Line 47
	mov	rdx, r15
	mov	r8, QWORD PTR [rbp+8]
	mov	rcx, rbp
	mov	r9, QWORD PTR [rsi+48]
	call	cctree_to_type
; Line 50
	mov	rbx, QWORD PTR [rsi+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 47
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 1
	mov	QWORD PTR [rax+24], r13
	mov	QWORD PTR [rax+32], r13
; Line 103
	mov	QWORD PTR [rax+8], rbx
; Line 128
	mov	QWORD PTR [rax+16], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rcx, QWORD PTR [r15+32]
	call	ccblock_add_edict
; Line 55
	mov	edx, 8
	lea	rcx, QWORD PTR [r15+16]
	mov	r9, rsi
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 57
	mov	rcx, QWORD PTR [r15+16]
; Line 326
	add	r12, 8
; Line 57
	mov	QWORD PTR [rcx+rax*8], rdi
; Line 326
	jmp	$LL4@ccemit_fun
$LN3@ccemit_fun:
; Line 329
	mov	rax, QWORD PTR [r14+88]
	mov	r12, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rax+32]
	npad	8
$LL7@ccemit_fun:
	mov	rax, QWORD PTR [r14+88]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN11@ccemit_fun
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN12@ccemit_fun
$LN11@ccemit_fun:
	mov	rax, r13
$LN12@ccemit_fun:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN6@ccemit_fun
; Line 330
	mov	r9, QWORD PTR [rbx]
	mov	rdx, r15
	mov	r8, QWORD PTR [rbp+8]
	mov	rcx, rbp
	call	ccemit_tree
	add	rbx, 8
	jmp	SHORT $LL7@ccemit_fun
$LN6@ccemit_fun:
; Line 332
	mov	rbx, QWORD PTR [r15+40]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 332
	mov	rdi, QWORD PTR [r15+32]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05IHEOCMON@enter@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 237
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 11
	mov	QWORD PTR [rax+24], r13
	mov	QWORD PTR [rax+32], r13
; Line 103
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 237
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 171
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 333
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rbp
; File W:\cpp\void\ktt-c\ccemit.h
; Line 237
	jmp	ccblock_add_edict
ccemit_function ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_param
_TEXT	SEGMENT
emit$ = 48
func$ = 56
block$ = 64
tree$ = 72
ccemit_param PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 212
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, r9
	mov	rsi, rdx
; Line 47
	mov	r9, QWORD PTR [r9+48]
	call	cctree_to_type
; Line 50
	mov	rbx, QWORD PTR [rbp+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 47
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 1
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	mov	QWORD PTR [rax+8], rbx
; Line 128
	mov	QWORD PTR [rax+16], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rcx, QWORD PTR [rsi+32]
	call	ccblock_add_edict
; Line 55
	mov	edx, 8
	lea	rcx, QWORD PTR [rsi+16]
	mov	r9, rbp
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 57
	mov	rcx, QWORD PTR [rsi+16]
; Line 214
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
; Line 57
	mov	QWORD PTR [rcx+rax*8], rdi
; Line 213
	mov	rax, rdi
; Line 214
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccemit_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_decl
_TEXT	SEGMENT
emit$ = 80
func$ = 88
block$ = 96
decl$ = 104
ccemit_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 206
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 207
	mov	r14, QWORD PTR [r9+32]
	mov	r15, r9
	mov	QWORD PTR [rsp+80], rbx
	mov	rbp, r8
	mov	QWORD PTR [rsp+88], rsi
	mov	r13, rdx
	mov	QWORD PTR [rsp+96], rdi
	mov	r12, rcx
	npad	3
$LL4@ccemit_dec:
	mov	rdx, QWORD PTR [r15+32]
	test	rdx, rdx
	je	SHORT $LN6@ccemit_dec
	mov	rax, QWORD PTR [rdx-8]
	jmp	SHORT $LN7@ccemit_dec
$LN6@ccemit_dec:
	xor	eax, eax
$LN7@ccemit_dec:
	and	rax, -8
	add	rax, rdx
	cmp	r14, rax
	jae	$LN3@ccemit_dec
	mov	rsi, QWORD PTR [r14]
; Line 47
	mov	r8, rbp
	mov	rdx, r13
	mov	rcx, r12
	mov	r9, QWORD PTR [rsi+48]
	call	cctree_to_type
; Line 50
	mov	rbx, QWORD PTR [rsi+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 47
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	mov	QWORD PTR [rax+8], rbx
; Line 116
	mov	QWORD PTR [rax+16], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rcx, QWORD PTR [r13+32]
	call	ccblock_add_edict
; Line 55
	mov	edx, 8
	lea	rcx, QWORD PTR [r13+16]
	mov	r9, rsi
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 57
	mov	rcx, QWORD PTR [r13+16]
	mov	QWORD PTR [rcx+rax*8], rdi
; Line 197
	mov	r9, QWORD PTR [rsi+64]
	test	r9, r9
	je	SHORT $LN2@ccemit_dec
; Line 198
	mov	r8, rbp
	mov	rdx, r13
	mov	rcx, r12
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 198
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05ODGDKDLF@store@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 3
	mov	QWORD PTR [rax+32], 0
; Line 103
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	mov	rcx, rbp
; File W:\cpp\void\ktt-c\ccedict.h
; Line 143
	mov	QWORD PTR [rax+16], rdi
; Line 144
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	call	ccblock_add_edict
$LN2@ccemit_dec:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 207
	add	r14, 8
	jmp	$LL4@ccemit_dec
$LN3@ccemit_dec:
	mov	rdi, QWORD PTR [rsp+96]
; Line 208
	mov	rsi, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
ccemit_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_decl_name
_TEXT	SEGMENT
emit$ = 64
func$ = 72
block$ = 80
tree$ = 88
ccemit_decl_name PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 195
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	rsi, r9
	mov	rbp, r8
; Line 47
	mov	r9, QWORD PTR [r9+48]
; Line 195
	mov	r14, rdx
	mov	r15, rcx
; Line 47
	call	cctree_to_type
; Line 50
	mov	rbx, QWORD PTR [rsi+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 47
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	r12d, r12d
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], r12
	mov	QWORD PTR [rax+24], r12
	mov	QWORD PTR [rax+32], r12
; Line 103
	mov	QWORD PTR [rax+8], rbx
; Line 116
	mov	QWORD PTR [rax+16], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rcx, QWORD PTR [r14+32]
	call	ccblock_add_edict
; Line 55
	mov	r9, rsi
	lea	edx, QWORD PTR [r12+8]
	lea	r8d, QWORD PTR [r12-8]
	mov	rdi, rax
	lea	rcx, QWORD PTR [r14+16]
	call	ccdlb_tblput
; Line 57
	mov	rdx, QWORD PTR [r14+16]
	mov	QWORD PTR [rdx+rax*8], rdi
; Line 197
	mov	r9, QWORD PTR [rsi+64]
	test	r9, r9
	je	SHORT $LN43@ccemit_dec
; Line 198
	mov	r8, rbp
	mov	rdx, r14
	mov	rcx, r15
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	lea	ecx, QWORD PTR [r12+40]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 198
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05ODGDKDLF@store@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 3
	mov	QWORD PTR [rax+32], r12
; Line 103
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	mov	rcx, rbp
; File W:\cpp\void\ktt-c\ccedict.h
; Line 143
	mov	QWORD PTR [rax+16], rdi
; Line 144
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	call	ccblock_add_edict
$LN43@ccemit_dec:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 202
	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccemit_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_treelist
_TEXT	SEGMENT
emit$ = 48
func$ = 56
irset$ = 64
list$ = 72
ccemit_treelist PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 188
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rbx, r9
	mov	rsi, r8
	mov	rbp, rdx
	mov	r14, rcx
; Line 190
	mov	rdi, r9
	npad	7
$LL4@ccemit_tre:
	test	rbx, rbx
	je	SHORT $LN6@ccemit_tre
	mov	rax, QWORD PTR [rbx-8]
	jmp	SHORT $LN7@ccemit_tre
$LN6@ccemit_tre:
	xor	eax, eax
$LN7@ccemit_tre:
	and	rax, -8
	add	rax, rbx
	cmp	rdi, rax
	jae	SHORT $LN3@ccemit_tre
	mov	r9, QWORD PTR [rdi]
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, r14
	call	ccemit_tree
	add	rdi, 8
	jmp	SHORT $LL4@ccemit_tre
$LN3@ccemit_tre:
; Line 191
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccemit_treelist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_tree
_TEXT	SEGMENT
emit$ = 80
func$ = 88
irset$ = 96
list$1$ = 104
tree$ = 104
ccemit_tree PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 219
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 220
	mov	eax, DWORD PTR [r9]
	mov	r12, r9
	mov	r14, r8
	mov	r15, rdx
	mov	r13, rcx
	cmp	eax, 16
	jne	$LN2@ccemit_tre
; Line 207
	mov	rdx, QWORD PTR [r9+32]
	xor	ebx, ebx
$LN158@ccemit_tre:
	mov	rcx, QWORD PTR [r12+32]
	mov	QWORD PTR list$1$[rsp], rdx
	test	rcx, rcx
	je	SHORT $LN29@ccemit_tre
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN30@ccemit_tre
$LN29@ccemit_tre:
	mov	rax, rbx
$LN30@ccemit_tre:
	and	rax, -8
	add	rax, rcx
	cmp	rdx, rax
	jae	$LN22@ccemit_tre
	mov	rbp, QWORD PTR [rdx]
; Line 47
	mov	r8, r14
	mov	rdx, r15
	mov	rcx, r13
	mov	r9, QWORD PTR [rbp+48]
	call	cctree_to_type
; Line 50
	mov	rdi, QWORD PTR [rbp+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 47
	mov	rsi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], rbx
	mov	QWORD PTR [rax+24], rbx
	mov	QWORD PTR [rax+32], rbx
; Line 103
	mov	QWORD PTR [rax+8], rdi
; Line 116
	mov	QWORD PTR [rax+16], rsi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	rcx, QWORD PTR [r15+32]
	call	ccblock_add_edict
; Line 55
	mov	edx, 8
	lea	rcx, QWORD PTR [r15+16]
	mov	r9, rbp
	mov	rsi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 57
	mov	rcx, QWORD PTR [r15+16]
	mov	QWORD PTR [rcx+rax*8], rsi
; Line 197
	mov	r9, QWORD PTR [rbp+64]
	test	r9, r9
	je	SHORT $LN25@ccemit_tre
; Line 198
	mov	r8, r14
	mov	rdx, r15
	mov	rcx, r13
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 198
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05ODGDKDLF@store@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 3
	mov	QWORD PTR [rax+32], rbx
; Line 103
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	mov	rcx, r14
; File W:\cpp\void\ktt-c\ccedict.h
; Line 143
	mov	QWORD PTR [rax+16], rsi
; Line 144
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	call	ccblock_add_edict
$LN25@ccemit_tre:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 207
	mov	rdx, QWORD PTR list$1$[rsp]
	add	rdx, 8
	jmp	$LN158@ccemit_tre
$LN2@ccemit_tre:
; Line 226
	cmp	eax, 10
	jne	SHORT $LN4@ccemit_tre
; Line 228
	mov	rsi, QWORD PTR [r9+32]
; Line 190
	xor	ebx, ebx
	mov	rdi, rsi
$LL76@ccemit_tre:
	test	rsi, rsi
	je	SHORT $LN78@ccemit_tre
	mov	rax, QWORD PTR [rsi-8]
	jmp	SHORT $LN79@ccemit_tre
$LN78@ccemit_tre:
	mov	rax, rbx
$LN79@ccemit_tre:
	and	rax, -8
	add	rax, rsi
	cmp	rdi, rax
	jae	$LN22@ccemit_tre
	mov	r9, QWORD PTR [rdi]
	mov	r8, r14
	mov	rdx, r15
	mov	rcx, r13
	call	ccemit_tree
	add	rdi, 8
	jmp	SHORT $LL76@ccemit_tre
$LN4@ccemit_tre:
; Line 231
	cmp	eax, 11
	je	$LN22@ccemit_tre
; Line 237
	cmp	eax, 12
	jne	SHORT $LN8@ccemit_tre
; Line 239
	mov	r9, QWORD PTR [r9+80]
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 239
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ebx, ebx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_06LNOFJDNM@return@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 243
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 13
	mov	QWORD PTR [rax+24], rbx
	mov	QWORD PTR [rax+32], rbx
; Line 103
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 243
	mov	rcx, r14
; File W:\cpp\void\ktt-c\ccedict.h
; Line 229
	mov	QWORD PTR [rax+16], rdi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 243
	call	ccblock_add_edict
; File W:\cpp\void\ktt-c\ccemit.c
; Line 241
	jmp	$LN1@ccemit_tre
$LN8@ccemit_tre:
; Line 243
	cmp	eax, 13
	je	$LN22@ccemit_tre
; Line 247
	cmp	eax, 21
	jne	SHORT $LN12@ccemit_tre
; Line 249
	call	ccemit_invoke_easy
	jmp	$LN1@ccemit_tre
$LN12@ccemit_tre:
; Line 251
	cmp	eax, 18
	jne	SHORT $LN14@ccemit_tre
; Line 254
	mov	r9, QWORD PTR [r9+72]
	call	ccemit_lvalue
; Line 255
	mov	r9, QWORD PTR [r12+80]
	mov	r8, r14
	mov	rdx, r15
	mov	rcx, r13
	mov	rbx, rax
	call	ccemit_rvalue
; Line 257
	cmp	DWORD PTR [r12+40], 110			; 0000006eH
	mov	rdi, rax
	mov	rdx, rbx
	mov	rcx, r14
	jne	SHORT $LN16@ccemit_tre
; Line 259
	mov	r8, rax
	call	ccblock_store
	jmp	$LN1@ccemit_tre
$LN16@ccemit_tre:
; Line 264
	xor	r8d, r8d
	call	ccblock_fetch
; Line 266
	mov	edx, DWORD PTR [r12+40]
	mov	r9, rdi
	mov	r8, rax
	mov	rcx, r14
	call	ccblock_arith
	jmp	$LN1@ccemit_tre
$LN14@ccemit_tre:
; Line 270
	cmp	eax, 17
	jne	$LN18@ccemit_tre
; Line 271
	mov	r9, QWORD PTR [r9+64]
	call	ccemit_tree
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 271
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ebx, ebx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 273
	mov	rcx, r14
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	movq	QWORD PTR [rax+8], xmm0
; Line 198
	psrldq	xmm0, 8
	movq	QWORD PTR [rax+16], xmm0
; Line 102
	mov	QWORD PTR [rax], 8
; Line 199
	mov	QWORD PTR [rax+24], rbx
; Line 200
	mov	QWORD PTR [rax+32], rdi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 273
	call	ccblock_add_edict
; File W:\cpp\void\ktt-c\ccemit.c
; Line 276
	mov	r9, QWORD PTR [r12+72]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 273
	mov	rdi, rax
; File W:\cpp\void\ktt-c\ccemit.c
; Line 276
	test	r9, r9
	je	SHORT $LN20@ccemit_tre
	mov	r8, r14
	mov	rdx, r15
	mov	rcx, r13
	call	ccemit_tree
$LN20@ccemit_tre:
; File W:\cpp\void\ktt-c\ccemit.h
; Line 179
	mov	rcx, QWORD PTR [r14+8]
	test	rcx, rcx
	je	SHORT $LN108@ccemit_tre
	mov	rbx, QWORD PTR [rcx-8]
$LN108@ccemit_tre:
; Line 171
	mov	rax, QWORD PTR [rdi+48]
; Line 179
	shr	rbx, 3
; File W:\cpp\void\ktt-c\ccedict.h
; Line 135
	mov	QWORD PTR [rax+16], r14
; Line 136
	mov	DWORD PTR [rax+24], ebx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 281
	mov	r9, QWORD PTR [r12+80]
	test	r9, r9
	je	$LN22@ccemit_tre
	mov	r8, r14
	mov	rdx, r15
	mov	rcx, r13
	call	ccemit_tree
	jmp	$LN22@ccemit_tre
$LN18@ccemit_tre:
; Line 285
	cmp	eax, 14
	jne	$LN22@ccemit_tre
; File W:\cpp\void\ktt-c\ccemit.h
; Line 179
	mov	rax, QWORD PTR [r8+8]
	xor	ebx, ebx
	test	rax, rax
	je	SHORT $LN116@ccemit_tre
	mov	rsi, QWORD PTR [rax-8]
	jmp	SHORT $LN117@ccemit_tre
$LN116@ccemit_tre:
	mov	rsi, rbx
$LN117@ccemit_tre:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 291
	mov	r9, QWORD PTR [r9+64]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 179
	shr	rsi, 3
; File W:\cpp\void\ktt-c\ccemit.c
; Line 291
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 291
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 273
	mov	rcx, r14
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	movq	QWORD PTR [rax+8], xmm0
; Line 198
	psrldq	xmm0, 8
	movq	QWORD PTR [rax+16], xmm0
; Line 102
	mov	QWORD PTR [rax], 8
; Line 199
	mov	QWORD PTR [rax+24], rbx
; Line 200
	mov	QWORD PTR [rax+32], rdi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 273
	call	ccblock_add_edict
; File W:\cpp\void\ktt-c\ccemit.c
; Line 294
	mov	r9, QWORD PTR [r12+72]
	mov	r8, r14
	mov	rdx, r15
	mov	rcx, r13
; File W:\cpp\void\ktt-c\ccemit.h
; Line 273
	mov	rdi, rax
; File W:\cpp\void\ktt-c\ccemit.c
; Line 294
	call	ccemit_tree
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_06MKGMLFO@?4JP?9WL@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 261
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 6
	mov	QWORD PTR [rax+28], rbx
	mov	DWORD PTR [rax+36], ebx
; Line 103
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 261
	mov	rcx, r14
; File W:\cpp\void\ktt-c\ccedict.h
; Line 179
	mov	QWORD PTR [rax+16], r14
; Line 180
	mov	DWORD PTR [rax+24], esi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 261
	call	ccblock_add_edict
; Line 179
	mov	rax, QWORD PTR [r14+8]
	test	rax, rax
	je	SHORT $LN146@ccemit_tre
	mov	rbx, QWORD PTR [rax-8]
$LN146@ccemit_tre:
; Line 171
	mov	rax, QWORD PTR [rdi+48]
; Line 179
	shr	rbx, 3
; File W:\cpp\void\ktt-c\ccedict.h
; Line 135
	mov	QWORD PTR [rax+16], r14
; Line 136
	mov	DWORD PTR [rax+24], ebx
$LN22@ccemit_tre:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 306
	xor	eax, eax
$LN1@ccemit_tre:
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
ccemit_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_invoke_easy
_TEXT	SEGMENT
call$1$ = 32
emit$ = 112
func$ = 120
block$ = 128
tv450 = 136
tree$ = 136
ccemit_invoke_easy PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 100
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 56					; 00000038H
; Line 102
	mov	r15, QWORD PTR [r9+80]
	mov	rbx, rcx
; Line 109
	mov	rcx, r9
	mov	r13, r8
	call	cctree_resolve_symbol
; File W:\cpp\void\ktt-c\ccemit.h
; Line 125
	mov	edx, 8
	mov	r9, rax
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblget
	mov	rdx, QWORD PTR [rbx]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 114
	xor	edi, edi
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	ecx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccemit.c
; Line 114
	mov	r14d, edi
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+128], rbp
; File W:\cpp\void\ktt-c\ccemit.c
; Line 117
	mov	r12, r15
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+48], rsi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 112
	mov	r9, QWORD PTR [rdx+rax*8]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccemit.c
; Line 112
	mov	QWORD PTR call$1$[rsp], r9
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r8, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR tv450[rsp], r8
$LN96@ccemit_inv:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 117
	mov	r9d, OFFSET FLAT:ccalloctr
	mov	rax, -2912643801112034465		; d79435e50d79435fH
	test	r15, r15
	je	SHORT $LN6@ccemit_inv
	mov	rcx, QWORD PTR [r15-8]
	jmp	SHORT $LN7@ccemit_inv
$LN6@ccemit_inv:
	mov	rcx, rdi
$LN7@ccemit_inv:
	mul	rcx
	shr	rdx, 7
	imul	rax, rdx, 152				; 00000098H
	add	rax, r15
	cmp	r12, rax
	jae	$LN3@ccemit_inv
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rcx, QWORD PTR [r8]
; Line 241
	lea	rsi, QWORD PTR [r14-40]
	test	r14, r14
; Line 196
	mov	edx, r9d
	mov	rbx, rdi
; Line 241
	cmove	rsi, rdi
; Line 186
	mov	rax, rsi
; Line 196
	mov	r14, QWORD PTR [rdx+rcx]
; Line 198
	test	rsi, rsi
	je	SHORT $LN73@ccemit_inv
; Line 199
	mov	rbx, QWORD PTR [rsi+24]
; Line 200
	mov	rdi, QWORD PTR [rsi+32]
; Line 202
	mov	r14, QWORD PTR [rsi+8]
$LN73@ccemit_inv:
; Line 209
	lea	rbp, QWORD PTR [rdi+8]
	cmp	rbx, rbp
	jae	SHORT $LN76@ccemit_inv
; Line 213
	lea	rcx, QWORD PTR [rbx+rbx]
; Line 217
	mov	rdx, rax
	cmp	rcx, rbp
	mov	rbx, rbp
	cmovae	rbx, rcx
	lea	rcx, QWORD PTR [rbx+40]
	call	r14
; Line 220
	test	rsi, rsi
	jne	SHORT $LN76@ccemit_inv
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rsi
; Line 224
	mov	QWORD PTR [rax+8], r14
$LN76@ccemit_inv:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 118
	mov	rdx, QWORD PTR func$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 242
	lea	r14, QWORD PTR [rax+40]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 118
	mov	rcx, QWORD PTR emit$[rsp]
	mov	r9, r12
	mov	r8, r13
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 228
	mov	QWORD PTR [rax+24], rbx
; Line 229
	mov	QWORD PTR [rax+32], rbp
; File W:\cpp\void\ktt-c\ccemit.c
; Line 118
	call	ccemit_rvalue
	mov	r8, QWORD PTR tv450[rsp]
	add	r12, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rdi, 3
; File W:\cpp\void\ktt-c\ccemit.c
; Line 118
	mov	QWORD PTR [r14+rdi*8], rax
	xor	edi, edi
	jmp	$LN96@ccemit_inv
$LN3@ccemit_inv:
; Line 120
	mov	rbx, QWORD PTR call$1$[rsp]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 120
	mov	rbx, QWORD PTR [rbx+48]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_06HJMAOIE@invoke@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 255
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 12
	mov	QWORD PTR [rax+32], rdi
; Line 103
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 255
	mov	rcx, r13
; File W:\cpp\void\ktt-c\ccedict.h
; Line 220
	mov	QWORD PTR [rax+16], rbx
; Line 221
	mov	QWORD PTR [rax+24], r14
; File W:\cpp\void\ktt-c\ccemit.c
; Line 120
	mov	rsi, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+128]
; Line 121
	add	rsp, 56					; 00000038H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rbx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 255
	jmp	ccblock_add_edict
ccemit_invoke_easy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_resolve
_TEXT	SEGMENT
emit$ = 48
func$ = 56
tree$ = 64
ccemit_resolve PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 84
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 88
	mov	rcx, r8
	mov	rbx, rdx
	call	cctree_resolve_symbol
; File W:\cpp\void\ktt-c\ccemit.h
; Line 205
	mov	edx, 8
	lea	rcx, QWORD PTR [rbx+16]
	mov	r9, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblget
	mov	rdx, QWORD PTR [rbx+16]
; Line 206
	mov	ecx, DWORD PTR _tls_index
	shl	rax, 3
	add	rdx, rax
	mov	r8d, OFFSET FLAT:ccerr
	mov	rax, QWORD PTR gs:88
	mov	rax, QWORD PTR [rax+rcx*8]
	cmp	DWORD PTR [r8+rax], 0
	jne	SHORT $LN4@ccemit_res
; File W:\cpp\void\ktt-c\ccemit.c
; Line 94
	mov	rax, QWORD PTR [rdx]
; Line 95
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN4@ccemit_res:
; Line 94
	xor	eax, eax
; Line 95
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccemit_resolve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_const_i32
_TEXT	SEGMENT
emit$ = 48
value$ = 56
ccemit_const_i32 PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 77
	push	rbx
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 64					; 00000040H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 77
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 66
	xor	ecx, ecx
	mov	QWORD PTR [rax+4], rcx
	mov	QWORD PTR [rax+12], rcx
	mov	QWORD PTR [rax+20], rcx
	mov	QWORD PTR [rax+28], rcx
	mov	QWORD PTR [rax+36], rcx
	mov	DWORD PTR [rax+44], ecx
; Line 68
	mov	DWORD PTR [rax], 2
; Line 69
	mov	QWORD PTR [rax+48], rcx
; Line 70
	mov	QWORD PTR [rax+56], rbx
; Line 80
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccemit_const_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_constant
_TEXT	SEGMENT
emit$ = 48
type$ = 56
clsc$ = 64
ccemit_constant PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 63
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 64					; 00000040H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 63
	mov	rbx, r8
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 66
	xor	ecx, ecx
	mov	QWORD PTR [rax+4], rcx
	mov	QWORD PTR [rax+12], rcx
	mov	QWORD PTR [rax+20], rcx
	mov	QWORD PTR [rax+28], rcx
	mov	QWORD PTR [rax+36], rcx
	mov	DWORD PTR [rax+44], ecx
; Line 70
	mov	QWORD PTR [rax+56], rbx
; Line 72
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax], 2
	mov	QWORD PTR [rax+48], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccemit_constant ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_include_local
_TEXT	SEGMENT
emit$ = 48
func$ = 56
block$ = 64
tree$ = 72
is_param$ = 80
ccemit_include_local PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 43
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, r9
	mov	rbp, rdx
; Line 47
	mov	r9, QWORD PTR [r9+48]
	call	cctree_to_type
	mov	rdi, QWORD PTR [rsi+24]
; Line 50
	mov	ecx, 40					; 00000028H
	mov	rbx, rax
	call	malloc
	xor	ecx, ecx
	cmp	DWORD PTR is_param$[rsp], ecx
	je	SHORT $LN3@ccemit_inc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 1
; File W:\cpp\void\ktt-c\ccemit.c
; Line 50
	jmp	SHORT $LN27@ccemit_inc
$LN3@ccemit_inc:
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], rcx
$LN27@ccemit_inc:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 54
	mov	QWORD PTR [rax+24], rcx
	mov	rdx, rax
	mov	QWORD PTR [rax+32], rcx
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+8], rdi
	mov	rcx, QWORD PTR [rbp+32]
	call	ccblock_add_edict
; Line 55
	mov	edx, 8
	lea	rcx, QWORD PTR [rbp+16]
	mov	r9, rsi
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 57
	mov	rcx, QWORD PTR [rbp+16]
; Line 59
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rcx+rax*8], rdi
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccemit_include_local ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_to_type
_TEXT	SEGMENT
emit$ = 64
func$ = 72
block$ = 80
tree$ = 88
cctree_to_type PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 24
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 25
	mov	eax, DWORD PTR [r9]
	xor	r15d, r15d
	mov	rdi, r9
	mov	rsi, r8
	mov	rbp, rdx
	mov	r14, rcx
	cmp	eax, 4
	jne	SHORT $LN2@cctree_to_
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	lea	ecx, QWORD PTR [rax+28]
	mov	QWORD PTR [rsp+64], rbx
	call	malloc
	mov	rbx, rax
; File W:\cpp\void\ktt-c\ccemit.c
; Line 28
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, r14
; File W:\cpp\void\ktt-c\ccemit.h
; Line 90
	mov	QWORD PTR [rax+12], r15
	mov	QWORD PTR [rax+20], r15
	mov	DWORD PTR [rax+28], r15d
; Line 92
	mov	DWORD PTR [rax+8], 1
; Line 93
	lea	rax, OFFSET FLAT:??_C@_05HIFJDKLD@array@
	mov	QWORD PTR [rbx], rax
; File W:\cpp\void\ktt-c\ccemit.c
; Line 28
	mov	r9, QWORD PTR [rdi+48]
	call	cctree_to_type
	mov	QWORD PTR [rbx+16], rax
; Line 30
	mov	r8, rsi
	mov	r9, QWORD PTR [rdi+80]
	mov	rdx, rbp
	mov	rcx, r14
	call	ccemit_rvalue
; Line 31
	mov	QWORD PTR [rbx+24], rax
; Line 38
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+64]
	jmp	SHORT $LN4@cctree_to_
$LN2@cctree_to_:
; Line 34
	test	eax, eax
	jne	SHORT $LN25@cctree_to_
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	lea	ecx, QWORD PTR [rax+32]
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.h
; Line 93
	lea	rcx, OFFSET FLAT:??_C@_07LKHFMGFB@integer@
	mov	QWORD PTR [rax+12], r15
	mov	QWORD PTR [rax+20], r15
	mov	DWORD PTR [rax+28], r15d
	mov	DWORD PTR [rax+8], r15d
	mov	QWORD PTR [rax], rcx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 34
	jmp	SHORT $LN4@cctree_to_
$LN25@cctree_to_:
; Line 38
	mov	rax, r15
$LN4@cctree_to_:
; Line 39
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
cctree_to_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_rvalue
_TEXT	SEGMENT
emit$ = 64
func$ = 72
block$ = 80
tree$ = 88
ccemit_rvalue PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 149
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 150
	mov	r10d, DWORD PTR [r9]
	xor	r15d, r15d
	mov	rdi, r9
	mov	rsi, r8
	mov	rbp, rdx
	mov	r14, rcx
	sub	r10d, 6
	je	$LN6@ccemit_rva
	mov	QWORD PTR [rsp+64], rbx
	sub	r10d, 1
	je	$LN4@ccemit_rva
	sub	r10d, 11
	je	SHORT $LN5@ccemit_rva
	sub	r10d, 3
	je	SHORT $LN7@ccemit_rva
	cmp	r10d, 1
	jne	SHORT $LN22@ccemit_rva
; Line 171
	mov	r9, QWORD PTR [r9+72]
	call	ccemit_lvalue
; Line 172
	mov	r9, QWORD PTR [rdi+80]
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, r14
	mov	rbx, rax
	call	ccemit_rvalue
; Line 174
	mov	r8, rax
	mov	rdx, rbx
	mov	rcx, rsi
	call	ccblock_fetch
$LN23@ccemit_rva:
	mov	rbx, QWORD PTR [rsp+64]
$LN9@ccemit_rva:
; Line 179
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
$LN22@ccemit_rva:
; Line 178
	mov	rax, r15
	jmp	SHORT $LN23@ccemit_rva
$LN7@ccemit_rva:
; Line 164
	call	ccemit_invoke_easy
; Line 165
	jmp	SHORT $LN23@ccemit_rva
$LN5@ccemit_rva:
; Line 155
	mov	r9, QWORD PTR [r9+80]
	call	ccemit_rvalue
	mov	r9, QWORD PTR [rdi+72]
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, r14
	mov	rbx, rax
	call	ccemit_rvalue
	mov	edx, DWORD PTR [rdi+40]
	mov	r8, rax
	mov	r9, rbx
	mov	rcx, rsi
	call	ccblock_arith
; Line 159
	jmp	SHORT $LN23@ccemit_rva
$LN4@ccemit_rva:
; Line 152
	movsxd	rbx, DWORD PTR [r9+96]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 64					; 00000040H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 66
	mov	QWORD PTR [rax+4], r15
	mov	QWORD PTR [rax+12], r15
	mov	QWORD PTR [rax+20], r15
	mov	QWORD PTR [rax+28], r15
	mov	QWORD PTR [rax+36], r15
	mov	DWORD PTR [rax+44], r15d
; Line 68
	mov	DWORD PTR [rax], 2
; Line 69
	mov	QWORD PTR [rax+48], r15
; Line 70
	mov	QWORD PTR [rax+56], rbx
; Line 153
	jmp	$LN23@ccemit_rva
$LN6@ccemit_rva:
; Line 161
	mov	r8, rdi
	call	ccemit_resolve
	mov	rdx, rax
	xor	r8d, r8d
	mov	rcx, rsi
	call	ccblock_fetch
	jmp	$LN9@ccemit_rva
ccemit_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_lvalue
_TEXT	SEGMENT
emit$ = 48
func$ = 56
block$ = 64
tree$ = 72
ccemit_lvalue PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 125
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 126
	mov	eax, DWORD PTR [r9]
	mov	rbx, r9
	mov	r14, r8
	mov	rsi, rdx
	mov	rbp, rcx
	cmp	eax, 6
	je	SHORT $LN4@ccemit_lva
	cmp	eax, 22
	jne	SHORT $LN119@ccemit_lva
; Line 136
	mov	r9, QWORD PTR [r9+72]
	mov	QWORD PTR [rsp+48], rdi
	call	ccemit_lvalue
; Line 137
	mov	r9, QWORD PTR [rbx+80]
	mov	r8, r14
	mov	rdx, rsi
	mov	rcx, rbp
	mov	rdi, rax
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 137
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_07LHEPONKL@address@
; File W:\cpp\void\ktt-c\ccemit.h
; Line 225
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 2
	mov	QWORD PTR [rax+32], 0
; Line 103
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 225
	mov	rcx, r14
; File W:\cpp\void\ktt-c\ccedict.h
; Line 237
	mov	QWORD PTR [rax+16], rdi
; Line 238
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 225
	call	ccblock_add_edict
; File W:\cpp\void\ktt-c\ccemit.c
; Line 144
	mov	rdi, QWORD PTR [rsp+48]
	jmp	SHORT $LN6@ccemit_lva
$LN119@ccemit_lva:
	xor	eax, eax
	jmp	SHORT $LN6@ccemit_lva
$LN4@ccemit_lva:
; Line 128
	mov	r8, rbx
	call	ccemit_resolve
$LN6@ccemit_lva:
; Line 145
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccemit_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_translation_unit
_TEXT	SEGMENT
reader$ = 80
tv471 = 88
ccread_translation_unit PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1246
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	ecx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	r14, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+80], rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+96], rdi
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	movups	XMMWORD PTR [r14], xmm0
	movups	XMMWORD PTR [r14+16], xmm0
	movups	XMMWORD PTR [r14+32], xmm0
	movups	XMMWORD PTR [r14+48], xmm0
	movups	XMMWORD PTR [r14+64], xmm0
	movups	XMMWORD PTR [r14+80], xmm0
	movups	XMMWORD PTR [r14+96], xmm0
	movups	XMMWORD PTR [r14+112], xmm0
	movups	XMMWORD PTR [r14+128], xmm0
	mov	QWORD PTR [r14+144], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\cctree.h
; Line 135
	mov	DWORD PTR [r14], 23
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r12, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR tv471[rsp], r12
$LN49@ccread_tra:
; File W:\cpp\void\ktt-c\ccread.c
; Line 1258
	xor	esi, esi
	mov	r13d, OFFSET FLAT:ccalloctr
	mov	rdx, r14
	mov	rcx, rbp
	lea	r8d, QWORD PTR [rsi+20]
	call	ccread_init_decl
	mov	r15, rax
; Line 1260
	test	rax, rax
	je	$LN47@ccread_tra
; Line 1265
	mov	rcx, QWORD PTR [rax+32]
	mov	rbx, QWORD PTR [rcx]
; Line 1271
	mov	rcx, QWORD PTR [rbx+48]
	cmp	DWORD PTR [rcx], 3
	jne	SHORT $LN7@ccread_tra
; Line 1276
	xor	r8d, r8d
	mov	rdx, rbx
	mov	rcx, rbp
	call	ccread_block
	mov	QWORD PTR [rbx+88], rax
; Line 1278
	test	rax, rax
	jne	SHORT $LN10@ccread_tra
$LN7@ccread_tra:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rax, QWORD PTR [rbp+96]
	test	BYTE PTR [rax+16], 2
	jne	SHORT $LN10@ccread_tra
	lea	rdx, OFFSET FLAT:??_C@_0N@BDNLGGP@expected?5?8?$DL?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN10@ccread_tra:
	mov	rax, QWORD PTR [r14+32]
; Line 191
	mov	rdi, rsi
; Line 241
	test	rax, rax
; Line 196
	mov	ecx, r13d
; Line 241
	lea	rbx, QWORD PTR [rax-40]
; Line 196
	mov	rax, QWORD PTR [r12]
; Line 241
	cmove	rbx, rsi
; Line 196
	mov	r13, QWORD PTR [rcx+rax]
; Line 198
	test	rbx, rbx
	je	SHORT $LN27@ccread_tra
; Line 199
	mov	rdi, QWORD PTR [rbx+24]
; Line 200
	mov	rsi, QWORD PTR [rbx+32]
; Line 202
	mov	r13, QWORD PTR [rbx+8]
$LN27@ccread_tra:
; Line 209
	lea	r12, QWORD PTR [rsi+8]
	mov	rax, rbx
	cmp	rdi, r12
	jae	SHORT $LN30@ccread_tra
; Line 213
	lea	rax, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rbx
	cmp	rax, r12
	mov	rdi, r12
	cmovae	rdi, rax
	lea	rcx, QWORD PTR [rdi+40]
	call	r13
; Line 220
	test	rbx, rbx
	jne	SHORT $LN30@ccread_tra
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbx
; Line 224
	mov	QWORD PTR [rax+8], r13
$LN30@ccread_tra:
; Line 229
	mov	QWORD PTR [rax+32], r12
; File W:\cpp\void\ktt-c\ccread.c
; Line 1250
	mov	r12, QWORD PTR tv471[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 228
	mov	QWORD PTR [rax+24], rdi
; Line 242
	add	rax, 40					; 00000028H
; Line 243
	shr	rsi, 3
	mov	QWORD PTR [r14+32], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 1250
	mov	QWORD PTR [rax+rsi*8], r15
	jmp	$LN49@ccread_tra
$LN47@ccread_tra:
; Line 1252
	mov	rdi, QWORD PTR [rsp+96]
	mov	rax, r14
	mov	rbx, QWORD PTR [rsp+80]
; Line 1253
	mov	rbp, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rsi
	ret	0
ccread_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_external_declaration
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_external_declaration PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1257
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	ebp, r8d
	mov	rbx, rcx
; Line 1258
	or	r8d, 20
	call	ccread_init_decl
	mov	rsi, rax
; Line 1260
	test	rax, rax
	jne	SHORT $LN2@ccread_ext
; Line 1287
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN2@ccread_ext:
; Line 1265
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+48], rdi
	mov	rdi, QWORD PTR [rax]
; Line 1271
	mov	rax, QWORD PTR [rdi+48]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN3@ccread_ext
; Line 1276
	mov	r8d, ebp
	mov	rdx, rdi
	mov	rcx, rbx
	call	ccread_block
	mov	QWORD PTR [rdi+88], rax
; Line 1278
	test	rax, rax
	jne	SHORT $LN6@ccread_ext
$LN3@ccread_ext:
; Line 1286
	mov	rax, QWORD PTR [rbx+96]
	test	BYTE PTR [rax+16], 2
	jne	SHORT $LN6@ccread_ext
	lea	rdx, OFFSET FLAT:??_C@_0N@BDNLGGP@expected?5?8?$DL?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN6@ccread_ext:
	mov	rdi, QWORD PTR [rsp+48]
	mov	rax, rsi
; Line 1287
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
ccread_external_declaration ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_block_or_single_stmt
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_block_or_single_stmt PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1100
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rsi, rcx
	call	ccread_block
; Line 1101
	test	rax, rax
	jne	SHORT $LN568@ccread_blo
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rsi
	call	ccread_statement
$LN568@ccread_blo:
; Line 1103
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_block_or_single_stmt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_statement
_TEXT	SEGMENT
reader$ = 80
root$ = 88
mark$ = 96
ccread_statement PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1108
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
; Line 1109
	xor	ebx, ebx
; Line 62
	lea	r15, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 1108
	mov	rsi, rcx
	mov	r14, rdx
; Line 62
	mov	rcx, QWORD PTR [rcx+88]
	mov	rax, r15
; Line 1108
	mov	ebp, r8d
; Line 1109
	mov	edi, ebx
; Line 62
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 7
; Line 1111
	je	$LN36@ccread_sta
; Line 62
	cmp	rcx, rdx
	mov	rax, r15
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 6
; Line 104
	jne	SHORT $LN52@ccread_sta
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN67@ccread_sta
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rsi+96], rcx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN61@ccread_sta
$LN67@ccread_sta:
; Line 98
	mov	rcx, r15
$LN61@ccread_sta:
; Line 1115
	test	rcx, rcx
	je	SHORT $LN52@ccread_sta
; Line 1116
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_block
; Line 62
	mov	rcx, QWORD PTR [rsi+88]
; Line 1116
	mov	rbx, rax
; Line 62
	mov	rdx, QWORD PTR [rsi+80]
	mov	rax, r15
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 7
; Line 104
	jne	SHORT $LN248@ccread_sta
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN127@ccread_sta
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rsi+96], rcx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN121@ccread_sta
$LN127@ccread_sta:
; Line 98
	mov	rcx, r15
$LN121@ccread_sta:
; Line 1117
	test	rcx, rcx
	jne	SHORT $LN6@ccread_sta
$LN248@ccread_sta:
	lea	rdx, OFFSET FLAT:??_C@_0N@HFCKEHBN@expected?5?8?$HN?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN6@ccread_sta:
; Line 1118
	mov	rax, rbx
	jmp	$LN1@ccread_sta
$LN52@ccread_sta:
; Line 1120
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_init_decl
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN7@ccread_sta
; Line 1121
	mov	rcx, QWORD PTR [rsi+96]
	test	BYTE PTR [rcx+16], 2
; Line 1122
	jmp	$LN251@ccread_sta
$LN7@ccread_sta:
; Line 62
	mov	rcx, QWORD PTR [rsi+88]
	mov	rax, r15
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 82			; 00000052H
; Line 104
	jne	$LN10@ccread_sta
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN145@ccread_sta
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rsi+96], rcx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN139@ccread_sta
$LN145@ccread_sta:
; Line 98
	mov	rcx, r15
$LN139@ccread_sta:
; Line 1124
	test	rcx, rcx
	je	$LN10@ccread_sta
; Line 1126
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_expression
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 1126
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rdi, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rdi], xmm0
	movups	XMMWORD PTR [rdi+16], xmm0
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	XMMWORD PTR [rdi+48], xmm0
	movups	XMMWORD PTR [rdi+64], xmm0
	movups	XMMWORD PTR [rdi+80], xmm0
	movups	XMMWORD PTR [rdi+96], xmm0
	movups	XMMWORD PTR [rdi+112], xmm0
	movups	XMMWORD PTR [rdi+128], xmm0
	mov	QWORD PTR [rdi+144], rax
; Line 135
	mov	DWORD PTR [rdi], 12
; Line 136
	mov	QWORD PTR [rdi+8], r14
; Line 137
	mov	DWORD PTR [rdi+16], ebp
; Line 251
	mov	QWORD PTR [rdi+80], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 1129
	test	rbx, rbx
	jne	$LN12@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0BE@EHBOIFGG@expected?5expression@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
; Line 1132
	jmp	$LN12@ccread_sta
$LN10@ccread_sta:
; Line 1133
	mov	edx, 79					; 0000004fH
	mov	rcx, rsi
	call	cceat
	test	rax, rax
	je	$LN14@ccread_sta
; Line 1137
	mov	edx, 4
	call	cceat
	test	rax, rax
	jne	SHORT $LN16@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0N@BPFNKLEG@expected?5?8?$CI?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN16@ccread_sta:
; Line 1138
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_expression
; Line 1139
	mov	edx, 5
	mov	rcx, rsi
	mov	r15, rax
	call	cceat
	test	rax, rax
	jne	SHORT $LN17@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN17@ccread_sta:
; Line 1141
	test	r15, r15
	jne	SHORT $LN18@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0BE@EHBOIFGG@expected?5expression@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN18@ccread_sta:
; Line 1143
	mov	rax, QWORD PTR [rsi+96]
	test	BYTE PTR [rax+16], 2
	jne	SHORT $LN20@ccread_sta
; Line 1145
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_block_or_single_stmt
	mov	rbx, rax
; Line 1146
	test	rax, rax
	jne	SHORT $LN20@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0BD@BPNOKPDK@expected?5statement@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN20@ccread_sta:
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	mov	rdi, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rdi], xmm0
	movups	XMMWORD PTR [rdi+16], xmm0
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	XMMWORD PTR [rdi+48], xmm0
	movups	XMMWORD PTR [rdi+64], xmm0
	movups	XMMWORD PTR [rdi+80], xmm0
	movups	XMMWORD PTR [rdi+96], xmm0
	movups	XMMWORD PTR [rdi+112], xmm0
	movups	XMMWORD PTR [rdi+128], xmm0
	mov	QWORD PTR [rdi+144], rax
; Line 135
	mov	DWORD PTR [rdi], 14
; Line 136
	mov	QWORD PTR [rdi+8], r14
; Line 137
	mov	DWORD PTR [rdi+16], ebp
; Line 228
	mov	QWORD PTR [rdi+64], r15
; Line 229
	mov	QWORD PTR [rdi+72], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 1149
	jmp	$LN36@ccread_sta
$LN14@ccread_sta:
; Line 1150
	mov	edx, 81					; 00000051H
	call	cceat
	test	rax, rax
	je	$LN21@ccread_sta
; Line 1152
	mov	r8d, ebp
	mov	rdx, r14
	call	ccread_litide
	mov	r15, rax
; Line 1153
	test	rax, rax
	jne	SHORT $LN23@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0BO@IGLIBKMB@missing?5goto?5label?5identifier@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN23@ccread_sta:
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	mov	rdi, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rdi], xmm0
	movups	XMMWORD PTR [rdi+16], xmm0
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	XMMWORD PTR [rdi+48], xmm0
	movups	XMMWORD PTR [rdi+64], xmm0
	movups	XMMWORD PTR [rdi+80], xmm0
	movups	XMMWORD PTR [rdi+96], xmm0
	movups	XMMWORD PTR [rdi+112], xmm0
	movups	XMMWORD PTR [rdi+128], xmm0
	mov	QWORD PTR [rdi+144], rax
; Line 135
	mov	DWORD PTR [rdi], 13
; Line 136
	mov	QWORD PTR [rdi+8], r14
; Line 137
	mov	DWORD PTR [rdi+16], ebp
; Line 151
	test	r15, r15
	je	SHORT $LN182@ccread_sta
	mov	rbx, QWORD PTR [r15+24]
$LN182@ccread_sta:
; Line 244
	mov	QWORD PTR [rdi+24], rbx
$LN12@ccread_sta:
; File W:\cpp\void\ktt-c\ccread.c
; Line 1212
	mov	rax, QWORD PTR [rsi+96]
	test	BYTE PTR [rax+16], 2
$LN251@ccread_sta:
	jne	$LN36@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0N@BDNLGGP@expected?5?8?$DL?8@
	jmp	$LN250@ccread_sta
$LN21@ccread_sta:
; Line 62
	mov	rcx, QWORD PTR [rsi+88]
	mov	rax, r15
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 75			; 0000004bH
; Line 1159
	je	$LN36@ccread_sta
; Line 62
	cmp	rcx, rdx
	mov	rax, r15
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 73			; 00000049H
; Line 104
	jne	$LN27@ccread_sta
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN207@ccread_sta
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rsi+96], rcx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN201@ccread_sta
$LN207@ccread_sta:
; Line 98
	mov	rcx, r15
$LN201@ccread_sta:
; Line 1163
	test	rcx, rcx
	je	$LN27@ccread_sta
; Line 1169
	mov	edx, 4
	mov	rcx, rsi
	mov	rdi, rbx
	call	cceat
	test	rax, rax
	jne	SHORT $LN29@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0N@BPFNKLEG@expected?5?8?$CI?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN29@ccread_sta:
; Line 1170
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_expression
; Line 1171
	mov	edx, 5
	mov	rcx, rsi
	mov	r15, rax
	call	cceat
	test	rax, rax
	jne	SHORT $LN30@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN30@ccread_sta:
; Line 1173
	test	r15, r15
	jne	SHORT $LN31@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0BE@EHBOIFGG@expected?5expression@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN31@ccread_sta:
; Line 1175
	mov	rax, QWORD PTR [rsi+96]
	test	BYTE PTR [rax+16], 2
	jne	SHORT $LN33@ccread_sta
; Line 1176
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_block_or_single_stmt
	mov	rbx, rax
; Line 1177
	test	rax, rax
	jne	SHORT $LN33@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0BD@BPNOKPDK@expected?5statement@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN33@ccread_sta:
; Line 1179
	mov	edx, 75					; 0000004bH
	mov	rcx, rsi
	call	cceat
	test	rax, rax
	je	SHORT $LN35@ccread_sta
	mov	rax, QWORD PTR [rsi+96]
	test	BYTE PTR [rax+16], 2
	jne	SHORT $LN35@ccread_sta
; Line 1180
	mov	r8d, ebp
	mov	rdx, r14
	call	ccread_block_or_single_stmt
	mov	rdi, rax
; Line 1181
	test	rax, rax
	jne	SHORT $LN35@ccread_sta
	lea	rdx, OFFSET FLAT:??_C@_0BD@BPNOKPDK@expected?5statement@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN35@ccread_sta:
; Line 1184
	mov	r9, rbx
	mov	QWORD PTR [rsp+32], rdi
	mov	r8, r15
	mov	edx, ebp
	mov	rcx, r14
	call	cctree_ternary
	mov	rdi, rax
; Line 1186
	jmp	$LN36@ccread_sta
$LN27@ccread_sta:
; Line 1188
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_expression
	mov	rdi, rax
	test	rax, rax
	je	$LN36@ccread_sta
; Line 1191
	mov	rax, QWORD PTR [rsi+96]
	test	BYTE PTR [rax+16], 2
	jne	$LN36@ccread_sta
; Line 1193
	cmp	DWORD PTR [rdi], 6
	jne	$LN38@ccread_sta
; Line 1195
	mov	edx, 11
	mov	rcx, rsi
	call	cceat
	test	rax, rax
	je	SHORT $LN40@ccread_sta
; Line 1199
	mov	rax, QWORD PTR [rsi+96]
	test	BYTE PTR [rax+16], 2
	jne	SHORT $LN42@ccread_sta
; Line 1200
	mov	r8d, ebp
	mov	rdx, r14
	call	ccread_statement_list
	mov	rbx, rax
$LN42@ccread_sta:
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 11
; Line 136
	mov	QWORD PTR [rcx+8], r14
; Line 137
	mov	DWORD PTR [rcx+16], ebp
; Line 236
	mov	rax, QWORD PTR [rdi+24]
; File W:\cpp\void\ktt-c\ccread.c
; Line 1202
	mov	rdi, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 236
	mov	QWORD PTR [rcx+24], rax
; Line 237
	mov	QWORD PTR [rcx+32], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 1203
	jmp	SHORT $LN36@ccread_sta
$LN40@ccread_sta:
; Line 1204
	lea	rdx, OFFSET FLAT:??_C@_0DE@KEPEEDEI@invalid?5statement?0?5missing?5?8?3?8?5@
; Line 1205
	jmp	SHORT $LN250@ccread_sta
$LN38@ccread_sta:
; Line 1206
	lea	rdx, OFFSET FLAT:??_C@_0BC@MIHHJFNA@invalid?5statement@
$LN250@ccread_sta:
; Line 1212
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN36@ccread_sta:
	mov	rax, rdi
$LN1@ccread_sta:
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
ccread_statement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_statement_list
_TEXT	SEGMENT
reader$ = 96
root$ = 104
mark$ = 112
tv354 = 120
ccread_statement_list PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1216
	mov	QWORD PTR [rsp+16], rdx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r15
	sub	rsp, 48					; 00000030H
	xor	esi, esi
	mov	r12d, r8d
	mov	edi, esi
	mov	r13, rcx
; Line 1217
	call	ccread_statement
	mov	r15, rax
	test	rax, rax
	je	$LN30@ccread_sta
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r9d, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
	mov	QWORD PTR [rsp+96], rbx
	mov	ecx, OFFSET FLAT:ccalloctr
	mov	QWORD PTR [rsp+40], rbp
	mov	rax, QWORD PTR [rax+r9*8]
	add	rax, rcx
	mov	QWORD PTR [rsp+32], r14
	mov	QWORD PTR tv354[rsp], rax
	npad	4
$LL2@ccread_sta:
	mov	rbp, QWORD PTR [rax]
; Line 241
	lea	rbx, QWORD PTR [rdi-40]
	test	rdi, rdi
; Line 191
	mov	rdi, rsi
; Line 241
	cmove	rbx, rsi
; Line 198
	test	rbx, rbx
	je	SHORT $LN11@ccread_sta
; Line 199
	mov	rdi, QWORD PTR [rbx+24]
; Line 200
	mov	rsi, QWORD PTR [rbx+32]
; Line 202
	mov	rbp, QWORD PTR [rbx+8]
$LN11@ccread_sta:
; Line 209
	lea	r14, QWORD PTR [rsi+8]
	mov	rax, rbx
	cmp	rdi, r14
	jae	SHORT $LN14@ccread_sta
; Line 213
	lea	rax, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rbx
	cmp	rax, r14
	mov	rdi, r14
	cmovae	rdi, rax
	lea	rcx, QWORD PTR [rdi+40]
	call	rbp
; Line 220
	test	rbx, rbx
	jne	SHORT $LN14@ccread_sta
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbx
; Line 224
	mov	QWORD PTR [rax+8], rbp
$LN14@ccread_sta:
; Line 228
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	lea	rdx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], r14
; Line 242
	lea	rdi, QWORD PTR [rax+40]
; Line 243
	shr	rsi, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 1218
	mov	QWORD PTR [rdi+rsi*8], r15
; Line 62
	mov	rcx, QWORD PTR [r13+88]
	cmp	rcx, QWORD PTR [r13+80]
	cmovb	rdx, rcx
; Line 81
	cmp	DWORD PTR [rdx], 1
; Line 1219
	je	SHORT $LN29@ccread_sta
; Line 1217
	mov	rdx, QWORD PTR root$[rsp]
	mov	r8d, r12d
	mov	rcx, r13
	call	ccread_statement
	mov	r15, rax
	test	rax, rax
	mov	rax, QWORD PTR tv354[rsp]
	mov	esi, 0
	jne	$LL2@ccread_sta
$LN29@ccread_sta:
	mov	rbp, QWORD PTR [rsp+40]
; Line 1221
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+96]
	mov	r14, QWORD PTR [rsp+32]
; Line 1222
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
$LN30@ccread_sta:
; Line 1221
	mov	rax, rsi
; Line 1222
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
ccread_statement_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_block
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_block PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1226
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 62
	mov	r9, QWORD PTR [rcx+88]
	lea	r14, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 1226
	mov	rbx, rcx
; Line 62
	mov	rax, r14
	mov	rcx, QWORD PTR [rcx+80]
; Line 1226
	mov	esi, r8d
; Line 62
	cmp	r9, rcx
; Line 1226
	mov	rbp, rdx
; Line 62
	cmovb	rax, r9
; Line 81
	cmp	DWORD PTR [rax], 6
; Line 104
	jne	$LN54@ccread_blo
; Line 95
	cmp	r9, rcx
	jae	SHORT $LN21@ccread_blo
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [rbx+96], r9
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN15@ccread_blo
$LN21@ccread_blo:
; Line 98
	mov	r9, r14
$LN15@ccread_blo:
; Line 1227
	test	r9, r9
	je	$LN54@ccread_blo
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	mov	QWORD PTR [rsp+48], rdi
	call	malloc
	mov	rdi, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
; File W:\cpp\void\ktt-c\ccread.c
; Line 1229
	mov	r8d, esi
	mov	rdx, rdi
	mov	rcx, rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	movups	XMMWORD PTR [rdi], xmm0
	movups	XMMWORD PTR [rdi+16], xmm0
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	XMMWORD PTR [rdi+48], xmm0
	movups	XMMWORD PTR [rdi+64], xmm0
	movups	XMMWORD PTR [rdi+80], xmm0
	movups	XMMWORD PTR [rdi+96], xmm0
	movups	XMMWORD PTR [rdi+112], xmm0
	movups	XMMWORD PTR [rdi+128], xmm0
	mov	QWORD PTR [rdi+144], rax
; Line 135
	mov	DWORD PTR [rdi], 10
; Line 136
	mov	QWORD PTR [rdi+8], rbp
; Line 137
	mov	DWORD PTR [rdi+16], esi
; File W:\cpp\void\ktt-c\ccread.c
; Line 1229
	call	ccread_statement_list
	mov	QWORD PTR [rdi+32], rax
; Line 62
	mov	rax, r14
	mov	rcx, QWORD PTR [rbx+88]
	mov	rdx, QWORD PTR [rbx+80]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 7
; Line 104
	jne	SHORT $LN52@ccread_blo
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN50@ccread_blo
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN44@ccread_blo
$LN50@ccread_blo:
; Line 98
	mov	rcx, r14
$LN44@ccread_blo:
; Line 1230
	test	rcx, rcx
	jne	SHORT $LN57@ccread_blo
$LN52@ccread_blo:
; Line 1231
	lea	rdx, OFFSET FLAT:??_C@_0N@HFCKEHBN@expected?5?8?$HN?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN57@ccread_blo:
; Line 1233
	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+48]
$LN3@ccread_blo:
; Line 1234
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN54@ccread_blo:
	xor	eax, eax
	jmp	SHORT $LN3@ccread_blo
ccread_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_param_decl_list
_TEXT	SEGMENT
tv593 = 96
reader$ = 96
root$ = 104
mark$ = 112
decl$1$ = 120
ccread_param_decl_list PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r9d, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	xor	ebp, ebp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	mov	r12d, r8d
	mov	r13, rdx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r15d, OFFSET FLAT:ccalloctr
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	mov	rdi, rcx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+104], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	mov	esi, ebp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r14, QWORD PTR [rax+r9*8]
	mov	QWORD PTR tv593[rsp], r14
$LL2@ccread_par:
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rdi+88]
	lea	rcx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rdi+80]
	cmovb	rcx, rax
; Line 81
	cmp	DWORD PTR [rcx], 13
; Line 1063
	jne	SHORT $LN7@ccread_par
; Line 1064
	lea	rdx, OFFSET FLAT:??_C@_0CN@NANEDLOL@unexpected?5?8?4?4?4?8?0?5must?5be?5at?5en@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN7@ccread_par:
; Line 1066
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rdi
	call	ccread_declaration_specifiers
; Line 1067
	test	rax, rax
	je	$LN191@ccread_par
; Line 782
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rdi
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rdi
	call	ccread_direct_decl_name
	mov	QWORD PTR decl$1$[rsp], rax
; Line 1075
	test	rax, rax
	je	$LN191@ccread_par
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR [r14]
; Line 241
	lea	rbx, QWORD PTR [rsi-40]
	test	rsi, rsi
; Line 196
	mov	ecx, r15d
	mov	rsi, rbp
; Line 241
	cmove	rbx, rbp
; Line 196
	mov	r14, QWORD PTR [rcx+rax]
; Line 198
	test	rbx, rbx
	je	SHORT $LN161@ccread_par
; Line 199
	mov	rsi, QWORD PTR [rbx+24]
; Line 200
	mov	rbp, QWORD PTR [rbx+32]
; Line 202
	mov	r14, QWORD PTR [rbx+8]
$LN161@ccread_par:
; Line 209
	lea	r15, QWORD PTR [rbp+8]
	mov	rax, rbx
	cmp	rsi, r15
	jae	SHORT $LN164@ccread_par
; Line 213
	lea	rax, QWORD PTR [rsi+rsi]
; Line 217
	mov	rdx, rbx
	cmp	rax, r15
	mov	rsi, r15
	cmovae	rsi, rax
	lea	rcx, QWORD PTR [rsi+40]
	call	r14
; Line 220
	test	rbx, rbx
	jne	SHORT $LN164@ccread_par
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbx
; Line 224
	mov	QWORD PTR [rax+8], r14
$LN164@ccread_par:
; Line 228
	mov	QWORD PTR [rax+24], rsi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	lea	rcx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], r15
; Line 242
	lea	rsi, QWORD PTR [rax+40]
; File W:\cpp\void\ktt-c\ccread.c
; Line 1076
	mov	rax, QWORD PTR decl$1$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rbp, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 1076
	mov	QWORD PTR [rsi+rbp*8], rax
; Line 62
	mov	rdx, QWORD PTR [rdi+88]
	mov	rax, QWORD PTR [rdi+80]
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 10
; Line 104
	jne	SHORT $LN191@ccread_par
; Line 95
	mov	r14, QWORD PTR tv593[rsp]
	mov	ebp, 0
	mov	r15d, OFFSET FLAT:ccalloctr
	cmp	rdx, rax
	jae	$LL2@ccread_par
; Line 96
	mov	QWORD PTR [rdi+96], rdx
	lea	rcx, QWORD PTR [rdx+32]
	mov	QWORD PTR [rdi+88], rcx
; Line 1077
	test	rdx, rdx
	jne	$LL2@ccread_par
$LN191@ccread_par:
	mov	rbx, QWORD PTR [rsp+104]
; Line 1080
	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_param_decl_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_param_decl
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_param_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1059
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	r9, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+80]
; Line 1059
	mov	edi, r8d
	mov	rsi, rdx
	mov	rbx, rcx
; Line 62
	cmovb	r9, rax
; Line 81
	cmp	DWORD PTR [r9], 13
; Line 1063
	jne	SHORT $LN2@ccread_par
; Line 1064
	lea	rdx, OFFSET FLAT:??_C@_0CN@NANEDLOL@unexpected?5?8?4?4?4?8?0?5must?5be?5at?5en@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN2@ccread_par:
; Line 1066
	mov	r8d, edi
	mov	rdx, rsi
	mov	rcx, rbx
	call	ccread_declaration_specifiers
; Line 1067
	test	rax, rax
	je	SHORT $LN484@ccread_par
	mov	r9, rax
	mov	r8d, edi
	mov	rdx, rsi
	mov	rcx, rbx
; Line 1070
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 1067
	jmp	ccread_decl_name
$LN484@ccread_par:
; Line 1070
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_param_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_alignment_specifier
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_alignment_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+88]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r8, QWORD PTR [rcx+80]
	cmp	rdx, r8
	cmovb	rax, rdx
; Line 118
	mov	eax, DWORD PTR [rax]
	sub	eax, 32					; 00000020H
	cmp	eax, 1
	ja	SHORT $LN2@ccread_ali
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN13@ccread_ali
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rcx+96], rdx
	mov	QWORD PTR [rcx+88], rax
$LN13@ccread_ali:
; Line 992
	mov	eax, 1
; Line 995
	ret	0
$LN2@ccread_ali:
; Line 994
	xor	eax, eax
; Line 995
	ret	0
ccread_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_function_specifier
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_function_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+88]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r8, QWORD PTR [rcx+80]
	cmp	rdx, r8
	cmovb	rax, rdx
; Line 174
	mov	eax, DWORD PTR [rax]
	sub	eax, 41					; 00000029H
	cmp	eax, 1
	ja	SHORT $LN2@ccread_fun
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN13@ccread_fun
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rcx+96], rdx
	mov	QWORD PTR [rcx+88], rax
$LN13@ccread_fun:
; Line 978
	mov	eax, 1
; Line 981
	ret	0
$LN2@ccread_fun:
; Line 980
	xor	eax, eax
; Line 981
	ret	0
ccread_function_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_type_qualifier
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_type_qualifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+88]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r8, QWORD PTR [rcx+80]
	cmp	rdx, r8
	cmovb	rax, rdx
; Line 132
	mov	eax, DWORD PTR [rax]
	sub	eax, 36					; 00000024H
	cmp	eax, 2
	ja	SHORT $LN2@ccread_typ
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN13@ccread_typ
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rcx+96], rdx
	mov	QWORD PTR [rcx+88], rax
$LN13@ccread_typ:
; Line 964
	mov	eax, 1
; Line 967
	ret	0
$LN2@ccread_typ:
; Line 966
	xor	eax, eax
; Line 967
	ret	0
ccread_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_storage_class_specifier
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_storage_class_specifier PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+88]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r8, QWORD PTR [rcx+80]
	cmp	rdx, r8
	cmovb	rax, rdx
; Line 160
	mov	eax, DWORD PTR [rax]
	sub	eax, 64					; 00000040H
	cmp	eax, 7
	ja	SHORT $LN2@ccread_sto
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN13@ccread_sto
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rcx+96], rdx
	mov	QWORD PTR [rcx+88], rax
$LN13@ccread_sto:
; Line 948
	mov	eax, 1
; Line 951
	ret	0
$LN2@ccread_sto:
; Line 950
	xor	eax, eax
; Line 951
	ret	0
ccread_storage_class_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_type_specifier
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_type_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 909
	sub	rsp, 40					; 00000028H
; Line 62
	mov	r9, QWORD PTR [rcx+88]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r11, QWORD PTR [rcx+80]
; Line 909
	mov	r10, rcx
; Line 62
	cmp	r9, r11
	cmovb	rax, r9
; Line 146
	mov	ecx, DWORD PTR [rax]
	lea	eax, DWORD PTR [rcx-45]
	cmp	eax, 19
	ja	$LN2@ccread_typ
; Line 912
	lea	eax, DWORD PTR [rcx-47]
	cmp	eax, 15
	ja	$LN2@ccread_typ
	mov	QWORD PTR [rsp+32], rbx
	lea	rbx, OFFSET FLAT:__ImageBase
	cdqe
	mov	ecx, DWORD PTR $LN115@ccread_typ[rbx+rax*4]
	add	rcx, rbx
	mov	rbx, QWORD PTR [rsp+32]
	jmp	rcx
$LN5@ccread_typ:
; Line 914
	mov	rcx, r10
; Line 929
	add	rsp, 40					; 00000028H
; Line 914
	jmp	ccread_struct_or_union_specifier
$LN7@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN28@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN28@ccread_typ:
; Line 915
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 915
	jmp	cctree_new
$LN8@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN36@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN36@ccread_typ:
; Line 916
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 916
	jmp	cctree_new
$LN9@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN44@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN44@ccread_typ:
; Line 917
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 917
	jmp	cctree_new
$LN10@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN52@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN52@ccread_typ:
; Line 918
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 918
	jmp	cctree_new
$LN11@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN60@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN60@ccread_typ:
; Line 919
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 919
	jmp	cctree_new
$LN12@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN68@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN68@ccread_typ:
; Line 920
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 920
	jmp	cctree_new
$LN13@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN76@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN76@ccread_typ:
; Line 921
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 921
	jmp	cctree_new
$LN14@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN84@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN84@ccread_typ:
; Line 922
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 922
	jmp	cctree_new
$LN15@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN92@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN92@ccread_typ:
; Line 923
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 923
	jmp	cctree_new
$LN16@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN100@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN100@ccread_typ:
; Line 924
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 924
	jmp	cctree_new
$LN17@ccread_typ:
; Line 95
	cmp	r9, r11
	jae	SHORT $LN108@ccread_typ
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [r10+96], r9
	mov	QWORD PTR [r10+88], rax
$LN108@ccread_typ:
; Line 925
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
; Line 929
	add	rsp, 40					; 00000028H
; Line 925
	jmp	cctree_new
$LN2@ccread_typ:
; Line 928
	xor	eax, eax
; Line 929
	add	rsp, 40					; 00000028H
	ret	0
$LN115@ccread_typ:
	DD	$LN7@ccread_typ
	DD	$LN8@ccread_typ
	DD	$LN9@ccread_typ
	DD	$LN10@ccread_typ
	DD	$LN17@ccread_typ
	DD	$LN16@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN15@ccread_typ
	DD	$LN14@ccread_typ
	DD	$LN13@ccread_typ
	DD	$LN12@ccread_typ
	DD	$LN11@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN5@ccread_typ
	DD	$LN5@ccread_typ
ccread_type_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_struct_or_union_specifier
_TEXT	SEGMENT
name$1$ = 32
tv821 = 128
reader$ = 128
root$ = 136
mark$ = 144
next$1$ = 152
ccread_struct_or_union_specifier PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 862
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rsi
	push	r13
	push	r14
	sub	rsp, 88					; 00000058H
	mov	rbx, rcx
; Line 62
	lea	r13, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [rcx+88]
	mov	rax, r13
; Line 862
	mov	esi, r8d
	mov	r14, rdx
; Line 62
	mov	r9, QWORD PTR [rbx+80]
	cmp	rcx, r9
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 62			; 0000003eH
; Line 104
	jne	$LN67@ccread_str
; Line 95
	cmp	rcx, r9
	jae	SHORT $LN82@ccread_str
; Line 96
	mov	QWORD PTR [rbx+96], rcx
	mov	rax, rcx
	add	rcx, 32					; 00000020H
	mov	QWORD PTR [rbx+88], rcx
	jmp	SHORT $LN76@ccread_str
$LN82@ccread_str:
; Line 98
	mov	rax, r13
$LN76@ccread_str:
; Line 862
	test	rax, rax
	je	$LN67@ccread_str
; Line 865
	mov	QWORD PTR [rsp+80], rbp
	mov	rcx, rbx
	mov	QWORD PTR [rsp+72], rdi
	mov	QWORD PTR [rsp+64], r12
	mov	QWORD PTR [rsp+56], r15
	call	ccread_litide
; Line 62
	mov	rdx, QWORD PTR [rbx+88]
	mov	rcx, r13
	mov	r8, QWORD PTR [rbx+80]
	cmp	rdx, r8
; Line 865
	mov	QWORD PTR name$1$[rsp], rax
; Line 62
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 6
; Line 104
	jne	SHORT $LN156@ccread_str
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN100@ccread_str
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rbx+96], rdx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN94@ccread_str
$LN100@ccread_str:
; Line 98
	mov	rdx, r13
$LN94@ccread_str:
; Line 866
	test	rdx, rdx
	jne	SHORT $LN6@ccread_str
$LN156@ccread_str:
; Line 867
	lea	rdx, OFFSET FLAT:??_C@_0CC@ODCHBMFC@expected?5?8?$HL?8?5for?5struct?5specifi@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN6@ccread_str:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	ecx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 869
	xor	r15d, r15d
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccread.c
; Line 869
	mov	ebp, r15d
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r12, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR tv821[rsp], r12
	npad	8
$LL2@ccread_str:
; File W:\cpp\void\ktt-c\ccread.c
; Line 852
	mov	r8d, esi
	mov	rdx, r14
	mov	rcx, rbx
	call	ccread_specifier_qualifier_list
	mov	rdi, rax
	test	rax, rax
	je	$LN14@ccread_str
; Line 853
	mov	r9, rax
	mov	r8d, esi
	mov	rdx, r14
	mov	rcx, rbx
	call	ccread_struct_decl_name_list
	test	rax, rax
	je	$LN13@ccread_str
; Line 854
	mov	r9, rax
	mov	r8, rdi
	mov	edx, esi
	mov	rcx, r14
	call	cctree_decl
	mov	QWORD PTR next$1$[rsp], rax
; Line 870
	test	rax, rax
	je	$LN14@ccread_str
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rcx, QWORD PTR [r12]
; Line 241
	lea	r14, QWORD PTR [rbp-40]
	test	rbp, rbp
; Line 196
	mov	edx, OFFSET FLAT:ccalloctr
	mov	rdi, r15
	mov	rsi, r15
; Line 241
	cmove	r14, r15
; Line 186
	mov	rax, r14
; Line 196
	mov	r12, QWORD PTR [rdx+rcx]
; Line 198
	test	r14, r14
	je	SHORT $LN61@ccread_str
; Line 199
	mov	rdi, QWORD PTR [r14+24]
; Line 200
	mov	rsi, QWORD PTR [r14+32]
; Line 202
	mov	r12, QWORD PTR [r14+8]
$LN61@ccread_str:
; Line 209
	lea	rbp, QWORD PTR [rsi+8]
	cmp	rdi, rbp
	jae	SHORT $LN64@ccread_str
; Line 213
	lea	rcx, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rax
	cmp	rcx, rbp
	mov	rdi, rbp
	cmovae	rdi, rcx
	lea	rcx, QWORD PTR [rdi+40]
	call	r12
; Line 220
	test	r14, r14
	jne	SHORT $LN64@ccread_str
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], r15
; Line 224
	mov	QWORD PTR [rax+8], r12
$LN64@ccread_str:
; File W:\cpp\void\ktt-c\ccread.c
; Line 872
	mov	r14, QWORD PTR root$[rsp]
	mov	r12, QWORD PTR tv821[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], rbp
; Line 242
	lea	rbp, QWORD PTR [rax+40]
; Line 228
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 871
	mov	rax, QWORD PTR next$1$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rsi, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 871
	mov	QWORD PTR [rbp+rsi*8], rax
; Line 872
	mov	rax, QWORD PTR [rbx+96]
	mov	esi, DWORD PTR mark$[rsp]
	test	BYTE PTR [rax+16], 2
	jne	$LL2@ccread_str
	lea	rdx, OFFSET FLAT:??_C@_0N@BDNLGGP@expected?5?8?$DL?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
; Line 873
	jmp	$LL2@ccread_str
$LN13@ccread_str:
; Line 855
	lea	rdx, OFFSET FLAT:??_C@_0BE@MJILOMBI@expected?5declarator@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN14@ccread_str:
; Line 62
	mov	rcx, QWORD PTR [rbx+88]
	mov	rax, r13
	mov	rdx, QWORD PTR [rbx+80]
	mov	r12, QWORD PTR [rsp+64]
	cmp	rcx, rdx
	mov	rdi, QWORD PTR [rsp+72]
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 7
; Line 104
	jne	SHORT $LN157@ccread_str
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN118@ccread_str
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN112@ccread_str
$LN118@ccread_str:
; Line 98
	mov	rcx, r13
$LN112@ccread_str:
; Line 874
	test	rcx, rcx
	jne	SHORT $LN8@ccread_str
$LN157@ccread_str:
; Line 875
	lea	rdx, OFFSET FLAT:??_C@_0CC@FDBKEOAC@expected?5?8?$HN?8?5for?5struct?5specifi@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN8@ccread_str:
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 151
	mov	rcx, QWORD PTR name$1$[rsp]
; Line 181
	mov	QWORD PTR [rax+32], rbp
; Line 151
	mov	rbp, QWORD PTR [rsp+80]
; Line 135
	mov	DWORD PTR [rax], 1
; Line 151
	test	rcx, rcx
	je	SHORT $LN133@ccread_str
	mov	r15, QWORD PTR [rcx+24]
$LN133@ccread_str:
; Line 182
	mov	QWORD PTR [rax+24], r15
; File W:\cpp\void\ktt-c\ccread.c
; Line 877
	mov	r15, QWORD PTR [rsp+56]
; Line 884
	add	rsp, 88					; 00000058H
	pop	r14
	pop	r13
	pop	rsi
	pop	rbx
	ret	0
$LN67@ccread_str:
; Line 62
	cmp	rcx, r9
	cmovb	r13, rcx
; Line 81
	cmp	DWORD PTR [r13], 61			; 0000003dH
; Line 104
	jne	SHORT $LN146@ccread_str
; Line 95
	cmp	rcx, r9
	jae	SHORT $LN146@ccread_str
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
$LN146@ccread_str:
; Line 883
	xor	eax, eax
; Line 884
	add	rsp, 88					; 00000058H
	pop	r14
	pop	r13
	pop	rsi
	pop	rbx
	ret	0
ccread_struct_or_union_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_struct_decl
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_struct_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 851
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rbp, rcx
; Line 852
	call	ccread_specifier_qualifier_list
	mov	rsi, rax
	test	rax, rax
	je	SHORT $LN4@ccread_str
; Line 853
	mov	r9, rax
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rbp
	call	ccread_struct_decl_name_list
	test	rax, rax
	je	SHORT $LN3@ccread_str
; Line 854
	mov	r9, rax
	mov	r8, rsi
	mov	edx, ebx
	mov	rcx, rdi
	call	cctree_decl
	jmp	SHORT $LN1@ccread_str
$LN3@ccread_str:
; Line 855
	lea	rdx, OFFSET FLAT:??_C@_0BE@MJILOMBI@expected?5declarator@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN4@ccread_str:
; Line 857
	xor	eax, eax
$LN1@ccread_str:
; Line 858
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_struct_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_init_decl
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_init_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 839
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rbp, rcx
; Line 840
	call	ccread_declaration_specifiers
	mov	rsi, rax
	test	rax, rax
	je	SHORT $LN4@ccread_ini
; Line 842
	mov	r9, rax
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rbp
	call	ccread_init_decl_name_list
	test	rax, rax
	je	SHORT $LN3@ccread_ini
; Line 843
	mov	r9, rax
	mov	r8, rsi
	mov	edx, ebx
	mov	rcx, rdi
	call	cctree_decl
	jmp	SHORT $LN1@ccread_ini
$LN3@ccread_ini:
; Line 844
	lea	rdx, OFFSET FLAT:??_C@_0BE@MJILOMBI@expected?5declarator@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN4@ccread_ini:
; Line 846
	xor	eax, eax
$LN1@ccread_ini:
; Line 847
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_init_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_struct_decl_name_list
_TEXT	SEGMENT
tv556 = 32
tv557 = 40
tv567 = 48
reader$ = 128
root$ = 136
mark$ = 144
type$ = 152
ccread_struct_decl_name_list PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 829
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r10d, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 829
	mov	r15, rcx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccread.c
; Line 829
	xor	ecx, ecx
	mov	ebp, r8d
	mov	r14, rdx
	mov	edi, ecx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	rbx, QWORD PTR [r15+88]
	lea	rax, QWORD PTR [rax+r10*8]
	mov	QWORD PTR tv556[rsp], rax
	lea	rsi, QWORD PTR [r15+80]
$LL4@ccread_str:
; File W:\cpp\void\ktt-c\ccread.c
; Line 782
	mov	r8d, ebp
	mov	QWORD PTR tv557[rsp], rsi
	mov	rdx, r14
	mov	rcx, r15
	mov	r12, rbx
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, r15
	call	ccread_direct_decl_name
	mov	r13, rax
; Line 806
	test	rax, rax
	je	$LN101@ccread_str
; Line 62
	mov	rax, QWORD PTR [rbx]
	lea	r8, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rdx, QWORD PTR [rsi]
	mov	rcx, r8
	cmp	rax, rdx
	cmovb	rcx, rax
; Line 81
	cmp	DWORD PTR [rcx], 11
; Line 104
	jne	SHORT $LN99@ccread_str
; Line 95
	cmp	rax, rdx
	jae	SHORT $LN63@ccread_str
; Line 96
	lea	rcx, QWORD PTR [rax+32]
	mov	QWORD PTR [r15+96], rax
	mov	QWORD PTR [rbx], rcx
	jmp	SHORT $LN57@ccread_str
$LN63@ccread_str:
; Line 98
	mov	rax, r8
$LN57@ccread_str:
; Line 807
	test	rax, rax
	je	SHORT $LN99@ccread_str
; Line 585
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, r15
	call	ccread_conditional
; Line 808
	mov	QWORD PTR [r13+56], rax
; Line 809
	test	rax, rax
	jne	SHORT $LN99@ccread_str
	lea	rdx, OFFSET FLAT:??_C@_0CH@MONPNMKA@expected?5constant?5expression?5af@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN99@ccread_str:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 241
	mov	eax, 0
; Line 196
	mov	ecx, OFFSET FLAT:ccalloctr
; Line 241
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-40]
; Line 191
	mov	edi, eax
; Line 192
	mov	esi, eax
; Line 241
	cmove	rbx, rax
; Line 196
	mov	rax, QWORD PTR tv556[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rbp, QWORD PTR [rcx+rax]
; Line 198
	test	rbx, rbx
	je	SHORT $LN90@ccread_str
; Line 199
	mov	rdi, QWORD PTR [rbx+24]
; Line 200
	mov	rsi, QWORD PTR [rbx+32]
; Line 202
	mov	rbp, QWORD PTR [rbx+8]
$LN90@ccread_str:
; Line 209
	lea	r14, QWORD PTR [rsi+8]
	mov	rax, rbx
	cmp	rdi, r14
	jae	SHORT $LN93@ccread_str
; Line 213
	lea	rax, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rbx
	cmp	rax, r14
	mov	rdi, r14
	cmovae	rdi, rax
	lea	rcx, QWORD PTR [rdi+40]
	call	rbp
; Line 220
	test	rbx, rbx
	jne	SHORT $LN93@ccread_str
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	xor	ecx, ecx
; Line 224
	mov	QWORD PTR [rax+8], rbp
	mov	QWORD PTR [rax+16], rcx
$LN93@ccread_str:
; Line 228
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rbx, r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], r14
; Line 242
	lea	rdi, QWORD PTR [rax+40]
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR tv557[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rsi, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 832
	mov	QWORD PTR [rdi+rsi*8], r13
; Line 62
	mov	rsi, rax
	mov	rdx, QWORD PTR [rax]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [r12]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 10
; Line 104
	jne	SHORT $LN101@ccread_str
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN98@ccread_str
; Line 96
	mov	QWORD PTR [r15+96], rcx
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r12], rax
; Line 833
	test	rcx, rcx
	je	SHORT $LN101@ccread_str
$LN98@ccread_str:
	mov	ebp, DWORD PTR mark$[rsp]
	mov	r14, QWORD PTR root$[rsp]
	mov	r9, QWORD PTR type$[rsp]
	jmp	$LL4@ccread_str
$LN101@ccread_str:
; Line 835
	mov	rbx, QWORD PTR [rsp+128]
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_struct_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_init_decl_name_list
_TEXT	SEGMENT
tv524 = 32
tv525 = 40
tv534 = 48
reader$ = 128
root$ = 136
mark$ = 144
type$ = 152
ccread_init_decl_name_list PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 817
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r10d, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 817
	mov	r15, rcx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccread.c
; Line 818
	xor	ecx, ecx
	mov	ebp, r8d
	mov	r14, rdx
	mov	edi, ecx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	rbx, QWORD PTR [r15+88]
	lea	rax, QWORD PTR [rax+r10*8]
	mov	QWORD PTR tv524[rsp], rax
	lea	rsi, QWORD PTR [r15+80]
$LL4@ccread_ini:
; File W:\cpp\void\ktt-c\ccread.c
; Line 782
	mov	r8d, ebp
	mov	QWORD PTR tv525[rsp], rsi
	mov	rdx, r14
	mov	rcx, r15
	mov	r12, rbx
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, r15
	call	ccread_direct_decl_name
	mov	r13, rax
; Line 793
	test	rax, rax
	je	$LN69@ccread_ini
; Line 62
	mov	rax, QWORD PTR [rbx]
	lea	r8, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rdx, QWORD PTR [rsi]
	mov	rcx, r8
	cmp	rax, rdx
	cmovb	rcx, rax
; Line 81
	cmp	DWORD PTR [rcx], 110			; 0000006eH
; Line 104
	jne	SHORT $LN67@ccread_ini
; Line 95
	cmp	rax, rdx
	jae	SHORT $LN30@ccread_ini
; Line 96
	lea	rcx, QWORD PTR [rax+32]
	mov	QWORD PTR [r15+96], rax
	mov	QWORD PTR [rbx], rcx
	jmp	SHORT $LN24@ccread_ini
$LN30@ccread_ini:
; Line 98
	mov	rax, r8
$LN24@ccread_ini:
; Line 794
	test	rax, rax
	je	SHORT $LN67@ccread_ini
; Line 720
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, r15
	call	ccread_assignment
; Line 795
	mov	QWORD PTR [r13+64], rax
; Line 796
	test	rax, rax
	jne	SHORT $LN67@ccread_ini
	lea	rdx, OFFSET FLAT:??_C@_0BP@HCJGMMGM@expected?5initializer?5after?5?8?$DN?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN67@ccread_ini:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 241
	mov	eax, 0
; Line 196
	mov	ecx, OFFSET FLAT:ccalloctr
; Line 241
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-40]
; Line 191
	mov	edi, eax
; Line 192
	mov	esi, eax
; Line 241
	cmove	rbx, rax
; Line 196
	mov	rax, QWORD PTR tv524[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rbp, QWORD PTR [rcx+rax]
; Line 198
	test	rbx, rbx
	je	SHORT $LN39@ccread_ini
; Line 199
	mov	rdi, QWORD PTR [rbx+24]
; Line 200
	mov	rsi, QWORD PTR [rbx+32]
; Line 202
	mov	rbp, QWORD PTR [rbx+8]
$LN39@ccread_ini:
; Line 209
	lea	r14, QWORD PTR [rsi+8]
	mov	rax, rbx
	cmp	rdi, r14
	jae	SHORT $LN42@ccread_ini
; Line 213
	lea	rax, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rbx
	cmp	rax, r14
	mov	rdi, r14
	cmovae	rdi, rax
	lea	rcx, QWORD PTR [rdi+40]
	call	rbp
; Line 220
	test	rbx, rbx
	jne	SHORT $LN42@ccread_ini
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	xor	ecx, ecx
; Line 224
	mov	QWORD PTR [rax+8], rbp
	mov	QWORD PTR [rax+16], rcx
$LN42@ccread_ini:
; Line 228
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rbx, r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], r14
; Line 242
	lea	rdi, QWORD PTR [rax+40]
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR tv525[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rsi, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 822
	mov	QWORD PTR [rdi+rsi*8], r13
; Line 62
	mov	rsi, rax
	mov	rdx, QWORD PTR [rax]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [r12]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 10
; Line 104
	jne	SHORT $LN69@ccread_ini
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN66@ccread_ini
; Line 96
	mov	QWORD PTR [r15+96], rcx
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r12], rax
; Line 823
	test	rcx, rcx
	je	SHORT $LN69@ccread_ini
$LN66@ccread_ini:
	mov	ebp, DWORD PTR mark$[rsp]
	mov	r14, QWORD PTR root$[rsp]
	mov	r9, QWORD PTR type$[rsp]
	jmp	$LL4@ccread_ini
$LN69@ccread_ini:
; Line 825
	mov	rbx, QWORD PTR [rsp+128]
	mov	rax, rdi
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_init_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_struct_decl_name
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_struct_decl_name PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 804
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	esi, r8d
	mov	rbp, rdx
	mov	rdi, rcx
; Line 782
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_direct_decl_name
	mov	rbx, rax
; Line 806
	test	rax, rax
	je	SHORT $LN4@ccread_str
; Line 62
	mov	rdx, QWORD PTR [rdi+88]
	lea	r8, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rax, QWORD PTR [rdi+80]
	mov	rcx, r8
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 11
; Line 104
	jne	SHORT $LN234@ccread_str
; Line 95
	cmp	rdx, rax
	jae	SHORT $LN227@ccread_str
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rdi+96], rdx
	mov	QWORD PTR [rdi+88], rax
	jmp	SHORT $LN221@ccread_str
$LN227@ccread_str:
; Line 98
	mov	rdx, r8
$LN221@ccread_str:
; Line 807
	test	rdx, rdx
	je	SHORT $LN234@ccread_str
; Line 585
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_conditional
; Line 808
	mov	QWORD PTR [rbx+56], rax
; Line 809
	test	rax, rax
	jne	SHORT $LN234@ccread_str
	lea	rdx, OFFSET FLAT:??_C@_0CH@MONPNMKA@expected?5constant?5expression?5af@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN234@ccread_str:
; Line 813
	mov	rax, rbx
$LN4@ccread_str:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_struct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_init_decl_name
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_init_decl_name PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 789
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	esi, r8d
	mov	rbp, rdx
	mov	rdi, rcx
; Line 782
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_direct_decl_name
	mov	rbx, rax
; Line 793
	test	rax, rax
	je	SHORT $LN4@ccread_ini
; Line 62
	mov	rdx, QWORD PTR [rdi+88]
	lea	r8, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rax, QWORD PTR [rdi+80]
	mov	rcx, r8
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 110			; 0000006eH
; Line 104
	jne	SHORT $LN31@ccread_ini
; Line 95
	cmp	rdx, rax
	jae	SHORT $LN24@ccread_ini
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rdi+96], rdx
	mov	QWORD PTR [rdi+88], rax
	jmp	SHORT $LN18@ccread_ini
$LN24@ccread_ini:
; Line 98
	mov	rdx, r8
$LN18@ccread_ini:
; Line 794
	test	rdx, rdx
	je	SHORT $LN31@ccread_ini
; Line 720
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_assignment
; Line 795
	mov	QWORD PTR [rbx+64], rax
; Line 796
	test	rax, rax
	jne	SHORT $LN31@ccread_ini
	lea	rdx, OFFSET FLAT:??_C@_0BP@HCJGMMGM@expected?5initializer?5after?5?8?$DN?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN31@ccread_ini:
; Line 800
	mov	rax, rbx
$LN4@ccread_ini:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_init_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_decl_name_modifier_maybe
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_decl_name_modifier_maybe PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 773
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 62
	mov	r10, QWORD PTR [rcx+88]
	lea	rbx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r11, QWORD PTR [rcx+80]
	mov	rax, rbx
	cmp	r10, r11
	cmovb	rax, r10
; Line 81
	cmp	DWORD PTR [rax], 93			; 0000005dH
; Line 104
	jne	SHORT $LN2@ccread_dec
; Line 95
	cmp	r10, r11
	jae	SHORT $LN20@ccread_dec
; Line 96
	lea	rax, QWORD PTR [r10+32]
	mov	QWORD PTR [rcx+96], r10
	mov	QWORD PTR [rcx+88], rax
	jmp	SHORT $LN14@ccread_dec
$LN20@ccread_dec:
; Line 98
	mov	r10, rbx
$LN14@ccread_dec:
; Line 773
	test	r10, r10
	je	SHORT $LN2@ccread_dec
; Line 774
	call	ccread_decl_name_modifier_maybe
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 774
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 5
; Line 157
	mov	QWORD PTR [rax+48], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 776
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@ccread_dec:
; Line 775
	mov	rax, r9
; Line 776
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccread_decl_name_modifier_maybe ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_direct_decl_name
_TEXT	SEGMENT
reader$ = 64
root$ = 72
mark$ = 80
type$ = 88
ccread_direct_decl_name PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 748
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 62
	mov	r10, QWORD PTR [rcx+88]
	lea	rsi, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 748
	mov	rbx, rcx
; Line 62
	mov	rax, rsi
	mov	rcx, QWORD PTR [rcx+80]
; Line 748
	mov	r15, r9
; Line 62
	cmp	r10, rcx
; Line 748
	mov	ebp, r8d
	mov	r14, rdx
; Line 62
	cmovb	rax, r10
; Line 81
	cmp	DWORD PTR [rax], 4
; Line 104
	jne	$LN9@ccread_dir
; Line 95
	cmp	r10, rcx
	jae	SHORT $LN24@ccread_dir
; Line 96
	mov	QWORD PTR [rbx+96], r10
	mov	rax, r10
	add	r10, 32					; 00000020H
	mov	QWORD PTR [rbx+88], r10
	jmp	SHORT $LN18@ccread_dir
$LN24@ccread_dir:
; Line 98
	mov	rax, rsi
$LN18@ccread_dir:
; Line 748
	test	rax, rax
	je	$LN9@ccread_dir
; File W:\cpp\void\ktt-c\cctree.h
; Line 143
	mov	r8d, DWORD PTR [r9+16]
	mov	rdx, QWORD PTR [r9+8]
	mov	ecx, DWORD PTR [r9]
	mov	QWORD PTR [rsp+64], r12
	call	cctree_new
; Line 144
	movups	xmm0, XMMWORD PTR [r15]
; File W:\cpp\void\ktt-c\ccread.c
; Line 782
	mov	r9, rax
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 144
	movups	XMMWORD PTR [rax], xmm0
	mov	rdi, rax
	movups	xmm1, XMMWORD PTR [r15+16]
	movups	XMMWORD PTR [rax+16], xmm1
	movups	xmm0, XMMWORD PTR [r15+32]
	movups	XMMWORD PTR [rax+32], xmm0
	movups	xmm1, XMMWORD PTR [r15+48]
	movups	XMMWORD PTR [rax+48], xmm1
	movups	xmm0, XMMWORD PTR [r15+64]
	movups	XMMWORD PTR [rax+64], xmm0
	movups	xmm1, XMMWORD PTR [r15+80]
	movups	XMMWORD PTR [rax+80], xmm1
	movups	xmm0, XMMWORD PTR [r15+96]
	movups	XMMWORD PTR [rax+96], xmm0
	movups	xmm1, XMMWORD PTR [r15+112]
	movups	XMMWORD PTR [rax+112], xmm1
	movups	xmm0, XMMWORD PTR [r15+128]
	movups	XMMWORD PTR [rax+128], xmm0
	movsd	xmm1, QWORD PTR [r15+144]
	movsd	QWORD PTR [rax+144], xmm1
; File W:\cpp\void\ktt-c\ccread.c
; Line 782
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
	call	ccread_direct_decl_name
; Line 62
	mov	rdx, QWORD PTR [rbx+88]
	mov	rcx, rsi
	mov	r8, QWORD PTR [rbx+80]
; Line 782
	mov	r12, rax
; Line 62
	cmp	rdx, r8
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 5
; Line 104
	jne	SHORT $LN126@ccread_dir
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN78@ccread_dir
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rbx+96], rdx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN72@ccread_dir
$LN78@ccread_dir:
; Line 98
	mov	rdx, rsi
$LN72@ccread_dir:
; Line 753
	test	rdx, rdx
	jne	SHORT $LN4@ccread_dir
$LN126@ccread_dir:
; Line 754
	lea	rdx, OFFSET FLAT:??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN4@ccread_dir:
; Line 756
	mov	r9, r15
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
	call	ccread_direct_decl_name_modifier
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	mov	rcx, rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 757
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rdi], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rdi+16], xmm1
	movups	xmm0, XMMWORD PTR [rax+32]
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+48]
	movups	XMMWORD PTR [rdi+48], xmm1
	movups	xmm0, XMMWORD PTR [rax+64]
	movups	XMMWORD PTR [rdi+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+80]
	movups	XMMWORD PTR [rdi+80], xmm1
	movups	xmm0, XMMWORD PTR [rax+96]
	movups	XMMWORD PTR [rdi+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+112]
	movups	XMMWORD PTR [rdi+112], xmm1
	movups	xmm0, XMMWORD PTR [rax+128]
	movups	XMMWORD PTR [rdi+128], xmm0
	movsd	xmm1, QWORD PTR [rax+144]
	movsd	QWORD PTR [rdi+144], xmm1
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	call	free
; File W:\cpp\void\ktt-c\ccread.c
; Line 759
	mov	rax, r12
	mov	r12, QWORD PTR [rsp+64]
	jmp	$LN6@ccread_dir
$LN9@ccread_dir:
; Line 62
	cmp	r10, rcx
; Line 761
	mov	rcx, rbx
; Line 62
	cmovb	rsi, r10
; Line 81
	cmp	DWORD PTR [rsi], 19
; Line 761
	jne	$LN5@ccread_dir
; Line 762
	call	ccread_litide
; Line 763
	mov	r9, r15
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
	mov	rdi, rax
	call	ccread_direct_decl_name_modifier
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 763
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
; Line 151
	xor	edx, edx
; Line 134
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 15
; Line 136
	mov	QWORD PTR [rax+8], r14
; Line 137
	mov	DWORD PTR [rax+16], ebp
; Line 258
	mov	QWORD PTR [rax+48], rbx
; Line 151
	test	rdi, rdi
	je	SHORT $LN110@ccread_dir
	mov	rcx, QWORD PTR [rdi+24]
$LN110@ccread_dir:
; Line 259
	mov	QWORD PTR [rax+24], rcx
; Line 260
	mov	QWORD PTR [rax+56], rdx
; Line 261
	mov	QWORD PTR [rax+64], rdx
; File W:\cpp\void\ktt-c\ccread.c
; Line 764
	jmp	SHORT $LN6@ccread_dir
$LN5@ccread_dir:
; Line 766
	call	ccread_direct_decl_name_modifier
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 766
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 15
; Line 136
	mov	QWORD PTR [rax+8], r14
; Line 137
	mov	DWORD PTR [rax+16], ebp
; Line 258
	mov	QWORD PTR [rax+48], rbx
$LN6@ccread_dir:
; File W:\cpp\void\ktt-c\ccread.c
; Line 769
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
ccread_direct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_direct_decl_name_modifier
_TEXT	SEGMENT
tv1011 = 32
decl$1$ = 112
reader$ = 112
root$ = 120
mark$ = 128
type$ = 136
ccread_direct_decl_name_modifier PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 725
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rbp
	push	rdi
	push	r12
	push	r13
	push	r15
	sub	rsp, 56					; 00000038H
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	r15, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r11, QWORD PTR [rcx+80]
	mov	r10, r15
	cmp	rax, r11
; Line 725
	mov	rbp, r9
	mov	r12d, r8d
	mov	r13, rdx
; Line 62
	cmovb	r10, rax
; Line 725
	mov	rbx, rcx
; Line 81
	cmp	DWORD PTR [r10], 4
; Line 104
	jne	$LN11@ccread_dir
; Line 95
	cmp	rax, r11
	jae	SHORT $LN26@ccread_dir
; Line 96
	mov	QWORD PTR [rcx+96], rax
	mov	rcx, rax
	add	rax, 32					; 00000020H
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN20@ccread_dir
$LN26@ccread_dir:
; Line 98
	mov	rcx, r15
$LN20@ccread_dir:
; Line 725
	test	rcx, rcx
	je	$LN11@ccread_dir
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	edx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	xor	ebp, ebp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rcx, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	mov	QWORD PTR [rsp+120], rsi
	mov	esi, ebp
	mov	QWORD PTR [rsp+48], r14
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r14, QWORD PTR [rcx+rdx*8]
	mov	QWORD PTR tv1011[rsp], r14
	npad	7
$LL31@ccread_dir:
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	cmp	rax, r11
	mov	rcx, r15
	cmovb	rcx, rax
; Line 81
	cmp	DWORD PTR [rcx], 13
; Line 1063
	jne	SHORT $LN36@ccread_dir
; Line 1064
	lea	rdx, OFFSET FLAT:??_C@_0CN@NANEDLOL@unexpected?5?8?4?4?4?8?0?5must?5be?5at?5en@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN36@ccread_dir:
; Line 1066
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_declaration_specifiers
; Line 1067
	test	rax, rax
	je	$LN178@ccread_dir
; Line 782
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_direct_decl_name
	mov	QWORD PTR decl$1$[rsp], rax
; Line 1075
	test	rax, rax
	je	$LN178@ccread_dir
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR [r14]
; Line 241
	lea	rdi, QWORD PTR [rsi-40]
	test	rsi, rsi
; Line 196
	mov	ecx, OFFSET FLAT:ccalloctr
	mov	rsi, rbp
; Line 241
	cmove	rdi, rbp
; Line 196
	mov	r14, QWORD PTR [rcx+rax]
; Line 198
	test	rdi, rdi
	je	SHORT $LN76@ccread_dir
; Line 199
	mov	rsi, QWORD PTR [rdi+24]
; Line 200
	mov	rbp, QWORD PTR [rdi+32]
; Line 202
	mov	r14, QWORD PTR [rdi+8]
$LN76@ccread_dir:
; Line 209
	lea	r15, QWORD PTR [rbp+8]
	mov	rax, rdi
	cmp	rsi, r15
	jae	SHORT $LN79@ccread_dir
; Line 213
	lea	rax, QWORD PTR [rsi+rsi]
; Line 217
	mov	rdx, rdi
	cmp	rax, r15
	mov	rsi, r15
	cmovae	rsi, rax
	lea	rcx, QWORD PTR [rsi+40]
	call	r14
; Line 220
	test	rdi, rdi
	jne	SHORT $LN79@ccread_dir
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rdi
; Line 224
	mov	QWORD PTR [rax+8], r14
$LN79@ccread_dir:
; Line 228
	mov	QWORD PTR [rax+24], rsi
; Line 242
	lea	rsi, QWORD PTR [rax+40]
; Line 229
	mov	QWORD PTR [rax+32], r15
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	lea	r15, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 1076
	mov	rax, QWORD PTR decl$1$[rsp]
; Line 62
	mov	rcx, r15
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rbp, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 1076
	mov	QWORD PTR [rsi+rbp*8], rax
; Line 62
	mov	rax, QWORD PTR [rbx+88]
	mov	r11, QWORD PTR [rbx+80]
	cmp	rax, r11
	cmovb	rcx, rax
; Line 81
	cmp	DWORD PTR [rcx], 10
; Line 104
	jne	SHORT $LN178@ccread_dir
; Line 95
	cmp	rax, r11
	jae	SHORT $LN92@ccread_dir
; Line 96
	mov	QWORD PTR [rbx+96], rax
	mov	rcx, rax
	add	rax, 32					; 00000020H
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN91@ccread_dir
$LN92@ccread_dir:
; Line 98
	mov	rcx, r15
$LN91@ccread_dir:
; Line 1077
	mov	r14, QWORD PTR tv1011[rsp]
	mov	ebp, 0
	test	rcx, rcx
	jne	$LL31@ccread_dir
$LN178@ccread_dir:
; Line 62
	mov	rcx, QWORD PTR [rbx+88]
	mov	rax, r15
	mov	rdx, QWORD PTR [rbx+80]
	mov	r14, QWORD PTR [rsp+48]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 5
; Line 104
	jne	SHORT $LN180@ccread_dir
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN115@ccread_dir
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN109@ccread_dir
$LN115@ccread_dir:
; Line 98
	mov	rcx, r15
$LN109@ccread_dir:
; Line 727
	test	rcx, rcx
	jne	SHORT $LN4@ccread_dir
$LN180@ccread_dir:
	lea	rdx, OFFSET FLAT:??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN4@ccread_dir:
; Line 728
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_direct_decl_name_modifier
	mov	rbx, rax
; Line 729
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN5@ccread_dir
	lea	rdx, OFFSET FLAT:??_C@_0BP@IKEJFDCA@function?5that?5returns?5function@
	lea	rcx, OFFSET FLAT:??_C@_03HMEPACKF@war@
	call	cctrace_
$LN5@ccread_dir:
; Line 730
	cmp	DWORD PTR [rbx], 4
	jne	SHORT $LN6@ccread_dir
	lea	rdx, OFFSET FLAT:??_C@_0BM@MNHMNFH@function?5that?5returns?5array@
	lea	rcx, OFFSET FLAT:??_C@_03HMEPACKF@war@
	call	cctrace_
$LN6@ccread_dir:
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 173
	mov	QWORD PTR [rax+32], rsi
; File W:\cpp\void\ktt-c\ccread.c
; Line 731
	mov	rsi, QWORD PTR [rsp+120]
; File W:\cpp\void\ktt-c\cctree.h
; Line 135
	mov	DWORD PTR [rax], 3
; Line 172
	mov	QWORD PTR [rax+48], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 744
	add	rsp, 56					; 00000038H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
$LN11@ccread_dir:
; Line 62
	cmp	rax, r11
	mov	rcx, r15
	cmovb	rcx, rax
; Line 81
	cmp	DWORD PTR [rcx], 8
; Line 104
	jne	$LN7@ccread_dir
; Line 95
	cmp	rax, r11
	jae	SHORT $LN144@ccread_dir
; Line 96
	lea	rcx, QWORD PTR [rax+32]
	mov	QWORD PTR [rbx+96], rax
	mov	QWORD PTR [rbx+88], rcx
	jmp	SHORT $LN138@ccread_dir
$LN144@ccread_dir:
; Line 98
	mov	rax, r15
$LN138@ccread_dir:
; Line 733
	test	rax, rax
	je	$LN7@ccread_dir
; Line 735
	mov	rcx, rbx
	call	ccread_expression
; Line 62
	mov	rdx, QWORD PTR [rbx+88]
	mov	rcx, r15
	mov	r8, QWORD PTR [rbx+80]
; Line 735
	mov	rdi, rax
; Line 62
	cmp	rdx, r8
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 9
; Line 104
	jne	SHORT $LN181@ccread_dir
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN162@ccread_dir
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rbx+96], rdx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN156@ccread_dir
$LN162@ccread_dir:
; Line 98
	mov	rdx, r15
$LN156@ccread_dir:
; Line 737
	test	rdx, rdx
	jne	SHORT $LN8@ccread_dir
$LN181@ccread_dir:
; Line 738
	lea	rdx, OFFSET FLAT:??_C@_0N@ENGHABPN@expected?5?8?$FN?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN8@ccread_dir:
; Line 740
	mov	r9, rbp
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_direct_decl_name_modifier
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 740
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 4
; Line 164
	mov	QWORD PTR [rax+48], rbx
; Line 165
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 744
	add	rsp, 56					; 00000038H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
$LN7@ccread_dir:
; Line 743
	mov	rax, rbp
; Line 744
	add	rsp, 56					; 00000038H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rbp
	pop	rbx
	ret	0
ccread_direct_decl_name_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_specifier_qualifier_list
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_specifier_qualifier_list PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1004
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 1005
	call	ccread_type_specifier
; Line 62
	mov	rdx, QWORD PTR [rbx+88]
; Line 1005
	mov	r8, rax
; Line 62
	mov	r9, QWORD PTR [rbx+80]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rdx, r9
	mov	r10, rax
	cmovb	r10, rdx
; Line 132
	mov	ecx, DWORD PTR [r10]
	sub	ecx, 36					; 00000024H
	cmp	ecx, 2
	mov	rcx, rdx
	ja	SHORT $LN15@ccread_spe
; Line 961
	test	r10, r10
	je	SHORT $LN15@ccread_spe
; Line 95
	cmp	rdx, r9
	jae	SHORT $LN15@ccread_spe
; Line 96
	lea	rcx, QWORD PTR [rdx+32]
	mov	QWORD PTR [rbx+96], rdx
	mov	QWORD PTR [rbx+88], rcx
$LN15@ccread_spe:
; Line 62
	cmp	rcx, r9
	cmovb	rax, rcx
; Line 118
	mov	eax, DWORD PTR [rax]
	sub	eax, 32					; 00000020H
	cmp	eax, 1
	ja	SHORT $LN42@ccread_spe
; Line 95
	cmp	rcx, r9
	jae	SHORT $LN42@ccread_spe
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
$LN42@ccread_spe:
; Line 1010
	mov	rax, r8
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccread_specifier_qualifier_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_attribute_seq
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_attribute_seq PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1021
	xor	eax, eax
; Line 1022
	ret	0
ccread_attribute_seq ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_declaration_specifiers
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_declaration_specifiers PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1033
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 62
	lea	rdi, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [rcx+88]
	mov	rax, rdi
	mov	r9, QWORD PTR [rbx+80]
	cmp	rcx, r9
	cmovb	rax, rcx
; Line 160
	mov	eax, DWORD PTR [rax]
	sub	eax, 64					; 00000040H
	cmp	eax, 7
	ja	SHORT $LN15@ccread_dec
; Line 95
	cmp	rcx, r9
	jae	SHORT $LN15@ccread_dec
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
$LN15@ccread_dec:
; Line 1036
	mov	rcx, rbx
	call	ccread_specifier_qualifier_list
; Line 62
	mov	r8, QWORD PTR [rbx+80]
; Line 1036
	mov	rdx, rax
; Line 62
	mov	rax, QWORD PTR [rbx+88]
	cmp	rax, r8
	cmovb	rdi, rax
; Line 174
	mov	ecx, DWORD PTR [rdi]
	sub	ecx, 41					; 00000029H
	cmp	ecx, 1
	ja	SHORT $LN42@ccread_dec
; Line 95
	cmp	rax, r8
	jae	SHORT $LN42@ccread_dec
; Line 96
	mov	QWORD PTR [rbx+96], rax
	add	rax, 32					; 00000020H
	mov	QWORD PTR [rbx+88], rax
$LN42@ccread_dec:
; Line 1041
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_declaration_specifiers ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_decl_name
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_decl_name PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 780
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rsi, rcx
; Line 782
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rsi
; Line 785
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 782
	jmp	ccread_direct_decl_name
ccread_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_initializer
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_initializer PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 720
	jmp	ccread_assignment
ccread_initializer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_param_type_list
_TEXT	SEGMENT
tv593 = 96
reader$ = 96
root$ = 104
mark$ = 112
decl$1$ = 120
ccread_param_type_list PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1084
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r9d, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	xor	ebp, ebp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccread.c
; Line 1084
	mov	r12d, r8d
	mov	r13, rdx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r15d, OFFSET FLAT:ccalloctr
; File W:\cpp\void\ktt-c\ccread.c
; Line 1084
	mov	rdi, rcx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+104], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 1074
	mov	esi, ebp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r14, QWORD PTR [rax+r9*8]
	mov	QWORD PTR tv593[rsp], r14
$LL4@ccread_par:
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rdi+88]
	lea	rcx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rdi+80]
	cmovb	rcx, rax
; Line 81
	cmp	DWORD PTR [rcx], 13
; Line 1063
	jne	SHORT $LN9@ccread_par
; Line 1064
	lea	rdx, OFFSET FLAT:??_C@_0CN@NANEDLOL@unexpected?5?8?4?4?4?8?0?5must?5be?5at?5en@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN9@ccread_par:
; Line 1066
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rdi
	call	ccread_declaration_specifiers
; Line 1067
	test	rax, rax
	je	$LN184@ccread_par
; Line 782
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rdi
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rdi
	call	ccread_direct_decl_name
	mov	QWORD PTR decl$1$[rsp], rax
; Line 1075
	test	rax, rax
	je	$LN184@ccread_par
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR [r14]
; Line 241
	lea	rbx, QWORD PTR [rsi-40]
	test	rsi, rsi
; Line 196
	mov	ecx, r15d
	mov	rsi, rbp
; Line 241
	cmove	rbx, rbp
; Line 196
	mov	r14, QWORD PTR [rcx+rax]
; Line 198
	test	rbx, rbx
	je	SHORT $LN154@ccread_par
; Line 199
	mov	rsi, QWORD PTR [rbx+24]
; Line 200
	mov	rbp, QWORD PTR [rbx+32]
; Line 202
	mov	r14, QWORD PTR [rbx+8]
$LN154@ccread_par:
; Line 209
	lea	r15, QWORD PTR [rbp+8]
	mov	rax, rbx
	cmp	rsi, r15
	jae	SHORT $LN157@ccread_par
; Line 213
	lea	rax, QWORD PTR [rsi+rsi]
; Line 217
	mov	rdx, rbx
	cmp	rax, r15
	mov	rsi, r15
	cmovae	rsi, rax
	lea	rcx, QWORD PTR [rsi+40]
	call	r14
; Line 220
	test	rbx, rbx
	jne	SHORT $LN157@ccread_par
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbx
; Line 224
	mov	QWORD PTR [rax+8], r14
$LN157@ccread_par:
; Line 228
	mov	QWORD PTR [rax+24], rsi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	lea	rcx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], r15
; Line 242
	lea	rsi, QWORD PTR [rax+40]
; File W:\cpp\void\ktt-c\ccread.c
; Line 1076
	mov	rax, QWORD PTR decl$1$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rbp, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 1076
	mov	QWORD PTR [rsi+rbp*8], rax
; Line 62
	mov	rdx, QWORD PTR [rdi+88]
	mov	rax, QWORD PTR [rdi+80]
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 10
; Line 104
	jne	SHORT $LN184@ccread_par
; Line 95
	mov	r14, QWORD PTR tv593[rsp]
	mov	ebp, 0
	mov	r15d, OFFSET FLAT:ccalloctr
	cmp	rdx, rax
	jae	$LL4@ccread_par
; Line 96
	mov	QWORD PTR [rdi+96], rdx
	lea	rcx, QWORD PTR [rdx+32]
	mov	QWORD PTR [rdi+88], rcx
; Line 1077
	test	rdx, rdx
	jne	$LL4@ccread_par
$LN184@ccread_par:
	mov	rbx, QWORD PTR [rsp+104]
; Line 1091
	mov	rax, rsi
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_param_type_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_constant_expression
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_constant_expression PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 585
	jmp	ccread_conditional
ccread_constant_expression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_assignment
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_assignment PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 567
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	ebp, r8d
	mov	r14, rdx
	mov	rsi, rcx
; Line 569
	call	ccread_conditional
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	lea	rcx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 569
	mov	rdi, rax
; Line 62
	mov	r9, rcx
	mov	rax, QWORD PTR [rsi+80]
	cmp	rbx, rax
	cmovb	r9, rbx
; Line 81
	cmp	DWORD PTR [r9], 110			; 0000006eH
; Line 104
	jne	SHORT $LN23@ccread_ass
; Line 95
	cmp	rbx, rax
	jae	SHORT $LN20@ccread_ass
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN14@ccread_ass
$LN20@ccread_ass:
; Line 98
	mov	rbx, rcx
$LN14@ccread_ass:
; Line 570
	test	rbx, rbx
	je	SHORT $LN23@ccread_ass
; Line 571
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_assignment
; Line 572
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rax
	mov	r8, rbx
	mov	edx, ebp
	mov	rcx, r14
	call	cctree_binary
	jmp	SHORT $LN2@ccread_ass
$LN23@ccread_ass:
; Line 576
	mov	rax, rdi
$LN2@ccread_ass:
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
ccread_assignment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_conditional
_TEXT	SEGMENT
parser$ = 80
root$ = 88
mark$ = 96
ccread_conditional PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 541
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	push	rdi
	push	r12
	sub	rsp, 48					; 00000030H
	mov	esi, r8d
	mov	rbp, rdx
	mov	rbx, rcx
; Line 543
	call	ccread_logical_or
; Line 62
	mov	rcx, QWORD PTR [rbx+88]
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 543
	mov	rdi, rax
; Line 62
	mov	rdx, r12
	mov	rax, QWORD PTR [rbx+80]
	cmp	rcx, rax
	cmovb	rdx, rcx
; Line 81
	cmp	DWORD PTR [rdx], 109			; 0000006dH
; Line 104
	jne	$LN43@ccread_con
; Line 95
	cmp	rcx, rax
	jae	SHORT $LN22@ccread_con
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN16@ccread_con
$LN22@ccread_con:
; Line 98
	mov	rcx, r12
$LN16@ccread_con:
; Line 545
	test	rcx, rcx
	je	$LN43@ccread_con
; Line 546
	mov	QWORD PTR [rsp+80], r14
; Line 547
	mov	r8d, esi
	mov	rdx, rbp
	mov	QWORD PTR [rsp+88], r15
	mov	rcx, rbx
	xor	r14d, r14d
	call	ccread_logical_or
; Line 62
	mov	rdx, QWORD PTR [rbx+88]
	mov	rcx, r12
	mov	r8, QWORD PTR [rbx+80]
; Line 547
	mov	r15, rax
; Line 62
	cmp	rdx, r8
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 11
; Line 104
	jne	SHORT $LN3@ccread_con
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN40@ccread_con
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rbx+96], rdx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN34@ccread_con
$LN40@ccread_con:
; Line 98
	mov	rdx, r12
$LN34@ccread_con:
; Line 548
	test	rdx, rdx
	je	SHORT $LN3@ccread_con
; Line 549
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rbx
	call	ccread_conditional
	mov	r14, rax
	jmp	SHORT $LN4@ccread_con
$LN3@ccread_con:
; Line 551
	lea	rdx, OFFSET FLAT:??_C@_0CM@CFADJNLG@expected?5?8?3?8?5invalid?5conditiona@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN4@ccread_con:
; Line 552
	mov	r9, r15
	mov	QWORD PTR [rsp+32], r14
	mov	r8, rdi
	mov	edx, esi
	mov	rcx, rbp
	call	cctree_ternary
; Line 555
	mov	r15, QWORD PTR [rsp+88]
	mov	r14, QWORD PTR [rsp+80]
	jmp	SHORT $LN2@ccread_con
$LN43@ccread_con:
; Line 556
	mov	rax, rdi
$LN2@ccread_con:
	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
ccread_conditional ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_logical_or
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_logical_or PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 523
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 525
	call	ccread_logical_and
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_log:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 108			; 0000006cH
; Line 526
	jne	$LN34@ccread_log
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_log
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN12@ccread_log
$LN18@ccread_log:
; Line 98
	mov	rbx, r12
$LN12@ccread_log:
; Line 528
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_logical_and
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 528
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 529
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 530
	jmp	$LL2@ccread_log
$LN34@ccread_log:
; Line 532
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 533
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_logical_or ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_logical_and
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_logical_and PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 505
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 507
	call	ccread_bitwise_or
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_log:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 107			; 0000006bH
; Line 508
	jne	$LN34@ccread_log
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_log
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN12@ccread_log
$LN18@ccread_log:
; Line 98
	mov	rbx, r12
$LN12@ccread_log:
; Line 510
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_bitwise_or
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 510
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 511
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 512
	jmp	$LL2@ccread_log
$LN34@ccread_log:
; Line 514
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 515
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_logical_and ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_bitwise_or
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_bitwise_or PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 487
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 489
	call	ccread_bitwise_xor
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_bit:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 106			; 0000006aH
; Line 490
	jne	$LN34@ccread_bit
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_bit
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN12@ccread_bit
$LN18@ccread_bit:
; Line 98
	mov	rbx, r12
$LN12@ccread_bit:
; Line 492
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_bitwise_xor
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 492
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 493
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 494
	jmp	$LL2@ccread_bit
$LN34@ccread_bit:
; Line 496
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 497
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_bitwise_or ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_bitwise_xor
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_bitwise_xor PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 469
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 471
	call	ccread_bitwise_and
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_bit:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 104			; 00000068H
; Line 472
	jne	$LN34@ccread_bit
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_bit
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN12@ccread_bit
$LN18@ccread_bit:
; Line 98
	mov	rbx, r12
$LN12@ccread_bit:
; Line 474
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_bitwise_and
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 474
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 475
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 476
	jmp	$LL2@ccread_bit
$LN34@ccread_bit:
; Line 478
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 479
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_bitwise_xor ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_bitwise_and
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_bitwise_and PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 451
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 453
	call	ccread_equality
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_bit:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 104			; 00000068H
; Line 454
	jne	$LN34@ccread_bit
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_bit
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN12@ccread_bit
$LN18@ccread_bit:
; Line 98
	mov	rbx, r12
$LN12@ccread_bit:
; Line 456
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_equality
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 456
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 457
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 458
	jmp	$LL2@ccread_bit
$LN34@ccread_bit:
; Line 460
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 461
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_bitwise_and ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_equality
_TEXT	SEGMENT
parser$ = 80
root$ = 88
mark$ = 96
ccread_equality PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 431
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	ebp, r8d
	mov	r14, rdx
	mov	rsi, rcx
; Line 411
	call	ccread_shift
	mov	r15, rax
	mov	QWORD PTR [rsp+80], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL6@ccread_equ:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rax, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 101			; 00000065H
; Line 414
	je	SHORT $LN8@ccread_equ
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 119			; 00000077H
; Line 414
	je	SHORT $LN8@ccread_equ
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 100			; 00000064H
; Line 414
	je	SHORT $LN8@ccread_equ
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 118			; 00000076H
; Line 414
	jne	$LN7@ccread_equ
$LN8@ccread_equ:
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN23@ccread_equ
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN17@ccread_equ
$LN23@ccread_equ:
; Line 98
	mov	rbx, r12
$LN17@ccread_equ:
; Line 417
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_shift
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 417
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r14
; Line 137
	mov	DWORD PTR [rcx+16], ebp
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], r15
; File W:\cpp\void\ktt-c\ccread.c
; Line 418
	mov	r15, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 419
	jmp	$LL6@ccread_equ
$LN7@ccread_equ:
; Line 62
	mov	rdi, QWORD PTR [rsp+80]
	cmp	rbx, rdx
	mov	rcx, r12
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 102			; 00000066H
; Line 434
	je	SHORT $LN3@ccread_equ
; Line 62
	cmp	rbx, rdx
	mov	rcx, r12
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 103			; 00000067H
; Line 434
	je	SHORT $LN3@ccread_equ
; Line 441
	mov	rax, r15
	jmp	SHORT $LN2@ccread_equ
$LN3@ccread_equ:
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN70@ccread_equ
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN64@ccread_equ
$LN70@ccread_equ:
; Line 98
	mov	rbx, r12
$LN64@ccread_equ:
; Line 437
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_equality
; Line 438
	mov	r9, r15
	mov	QWORD PTR [rsp+32], rax
	mov	r8, rbx
	mov	edx, ebp
	mov	rcx, r14
	call	cctree_binary
$LN2@ccread_equ:
; Line 442
	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_equality ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_relational
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_relational PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 409
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 411
	call	ccread_shift
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_rel:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 101			; 00000065H
; Line 414
	je	SHORT $LN4@ccread_rel
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 119			; 00000077H
; Line 414
	je	SHORT $LN4@ccread_rel
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 100			; 00000064H
; Line 414
	je	SHORT $LN4@ccread_rel
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 118			; 00000076H
; Line 414
	jne	$LN60@ccread_rel
$LN4@ccread_rel:
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN19@ccread_rel
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN13@ccread_rel
$LN19@ccread_rel:
; Line 98
	mov	rbx, r12
$LN13@ccread_rel:
; Line 417
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_shift
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 417
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 418
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 419
	jmp	$LL2@ccread_rel
$LN60@ccread_rel:
; Line 421
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 422
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_relational ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_shift
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_shift PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 386
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 388
	call	ccread_additive
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_shi:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 98			; 00000062H
; Line 389
	je	SHORT $LN4@ccread_shi
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 99			; 00000063H
; Line 389
	jne	$LN46@ccread_shi
$LN4@ccread_shi:
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN19@ccread_shi
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN13@ccread_shi
$LN19@ccread_shi:
; Line 98
	mov	rbx, r12
$LN13@ccread_shi:
; Line 392
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_additive
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 392
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 393
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 394
	jmp	$LL2@ccread_shi
$LN46@ccread_shi:
; Line 396
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 397
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_shift ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_additive
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_additive PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 365
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 367
	call	ccread_multiplicative
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_add:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 96			; 00000060H
; Line 368
	je	SHORT $LN4@ccread_add
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 97			; 00000061H
; Line 368
	jne	$LN46@ccread_add
$LN4@ccread_add:
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN19@ccread_add
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN13@ccread_add
$LN19@ccread_add:
; Line 98
	mov	rbx, r12
$LN13@ccread_add:
; Line 372
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_multiplicative
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 372
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 373
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 374
	jmp	$LL2@ccread_add
$LN46@ccread_add:
; Line 376
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 377
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_additive ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_multiplicative
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_multiplicative PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 343
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
; Line 345
	call	ccread_unary
	mov	rbp, rax
	mov	QWORD PTR [rsp+64], rdi
	lea	r12, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	npad	10
$LL2@ccread_mul:
; Line 62
	mov	rbx, QWORD PTR [rsi+88]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+80]
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 81
	cmp	DWORD PTR [rcx], 93			; 0000005dH
; Line 347
	je	SHORT $LN4@ccread_mul
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 94			; 0000005eH
; Line 347
	je	SHORT $LN4@ccread_mul
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 95			; 0000005fH
; Line 347
	jne	$LN53@ccread_mul
$LN4@ccread_mul:
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN19@ccread_mul
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rsi+96], rbx
	mov	QWORD PTR [rsi+88], rax
	jmp	SHORT $LN13@ccread_mul
$LN19@ccread_mul:
; Line 98
	mov	rbx, r12
$LN13@ccread_mul:
; Line 351
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_unary
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 351
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 136
	mov	QWORD PTR [rcx+8], r15
; Line 137
	mov	DWORD PTR [rcx+16], r14d
; Line 305
	mov	eax, DWORD PTR [rbx]
; Line 306
	mov	QWORD PTR [rcx+72], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 352
	mov	rbp, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	DWORD PTR [rcx+40], eax
; Line 307
	mov	QWORD PTR [rcx+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 353
	jmp	$LL2@ccread_mul
$LN53@ccread_mul:
; Line 355
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 356
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_multiplicative ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_unary
_TEXT	SEGMENT
clo$2$ = 32
clo$1 = 32
clo$2 = 32
reader$ = 112
root$ = 120
mark$ = 128
ccread_unary PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 267
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 96					; 00000060H
; Line 62
	mov	rbx, QWORD PTR [rcx+88]
	lea	r10, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r9, QWORD PTR [rcx+80]
	mov	rax, r10
	cmp	rbx, r9
; Line 267
	mov	edi, r8d
	mov	rsi, rdx
; Line 62
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 96			; 00000060H
; Line 271
	jne	$LN2@ccread_una
; Line 95
	lea	r8, QWORD PTR [rcx+96]
	cmp	rbx, r9
	jae	SHORT $LN29@ccread_una
; Line 96
	lea	rdx, QWORD PTR [rbx+32]
	mov	QWORD PTR [r8], rbx
	mov	QWORD PTR [rcx+88], rdx
; Line 62
	mov	rbp, rbx
	cmp	rdx, r9
	jae	SHORT $LN39@ccread_una
; Line 64
	mov	rax, rdx
	jmp	SHORT $LN38@ccread_una
$LN29@ccread_una:
; Line 98
	mov	rbp, r10
	mov	rdx, rbx
$LN39@ccread_una:
; Line 69
	mov	rax, r10
$LN38@ccread_una:
; Line 81
	cmp	DWORD PTR [rax], 96			; 00000060H
; Line 104
	jne	$LN4@ccread_una
; Line 95
	cmp	rdx, r9
	jae	SHORT $LN47@ccread_una
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rcx+88], rax
	jmp	SHORT $LN41@ccread_una
$LN47@ccread_una:
; Line 98
	mov	rdx, r10
$LN41@ccread_una:
; Line 273
	test	rdx, rdx
	je	SHORT $LN4@ccread_una
; Line 275
	movups	xmm0, XMMWORD PTR [rbp]
; Line 277
	mov	r8d, edi
	mov	rdx, rsi
	movups	XMMWORD PTR clo$2$[rsp], xmm0
	call	ccread_cast
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 277
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 297
	movups	xmm0, XMMWORD PTR clo$2$[rsp]
; Line 135
	mov	DWORD PTR [rax], 19
; Line 136
	mov	QWORD PTR [rax+8], rsi
; Line 297
	movd	DWORD PTR [rax+40], xmm0
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 298
	mov	QWORD PTR [rax+80], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 278
	jmp	$LN13@ccread_una
$LN4@ccread_una:
; Line 310
	mov	r8d, edi
	mov	rdx, rsi
	call	ccread_cast
	mov	r8, rbp
	jmp	$LN130@ccread_una
$LN2@ccread_una:
; Line 62
	cmp	rbx, r9
	mov	rax, r10
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 97			; 00000061H
; Line 282
	jne	SHORT $LN6@ccread_una
; Line 95
	lea	r8, QWORD PTR [rcx+96]
	cmp	rbx, r9
	jae	SHORT $LN73@ccread_una
; Line 96
	lea	rdx, QWORD PTR [rbx+32]
	mov	QWORD PTR [r8], rbx
	mov	QWORD PTR [rcx+88], rdx
; Line 62
	mov	rbp, rbx
	cmp	rdx, r9
	jae	SHORT $LN83@ccread_una
; Line 64
	mov	rax, rdx
	jmp	SHORT $LN82@ccread_una
$LN73@ccread_una:
; Line 98
	mov	rbp, r10
	mov	rdx, rbx
$LN83@ccread_una:
; Line 69
	mov	rax, r10
$LN82@ccread_una:
; Line 81
	cmp	DWORD PTR [rax], 97			; 00000061H
; Line 104
	jne	SHORT $LN4@ccread_una
; Line 95
	cmp	rdx, r9
	jae	SHORT $LN91@ccread_una
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rcx+88], rax
	jmp	SHORT $LN85@ccread_una
$LN91@ccread_una:
; Line 98
	mov	rdx, r10
$LN85@ccread_una:
; Line 284
	test	rdx, rdx
	je	SHORT $LN4@ccread_una
; Line 286
	movups	xmm1, XMMWORD PTR [rbp+16]
; Line 288
	mov	r8d, edi
	mov	rdx, rsi
	movups	xmm0, XMMWORD PTR [rbp]
	movups	XMMWORD PTR clo$2[rsp+16], xmm1
	mov	QWORD PTR clo$2[rsp+24], 123		; 0000007bH
	movups	XMMWORD PTR clo$2[rsp], xmm0
	call	ccread_cast
	lea	r8, QWORD PTR clo$2[rsp]
; Line 289
	jmp	$LN130@ccread_una
$LN6@ccread_una:
; Line 62
	cmp	rbx, r9
	mov	rax, r10
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 93			; 0000005dH
; Line 293
	jne	SHORT $LN10@ccread_una
; Line 95
	cmp	rbx, r9
	jae	SHORT $LN106@ccread_una
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rcx+96], rbx
	mov	QWORD PTR [rcx+88], rax
	jmp	SHORT $LN100@ccread_una
$LN106@ccread_una:
; Line 98
	mov	rbx, r10
$LN100@ccread_una:
; Line 297
	movups	xmm1, XMMWORD PTR [rbx+16]
	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR clo$1[rsp+16], xmm1
; Line 298
	mov	QWORD PTR clo$1[rsp+24], 85		; 00000055H
	movups	XMMWORD PTR clo$1[rsp], xmm0
; Line 300
	call	ccread_cast
	lea	r8, QWORD PTR clo$1[rsp]
; Line 301
	jmp	SHORT $LN130@ccread_una
$LN10@ccread_una:
; Line 62
	cmp	rbx, r9
	mov	rax, r10
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 87			; 00000057H
; Line 302
	je	SHORT $LN14@ccread_una
; Line 62
	cmp	rbx, r9
	mov	rax, r10
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 90			; 0000005aH
; Line 302
	je	SHORT $LN14@ccread_una
; Line 306
	call	ccread_postfix
	jmp	SHORT $LN13@ccread_una
$LN14@ccread_una:
; Line 95
	cmp	rbx, r9
	jae	SHORT $LN121@ccread_una
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rcx+96], rbx
	mov	QWORD PTR [rcx+88], rax
	jmp	SHORT $LN115@ccread_una
$LN121@ccread_una:
; Line 98
	mov	rbx, r10
$LN115@ccread_una:
; Line 304
	call	ccread_cast
	mov	r8, rbx
$LN130@ccread_una:
; Line 310
	mov	r9, rax
	mov	edx, edi
	mov	rcx, rsi
	call	cctree_unary
$LN13@ccread_una:
	mov	rbx, QWORD PTR [rsp+112]
	mov	rbp, QWORD PTR [rsp+120]
	mov	rsi, QWORD PTR [rsp+128]
	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
ccread_unary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_postfix
_TEXT	SEGMENT
tv1073 = 96
reader$ = 96
root$ = 104
mark$ = 112
result$6$ = 120
ccread_postfix PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 235
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 40					; 00000028H
	mov	r12d, r8d
	mov	rdi, rdx
	mov	rbx, rcx
; Line 237
	call	ccread_primary
; Line 62
	mov	r8, QWORD PTR [rbx+88]
	lea	r15, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [rbx+80]
; Line 237
	mov	r14, rax
; Line 62
	cmp	r8, rcx
; Line 237
	mov	QWORD PTR result$6$[rsp], rax
; Line 62
	mov	rax, r15
	cmovb	rax, r8
; Line 81
	cmp	DWORD PTR [rax], 4
; Line 104
	jne	$LN15@ccread_pos
; Line 95
	cmp	r8, rcx
	jae	SHORT $LN30@ccread_pos
; Line 96
	mov	QWORD PTR [rbx+96], r8
	mov	rax, r8
	add	r8, 32					; 00000020H
	mov	QWORD PTR [rbx+88], r8
	jmp	SHORT $LN24@ccread_pos
$LN30@ccread_pos:
; Line 98
	mov	rax, r15
$LN24@ccread_pos:
; Line 240
	test	rax, rax
	je	$LN15@ccread_pos
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	ecx, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccread.c
; Line 613
	mov	QWORD PTR [rsp+112], rbp
	mov	QWORD PTR [rsp+32], r13
	xor	r13d, r13d
	mov	esi, r13d
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r14, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR tv1073[rsp], r14
	npad	12
$LL35@ccread_pos:
; File W:\cpp\void\ktt-c\ccread.c
; Line 615
	mov	r8d, r12d
	mov	rdx, rdi
	mov	rcx, rbx
	call	ccread_assignment
	mov	rbp, rax
; Line 616
	test	rax, rax
	je	$LN36@ccread_pos
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR [r14]
; Line 241
	lea	rdi, QWORD PTR [rsi-40]
	test	rsi, rsi
; Line 196
	mov	ecx, OFFSET FLAT:ccalloctr
	mov	rsi, r13
; Line 241
	cmove	rdi, r13
; Line 196
	mov	r14, QWORD PTR [rcx+rax]
; Line 198
	test	rdi, rdi
	je	SHORT $LN92@ccread_pos
; Line 199
	mov	rsi, QWORD PTR [rdi+24]
; Line 200
	mov	r13, QWORD PTR [rdi+32]
; Line 202
	mov	r14, QWORD PTR [rdi+8]
$LN92@ccread_pos:
; Line 209
	lea	r15, QWORD PTR [r13+152]
	mov	rax, rdi
	cmp	rsi, r15
	jae	SHORT $LN95@ccread_pos
; Line 213
	lea	rax, QWORD PTR [rsi+rsi]
; Line 217
	mov	rdx, rdi
	cmp	rax, r15
	mov	rsi, r15
	cmovae	rsi, rax
	lea	rcx, QWORD PTR [rsi+40]
	call	r14
; Line 220
	test	rdi, rdi
	jne	SHORT $LN95@ccread_pos
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rdi
; Line 224
	mov	QWORD PTR [rax+8], r14
$LN95@ccread_pos:
; Line 228
	mov	QWORD PTR [rax+24], rsi
; File W:\cpp\void\ktt-c\ccread.c
; Line 616
	mov	rcx, rbp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], r15
; Line 242
	lea	rsi, QWORD PTR [rax+40]
; File W:\cpp\void\ktt-c\ccread.c
; Line 616
	movups	xmm0, XMMWORD PTR [rbp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	mov	rax, -2912643801112034465		; d79435e50d79435fH
	mul	r13
	shr	rdx, 7
; File W:\cpp\void\ktt-c\ccread.c
; Line 616
	imul	rax, rdx, 152				; 00000098H
	movups	XMMWORD PTR [rax+rsi], xmm0
	movups	xmm1, XMMWORD PTR [rbp+16]
	movups	XMMWORD PTR [rax+rsi+16], xmm1
	movups	xmm0, XMMWORD PTR [rbp+32]
	movups	XMMWORD PTR [rax+rsi+32], xmm0
	movups	xmm1, XMMWORD PTR [rbp+48]
	movups	XMMWORD PTR [rax+rsi+48], xmm1
	movups	xmm0, XMMWORD PTR [rbp+64]
	movups	XMMWORD PTR [rax+rsi+64], xmm0
	movups	xmm1, XMMWORD PTR [rbp+80]
	movups	XMMWORD PTR [rax+rsi+80], xmm1
	movups	xmm0, XMMWORD PTR [rbp+96]
	movups	XMMWORD PTR [rax+rsi+96], xmm0
	movups	xmm1, XMMWORD PTR [rbp+112]
	movups	XMMWORD PTR [rax+rsi+112], xmm1
	movups	xmm0, XMMWORD PTR [rbp+128]
	movups	XMMWORD PTR [rax+rsi+128], xmm0
	movsd	xmm1, QWORD PTR [rbp+144]
	movsd	QWORD PTR [rax+rsi+144], xmm1
	call	free
; Line 62
	mov	rcx, QWORD PTR [rbx+88]
	lea	r15, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rdx, QWORD PTR [rbx+80]
	mov	rax, r15
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 10
; Line 104
	jne	SHORT $LN244@ccread_pos
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN241@ccread_pos
; Line 96
	mov	QWORD PTR [rbx+96], rcx
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+88], rax
; Line 618
	test	rcx, rcx
	je	SHORT $LN244@ccread_pos
$LN241@ccread_pos:
	mov	rdi, QWORD PTR root$[rsp]
	xor	r13d, r13d
	mov	r14, QWORD PTR tv1073[rsp]
	jmp	$LL35@ccread_pos
$LN36@ccread_pos:
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	mov	rcx, rbp
	call	free
; File W:\cpp\void\ktt-c\ccread.c
; Line 618
	jmp	SHORT $LN37@ccread_pos
$LN244@ccread_pos:
; Line 62
	mov	rdi, QWORD PTR root$[rsp]
$LN37@ccread_pos:
	mov	rcx, QWORD PTR [rbx+88]
	mov	rax, r15
	mov	rdx, QWORD PTR [rbx+80]
	mov	r13, QWORD PTR [rsp+32]
	cmp	rcx, rdx
	mov	rbp, QWORD PTR [rsp+112]
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 5
; Line 104
	jne	SHORT $LN239@ccread_pos
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN113@ccread_pos
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN107@ccread_pos
$LN113@ccread_pos:
; Line 98
	mov	rcx, r15
$LN107@ccread_pos:
; Line 242
	test	rcx, rcx
	jne	SHORT $LN4@ccread_pos
$LN239@ccread_pos:
; Line 243
	lea	rdx, OFFSET FLAT:??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN4@ccread_pos:
; Line 244
	mov	r14, QWORD PTR result$6$[rsp]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\ccread.c
; Line 244
	mov	rbx, QWORD PTR [r14+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 21
; Line 136
	mov	QWORD PTR [rax+8], rdi
; Line 137
	mov	DWORD PTR [rax+16], r12d
; Line 202
	mov	QWORD PTR [rax+72], r14
; Line 203
	mov	QWORD PTR [rax+80], rsi
; Line 204
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 263
	add	rsp, 40					; 00000028H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN15@ccread_pos:
; Line 62
	cmp	r8, rcx
	mov	rax, r15
	cmovb	rax, r8
; Line 81
	cmp	DWORD PTR [rax], 8
; Line 104
	jne	$LN127@ccread_pos
; Line 95
	cmp	r8, rcx
	jae	SHORT $LN142@ccread_pos
; Line 96
	mov	QWORD PTR [rbx+96], r8
	mov	rax, r8
	add	r8, 32					; 00000020H
	mov	QWORD PTR [rbx+88], r8
	jmp	SHORT $LN136@ccread_pos
$LN142@ccread_pos:
; Line 98
	mov	rax, r15
$LN136@ccread_pos:
; Line 246
	test	rax, rax
	je	$LN127@ccread_pos
; Line 247
	mov	r8d, r12d
	mov	rdx, rdi
	mov	rcx, rbx
	call	ccread_expression
; Line 62
	mov	rcx, QWORD PTR [rbx+88]
; Line 247
	mov	rsi, rax
; Line 62
	mov	rdx, QWORD PTR [rbx+80]
	mov	rax, r15
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 9
; Line 104
	jne	SHORT $LN240@ccread_pos
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN189@ccread_pos
; Line 96
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [rbx+96], rcx
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN183@ccread_pos
$LN189@ccread_pos:
; Line 98
	mov	rcx, r15
$LN183@ccread_pos:
; Line 248
	test	rcx, rcx
	jne	SHORT $LN7@ccread_pos
$LN240@ccread_pos:
; Line 249
	lea	rdx, OFFSET FLAT:??_C@_0N@ENGHABPN@expected?5?8?$FN?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN7@ccread_pos:
; Line 250
	mov	rbx, QWORD PTR [r14+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 22
; Line 136
	mov	QWORD PTR [rax+8], rdi
; Line 137
	mov	DWORD PTR [rax+16], r12d
; Line 211
	mov	QWORD PTR [rax+72], r14
; Line 212
	mov	QWORD PTR [rax+80], rsi
; Line 213
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 263
	add	rsp, 40					; 00000028H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
$LN127@ccread_pos:
; Line 62
	cmp	r8, rcx
	mov	rax, r15
	cmovb	rax, r8
; Line 81
	cmp	DWORD PTR [rax], 91			; 0000005bH
; Line 252
	jne	SHORT $LN8@ccread_pos
; Line 95
	cmp	r8, rcx
	jae	SHORT $LN215@ccread_pos
; Line 96
	lea	rax, QWORD PTR [r8+32]
	mov	QWORD PTR [rbx+96], r8
; Line 263
	mov	r9, r14
; Line 96
	mov	QWORD PTR [rbx+88], rax
; Line 263
	mov	edx, r12d
	mov	rcx, rdi
	add	rsp, 40					; 00000028H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	jmp	cctree_unary
$LN215@ccread_pos:
; Line 98
	mov	r8, r15
$LN209@ccread_pos:
; Line 263
	mov	r9, r14
	mov	edx, r12d
	mov	rcx, rdi
	add	rsp, 40					; 00000028H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	jmp	cctree_unary
$LN8@ccread_pos:
; Line 62
	cmp	r8, rcx
	mov	rax, r15
	cmovb	rax, r8
; Line 81
	cmp	DWORD PTR [rax], 126			; 0000007eH
; Line 104
	jne	SHORT $LN10@ccread_pos
; Line 95
	cmp	r8, rcx
	jae	SHORT $LN233@ccread_pos
; Line 96
	lea	rax, QWORD PTR [r8+32]
	mov	QWORD PTR [rbx+96], r8
	mov	QWORD PTR [rbx+88], rax
	jmp	SHORT $LN227@ccread_pos
$LN233@ccread_pos:
; Line 98
	mov	r8, r15
$LN227@ccread_pos:
; Line 255
	test	r8, r8
	jne	SHORT $LN209@ccread_pos
$LN10@ccread_pos:
; Line 258
	mov	edx, 125				; 0000007dH
	mov	rcx, rbx
	call	cceat
	test	rax, rax
	je	SHORT $LN243@ccread_pos
; Line 259
	mov	r9, r14
	xor	r8d, r8d
	mov	edx, r12d
	mov	rcx, rdi
; Line 263
	add	rsp, 40					; 00000028H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
; Line 259
	jmp	cctree_unary
$LN243@ccread_pos:
; Line 262
	mov	rax, r14
; Line 263
	add	rsp, 40					; 00000028H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
ccread_postfix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_primary
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_primary PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 201
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 62
	mov	rbx, QWORD PTR [rcx+88]
	lea	r14, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 201
	mov	rbp, rdx
	mov	esi, r8d
; Line 62
	mov	rdx, QWORD PTR [rcx+80]
; Line 201
	mov	rdi, rcx
; Line 62
	cmp	rbx, rdx
	jb	SHORT $LN14@ccread_pri
; Line 69
	mov	rcx, r14
	jmp	SHORT $LN146@ccread_pri
$LN14@ccread_pri:
; Line 205
	mov	rcx, rbx
	test	rbx, rbx
	je	$LN147@ccread_pri
$LN146@ccread_pri:
; Line 206
	mov	ecx, DWORD PTR [rcx]
	sub	ecx, 4
	je	$LN9@ccread_pri
	sub	ecx, 15
	je	$LN5@ccread_pri
	sub	ecx, 1
	je	SHORT $LN6@ccread_pri
	cmp	ecx, 1
	jne	$LN147@ccread_pri
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN42@ccread_pri
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rdi+96], rbx
	mov	QWORD PTR [rdi+88], rax
	jmp	SHORT $LN36@ccread_pri
$LN42@ccread_pri:
; Line 98
	mov	rbx, r14
$LN36@ccread_pri:
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 8
; Line 136
	mov	QWORD PTR [rcx+8], rbp
; Line 137
	mov	DWORD PTR [rcx+16], esi
; Line 290
	mov	rax, QWORD PTR [rbx+24]
	mov	QWORD PTR [rcx+96], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 229
	mov	rax, rcx
	jmp	$LN2@ccread_pri
$LN6@ccread_pri:
; Line 95
	cmp	rbx, rdx
	jae	SHORT $LN23@ccread_pri
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rdi+96], rbx
	mov	QWORD PTR [rdi+88], rax
	jmp	SHORT $LN17@ccread_pri
$LN23@ccread_pri:
; Line 98
	mov	rbx, r14
$LN17@ccread_pri:
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 7
; Line 136
	mov	QWORD PTR [rax+8], rbp
; Line 137
	mov	DWORD PTR [rax+16], esi
; Line 283
	mov	rcx, QWORD PTR [rbx+24]
	mov	QWORD PTR [rax+96], rcx
; File W:\cpp\void\ktt-c\ccread.c
; Line 212
	jmp	$LN2@ccread_pri
$LN5@ccread_pri:
; Line 208
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_litide
; Line 209
	jmp	$LN2@ccread_pri
$LN9@ccread_pri:
; Line 220
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_expression
; Line 62
	mov	rdx, QWORD PTR [rdi+88]
	mov	rcx, r14
	mov	r8, QWORD PTR [rdi+80]
; Line 220
	mov	rbx, rax
; Line 62
	cmp	rdx, r8
	cmovb	rcx, rdx
; Line 81
	cmp	DWORD PTR [rcx], 5
; Line 104
	jne	SHORT $LN145@ccread_pri
; Line 95
	cmp	rdx, r8
	jae	SHORT $LN132@ccread_pri
; Line 96
	lea	rax, QWORD PTR [rdx+32]
	mov	QWORD PTR [rdi+96], rdx
	mov	QWORD PTR [rdi+88], rax
	jmp	SHORT $LN126@ccread_pri
$LN132@ccread_pri:
; Line 98
	mov	rdx, r14
$LN126@ccread_pri:
; Line 221
	test	rdx, rdx
	jne	SHORT $LN10@ccread_pri
$LN145@ccread_pri:
; Line 222
	lea	rdx, OFFSET FLAT:??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN10@ccread_pri:
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 20
; Line 136
	mov	QWORD PTR [rax+8], rbp
; Line 137
	mov	DWORD PTR [rax+16], esi
; Line 195
	mov	QWORD PTR [rax+64], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 230
	jmp	SHORT $LN2@ccread_pri
$LN147@ccread_pri:
	xor	eax, eax
$LN2@ccread_pri:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccread_primary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_litide
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_litide PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 191
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 62
	mov	rbx, QWORD PTR [rcx+88]
; Line 191
	mov	rsi, rdx
; Line 62
	mov	r9, QWORD PTR [rcx+80]
	lea	rdx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rbx, r9
	mov	rax, rdx
; Line 191
	mov	edi, r8d
; Line 62
	cmovb	rax, rbx
; Line 81
	cmp	DWORD PTR [rax], 19
; Line 104
	jne	SHORT $LN5@ccread_lit
; Line 95
	cmp	rbx, r9
	jae	SHORT $LN20@ccread_lit
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rcx+96], rbx
	mov	QWORD PTR [rcx+88], rax
	jmp	SHORT $LN14@ccread_lit
$LN20@ccread_lit:
; Line 98
	mov	rbx, rdx
$LN14@ccread_lit:
; Line 193
	test	rbx, rbx
	je	SHORT $LN5@ccread_lit
	mov	rbx, QWORD PTR [rbx+24]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 6
; Line 136
	mov	QWORD PTR [rax+8], rsi
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 276
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 195
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN5@ccread_lit:
	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_litide ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_cast
_TEXT	SEGMENT
parser$ = 48
root$ = 56
mark$ = 64
ccread_cast PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 318
	sub	rsp, 40					; 00000028H
; Line 62
	mov	r9, QWORD PTR [rcx+88]
	lea	r11, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r10, QWORD PTR [rcx+80]
	mov	rax, r11
	cmp	r9, r10
	cmovb	rax, r9
; Line 81
	cmp	DWORD PTR [rax], 4
; Line 104
	jne	SHORT $LN2@ccread_cas
; Line 95
	cmp	r9, r10
	jae	SHORT $LN22@ccread_cas
; Line 96
	mov	QWORD PTR [rcx+96], r9
	mov	rax, r9
	add	r9, 32					; 00000020H
	mov	QWORD PTR [rcx+88], r9
	jmp	SHORT $LN16@ccread_cas
$LN22@ccread_cas:
; Line 98
	mov	rax, r11
$LN16@ccread_cas:
; Line 321
	test	rax, rax
	je	SHORT $LN2@ccread_cas
; Line 62
	cmp	r9, r10
	mov	rax, r11
	cmovb	rax, r9
; Line 81
	cmp	DWORD PTR [rax], 5
; Line 104
	jne	SHORT $LN467@ccread_cas
; Line 95
	cmp	r9, r10
	jae	SHORT $LN40@ccread_cas
; Line 96
	lea	rax, QWORD PTR [r9+32]
	mov	QWORD PTR [rcx+96], r9
	mov	QWORD PTR [rcx+88], rax
	jmp	SHORT $LN34@ccread_cas
$LN40@ccread_cas:
; Line 98
	mov	r9, r11
$LN34@ccread_cas:
; Line 325
	test	r9, r9
	jne	SHORT $LN469@ccread_cas
$LN467@ccread_cas:
; Line 326
	lea	rdx, OFFSET FLAT:??_C@_0N@BOJPMBHB@expected?5?8?$CJ?8@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN469@ccread_cas:
; Line 333
	xor	eax, eax
	add	rsp, 40					; 00000028H
	ret	0
$LN2@ccread_cas:
	add	rsp, 40					; 00000028H
; Line 329
	jmp	ccread_unary
ccread_cast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_expression
_TEXT	SEGMENT
reader$ = 64
root$ = 72
mark$ = 80
ccread_expression PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 598
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	ebp, r8d
	mov	r14, rdx
	mov	rdi, rcx
; Line 600
	call	ccread_assignment
; Line 62
	mov	rbx, QWORD PTR [rdi+88]
	lea	rcx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 600
	mov	rsi, rax
; Line 62
	mov	r9, rcx
	mov	rax, QWORD PTR [rdi+80]
	cmp	rbx, rax
	cmovb	r9, rbx
; Line 81
	cmp	DWORD PTR [r9], 10
; Line 601
	jne	SHORT $LN19@ccread_exp
; Line 95
	cmp	rbx, rax
	jae	SHORT $LN17@ccread_exp
; Line 96
	lea	rax, QWORD PTR [rbx+32]
	mov	QWORD PTR [rdi+96], rbx
	mov	QWORD PTR [rdi+88], rax
	jmp	SHORT $LN11@ccread_exp
$LN17@ccread_exp:
; Line 98
	mov	rbx, rcx
$LN11@ccread_exp:
; Line 602
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rdi
	call	ccread_expression
	mov	r9, rsi
	mov	QWORD PTR [rsp+32], rax
	mov	r8, rbx
	mov	edx, ebp
	mov	rcx, r14
	call	cctree_binary
	jmp	SHORT $LN2@ccread_exp
$LN19@ccread_exp:
; Line 604
	mov	rax, rsi
$LN2@ccread_exp:
; Line 605
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
ccread_expression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_arglist
_TEXT	SEGMENT
reader$ = 96
root$ = 104
mark$ = 112
tv427 = 120
ccread_arglist PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 613
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r9d, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 613
	xor	ebp, ebp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccread.c
; Line 613
	mov	r12d, r8d
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+96], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 613
	mov	r15, rcx
	mov	edi, ebp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+32], r13
	lea	r14, QWORD PTR [rax+r9*8]
	mov	QWORD PTR tv427[rsp], r14
	npad	1
$LL4@ccread_arg:
; File W:\cpp\void\ktt-c\ccread.c
; Line 615
	mov	r8d, r12d
	mov	rcx, r15
	call	ccread_assignment
	mov	rsi, rax
; Line 616
	test	rax, rax
	je	$LN5@ccread_arg
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR [r14]
; Line 241
	lea	rbx, QWORD PTR [rdi-40]
	test	rdi, rdi
; Line 196
	mov	ecx, OFFSET FLAT:ccalloctr
	mov	rdi, rbp
	mov	r13, rbp
; Line 241
	cmove	rbx, rbp
; Line 196
	mov	rbp, QWORD PTR [rcx+rax]
; Line 198
	test	rbx, rbx
	je	SHORT $LN115@ccread_arg
; Line 199
	mov	rdi, QWORD PTR [rbx+24]
; Line 200
	mov	r13, QWORD PTR [rbx+32]
; Line 202
	mov	rbp, QWORD PTR [rbx+8]
$LN115@ccread_arg:
; Line 209
	lea	r14, QWORD PTR [r13+152]
	mov	rax, rbx
	cmp	rdi, r14
	jae	SHORT $LN118@ccread_arg
; Line 213
	lea	rax, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rbx
	cmp	rax, r14
	mov	rdi, r14
	cmovae	rdi, rax
	lea	rcx, QWORD PTR [rdi+40]
	call	rbp
; Line 220
	test	rbx, rbx
	jne	SHORT $LN118@ccread_arg
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbx
; Line 224
	mov	QWORD PTR [rax+8], rbp
$LN118@ccread_arg:
; Line 228
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 616
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], r14
; Line 242
	lea	rdi, QWORD PTR [rax+40]
; File W:\cpp\void\ktt-c\ccread.c
; Line 616
	movups	xmm0, XMMWORD PTR [rsi]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	mov	rax, -2912643801112034465		; d79435e50d79435fH
	mul	r13
	shr	rdx, 7
; File W:\cpp\void\ktt-c\ccread.c
; Line 616
	imul	rax, rdx, 152				; 00000098H
	movups	XMMWORD PTR [rax+rdi], xmm0
	movups	xmm1, XMMWORD PTR [rsi+16]
	movups	XMMWORD PTR [rax+rdi+16], xmm1
	movups	xmm0, XMMWORD PTR [rsi+32]
	movups	XMMWORD PTR [rax+rdi+32], xmm0
	movups	xmm1, XMMWORD PTR [rsi+48]
	movups	XMMWORD PTR [rax+rdi+48], xmm1
	movups	xmm0, XMMWORD PTR [rsi+64]
	movups	XMMWORD PTR [rax+rdi+64], xmm0
	movups	xmm1, XMMWORD PTR [rsi+80]
	movups	XMMWORD PTR [rax+rdi+80], xmm1
	movups	xmm0, XMMWORD PTR [rsi+96]
	movups	XMMWORD PTR [rax+rdi+96], xmm0
	movups	xmm1, XMMWORD PTR [rsi+112]
	movups	XMMWORD PTR [rax+rdi+112], xmm1
	movups	xmm0, XMMWORD PTR [rsi+128]
	movups	XMMWORD PTR [rax+rdi+128], xmm0
	movsd	xmm1, QWORD PTR [rsi+144]
	movsd	QWORD PTR [rax+rdi+144], xmm1
	call	free
; Line 62
	mov	rcx, QWORD PTR [r15+88]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	rdx, QWORD PTR [r15+80]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 81
	cmp	DWORD PTR [rax], 10
; Line 104
	jne	SHORT $LN125@ccread_arg
; Line 95
	cmp	rcx, rdx
	jae	SHORT $LN123@ccread_arg
; Line 96
	mov	QWORD PTR [r15+96], rcx
	lea	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR [r15+88], rax
; Line 618
	test	rcx, rcx
	je	SHORT $LN125@ccread_arg
$LN123@ccread_arg:
	mov	rdx, QWORD PTR root$[rsp]
	xor	ebp, ebp
	mov	r14, QWORD PTR tv427[rsp]
	jmp	$LL4@ccread_arg
$LN5@ccread_arg:
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	mov	rcx, rsi
	call	free
$LN125@ccread_arg:
	mov	r13, QWORD PTR [rsp+32]
; File W:\cpp\void\ktt-c\ccread.c
; Line 620
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 40					; 00000028H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_arglist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_func_specifier
_TEXT	SEGMENT
parser$ = 8
kttc__peek_func_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	rdx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+80]
	cmovb	rdx, rax
; Line 174
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 41					; 00000029H
	cmp	ecx, 1
	cmovbe	rax, rdx
; Line 180
	ret	0
kttc__peek_func_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_storage_class
_TEXT	SEGMENT
parser$ = 8
kttc__peek_storage_class PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	rdx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+80]
	cmovb	rdx, rax
; Line 160
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 64					; 00000040H
	cmp	ecx, 7
	cmovbe	rax, rdx
; Line 166
	ret	0
kttc__peek_storage_class ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccsee_typespec
_TEXT	SEGMENT
parser$ = 8
ccsee_typespec PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	rdx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+80]
	cmovb	rdx, rax
; Line 146
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 45					; 0000002dH
	cmp	ecx, 19
	cmovbe	rax, rdx
; Line 152
	ret	0
ccsee_typespec ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_type_qualifier
_TEXT	SEGMENT
parser$ = 8
kttc__peek_type_qualifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	rdx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+80]
	cmovb	rdx, rax
; Line 132
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 36					; 00000024H
	cmp	ecx, 2
	cmovbe	rax, rdx
; Line 138
	ret	0
kttc__peek_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_alignment_specifier
_TEXT	SEGMENT
parser$ = 8
kttc__peek_alignment_specifier PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	rdx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+80]
	cmovb	rdx, rax
; Line 118
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 32					; 00000020H
	cmp	ecx, 1
	cmovbe	rax, rdx
; Line 124
	ret	0
kttc__peek_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cceat
_TEXT	SEGMENT
_r$ = 8
_k$ = 16
cceat	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	r8, QWORD PTR [rcx+88]
	lea	r10, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	mov	r9, QWORD PTR [rcx+80]
	mov	rax, r10
	cmp	r8, r9
	cmovb	rax, r8
; Line 81
	cmp	DWORD PTR [rax], edx
; Line 104
	jne	SHORT $LN2@cceat
; Line 95
	cmp	r8, r9
	jae	SHORT $LN17@cceat
; Line 96
	lea	rax, QWORD PTR [r8+32]
	mov	QWORD PTR [rcx+96], r8
	mov	QWORD PTR [rcx+88], rax
; Line 105
	mov	rax, r8
; Line 107
	ret	0
$LN17@cceat:
; Line 98
	mov	r8, r10
; Line 105
	mov	rax, r10
; Line 107
	ret	0
$LN2@cceat:
; Line 106
	xor	eax, eax
; Line 107
	ret	0
cceat	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccgobble
_TEXT	SEGMENT
_r$ = 8
ccgobble PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 95
	mov	rax, QWORD PTR [rcx+88]
	cmp	rax, QWORD PTR [rcx+80]
	jae	SHORT $LN7@ccgobble
; Line 96
	lea	rdx, QWORD PTR [rax+32]
	mov	QWORD PTR [rcx+96], rax
	mov	QWORD PTR [rcx+88], rdx
; Line 99
	ret	0
$LN7@ccgobble:
; Line 98
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
; Line 99
	ret	0
ccgobble ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccsee_end
_TEXT	SEGMENT
_r$ = 8
ccsee_end PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	rdx, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+80]
	cmovb	rdx, rax
; Line 81
	xor	eax, eax
	cmp	DWORD PTR [rdx], 1
	sete	al
; Line 88
	ret	0
ccsee_end ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccsee
_TEXT	SEGMENT
_r$ = 8
kind$ = 16
ccsee	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+88]
	lea	r8, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+80]
	cmovb	r8, rax
; Line 81
	xor	eax, eax
	cmp	DWORD PTR [r8], edx
	sete	al
; Line 82
	ret	0
ccsee	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccpeep
_TEXT	SEGMENT
_r$ = 8
ccpeep	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+88]
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	cmp	rdx, QWORD PTR [rcx+80]
	cmovb	rax, rdx
; Line 76
	ret	0
ccpeep	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccpeek
_TEXT	SEGMENT
_r$ = 8
_o$ = 16
ccpeek	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	movsxd	rdx, edx
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
	shl	rdx, 5
	add	rdx, QWORD PTR [rcx+88]
	cmp	rdx, QWORD PTR [rcx+80]
	cmovb	rax, rdx
; Line 70
	ret	0
ccpeek	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_include
_TEXT	SEGMENT
size$ = 112
_r$ = 112
name$ = 120
ccread_include PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 38
	mov	r11, rsp
	push	rbx
	push	rbp
	sub	rsp, 88					; 00000058H
	mov	QWORD PTR [r11+16], rsi
; Line 39
	xor	ebp, ebp
	mov	QWORD PTR [r11+24], rdi
	mov	rax, rdx
	mov	QWORD PTR [r11-24], r13
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\ccfio.c
; Line 47
	mov	QWORD PTR [r11-56], rbp
	xor	r9d, r9d
; File W:\cpp\void\ktt-c\ccread.c
; Line 38
	mov	QWORD PTR [r11-32], r14
; File W:\cpp\void\ktt-c\ccfio.c
; Line 47
	lea	r8d, QWORD PTR [rbp+3]
	mov	DWORD PTR [rsp+40], ebp
	mov	edx, -1073741824			; c0000000H
	mov	rcx, rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 38
	mov	QWORD PTR [r11-40], r15
; Line 39
	mov	DWORD PTR size$[rsp], ebp
; File W:\cpp\void\ktt-c\ccfio.c
; Line 47
	mov	DWORD PTR [rsp+32], 4
	call	QWORD PTR __imp_CreateFileA
; Line 32
	cmp	rax, -1
; Line 48
	mov	r14d, ebp
	cmovne	r14, rax
; Line 32
	cmp	r14, -1
; Line 53
	jne	SHORT $LN8@ccread_inc
	mov	edi, ebp
	jmp	SHORT $LN12@ccread_inc
$LN8@ccread_inc:
; Line 37
	xor	edx, edx
	mov	rcx, r14
	call	QWORD PTR __imp_GetFileSize
; Line 57
	mov	esi, DWORD PTR size$[rsp]
	cmp	eax, esi
	jae	SHORT $LN9@ccread_inc
	mov	rdi, rbp
	jmp	SHORT $LN12@ccread_inc
$LN9@ccread_inc:
; Line 58
	test	esi, esi
	cmove	esi, eax
; Line 59
	mov	ecx, esi
; File W:\cpp\void\ktt-c\cc.c
; Line 554
	test	esi, esi
	je	SHORT $LN25@ccread_inc
; Line 558
	call	malloc
	mov	rdi, rax
	jmp	SHORT $LN22@ccread_inc
$LN25@ccread_inc:
; Line 560
	xor	ecx, ecx
	call	free
; Line 561
	mov	rdi, rbp
$LN22@ccread_inc:
; File W:\cpp\void\ktt-c\ccfio.c
; Line 61
	lea	r9, QWORD PTR size$[rsp]
	mov	QWORD PTR [rsp+32], rbp
	mov	r8d, esi
	mov	rdx, rdi
	mov	rcx, r14
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	cmove	rdi, rbp
$LN12@ccread_inc:
; Line 42
	mov	rcx, r14
	call	QWORD PTR __imp_CloseHandle
; File W:\cpp\void\ktt-c\cclex.c
; Line 106
	mov	eax, DWORD PTR size$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	ecx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\cclex.c
; Line 106
	add	rax, rdi
	mov	QWORD PTR [rbx], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\cclex.c
; Line 107
	mov	QWORD PTR [rbx+16], rdi
	mov	QWORD PTR [rbx+24], rdi
	mov	QWORD PTR [rbx+8], rdi
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r13, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR [rsp+136], r12
$LN65@ccread_inc:
; File W:\cpp\void\ktt-c\cclex.c
; Line 147
	mov	r15d, OFFSET FLAT:ccalloctr
	npad	7
$LL42@ccread_inc:
	mov	rcx, rbx
	call	cclex_next_token_internal
; Line 150
	mov	eax, DWORD PTR [rbx+40]
	cmp	eax, 14
	je	SHORT $LL42@ccread_inc
	cmp	eax, 12
	je	SHORT $LL42@ccread_inc
	cmp	eax, 2
	je	SHORT $LL42@ccread_inc
	cmp	eax, 3
	je	SHORT $LL42@ccread_inc
; Line 154
	cmp	eax, 1
; File W:\cpp\void\ktt-c\ccread.c
; Line 52
	je	$LN37@ccread_inc
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rax, QWORD PTR [rbx+72]
; Line 191
	mov	rsi, rbp
; Line 241
	test	rax, rax
; Line 196
	mov	ecx, r15d
	mov	r14, rbp
; Line 241
	lea	rdi, QWORD PTR [rax-40]
; Line 196
	mov	rax, QWORD PTR [r13]
; Line 241
	cmove	rdi, rbp
; Line 196
	mov	r15, QWORD PTR [rcx+rax]
; Line 198
	test	rdi, rdi
	je	SHORT $LN49@ccread_inc
; Line 199
	mov	rsi, QWORD PTR [rdi+24]
; Line 200
	mov	r14, QWORD PTR [rdi+32]
; Line 202
	mov	r15, QWORD PTR [rdi+8]
$LN49@ccread_inc:
; Line 209
	lea	r12, QWORD PTR [r14+32]
	mov	rax, rdi
	cmp	rsi, r12
	jae	SHORT $LN52@ccread_inc
; Line 213
	lea	rax, QWORD PTR [rsi+rsi]
; Line 217
	mov	rdx, rdi
	cmp	rax, r12
	mov	rsi, r12
	cmovae	rsi, rax
	lea	rcx, QWORD PTR [rsi+40]
	call	r15
; Line 220
	test	rdi, rdi
	jne	SHORT $LN52@ccread_inc
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbp
; Line 224
	mov	QWORD PTR [rax+8], r15
$LN52@ccread_inc:
; Line 228
	mov	QWORD PTR [rax+24], rsi
; Line 229
	mov	QWORD PTR [rax+32], r12
; Line 242
	add	rax, 40					; 00000028H
	mov	QWORD PTR [rbx+72], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 54
	and	r14, -32				; ffffffffffffffe0H
; File W:\cpp\void\ktt-c\cclex.c
; Line 136
	movups	xmm0, XMMWORD PTR [rbx+40]
	movups	XMMWORD PTR [r14+rax], xmm0
	movups	xmm1, XMMWORD PTR [rbx+56]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [r14+rax+16], xmm1
; Line 137
	movups	XMMWORD PTR [rbx+40], xmm0
	movups	XMMWORD PTR [rbx+56], xmm0
; File W:\cpp\void\ktt-c\ccread.c
; Line 56
	jmp	$LN65@ccread_inc
$LN37@ccread_inc:
; Line 32
	mov	rcx, QWORD PTR [rbx+72]
	mov	r15, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	mov	r13, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+136]
	mov	rdi, QWORD PTR [rsp+128]
	mov	rsi, QWORD PTR [rsp+120]
	mov	QWORD PTR [rbx+96], rbp
	mov	QWORD PTR [rbx+88], rcx
; Line 33
	test	rcx, rcx
	je	SHORT $LN31@ccread_inc
	mov	rbp, QWORD PTR [rcx-8]
$LN31@ccread_inc:
	shr	rbp, 5
	mov	eax, ebp
	shl	rax, 5
	add	rax, rcx
	mov	QWORD PTR [rbx+80], rax
; Line 48
	add	rsp, 88					; 00000058H
	pop	rbp
	pop	rbx
	ret	0
ccread_include ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccreader_move
_TEXT	SEGMENT
_r$ = 80
_l$ = 88
_d$ = 96
ccreader_move PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 27
	push	rbx
	push	r14
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR [rsp+40], r13
; File W:\cpp\void\ktt-c\cclex.c
; Line 106
	lea	rax, QWORD PTR [rdx+r8]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	edx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 27
	mov	rbx, rcx
	mov	QWORD PTR [rsp+32], r15
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	xor	r14d, r14d
	mov	QWORD PTR [rsp+80], rbp
	mov	QWORD PTR [rsp+88], rsi
; File W:\cpp\void\ktt-c\cclex.c
; Line 106
	mov	QWORD PTR [rcx], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
	mov	QWORD PTR [rsp+96], rdi
; File W:\cpp\void\ktt-c\cclex.c
; Line 107
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+24], r8
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	lea	r13, QWORD PTR [rax+rdx*8]
; File W:\cpp\void\ktt-c\cclex.c
; Line 107
	mov	QWORD PTR [rcx+8], r8
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	QWORD PTR [rsp+48], r12
$LN37@ccreader_m:
; File W:\cpp\void\ktt-c\cclex.c
; Line 147
	mov	r15d, OFFSET FLAT:ccalloctr
$LL14@ccreader_m:
	mov	rcx, rbx
	call	cclex_next_token_internal
; Line 150
	mov	eax, DWORD PTR [rbx+40]
	cmp	eax, 14
	je	SHORT $LL14@ccreader_m
	cmp	eax, 12
	je	SHORT $LL14@ccreader_m
	cmp	eax, 2
	je	SHORT $LL14@ccreader_m
	cmp	eax, 3
	je	SHORT $LL14@ccreader_m
; Line 154
	cmp	eax, 1
; File W:\cpp\void\ktt-c\ccread.c
; Line 52
	je	$LN9@ccreader_m
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rax, QWORD PTR [rbx+72]
; Line 191
	mov	rsi, r14
; Line 241
	test	rax, rax
; Line 196
	mov	ecx, r15d
	mov	rbp, r14
; Line 241
	lea	rdi, QWORD PTR [rax-40]
; Line 196
	mov	rax, QWORD PTR [r13]
; Line 241
	cmove	rdi, r14
; Line 196
	mov	r15, QWORD PTR [rcx+rax]
; Line 198
	test	rdi, rdi
	je	SHORT $LN21@ccreader_m
; Line 199
	mov	rsi, QWORD PTR [rdi+24]
; Line 200
	mov	rbp, QWORD PTR [rdi+32]
; Line 202
	mov	r15, QWORD PTR [rdi+8]
$LN21@ccreader_m:
; Line 209
	lea	r12, QWORD PTR [rbp+32]
	mov	rax, rdi
	cmp	rsi, r12
	jae	SHORT $LN24@ccreader_m
; Line 213
	lea	rax, QWORD PTR [rsi+rsi]
; Line 217
	mov	rdx, rdi
	cmp	rax, r12
	mov	rsi, r12
	cmovae	rsi, rax
	lea	rcx, QWORD PTR [rsi+40]
	call	r15
; Line 220
	test	rdi, rdi
	jne	SHORT $LN24@ccreader_m
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], r14
; Line 224
	mov	QWORD PTR [rax+8], r15
$LN24@ccreader_m:
; Line 228
	mov	QWORD PTR [rax+24], rsi
; Line 229
	mov	QWORD PTR [rax+32], r12
; Line 242
	add	rax, 40					; 00000028H
	mov	QWORD PTR [rbx+72], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 54
	and	rbp, -32				; ffffffffffffffe0H
; File W:\cpp\void\ktt-c\cclex.c
; Line 136
	movups	xmm0, XMMWORD PTR [rbx+40]
	movups	XMMWORD PTR [rax+rbp], xmm0
	movups	xmm1, XMMWORD PTR [rbx+56]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rax+rbp+16], xmm1
; Line 137
	movups	XMMWORD PTR [rbx+40], xmm0
	movups	XMMWORD PTR [rbx+56], xmm0
; File W:\cpp\void\ktt-c\ccread.c
; Line 56
	jmp	$LN37@ccreader_m
$LN9@ccreader_m:
; Line 32
	mov	rcx, QWORD PTR [rbx+72]
	mov	r15, QWORD PTR [rsp+32]
	mov	r13, QWORD PTR [rsp+40]
	mov	r12, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+80]
	mov	QWORD PTR [rbx+96], r14
	mov	QWORD PTR [rbx+88], rcx
; Line 33
	test	rcx, rcx
	je	SHORT $LN3@ccreader_m
	mov	r14, QWORD PTR [rcx-8]
$LN3@ccreader_m:
	shr	r14, 5
	mov	eax, r14d
	shl	rax, 5
	add	rax, rcx
	mov	QWORD PTR [rbx+80], rax
; Line 34
	add	rsp, 56					; 00000038H
	pop	r14
	pop	rbx
	ret	0
ccreader_move ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_all_tokens
_TEXT	SEGMENT
_r$ = 80
ccread_all_tokens PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 52
	push	rbx
	push	r12
	push	r13
	push	r14
	sub	rsp, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	edx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccread.c
; Line 52
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
	xor	r13d, r13d
	mov	QWORD PTR [rsp+80], rbp
	mov	QWORD PTR [rsp+88], rsi
	mov	QWORD PTR [rsp+96], rdi
	lea	r12, QWORD PTR [rax+rdx*8]
	mov	QWORD PTR [rsp+32], r15
$LN31@ccread_all:
; File W:\cpp\void\ktt-c\cclex.c
; Line 147
	mov	r14d, OFFSET FLAT:ccalloctr
	npad	1
$LL8@ccread_all:
	mov	rcx, rbx
	call	cclex_next_token_internal
; Line 150
	mov	eax, DWORD PTR [rbx+40]
	cmp	eax, 14
	je	SHORT $LL8@ccread_all
	cmp	eax, 12
	je	SHORT $LL8@ccread_all
	cmp	eax, 2
	je	SHORT $LL8@ccread_all
	cmp	eax, 3
	je	SHORT $LL8@ccread_all
; Line 154
	cmp	eax, 1
; File W:\cpp\void\ktt-c\ccread.c
; Line 52
	je	$LN3@ccread_all
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rax, QWORD PTR [rbx+72]
; Line 191
	mov	rsi, r13
; Line 241
	test	rax, rax
; Line 196
	mov	ecx, r14d
	mov	rbp, r13
; Line 241
	lea	rdi, QWORD PTR [rax-40]
; Line 196
	mov	rax, QWORD PTR [r12]
; Line 241
	cmove	rdi, r13
; Line 196
	mov	r14, QWORD PTR [rcx+rax]
; Line 198
	test	rdi, rdi
	je	SHORT $LN15@ccread_all
; Line 199
	mov	rsi, QWORD PTR [rdi+24]
; Line 200
	mov	rbp, QWORD PTR [rdi+32]
; Line 202
	mov	r14, QWORD PTR [rdi+8]
$LN15@ccread_all:
; Line 209
	lea	r15, QWORD PTR [rbp+32]
	mov	rax, rdi
	cmp	rsi, r15
	jae	SHORT $LN18@ccread_all
; Line 213
	lea	rax, QWORD PTR [rsi+rsi]
; Line 217
	mov	rdx, rdi
	cmp	rax, r15
	mov	rsi, r15
	cmovae	rsi, rax
	lea	rcx, QWORD PTR [rsi+40]
	call	r14
; Line 220
	test	rdi, rdi
	jne	SHORT $LN18@ccread_all
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], r13
; Line 224
	mov	QWORD PTR [rax+8], r14
$LN18@ccread_all:
; Line 228
	mov	QWORD PTR [rax+24], rsi
; Line 229
	mov	QWORD PTR [rax+32], r15
; Line 242
	add	rax, 40					; 00000028H
	mov	QWORD PTR [rbx+72], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 54
	and	rbp, -32				; ffffffffffffffe0H
; File W:\cpp\void\ktt-c\cclex.c
; Line 136
	movups	xmm0, XMMWORD PTR [rbx+40]
	movups	XMMWORD PTR [rax+rbp], xmm0
	movups	xmm1, XMMWORD PTR [rbx+56]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rax+rbp+16], xmm1
; Line 137
	movups	XMMWORD PTR [rbx+40], xmm0
	movups	XMMWORD PTR [rbx+56], xmm0
; File W:\cpp\void\ktt-c\ccread.c
; Line 56
	jmp	$LN31@ccread_all
$LN3@ccread_all:
	mov	r15, QWORD PTR [rsp+32]
; Line 57
	mov	rdi, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+80]
	add	rsp, 40					; 00000028H
	pop	r14
	pop	r13
	pop	r12
	pop	rbx
	ret	0
ccread_all_tokens ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_uninit
_TEXT	SEGMENT
_r$ = 8
ccread_uninit PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 18
	mov	rax, QWORD PTR [rcx+72]
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	xor	edx, edx
	test	rax, rax
	lea	rcx, QWORD PTR [rax-40]
	cmove	rcx, rdx
	jmp	free
ccread_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_init
_TEXT	SEGMENT
_r$ = 8
ccread_init PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	xorps	xmm0, xmm0
; Line 10
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	mov	QWORD PTR [rcx+96], rax
; File W:\cpp\void\ktt-c\cclex.c
; Line 113
	movups	XMMWORD PTR [rcx+40], xmm0
	movups	XMMWORD PTR [rcx+56], xmm0
; Line 114
	jmp	cclex_hash_init
ccread_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_readstr
_TEXT	SEGMENT
l$ = 96
tv732 = 104
str$ = 104
cclex_readstr PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 181
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\cclex.c
; Line 189
	lea	rbx, QWORD PTR [rdx+1]
	xor	r10d, r10d
	mov	DWORD PTR [rcx+40], 18
	mov	QWORD PTR [rcx+64], r10
; Line 193
	lea	r9, OFFSET FLAT:__ImageBase
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	ecx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\cclex.c
; Line 193
	mov	esi, r10d
	movzx	r13d, BYTE PTR [rdx]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	edx, r10d
	mov	r8d, OFFSET FLAT:ccalloctr
; File W:\cpp\void\ktt-c\cclex.c
; Line 193
	lea	ebp, QWORD PTR [r10+32]
	add	r8, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR tv732[rsp], r8
	npad	2
$LL4@cclex_read:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r12, QWORD PTR [r8]
; File W:\cpp\void\ktt-c\cclex.c
; Line 193
	lea	rdi, QWORD PTR [rdx-40]
	test	rdx, rdx
	mov	eax, ebp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 191
	mov	r14, r10
; Line 192
	mov	r15, r10
; File W:\cpp\void\ktt-c\cclex.c
; Line 193
	cmove	rdi, r10
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 198
	test	rdi, rdi
	je	SHORT $LN33@cclex_read
; Line 199
	mov	r14, QWORD PTR [rdi+24]
; Line 200
	mov	r15, QWORD PTR [rdi+32]
; Line 202
	mov	r12, QWORD PTR [rdi+8]
$LN33@cclex_read:
; Line 209
	lea	rcx, QWORD PTR [r15+rax]
	mov	rax, rdi
	cmp	r14, rcx
	jae	SHORT $LN36@cclex_read
; Line 213
	lea	rax, QWORD PTR [r14+r14]
; Line 217
	mov	rdx, rdi
	cmp	rax, rcx
	mov	r14, rcx
	cmovae	r14, rax
	lea	rcx, QWORD PTR [r14+40]
	call	r12
; Line 220
	mov	r8, QWORD PTR tv732[rsp]
	lea	r9, OFFSET FLAT:__ImageBase
	test	rdi, rdi
	jne	SHORT $LN59@cclex_read
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	xor	r10d, r10d
; Line 224
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r10
	jmp	SHORT $LN36@cclex_read
$LN59@cclex_read:
; Line 220
	xor	r10d, r10d
$LN36@cclex_read:
; Line 242
	mov	r12, QWORD PTR l$[rsp]
	lea	rdx, QWORD PTR [rax+40]
; Line 228
	mov	QWORD PTR [rax+24], r14
; Line 229
	mov	QWORD PTR [rax+32], r15
; File W:\cpp\void\ktt-c\cclex.c
; Line 193
	lea	rax, QWORD PTR [rdx+r15]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 242
	mov	QWORD PTR [r12+64], rdx
; File W:\cpp\void\ktt-c\cclex.c
; Line 193
	test	rax, rax
	je	$LN58@cclex_read
; Line 195
	cmp	esi, ebp
	jae	$LN2@cclex_read
	npad	6
$LL7@cclex_read:
; Line 197
	movzx	ecx, BYTE PTR [rbx]
	lea	rdi, QWORD PTR [rbx+1]
	cmp	cl, r13b
	je	$LN50@cclex_read
; Line 206
	cmp	cl, 92					; 0000005cH
	jne	SHORT $LN13@cclex_read
; Line 207
	movsx	ecx, BYTE PTR [rdi]
	add	ecx, -34				; ffffffffffffffdeH
	cmp	ecx, 86					; 00000056H
	ja	SHORT $LN26@cclex_read
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR $LN56@cclex_read[r9+rcx]
	mov	edx, DWORD PTR $LN57@cclex_read[r9+rcx*4]
	add	rdx, r9
	jmp	rdx
$LN15@cclex_read:
; Line 208
	mov	BYTE PTR [rax], 92			; 0000005cH
; Line 229
	add	rbx, 2
	jmp	SHORT $LN61@cclex_read
$LN16@cclex_read:
; Line 209
	mov	BYTE PTR [rax], 39			; 00000027H
; Line 229
	add	rbx, 2
	jmp	SHORT $LN61@cclex_read
$LN17@cclex_read:
; Line 210
	mov	BYTE PTR [rax], 34			; 00000022H
; Line 229
	add	rbx, 2
	jmp	SHORT $LN61@cclex_read
$LN18@cclex_read:
; Line 211
	mov	BYTE PTR [rax], 9
; Line 229
	add	rbx, 2
	jmp	SHORT $LN61@cclex_read
$LN19@cclex_read:
; Line 212
	mov	BYTE PTR [rax], 12
; Line 229
	add	rbx, 2
	jmp	SHORT $LN61@cclex_read
$LN20@cclex_read:
; Line 213
	mov	BYTE PTR [rax], 10
; Line 229
	add	rbx, 2
	jmp	SHORT $LN61@cclex_read
$LN21@cclex_read:
; Line 214
	mov	BYTE PTR [rax], 13
; Line 229
	add	rbx, 2
	jmp	SHORT $LN61@cclex_read
$LN26@cclex_read:
	mov	BYTE PTR [rax], 0
	add	rbx, 2
	jmp	SHORT $LN61@cclex_read
$LN13@cclex_read:
; Line 230
	mov	BYTE PTR [rax], cl
	mov	rbx, rdi
$LN61@cclex_read:
; Line 195
	mov	ecx, 1
	inc	esi
	add	rax, rcx
	cmp	esi, ebp
	jb	$LL7@cclex_read
	mov	rdx, QWORD PTR [r12+64]
$LN2@cclex_read:
; Line 193
	add	ebp, 32					; 00000020H
	jmp	$LL4@cclex_read
$LN50@cclex_read:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r15, QWORD PTR [r8]
; File W:\cpp\void\ktt-c\cclex.c
; Line 200
	inc	esi
	mov	BYTE PTR [rax], 0
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 191
	mov	rbx, r10
; File W:\cpp\void\ktt-c\cclex.c
; Line 202
	mov	DWORD PTR [r12+40], 16
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 192
	mov	r14, r10
; Line 240
	mov	rax, QWORD PTR [r12+64]
; Line 241
	test	rax, rax
	lea	rbp, QWORD PTR [rax-40]
	cmove	rbp, r10
; Line 198
	test	rbp, rbp
	je	SHORT $LN43@cclex_read
; Line 199
	mov	rbx, QWORD PTR [rbp+24]
; Line 200
	mov	r14, QWORD PTR [rbp+32]
; Line 202
	mov	r15, QWORD PTR [rbp+8]
$LN43@cclex_read:
; Line 209
	mov	rax, rbp
	cmp	rbx, r14
	jae	SHORT $LN46@cclex_read
; Line 213
	lea	rax, QWORD PTR [rbx+rbx]
; Line 217
	mov	rdx, rbp
	cmp	rax, r14
	mov	rbx, r14
	cmovae	rbx, rax
	lea	rcx, QWORD PTR [rbx+40]
	call	r15
; Line 220
	test	rbp, rbp
	jne	SHORT $LN46@cclex_read
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbp
; Line 224
	mov	QWORD PTR [rax+8], r15
$LN46@cclex_read:
; Line 228
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\cclex.c
; Line 203
	mov	ecx, esi
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	add	rcx, r14
	mov	QWORD PTR [rax+32], rcx
; Line 242
	lea	rcx, QWORD PTR [rax+40]
	mov	QWORD PTR [r12+64], rcx
; File W:\cpp\void\ktt-c\cclex.c
; Line 235
	mov	rax, rdi
	jmp	SHORT $leave$63
$LN58@cclex_read:
	mov	rax, rbx
$leave$63:
; Line 236
	mov	rbx, QWORD PTR [rsp+112]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN57@cclex_read:
	DD	$LN17@cclex_read
	DD	$LN16@cclex_read
	DD	$LN26@cclex_read
	DD	$LN15@cclex_read
	DD	$LN19@cclex_read
	DD	$LN20@cclex_read
	DD	$LN21@cclex_read
	DD	$LN18@cclex_read
	DD	$LN26@cclex_read
$LN56@cclex_read:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	7
	DB	2
	DB	8
	DB	8
	DB	2
cclex_readstr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_identifier
_TEXT	SEGMENT
l$ = 48
str$ = 56
cclex_identifier PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 160
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
; Line 128
	mov	r9, rdx
	mov	rdx, 149533581247487			; 000087fffffe03ffH
; Line 160
	mov	rsi, rcx
; Line 128
	xor	edi, edi
	npad	7
$LL8@cclex_iden:
; Line 130
	movzx	eax, BYTE PTR [r9]
	lea	r8d, DWORD PTR [rax-97]
	cmp	r8b, 25
	jbe	SHORT $LN6@cclex_iden
	sub	al, 48					; 00000030H
	cmp	al, 47					; 0000002fH
	ja	SHORT $LN7@cclex_iden
	bt	rdx, rax
	jae	SHORT $LN7@cclex_iden
$LN6@cclex_iden:
	inc	edi
	inc	r9
	jmp	SHORT $LL8@cclex_iden
$LN7@cclex_iden:
; Line 166
	mov	r9, rbp
	mov	DWORD PTR [rsi+40], 19
	mov	r8d, edi
	lea	rcx, QWORD PTR [rsi+32]
	mov	edx, 4
	call	ccdlb_tblset
	mov	rdx, QWORD PTR [rsi+32]
	shl	rax, 2
	add	rdx, rax
; Line 167
	mov	eax, DWORD PTR [rdx]
	test	eax, eax
	je	SHORT $LN2@cclex_iden
; Line 168
	mov	DWORD PTR [rsi+40], eax
; Line 169
	jmp	SHORT $LN3@cclex_iden
$LN2@cclex_iden:
; Line 170
	mov	eax, DWORD PTR [rsi+40]
	mov	DWORD PTR [rdx], eax
$LN3@cclex_iden:
; Line 173
	mov	ecx, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
; Line 177
	mov	rbx, QWORD PTR [rsp+48]
	mov	edx, OFFSET FLAT:cckey
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR [rdx+rax]
	movsxd	rax, edi
	add	rax, rbp
	mov	QWORD PTR [rsi+64], rcx
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cclex_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_next_token
_TEXT	SEGMENT
l$ = 48
cclex_next_token PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 144
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	npad	7
$LL4@cclex_next:
; Line 147
	mov	rcx, rbx
	call	cclex_next_token_internal
; Line 150
	mov	edx, DWORD PTR [rbx+40]
	cmp	edx, 14
	je	SHORT $LL4@cclex_next
	cmp	edx, 12
	je	SHORT $LL4@cclex_next
	cmp	edx, 2
	je	SHORT $LL4@cclex_next
	cmp	edx, 3
	je	SHORT $LL4@cclex_next
; Line 154
	xor	eax, eax
	cmp	edx, 1
	setne	al
; Line 155
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cclex_next_token ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_next_token_internal
_TEXT	SEGMENT
l$ = 64
cclex_next_token_internal PROC				; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 241
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 243
	mov	rsi, QWORD PTR [rcx+16]
	mov	rdi, rcx
; Line 247
	mov	r14, QWORD PTR [rcx]
	mov	QWORD PTR [rcx+24], rsi
	mov	QWORD PTR [rcx+48], rsi
	cmp	rsi, r14
	jb	SHORT $LN15@cclex_next
; Line 248
	mov	DWORD PTR [rcx+40], 1
; Line 597
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN15@cclex_next:
; Line 251
	movsx	rdx, BYTE PTR [rsi]
	mov	QWORD PTR [rsp+72], rbx
	mov	QWORD PTR [rsp+80], rbp
	mov	QWORD PTR [rsp+88], r15
	lea	r15, OFFSET FLAT:__ImageBase
	cmp	edx, 126				; 0000007eH
	ja	$LN17@cclex_next
	movzx	eax, BYTE PTR $LN223@cclex_next[r15+rdx]
	mov	ecx, DWORD PTR $LN224@cclex_next[r15+rax*4]
	add	rcx, r15
	jmp	rcx
$LN18@cclex_next:
; Line 259
	cmp	dl, 48					; 00000030H
	jne	SHORT $LN28@cclex_next
; Line 260
	movzx	eax, BYTE PTR [rsi+1]
	cmp	al, 98					; 00000062H
	je	SHORT $LN34@cclex_next
	cmp	al, 100					; 00000064H
	je	SHORT $LN32@cclex_next
	cmp	al, 104					; 00000068H
	je	SHORT $LN30@cclex_next
	cmp	al, 111					; 0000006fH
	je	SHORT $LN33@cclex_next
	cmp	al, 120					; 00000078H
	je	SHORT $LN30@cclex_next
; Line 279
	mov	r9d, 10
	jmp	SHORT $LN4@cclex_next
$LN33@cclex_next:
; Line 271
	mov	r9d, 8
; Line 272
	add	rsi, 2
; Line 273
	jmp	SHORT $LN228@cclex_next
$LN30@cclex_next:
; Line 263
	mov	r9d, 16
; Line 264
	add	rsi, 2
; Line 265
	jmp	SHORT $LN228@cclex_next
$LN32@cclex_next:
; Line 267
	mov	r9d, 10
; Line 268
	add	rsi, 2
; Line 269
	jmp	SHORT $LN228@cclex_next
$LN34@cclex_next:
; Line 275
	mov	r9d, 2
; Line 276
	add	rsi, r9
$LN228@cclex_next:
; Line 285
	mov	QWORD PTR [rdi+16], rsi
$LN4@cclex_next:
	xor	ebp, ebp
	mov	r11d, ebp
; Line 286
	cmp	rsi, r14
	jae	SHORT $LN225@cclex_next
	jmp	SHORT $LN215@cclex_next
$LN28@cclex_next:
; Line 283
	xor	ebp, ebp
	mov	r9d, 10
	mov	r11d, ebp
$LN215@cclex_next:
	mov	r8, rsi
	mov	ebx, r9d
	mov	r10d, r9d
	npad	1
$LL6@cclex_next:
; Line 287
	movsx	rdx, BYTE PTR [r8]
	cmp	dl, 48					; 00000030H
	jl	SHORT $LN36@cclex_next
	cmp	dl, 57					; 00000039H
	jg	SHORT $LN36@cclex_next
; Line 288
	imul	r11, r10
	mov	r10, rbx
	add	r11, -48				; ffffffffffffffd0H
	add	r11, rdx
; Line 289
	jmp	SHORT $LN229@cclex_next
$LN36@cclex_next:
; Line 290
	lea	eax, DWORD PTR [rdx-97]
	cmp	al, 5
	ja	SHORT $LN38@cclex_next
; Line 291
	mov	rcx, r10
	imul	rcx, r11
	lea	r11, QWORD PTR [rdx-87]
; Line 292
	jmp	SHORT $LN230@cclex_next
$LN38@cclex_next:
; Line 293
	mov	rsi, r8
	cmp	dl, 65					; 00000041H
	jl	SHORT $LN225@cclex_next
	cmp	dl, 70					; 00000046H
	jg	SHORT $LN225@cclex_next
; Line 294
	mov	rcx, r10
	imul	rcx, r11
	lea	r11, QWORD PTR [rdx-55]
$LN230@cclex_next:
; Line 286
	add	r11, rcx
$LN229@cclex_next:
	mov	eax, 1
	lea	rsi, QWORD PTR [r8+rax]
	mov	QWORD PTR [rdi+16], rsi
	mov	r8, rsi
	cmp	rsi, r14
	jb	SHORT $LL6@cclex_next
$LN225@cclex_next:
; Line 299
	cmp	BYTE PTR [rsi], 46			; 0000002eH
	jne	$LN42@cclex_next
; Line 303
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	inc	rsi
	mov	QWORD PTR [rdi+16], rsi
; Line 306
	cmp	rsi, r14
	jae	SHORT $LN226@cclex_next
	mov	r10d, r9d
	mov	r8d, r9d
$LL10@cclex_next:
; Line 307
	movsx	rdx, BYTE PTR [rsi]
	lea	eax, DWORD PTR [rdx-48]
	cmp	al, 9
	ja	SHORT $LN44@cclex_next
; Line 308
	imul	rbp, r8
	mov	r8, r10
	add	rbp, -48				; ffffffffffffffd0H
	add	rbp, rdx
; Line 309
	jmp	SHORT $LN231@cclex_next
$LN44@cclex_next:
; Line 310
	lea	eax, DWORD PTR [rdx-97]
	cmp	al, 5
	ja	SHORT $LN46@cclex_next
; Line 311
	mov	rcx, r8
	imul	rcx, rbp
	lea	rbp, QWORD PTR [rdx-87]
; Line 312
	jmp	SHORT $LN232@cclex_next
$LN46@cclex_next:
; Line 313
	lea	eax, DWORD PTR [rdx-65]
	cmp	al, 5
	ja	SHORT $LN226@cclex_next
; Line 314
	mov	rcx, r8
	imul	rcx, rbp
	lea	rbp, QWORD PTR [rdx-55]
$LN232@cclex_next:
; Line 306
	add	rbp, rcx
$LN231@cclex_next:
	movd	xmm0, r9d
	mov	eax, 1
	add	rsi, rax
	mov	QWORD PTR [rdi+16], rsi
	cvtdq2pd xmm0, xmm0
	mulsd	xmm1, xmm0
	cmp	rsi, r14
	jb	SHORT $LL10@cclex_next
$LN226@cclex_next:
; Line 320
	xorps	xmm0, xmm0
	test	rbp, rbp
	js	SHORT $LN221@cclex_next
	cvtsi2sd xmm0, rbp
	jmp	SHORT $LN222@cclex_next
$LN221@cclex_next:
	mov	rax, rbp
	and	ebp, 1
	shr	rax, 1
	or	rax, rbp
	cvtsi2sd xmm0, rax
	addsd	xmm0, xmm0
$LN222@cclex_next:
	divsd	xmm0, xmm1
	xorps	xmm1, xmm1
	test	r11, r11
	js	SHORT $LN219@cclex_next
	cvtsi2sd xmm1, r11
	mov	eax, 21
	addsd	xmm0, xmm1
	movsd	QWORD PTR [rdi+64], xmm0
; Line 325
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN219@cclex_next:
; Line 320
	mov	rax, r11
	and	r11d, 1
	shr	rax, 1
	or	rax, r11
	cvtsi2sd xmm1, rax
	mov	eax, 21
	addsd	xmm1, xmm1
	addsd	xmm0, xmm1
	movsd	QWORD PTR [rdi+64], xmm0
; Line 325
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN42@cclex_next:
; Line 323
	mov	eax, 20
	mov	QWORD PTR [rdi+64], r11
; Line 325
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN50@cclex_next:
; Line 128
	xor	ebp, ebp
; Line 338
	mov	rdx, rsi
	mov	r8, 149533581247487			; 000087fffffe03ffH
	npad	2
$LL192@cclex_next:
; Line 130
	movzx	ecx, BYTE PTR [rdx]
	lea	eax, DWORD PTR [rcx-97]
	cmp	al, 25
	jbe	SHORT $LN190@cclex_next
	sub	cl, 48					; 00000030H
	cmp	cl, 47					; 0000002fH
	ja	SHORT $LN191@cclex_next
	bt	r8, rcx
	jae	SHORT $LN191@cclex_next
$LN190@cclex_next:
	inc	ebp
	inc	rdx
	jmp	SHORT $LL192@cclex_next
$LN191@cclex_next:
; Line 166
	mov	r9, rsi
	mov	DWORD PTR [rdi+40], 19
	mov	r8d, ebp
	lea	rcx, QWORD PTR [rdi+32]
	mov	edx, 4
	call	ccdlb_tblset
	mov	rdx, QWORD PTR [rdi+32]
	mov	rcx, rax
; Line 167
	mov	eax, DWORD PTR [rdx+rax*4]
	test	eax, eax
	je	SHORT $LN186@cclex_next
; Line 168
	mov	DWORD PTR [rdi+40], eax
; Line 169
	jmp	SHORT $LN187@cclex_next
$LN186@cclex_next:
; Line 170
	mov	eax, DWORD PTR [rdi+40]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN187@cclex_next:
; Line 173
	mov	ecx, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:cckey
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR [rdx+rax]
; Line 176
	movsxd	rax, ebp
	add	rax, rsi
	mov	QWORD PTR [rdi+64], rcx
; Line 339
	jmp	$LN233@cclex_next
$LN103@cclex_next:
; Line 341
	mov	rdx, rsi
	mov	rcx, rdi
	call	cclex_readstr
; Line 342
	jmp	$LN233@cclex_next
$LN104@cclex_next:
; Line 344
	mov	DWORD PTR [rdi+40], 11
; Line 345
	jmp	$LN234@cclex_next
$LN105@cclex_next:
; Line 347
	mov	r9d, 10
	mov	DWORD PTR [rdi+40], r9d
; Line 348
	jmp	$LN234@cclex_next
$LN106@cclex_next:
; Line 353
	mov	DWORD PTR [rdi+40], 4
; Line 354
	jmp	$LN234@cclex_next
$LN107@cclex_next:
; Line 356
	mov	DWORD PTR [rdi+40], 5
; Line 357
	jmp	$LN234@cclex_next
$LN108@cclex_next:
; Line 359
	mov	r9d, 8
	mov	DWORD PTR [rdi+40], r9d
; Line 360
	jmp	$LN234@cclex_next
$LN109@cclex_next:
; Line 362
	mov	DWORD PTR [rdi+40], 9
; Line 363
	jmp	$LN234@cclex_next
$LN110@cclex_next:
; Line 365
	mov	DWORD PTR [rdi+40], 6
; Line 366
	jmp	$LN234@cclex_next
$LN111@cclex_next:
; Line 368
	mov	DWORD PTR [rdi+40], 7
; Line 369
	jmp	$LN234@cclex_next
$LN112@cclex_next:
; Line 372
	mov	DWORD PTR [rdi+40], 87			; 00000057H
; Line 373
	jmp	$LN234@cclex_next
$LN113@cclex_next:
; Line 377
	cmp	BYTE PTR [rsi+1], 46			; 0000002eH
	lea	rax, QWORD PTR [rsi+1]
	jne	SHORT $LN114@cclex_next
	cmp	BYTE PTR [rsi+2], 46			; 0000002eH
	jne	SHORT $LN114@cclex_next
; Line 378
	lea	rax, QWORD PTR [rsi+3]
	mov	ecx, 13
; Line 382
	mov	QWORD PTR [rdi+16], rax
	mov	DWORD PTR [rdi+40], ecx
	jmp	$LN2@cclex_next
$LN114@cclex_next:
; Line 380
	mov	ecx, 91					; 0000005bH
; Line 382
	mov	QWORD PTR [rdi+16], rax
	mov	DWORD PTR [rdi+40], ecx
	jmp	$LN2@cclex_next
$LN116@cclex_next:
; Line 387
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rsi+1]
	jne	SHORT $LN117@cclex_next
; Line 388
	lea	rcx, QWORD PTR [rsi+2]
$LN117@cclex_next:
; Line 392
	mov	eax, 121				; 00000079H
	mov	QWORD PTR [rdi+16], rcx
	mov	r8d, 105				; 00000069H
	cmovne	eax, r8d
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN119@cclex_next:
; Line 398
	movzx	ecx, BYTE PTR [rsi+1]
	lea	rax, QWORD PTR [rsi+1]
	cmp	cl, 124					; 0000007cH
	jne	SHORT $LN120@cclex_next
; Line 399
	mov	DWORD PTR [rdi+40], 108			; 0000006cH
	lea	rax, QWORD PTR [rsi+2]
; Line 400
	jmp	$LN233@cclex_next
$LN120@cclex_next:
; Line 401
	cmp	cl, 61					; 0000003dH
	jne	SHORT $LN122@cclex_next
; Line 402
	mov	DWORD PTR [rdi+40], 122			; 0000007aH
	lea	rax, QWORD PTR [rsi+2]
; Line 403
	jmp	$LN233@cclex_next
$LN122@cclex_next:
; Line 404
	mov	DWORD PTR [rdi+40], 106			; 0000006aH
; Line 406
	jmp	$LN233@cclex_next
$LN124@cclex_next:
; Line 412
	movzx	ecx, BYTE PTR [rsi+1]
	lea	rax, QWORD PTR [rsi+1]
	cmp	cl, 38					; 00000026H
	jne	SHORT $LN125@cclex_next
; Line 413
	mov	DWORD PTR [rdi+40], 107			; 0000006bH
	lea	rax, QWORD PTR [rsi+2]
; Line 414
	jmp	$LN233@cclex_next
$LN125@cclex_next:
; Line 415
	cmp	cl, 61					; 0000003dH
	jne	SHORT $LN127@cclex_next
; Line 416
	mov	DWORD PTR [rdi+40], 120			; 00000078H
	lea	rax, QWORD PTR [rsi+2]
; Line 417
	jmp	$LN233@cclex_next
$LN127@cclex_next:
; Line 418
	mov	DWORD PTR [rdi+40], 104			; 00000068H
; Line 420
	jmp	$LN233@cclex_next
$LN129@cclex_next:
; Line 425
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rsi+1]
	jne	SHORT $LN130@cclex_next
; Line 426
	lea	rcx, QWORD PTR [rsi+2]
$LN130@cclex_next:
; Line 430
	mov	eax, 112				; 00000070H
	mov	QWORD PTR [rdi+16], rcx
	mov	r8d, 94					; 0000005eH
	cmovne	eax, r8d
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN132@cclex_next:
; Line 435
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rsi+1]
	jne	SHORT $LN133@cclex_next
; Line 436
	lea	rcx, QWORD PTR [rsi+2]
$LN133@cclex_next:
; Line 440
	mov	eax, 111				; 0000006fH
	mov	QWORD PTR [rdi+16], rcx
	mov	r8d, 93					; 0000005dH
	cmovne	eax, r8d
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN135@cclex_next:
; Line 453
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rsi+1]
	jne	SHORT $LN136@cclex_next
; Line 454
	lea	rcx, QWORD PTR [rsi+2]
$LN136@cclex_next:
; Line 458
	mov	eax, 114				; 00000072H
	mov	QWORD PTR [rdi+16], rcx
	mov	r8d, 96					; 00000060H
	cmovne	eax, r8d
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN138@cclex_next:
; Line 471
	movzx	ecx, BYTE PTR [rsi+1]
	lea	rax, QWORD PTR [rsi+1]
	cmp	cl, 62					; 0000003eH
	jne	SHORT $LN139@cclex_next
; Line 472
	mov	DWORD PTR [rdi+40], 92			; 0000005cH
	lea	rax, QWORD PTR [rsi+2]
; Line 473
	jmp	$LN233@cclex_next
$LN139@cclex_next:
; Line 474
	cmp	cl, 61					; 0000003dH
	jne	SHORT $LN141@cclex_next
; Line 475
	mov	DWORD PTR [rdi+40], 115			; 00000073H
	lea	rax, QWORD PTR [rsi+2]
; Line 476
	jmp	$LN233@cclex_next
$LN141@cclex_next:
; Line 477
	mov	DWORD PTR [rdi+40], 97			; 00000061H
; Line 479
	jmp	$LN233@cclex_next
$LN143@cclex_next:
; Line 484
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rsi+1]
	jne	SHORT $LN144@cclex_next
; Line 485
	lea	rcx, QWORD PTR [rsi+2]
$LN144@cclex_next:
; Line 489
	mov	eax, 102				; 00000066H
	mov	QWORD PTR [rdi+16], rcx
	mov	r8d, 110				; 0000006eH
	cmovne	eax, r8d
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN146@cclex_next:
; Line 499
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	mov	eax, 90					; 0000005aH
	mov	ecx, 103				; 00000067H
	cmovne	ecx, eax
	lea	rax, QWORD PTR [rsi+2]
	mov	QWORD PTR [rdi+16], rax
	mov	DWORD PTR [rdi+40], ecx
	jmp	$LN2@cclex_next
$LN149@cclex_next:
; Line 504
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rsi+1]
	jne	SHORT $LN150@cclex_next
; Line 505
	lea	rcx, QWORD PTR [rsi+2]
$LN150@cclex_next:
; Line 509
	mov	eax, 118				; 00000076H
	mov	QWORD PTR [rdi+16], rcx
	mov	r8d, 100				; 00000064H
	cmovne	eax, r8d
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN152@cclex_next:
; Line 514
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rsi+1]
	jne	SHORT $LN153@cclex_next
; Line 515
	lea	rcx, QWORD PTR [rsi+2]
$LN153@cclex_next:
; Line 519
	mov	eax, 119				; 00000077H
	mov	QWORD PTR [rdi+16], rcx
	mov	r8d, 101				; 00000065H
	cmovne	eax, r8d
	mov	DWORD PTR [rdi+40], eax
	jmp	$LN2@cclex_next
$LN155@cclex_next:
; Line 524
	cmp	BYTE PTR [rsi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rsi+1]
	jne	SHORT $LN156@cclex_next
; Line 525
	lea	rcx, QWORD PTR [rsi+2]
$LN156@cclex_next:
; Line 529
	mov	eax, 113				; 00000071H
	mov	QWORD PTR [rdi+16], rcx
	mov	r8d, 95					; 0000005fH
	cmovne	eax, r8d
	mov	DWORD PTR [rdi+40], eax
	jmp	SHORT $LN2@cclex_next
$LN158@cclex_next:
; Line 532
	lea	rax, QWORD PTR [rsi+2]
; Line 537
	xor	ebp, ebp
	mov	QWORD PTR [rdi+16], rax
	mov	DWORD PTR [rdi+40], ebp
	jmp	SHORT $LN2@cclex_next
$LN161@cclex_next:
; Line 540
	mov	DWORD PTR [rdi+40], 1
; Line 541
	jmp	SHORT $LN234@cclex_next
$LN162@cclex_next:
; Line 546
	mov	DWORD PTR [rdi+40], 12
; Line 547
	jmp	SHORT $LN234@cclex_next
$LN167@cclex_next:
; Line 549
	cmp	BYTE PTR [rsi+1], 10
	lea	rax, QWORD PTR [rsi+1]
	jne	SHORT $LN168@cclex_next
; Line 550
	lea	rax, QWORD PTR [rsi+2]
$LN168@cclex_next:
; Line 554
	mov	r9d, 2
	mov	QWORD PTR [rdi+16], rax
	mov	DWORD PTR [rdi+40], r9d
	jmp	SHORT $LN2@cclex_next
$LN170@cclex_next:
; Line 556
	mov	r9d, 2
	mov	DWORD PTR [rdi+40], r9d
; Line 557
	jmp	SHORT $LN234@cclex_next
$LN171@cclex_next:
; Line 559
	mov	DWORD PTR [rdi+40], 3
	jmp	SHORT $LN234@cclex_next
$LN17@cclex_next:
; Line 253
	xor	ebp, ebp
	mov	DWORD PTR [rdi+40], ebp
$LN234@cclex_next:
; Line 563
	lea	rax, QWORD PTR [rsi+1]
$LN233@cclex_next:
	mov	QWORD PTR [rdi+16], rax
$LN2@cclex_next:
	and	DWORD PTR [rdi+56], -3			; fffffffdH
; Line 567
	mov	rdx, QWORD PTR [rdi+16]
	mov	r8, QWORD PTR [rdi]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	cmp	rdx, r8
	jae	$leave_token_trailing$237
	npad	11
$LL11@cclex_next:
; Line 568
	movsx	eax, BYTE PTR [rdx]
	add	eax, -8
	cmp	eax, 51					; 00000033H
	ja	$leave_token_trailing$237
	cdqe
	movzx	eax, BYTE PTR $LN217@cclex_next[r15+rax]
	mov	ecx, DWORD PTR $LN218@cclex_next[r15+rax*4]
	add	rcx, r15
	jmp	rcx
$LN172@cclex_next:
; Line 570
	inc	rdx
; Line 571
	jmp	SHORT $LN235@cclex_next
$LN177@cclex_next:
; Line 573
	cmp	BYTE PTR [rdx+1], 10
	jne	SHORT $LN178@cclex_next
; Line 574
	add	rdx, 2
; Line 575
	jmp	SHORT $LN179@cclex_next
$LN178@cclex_next:
; Line 576
	inc	rdx
$LN179@cclex_next:
; Line 578
	mov	QWORD PTR [rdi+16], rdx
	mov	eax, DWORD PTR [rdi+56]
	lea	ecx, DWORD PTR [rax-1]
	xor	ecx, eax
	and	ecx, 1
	xor	ecx, eax
	mov	DWORD PTR [rdi+56], ecx
; Line 579
	jmp	SHORT $LN206@cclex_next
$LN180@cclex_next:
; Line 582
	mov	eax, DWORD PTR [rdi+56]
	inc	rdx
	lea	ecx, DWORD PTR [rax-1]
	xor	ecx, eax
	and	ecx, 1
	xor	ecx, eax
	mov	DWORD PTR [rdi+56], ecx
; Line 583
	jmp	SHORT $LN235@cclex_next
$LN181@cclex_next:
; Line 586
	mov	ecx, DWORD PTR [rdi+56]
	inc	rdx
	mov	eax, ecx
	shr	eax, 1
	lea	eax, DWORD PTR [rax*2-2]
	xor	eax, ecx
	and	eax, 2
	xor	eax, ecx
	mov	DWORD PTR [rdi+56], eax
$LN235@cclex_next:
; Line 567
	mov	QWORD PTR [rdi+16], rdx
$LN206@cclex_next:
	cmp	rdx, r8
	jb	$LL11@cclex_next
$leave_token_trailing$237:
	mov	r15, QWORD PTR [rsp+88]
$leave$238:
; Line 597
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN224@cclex_next:
	DD	$LN161@cclex_next
	DD	$LN162@cclex_next
	DD	$LN170@cclex_next
	DD	$LN167@cclex_next
	DD	$LN146@cclex_next
	DD	$LN103@cclex_next
	DD	$LN155@cclex_next
	DD	$LN124@cclex_next
	DD	$LN106@cclex_next
	DD	$LN107@cclex_next
	DD	$LN132@cclex_next
	DD	$LN135@cclex_next
	DD	$LN105@cclex_next
	DD	$LN138@cclex_next
	DD	$LN113@cclex_next
	DD	$LN129@cclex_next
	DD	$LN18@cclex_next
	DD	$LN104@cclex_next
	DD	$LN171@cclex_next
	DD	$LN152@cclex_next
	DD	$LN143@cclex_next
	DD	$LN149@cclex_next
	DD	$LN158@cclex_next
	DD	$LN50@cclex_next
	DD	$LN108@cclex_next
	DD	$LN109@cclex_next
	DD	$LN116@cclex_next
	DD	$LN110@cclex_next
	DD	$LN119@cclex_next
	DD	$LN111@cclex_next
	DD	$LN112@cclex_next
	DD	$LN17@cclex_next
$LN223@cclex_next:
	DB	0
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	1
	DB	1
	DB	2
	DB	1
	DB	1
	DB	3
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	1
	DB	4
	DB	5
	DB	31
	DB	31
	DB	6
	DB	7
	DB	31
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	13
	DB	14
	DB	15
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	17
	DB	18
	DB	19
	DB	20
	DB	21
	DB	22
	DB	31
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	24
	DB	31
	DB	25
	DB	26
	DB	23
	DB	31
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	27
	DB	28
	DB	29
	DB	30
	npad	1
$LN218@cclex_next:
	DD	$LN172@cclex_next
	DD	$LN180@cclex_next
	DD	$LN177@cclex_next
	DD	$LN181@cclex_next
	DD	$leave_token_trailing$237
$LN217@cclex_next:
	DB	0
	DB	0
	DB	1
	DB	0
	DB	0
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
cclex_next_token_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_token
_TEXT	SEGMENT
l$ = 8
token$ = 16
cclex_token PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 136
	movups	xmm0, XMMWORD PTR [rcx+40]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+56]
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rdx+16], xmm1
; Line 137
	movups	XMMWORD PTR [rcx+40], xmm0
	movups	XMMWORD PTR [rcx+56], xmm0
; Line 138
	ret	0
cclex_token ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_idenlen
_TEXT	SEGMENT
s$ = 8
cclex_idenlen PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 127
	mov	r8, rcx
; Line 128
	xor	r9d, r9d
	mov	r10, 149533581247487			; 000087fffffe03ffH
$LL4@cclex_iden:
; Line 130
	movzx	eax, BYTE PTR [r8]
	lea	edx, DWORD PTR [rax-97]
	cmp	dl, 25
	jbe	SHORT $LN2@cclex_iden
	sub	al, 48					; 00000030H
	cmp	al, 47					; 0000002fH
	ja	SHORT $LN17@cclex_iden
	bt	r10, rax
	jae	SHORT $LN17@cclex_iden
$LN2@cclex_iden:
	inc	r9d
	inc	r8
	jmp	SHORT $LL4@cclex_iden
$LN17@cclex_iden:
; Line 132
	mov	eax, r9d
	ret	0
cclex_idenlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_uninit
_TEXT	SEGMENT
l$ = 8
cclex_uninit PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 122
	ret	0
cclex_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_init
_TEXT	SEGMENT
l$ = 8
cclex_init PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 112
	xorps	xmm0, xmm0
; Line 113
	movups	XMMWORD PTR [rcx+40], xmm0
	movups	XMMWORD PTR [rcx+56], xmm0
; Line 114
	jmp	cclex_hash_init
cclex_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_move
_TEXT	SEGMENT
l$ = 8
len$ = 16
bed$ = 24
cclex_move PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 106
	lea	rax, QWORD PTR [rdx+r8]
; Line 107
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+24], r8
	mov	QWORD PTR [rcx+8], r8
; Line 108
	ret	0
cclex_move ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_hash_init
_TEXT	SEGMENT
lexer$ = 48
cclex_hash_init PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 11
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 17
	mov	edx, 4
	lea	rbx, QWORD PTR [rcx+32]
	lea	r9, OFFSET FLAT:??_C@_05MNIOPOB@__asm@
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+1]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 18
	lea	r9, OFFSET FLAT:??_C@_07BECPAABE@__based@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 22
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+3]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 19
	lea	r9, OFFSET FLAT:??_C@_07KOLFKCDI@__cdecl@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 23
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+3]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 20
	lea	r9, OFFSET FLAT:??_C@_09HIJEGCPM@__clrcall@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 24
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+5]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 21
	lea	r9, OFFSET FLAT:??_C@_0L@JMKHOMEK@__fastcall@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 25
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+6]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 22
	lea	r9, OFFSET FLAT:??_C@_08FEOELIIN@__inline@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 26
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 23
	lea	r9, OFFSET FLAT:??_C@_09IFJBGAPI@__stdcall@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 27
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+5]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 24
	lea	r9, OFFSET FLAT:??_C@_0L@NPHFGOKO@__thiscall@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 28
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+6]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 25
	lea	r9, OFFSET FLAT:??_C@_0M@FJBNGECK@__vectorcal@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 29
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+7]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 31
	lea	r9, OFFSET FLAT:??_C@_08LCAALENH@_Alignof@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 30
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 32
	lea	r9, OFFSET FLAT:??_C@_08IPCLHPMJ@_Alignas@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 32		; 00000020H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 38
	lea	r9, OFFSET FLAT:??_C@_05BNCCCJPP@const@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 33		; 00000021H
	lea	r8d, QWORD PTR [rdx+1]
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 39
	lea	r9, OFFSET FLAT:??_C@_08NGGFOJBB@restrict@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 36		; 00000024H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 40
	lea	r9, OFFSET FLAT:??_C@_08PABEKFH@volatile@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 37		; 00000025H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 46
	lea	r9, OFFSET FLAT:??_C@_06OGMBMJA@inline@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 38		; 00000026H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 47
	lea	r9, OFFSET FLAT:??_C@_09JEIHJDJD@_Noreturn@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 41		; 00000029H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+5]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 53
	lea	r9, OFFSET FLAT:??_C@_06CPIODIKA@signed@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 42		; 0000002aH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 54
	lea	r9, OFFSET FLAT:??_C@_08CLLOMHGD@unsigned@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 45		; 0000002dH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 55
	lea	r9, OFFSET FLAT:??_C@_06EBGKOKIG@__int8@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 46		; 0000002eH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 56
	lea	r9, OFFSET FLAT:??_C@_07ICFHOGAF@__int16@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 47		; 0000002fH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+3]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 57
	lea	r9, OFFSET FLAT:??_C@_07OFLPPHGP@__int32@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 48		; 00000030H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+3]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 58
	lea	r9, OFFSET FLAT:??_C@_07LFCOJCAC@__int64@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 49		; 00000031H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+3]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 59
	lea	r9, OFFSET FLAT:??_C@_06BNJCAIGJ@double@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 50		; 00000032H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
	mov	DWORD PTR [rcx+rax*4], 51		; 00000033H
; Line 60
	mov	edx, 4
	lea	r9, OFFSET FLAT:??_C@_05KNFBNCOH@float@
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+1]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 61
	lea	r9, OFFSET FLAT:??_C@_04GOKPGOLB@long@
	mov	edx, 4
	mov	r8d, edx
	mov	DWORD PTR [rcx+rax*4], 52		; 00000034H
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 62
	lea	r9, OFFSET FLAT:??_C@_03JBIPMCLC@int@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 53		; 00000035H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-1]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 63
	lea	r9, OFFSET FLAT:??_C@_05BFKKPKCG@short@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 54		; 00000036H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+1]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 64
	lea	r9, OFFSET FLAT:??_C@_04ENMBGAPA@char@
	mov	edx, 4
	mov	r8d, edx
	mov	DWORD PTR [rcx+rax*4], 55		; 00000037H
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 65
	lea	r9, OFFSET FLAT:??_C@_04GKJNKENE@void@
	mov	edx, 4
	mov	r8d, edx
	mov	DWORD PTR [rcx+rax*4], 56		; 00000038H
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 66
	lea	r9, OFFSET FLAT:??_C@_05HIFAKALE@_Bool@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 57		; 00000039H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+1]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 67
	lea	r9, OFFSET FLAT:??_C@_08PLEDNCDB@_Complex@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 58		; 0000003aH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 68
	lea	r9, OFFSET FLAT:??_C@_07LPOMPHGP@_Atomic@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 59		; 0000003bH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+3]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 69
	lea	r9, OFFSET FLAT:??_C@_04DBJPMPLO@enum@
	mov	edx, 4
	mov	r8d, edx
	mov	DWORD PTR [rcx+rax*4], 60		; 0000003cH
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 70
	lea	r9, OFFSET FLAT:??_C@_06PBJBIPGK@struct@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 61		; 0000003dH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 74
	lea	r9, OFFSET FLAT:??_C@_07FIDIHKEG@typedef@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 62		; 0000003eH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+3]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 79
	lea	r9, OFFSET FLAT:??_C@_04HAPDLBFF@auto@
	mov	edx, 4
	mov	r8d, edx
	mov	DWORD PTR [rcx+rax*4], 64		; 00000040H
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 80
	lea	r9, OFFSET FLAT:??_C@_06PAMNHHEG@extern@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 66		; 00000042H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 81
	lea	r9, OFFSET FLAT:??_C@_08DHHIDNEP@register@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 67		; 00000043H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 82
	lea	r9, OFFSET FLAT:??_C@_06GGHJAEBN@static@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 68		; 00000044H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 83
	lea	r9, OFFSET FLAT:??_C@_0O@COIIMKFA@_Thread_local@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 69		; 00000045H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+9]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 84
	lea	r9, OFFSET FLAT:??_C@_0L@LOEMFGDG@__declspec@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 70		; 00000046H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+6]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 89
	lea	r9, OFFSET FLAT:??_C@_02HEBPBKGD@if@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 71		; 00000047H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 90
	lea	r9, OFFSET FLAT:??_C@_06DOPOGBGP@switch@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 73		; 00000049H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 91
	lea	r9, OFFSET FLAT:??_C@_04FHMCPBIP@else@
	mov	edx, 4
	mov	r8d, edx
	mov	DWORD PTR [rcx+rax*4], 74		; 0000004aH
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 92
	lea	r9, OFFSET FLAT:??_C@_04CKOINMPC@case@
	mov	edx, 4
	mov	r8d, edx
	mov	DWORD PTR [rcx+rax*4], 75		; 0000004bH
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 93
	lea	r9, OFFSET FLAT:??_C@_07DLHCIBDH@default@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 76		; 0000004cH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+3]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 94
	lea	r9, OFFSET FLAT:??_C@_03JOHEBPFF@for@
	mov	DWORD PTR [rcx+rax*4], 77		; 0000004dH
	mov	edx, 4
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-1]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 95
	lea	r9, OFFSET FLAT:??_C@_05OODBEKIG@while@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 78		; 0000004eH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+1]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 96
	lea	r9, OFFSET FLAT:??_C@_02KNAFDCHJ@do@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 79		; 0000004fH
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 97
	lea	r9, OFFSET FLAT:??_C@_04MABHPDAO@goto@
	mov	edx, 4
	mov	r8d, edx
	mov	DWORD PTR [rcx+rax*4], 80		; 00000050H
	mov	rcx, rbx
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 98
	lea	r9, OFFSET FLAT:??_C@_06LNOFJDNM@return@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 81		; 00000051H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+2]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 99
	lea	r9, OFFSET FLAT:??_C@_05ELPHFHOI@break@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 82		; 00000052H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+1]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
; Line 100
	lea	r9, OFFSET FLAT:??_C@_08DLICDMBN@continue@
	mov	edx, 4
	mov	DWORD PTR [rcx+rax*4], 83		; 00000053H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx+4]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR [rbx]
	mov	DWORD PTR [rcx+rax*4], 84		; 00000054H
; Line 101
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cclex_hash_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_lvalue
_TEXT	SEGMENT
__$ReturnAddress$ = 8
value$ = 16
label$ = 24
ccexec_lvalue PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.h
; Line 58
	mov	DWORD PTR [rcx+8], 2
; Line 61
	mov	rax, rcx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx], r8
; Line 62
	ret	0
ccexec_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_rvalue
_TEXT	SEGMENT
__$ReturnAddress$ = 8
value$ = 16
label$ = 24
ccexec_rvalue PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.h
; Line 49
	mov	DWORD PTR [rcx+8], 1
; Line 52
	mov	rax, rcx
	mov	QWORD PTR [rcx+16], rdx
	mov	QWORD PTR [rcx], r8
; Line 53
	ret	0
ccexec_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_fjump
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
block$ = 96
point$ = 104
cnd$ = 112
ccblock_fjump PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 272
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
; Line 273
	movups	xmm0, XMMWORD PTR [rdx]
	mov	rdi, rcx
	mov	rbx, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 273
	movaps	XMMWORD PTR $T1[rsp], xmm0
	movsd	xmm0, QWORD PTR [rdx+16]
	movsd	QWORD PTR $T2[rsp+16], xmm0
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 273
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	eax, eax
; Line 102
	mov	QWORD PTR [rdx], 8
	mov	DWORD PTR [rdx+28], eax
; Line 103
	movaps	xmm0, XMMWORD PTR $T1[rsp]
; Line 199
	mov	eax, DWORD PTR $T2[rsp+16]
; Line 103
	movq	QWORD PTR [rdx+8], xmm0
; Line 198
	psrldq	xmm0, 8
	movq	QWORD PTR [rdx+16], xmm0
; Line 199
	mov	DWORD PTR [rdx+24], eax
; Line 200
	mov	QWORD PTR [rdx+32], rbx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 274
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
; Line 273
	jmp	ccblock_add_edict
ccblock_fjump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_jump
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
block$ = 96
point$ = 104
ccblock_jump PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 260
	push	rbx
	sub	rsp, 80					; 00000050H
; Line 261
	movups	xmm0, XMMWORD PTR [rdx]
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 261
	movaps	XMMWORD PTR $T1[rsp], xmm0
	movsd	xmm0, QWORD PTR [rdx+16]
	movsd	QWORD PTR $T2[rsp+16], xmm0
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 261
	mov	rcx, rbx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	eax, eax
; Line 102
	mov	QWORD PTR [rdx], 6
	mov	QWORD PTR [rdx+28], rax
	mov	DWORD PTR [rdx+36], eax
; Line 103
	movaps	xmm0, XMMWORD PTR $T1[rsp]
; Line 180
	mov	eax, DWORD PTR $T2[rsp+16]
; Line 103
	movq	QWORD PTR [rdx+8], xmm0
; Line 179
	psrldq	xmm0, 8
	movq	QWORD PTR [rdx+16], xmm0
; Line 180
	mov	DWORD PTR [rdx+24], eax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 262
	add	rsp, 80					; 00000050H
	pop	rbx
; Line 261
	jmp	ccblock_add_edict
ccblock_jump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_invoke
_TEXT	SEGMENT
block$ = 48
p$ = 56
i$ = 64
ccblock_invoke PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 254
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rdi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 254
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 255
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 12
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_06HJMAOIE@invoke@
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 255
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 220
	mov	QWORD PTR [rax+16], rbx
; Line 221
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 256
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 255
	jmp	ccblock_add_edict
ccblock_invoke ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_return
_TEXT	SEGMENT
block$ = 48
value$ = 56
ccblock_return PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 242
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 243
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 13
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_06LNOFJDNM@return@
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 243
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 229
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 244
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 243
	jmp	ccblock_add_edict
ccblock_return ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_enter
_TEXT	SEGMENT
block$ = 48
blc$ = 56
ccblock_enter PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 236
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 237
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 11
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05IHEOCMON@enter@
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 237
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 171
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 238
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 237
	jmp	ccblock_add_edict
ccblock_enter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_arith
_TEXT	SEGMENT
block$ = 48
opr$ = 56
lhs$ = 64
rhs$ = 72
ccblock_arith PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 230
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 230
	mov	rdi, r8
	mov	ebx, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 231
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 5
	mov	DWORD PTR [rax+20], ecx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05LGHFKIKG@arith@
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 231
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 161
	mov	DWORD PTR [rax+16], ebx
; Line 162
	mov	QWORD PTR [rax+24], rdi
; Line 163
	mov	QWORD PTR [rax+32], rbp
; File W:\cpp\void\ktt-c\ccemit.h
; Line 232
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 231
	jmp	ccblock_add_edict
ccblock_arith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_address
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccblock_address PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 224
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rdi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 224
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 225
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 2
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_07LHEPONKL@address@
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 225
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 237
	mov	QWORD PTR [rax+16], rbx
; Line 238
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 226
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 225
	jmp	ccblock_add_edict
ccblock_address ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_fetch
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccblock_fetch PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 218
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rdi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 218
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 219
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 4
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05MCKKOJDL@fetch@
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 219
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 152
	mov	QWORD PTR [rax+16], rbx
; Line 153
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 220
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 219
	jmp	ccblock_add_edict
ccblock_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_store
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccblock_store PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 212
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rdi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 212
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 102
	mov	QWORD PTR [rax], 3
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05ODGDKDLF@store@
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 213
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 143
	mov	QWORD PTR [rax+16], rbx
; Line 144
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 214
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 213
	jmp	ccblock_add_edict
ccblock_store ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccprocd_local
_TEXT	SEGMENT
func$ = 48
tree$ = 56
ccprocd_local PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 202
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 205
	mov	r9, rdx
	lea	rbx, QWORD PTR [rcx+16]
	mov	edx, 8
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblget
; Line 206
	mov	edx, DWORD PTR _tls_index
	mov	rcx, QWORD PTR gs:88
	shl	rax, 3
	add	rax, QWORD PTR [rbx]
	mov	r8d, OFFSET FLAT:ccerr
	mov	rcx, QWORD PTR [rcx+rdx*8]
	cmp	DWORD PTR [r8+rcx], 0
	jne	SHORT $LN2@ccprocd_lo
	mov	rax, QWORD PTR [rax]
; Line 208
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@ccprocd_lo:
; Line 207
	xor	eax, eax
; Line 208
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccprocd_local ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_add_edict
_TEXT	SEGMENT
block$ = 80
edict$ = 88
ccblock_add_edict PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 194
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r13, rcx
	mov	r12, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 64					; 00000040H
	call	malloc
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	ecx, DWORD PTR _tls_index
; Line 241
	xor	edx, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	rbx, rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r15d, OFFSET FLAT:ccalloctr
; Line 240
	mov	rax, QWORD PTR [r13+8]
; Line 191
	mov	edi, edx
; Line 241
	test	rax, rax
; Line 192
	mov	ebp, edx
; Line 241
	lea	rsi, QWORD PTR [rax-40]
; Line 196
	mov	rax, QWORD PTR gs:88
; Line 241
	cmove	rsi, rdx
; Line 196
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	r15, QWORD PTR [r15+rax]
; Line 198
	test	rsi, rsi
	je	SHORT $LN17@ccblock_ad
; Line 199
	mov	rdi, QWORD PTR [rsi+24]
; Line 200
	mov	rbp, QWORD PTR [rsi+32]
; Line 202
	mov	r15, QWORD PTR [rsi+8]
$LN17@ccblock_ad:
; Line 209
	lea	r14, QWORD PTR [rbp+8]
	mov	rax, rsi
	cmp	rdi, r14
	jae	SHORT $LN20@ccblock_ad
; Line 213
	lea	rax, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rsi
	cmp	rax, r14
	mov	rdi, r14
	cmovae	rdi, rax
	lea	rcx, QWORD PTR [rdi+40]
	call	r15
; Line 220
	test	rsi, rsi
	jne	SHORT $LN22@ccblock_ad
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	xor	edx, edx
; Line 224
	mov	QWORD PTR [rax+8], r15
	mov	QWORD PTR [rax+16], rdx
	jmp	SHORT $LN20@ccblock_ad
$LN22@ccblock_ad:
; Line 220
	xor	edx, edx
$LN20@ccblock_ad:
; Line 228
	mov	QWORD PTR [rax+24], rdi
; Line 242
	lea	rcx, QWORD PTR [rax+40]
; Line 229
	mov	QWORD PTR [rax+32], r14
; File W:\cpp\void\ktt-c\ccemit.h
; Line 197
	mov	rax, rbx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 242
	mov	QWORD PTR [r13+8], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 187
	mov	QWORD PTR [rbx+4], rdx
	mov	QWORD PTR [rbx+12], rdx
	mov	QWORD PTR [rbx+20], rdx
	mov	QWORD PTR [rbx+28], rdx
	mov	QWORD PTR [rbx+36], rdx
	mov	DWORD PTR [rbx+44], edx
	mov	QWORD PTR [rbx+56], rdx
; Line 198
	mov	rsi, QWORD PTR [rsp+96]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rbp, 3
; File W:\cpp\void\ktt-c\ccemit.h
; Line 188
	mov	QWORD PTR [rcx+rbp*8], rbx
; Line 198
	mov	rbp, QWORD PTR [rsp+88]
	mov	DWORD PTR [rbx], 5
	mov	QWORD PTR [rbx+48], r12
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
ccblock_add_edict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_add
_TEXT	SEGMENT
block$ = 80
ccblock_add PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 185
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r13, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 64					; 00000040H
	call	malloc
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rdx, QWORD PTR [r13+8]
; Line 241
	xor	r12d, r12d
; Line 196
	mov	ecx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	rsi, rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; Line 241
	test	rdx, rdx
; Line 196
	mov	r15d, OFFSET FLAT:ccalloctr
	mov	ebx, r12d
; Line 241
	lea	rdi, QWORD PTR [rdx-40]
; Line 192
	mov	ebp, r12d
; Line 241
	cmove	rdi, r12
; Line 196
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	r15, QWORD PTR [r15+rax]
; Line 198
	test	rdi, rdi
	je	SHORT $LN15@ccblock_ad
; Line 199
	mov	rbx, QWORD PTR [rdi+24]
; Line 200
	mov	rbp, QWORD PTR [rdi+32]
; Line 202
	mov	r15, QWORD PTR [rdi+8]
$LN15@ccblock_ad:
; Line 209
	lea	r14, QWORD PTR [rbp+8]
	mov	rax, rdi
	cmp	rbx, r14
	jae	SHORT $LN18@ccblock_ad
; Line 213
	lea	rax, QWORD PTR [rbx+rbx]
; Line 217
	mov	rdx, rdi
	cmp	rax, r14
	mov	rbx, r14
	cmovae	rbx, rax
	lea	rcx, QWORD PTR [rbx+40]
	call	r15
; Line 220
	test	rdi, rdi
	jne	SHORT $LN18@ccblock_ad
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], r12
; Line 224
	mov	QWORD PTR [rax+8], r15
$LN18@ccblock_ad:
; Line 228
	mov	QWORD PTR [rax+24], rbx
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\ccemit.h
; Line 190
	mov	rbx, QWORD PTR [rsp+80]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], r14
; Line 242
	add	rax, 40					; 00000028H
	mov	QWORD PTR [r13+8], rax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 187
	movups	XMMWORD PTR [rsi], xmm0
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rbp, 3
; File W:\cpp\void\ktt-c\ccemit.h
; Line 187
	movups	XMMWORD PTR [rsi+16], xmm0
	movups	XMMWORD PTR [rsi+32], xmm0
	movups	XMMWORD PTR [rsi+48], xmm0
; Line 188
	mov	QWORD PTR [rax+rbp*8], rsi
; Line 189
	mov	rax, rsi
; Line 190
	mov	rsi, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
ccblock_add ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_label
_TEXT	SEGMENT
__$ReturnAddress$ = 8
block$ = 16
label$ = 24
ccblock_label PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 179
	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx], r8
	mov	QWORD PTR [rcx+8], rdx
	test	rax, rax
	je	SHORT $LN3@ccblock_la
	mov	rax, QWORD PTR [rax-8]
	shr	rax, 3
	mov	DWORD PTR [rcx+16], eax
; Line 180
	mov	rax, rcx
; Line 181
	ret	0
$LN3@ccblock_la:
; Line 179
	shr	rax, 3
	mov	DWORD PTR [rcx+16], eax
; Line 180
	mov	rax, rcx
; Line 181
	ret	0
ccblock_label ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccvalue_retarget
_TEXT	SEGMENT
$T1 = 0
value$ = 48
p$ = 56
ccvalue_retarget PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 167
	sub	rsp, 40					; 00000028H
; Line 171
	mov	rcx, QWORD PTR [rcx+48]
	movsd	xmm0, QWORD PTR [rdx+16]
; File W:\cpp\void\ktt-c\ccedict.h
; Line 135
	movq	xmm1, QWORD PTR [rdx+8]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 171
	movsd	QWORD PTR $T1[rsp+16], xmm0
; File W:\cpp\void\ktt-c\ccedict.h
; Line 136
	mov	eax, DWORD PTR $T1[rsp+16]
	movq	QWORD PTR [rcx+16], xmm1
	mov	DWORD PTR [rcx+24], eax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 172
	add	rsp, 40					; 00000028H
	ret	0
ccvalue_retarget ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_global_procd
_TEXT	SEGMENT
tv879 = 80
emit$ = 80
tree$ = 88
label$ = 96
ccemit_global_procd PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 146
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	rsi, rdx
; Line 135
	mov	r9, rdx
	mov	edx, 8
; Line 146
	mov	rdi, r8
	mov	rbx, rcx
; Line 135
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	rbx, QWORD PTR [rbx]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 64					; 00000040H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 135
	shl	rax, 3
	add	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.h
; Line 79
	xor	ebp, ebp
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	r13, rax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 79
	mov	DWORD PTR [rax+4], ebp
	mov	QWORD PTR [rax+16], rbp
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	lea	ecx, QWORD PTR [rbp+56]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 79
	mov	QWORD PTR [rax+24], rbp
	mov	QWORD PTR [rax+32], rbp
	mov	QWORD PTR [rax+40], rbp
	mov	QWORD PTR [rax+48], rbp
	mov	QWORD PTR [rax+56], rbp
; Line 81
	mov	QWORD PTR [rax+8], rdi
; Line 139
	mov	QWORD PTR [rbx], rax
; Line 148
	mov	DWORD PTR [rax], 4
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	lea	ecx, QWORD PTR [rbp+16]
	mov	r14, rax
; File W:\cpp\void\ktt-c\ccemit.h
; Line 113
	mov	QWORD PTR [rax+16], rbp
	mov	QWORD PTR [rax+32], rbp
	mov	QWORD PTR [rax+40], rbp
	mov	QWORD PTR [rax+48], rbp
; Line 115
	mov	QWORD PTR [rax], rdi
; Line 152
	mov	QWORD PTR [rax+8], rsi
; Line 153
	mov	QWORD PTR [rax+24], rbp
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	r12, rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	edx, OFFSET FLAT:ccalloctr
	mov	ebx, ebp
; File W:\cpp\void\ktt-c\ccemit.h
; Line 102
	mov	QWORD PTR [rax+8], rbp
; Line 104
	lea	rax, OFFSET FLAT:??_C@_06PHJKMIOD@$decls@
	mov	QWORD PTR [r12], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccemit.h
; Line 156
	mov	QWORD PTR [r14+32], r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rcx, QWORD PTR [r14+24]
; Line 241
	test	rcx, rcx
	lea	rdi, QWORD PTR [rcx-40]
; Line 196
	mov	ecx, DWORD PTR _tls_index
; Line 241
	cmove	rdi, rbp
; Line 196
	mov	rax, QWORD PTR [rax+rcx*8]
	add	rax, rdx
	mov	QWORD PTR tv879[rsp], rax
	mov	r15, QWORD PTR [rax]
; Line 198
	test	rdi, rdi
	je	SHORT $LN37@ccemit_glo
; Line 199
	mov	rbx, QWORD PTR [rdi+24]
; Line 200
	mov	rbp, QWORD PTR [rdi+32]
; Line 202
	mov	r15, QWORD PTR [rdi+8]
$LN37@ccemit_glo:
; Line 209
	lea	rsi, QWORD PTR [rbp+8]
	mov	rax, rdi
	cmp	rbx, rsi
	jae	SHORT $LN40@ccemit_glo
; Line 213
	lea	rax, QWORD PTR [rbx+rbx]
; Line 217
	mov	rdx, rdi
	cmp	rax, rsi
	mov	rbx, rsi
	cmovae	rbx, rax
	lea	rcx, QWORD PTR [rbx+40]
	call	r15
; Line 220
	test	rdi, rdi
	jne	SHORT $LN40@ccemit_glo
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	xor	ecx, ecx
; Line 224
	mov	QWORD PTR [rax+8], r15
	mov	QWORD PTR [rax+16], rcx
$LN40@ccemit_glo:
; Line 228
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 16
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], rsi
; Line 242
	add	rax, 40					; 00000028H
	mov	QWORD PTR [r14+24], rax
; Line 243
	shr	rbp, 3
; File W:\cpp\void\ktt-c\ccemit.h
; Line 156
	mov	QWORD PTR [rax+rbp*8], r12
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r15, QWORD PTR tv879[rsp]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 102
	xor	edx, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	r12, rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 191
	mov	ebx, edx
; Line 192
	mov	esi, edx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 102
	mov	QWORD PTR [rax+8], rdx
; Line 104
	lea	rax, OFFSET FLAT:??_C@_06JABCEPLP@$enter@
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	r15, QWORD PTR [r15]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 104
	mov	QWORD PTR [r12], rax
; Line 157
	mov	QWORD PTR [r14+40], r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rcx, QWORD PTR [r14+24]
; Line 241
	test	rcx, rcx
	lea	rdi, QWORD PTR [rcx-40]
	cmove	rdi, rdx
; Line 198
	test	rdi, rdi
	je	SHORT $LN56@ccemit_glo
; Line 199
	mov	rbx, QWORD PTR [rdi+24]
; Line 200
	mov	rsi, QWORD PTR [rdi+32]
; Line 202
	mov	r15, QWORD PTR [rdi+8]
$LN56@ccemit_glo:
; Line 209
	lea	rbp, QWORD PTR [rsi+8]
	mov	rax, rdi
	cmp	rbx, rbp
	jae	SHORT $LN59@ccemit_glo
; Line 213
	lea	rax, QWORD PTR [rbx+rbx]
; Line 217
	mov	rdx, rdi
	cmp	rax, rbp
	mov	rbx, rbp
	cmovae	rbx, rax
	lea	rcx, QWORD PTR [rbx+40]
	call	r15
; Line 220
	test	rdi, rdi
	jne	SHORT $LN59@ccemit_glo
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	xor	ecx, ecx
; Line 224
	mov	QWORD PTR [rax+8], r15
	mov	QWORD PTR [rax+16], rcx
$LN59@ccemit_glo:
; Line 228
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 16
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], rbp
; Line 242
	add	rax, 40					; 00000028H
	mov	QWORD PTR [r14+24], rax
; Line 243
	shr	rsi, 3
; File W:\cpp\void\ktt-c\ccemit.h
; Line 157
	mov	QWORD PTR [rax+rsi*8], r12
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.h
; Line 102
	xor	edx, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	r12, rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 191
	mov	ebx, edx
; Line 192
	mov	esi, edx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 102
	mov	QWORD PTR [rax+8], rdx
; Line 104
	lea	rax, OFFSET FLAT:??_C@_06LMOJBBHE@$leave@
	mov	QWORD PTR [r12], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 196
	mov	rax, QWORD PTR tv879[rsp]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 158
	mov	QWORD PTR [r14+48], r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 240
	mov	rcx, QWORD PTR [r14+24]
; Line 241
	test	rcx, rcx
; Line 196
	mov	r15, QWORD PTR [rax]
; Line 241
	lea	rdi, QWORD PTR [rcx-40]
	cmove	rdi, rdx
; Line 198
	test	rdi, rdi
	je	SHORT $LN75@ccemit_glo
; Line 199
	mov	rbx, QWORD PTR [rdi+24]
; Line 200
	mov	rsi, QWORD PTR [rdi+32]
; Line 202
	mov	r15, QWORD PTR [rdi+8]
$LN75@ccemit_glo:
; Line 209
	lea	rbp, QWORD PTR [rsi+8]
	mov	rax, rdi
	cmp	rbx, rbp
	jae	SHORT $LN78@ccemit_glo
; Line 213
	lea	rax, QWORD PTR [rbx+rbx]
; Line 217
	mov	rdx, rdi
	cmp	rax, rbp
	mov	rbx, rbp
	cmovae	rbx, rax
	lea	rcx, QWORD PTR [rbx+40]
	call	r15
; Line 220
	test	rdi, rdi
	jne	SHORT $LN78@ccemit_glo
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	xor	ecx, ecx
; Line 224
	mov	QWORD PTR [rax+8], r15
	mov	QWORD PTR [rax+16], rcx
$LN78@ccemit_glo:
; Line 228
	mov	QWORD PTR [rax+24], rbx
; Line 242
	lea	rcx, QWORD PTR [rax+40]
; File W:\cpp\void\ktt-c\ccemit.h
; Line 163
	mov	rbx, QWORD PTR [rsp+88]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 229
	mov	QWORD PTR [rax+32], rbp
; File W:\cpp\void\ktt-c\ccemit.h
; Line 162
	mov	rax, r14
; Line 163
	mov	rbp, QWORD PTR [rsp+96]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 243
	shr	rsi, 3
	mov	QWORD PTR [r14+24], rcx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 158
	mov	QWORD PTR [rcx+rsi*8], r12
; Line 163
	mov	rsi, QWORD PTR [rsp+104]
	mov	QWORD PTR [r13+48], r14
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
ccemit_global_procd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_include_global
_TEXT	SEGMENT
emit$ = 48
tree$ = 56
label$ = 64
ccemit_include_global PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 134
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 135
	mov	r9, rdx
	mov	rdi, r8
	mov	edx, 8
	mov	rbx, rcx
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	rbx, QWORD PTR [rbx]
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 64					; 00000040H
; File W:\cpp\void\ktt-c\ccemit.h
; Line 135
	shl	rax, 3
	add	rbx, rax
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.h
; Line 79
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+16], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
	mov	QWORD PTR [rax+40], rcx
	mov	QWORD PTR [rax+48], rcx
	mov	QWORD PTR [rax+56], rcx
; Line 81
	mov	QWORD PTR [rax+8], rdi
; Line 139
	mov	QWORD PTR [rbx], rax
; Line 142
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccemit_include_global ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_global
_TEXT	SEGMENT
emit$ = 48
tree$ = 56
ccemit_global PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 124
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 125
	mov	r9, rdx
	mov	rbx, rcx
	mov	edx, 8
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblget
	mov	rcx, QWORD PTR [rbx]
; Line 129
	mov	rax, QWORD PTR [rcx+rax*8]
; Line 130
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccemit_global ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccprocd
_TEXT	SEGMENT
label$ = 48
ccprocd	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 111
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 56					; 00000038H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.h
; Line 113
	xor	ecx, ecx
	mov	QWORD PTR [rax+8], rcx
	mov	QWORD PTR [rax+16], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
	mov	QWORD PTR [rax+40], rcx
	mov	QWORD PTR [rax+48], rcx
; Line 115
	mov	QWORD PTR [rax], rbx
; Line 117
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccprocd	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock
_TEXT	SEGMENT
label$ = 48
ccblock	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 100
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 16
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.h
; Line 102
	mov	QWORD PTR [rax+8], 0
; Line 104
	mov	QWORD PTR [rax], rbx
; Line 106
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccblock	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctype
_TEXT	SEGMENT
kind$ = 48
label$ = 56
cctype	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 88
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.h
; Line 90
	xor	ecx, ecx
	mov	QWORD PTR [rax+12], rcx
	mov	QWORD PTR [rax+20], rcx
	mov	DWORD PTR [rax+28], ecx
; Line 92
	mov	DWORD PTR [rax+8], ebx
; Line 95
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctype	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccvalue
_TEXT	SEGMENT
label$ = 48
ccvalue	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 77
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 64					; 00000040H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.h
; Line 79
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+16], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
	mov	QWORD PTR [rax+40], rcx
	mov	QWORD PTR [rax+48], rcx
	mov	QWORD PTR [rax+56], rcx
; Line 81
	mov	QWORD PTR [rax+8], rbx
; Line 83
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccvalue	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_address
_TEXT	SEGMENT
lval$ = 48
rval$ = 56
ccedict_address PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 235
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 2
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_07LHEPONKL@address@
; Line 237
	mov	QWORD PTR [rax+16], rbx
; Line 240
	mov	rbx, QWORD PTR [rsp+48]
; Line 103
	mov	QWORD PTR [rax+8], rcx
; Line 238
	mov	QWORD PTR [rax+24], rdi
; Line 240
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_address ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_return
_TEXT	SEGMENT
rval$ = 48
ccedict_return PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 227
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 13
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_06LNOFJDNM@return@
	mov	QWORD PTR [rax+8], rcx
; Line 229
	mov	QWORD PTR [rax+16], rbx
; Line 231
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccedict_return ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_call
_TEXT	SEGMENT
lval$ = 48
rval$ = 56
ccedict_call PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 216
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 12
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_06HJMAOIE@invoke@
; Line 220
	mov	QWORD PTR [rax+16], rbx
; Line 223
	mov	rbx, QWORD PTR [rsp+48]
; Line 103
	mov	QWORD PTR [rax+8], rcx
; Line 221
	mov	QWORD PTR [rax+24], rdi
; Line 223
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_call ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_fjump
_TEXT	SEGMENT
point$ = 48
cnd$ = 56
ccedict_fjump PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 196
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 8
	mov	DWORD PTR [rax+28], ecx
; Line 103
	mov	r8, QWORD PTR [rbx]
; Line 199
	mov	ecx, DWORD PTR [rbx+16]
; Line 103
	mov	QWORD PTR [rax+8], r8
; Line 198
	mov	r8, QWORD PTR [rbx+8]
; Line 202
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+16], r8
	mov	DWORD PTR [rax+24], ecx
	mov	QWORD PTR [rax+32], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_fjump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_jump
_TEXT	SEGMENT
point$ = 48
ccedict_jump PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 177
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 6
	mov	QWORD PTR [rax+28], rcx
	mov	DWORD PTR [rax+36], ecx
; Line 103
	mov	rdx, QWORD PTR [rbx]
; Line 180
	mov	ecx, DWORD PTR [rbx+16]
; Line 103
	mov	QWORD PTR [rax+8], rdx
; Line 179
	mov	rdx, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax+16], rdx
; Line 180
	mov	DWORD PTR [rax+24], ecx
; Line 182
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccedict_jump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_enter
_TEXT	SEGMENT
blc$ = 48
ccedict_enter PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 169
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 11
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05IHEOCMON@enter@
	mov	QWORD PTR [rax+8], rcx
; Line 171
	mov	QWORD PTR [rax+16], rbx
; Line 173
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccedict_enter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_arith
_TEXT	SEGMENT
opr$ = 48
lhs$ = 56
rhs$ = 64
ccedict_arith PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 159
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	rsi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccedict.h
; Line 159
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 5
	mov	DWORD PTR [rax+20], ecx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05LGHFKIKG@arith@
; Line 161
	mov	DWORD PTR [rax+16], ebx
; Line 165
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+32], rsi
	mov	rsi, QWORD PTR [rsp+56]
; Line 103
	mov	QWORD PTR [rax+8], rcx
; Line 162
	mov	QWORD PTR [rax+24], rdi
; Line 165
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_arith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_fetch
_TEXT	SEGMENT
lval$ = 48
rval$ = 56
ccedict_fetch PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 150
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 4
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05MCKKOJDL@fetch@
; Line 152
	mov	QWORD PTR [rax+16], rbx
; Line 155
	mov	rbx, QWORD PTR [rsp+48]
; Line 103
	mov	QWORD PTR [rax+8], rcx
; Line 153
	mov	QWORD PTR [rax+24], rdi
; Line 155
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_store
_TEXT	SEGMENT
lval$ = 48
rval$ = 56
ccedict_store PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 141
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 3
	mov	QWORD PTR [rax+32], rcx
; Line 103
	lea	rcx, OFFSET FLAT:??_C@_05ODGDKDLF@store@
; Line 143
	mov	QWORD PTR [rax+16], rbx
; Line 146
	mov	rbx, QWORD PTR [rsp+48]
; Line 103
	mov	QWORD PTR [rax+8], rcx
; Line 144
	mov	QWORD PTR [rax+24], rdi
; Line 146
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_store ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_retarget
_TEXT	SEGMENT
e$ = 8
p$ = 16
ccedict_retarget PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 135
	mov	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR [rcx+16], rax
; Line 136
	mov	eax, DWORD PTR [rdx+16]
	mov	DWORD PTR [rcx+24], eax
; Line 137
	ret	0
ccedict_retarget ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_param
_TEXT	SEGMENT
type$ = 48
label$ = 56
ccedict_param PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 122
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], 1
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	mov	QWORD PTR [rax+8], rbx
; Line 130
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+16], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_local
_TEXT	SEGMENT
type$ = 48
label$ = 56
ccedict_local PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 110
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
; Line 102
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 103
	mov	QWORD PTR [rax+8], rbx
; Line 118
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+16], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_local ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict
_TEXT	SEGMENT
kind$ = 48
label$ = 56
ccedict	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 98
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 100
	xor	ecx, ecx
	mov	DWORD PTR [rax+4], ecx
	mov	QWORD PTR [rax+16], rcx
	mov	QWORD PTR [rax+24], rcx
	mov	QWORD PTR [rax+32], rcx
; Line 102
	mov	DWORD PTR [rax], ebx
; Line 105
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+8], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_translation_unit
_TEXT	SEGMENT
tree$ = 48
cctree_solve_translation_unit PROC			; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 286
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 289
	mov	rsi, QWORD PTR [rcx+32]
	mov	rbp, rcx
	npad	5
$LL4@cctree_sol:
	mov	rdx, QWORD PTR [rbp+32]
	test	rdx, rdx
	je	SHORT $LN6@cctree_sol
	mov	rax, QWORD PTR [rdx-8]
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	xor	eax, eax
$LN7@cctree_sol:
	and	rax, -8
	add	rax, rdx
	cmp	rsi, rax
	jae	SHORT $LN3@cctree_sol
	mov	rdi, QWORD PTR [rsi]
; Line 281
	mov	rbx, QWORD PTR [rdi+32]
$LL11@cctree_sol:
	mov	rcx, QWORD PTR [rdi+32]
	test	rcx, rcx
	je	SHORT $LN13@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN14@cctree_sol
$LN13@cctree_sol:
	xor	eax, eax
$LN14@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN2@cctree_sol
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_decl_name
	add	rbx, 8
	jmp	SHORT $LL11@cctree_sol
$LN2@cctree_sol:
; Line 289
	add	rsi, 8
	jmp	SHORT $LL4@cctree_sol
$LN3@cctree_sol:
; Line 290
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_solve_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_decl_name
_TEXT	SEGMENT
tree$ = 48
cctree_solve_decl_name PROC				; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 224
	push	rsi
	sub	rsp, 32					; 00000020H
; Line 233
	mov	rax, QWORD PTR [rcx+48]
	mov	rsi, rcx
	cmp	DWORD PTR [rax], 3
	jne	$LN10@cctree_sol
; Line 235
	test	BYTE PTR [rcx+16], 16
	mov	rax, QWORD PTR [rcx+24]
	je	$LN12@cctree_sol
; Line 22
	mov	r8, -1
	npad	5
$LL71@cctree_sol:
	inc	r8
	cmp	BYTE PTR [rax+r8], 0
	jne	SHORT $LL71@cctree_sol
	mov	r9, rax
	lea	rcx, OFFSET FLAT:func_decls
	mov	edx, 8
	call	ccdlb_tblput
	mov	rcx, QWORD PTR func_decls
; Line 23
	mov	edx, DWORD PTR _tls_index
	lea	r8, QWORD PTR [rcx+rax*8]
	mov	rax, QWORD PTR gs:88
	mov	ecx, OFFSET FLAT:ccerr
	mov	rax, QWORD PTR [rax+rdx*8]
	cmp	DWORD PTR [rcx+rax], 0
	jne	$LN14@cctree_sol
	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [r8], rsi
; Line 240
	mov	rax, QWORD PTR [rsi+48]
; Line 23
	mov	QWORD PTR [rsp+56], rdi
	mov	QWORD PTR [rsp+64], r14
; Line 240
	mov	rbx, QWORD PTR [rax+32]
	npad	11
$LL4@cctree_sol:
	mov	rax, QWORD PTR [rsi+48]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN24@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN25@cctree_sol
$LN24@cctree_sol:
	xor	eax, eax
$LN25@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN3@cctree_sol
; Line 241
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_decl_name
	add	rbx, 8
	jmp	SHORT $LL4@cctree_sol
$LN3@cctree_sol:
; Line 243
	mov	rax, QWORD PTR [rsi+88]
	mov	r14, QWORD PTR [rax+32]
	npad	9
$LL7@cctree_sol:
	mov	rax, QWORD PTR [rsi+88]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN26@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN27@cctree_sol
$LN26@cctree_sol:
	xor	eax, eax
$LN27@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	r14, rax
	jae	$LN74@cctree_sol
; Line 244
	mov	rbx, QWORD PTR [r14]
; Line 182
	mov	eax, DWORD PTR [rbx]
	cmp	eax, 10
	jne	SHORT $LN32@cctree_sol
; Line 185
	mov	rdi, QWORD PTR [rbx+32]
$LL31@cctree_sol:
	mov	rcx, QWORD PTR [rbx+32]
	test	rcx, rcx
	je	SHORT $LN49@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN50@cctree_sol
$LN49@cctree_sol:
	xor	eax, eax
$LN50@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rdi, rax
	jae	$LN5@cctree_sol
; Line 186
	mov	rcx, QWORD PTR [rdi]
	call	cctree_solve_statement
	add	rdi, 8
	jmp	SHORT $LL31@cctree_sol
$LN32@cctree_sol:
; Line 188
	cmp	eax, 16
	jne	SHORT $LN34@cctree_sol
; Line 190
	mov	rcx, rbx
	call	cctree_solve_decl
; Line 243
	add	r14, 8
	jmp	SHORT $LL7@cctree_sol
$LN34@cctree_sol:
; Line 192
	cmp	eax, 21
	jne	SHORT $LN36@cctree_sol
; Line 194
	mov	rcx, rbx
	call	cctree_solve_call
; Line 243
	add	r14, 8
	jmp	$LL7@cctree_sol
$LN36@cctree_sol:
; Line 197
	cmp	eax, 12
	jne	SHORT $LN38@cctree_sol
; Line 200
	mov	rcx, QWORD PTR [rbx+80]
	call	cctree_solve_rvalue
; Line 243
	add	r14, 8
	jmp	$LL7@cctree_sol
$LN38@cctree_sol:
; Line 202
	cmp	eax, 18
	jne	SHORT $LN40@cctree_sol
; Line 204
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	ecx, DWORD PTR [rbx+40]
	call	cctree_solve_binary
; Line 243
	add	r14, 8
	jmp	$LL7@cctree_sol
$LN40@cctree_sol:
; Line 206
	cmp	eax, 14
	jne	SHORT $LN42@cctree_sol
; Line 208
	mov	rcx, QWORD PTR [rbx+64]
	call	cctree_solve_rvalue
; Line 209
	mov	rcx, QWORD PTR [rbx+72]
	call	cctree_solve_statement
; Line 243
	add	r14, 8
	jmp	$LL7@cctree_sol
$LN42@cctree_sol:
; Line 211
	cmp	eax, 17
	jne	SHORT $LN5@cctree_sol
; Line 213
	mov	rcx, QWORD PTR [rbx+64]
	call	cctree_solve_rvalue
; Line 214
	mov	rcx, QWORD PTR [rbx+72]
	test	rcx, rcx
	je	SHORT $LN46@cctree_sol
	call	cctree_solve_block
$LN46@cctree_sol:
; Line 215
	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN5@cctree_sol
	call	cctree_solve_block
$LN5@cctree_sol:
; Line 243
	add	r14, 8
	jmp	$LL7@cctree_sol
$LN14@cctree_sol:
; Line 246
	mov	r8, QWORD PTR [rsi+24]
	lea	rdx, OFFSET FLAT:??_C@_0BH@MBJGJGMK@?$CFs?3?5already?5has?5a?5body@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
; Line 276
	add	rsp, 32					; 00000020H
	pop	rsi
; Line 246
	jmp	cctrace_
$LN12@cctree_sol:
; Line 248
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_0CM@GIHPCBBO@?8?$CFs?8?3?5local?5function?5defintions@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
; Line 276
	add	rsp, 32					; 00000020H
	pop	rsi
; Line 248
	jmp	cctrace_
$LN10@cctree_sol:
; Line 251
	mov	r9, QWORD PTR [rcx+24]
	mov	r8, -1
$LL70@cctree_sol:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL70@cctree_sol
	mov	edx, 8
	lea	rcx, OFFSET FLAT:vari_decls
	call	ccdlb_tblput
	mov	rcx, QWORD PTR vari_decls
; Line 252
	mov	edx, DWORD PTR _tls_index
	lea	r8, QWORD PTR [rcx+rax*8]
	mov	rax, QWORD PTR gs:88
	mov	ecx, OFFSET FLAT:ccerr
	mov	rax, QWORD PTR [rax+rdx*8]
	cmp	DWORD PTR [rcx+rax], 0
	jne	SHORT $LN16@cctree_sol
; Line 253
	mov	QWORD PTR [r8], rsi
	jmp	SHORT $LN17@cctree_sol
$LN16@cctree_sol:
; Line 255
	mov	r8, QWORD PTR [rsi+24]
	lea	rdx, OFFSET FLAT:??_C@_0BM@BIKCLCJM@?8?$CFs?8?3?5variable?5redefinition@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN17@cctree_sol:
; Line 257
	mov	rcx, QWORD PTR [rsi+64]
	test	rcx, rcx
	je	SHORT $LN18@cctree_sol
; Line 259
	call	cctree_solve_rvalue
$LN18@cctree_sol:
; Line 262
	mov	rcx, QWORD PTR [rsi+48]
	cmp	DWORD PTR [rcx], 4
	jne	SHORT $LN19@cctree_sol
; Line 265
	mov	rcx, QWORD PTR [rcx+80]
; Line 276
	add	rsp, 32					; 00000020H
	pop	rsi
; Line 265
	jmp	cctree_solve_rvalue
$LN74@cctree_sol:
	mov	rdi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
	mov	r14, QWORD PTR [rsp+64]
$LN19@cctree_sol:
; Line 276
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
cctree_solve_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_block
_TEXT	SEGMENT
block$ = 48
cctree_solve_block PROC					; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 174
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 176
	mov	rbx, QWORD PTR [rcx+32]
	mov	rdi, rcx
$LL4@cctree_sol:
	mov	rdx, QWORD PTR [rdi+32]
	test	rdx, rdx
	je	SHORT $LN6@cctree_sol
	mov	rax, QWORD PTR [rdx-8]
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	xor	eax, eax
$LN7@cctree_sol:
	and	rax, -8
	add	rax, rdx
	cmp	rbx, rax
	jae	SHORT $LN3@cctree_sol
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_statement
	add	rbx, 8
	jmp	SHORT $LL4@cctree_sol
$LN3@cctree_sol:
; Line 177
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_solve_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_index
_TEXT	SEGMENT
tree$ = 48
cctree_solve_index PROC					; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 97
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 102
	mov	rbx, QWORD PTR [rcx+72]
	mov	rdi, rcx
; Line 103
	test	rbx, rbx
	je	SHORT $LN41@cctree_sol
$LL2@cctree_sol:
	cmp	DWORD PTR [rbx], 6
	je	SHORT $LN41@cctree_sol
; Line 104
	mov	rbx, QWORD PTR [rbx+72]
	test	rbx, rbx
	jne	SHORT $LL2@cctree_sol
$LN41@cctree_sol:
; Line 109
	mov	rdx, QWORD PTR [rbx+24]
	mov	rcx, rbx
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN4@cctree_sol
; Line 110
	mov	r8, QWORD PTR [rbx+24]
	lea	rdx, OFFSET FLAT:??_C@_0BJ@OPCFLBFB@?$CFs?3?5identifier?5not?5found@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN4@cctree_sol:
; Line 112
	mov	rcx, QWORD PTR [rdi+80]
; Line 113
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 112
	jmp	cctree_solve_rvalue
cctree_solve_index ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_call
_TEXT	SEGMENT
tree$ = 48
cctree_solve_call PROC					; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 84
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 88
	mov	rdx, QWORD PTR [rcx+24]
	mov	rdi, rcx
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN5@cctree_sol
; Line 89
	mov	r8, QWORD PTR [rdi+24]
	lea	rdx, OFFSET FLAT:??_C@_0BJ@OPCFLBFB@?$CFs?3?5identifier?5not?5found@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN5@cctree_sol:
; Line 92
	mov	rbx, QWORD PTR [rdi+80]
	mov	rsi, -2912643801112034465		; d79435e50d79435fH
$LL4@cctree_sol:
	mov	rcx, QWORD PTR [rdi+80]
	test	rcx, rcx
	je	SHORT $LN7@cctree_sol
	mov	rdx, QWORD PTR [rcx-8]
	jmp	SHORT $LN8@cctree_sol
$LN7@cctree_sol:
	xor	edx, edx
$LN8@cctree_sol:
	mov	rax, rsi
	mul	rdx
	shr	rdx, 7
	imul	rax, rdx, 152				; 00000098H
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN3@cctree_sol
	mov	rcx, rbx
	call	cctree_solve_rvalue
	add	rbx, 152				; 00000098H
	jmp	SHORT $LL4@cctree_sol
$LN3@cctree_sol:
; Line 93
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_solve_call ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_lvalue
_TEXT	SEGMENT
tree$ = 48
cctree_solve_lvalue PROC				; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 117
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 118
	mov	eax, DWORD PTR [rcx]
	mov	rbx, rcx
	cmp	eax, 6
	je	SHORT $LN4@cctree_sol
	cmp	eax, 22
	jne	SHORT $LN5@cctree_sol
; Line 131
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 127
	jmp	cctree_solve_index
$LN4@cctree_sol:
; Line 122
	mov	rdx, QWORD PTR [rcx+24]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN5@cctree_sol
; Line 123
	mov	r8, QWORD PTR [rbx+24]
	lea	rdx, OFFSET FLAT:??_C@_0CD@IALNCJCC@?8?$CFs?8?3?5undeclared?5lvalue?5identif@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
; Line 131
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 123
	jmp	cctrace_
$LN5@cctree_sol:
; Line 131
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_solve_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_rvalue
_TEXT	SEGMENT
tree$ = 48
cctree_solve_rvalue PROC				; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 135
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 136
	mov	edx, DWORD PTR [rcx]
	mov	rbx, rcx
	sub	edx, 6
	je	SHORT $LN5@cctree_sol
	sub	edx, 12
	je	SHORT $LN7@cctree_sol
	sub	edx, 3
	je	SHORT $LN8@cctree_sol
	cmp	edx, 1
	jne	SHORT $LN6@cctree_sol
; Line 159
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 155
	jmp	cctree_solve_index
$LN8@cctree_sol:
; Line 159
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 151
	jmp	cctree_solve_call
$LN7@cctree_sol:
; Line 147
	mov	r8, QWORD PTR [rcx+80]
	mov	rdx, QWORD PTR [rcx+72]
	mov	ecx, DWORD PTR [rcx+40]
; Line 159
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 147
	jmp	cctree_solve_binary
$LN5@cctree_sol:
; Line 141
	mov	rdx, QWORD PTR [rcx+24]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN6@cctree_sol
; Line 142
	mov	r8, QWORD PTR [rbx+24]
	lea	rdx, OFFSET FLAT:??_C@_0CD@LHDDGHLD@?8?$CFs?8?3?5undeclared?5rvalue?5identif@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
; Line 159
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 142
	jmp	cctrace_
$LN6@cctree_sol:
; Line 159
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_solve_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_binary
_TEXT	SEGMENT
oper$ = 48
lvalue$ = 56
rvalue$ = 64
cctree_solve_binary PROC				; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 163
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, r8
	mov	rbx, rdx
; Line 164
	cmp	ecx, 110				; 0000006eH
	jne	SHORT $LN2@cctree_sol
; Line 118
	mov	eax, DWORD PTR [rdx]
	cmp	eax, 6
	je	SHORT $LN36@cctree_sol
	cmp	eax, 22
	jne	SHORT $LN3@cctree_sol
; Line 127
	mov	rcx, rdx
	call	cctree_solve_index
; Line 169
	mov	rcx, rdi
; Line 170
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 169
	jmp	cctree_solve_rvalue
$LN36@cctree_sol:
; Line 122
	mov	rdx, QWORD PTR [rdx+24]
	mov	rcx, rbx
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN3@cctree_sol
; Line 123
	mov	r8, QWORD PTR [rbx+24]
	lea	rdx, OFFSET FLAT:??_C@_0CD@IALNCJCC@?8?$CFs?8?3?5undeclared?5lvalue?5identif@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
; Line 169
	mov	rcx, rdi
; Line 170
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 169
	jmp	cctree_solve_rvalue
$LN2@cctree_sol:
; Line 167
	mov	rcx, rbx
	call	cctree_solve_rvalue
$LN3@cctree_sol:
; Line 169
	mov	rcx, rdi
; Line 170
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 169
	jmp	cctree_solve_rvalue
cctree_solve_binary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_mingle
_TEXT	SEGMENT
tree$ = 64
name$ = 72
cctree_mingle PROC					; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 44
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 47
	mov	rax, QWORD PTR gs:88
	xor	ebx, ebx
	mov	r8d, DWORD PTR _tls_index
	mov	r9, rdx
; Line 55
	movsxd	rdx, DWORD PTR [rcx]
	mov	r14, rcx
	mov	r15d, OFFSET FLAT:ccerr
	mov	edi, ebx
	mov	QWORD PTR [rsp+64], rsi
	mov	rbp, QWORD PTR [rax+r8*8]
	lea	eax, DWORD PTR [rdx-6]
	mov	DWORD PTR [r15+rbp], 1
	test	eax, -17				; ffffffefH
	je	SHORT $LN5@cctree_min
; Line 59
	cmp	edx, 21
	jne	SHORT $LN6@cctree_min
; Line 60
	mov	rdx, -1
	npad	3
$LL24@cctree_min:
	inc	rdx
	cmp	BYTE PTR [r9+rdx], bl
	jne	SHORT $LL24@cctree_min
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 356
	mov	r8, QWORD PTR func_decls
	test	r8, r8
	je	$LN14@cctree_min
; Line 357
	mov	eax, OFFSET FLAT:cckey
	lea	rcx, QWORD PTR [r8-40]
	mov	esi, eax
	mov	QWORD PTR [rax+rbp], rbx
; Line 362
	test	rcx, rcx
	je	$LN12@cctree_min
; Line 363
	mov	r8, r9
	call	ccdbl_query
; Line 364
	mov	r8, QWORD PTR func_decls
; Line 366
	jmp	SHORT $LN29@cctree_min
$LN6@cctree_min:
; File W:\cpp\void\ktt-c\cccheck.c
; Line 62
	lea	rax, OFFSET FLAT:cctree_s
	mov	r9, r14
	mov	r8, QWORD PTR [rax+rdx*8]
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	lea	rdx, OFFSET FLAT:??_C@_0DP@MHKFGEKJ@?8?$CFs?$FL0x?$CFx?$FN?8?3?5invalid?5mingling?5tr@
	call	cctrace_
	jmp	SHORT $LN7@cctree_min
$LN5@cctree_min:
; Line 57
	mov	rdx, -1
	npad	4
$LL23@cctree_min:
	inc	rdx
	cmp	BYTE PTR [r9+rdx], bl
	jne	SHORT $LL23@cctree_min
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 356
	mov	r8, QWORD PTR vari_decls
	test	r8, r8
	je	SHORT $LN14@cctree_min
; Line 357
	mov	eax, OFFSET FLAT:cckey
	lea	rcx, QWORD PTR [r8-40]
	mov	esi, eax
	mov	QWORD PTR [rax+rbp], rbx
; Line 362
	test	rcx, rcx
	je	SHORT $LN12@cctree_min
; Line 363
	mov	r8, r9
	call	ccdbl_query
; Line 364
	mov	r8, QWORD PTR vari_decls
$LN29@cctree_min:
; File W:\cpp\void\ktt-c\cccheck.c
; Line 65
	mov	rcx, rax
	cmp	DWORD PTR [r15+rbp], ebx
	jne	SHORT $LN12@cctree_min
	mov	rax, QWORD PTR [rax+16]
	mov	rdi, QWORD PTR [rcx+24]
	mov	QWORD PTR [rsi+rbp], rax
	jmp	SHORT $LN12@cctree_min
$LN14@cctree_min:
	mov	eax, OFFSET FLAT:cckey
	mov	QWORD PTR [rax+rbp], rbx
$LN12@cctree_min:
	shr	rdi, 3
	lea	rdi, QWORD PTR [r8+rdi*8]
$LN7@cctree_min:
	mov	rsi, QWORD PTR [rsp+64]
	cmp	DWORD PTR [r15+rbp], ebx
	jne	SHORT $LN28@cctree_min
; Line 67
	mov	edx, 8
	lea	rcx, OFFSET FLAT:symbols
	mov	r9, r14
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR symbols
; Line 72
	cmp	DWORD PTR [r15+rbp], ebx
	lea	rdx, QWORD PTR [rcx+rax*8]
	mov	rcx, QWORD PTR [rdi]
	mov	QWORD PTR [rdx], rcx
$LN28@cctree_min:
; Line 73
	mov	rbp, QWORD PTR [rsp+80]
	sete	bl
	mov	eax, ebx
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
cctree_mingle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_resolve_symbol
_TEXT	SEGMENT
tree$ = 64
cctree_resolve_symbol PROC				; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 30
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 356
	mov	r8, QWORD PTR symbols
; File W:\cpp\void\ktt-c\cccheck.c
; Line 30
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 356
	test	r8, r8
	je	SHORT $LN10@cctree_res
	lea	rcx, QWORD PTR [r8-40]
	jmp	SHORT $LN11@cctree_res
$LN10@cctree_res:
	xor	ecx, ecx
$LN11@cctree_res:
; Line 357
	mov	edx, DWORD PTR _tls_index
; Line 360
	xor	edi, edi
	mov	rax, QWORD PTR gs:88
	mov	esi, OFFSET FLAT:cckey
; Line 362
	mov	r14d, OFFSET FLAT:ccerr
	mov	rbp, QWORD PTR [rax+rdx*8]
	mov	QWORD PTR [rsi+rbp], 0
	test	rcx, rcx
	je	SHORT $LN8@cctree_res
; Line 363
	mov	r8, rbx
	lea	edx, QWORD PTR [rdi-8]
	call	ccdbl_query
; Line 364
	mov	r8, QWORD PTR symbols
	cmp	DWORD PTR [r14+rbp], edi
	jne	SHORT $LN8@cctree_res
; Line 365
	mov	rcx, QWORD PTR [rax+16]
; Line 366
	mov	rdi, QWORD PTR [rax+24]
	mov	QWORD PTR [rsi+rbp], rcx
$LN8@cctree_res:
; Line 371
	shr	rdi, 3
; File W:\cpp\void\ktt-c\cccheck.c
; Line 36
	cmp	DWORD PTR [r14+rbp], 0
	lea	rsi, QWORD PTR [r8+rdi*8]
	je	SHORT $LN14@cctree_res
; Line 37
	movsxd	r8, DWORD PTR [rbx]
	lea	rcx, OFFSET FLAT:cctree_s
	mov	rax, QWORD PTR [rbx+24]
	lea	rdx, OFFSET FLAT:??_C@_0DN@MCEJNCBN@?8?$CFs?$FL0x?$CFx?$FN?8?3?5uncoupled?5tree?0?5?8?$CFs@
	mov	r9, rbx
	mov	QWORD PTR [rsp+32], rax
	mov	r8, QWORD PTR [rcx+r8*8]
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
; Line 39
	cmp	DWORD PTR [r14+rbp], 0
	jne	SHORT $LN4@cctree_res
$LN14@cctree_res:
	mov	rax, QWORD PTR [rsi]
	jmp	SHORT $LN5@cctree_res
$LN4@cctree_res:
	xor	eax, eax
$LN5@cctree_res:
; Line 40
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
cctree_resolve_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_include_invokable
_TEXT	SEGMENT
tree$ = 48
name$ = 56
cctree_include_invokable PROC				; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 18
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 22
	mov	r9, QWORD PTR [rcx+24]
	mov	rbx, rcx
	mov	r8, -1
$LL4@cctree_inc:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL4@cctree_inc
	mov	edx, 8
	lea	rcx, OFFSET FLAT:func_decls
	call	ccdlb_tblput
	mov	rcx, QWORD PTR func_decls
; Line 23
	mov	r8d, OFFSET FLAT:ccerr
	lea	rdx, QWORD PTR [rcx+rax*8]
	mov	ecx, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	ecx, DWORD PTR [r8+rax]
	test	ecx, ecx
	jne	SHORT $LN2@cctree_inc
	mov	QWORD PTR [rdx], rbx
$LN2@cctree_inc:
; Line 25
	xor	eax, eax
	test	ecx, ecx
	sete	al
; Line 26
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_include_invokable ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_statement
_TEXT	SEGMENT
tree$ = 48
cctree_solve_statement PROC				; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 181
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 182
	mov	eax, DWORD PTR [rcx]
	mov	rbx, rcx
	cmp	eax, 10
	je	SHORT $LN34@cctree_sol
$LL31@cctree_sol:
; Line 188
	cmp	eax, 16
	je	$LN35@cctree_sol
; Line 192
	cmp	eax, 21
	je	$LN36@cctree_sol
; Line 197
	cmp	eax, 12
	je	$LN37@cctree_sol
; Line 202
	cmp	eax, 18
	je	SHORT $LN38@cctree_sol
; Line 206
	cmp	eax, 14
	jne	SHORT $LN15@cctree_sol
; Line 208
	mov	rcx, QWORD PTR [rbx+64]
	call	cctree_solve_rvalue
; Line 209
	mov	rbx, QWORD PTR [rbx+72]
	mov	eax, DWORD PTR [rbx]
	cmp	eax, 10
	jne	SHORT $LL31@cctree_sol
$LN34@cctree_sol:
	mov	QWORD PTR [rsp+48], rdi
; Line 185
	mov	rdi, QWORD PTR [rbx+32]
$LL4@cctree_sol:
	mov	rcx, QWORD PTR [rbx+32]
	test	rcx, rcx
	je	SHORT $LN22@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN23@cctree_sol
$LN15@cctree_sol:
; Line 211
	cmp	eax, 17
	jne	$LN44@cctree_sol
; Line 213
	mov	rcx, QWORD PTR [rbx+64]
	call	cctree_solve_rvalue
; Line 214
	mov	rcx, QWORD PTR [rbx+72]
	test	rcx, rcx
	je	SHORT $LN19@cctree_sol
	call	cctree_solve_block
$LN19@cctree_sol:
; Line 215
	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN44@cctree_sol
; Line 220
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 215
	jmp	cctree_solve_block
$LN38@cctree_sol:
; Line 204
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	ecx, DWORD PTR [rbx+40]
; Line 220
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 204
	jmp	cctree_solve_binary
$LN37@cctree_sol:
; Line 200
	mov	rcx, QWORD PTR [rbx+80]
; Line 220
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 200
	jmp	cctree_solve_rvalue
$LN36@cctree_sol:
; Line 194
	mov	rcx, rbx
; Line 220
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 194
	jmp	cctree_solve_call
$LN35@cctree_sol:
; Line 190
	mov	rcx, rbx
; Line 220
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 190
	jmp	cctree_solve_decl
$LN22@cctree_sol:
; Line 185
	xor	eax, eax
$LN23@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rdi, rax
	jae	SHORT $LN45@cctree_sol
; Line 186
	mov	rcx, QWORD PTR [rdi]
	call	cctree_solve_statement
	add	rdi, 8
	jmp	$LL4@cctree_sol
$LN45@cctree_sol:
	mov	rdi, QWORD PTR [rsp+48]
$LN44@cctree_sol:
; Line 220
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_solve_statement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_decl
_TEXT	SEGMENT
decl$ = 80
cctree_solve_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\cccheck.c
; Line 280
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 23
	mov	edx, DWORD PTR _tls_index
; Line 280
	mov	r15, rcx
; Line 23
	mov	rax, QWORD PTR gs:88
; Line 281
	mov	r14, QWORD PTR [rcx+32]
; Line 23
	mov	r13d, OFFSET FLAT:ccerr
	lea	r12, QWORD PTR [rax+rdx*8]
	npad	4
$LL4@cctree_sol:
; Line 281
	mov	rcx, QWORD PTR [r15+32]
	test	rcx, rcx
	je	SHORT $LN6@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	xor	eax, eax
$LN7@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	r14, rax
	jae	$LN3@cctree_sol
	mov	rbp, QWORD PTR [r14]
; Line 233
	mov	rax, QWORD PTR [rbp+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN17@cctree_sol
; Line 235
	test	BYTE PTR [rbp+16], 16
	mov	rax, QWORD PTR [rbp+24]
	je	$LN19@cctree_sol
; Line 22
	mov	r8, -1
$LL74@cctree_sol:
	inc	r8
	cmp	BYTE PTR [rax+r8], 0
	jne	SHORT $LL74@cctree_sol
	mov	r9, rax
	lea	rcx, OFFSET FLAT:func_decls
	mov	edx, 8
	call	ccdlb_tblput
	mov	rcx, QWORD PTR func_decls
	lea	rdx, QWORD PTR [rcx+rax*8]
; Line 23
	mov	rax, QWORD PTR [r12]
	cmp	DWORD PTR [r13+rax], 0
	jne	$LN21@cctree_sol
	mov	QWORD PTR [rdx], rbp
; Line 240
	mov	rax, QWORD PTR [rbp+48]
	mov	rbx, QWORD PTR [rax+32]
	npad	6
$LL11@cctree_sol:
	mov	rax, QWORD PTR [rbp+48]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN31@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN32@cctree_sol
$LN31@cctree_sol:
	xor	eax, eax
$LN32@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN10@cctree_sol
; Line 241
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_decl_name
	add	rbx, 8
	jmp	SHORT $LL11@cctree_sol
$LN10@cctree_sol:
; Line 243
	mov	rax, QWORD PTR [rbp+88]
	mov	rsi, QWORD PTR [rax+32]
	npad	9
$LL14@cctree_sol:
	mov	rax, QWORD PTR [rbp+88]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN33@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN34@cctree_sol
$LN33@cctree_sol:
	xor	eax, eax
$LN34@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rsi, rax
	jae	$LN2@cctree_sol
; Line 244
	mov	rbx, QWORD PTR [rsi]
; Line 182
	mov	eax, DWORD PTR [rbx]
	cmp	eax, 10
	jne	SHORT $LN39@cctree_sol
; Line 185
	mov	rdi, QWORD PTR [rbx+32]
$LL38@cctree_sol:
	mov	rcx, QWORD PTR [rbx+32]
	test	rcx, rcx
	je	SHORT $LN56@cctree_sol
	mov	rax, QWORD PTR [rcx-8]
	jmp	SHORT $LN57@cctree_sol
$LN56@cctree_sol:
	xor	eax, eax
$LN57@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rdi, rax
	jae	$LN12@cctree_sol
; Line 186
	mov	rcx, QWORD PTR [rdi]
	call	cctree_solve_statement
	add	rdi, 8
	jmp	SHORT $LL38@cctree_sol
$LN39@cctree_sol:
; Line 188
	cmp	eax, 16
	jne	SHORT $LN41@cctree_sol
; Line 190
	mov	rcx, rbx
	call	cctree_solve_decl
; Line 243
	add	rsi, 8
	jmp	SHORT $LL14@cctree_sol
$LN41@cctree_sol:
; Line 192
	cmp	eax, 21
	jne	SHORT $LN43@cctree_sol
; Line 194
	mov	rcx, rbx
	call	cctree_solve_call
; Line 243
	add	rsi, 8
	jmp	$LL14@cctree_sol
$LN43@cctree_sol:
; Line 197
	cmp	eax, 12
	jne	SHORT $LN45@cctree_sol
; Line 200
	mov	rcx, QWORD PTR [rbx+80]
	call	cctree_solve_rvalue
; Line 243
	add	rsi, 8
	jmp	$LL14@cctree_sol
$LN45@cctree_sol:
; Line 202
	cmp	eax, 18
	jne	SHORT $LN47@cctree_sol
; Line 204
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	ecx, DWORD PTR [rbx+40]
	call	cctree_solve_binary
; Line 243
	add	rsi, 8
	jmp	$LL14@cctree_sol
$LN47@cctree_sol:
; Line 206
	cmp	eax, 14
	jne	SHORT $LN49@cctree_sol
; Line 208
	mov	rcx, QWORD PTR [rbx+64]
	call	cctree_solve_rvalue
; Line 209
	mov	rcx, QWORD PTR [rbx+72]
	call	cctree_solve_statement
; Line 243
	add	rsi, 8
	jmp	$LL14@cctree_sol
$LN49@cctree_sol:
; Line 211
	cmp	eax, 17
	jne	SHORT $LN12@cctree_sol
; Line 213
	mov	rcx, QWORD PTR [rbx+64]
	call	cctree_solve_rvalue
; Line 214
	mov	rcx, QWORD PTR [rbx+72]
	test	rcx, rcx
	je	SHORT $LN53@cctree_sol
	call	cctree_solve_block
$LN53@cctree_sol:
; Line 215
	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN12@cctree_sol
	call	cctree_solve_block
$LN12@cctree_sol:
; Line 243
	add	rsi, 8
	jmp	$LL14@cctree_sol
$LN21@cctree_sol:
; Line 246
	mov	r8, QWORD PTR [rbp+24]
	lea	rdx, OFFSET FLAT:??_C@_0BH@MBJGJGMK@?$CFs?3?5already?5has?5a?5body@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
; Line 281
	add	r14, 8
	jmp	$LL4@cctree_sol
$LN19@cctree_sol:
; Line 248
	mov	r8, rax
	lea	rdx, OFFSET FLAT:??_C@_0CM@GIHPCBBO@?8?$CFs?8?3?5local?5function?5defintions@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
; Line 281
	add	r14, 8
	jmp	$LL4@cctree_sol
$LN17@cctree_sol:
; Line 251
	mov	r9, QWORD PTR [rbp+24]
	mov	r8, -1
	npad	3
$LL73@cctree_sol:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL73@cctree_sol
	mov	edx, 8
	lea	rcx, OFFSET FLAT:vari_decls
	call	ccdlb_tblput
	mov	rcx, QWORD PTR vari_decls
	lea	rdx, QWORD PTR [rcx+rax*8]
; Line 252
	mov	rax, QWORD PTR [r12]
	cmp	DWORD PTR [r13+rax], 0
	jne	SHORT $LN23@cctree_sol
; Line 253
	mov	QWORD PTR [rdx], rbp
	jmp	SHORT $LN24@cctree_sol
$LN23@cctree_sol:
; Line 255
	mov	r8, QWORD PTR [rbp+24]
	lea	rdx, OFFSET FLAT:??_C@_0BM@BIKCLCJM@?8?$CFs?8?3?5variable?5redefinition@
	lea	rcx, OFFSET FLAT:??_C@_03JIDPIAJI@err@
	call	cctrace_
$LN24@cctree_sol:
; Line 257
	mov	rcx, QWORD PTR [rbp+64]
	test	rcx, rcx
	je	SHORT $LN25@cctree_sol
; Line 259
	call	cctree_solve_rvalue
$LN25@cctree_sol:
; Line 262
	mov	rcx, QWORD PTR [rbp+48]
	cmp	DWORD PTR [rcx], 4
	jne	SHORT $LN2@cctree_sol
; Line 265
	mov	rcx, QWORD PTR [rcx+80]
	call	cctree_solve_rvalue
$LN2@cctree_sol:
; Line 281
	add	r14, 8
	jmp	$LL4@cctree_sol
$LN3@cctree_sol:
; Line 282
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
cctree_solve_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_ternary
_TEXT	SEGMENT
root$ = 48
mark$ = 56
cond_tree$ = 64
then_tree$ = 72
else_tree$ = 80
cctree_ternary PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 313
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 313
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 316
	mov	rax, QWORD PTR else_tree$[rsp]
	mov	QWORD PTR [rcx+80], rax
; Line 317
	mov	rax, rcx
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 318
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rcx+64], rsi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rcx+72], rbp
	mov	rbp, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rcx], 17
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 318
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_ternary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_binary
_TEXT	SEGMENT
root$ = 48
mark$ = 56
token$ = 64
lhs$ = 72
rhs$ = 80
cctree_binary PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 304
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 304
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 309
	mov	rbx, QWORD PTR [rsp+48]
; Line 135
	mov	DWORD PTR [rcx], 18
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 305
	mov	eax, DWORD PTR [rsi]
; Line 309
	mov	rsi, QWORD PTR [rsp+64]
	mov	DWORD PTR [rcx+40], eax
	mov	rax, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rcx+80], rax
	mov	rax, rcx
	mov	QWORD PTR [rcx+72], rbp
	mov	rbp, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_binary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_unary
_TEXT	SEGMENT
root$ = 48
mark$ = 56
token$ = 64
rval$ = 72
cctree_unary PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 296
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 296
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 300
	mov	rbx, QWORD PTR [rsp+48]
; Line 135
	mov	DWORD PTR [rcx], 19
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 297
	mov	eax, DWORD PTR [rsi]
; Line 300
	mov	rsi, QWORD PTR [rsp+64]
	mov	DWORD PTR [rcx+40], eax
	mov	rax, rcx
	mov	QWORD PTR [rcx+80], rbp
	mov	rbp, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_unary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_litflo
_TEXT	SEGMENT
root$ = 48
mark$ = 56
token$ = 64
cctree_litflo PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 289
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 289
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 292
	mov	rbx, QWORD PTR [rsp+48]
; Line 135
	mov	DWORD PTR [rcx], 8
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 290
	mov	rax, QWORD PTR [rsi+24]
; Line 292
	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rcx+96], rax
	mov	rax, rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_litflo ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_litint
_TEXT	SEGMENT
root$ = 48
mark$ = 56
token$ = 64
cctree_litint PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 282
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 282
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 285
	mov	rbx, QWORD PTR [rsp+48]
; Line 135
	mov	DWORD PTR [rcx], 7
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 283
	mov	rax, QWORD PTR [rsi+24]
; Line 285
	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rcx+96], rax
	mov	rax, rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_litint ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_litide
_TEXT	SEGMENT
root$ = 48
mark$ = 56
name$ = 64
cctree_litide PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 275
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 275
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 136
	mov	QWORD PTR [rax+8], rbx
; Line 278
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+24], rsi
	mov	rsi, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rax], 6
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 278
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_litide ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_decl
_TEXT	SEGMENT
root$ = 48
mark$ = 56
type$ = 64
list$ = 72
cctree_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 267
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 267
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 136
	mov	QWORD PTR [rax+8], rbx
; Line 271
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+48], rsi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rax+32], rbp
	mov	rbp, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rax], 16
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 271
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_decl_name
_TEXT	SEGMENT
root$ = 48
mark$ = 56
type$ = 64
name$ = 72
size$ = 80
init$ = 88
cctree_decl_name PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 257
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 257
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 15
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 258
	mov	QWORD PTR [rcx+48], rsi
; Line 151
	test	rbp, rbp
	je	SHORT $LN15@cctree_dec
	mov	rax, QWORD PTR [rbp+24]
$LN15@cctree_dec:
; Line 263
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rcx+24], rax
	mov	rax, QWORD PTR size$[rsp]
	mov	QWORD PTR [rcx+56], rax
	mov	rax, QWORD PTR init$[rsp]
	mov	QWORD PTR [rcx+64], rax
	mov	rax, rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_return
_TEXT	SEGMENT
root$ = 48
mark$ = 56
rval$ = 64
cctree_return PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 250
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 250
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 136
	mov	QWORD PTR [rax+8], rbx
; Line 253
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+80], rsi
	mov	rsi, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rax], 12
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 253
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_return ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_goto
_TEXT	SEGMENT
root$ = 48
mark$ = 56
name$ = 64
cctree_goto PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 243
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 243
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 13
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 151
	test	rsi, rsi
	je	SHORT $LN14@cctree_got
	mov	rax, QWORD PTR [rsi+24]
$LN14@cctree_got:
; Line 246
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rcx+24], rax
	mov	rax, rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_goto ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_label
_TEXT	SEGMENT
root$ = 48
mark$ = 56
name$ = 64
list$ = 72
cctree_label PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 235
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 235
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 11
; Line 136
	mov	QWORD PTR [rax+8], rbx
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 151
	test	rsi, rsi
	je	SHORT $LN15@cctree_lab
	mov	rcx, QWORD PTR [rsi+24]
$LN15@cctree_lab:
; Line 239
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rax+32], rbp
	mov	rbp, QWORD PTR [rsp+56]
	mov	QWORD PTR [rax+24], rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_label ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_while
_TEXT	SEGMENT
root$ = 48
mark$ = 56
cond_tree$ = 64
then_tree$ = 72
cctree_while PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 226
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 226
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 136
	mov	QWORD PTR [rax+8], rbx
; Line 231
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+64], rsi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rax+72], rbp
	mov	rbp, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rax], 14
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 231
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_while ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_block
_TEXT	SEGMENT
root$ = 48
mark$ = 56
list$ = 64
cctree_block PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 219
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 219
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 136
	mov	QWORD PTR [rax+8], rbx
; Line 222
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+32], rsi
	mov	rsi, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rax], 10
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 222
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_index
_TEXT	SEGMENT
root$ = 48
mark$ = 56
lval$ = 64
rval$ = 72
name$ = 80
cctree_index PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 210
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 210
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 213
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 214
	mov	rax, rcx
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 215
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rcx+72], rsi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rcx+80], rbp
	mov	rbp, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rcx], 22
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 215
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_index ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_call
_TEXT	SEGMENT
root$ = 48
mark$ = 56
lval$ = 64
rval$ = 72
name$ = 80
cctree_call PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 201
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 201
	mov	rsi, r8
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 204
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 205
	mov	rax, rcx
; Line 136
	mov	QWORD PTR [rcx+8], rbx
; Line 206
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rcx+72], rsi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [rcx+80], rbp
	mov	rbp, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rcx], 21
; Line 137
	mov	DWORD PTR [rcx+16], edi
; Line 206
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_call ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_group
_TEXT	SEGMENT
root$ = 48
mark$ = 56
init$ = 64
cctree_group PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 194
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r8
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 194
	mov	edi, edx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 136
	mov	QWORD PTR [rax+8], rbx
; Line 197
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+64], rsi
	mov	rsi, QWORD PTR [rsp+56]
; Line 135
	mov	DWORD PTR [rax], 20
; Line 137
	mov	DWORD PTR [rax+16], edi
; Line 197
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_group ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_translation_unit
_TEXT	SEGMENT
cctree_translation_unit PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 188
	sub	rsp, 40					; 00000028H
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 23
; Line 190
	add	rsp, 40					; 00000028H
	ret	0
cctree_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctreee_struct_specifier
_TEXT	SEGMENT
list$ = 48
name$ = 56
cctreee_struct_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 179
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	mov	rcx, rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
	mov	QWORD PTR [rcx+144], rax
; Line 135
	mov	DWORD PTR [rcx], 1
; Line 181
	mov	QWORD PTR [rcx+32], rbx
; Line 151
	test	rdi, rdi
	je	SHORT $LN14@cctreee_st
	mov	rax, QWORD PTR [rdi+24]
$LN14@cctreee_st:
; Line 184
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rcx+24], rax
	mov	rax, rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctreee_struct_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctreee_function_modifier
_TEXT	SEGMENT
type$ = 48
list$ = 56
cctreee_function_modifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 171
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 172
	mov	QWORD PTR [rax+48], rbx
; Line 175
	mov	rbx, QWORD PTR [rsp+48]
; Line 135
	mov	DWORD PTR [rax], 3
; Line 173
	mov	QWORD PTR [rax+32], rdi
; Line 175
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctreee_function_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctreee_array_modifier
_TEXT	SEGMENT
type$ = 48
rval$ = 56
cctreee_array_modifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 163
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 164
	mov	QWORD PTR [rax+48], rbx
; Line 167
	mov	rbx, QWORD PTR [rsp+48]
; Line 135
	mov	DWORD PTR [rax], 4
; Line 165
	mov	QWORD PTR [rax+80], rdi
; Line 167
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctreee_array_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctreee_pointer_modifier
_TEXT	SEGMENT
type$ = 48
cctreee_pointer_modifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 156
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], 5
; Line 157
	mov	QWORD PTR [rax+48], rbx
; Line 159
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctreee_pointer_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_name
_TEXT	SEGMENT
name$ = 8
cctree_name PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 151
	test	rcx, rcx
	je	SHORT $LN3@cctree_nam
	mov	rax, QWORD PTR [rcx+24]
; Line 152
	ret	0
$LN3@cctree_nam:
; Line 151
	xor	eax, eax
; Line 152
	ret	0
cctree_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_clone
_TEXT	SEGMENT
tree$ = 48
cctree_clone PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 143
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	r8d, DWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	rdx, QWORD PTR [rcx+8]
	mov	ecx, DWORD PTR [rcx]
	call	cctree_new
; Line 144
	movups	xmm0, XMMWORD PTR [rbx]
	movups	XMMWORD PTR [rax], xmm0
	movups	xmm1, XMMWORD PTR [rbx+16]
	movups	XMMWORD PTR [rax+16], xmm1
	movups	xmm0, XMMWORD PTR [rbx+32]
	movups	XMMWORD PTR [rax+32], xmm0
	movups	xmm1, XMMWORD PTR [rbx+48]
	movups	XMMWORD PTR [rax+48], xmm1
	movups	xmm0, XMMWORD PTR [rbx+64]
	movups	XMMWORD PTR [rax+64], xmm0
	movups	xmm1, XMMWORD PTR [rbx+80]
	movups	XMMWORD PTR [rax+80], xmm1
	movups	xmm0, XMMWORD PTR [rbx+96]
	movups	XMMWORD PTR [rax+96], xmm0
	movups	xmm1, XMMWORD PTR [rbx+112]
	movups	XMMWORD PTR [rax+112], xmm1
	movups	xmm0, XMMWORD PTR [rbx+128]
	movups	XMMWORD PTR [rax+128], xmm0
	movsd	xmm1, QWORD PTR [rbx+144]
	movsd	QWORD PTR [rax+144], xmm1
; Line 146
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_clone ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_new
_TEXT	SEGMENT
kind$ = 48
root$ = 56
mark$ = 64
cctree_new PROC						; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 133
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	esi, r8d
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 152				; 00000098H
; File W:\cpp\void\ktt-c\cctree.h
; Line 133
	mov	rdi, rdx
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	call	malloc
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 134
	xor	ecx, ecx
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	movups	XMMWORD PTR [rax+48], xmm0
	movups	XMMWORD PTR [rax+64], xmm0
	movups	XMMWORD PTR [rax+80], xmm0
	movups	XMMWORD PTR [rax+96], xmm0
	movups	XMMWORD PTR [rax+112], xmm0
	movups	XMMWORD PTR [rax+128], xmm0
	mov	QWORD PTR [rax+144], rcx
; Line 135
	mov	DWORD PTR [rax], ebx
; Line 139
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax+16], esi
	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rax+8], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_del
_TEXT	SEGMENT
tree$ = 8
cctree_del PROC						; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; File W:\cpp\void\ktt-c\cc.c
; Line 560
	jmp	free
cctree_del ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccout
_TEXT	SEGMENT
string$ = 8
ccout	PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclog.h
; Line 254
	jmp	printf
ccout	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstr_catf
_TEXT	SEGMENT
dlb$1 = 32
ccm$ = 96
fmt$ = 104
ccstr_catf PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 444
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rbp, rdx
; Line 445
	lea	r14, QWORD PTR fmt$[rsp+8]
	mov	rsi, rcx
; Line 436
	mov	r8, rdx
	mov	r9, r14
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsnprintf
; Line 240
	mov	rdx, QWORD PTR [rsi]
; Line 437
	xor	ecx, ecx
	test	rdx, rdx
	movsxd	r8, eax
	lea	edi, DWORD PTR [rax+1]
	lea	r10, QWORD PTR [rdx-40]
	movsxd	rdx, edi
	cmove	r10, rcx
; Line 241
	lea	rcx, QWORD PTR dlb$1[rsp]
; Line 437
	mov	QWORD PTR dlb$1[rsp], r10
; Line 241
	call	ccdlb_arradd_
; Line 242
	mov	rcx, QWORD PTR dlb$1[rsp]
; Line 438
	mov	r9, r14
; Line 242
	add	rcx, 40					; 00000028H
; Line 438
	mov	r8, rbp
; Line 242
	mov	QWORD PTR [rsi], rcx
; Line 438
	mov	edx, edi
	add	rcx, rax
; Line 241
	mov	rbx, rax
; Line 438
	call	stbsp_vsnprintf
; Line 448
	mov	rax, rbx
; Line 449
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
ccstr_catf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstr_vcatf
_TEXT	SEGMENT
dlb$1 = 64
ccm$ = 64
fmt$ = 72
vli$ = 80
ccstr_vcatf PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 436
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rbp, r8
	mov	r9, r8
	mov	r8, rdx
	mov	r14, rdx
	mov	rsi, rcx
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsnprintf
; Line 240
	mov	r9, QWORD PTR [rsi]
; Line 437
	xor	ecx, ecx
	test	r9, r9
	movsxd	r8, eax
	lea	edi, DWORD PTR [rax+1]
	lea	r10, QWORD PTR [r9-40]
	movsxd	rdx, edi
	cmove	r10, rcx
; Line 241
	lea	rcx, QWORD PTR dlb$1[rsp]
; Line 437
	mov	QWORD PTR dlb$1[rsp], r10
; Line 241
	call	ccdlb_arradd_
; Line 242
	mov	rcx, QWORD PTR dlb$1[rsp]
; Line 438
	mov	r9, rbp
; Line 242
	add	rcx, 40					; 00000028H
; Line 438
	mov	r8, r14
; Line 242
	mov	QWORD PTR [rsi], rcx
; Line 438
	mov	edx, edi
	add	rcx, rax
; Line 241
	mov	rbx, rax
; Line 438
	call	stbsp_vsnprintf
; Line 440
	mov	rbp, QWORD PTR [rsp+80]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
ccstr_vcatf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdbl_query
_TEXT	SEGMENT
tbl$ = 48
len$ = 56
key$ = 64
ccdbl_query PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 329
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r14
	sub	rsp, 32					; 00000020H
	movsxd	rbp, edx
	mov	rsi, r8
; Line 267
	test	edx, edx
	jle	SHORT $LN14@ccdbl_quer
; Line 268
	mov	eax, 5381				; 00001505H
	mov	r9, rbp
	npad	9
$LL22@ccdbl_quer:
	movsx	rdx, BYTE PTR [r9+r8-1]
	dec	r9
	imul	rax, rax, 33				; 00000021H
	add	rax, rdx
	test	r9, r9
	jne	SHORT $LL22@ccdbl_quer
	jmp	SHORT $LN15@ccdbl_quer
$LN14@ccdbl_quer:
; Line 270
	mov	rax, rsi
$LN15@ccdbl_quer:
; Line 334
	mov	rcx, QWORD PTR [rcx+16]
	test	rcx, rcx
	je	SHORT $LN8@ccdbl_quer
	mov	r8, QWORD PTR [rcx-16]
	jmp	SHORT $LN9@ccdbl_quer
$LN8@ccdbl_quer:
	xor	r8d, r8d
$LN9@ccdbl_quer:
	xor	edx, edx
	shr	r8, 5
	div	r8
; Line 338
	mov	rax, QWORD PTR gs:88
	mov	rbx, rdx
	mov	QWORD PTR [rsp+48], rdi
	shl	rbx, 5
	add	rbx, rcx
	mov	edx, OFFSET FLAT:ccerr
	mov	ecx, DWORD PTR _tls_index
	mov	r14, QWORD PTR [rax+rcx*8]
; Line 339
	mov	rax, QWORD PTR [rbx+16]
	add	r14, rdx
	mov	DWORD PTR [r14], 0
	test	rax, rax
	je	SHORT $LN27@ccdbl_quer
	mov	rdi, QWORD PTR dummy+176
$LL2@ccdbl_quer:
; Line 340
	cmp	DWORD PTR [rbx+8], ebp
	jne	SHORT $LN4@ccdbl_quer
	cmp	rax, rsi
	je	SHORT $LN5@ccdbl_quer
	mov	r8, rbp
	mov	rdx, rsi
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	je	SHORT $LN5@ccdbl_quer
$LN4@ccdbl_quer:
; Line 342
	cmp	QWORD PTR [rbx], 0
	je	SHORT $LN27@ccdbl_quer
; Line 344
	inc	rdi
	mov	QWORD PTR dummy+176, rdi
; Line 345
	mov	rbx, QWORD PTR [rbx]
	mov	rax, QWORD PTR [rbx+16]
	test	rax, rax
	jne	SHORT $LL2@ccdbl_quer
$LN27@ccdbl_quer:
; Line 347
	mov	DWORD PTR [r14], 1
$LN5@ccdbl_quer:
	mov	rdi, QWORD PTR [rsp+48]
; Line 349
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccdbl_query ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblcat
_TEXT	SEGMENT
tbl$ = 64
isze$ = 72
len$ = 80
key$ = 88
ent$ = 96
ccdlb_tblcat PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 297
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 301
	mov	rbx, QWORD PTR ent$[rsp]
	mov	rsi, r9
	mov	edi, r8d
	mov	r14, rdx
	mov	r15, rcx
	cmp	QWORD PTR [rbx+16], 0
	je	SHORT $LN2@ccdlb_tblc
; File W:\cpp\void\ktt-c\cc.c
; Line 558
	mov	ecx, 32					; 00000020H
	call	malloc
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 302
	mov	QWORD PTR [rbx], rax
	xorps	xmm0, xmm0
; Line 303
	mov	rbx, rax
; Line 304
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
$LN2@ccdlb_tblc:
; Line 313
	mov	r8, r14
	mov	rdx, r14
	mov	rcx, r15
	call	ccdlb_arradd_
; Line 314
	mov	rcx, QWORD PTR [r15]
	mov	r8, r14
	add	rcx, 40					; 00000028H
	xor	edx, edx
	add	rcx, rax
	mov	rbp, rax
	call	memset
	lea	rcx, QWORD PTR [rbx+16]
; Line 317
	test	edi, edi
	jle	SHORT $LN3@ccdlb_tblc
; Line 318
	lea	eax, DWORD PTR [rdi+1]
	mov	r9, rsi
	movsxd	rdx, eax
	mov	r8, rdx
	call	ccdlb_stradd
	jmp	SHORT $LN4@ccdlb_tblc
$LN3@ccdlb_tblc:
; Line 320
	mov	QWORD PTR [rcx], rsi
$LN4@ccdlb_tblc:
; Line 325
	mov	rsi, QWORD PTR [rsp+80]
	mov	rax, rbx
	mov	QWORD PTR [rbx+24], rbp
	mov	rbp, QWORD PTR [rsp+72]
	mov	DWORD PTR [rbx+8], edi
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
ccdlb_tblcat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblini
_TEXT	SEGMENT
dlb$ = 80
dlb_$ = 80
isze$ = 88
ccdlb_tblini PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 276
	mov	r11, rsp
	push	r14
	sub	rsp, 64					; 00000040H
; Line 277
	mov	rax, QWORD PTR [rcx]
	mov	r14, rcx
	mov	QWORD PTR [r11+8], rax
	test	rax, rax
; Line 279
	jne	$LN2@ccdlb_tbli
; Line 282
	mov	QWORD PTR [r11+16], rbx
	lea	rcx, QWORD PTR [r11+8]
	mov	QWORD PTR [r11+24], rbp
	xor	r8d, r8d
	mov	QWORD PTR [r11-16], rsi
	mov	QWORD PTR [r11-24], rdi
	imul	eax, edx, 255				; 000000ffH
	mov	QWORD PTR [r11-32], r12
	mov	QWORD PTR [r11-40], r15
	movsxd	rdx, eax
	call	ccdlb_arradd_
; Line 283
	mov	rbx, QWORD PTR dlb$[rsp]
	xor	esi, esi
	lea	rcx, QWORD PTR [rbx+40]
	test	rcx, rcx
	je	SHORT $LN4@ccdlb_tbli
	mov	r8, QWORD PTR [rbx+24]
	jmp	SHORT $LN5@ccdlb_tbli
$LN4@ccdlb_tbli:
	mov	r8, rsi
$LN5@ccdlb_tbli:
	xor	edx, edx
	call	memset
; Line 240
	mov	rax, QWORD PTR [rbx+16]
; Line 191
	mov	rdi, rsi
; Line 196
	mov	ecx, DWORD PTR _tls_index
; Line 241
	test	rax, rax
; Line 196
	mov	r12d, OFFSET FLAT:ccalloctr
	mov	r15, rsi
; Line 241
	lea	rbp, QWORD PTR [rax-40]
; Line 196
	mov	rax, QWORD PTR gs:88
; Line 241
	cmove	rbp, rsi
; Line 196
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	r12, QWORD PTR [r12+rax]
; Line 198
	test	rbp, rbp
	je	SHORT $LN15@ccdlb_tbli
; Line 199
	mov	rdi, QWORD PTR [rbp+24]
; Line 200
	mov	r15, QWORD PTR [rbp+32]
; Line 202
	mov	r12, QWORD PTR [rbp+8]
$LN15@ccdlb_tbli:
; Line 209
	lea	rcx, QWORD PTR [r15+8160]
	mov	rax, rbp
	cmp	rdi, rcx
	jae	SHORT $LN18@ccdlb_tbli
; Line 213
	lea	rax, QWORD PTR [rdi+rdi]
; Line 217
	mov	rdx, rbp
	cmp	rax, rcx
	mov	rdi, rcx
	cmovae	rdi, rax
	lea	rcx, QWORD PTR [rdi+40]
	call	r12
; Line 220
	test	rbp, rbp
	jne	SHORT $LN18@ccdlb_tbli
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rsi
; Line 224
	mov	QWORD PTR [rax+8], r12
$LN18@ccdlb_tbli:
; Line 242
	mov	r12, QWORD PTR [rsp+40]
	lea	rcx, QWORD PTR [rax+40]
	mov	rbp, QWORD PTR [rsp+96]
; Line 228
	mov	QWORD PTR [rax+24], rdi
; Line 242
	mov	rdi, QWORD PTR [rsp+48]
; Line 229
	mov	QWORD PTR [rax+32], r15
; Line 242
	mov	r15, QWORD PTR [rsp+32]
	mov	QWORD PTR [rbx+16], rcx
; Line 287
	test	rcx, rcx
	je	SHORT $LN6@ccdlb_tbli
	mov	rsi, QWORD PTR [rcx-16]
$LN6@ccdlb_tbli:
	mov	r8, rsi
	xor	edx, edx
	call	memset
; Line 288
	mov	rax, QWORD PTR [rbx+16]
	mov	rsi, QWORD PTR [rsp+56]
	test	rax, rax
	je	SHORT $LN8@ccdlb_tbli
	or	DWORD PTR [rax-40], 2
$LN8@ccdlb_tbli:
; Line 291
	mov	QWORD PTR [r14], rbx
	mov	rbx, QWORD PTR [rsp+88]
$LN2@ccdlb_tbli:
; Line 293
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
ccdlb_tblini ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cchsh_abc
_TEXT	SEGMENT
len$ = 8
key$ = 16
cchsh_abc PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 266
	mov	r8, rdx
; Line 267
	test	ecx, ecx
	jle	SHORT $LN5@cchsh_abc
; Line 268
	movsxd	rdx, ecx
	mov	eax, 5381				; 00001505H
	add	r8, rdx
	npad	14
$LL10@cchsh_abc:
	movsx	rdx, BYTE PTR [r8-1]
	lea	r8, QWORD PTR [r8-1]
	imul	rax, rax, 33				; 00000021H
	add	rax, rdx
	sub	ecx, 1
	jne	SHORT $LL10@cchsh_abc
; Line 272
	ret	0
$LN5@cchsh_abc:
; Line 271
	mov	rax, r8
; Line 272
	ret	0
cchsh_abc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_stradd
_TEXT	SEGMENT
dlb$1 = 48
ccm$ = 48
cres$ = 56
ccom$ = 64
cpy$ = 72
ccdlb_stradd PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 248
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 240
	mov	rax, QWORD PTR [rcx]
; Line 248
	mov	rbx, rcx
; Line 241
	xor	ecx, ecx
; Line 248
	mov	rsi, r9
; Line 241
	test	rax, rax
; Line 248
	mov	rbp, rdx
; Line 241
	lea	r10, QWORD PTR [rax-40]
	cmove	r10, rcx
	lea	rcx, QWORD PTR dlb$1[rsp]
	mov	QWORD PTR dlb$1[rsp], r10
	call	ccdlb_arradd_
; Line 242
	mov	rdx, QWORD PTR dlb$1[rsp]
; Line 256
	lea	r8, QWORD PTR [rbp-1]
; Line 242
	add	rdx, 40					; 00000028H
	mov	rdi, rax
	mov	QWORD PTR [rbx], rdx
; Line 255
	lea	rbx, QWORD PTR [rdx+rax]
; Line 256
	mov	rdx, rsi
	mov	rcx, rbx
	call	memcpy
; Line 261
	mov	rsi, QWORD PTR [rsp+72]
	mov	rax, rdi
	mov	BYTE PTR [rbx+rbp-1], 0
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccdlb_stradd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_arradd
_TEXT	SEGMENT
dlb$ = 48
ccm$ = 48
isze$ = 56
cres$ = 64
ccom$ = 72
ccdlb_arradd PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 237
	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 240
	mov	rax, QWORD PTR [rcx]
	mov	r11, r8
	mov	rbx, rcx
; Line 241
	mov	r8, rdx
	xor	ecx, ecx
	mov	rdi, rdx
	test	rax, rax
	lea	r10, QWORD PTR [rax-40]
	cmove	r10, rcx
	lea	rcx, QWORD PTR dlb$[rsp]
	imul	r8, r9
	imul	rdx, r11
	mov	QWORD PTR dlb$[rsp], r10
	call	ccdlb_arradd_
; Line 242
	mov	rcx, QWORD PTR dlb$[rsp]
; Line 243
	xor	edx, edx
	add	rcx, 40					; 00000028H
	mov	QWORD PTR [rbx], rcx
; Line 244
	mov	rbx, QWORD PTR [rsp+56]
	div	rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccdlb_arradd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_arradd_
_TEXT	SEGMENT
dlb_$ = 64
rsze$ = 72
csze$ = 80
ccdlb_arradd_ PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 173
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 186
	mov	rbp, QWORD PTR [rcx]
; Line 191
	xor	ebx, ebx
; Line 196
	mov	r9d, DWORD PTR _tls_index
	xor	edi, edi
	mov	rax, QWORD PTR gs:88
	mov	r14, r8
	mov	esi, OFFSET FLAT:ccalloctr
	mov	r8, rdx
	mov	r15, rcx
	mov	rdx, rbp
	mov	rax, QWORD PTR [rax+r9*8]
	mov	rsi, QWORD PTR [rsi+rax]
; Line 198
	test	rbp, rbp
	je	SHORT $LN2@ccdlb_arra
; Line 199
	mov	rbx, QWORD PTR [rbp+24]
; Line 200
	mov	rdi, QWORD PTR [rbp+32]
; Line 202
	mov	rsi, QWORD PTR [rbp+8]
$LN2@ccdlb_arra:
; Line 209
	lea	rcx, QWORD PTR [rdi+r8]
	cmp	rbx, rcx
	jae	SHORT $LN5@ccdlb_arra
; Line 213
	lea	rax, QWORD PTR [rbx+rbx]
; Line 217
	mov	rbx, rcx
	cmp	rax, rcx
	cmovae	rbx, rax
	lea	rcx, QWORD PTR [rbx+40]
	call	rsi
; Line 218
	mov	QWORD PTR [r15], rax
	mov	rdx, rax
; Line 220
	test	rbp, rbp
	jne	SHORT $LN5@ccdlb_arra
; Line 222
	and	DWORD PTR [rax], -4			; fffffffcH
; Line 223
	mov	QWORD PTR [rax+16], rbp
; Line 224
	mov	QWORD PTR [rax+8], rsi
$LN5@ccdlb_arra:
; Line 233
	mov	rbp, QWORD PTR [rsp+72]
	lea	rcx, QWORD PTR [rdi+r14]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rax, rdi
	mov	QWORD PTR [rdx+24], rbx
	mov	rbx, QWORD PTR [rsp+64]
	mov	QWORD PTR [rdx+32], rcx
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
ccdlb_arradd_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblset
_TEXT	SEGMENT
tbl$ = 96
ccm$ = 96
isze$ = 104
len$ = 112
key$ = 120
ccdlb_tblset PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 407
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
; Line 410
	mov	rax, QWORD PTR [rcx]
; Line 411
	xor	r12d, r12d
	mov	rsi, rcx
	movsxd	rdi, edx
	test	rax, rax
	mov	rbp, r9
	mov	r15d, r8d
	lea	rcx, QWORD PTR [rax-40]
	cmove	rcx, r12
	mov	QWORD PTR tbl$[rsp], rcx
	test	rcx, rcx
	jne	SHORT $LN2@ccdlb_tbls
; Line 412
	mov	edx, edi
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblini
	mov	rcx, QWORD PTR tbl$[rsp]
$LN2@ccdlb_tbls:
; Line 414
	mov	edx, DWORD PTR _tls_index
; Line 418
	mov	r8, rbp
	mov	rax, QWORD PTR gs:88
	mov	r14d, OFFSET FLAT:cckey
	mov	rbx, QWORD PTR [rax+rdx*8]
	mov	edx, r15d
	add	r14, rbx
	mov	QWORD PTR [r14], r12
	call	ccdbl_query
	mov	rcx, rax
; Line 420
	mov	eax, OFFSET FLAT:ccerr
	add	rax, rbx
	mov	rbx, rdi
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN7@ccdlb_tbls
; Line 422
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rbp
	lea	rcx, QWORD PTR tbl$[rsp]
	mov	DWORD PTR [rax], r12d
	mov	r8d, r15d
	mov	rdx, rbx
	call	ccdlb_tblcat
	mov	rcx, rax
; Line 423
	mov	rax, QWORD PTR tbl$[rsp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR [rsi], rax
$LN7@ccdlb_tbls:
; Line 428
	mov	rax, QWORD PTR [rcx+16]
; Line 431
	xor	edx, edx
; Line 432
	mov	rbp, QWORD PTR [rsp+112]
	mov	QWORD PTR [r14], rax
	mov	rax, QWORD PTR [rcx+24]
	div	rbx
	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
ccdlb_tblset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblput
_TEXT	SEGMENT
tbl$ = 96
ccm$ = 96
isze$ = 104
len$ = 112
key$ = 120
ccdlb_tblput PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 376
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
; Line 379
	mov	rax, QWORD PTR [rcx]
; Line 380
	xor	edi, edi
	mov	r14, rcx
	movsxd	rsi, edx
	test	rax, rax
	mov	rbp, r9
	mov	r15d, r8d
	lea	rcx, QWORD PTR [rax-40]
	cmove	rcx, rdi
	mov	QWORD PTR tbl$[rsp], rcx
	test	rcx, rcx
	jne	SHORT $LN2@ccdlb_tblp
; Line 381
	mov	edx, esi
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblini
	mov	rcx, QWORD PTR tbl$[rsp]
$LN2@ccdlb_tblp:
; Line 382
	mov	edx, DWORD PTR _tls_index
; Line 387
	mov	r8, rbp
	mov	rax, QWORD PTR gs:88
	mov	r12d, OFFSET FLAT:cckey
	mov	rbx, QWORD PTR [rax+rdx*8]
	mov	edx, r15d
	mov	QWORD PTR [r12+rbx], rdi
	call	ccdbl_query
; Line 389
	mov	ecx, OFFSET FLAT:ccerr
	cmp	DWORD PTR [rcx+rbx], 1
	jne	SHORT $LN3@ccdlb_tblp
; Line 390
	mov	DWORD PTR [rcx+rbx], edi
; Line 392
	mov	r9, rbp
	lea	rcx, QWORD PTR tbl$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r8d, r15d
	mov	rdx, rsi
	call	ccdlb_tblcat
; Line 395
	mov	rdi, QWORD PTR [rax+24]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR [r12+rbx], rax
; Line 397
	mov	rax, QWORD PTR tbl$[rsp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR [r14], rax
; Line 398
	jmp	SHORT $LN4@ccdlb_tblp
$LN3@ccdlb_tblp:
; Line 399
	mov	DWORD PTR [rcx+rbx], 2
$LN4@ccdlb_tblp:
; Line 403
	mov	rbx, QWORD PTR [rsp+104]
	xor	edx, edx
	mov	rbp, QWORD PTR [rsp+112]
	mov	rax, rdi
	div	rsi
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
ccdlb_tblput ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblget
_TEXT	SEGMENT
ccm$ = 48
isze$ = 56
len$ = 64
key$ = 72
ccdlb_tblget PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 353
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 356
	mov	rax, QWORD PTR [rcx]
; Line 357
	xor	ebx, ebx
	mov	r10d, DWORD PTR _tls_index
	test	rax, rax
	mov	r14d, OFFSET FLAT:cckey
	mov	r11d, r8d
	movsxd	rsi, edx
	lea	rcx, QWORD PTR [rax-40]
	mov	rax, QWORD PTR gs:88
	cmove	rcx, rbx
	mov	rdi, QWORD PTR [rax+r10*8]
	mov	QWORD PTR [r14+rdi], rbx
; Line 362
	test	rcx, rcx
	je	SHORT $LN3@ccdlb_tblg
; Line 363
	mov	r8, r9
	mov	edx, r11d
	call	ccdbl_query
	mov	rcx, rax
; Line 364
	mov	eax, OFFSET FLAT:ccerr
	cmp	DWORD PTR [rax+rdi], ebx
	jne	SHORT $LN3@ccdlb_tblg
; Line 365
	mov	rax, QWORD PTR [rcx+16]
; Line 366
	mov	rbx, QWORD PTR [rcx+24]
	mov	QWORD PTR [r14+rdi], rax
$LN3@ccdlb_tblg:
; Line 372
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	xor	edx, edx
	div	rsi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccdlb_tblget ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccformat
_TEXT	SEGMENT
fmt$ = 48
ccformat PROC						; COMDAT
; File W:\cpp\void\ktt-c\cc.c
; Line 519
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 501
	mov	edx, DWORD PTR _tls_index
; Line 521
	lea	r9, QWORD PTR fmt$[rsp+8]
; Line 501
	mov	rax, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	rbx, QWORD PTR [rax+rdx*8]
; Line 493
	mov	edx, 255				; 000000ffH
; Line 501
	add	rbx, r8
; Line 493
	mov	r8, rcx
	mov	rcx, rbx
	call	stbsp_vsnprintf
; Line 525
	mov	rax, rbx
; Line 526
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccformat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccformatex
_TEXT	SEGMENT
buf$ = 48
len$ = 56
fmt$ = 64
ccformatex PROC						; COMDAT
; File W:\cpp\void\ktt-c\cc.c
; Line 508
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 40					; 00000028H
; Line 510
	lea	r9, QWORD PTR fmt$[rsp+8]
; Line 493
	call	stbsp_vsnprintf
; Line 515
	add	rsp, 40					; 00000028H
	ret	0
ccformatex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccformatv
_TEXT	SEGMENT
fmt$ = 48
vli$ = 56
ccformatv PROC						; COMDAT
; File W:\cpp\void\ktt-c\cc.c
; Line 498
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 501
	mov	r8d, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
	mov	r9d, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	rbx, QWORD PTR [rax+r8*8]
; Line 493
	mov	r8, rcx
; Line 501
	add	rbx, r9
; Line 493
	mov	r9, rdx
	mov	edx, 255				; 000000ffH
	mov	rcx, rbx
	call	stbsp_vsnprintf
; Line 503
	mov	rax, rbx
; Line 504
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccformatv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccformatvex
_TEXT	SEGMENT
buf$ = 8
len$ = 16
fmt$ = 24
vli$ = 32
ccformatvex PROC					; COMDAT
; File W:\cpp\void\ktt-c\cc.c
; Line 493
	jmp	stbsp_vsnprintf
ccformatvex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__raise_to_power10
_TEXT	SEGMENT
bt$1 = 80
bt$2 = 80
bt$3 = 80
bt$4 = 80
bt$5 = 80
bt$6 = 80
ohi$ = 80
bhi$7 = 88
ahi$8 = 88
bhi$9 = 88
ahi$10 = 88
bhi$11 = 88
ahi$12 = 88
ahi$13 = 88
bhi$14 = 88
ahi$15 = 88
ph$ = 88
bhi$16 = 88
ahi$17 = 88
olo$ = 88
d$ = 96
power$ = 104
stbsp__raise_to_power10 PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1639
	movsd	QWORD PTR [rsp+24], xmm2
	push	rbp
	mov	rbp, rsp
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+16], xmm8
	movaps	xmm5, xmm2
	movaps	XMMWORD PTR [rsp], xmm9
	mov	r10, rdx
	mov	r11, rcx
; Line 1641
	cmp	r9d, 22
	ja	$LN74@stbsp__rai
; Line 1642
	movzx	eax, BYTE PTR d$[rbp-64]
	mov	BYTE PTR bt$6[rbp-64], al
	movzx	eax, BYTE PTR d$[rbp-63]
	mov	BYTE PTR bt$6[rbp-63], al
	movzx	eax, BYTE PTR d$[rbp-62]
	mov	BYTE PTR bt$6[rbp-62], al
	movzx	eax, BYTE PTR d$[rbp-61]
	mov	BYTE PTR bt$6[rbp-61], al
	movzx	eax, BYTE PTR d$[rbp-60]
	mov	BYTE PTR bt$6[rbp-60], al
	movzx	eax, BYTE PTR d$[rbp-59]
	mov	BYTE PTR bt$6[rbp-59], al
	movzx	eax, BYTE PTR d$[rbp-58]
	mov	BYTE PTR bt$6[rbp-58], al
	movzx	eax, BYTE PTR d$[rbp-57]
	mov	BYTE PTR bt$6[rbp-57], al
	mov	rax, QWORD PTR bt$6[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	movsxd	r8, r9d
	mov	QWORD PTR bt$6[rbp-64], rax
	lea	r9, OFFSET FLAT:__ImageBase
	mov	BYTE PTR ahi$17[rbp-64], al
	movzx	eax, BYTE PTR bt$6[rbp-63]
	movsd	xmm3, QWORD PTR stbsp__bot[r9+r8*8]
	mov	BYTE PTR ahi$17[rbp-63], al
	movaps	xmm9, xmm3
	movzx	eax, BYTE PTR bt$6[rbp-62]
	mov	BYTE PTR ahi$17[rbp-62], al
	movzx	eax, BYTE PTR bt$6[rbp-61]
	mov	BYTE PTR ahi$17[rbp-61], al
	movzx	eax, BYTE PTR bt$6[rbp-60]
	mov	BYTE PTR ahi$17[rbp-60], al
	movzx	eax, BYTE PTR bt$6[rbp-59]
	mov	BYTE PTR ahi$17[rbp-59], al
	movzx	eax, BYTE PTR bt$6[rbp-58]
	mov	BYTE PTR ahi$17[rbp-58], al
	movzx	eax, BYTE PTR bt$6[rbp-57]
	mov	BYTE PTR ahi$17[rbp-57], al
	movsd	xmm1, QWORD PTR ahi$17[rbp-64]
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8]
	subsd	xmm5, xmm1
	mov	BYTE PTR bt$6[rbp-64], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+1]
	mov	BYTE PTR bt$6[rbp-63], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+2]
	mov	BYTE PTR bt$6[rbp-62], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+3]
	mov	BYTE PTR bt$6[rbp-61], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+4]
	mov	BYTE PTR bt$6[rbp-60], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+5]
	mov	BYTE PTR bt$6[rbp-59], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+6]
	mov	BYTE PTR bt$6[rbp-58], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+7]
	mov	BYTE PTR bt$6[rbp-57], al
	mov	rax, QWORD PTR bt$6[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm2
	mov	BYTE PTR bhi$16[rbp-64], al
	mov	QWORD PTR bt$6[rbp-64], rax
	movzx	eax, BYTE PTR bt$6[rbp-63]
	mov	BYTE PTR bhi$16[rbp-63], al
	movzx	eax, BYTE PTR bt$6[rbp-62]
	mov	BYTE PTR bhi$16[rbp-62], al
	movzx	eax, BYTE PTR bt$6[rbp-61]
	mov	BYTE PTR bhi$16[rbp-61], al
	movzx	eax, BYTE PTR bt$6[rbp-60]
	mov	BYTE PTR bhi$16[rbp-60], al
	movzx	eax, BYTE PTR bt$6[rbp-59]
	mov	BYTE PTR bhi$16[rbp-59], al
	movzx	eax, BYTE PTR bt$6[rbp-58]
	mov	BYTE PTR bhi$16[rbp-58], al
	movzx	eax, BYTE PTR bt$6[rbp-57]
	mov	BYTE PTR bhi$16[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$16[rbp-64]
	movaps	xmm8, xmm2
	subsd	xmm3, xmm2
	mulsd	xmm8, xmm1
	movaps	xmm0, xmm3
	subsd	xmm8, xmm9
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm5
	mulsd	xmm1, xmm2
	mulsd	xmm3, xmm5
	addsd	xmm8, xmm0
	addsd	xmm8, xmm1
	addsd	xmm8, xmm3
; Line 1643
	jmp	$LN85@stbsp__rai
$LN74@stbsp__rai:
; Line 1651
	mov	eax, 13
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	edx, r9d
	movaps	XMMWORD PTR [rsp+32], xmm7
	neg	edx
; Line 1655
	movaps	xmm9, xmm5
	test	r9d, r9d
	xorps	xmm8, xmm8
	cmovns	edx, r9d
	imul	r8d, edx, 713				; 000002c9H
	sar	r8d, 14
	cmp	r8d, eax
	cmovg	r8d, eax
	imul	eax, r8d, 23
	sub	edx, eax
; Line 1657
	test	r9d, r9d
	lea	r9, OFFSET FLAT:__ImageBase
	jns	$LN78@stbsp__rai
; Line 1658
	test	edx, edx
	je	$LN80@stbsp__rai
; Line 1660
	movzx	eax, BYTE PTR d$[rbp-64]
	movaps	xmm3, xmm5
	mov	BYTE PTR bt$5[rbp-64], al
	movzx	eax, BYTE PTR d$[rbp-63]
	mov	BYTE PTR bt$5[rbp-63], al
	movzx	eax, BYTE PTR d$[rbp-62]
	mov	BYTE PTR bt$5[rbp-62], al
	movzx	eax, BYTE PTR d$[rbp-61]
	mov	BYTE PTR bt$5[rbp-61], al
	movzx	eax, BYTE PTR d$[rbp-60]
	mov	BYTE PTR bt$5[rbp-60], al
	movzx	eax, BYTE PTR d$[rbp-59]
	mov	BYTE PTR bt$5[rbp-59], al
	movzx	eax, BYTE PTR d$[rbp-58]
	mov	BYTE PTR bt$5[rbp-58], al
	movzx	eax, BYTE PTR d$[rbp-57]
	mov	BYTE PTR bt$5[rbp-57], al
	mov	rax, QWORD PTR bt$5[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	movsxd	rcx, edx
	mov	QWORD PTR bt$5[rbp-64], rax
	mov	BYTE PTR ahi$15[rbp-64], al
	movzx	eax, BYTE PTR bt$5[rbp-63]
	movsd	xmm4, QWORD PTR stbsp__negbot[r9+rcx*8-8]
	mov	BYTE PTR ahi$15[rbp-63], al
	movaps	xmm9, xmm4
	movzx	eax, BYTE PTR bt$5[rbp-62]
	mov	BYTE PTR ahi$15[rbp-62], al
	movzx	eax, BYTE PTR bt$5[rbp-61]
	mov	BYTE PTR ahi$15[rbp-61], al
	movzx	eax, BYTE PTR bt$5[rbp-60]
	mov	BYTE PTR ahi$15[rbp-60], al
	movzx	eax, BYTE PTR bt$5[rbp-59]
	mov	BYTE PTR ahi$15[rbp-59], al
	movzx	eax, BYTE PTR bt$5[rbp-58]
	mov	BYTE PTR ahi$15[rbp-58], al
	movzx	eax, BYTE PTR bt$5[rbp-57]
	mov	BYTE PTR ahi$15[rbp-57], al
	movsd	xmm1, QWORD PTR ahi$15[rbp-64]
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-8]
	subsd	xmm3, xmm1
	mov	BYTE PTR bt$5[rbp-64], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-7]
	mov	BYTE PTR bt$5[rbp-63], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-6]
	mov	BYTE PTR bt$5[rbp-62], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-5]
	mov	BYTE PTR bt$5[rbp-61], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-4]
	mov	BYTE PTR bt$5[rbp-60], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-3]
	mov	BYTE PTR bt$5[rbp-59], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-2]
	mov	BYTE PTR bt$5[rbp-58], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-1]
	mov	BYTE PTR bt$5[rbp-57], al
	mov	rax, QWORD PTR bt$5[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm5
	mov	BYTE PTR bhi$14[rbp-64], al
	mov	QWORD PTR bt$5[rbp-64], rax
	movzx	eax, BYTE PTR bt$5[rbp-63]
	mov	BYTE PTR bhi$14[rbp-63], al
	movzx	eax, BYTE PTR bt$5[rbp-62]
	mov	BYTE PTR bhi$14[rbp-62], al
	movzx	eax, BYTE PTR bt$5[rbp-61]
	mov	BYTE PTR bhi$14[rbp-61], al
	movzx	eax, BYTE PTR bt$5[rbp-60]
	mov	BYTE PTR bhi$14[rbp-60], al
	movzx	eax, BYTE PTR bt$5[rbp-59]
	mov	BYTE PTR bhi$14[rbp-59], al
	movzx	eax, BYTE PTR bt$5[rbp-58]
	mov	BYTE PTR bhi$14[rbp-58], al
	movzx	eax, BYTE PTR bt$5[rbp-57]
	mov	BYTE PTR bhi$14[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$14[rbp-64]
	movaps	xmm8, xmm2
	subsd	xmm4, xmm2
	mulsd	xmm8, xmm1
	movaps	xmm0, xmm4
	subsd	xmm8, xmm9
; Line 1661
	mulsd	xmm5, QWORD PTR stbsp__negboterr[r9+rcx*8-8]
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, xmm2
	mulsd	xmm4, xmm3
	addsd	xmm8, xmm0
	addsd	xmm8, xmm1
	addsd	xmm8, xmm4
	addsd	xmm8, xmm5
$LN80@stbsp__rai:
; Line 1663
	test	r8d, r8d
	je	$LN352@stbsp__rai
; Line 1666
	movsxd	rcx, r8d
	movaps	xmm7, xmm8
	addsd	xmm7, xmm9
	movsd	xmm6, QWORD PTR stbsp__negtop[r9+rcx*8-8]
	movsd	QWORD PTR ph$[rbp-64], xmm7
	movaps	xmm0, xmm7
	movzx	eax, BYTE PTR ph$[rbp-64]
	subsd	xmm0, xmm9
	mov	BYTE PTR bt$4[rbp-64], al
	movaps	xmm9, xmm6
	movzx	eax, BYTE PTR ph$[rbp-63]
	movaps	xmm5, xmm7
	mov	BYTE PTR bt$4[rbp-63], al
	movzx	eax, BYTE PTR ph$[rbp-62]
	mov	BYTE PTR bt$4[rbp-62], al
	subsd	xmm8, xmm0
	movzx	eax, BYTE PTR ph$[rbp-61]
	mov	BYTE PTR bt$4[rbp-61], al
	movzx	eax, BYTE PTR ph$[rbp-60]
	mov	BYTE PTR bt$4[rbp-60], al
	movzx	eax, BYTE PTR ph$[rbp-59]
	mov	BYTE PTR bt$4[rbp-59], al
	movzx	eax, BYTE PTR ph$[rbp-58]
	mov	BYTE PTR bt$4[rbp-58], al
	movzx	eax, BYTE PTR ph$[rbp-57]
	mov	BYTE PTR bt$4[rbp-57], al
	mov	rax, QWORD PTR bt$4[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm7
	mov	QWORD PTR bt$4[rbp-64], rax
; Line 1667
	mulsd	xmm7, QWORD PTR stbsp__negtoperr[r9+rcx*8-8]
	mov	BYTE PTR ahi$13[rbp-64], al
	movzx	eax, BYTE PTR bt$4[rbp-63]
	mov	BYTE PTR ahi$13[rbp-63], al
	movzx	eax, BYTE PTR bt$4[rbp-62]
	mov	BYTE PTR ahi$13[rbp-62], al
	movzx	eax, BYTE PTR bt$4[rbp-61]
	mov	BYTE PTR ahi$13[rbp-61], al
	movzx	eax, BYTE PTR bt$4[rbp-60]
	mov	BYTE PTR ahi$13[rbp-60], al
	movzx	eax, BYTE PTR bt$4[rbp-59]
	mov	BYTE PTR ahi$13[rbp-59], al
	movzx	eax, BYTE PTR bt$4[rbp-58]
	mov	BYTE PTR ahi$13[rbp-58], al
	movzx	eax, BYTE PTR bt$4[rbp-57]
	mov	BYTE PTR ahi$13[rbp-57], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-8]
	mov	BYTE PTR bt$4[rbp-64], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-7]
	mov	BYTE PTR bt$4[rbp-63], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-6]
	mov	BYTE PTR bt$4[rbp-62], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-5]
	mov	BYTE PTR bt$4[rbp-61], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-4]
	mov	BYTE PTR bt$4[rbp-60], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-3]
	mov	BYTE PTR bt$4[rbp-59], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-2]
	mov	BYTE PTR bt$4[rbp-58], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-1]
; Line 1671
	jmp	$LN354@stbsp__rai
$LN78@stbsp__rai:
; Line 1672
	test	edx, edx
	je	$LN84@stbsp__rai
; Line 1674
	mov	ecx, 22
	mov	eax, edx
	cmp	edx, ecx
	cmovg	eax, ecx
; Line 1677
	movsxd	rcx, eax
	sub	edx, eax
	movzx	eax, BYTE PTR d$[rbp-64]
	mov	BYTE PTR bt$3[rbp-64], al
	movzx	eax, BYTE PTR d$[rbp-63]
	mov	BYTE PTR bt$3[rbp-63], al
	movzx	eax, BYTE PTR d$[rbp-62]
	mov	BYTE PTR bt$3[rbp-62], al
	movzx	eax, BYTE PTR d$[rbp-61]
	movsd	xmm3, QWORD PTR stbsp__bot[r9+rcx*8]
	mov	BYTE PTR bt$3[rbp-61], al
	movaps	xmm9, xmm3
	movzx	eax, BYTE PTR d$[rbp-60]
	mov	BYTE PTR bt$3[rbp-60], al
	movzx	eax, BYTE PTR d$[rbp-59]
	mov	BYTE PTR bt$3[rbp-59], al
	movzx	eax, BYTE PTR d$[rbp-58]
	mov	BYTE PTR bt$3[rbp-58], al
	movzx	eax, BYTE PTR d$[rbp-57]
	mov	BYTE PTR bt$3[rbp-57], al
	mov	rax, QWORD PTR bt$3[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm5
	mov	QWORD PTR bt$3[rbp-64], rax
	mov	BYTE PTR ahi$12[rbp-64], al
	movzx	eax, BYTE PTR bt$3[rbp-63]
	mov	BYTE PTR ahi$12[rbp-63], al
	movzx	eax, BYTE PTR bt$3[rbp-62]
	mov	BYTE PTR ahi$12[rbp-62], al
	movzx	eax, BYTE PTR bt$3[rbp-61]
	mov	BYTE PTR ahi$12[rbp-61], al
	movzx	eax, BYTE PTR bt$3[rbp-60]
	mov	BYTE PTR ahi$12[rbp-60], al
	movzx	eax, BYTE PTR bt$3[rbp-59]
	mov	BYTE PTR ahi$12[rbp-59], al
	movzx	eax, BYTE PTR bt$3[rbp-58]
	mov	BYTE PTR ahi$12[rbp-58], al
	movzx	eax, BYTE PTR bt$3[rbp-57]
	mov	BYTE PTR ahi$12[rbp-57], al
	movsd	xmm1, QWORD PTR ahi$12[rbp-64]
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8]
	subsd	xmm5, xmm1
	mov	BYTE PTR bt$3[rbp-64], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+1]
	mov	BYTE PTR bt$3[rbp-63], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+2]
	mov	BYTE PTR bt$3[rbp-62], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+3]
	mov	BYTE PTR bt$3[rbp-61], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+4]
	mov	BYTE PTR bt$3[rbp-60], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+5]
	mov	BYTE PTR bt$3[rbp-59], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+6]
	mov	BYTE PTR bt$3[rbp-58], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+7]
	mov	BYTE PTR bt$3[rbp-57], al
	mov	rax, QWORD PTR bt$3[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mov	BYTE PTR bhi$11[rbp-64], al
	mov	QWORD PTR bt$3[rbp-64], rax
	movzx	eax, BYTE PTR bt$3[rbp-63]
	mov	BYTE PTR bhi$11[rbp-63], al
	movzx	eax, BYTE PTR bt$3[rbp-62]
	mov	BYTE PTR bhi$11[rbp-62], al
	movzx	eax, BYTE PTR bt$3[rbp-61]
	mov	BYTE PTR bhi$11[rbp-61], al
	movzx	eax, BYTE PTR bt$3[rbp-60]
	mov	BYTE PTR bhi$11[rbp-60], al
	movzx	eax, BYTE PTR bt$3[rbp-59]
	mov	BYTE PTR bhi$11[rbp-59], al
	movzx	eax, BYTE PTR bt$3[rbp-58]
	mov	BYTE PTR bhi$11[rbp-58], al
	movzx	eax, BYTE PTR bt$3[rbp-57]
	mov	BYTE PTR bhi$11[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$11[rbp-64]
	subsd	xmm3, xmm2
	movaps	xmm0, xmm3
	movaps	xmm8, xmm2
	mulsd	xmm8, xmm1
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm5
	mulsd	xmm1, xmm2
	mulsd	xmm3, xmm5
	subsd	xmm8, xmm9
	addsd	xmm8, xmm0
	addsd	xmm8, xmm1
	addsd	xmm8, xmm3
; Line 1678
	test	edx, edx
	je	$LN84@stbsp__rai
; Line 1680
	movsxd	rcx, edx
	movaps	xmm6, xmm8
	addsd	xmm6, xmm9
	movsd	xmm5, QWORD PTR stbsp__bot[r9+rcx*8]
	movaps	xmm4, xmm5
	movsd	QWORD PTR ph$[rbp-64], xmm6
	movaps	xmm0, xmm6
	movzx	eax, BYTE PTR ph$[rbp-64]
	subsd	xmm0, xmm9
	mov	BYTE PTR bt$2[rbp-64], al
	movaps	xmm9, xmm5
	movzx	eax, BYTE PTR ph$[rbp-63]
	mov	BYTE PTR bt$2[rbp-63], al
	movzx	eax, BYTE PTR ph$[rbp-62]
	mov	BYTE PTR bt$2[rbp-62], al
	subsd	xmm8, xmm0
	movzx	eax, BYTE PTR ph$[rbp-61]
	mov	BYTE PTR bt$2[rbp-61], al
	movzx	eax, BYTE PTR ph$[rbp-60]
	mov	BYTE PTR bt$2[rbp-60], al
	movzx	eax, BYTE PTR ph$[rbp-59]
	mov	BYTE PTR bt$2[rbp-59], al
	movzx	eax, BYTE PTR ph$[rbp-58]
	mov	BYTE PTR bt$2[rbp-58], al
	movzx	eax, BYTE PTR ph$[rbp-57]
	mov	BYTE PTR bt$2[rbp-57], al
	mov	rax, QWORD PTR bt$2[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm6
	mov	QWORD PTR bt$2[rbp-64], rax
	mov	BYTE PTR ahi$10[rbp-64], al
	movzx	eax, BYTE PTR bt$2[rbp-63]
	mov	BYTE PTR ahi$10[rbp-63], al
	movzx	eax, BYTE PTR bt$2[rbp-62]
	mov	BYTE PTR ahi$10[rbp-62], al
	movzx	eax, BYTE PTR bt$2[rbp-61]
	mov	BYTE PTR ahi$10[rbp-61], al
	movzx	eax, BYTE PTR bt$2[rbp-60]
	mov	BYTE PTR ahi$10[rbp-60], al
	movzx	eax, BYTE PTR bt$2[rbp-59]
	mov	BYTE PTR ahi$10[rbp-59], al
	movzx	eax, BYTE PTR bt$2[rbp-58]
	mov	BYTE PTR ahi$10[rbp-58], al
	movzx	eax, BYTE PTR bt$2[rbp-57]
	mov	BYTE PTR ahi$10[rbp-57], al
	movsd	xmm1, QWORD PTR ahi$10[rbp-64]
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8]
	subsd	xmm6, xmm1
	mov	BYTE PTR bt$2[rbp-64], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+1]
	mov	BYTE PTR bt$2[rbp-63], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+2]
	mov	BYTE PTR bt$2[rbp-62], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+3]
	mov	BYTE PTR bt$2[rbp-61], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+4]
	mov	BYTE PTR bt$2[rbp-60], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+5]
	mov	BYTE PTR bt$2[rbp-59], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+6]
	mov	BYTE PTR bt$2[rbp-58], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+7]
	mov	BYTE PTR bt$2[rbp-57], al
	mov	rax, QWORD PTR bt$2[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$2[rbp-64], rax
	mov	BYTE PTR bhi$9[rbp-64], al
	movzx	eax, BYTE PTR bt$2[rbp-63]
	mov	BYTE PTR bhi$9[rbp-63], al
	movzx	eax, BYTE PTR bt$2[rbp-62]
	mov	BYTE PTR bhi$9[rbp-62], al
	movzx	eax, BYTE PTR bt$2[rbp-61]
	mov	BYTE PTR bhi$9[rbp-61], al
	movzx	eax, BYTE PTR bt$2[rbp-60]
	mov	BYTE PTR bhi$9[rbp-60], al
	movzx	eax, BYTE PTR bt$2[rbp-59]
	mov	BYTE PTR bhi$9[rbp-59], al
	movzx	eax, BYTE PTR bt$2[rbp-58]
	mov	BYTE PTR bhi$9[rbp-58], al
	movzx	eax, BYTE PTR bt$2[rbp-57]
	mov	BYTE PTR bhi$9[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$9[rbp-64]
	subsd	xmm4, xmm2
; Line 1681
	mulsd	xmm5, xmm8
	movaps	xmm3, xmm2
	mulsd	xmm3, xmm1
	movaps	xmm0, xmm4
	mulsd	xmm4, xmm6
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm6
	subsd	xmm3, xmm9
	mulsd	xmm1, xmm2
	addsd	xmm3, xmm0
	addsd	xmm3, xmm1
	addsd	xmm3, xmm4
	movaps	xmm8, xmm3
	addsd	xmm8, xmm5
$LN84@stbsp__rai:
; Line 1686
	test	r8d, r8d
	je	$LN352@stbsp__rai
; Line 1689
	movsxd	rcx, r8d
	movaps	xmm7, xmm8
	addsd	xmm7, xmm9
	movsd	xmm6, QWORD PTR stbsp__top[r9+rcx*8-8]
	movsd	QWORD PTR ph$[rbp-64], xmm7
	movaps	xmm0, xmm7
	movzx	eax, BYTE PTR ph$[rbp-64]
	subsd	xmm0, xmm9
	mov	BYTE PTR bt$1[rbp-64], al
	movaps	xmm9, xmm7
	movzx	eax, BYTE PTR ph$[rbp-63]
	movaps	xmm5, xmm7
; Line 1690
	mulsd	xmm7, QWORD PTR stbsp__toperr[r9+rcx*8-8]
	mov	BYTE PTR bt$1[rbp-63], al
	movzx	eax, BYTE PTR ph$[rbp-62]
	subsd	xmm8, xmm0
	mov	BYTE PTR bt$1[rbp-62], al
	movzx	eax, BYTE PTR ph$[rbp-61]
	mov	BYTE PTR bt$1[rbp-61], al
	movzx	eax, BYTE PTR ph$[rbp-60]
	mov	BYTE PTR bt$1[rbp-60], al
	movzx	eax, BYTE PTR ph$[rbp-59]
	mov	BYTE PTR bt$1[rbp-59], al
	movzx	eax, BYTE PTR ph$[rbp-58]
	mov	BYTE PTR bt$1[rbp-58], al
	movzx	eax, BYTE PTR ph$[rbp-57]
	mov	BYTE PTR bt$1[rbp-57], al
	mov	rax, QWORD PTR bt$1[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm6
	mov	QWORD PTR bt$1[rbp-64], rax
	mov	BYTE PTR ahi$8[rbp-64], al
	movzx	eax, BYTE PTR bt$1[rbp-63]
	mov	BYTE PTR ahi$8[rbp-63], al
	movzx	eax, BYTE PTR bt$1[rbp-62]
	mov	BYTE PTR ahi$8[rbp-62], al
	movzx	eax, BYTE PTR bt$1[rbp-61]
	mov	BYTE PTR ahi$8[rbp-61], al
	movzx	eax, BYTE PTR bt$1[rbp-60]
	mov	BYTE PTR ahi$8[rbp-60], al
	movzx	eax, BYTE PTR bt$1[rbp-59]
	mov	BYTE PTR ahi$8[rbp-59], al
	movzx	eax, BYTE PTR bt$1[rbp-58]
	mov	BYTE PTR ahi$8[rbp-58], al
	movzx	eax, BYTE PTR bt$1[rbp-57]
	mov	BYTE PTR ahi$8[rbp-57], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-8]
	mov	BYTE PTR bt$1[rbp-64], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-7]
	mov	BYTE PTR bt$1[rbp-63], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-6]
	mov	BYTE PTR bt$1[rbp-62], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-5]
	mov	BYTE PTR bt$1[rbp-61], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-4]
	mov	BYTE PTR bt$1[rbp-60], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-3]
	mov	BYTE PTR bt$1[rbp-59], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-2]
	mov	BYTE PTR bt$1[rbp-58], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-1]
$LN354@stbsp__rai:
; Line 1689
	movsd	xmm1, QWORD PTR ahi$8[rbp-64]
	movaps	xmm3, xmm6
	mov	BYTE PTR bt$1[rbp-57], al
	subsd	xmm5, xmm1
	mov	rax, QWORD PTR bt$1[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
; Line 1690
	mulsd	xmm6, xmm8
	mov	BYTE PTR bhi$7[rbp-64], al
	mov	QWORD PTR bt$1[rbp-64], rax
	movzx	eax, BYTE PTR bt$1[rbp-63]
	mov	BYTE PTR bhi$7[rbp-63], al
	movzx	eax, BYTE PTR bt$1[rbp-62]
	addsd	xmm7, xmm6
	mov	BYTE PTR bhi$7[rbp-62], al
	movzx	eax, BYTE PTR bt$1[rbp-61]
	mov	BYTE PTR bhi$7[rbp-61], al
	movzx	eax, BYTE PTR bt$1[rbp-60]
	mov	BYTE PTR bhi$7[rbp-60], al
	movzx	eax, BYTE PTR bt$1[rbp-59]
	mov	BYTE PTR bhi$7[rbp-59], al
	movzx	eax, BYTE PTR bt$1[rbp-58]
	mov	BYTE PTR bhi$7[rbp-58], al
	movzx	eax, BYTE PTR bt$1[rbp-57]
	mov	BYTE PTR bhi$7[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$7[rbp-64]
	subsd	xmm3, xmm2
	movaps	xmm4, xmm2
	mulsd	xmm4, xmm1
	movaps	xmm0, xmm3
	mulsd	xmm3, xmm5
	subsd	xmm4, xmm9
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm5
	mulsd	xmm1, xmm2
	addsd	xmm4, xmm0
	addsd	xmm4, xmm1
	addsd	xmm4, xmm3
	movaps	xmm8, xmm4
	addsd	xmm8, xmm7
$LN352@stbsp__rai:
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
$LN85@stbsp__rai:
; Line 1696
	movaps	xmm0, xmm8
	addsd	xmm0, xmm9
; Line 1697
	movsd	QWORD PTR [r11], xmm0
	subsd	xmm0, xmm9
; Line 1699
	movaps	xmm9, XMMWORD PTR [rsp]
	subsd	xmm8, xmm0
	movsd	QWORD PTR [r10], xmm8
	movaps	xmm8, XMMWORD PTR [rsp+16]
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
stbsp__raise_to_power10 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__count_clamp_callback
_TEXT	SEGMENT
buf$ = 8
user$ = 16
len$ = 24
stbsp__count_clamp_callback PROC			; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1426
	add	DWORD PTR [rdx+12], r8d
; Line 1427
	lea	rax, QWORD PTR [rdx+16]
; Line 1428
	ret	0
stbsp__count_clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__clamp_callback
_TEXT	SEGMENT
buf$ = 8
user$ = 16
len$ = 24
stbsp__clamp_callback PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1396
	add	DWORD PTR [rdx+12], r8d
	mov	r10d, r8d
; Line 1398
	mov	eax, DWORD PTR [rdx+8]
	mov	r9, rdx
	cmp	r8d, eax
	cmovg	r10d, eax
; Line 1401
	test	r10d, r10d
	je	SHORT $LN17@stbsp__cla
; Line 1402
	mov	rdx, QWORD PTR [rdx]
	movsxd	r11, r10d
	cmp	rcx, rdx
	je	SHORT $LN3@stbsp__cla
; Line 1407
	lea	r8, QWORD PTR [r11+rcx]
	npad	8
$LL4@stbsp__cla:
; Line 1409
	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	mov	BYTE PTR [rdx], al
	lea	rdx, QWORD PTR [rdx+1]
; Line 1410
	cmp	rcx, r8
	jb	SHORT $LL4@stbsp__cla
$LN3@stbsp__cla:
; Line 1412
	add	QWORD PTR [r9], r11
; Line 1413
	sub	DWORD PTR [r9+8], r10d
	mov	eax, DWORD PTR [r9+8]
$LN17@stbsp__cla:
; Line 1416
	test	eax, eax
	jle	SHORT $LN10@stbsp__cla
; Line 1418
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN10@stbsp__cla
	mov	rax, QWORD PTR [r9]
; Line 1419
	ret	0
$LN10@stbsp__cla:
	lea	rax, QWORD PTR [r9+16]
	ret	0
stbsp__clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__strlen_limited
_TEXT	SEGMENT
s$ = 8
limit$ = 16
stbsp__strlen_limited PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 310
	mov	r8d, edx
	mov	r9, rcx
; Line 311
	mov	rax, rcx
; Line 315
	test	cl, 3
	je	SHORT $LN17@stbsp__str
	npad	2
$LL2@stbsp__str:
; Line 318
	test	r8d, r8d
	je	SHORT $LN8@stbsp__str
	cmp	BYTE PTR [rax], 0
	je	SHORT $LN8@stbsp__str
; Line 321
	inc	rax
; Line 322
	dec	r8d
	test	al, 3
	jne	SHORT $LL2@stbsp__str
$LN17@stbsp__str:
; Line 330
	cmp	r8d, 4
	jb	SHORT $LN19@stbsp__str
	npad	6
$LL5@stbsp__str:
; Line 331
	mov	ecx, DWORD PTR [rax]
; Line 333
	lea	edx, DWORD PTR [rcx-16843009]
	not	ecx
	and	edx, ecx
	test	edx, -2139062144			; 80808080H
	jne	SHORT $LL7@stbsp__str
; Line 336
	add	rax, 4
; Line 337
	add	r8d, -4					; fffffffcH
	cmp	r8d, 4
	jae	SHORT $LL5@stbsp__str
$LN19@stbsp__str:
; Line 341
	test	r8d, r8d
	je	SHORT $LN8@stbsp__str
$LL7@stbsp__str:
	cmp	BYTE PTR [rax], 0
	je	SHORT $LN8@stbsp__str
; Line 342
	inc	rax
; Line 343
	add	r8d, -1					; ffffffffH
	jne	SHORT $LL7@stbsp__str
$LN8@stbsp__str:
; Line 347
	sub	eax, r9d
	ret	0
stbsp__strlen_limited ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__lead_sign
_TEXT	SEGMENT
fl$ = 8
sign$ = 16
stbsp__lead_sign PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 296
	mov	BYTE PTR [rdx], 0
; Line 297
	test	cl, cl
	jns	SHORT $LN2@stbsp__lea
; Line 298
	mov	WORD PTR [rdx], 11521			; 00002d01H
; Line 307
	ret	0
$LN2@stbsp__lea:
; Line 300
	test	cl, 4
	je	SHORT $LN4@stbsp__lea
; Line 301
	mov	WORD PTR [rdx], 8193			; 00002001H
; Line 307
	ret	0
$LN4@stbsp__lea:
; Line 303
	test	cl, 2
	je	SHORT $LN6@stbsp__lea
; Line 304
	mov	WORD PTR [rdx], 11009			; 00002b01H
$LN6@stbsp__lea:
; Line 307
	ret	0
stbsp__lead_sign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__real_to_parts
_TEXT	SEGMENT
d$ = 8
bits$ = 8
b$ = 16
expo$ = 16
value$ = 24
stbsp__real_to_parts PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1497
	movsd	QWORD PTR d$[rsp], xmm2
	mov	r8, rcx
; Line 1499
	movzx	eax, BYTE PTR d$[rsp]
; Line 1501
	mov	r9, 4503599627370495			; 000fffffffffffffH
	mov	BYTE PTR b$[rsp], al
	movzx	eax, BYTE PTR d$[rsp+1]
	mov	BYTE PTR b$[rsp+1], al
	movzx	eax, BYTE PTR d$[rsp+2]
	mov	BYTE PTR b$[rsp+2], al
	movzx	eax, BYTE PTR d$[rsp+3]
	mov	BYTE PTR b$[rsp+3], al
	movzx	eax, BYTE PTR d$[rsp+4]
	mov	BYTE PTR b$[rsp+4], al
	movzx	eax, BYTE PTR d$[rsp+5]
	mov	BYTE PTR b$[rsp+5], al
	movzx	eax, BYTE PTR d$[rsp+6]
	mov	BYTE PTR b$[rsp+6], al
	movzx	eax, BYTE PTR d$[rsp+7]
	mov	BYTE PTR b$[rsp+7], al
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, rax
	and	rcx, r9
	mov	QWORD PTR [r8], rcx
; Line 1502
	mov	rcx, rax
	sar	rcx, 52					; 00000034H
	and	ecx, 2047				; 000007ffH
; Line 1504
	shr	rax, 63					; 0000003fH
	sub	ecx, 1023				; 000003ffH
	mov	DWORD PTR [rdx], ecx
; Line 1505
	ret	0
stbsp__real_to_parts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__real_to_str
_TEXT	SEGMENT
pl$1 = 32
d$ = 32
start$ = 80
len$ = 88
out$ = 96
decimal_pos$ = 104
ph$2 = 112
bits$ = 112
value$ = 112
frac_digits$ = 120
stbsp__real_to_str PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1706
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
; Line 1711
	movsd	xmm2, QWORD PTR value$[rsp]
	mov	rbp, rcx
	movsd	QWORD PTR d$[rsp], xmm2
	mov	r15, rdx
; Line 1712
	movzx	eax, BYTE PTR d$[rsp]
	mov	r14, r9
	mov	BYTE PTR bits$[rsp], al
	mov	rbx, r8
	movzx	eax, BYTE PTR d$[rsp+1]
	mov	BYTE PTR bits$[rsp+1], al
	movzx	eax, BYTE PTR d$[rsp+2]
	mov	BYTE PTR bits$[rsp+2], al
	movzx	eax, BYTE PTR d$[rsp+3]
	mov	BYTE PTR bits$[rsp+3], al
	movzx	eax, BYTE PTR d$[rsp+4]
	mov	BYTE PTR bits$[rsp+4], al
	movzx	eax, BYTE PTR d$[rsp+5]
	mov	BYTE PTR bits$[rsp+5], al
	movzx	eax, BYTE PTR d$[rsp+6]
	mov	BYTE PTR bits$[rsp+6], al
	movzx	eax, BYTE PTR d$[rsp+7]
	mov	BYTE PTR bits$[rsp+7], al
; Line 1713
	mov	rdx, QWORD PTR bits$[rsp]
	mov	rcx, rdx
; Line 1714
	mov	rsi, rdx
	sar	rcx, 52					; 00000034H
	and	ecx, 2047				; 000007ffH
	shr	rsi, 63					; 0000003fH
; Line 1715
	test	esi, esi
	je	SHORT $LN21@stbsp__rea
; Line 1716
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
$LN21@stbsp__rea:
; Line 1718
	cmp	ecx, 2047				; 000007ffH
	jne	SHORT $LN22@stbsp__rea
; Line 1720
	mov	rax, 4503599627370495			; 000fffffffffffffH
	lea	rcx, OFFSET FLAT:??_C@_03EJEJBNFP@Inf@
	test	rdx, rax
	lea	rax, OFFSET FLAT:??_C@_03ICJPMMHB@NaN@
	cmovne	rcx, rax
	mov	QWORD PTR [rbp], rcx
; Line 1721
	mov	DWORD PTR [r9], 28672			; 00007000H
; Line 1722
	mov	DWORD PTR [r15], 3
; Line 1723
	jmp	$LN90@stbsp__rea
$LN22@stbsp__rea:
; Line 1726
	test	ecx, ecx
	jne	SHORT $LN6@stbsp__rea
; Line 1728
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	test	rdx, rax
	jne	SHORT $LN24@stbsp__rea
; Line 1730
	mov	edx, 1
	mov	DWORD PTR [r9], edx
; Line 1731
	mov	QWORD PTR [rbp], rbx
; Line 1732
	mov	BYTE PTR [r8], 48			; 00000030H
; Line 1733
	mov	DWORD PTR [r15], edx
; Line 1734
	jmp	$LN90@stbsp__rea
$LN24@stbsp__rea:
; Line 1738
	mov	rax, 2251799813685248			; 0008000000000000H
; Line 1739
	test	rdx, rax
	jne	SHORT $LN6@stbsp__rea
	npad	1
$LL5@stbsp__rea:
; Line 1740
	dec	ecx
; Line 1741
	sar	rax, 1
	test	rax, rdx
	je	SHORT $LL5@stbsp__rea
$LN6@stbsp__rea:
; Line 1751
	lea	eax, DWORD PTR [rcx-1023]
	mov	QWORD PTR [rsp+80], rdi
	mov	QWORD PTR [rsp+88], r12
; Line 1752
	test	eax, eax
	jns	SHORT $LN43@stbsp__rea
	imul	eax, eax, 617				; 00000269H
	cdq
	and	edx, 2047				; 000007ffH
	lea	edi, DWORD PTR [rdx+rax]
	sar	edi, 11
	jmp	SHORT $LN44@stbsp__rea
$LN43@stbsp__rea:
	imul	eax, eax, 1233				; 000004d1H
	cdq
	and	edx, 4095				; 00000fffH
	lea	edi, DWORD PTR [rdx+rax]
	sar	edi, 12
	inc	edi
$LN44@stbsp__rea:
; Line 1755
	mov	r9d, 18
	lea	rdx, QWORD PTR pl$1[rsp]
	sub	r9d, edi
	lea	rcx, QWORD PTR ph$2[rsp]
	call	stbsp__raise_to_power10
; Line 1758
	movsd	xmm4, QWORD PTR ph$2[rsp]
; Line 1766
	lea	r11d, DWORD PTR [rdi+1]
	cvttsd2si rcx, xmm4
	mov	rax, 1000000000000000000		; 0de0b6b3a7640000H
	movaps	xmm3, xmm4
	xorps	xmm2, xmm2
	cvtsi2sd xmm2, rcx
	subsd	xmm3, xmm2
	movaps	xmm1, xmm3
	movaps	xmm0, xmm3
	subsd	xmm1, xmm4
	subsd	xmm0, xmm1
	addsd	xmm1, xmm2
	subsd	xmm4, xmm0
	subsd	xmm4, xmm1
	addsd	xmm4, xmm3
	addsd	xmm4, QWORD PTR pl$1[rsp]
	cvttsd2si r9, xmm4
	add	r9, rcx
	mov	ecx, DWORD PTR frac_digits$[rsp]
	cmp	r9, rax
	mov	QWORD PTR bits$[rsp], r9
	cmovb	r11d, edi
	test	ecx, ecx
	jns	SHORT $LN45@stbsp__rea
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	jmp	SHORT $LN46@stbsp__rea
$LN45@stbsp__rea:
	add	ecx, r11d
$LN46@stbsp__rea:
; Line 1767
	lea	r12, OFFSET FLAT:__ImageBase
	mov	edi, r11d
	cmp	ecx, 24
	jae	SHORT $noround$92
; Line 1771
	cmp	r9, 1000000000				; 3b9aca00H
	mov	eax, 10
	mov	edx, 1
	cmovb	eax, edx
	mov	r10d, eax
	cmp	r9, QWORD PTR stbsp__powten[r12+rax*8]
	jb	SHORT $LN8@stbsp__rea
$LL7@stbsp__rea:
; Line 1772
	inc	r10d
; Line 1773
	cmp	r10d, 20
	je	SHORT $noround$92
; Line 1771
	cmp	r9, QWORD PTR stbsp__powten[r12+r10*8]
	jae	SHORT $LL7@stbsp__rea
$LN8@stbsp__rea:
; Line 1776
	cmp	ecx, r10d
	jae	SHORT $noround$92
; Line 1779
	mov	eax, r10d
	sub	eax, ecx
; Line 1780
	cmp	eax, 24
	jae	SHORT $noround$92
; Line 1782
	cdqe
; Line 1786
	lea	edi, DWORD PTR [r11+1]
	xor	edx, edx
	mov	rcx, QWORD PTR stbsp__powten[r12+rax*8]
	mov	r8, rcx
	shr	r8, 1
	add	r8, r9
	mov	rax, r8
	div	rcx
	cmp	r8, QWORD PTR stbsp__powten[r12+r10*8]
	mov	r9, rax
	mov	QWORD PTR bits$[rsp], rax
	cmovb	edi, r11d
$noround$92:
; Line 1792
	test	r9, r9
	je	$donez$93
; Line 1795
	mov	eax, -1
	cmp	r9, rax
	jle	SHORT $LN57@stbsp__rea
	mov	r11, 2361183241434822607		; 20c49ba5e353f7cfH
	mov	r10, 4294967296000			; 000003e800000000H
	npad	15
$LL9@stbsp__rea:
; Line 1797
	mov	rax, r11
	mov	r8, r9
	imul	r9
	sar	rdx, 7
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	imul	rcx, rdx, 1000				; 000003e8H
	cmp	r9, rcx
	jne	SHORT $donez$93
; Line 1799
	mov	QWORD PTR bits$[rsp], rdx
	mov	r9, rdx
	cmp	r8, r10
	jge	SHORT $LL9@stbsp__rea
$LN57@stbsp__rea:
; Line 1801
	mov	r8d, DWORD PTR bits$[rsp]
	mov	eax, 274877907				; 10624dd3H
	mul	r8d
	shr	edx, 6
; Line 1802
	imul	ecx, edx, 1000				; 000003e8H
	cmp	r8d, ecx
	jne	SHORT $LN13@stbsp__rea
	npad	5
$LL12@stbsp__rea:
; Line 1803
	mov	r8d, edx
	mov	eax, 274877907				; 10624dd3H
	mul	edx
	shr	edx, 6
	imul	ecx, edx, 1000				; 000003e8H
	cmp	r8d, ecx
	je	SHORT $LL12@stbsp__rea
$LN13@stbsp__rea:
; Line 1804
	mov	r9d, r8d
	mov	QWORD PTR bits$[rsp], r9
$donez$93:
; Line 1809
	add	rbx, 64					; 00000040H
; Line 1810
	mov	r11, 6189700196426901375		; 55e63b88c230e77fH
	xor	r8d, r8d
$LL14@stbsp__rea:
; Line 1813
	lea	r10, QWORD PTR [rbx-8]
; Line 1815
	cmp	r9, 100000000				; 05f5e100H
	jl	SHORT $LN38@stbsp__rea
; Line 1816
	mov	rax, r11
	imul	r9
	sar	rdx, 25
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	imul	eax, edx, 100000000			; 05f5e100H
; Line 1817
	mov	QWORD PTR bits$[rsp], rdx
	sub	r9d, eax
	mov	ecx, r9d
	mov	r9, rdx
; Line 1818
	jmp	SHORT $LN54@stbsp__rea
$LN38@stbsp__rea:
; Line 1819
	mov	ecx, DWORD PTR bits$[rsp]
; Line 1820
	xor	r9d, r9d
	mov	QWORD PTR bits$[rsp], r9
$LN54@stbsp__rea:
; Line 1822
	test	ecx, ecx
	je	SHORT $LN18@stbsp__rea
	npad	8
$LL17@stbsp__rea:
; Line 1823
	sub	rbx, 2
; Line 1824
	mov	eax, 1374389535				; 51eb851fH
	mul	ecx
; Line 1826
	add	r8d, 2
	shr	edx, 5
	imul	eax, edx, 100				; 00000064H
	sub	ecx, eax
	add	ecx, ecx
	movzx	eax, WORD PTR stbsp__digitpair[rcx+r12+2]
	mov	ecx, edx
	mov	WORD PTR [rbx], ax
	test	edx, edx
	jne	SHORT $LL17@stbsp__rea
$LN18@stbsp__rea:
; Line 1828
	test	r9, r9
	je	SHORT $LN59@stbsp__rea
; Line 1835
	cmp	rbx, r10
	je	$LL14@stbsp__rea
	mov	eax, ebx
	sub	eax, r10d
	add	r8d, eax
$LL73@stbsp__rea:
; Line 1836
	dec	rbx
	mov	BYTE PTR [rbx], 48			; 00000030H
	cmp	rbx, r10
	jne	SHORT $LL73@stbsp__rea
; Line 1839
	jmp	$LL14@stbsp__rea
$LN59@stbsp__rea:
	mov	r12, QWORD PTR [rsp+88]
; Line 1829
	test	r8d, r8d
	je	SHORT $LN41@stbsp__rea
	cmp	BYTE PTR [rbx], 48			; 00000030H
	jne	SHORT $LN41@stbsp__rea
; Line 1830
	inc	rbx
; Line 1831
	dec	r8d
$LN41@stbsp__rea:
; Line 1841
	mov	DWORD PTR [r14], edi
; Line 1844
	mov	rdi, QWORD PTR [rsp+80]
	mov	QWORD PTR [rbp], rbx
	mov	DWORD PTR [r15], r8d
$LN90@stbsp__rea:
; Line 1845
	mov	rbx, QWORD PTR [rsp+96]
	mov	eax, esi
	mov	rbp, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
stbsp__real_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_set_separators
_TEXT	SEGMENT
pcomma$ = 8
pperiod$ = 16
stbsp_set_separators PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 276
	mov	BYTE PTR stbsp__period, dl
; Line 277
	mov	BYTE PTR stbsp__comma, cl
; Line 278
	ret	0
stbsp_set_separators ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_vsprintfcb
_TEXT	SEGMENT
stbsp__comma$1$ = 48
fl$1$ = 52
pr$3$ = 56
tlen$1$ = 60
lead$2$ = 64
l$1 = 68
dp$2 = 72
buf$GSCopy$1$ = 80
va$GSCopy$1$ = 88
sn$1$ = 96
fw$2$ = 104
f$1$ = 112
cs$2$ = 120
c$1$ = 120
sn$3 = 120
tz$1$ = 128
user$GSCopy$1$ = 136
callback$GSCopy$1$ = 144
d$4 = 152
b$5 = 160
lead$6 = 168
tail$7 = 176
num$8 = 192
__$ArrayPad$ = 704
callback$ = 848
user$ = 856
buf$ = 864
fmt$ = 872
va$ = 880
stbsp_vsprintfcb PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 350
$LN1222:
	mov	rax, rsp
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rax-584]
	sub	rsp, 776				; 00000308H
	movaps	XMMWORD PTR [rax-88], xmm6
	movaps	XMMWORD PTR [rax-104], xmm7
	movaps	XMMWORD PTR [rax-120], xmm8
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax
	mov	r10, QWORD PTR va$[rbp-256]
; Line 355
	xor	esi, esi
; Line 358
	movsd	xmm6, QWORD PTR __xmm@80000000000000008000000000000000
	mov	r15, r9
	movsd	xmm8, QWORD PTR __real@408f400000000000
	mov	r14d, esi
	movsd	xmm7, QWORD PTR __real@4090000000000000
	mov	r11, r8
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	mov	r9, rdx
	mov	DWORD PTR tlen$1$[rsp], esi
	mov	r12, rcx
	mov	QWORD PTR buf$GSCopy$1$[rsp], r8
	mov	rdi, r8
	mov	QWORD PTR user$GSCopy$1$[rbp-256], rdx
	mov	QWORD PTR callback$GSCopy$1$[rbp-256], rcx
$LL2@stbsp_vspr:
; Line 395
	lea	rbx, QWORD PTR [r10]
$LL8@stbsp_vspr:
; Line 393
	test	r15b, 3
	jne	SHORT $schk1$1223
; Line 409
	mov	edx, DWORD PTR [r15]
; Line 410
	mov	ecx, edx
; Line 411
	mov	eax, edx
	not	ecx
	xor	eax, 623191333				; 25252525H
	and	ecx, -2139062144			; 80808080H
	sub	eax, 16843009				; 01010101H
	test	eax, ecx
	jne	SHORT $schk1$1223
	npad	5
$LL10@stbsp_vspr:
; Line 413
	lea	eax, DWORD PTR [rdx-16843009]
	test	eax, ecx
	jne	$LN539@stbsp_vspr
; Line 415
	test	r12, r12
	je	SHORT $LN137@stbsp_vspr
; Line 416
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	eax, 4
	jl	SHORT $schk1$1223
$LN137@stbsp_vspr:
; Line 430
	add	r15, 4
	mov	DWORD PTR [rdi], edx
	add	rdi, 4
	mov	edx, DWORD PTR [r15]
	mov	ecx, edx
	mov	eax, edx
	not	ecx
	xor	eax, 623191333				; 25252525H
	and	ecx, -2139062144			; 80808080H
	sub	eax, 16843009				; 01010101H
	test	eax, ecx
	je	SHORT $LL10@stbsp_vspr
$schk1$1223:
; Line 395
	movzx	eax, BYTE PTR [r15]
	cmp	al, 37					; 00000025H
	je	SHORT $scandd$1224
$schk2$1225:
; Line 398
	test	al, al
	je	$endfmt$1226
; Line 400
	test	r12, r12
	je	SHORT $LN132@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN132@stbsp_vspr
	add	r14d, r8d
	mov	rdx, r9
	mov	rcx, r11
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
	mov	r9, QWORD PTR user$GSCopy$1$[rbp-256]
$LN132@stbsp_vspr:
; Line 401
	movzx	eax, BYTE PTR [r15]
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 402
	inc	r15
	jmp	$LL8@stbsp_vspr
$LN539@stbsp_vspr:
; Line 414
	movzx	eax, BYTE PTR [r15]
	jmp	SHORT $schk2$1225
$scandd$1224:
; Line 445
	movsx	eax, BYTE PTR [r15+1]
	inc	r15
	sub	eax, 32					; 00000020H
	mov	QWORD PTR f$1$[rsp], r15
	mov	DWORD PTR fw$2$[rsp], esi
	mov	r14d, -1
	mov	DWORD PTR pr$3$[rsp], r14d
	mov	r8d, esi
	mov	DWORD PTR fl$1$[rsp], esi
	mov	r13d, esi
	mov	DWORD PTR tz$1$[rbp-256], esi
	cmp	eax, 63					; 0000003fH
	ja	$flags_done$1228
	lea	rdx, OFFSET FLAT:__ImageBase
	npad	5
$LL13@stbsp_vspr:
	cdqe
	movzx	eax, BYTE PTR $LN1022@stbsp_vspr[rdx+rax]
	mov	ecx, DWORD PTR $LN1023@stbsp_vspr[rdx+rax*4]
	add	rcx, rdx
	jmp	rcx
$LN138@stbsp_vspr:
; Line 448
	or	r13d, 1
; Line 450
	jmp	SHORT $LN1206@stbsp_vspr
$LN139@stbsp_vspr:
; Line 453
	or	r13d, 2
; Line 455
	jmp	SHORT $LN1206@stbsp_vspr
$LN140@stbsp_vspr:
; Line 458
	or	r13d, 4
; Line 460
	jmp	SHORT $LN1206@stbsp_vspr
$LN141@stbsp_vspr:
; Line 463
	or	r13d, 8
; Line 465
	jmp	SHORT $LN1206@stbsp_vspr
$LN142@stbsp_vspr:
; Line 468
	or	r13d, 64				; 00000040H
; Line 470
	jmp	SHORT $LN1206@stbsp_vspr
$LN143@stbsp_vspr:
; Line 473
	bt	r13d, 8
	jae	SHORT $LN144@stbsp_vspr
; Line 474
	mov	ecx, 2048				; 00000800H
; Line 479
	mov	eax, 4096				; 00001000H
	test	r13d, ecx
	cmove	eax, ecx
	or	r13d, eax
	jmp	SHORT $LN1206@stbsp_vspr
$LN144@stbsp_vspr:
; Line 480
	bts	r13d, 8
; Line 483
	jmp	SHORT $LN1206@stbsp_vspr
$LN148@stbsp_vspr:
; Line 486
	bts	r13d, 10
$LN1206@stbsp_vspr:
; Line 445
	movsx	eax, BYTE PTR [r15+1]
	inc	r15
	sub	eax, 32					; 00000020H
	mov	DWORD PTR fl$1$[rsp], r13d
	mov	QWORD PTR f$1$[rsp], r15
	cmp	eax, 63					; 0000003fH
	jbe	SHORT $LL13@stbsp_vspr
; Line 1327
	jmp	SHORT $LN1207@stbsp_vspr
$LN149@stbsp_vspr:
; Line 491
	or	r13d, 16
	mov	DWORD PTR fl$1$[rsp], r13d
; Line 492
	inc	r15
$LN1207@stbsp_vspr:
; Line 500
	mov	QWORD PTR f$1$[rsp], r15
$flags_done$1228:
	movzx	eax, BYTE PTR [r15]
	cmp	al, 42					; 0000002aH
	jne	SHORT $LN484@stbsp_vspr
; Line 501
	mov	r10, QWORD PTR va$GSCopy$1$[rsp]
	mov	r8d, DWORD PTR [rbx]
	add	r10, 8
; Line 502
	movzx	eax, BYTE PTR [r15+1]
	inc	r15
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	mov	DWORD PTR fw$2$[rsp], r8d
	mov	QWORD PTR f$1$[rsp], r15
; Line 503
	jmp	SHORT $LN19@stbsp_vspr
$LN484@stbsp_vspr:
; Line 504
	cmp	al, 48					; 00000030H
	jl	SHORT $LN1166@stbsp_vspr
	npad	6
$LL18@stbsp_vspr:
	movzx	edx, al
	cmp	dl, 57					; 00000039H
	ja	SHORT $LN1141@stbsp_vspr
	movzx	eax, BYTE PTR [r15+1]
; Line 505
	lea	r8d, DWORD PTR [r8+r8*4]
; Line 506
	inc	r15
	lea	r8d, DWORD PTR [r8-24]
	lea	r8d, DWORD PTR [rdx+r8*2]
	cmp	al, 48					; 00000030H
	jge	SHORT $LL18@stbsp_vspr
$LN1141@stbsp_vspr:
	mov	DWORD PTR fw$2$[rsp], r8d
	mov	QWORD PTR f$1$[rsp], r15
$LN1166@stbsp_vspr:
; Line 510
	mov	r10, QWORD PTR va$GSCopy$1$[rsp]
$LN19@stbsp_vspr:
	mov	rcx, r10
	cmp	al, 46					; 0000002eH
	jne	SHORT $LN21@stbsp_vspr
; Line 512
	movzx	eax, BYTE PTR [r15+1]
	inc	r15
	mov	QWORD PTR f$1$[rsp], r15
	cmp	al, 42					; 0000002aH
	jne	SHORT $LN156@stbsp_vspr
; Line 514
	movzx	eax, BYTE PTR [r15+1]
	add	r10, 8
	mov	r14d, DWORD PTR [rcx]
	inc	r15
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
; Line 515
	jmp	SHORT $LN1142@stbsp_vspr
$LN156@stbsp_vspr:
; Line 516
	mov	DWORD PTR pr$3$[rsp], esi
	mov	r14d, esi
; Line 517
	cmp	al, 48					; 00000030H
	jl	SHORT $LN21@stbsp_vspr
$LL20@stbsp_vspr:
	movzx	edx, al
	cmp	dl, 57					; 00000039H
	ja	SHORT $LN1142@stbsp_vspr
	movzx	eax, BYTE PTR [r15+1]
; Line 518
	lea	r14d, DWORD PTR [r14+r14*4]
; Line 519
	inc	r15
	lea	r14d, DWORD PTR [r14-24]
	lea	r14d, DWORD PTR [rdx+r14*2]
	cmp	al, 48					; 00000030H
	jge	SHORT $LL20@stbsp_vspr
$LN1142@stbsp_vspr:
; Line 525
	mov	DWORD PTR pr$3$[rsp], r14d
	mov	QWORD PTR f$1$[rsp], r15
$LN21@stbsp_vspr:
	movsx	eax, al
	lea	r8, OFFSET FLAT:__ImageBase
	add	eax, -73				; ffffffffffffffb7H
	mov	r9, r10
	cmp	eax, 49					; 00000031H
	ja	$LN169@stbsp_vspr
	cdqe
	movzx	eax, BYTE PTR $LN1020@stbsp_vspr[r8+rax]
	mov	ecx, DWORD PTR $LN1021@stbsp_vspr[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN158@stbsp_vspr:
; Line 529
	inc	r15
	bts	r13d, 9
	mov	DWORD PTR fl$1$[rsp], r13d
	mov	QWORD PTR f$1$[rsp], r15
; Line 530
	cmp	BYTE PTR [r15], 104			; 00000068H
	jne	SHORT $LN169@stbsp_vspr
; Line 531
	inc	r15
	mov	QWORD PTR f$1$[rsp], r15
; Line 532
	jmp	SHORT $LN169@stbsp_vspr
$LN160@stbsp_vspr:
; Line 536
	inc	r15
	mov	QWORD PTR f$1$[rsp], r15
; Line 537
	cmp	BYTE PTR [r15], 108			; 0000006cH
	jne	SHORT $LN169@stbsp_vspr
$LN162@stbsp_vspr:
; Line 572
	or	r13d, 32				; 00000020H
	inc	r15
	mov	QWORD PTR f$1$[rsp], r15
	jmp	SHORT $LN1220@stbsp_vspr
$LN165@stbsp_vspr:
; Line 558
	movzx	eax, BYTE PTR [r15+1]
	lea	rcx, QWORD PTR [r15+1]
	cmp	al, 54					; 00000036H
	jne	SHORT $LN935@stbsp_vspr
	cmp	BYTE PTR [r15+2], 52			; 00000034H
	jne	SHORT $LN935@stbsp_vspr
; Line 559
	or	r13d, 32				; 00000020H
; Line 560
	add	r15, 3
	mov	QWORD PTR f$1$[rsp], r15
	jmp	SHORT $LN1220@stbsp_vspr
$LN935@stbsp_vspr:
; Line 561
	cmp	al, 51					; 00000033H
	jne	SHORT $LN168@stbsp_vspr
	cmp	BYTE PTR [r15+2], 50			; 00000032H
	jne	SHORT $LN168@stbsp_vspr
; Line 562
	add	r15, 3
	mov	QWORD PTR f$1$[rsp], r15
; Line 563
	jmp	SHORT $LN169@stbsp_vspr
$LN168@stbsp_vspr:
; Line 564
	or	r13d, 32				; 00000020H
; Line 565
	mov	QWORD PTR f$1$[rsp], rcx
	mov	r15, rcx
$LN1220@stbsp_vspr:
; Line 572
	mov	DWORD PTR fl$1$[rsp], r13d
$LN169@stbsp_vspr:
	movsx	edx, BYTE PTR [r15]
	movzx	r15d, BYTE PTR stbsp__comma
	mov	BYTE PTR stbsp__comma$1$[rsp], r15b
	lea	eax, DWORD PTR [rdx-65]
	cmp	eax, 55					; 00000037H
	ja	$LN362@stbsp_vspr
	cdqe
	movzx	eax, BYTE PTR $LN1018@stbsp_vspr[r8+rax]
	mov	ecx, DWORD PTR $LN1019@stbsp_vspr[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN171@stbsp_vspr:
; Line 589
	mov	rax, QWORD PTR [r9]
; Line 590
	lea	rsi, OFFSET FLAT:??_C@_04MLLLIHIP@null@
	add	r10, 8
; Line 594
	mov	edx, -1					; ffffffffH
	test	rax, rax
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	cmovne	rsi, rax
	test	r14d, r14d
; Line 311
	mov	r13, rsi
; Line 594
	cmovns	edx, r14d
; Line 311
	test	sil, 3
; Line 315
	je	SHORT $LN544@stbsp_vspr
	npad	1
$LL434@stbsp_vspr:
; Line 318
	test	edx, edx
	je	SHORT $LN1143@stbsp_vspr
	cmp	BYTE PTR [r13], 0
	je	SHORT $LN1143@stbsp_vspr
; Line 321
	inc	r13
; Line 322
	dec	edx
	test	r13b, 3
	jne	SHORT $LL434@stbsp_vspr
$LN544@stbsp_vspr:
; Line 330
	cmp	edx, 4
	jb	SHORT $LN546@stbsp_vspr
	npad	5
$LL437@stbsp_vspr:
; Line 331
	mov	eax, DWORD PTR [r13]
; Line 333
	lea	ecx, DWORD PTR [rax-16843009]
	not	eax
	and	ecx, eax
	test	ecx, -2139062144			; 80808080H
	jne	SHORT $LL439@stbsp_vspr
; Line 336
	add	r13, 4
; Line 337
	add	edx, -4					; fffffffcH
	cmp	edx, 4
	jae	SHORT $LL437@stbsp_vspr
$LN546@stbsp_vspr:
; Line 341
	test	edx, edx
	je	SHORT $LN1143@stbsp_vspr
$LL439@stbsp_vspr:
	cmp	BYTE PTR [r13], 0
	je	SHORT $LN1143@stbsp_vspr
; Line 342
	inc	r13
; Line 343
	add	edx, -1					; ffffffffH
	jne	SHORT $LL439@stbsp_vspr
$LN1143@stbsp_vspr:
; Line 594
	sub	r13d, esi
; Line 595
	xor	r12b, r12b
; Line 597
	xor	r10d, r10d
	mov	QWORD PTR sn$1$[rsp], r13
	mov	r14d, r10d
; Line 598
	mov	DWORD PTR dp$2[rsp], r10d
; Line 599
	mov	r15d, r10d
	mov	DWORD PTR l$1[rsp], r13d
	mov	BYTE PTR lead$6[rbp-256], r12b
	mov	BYTE PTR tail$7[rbp-256], r12b
; Line 1146
	jmp	$scopy$1229
$LN174@stbsp_vspr:
; Line 606
	movzx	eax, BYTE PTR [r9]
	add	r10, 8
; Line 608
	xor	r12b, r12b
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
; Line 611
	xor	r10d, r10d
	mov	BYTE PTR num$8[rbp+255], al
	mov	BYTE PTR tail$7[rbp-256], r12b
; Line 1146
	jmp	$LN1208@stbsp_vspr
$LN176@stbsp_vspr:
; Line 617
	mov	rax, QWORD PTR [r9]
	add	r10, 8
; Line 618
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	ecx, edi
; Line 1344
	mov	r15, QWORD PTR f$1$[rsp]
	sub	ecx, r11d
	mov	r9, QWORD PTR user$GSCopy$1$[rbp-256]
	add	ecx, r14d
	mov	DWORD PTR [rax], ecx
	inc	r15
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	jmp	$LL2@stbsp_vspr
$LN177@stbsp_vspr:
; Line 642
	movsd	xmm0, QWORD PTR [r9]
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
; Line 1497
	movsd	QWORD PTR d$4[rbp-256], xmm0
; Line 641
	lea	r8, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	cmp	dl, 65					; 00000041H
; Line 1501
	mov	rcx, 4503599627370495			; 000fffffffffffffH
; Line 641
	cmove	r8, rax
; Line 1499
	movzx	eax, BYTE PTR d$4[rbp-256]
	mov	BYTE PTR b$5[rbp-256], al
; Line 642
	add	r10, 8
; Line 1499
	movzx	eax, BYTE PTR d$4[rbp-255]
; Line 643
	cmp	r14d, -1
; Line 1499
	mov	BYTE PTR b$5[rbp-255], al
	movzx	eax, BYTE PTR d$4[rbp-254]
	mov	BYTE PTR b$5[rbp-254], al
	movzx	eax, BYTE PTR d$4[rbp-253]
	mov	BYTE PTR b$5[rbp-253], al
	movzx	eax, BYTE PTR d$4[rbp-252]
	mov	BYTE PTR b$5[rbp-252], al
	movzx	eax, BYTE PTR d$4[rbp-251]
	mov	BYTE PTR b$5[rbp-251], al
	movzx	eax, BYTE PTR d$4[rbp-250]
	mov	BYTE PTR b$5[rbp-250], al
	movzx	eax, BYTE PTR d$4[rbp-249]
	mov	BYTE PTR b$5[rbp-249], al
; Line 1501
	mov	rax, QWORD PTR b$5[rbp-256]
; Line 1502
	mov	r11, rax
; Line 642
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
; Line 1501
	mov	rdx, rax
; Line 643
	mov	r10d, 6
	cmove	r14d, r10d
; Line 1502
	sar	r11, 52					; 00000034H
	and	r11d, 2047				; 000007ffH
; Line 1504
	shr	rax, 63					; 0000003fH
	sub	r11d, 1023				; 000003ffH
	and	rdx, rcx
; Line 646
	test	al, al
	je	SHORT $LN180@stbsp_vspr
; Line 647
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN180@stbsp_vspr:
; Line 296
	xor	r9b, r9b
	mov	BYTE PTR lead$6[rbp-256], r9b
; Line 297
	test	r13b, r13b
	jns	SHORT $LN452@stbsp_vspr
; Line 298
	mov	WORD PTR lead$6[rbp-256], 11521		; 00002d01H
; Line 299
	jmp	SHORT $LN1209@stbsp_vspr
$LN452@stbsp_vspr:
; Line 300
	test	r13b, 4
	je	SHORT $LN454@stbsp_vspr
; Line 301
	mov	WORD PTR lead$6[rbp-256], 8193		; 00002001H
; Line 302
	jmp	SHORT $LN1209@stbsp_vspr
$LN454@stbsp_vspr:
; Line 303
	test	r13b, 2
	je	SHORT $LN456@stbsp_vspr
; Line 304
	mov	WORD PTR lead$6[rbp-256], 11009		; 00002b01H
$LN1209@stbsp_vspr:
; Line 653
	mov	r9b, 1
$LN456@stbsp_vspr:
	cmp	r11d, -1023				; fffffffffffffc01H
	jne	SHORT $LN181@stbsp_vspr
; Line 654
	mov	rax, rdx
	neg	rax
	sbb	ecx, ecx
	and	ecx, -1022				; fffffffffffffc02H
	mov	r11d, ecx
	jmp	SHORT $LN182@stbsp_vspr
$LN181@stbsp_vspr:
; Line 656
	mov	rax, 4503599627370496			; 0010000000000000H
	or	rdx, rax
$LN182@stbsp_vspr:
; Line 657
	shl	rdx, 8
; Line 658
	cmp	r14d, 15
	jge	SHORT $LN183@stbsp_vspr
; Line 659
	lea	ecx, DWORD PTR [r14*4]
	mov	rax, 576460752303423488			; 0800000000000000H
	shr	rax, cl
	add	rdx, rax
$LN183@stbsp_vspr:
; Line 666
	movsx	rax, r9b
; Line 670
	lea	r9, QWORD PTR num$8[rbp-191]
	mov	BYTE PTR lead$6[rbp+rax-255], 48	; 00000030H
	movsx	rax, BYTE PTR lead$6[rbp-256]
	mov	BYTE PTR lead$6[rbp+rax-254], 120	; 00000078H
	mov	rax, rdx
	movzx	r12d, BYTE PTR lead$6[rbp-256]
	shr	rax, 60					; 0000003cH
	add	r12b, 2
; Line 671
	shl	rdx, 4
	mov	BYTE PTR lead$6[rbp-256], r12b
	movzx	eax, BYTE PTR [rax+r8]
	mov	BYTE PTR num$8[rbp-192], al
; Line 672
	test	r14d, r14d
	je	SHORT $LN184@stbsp_vspr
; Line 673
	movzx	eax, BYTE PTR stbsp__period
	lea	r9, QWORD PTR num$8[rbp-190]
	mov	BYTE PTR num$8[rbp-191], al
$LN184@stbsp_vspr:
; Line 674
	test	r14d, r14d
	lea	rbx, QWORD PTR num$8[rbp-191]
	lea	rax, QWORD PTR num$8[rbp-190]
; Line 677
	mov	ecx, r14d
	cmovne	rbx, rax
; Line 678
	cmp	r14d, 13
	jbe	SHORT $LN186@stbsp_vspr
; Line 679
	mov	ecx, 13
; Line 680
	jle	SHORT $LN186@stbsp_vspr
; Line 681
	lea	eax, DWORD PTR [r14-13]
	mov	r14d, esi
	mov	DWORD PTR tz$1$[rbp-256], eax
; Line 864
	jmp	SHORT $LN938@stbsp_vspr
$LN186@stbsp_vspr:
; Line 682
	mov	r14d, esi
; Line 683
	test	ecx, ecx
	je	SHORT $LN576@stbsp_vspr
$LN938@stbsp_vspr:
; Line 864
	mov	r9, rbx
	npad	14
$LL26@stbsp_vspr:
; Line 684
	mov	rax, rdx
; Line 685
	shl	rdx, 4
	shr	rax, 60					; 0000003cH
	movzx	eax, BYTE PTR [rax+r8]
	mov	BYTE PTR [r9], al
	inc	r9
	add	ecx, -1					; ffffffffH
	jne	SHORT $LL26@stbsp_vspr
$LN576@stbsp_vspr:
; Line 689
	movzx	eax, BYTE PTR [r8+17]
	mov	BYTE PTR tail$7[rbp-255], al
; Line 690
	test	r11d, r11d
	jns	SHORT $LN187@stbsp_vspr
; Line 691
	mov	BYTE PTR tail$7[rbp-254], 45		; 0000002dH
; Line 692
	neg	r11d
; Line 693
	jmp	SHORT $LN188@stbsp_vspr
$LN187@stbsp_vspr:
; Line 694
	mov	BYTE PTR tail$7[rbp-254], 43		; 0000002bH
$LN188@stbsp_vspr:
; Line 695
	cmp	r11d, 1000				; 000003e8H
	jl	SHORT $LN391@stbsp_vspr
	mov	r8d, r10d
	jmp	SHORT $LN390@stbsp_vspr
$LN391@stbsp_vspr:
	cmp	r11d, 100				; 00000064H
	jl	SHORT $LN389@stbsp_vspr
	mov	r8d, 5
	jmp	SHORT $LN390@stbsp_vspr
$LN389@stbsp_vspr:
	cmp	r11d, 10
	mov	r8d, esi
	setge	r8b
	add	r8d, 3
$LN390@stbsp_vspr:
; Line 698
	mov	eax, 1717986919				; 66666667H
	mov	BYTE PTR tail$7[rbp-256], r8b
	imul	r11d
	lea	r10, QWORD PTR tail$7[rbp-256]
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	mov	eax, r8d
	add	r10, rax
	movzx	eax, dl
	shl	al, 2
	lea	ecx, DWORD PTR [rax+rdx]
	add	cl, cl
	sub	r11b, cl
	add	r11b, 48				; 00000030H
	mov	BYTE PTR [r10], r11b
; Line 699
	cmp	r8d, 3
	jbe	SHORT $LN547@stbsp_vspr
; Line 696
	lea	r11d, DWORD PTR [r8-3]
	npad	1
$LL28@stbsp_vspr:
; Line 702
	mov	r8d, edx
	lea	r10, QWORD PTR [r10-1]
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	movzx	eax, dl
	shl	al, 2
	lea	ecx, DWORD PTR [rax+rdx]
	add	cl, cl
	sub	r8b, cl
	add	r8b, 48					; 00000030H
	mov	BYTE PTR [r10], r8b
	sub	r11, 1
	jne	SHORT $LL28@stbsp_vspr
$LN547@stbsp_vspr:
; Line 705
	mov	eax, r9d
; Line 707
	lea	rsi, QWORD PTR num$8[rbp-192]
	sub	eax, ebx
; Line 708
	mov	r15d, 50331649				; 03000001H
	mov	DWORD PTR dp$2[rsp], eax
	lea	rax, QWORD PTR num$8[rbp-256]
	sub	r9d, eax
; Line 1146
	xor	r10d, r10d
	lea	r13d, DWORD PTR [r9-64]
	mov	QWORD PTR sn$1$[rsp], r13
	mov	DWORD PTR l$1[rsp], r13d
	jmp	$LN1210@stbsp_vspr
$LN191@stbsp_vspr:
; Line 714
	movsd	xmm0, QWORD PTR [r9]
	lea	rbx, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	cmp	dl, 71					; 00000047H
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	cmove	rbx, rax
	add	r10, 8
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
; Line 715
	cmp	r14d, -1
	jne	SHORT $LN193@stbsp_vspr
; Line 716
	mov	r14d, 6
	jmp	SHORT $LN1211@stbsp_vspr
$LN193@stbsp_vspr:
; Line 717
	test	r14d, r14d
	mov	eax, 1
	cmove	r14d, eax
$LN1211@stbsp_vspr:
; Line 720
	lea	eax, DWORD PTR [r14-1]
	mov	DWORD PTR pr$3$[rsp], r14d
	bts	eax, 31
	lea	r9, QWORD PTR dp$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	r8, QWORD PTR num$8[rbp-256]
	lea	rdx, QWORD PTR l$1[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	rcx, QWORD PTR sn$3[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN196@stbsp_vspr
; Line 721
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN196@stbsp_vspr:
; Line 725
	mov	eax, DWORD PTR l$1[rsp]
	mov	edx, r14d
; Line 727
	mov	rsi, QWORD PTR sn$3[rsp]
	cmp	eax, r14d
	cmova	eax, r14d
	mov	DWORD PTR l$1[rsp], eax
	mov	r13d, eax
	mov	QWORD PTR sn$1$[rsp], r13
	cmp	eax, 1
	jbe	SHORT $LN32@stbsp_vspr
$LL31@stbsp_vspr:
	test	r14d, r14d
	je	SHORT $LN1144@stbsp_vspr
	lea	ecx, DWORD PTR [r13-1]
	cmp	BYTE PTR [rcx+rsi], 48			; 00000030H
	jne	SHORT $LN1144@stbsp_vspr
; Line 728
	dec	r14d
; Line 729
	mov	DWORD PTR l$1[rsp], ecx
	mov	r13d, ecx
	cmp	ecx, 1
	ja	SHORT $LL31@stbsp_vspr
$LN1144@stbsp_vspr:
	mov	DWORD PTR pr$3$[rsp], r14d
	mov	QWORD PTR sn$1$[rsp], r13
$LN32@stbsp_vspr:
; Line 733
	mov	r15d, DWORD PTR dp$2[rsp]
	cmp	r15d, -4
	jle	SHORT $LN199@stbsp_vspr
	cmp	r15d, edx
	jg	SHORT $LN199@stbsp_vspr
; Line 741
	test	r15d, r15d
	jle	SHORT $LN204@stbsp_vspr
; Line 742
	cmp	r15d, r13d
	jge	SHORT $LN395@stbsp_vspr
	mov	r9d, r13d
	sub	r9d, r15d
	mov	DWORD PTR pr$3$[rsp], r9d
	jmp	$LN1212@stbsp_vspr
$LN395@stbsp_vspr:
	xor	r10d, r10d
	mov	r9d, r10d
	mov	DWORD PTR pr$3$[rsp], r10d
; Line 743
	jmp	$dofloatfromg$1230
$LN204@stbsp_vspr:
; Line 744
	cmp	r14d, r13d
	cmovg	r14d, r13d
	sub	r14d, r15d
	mov	DWORD PTR pr$3$[rsp], r14d
; Line 746
	jmp	$LN1213@stbsp_vspr
$LN199@stbsp_vspr:
; Line 734
	cmp	r14d, r13d
	jle	SHORT $LN200@stbsp_vspr
; Line 735
	lea	edx, DWORD PTR [r13-1]
	jmp	$doexpfromg$1231
$LN200@stbsp_vspr:
; Line 736
	test	r14d, r14d
	je	$LN1155@stbsp_vspr
; Line 737
	lea	edx, DWORD PTR [r14-1]
; Line 738
	jmp	$doexpfromg$1231
$LN207@stbsp_vspr:
; Line 751
	movsd	xmm0, QWORD PTR [r9]
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	cmp	dl, 69					; 00000045H
	lea	rbx, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
; Line 755
	lea	r9, QWORD PTR dp$2[rsp]
	cmove	rbx, rax
	lea	r8, QWORD PTR num$8[rbp-256]
	add	r10, 8
	lea	rdx, QWORD PTR l$1[rsp]
	mov	eax, 6
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	cmp	r14d, -1
	lea	rcx, QWORD PTR sn$3[rsp]
	cmove	r14d, eax
	mov	eax, r14d
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	QWORD PTR [rsp+32], xmm0
	call	stbsp__real_to_str
	mov	r15d, DWORD PTR dp$2[rsp]
	mov	edx, r14d
	mov	rsi, QWORD PTR sn$3[rsp]
	test	eax, eax
	je	SHORT $LN1101@stbsp_vspr
; Line 756
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN1101@stbsp_vspr:
; Line 758
	mov	r13d, DWORD PTR l$1[rsp]
	mov	QWORD PTR sn$1$[rsp], r13
	jmp	SHORT $doexpfromg$1231
$LN1155@stbsp_vspr:
; Line 736
	mov	edx, DWORD PTR pr$3$[rsp]
$doexpfromg$1231:
; Line 297
	mov	eax, DWORD PTR fl$1$[rsp]
	xor	r12b, r12b
; Line 758
	mov	BYTE PTR tail$7[rbp-256], 0
; Line 296
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 297
	test	al, al
	jns	SHORT $LN459@stbsp_vspr
; Line 298
	mov	WORD PTR lead$6[rbp-256], 11521		; 00002d01H
; Line 299
	jmp	SHORT $LN1214@stbsp_vspr
$LN459@stbsp_vspr:
; Line 300
	test	al, 4
	je	SHORT $LN461@stbsp_vspr
; Line 301
	mov	WORD PTR lead$6[rbp-256], 8193		; 00002001H
; Line 302
	jmp	SHORT $LN1214@stbsp_vspr
$LN461@stbsp_vspr:
; Line 303
	test	al, 2
	je	SHORT $LN463@stbsp_vspr
; Line 304
	mov	WORD PTR lead$6[rbp-256], 11009		; 00002b01H
$LN1214@stbsp_vspr:
; Line 760
	mov	r12b, 1
$LN463@stbsp_vspr:
	cmp	r15d, 28672				; 00007000H
	jne	SHORT $LN211@stbsp_vspr
; Line 762
	xor	r10d, r10d
	mov	r15d, r10d
; Line 763
	mov	r14d, r10d
; Line 1146
	jmp	$LN1210@stbsp_vspr
$LN211@stbsp_vspr:
; Line 768
	movzx	eax, BYTE PTR [rsi]
	lea	r14, QWORD PTR num$8[rbp-191]
	mov	BYTE PTR num$8[rbp-192], al
; Line 770
	test	edx, edx
	je	SHORT $LN213@stbsp_vspr
; Line 771
	movzx	eax, BYTE PTR stbsp__period
	lea	r14, QWORD PTR num$8[rbp-190]
	mov	BYTE PTR num$8[rbp-191], al
$LN213@stbsp_vspr:
; Line 774
	test	edx, edx
	lea	rax, QWORD PTR num$8[rbp-190]
	lea	rcx, QWORD PTR num$8[rbp-191]
	cmovne	rcx, rax
	lea	eax, DWORD PTR [r13-1]
	cmp	eax, edx
	jbe	SHORT $LN214@stbsp_vspr
; Line 775
	lea	r13d, DWORD PTR [rdx+1]
$LN214@stbsp_vspr:
; Line 776
	cmp	r13d, 1
	jbe	SHORT $LN34@stbsp_vspr
; Line 864
	mov	r14, rcx
	inc	rsi
	lea	ecx, DWORD PTR [r13-1]
	npad	4
$LL35@stbsp_vspr:
; Line 776
	movzx	eax, BYTE PTR [rsi]
	lea	rsi, QWORD PTR [rsi+1]
; Line 777
	mov	BYTE PTR [r14], al
	inc	r14
	sub	rcx, 1
	jne	SHORT $LL35@stbsp_vspr
$LN34@stbsp_vspr:
; Line 782
	movzx	eax, BYTE PTR [rbx+14]
	mov	r10d, edx
	sub	r10d, r13d
	mov	BYTE PTR tail$7[rbp-255], al
	inc	r10d
	mov	DWORD PTR tz$1$[rbp-256], r10d
	xor	r10d, r10d
; Line 783
	sub	r15d, 1
	mov	DWORD PTR pr$3$[rsp], r10d
; Line 784
	jns	SHORT $LN215@stbsp_vspr
; Line 785
	mov	BYTE PTR tail$7[rbp-254], 45		; 0000002dH
; Line 786
	neg	r15d
; Line 787
	jmp	SHORT $LN216@stbsp_vspr
$LN215@stbsp_vspr:
; Line 788
	mov	BYTE PTR tail$7[rbp-254], 43		; 0000002bH
$LN216@stbsp_vspr:
; Line 792
	cmp	r15d, 100				; 00000064H
	mov	r9d, r10d
; Line 796
	mov	eax, 1717986919				; 66666667H
	setge	r9b
	imul	r15d
	add	r9d, 4
	sar	edx, 2
	mov	eax, edx
	mov	BYTE PTR tail$7[rbp-256], r9b
	shr	eax, 31
	add	edx, eax
	movzx	eax, dl
	shl	al, 2
	lea	ecx, DWORD PTR [rax+rdx]
	add	cl, cl
	sub	r15b, cl
	add	r15b, 48				; 00000030H
	mov	BYTE PTR tail$7[rbp+r9-256], r15b
	npad	2
$LL36@stbsp_vspr:
; Line 800
	mov	r8d, edx
	mov	DWORD PTR dp$2[rsp], edx
	dec	r9d
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	movzx	eax, dl
	shl	al, 2
	lea	ecx, DWORD PTR [rax+rdx]
	add	cl, cl
	sub	r8b, cl
	add	r8b, 48					; 00000030H
	mov	BYTE PTR tail$7[rbp+r9-256], r8b
	cmp	r9d, 3
	ja	SHORT $LL36@stbsp_vspr
; Line 802
	mov	r15d, 50331649				; 03000001H
; Line 803
	jmp	$flt_lead$1232
$LN219@stbsp_vspr:
; Line 806
	movsd	xmm1, QWORD PTR [r9]
	add	r10, 8
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	jmp	$doafloat$1233
$LN256@stbsp_vspr:
; Line 980
	cmp	dl, 66					; 00000042H
	lea	r10, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	cmove	r10, rax
; Line 981
	xor	r12b, r12b
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 982
	test	r13b, 8
	je	SHORT $LN258@stbsp_vspr
; Line 985
	movzx	eax, BYTE PTR [r10+11]
	mov	r12b, 2
	mov	BYTE PTR lead$6[rbp-254], al
	mov	WORD PTR lead$6[rbp-256], 12290		; 00003002H
$LN258@stbsp_vspr:
; Line 987
	mov	r8d, 384				; 00000180H
; Line 1016
	jmp	SHORT $radixnum$1234
$LN260@stbsp_vspr:
; Line 992
	xor	r12b, r12b
	lea	r10, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 993
	test	r13b, 8
	je	SHORT $LN261@stbsp_vspr
; Line 994
	mov	r12b, 1
	mov	WORD PTR lead$6[rbp-256], 12289		; 00003001H
$LN261@stbsp_vspr:
; Line 997
	mov	r8d, 816				; 00000330H
; Line 998
	jmp	SHORT $radixnum$1234
$LN263@stbsp_vspr:
; Line 1001
	and	r13d, -17				; ffffffefH
; Line 1002
	mov	r14d, 16
; Line 1003
	or	r13d, 32				; 00000020H
	mov	DWORD PTR fl$1$[rsp], r13d
$LN264@stbsp_vspr:
; Line 1008
	cmp	dl, 88					; 00000058H
	lea	r10, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
; Line 1009
	mov	r8d, 1088				; 00000440H
	cmove	r10, rax
; Line 1010
	xor	r12b, r12b
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 1011
	test	r13b, 8
	je	SHORT $radixnum$1234
; Line 1014
	movzx	eax, BYTE PTR [r10+16]
	mov	r12b, 2
	mov	BYTE PTR lead$6[rbp-254], al
	mov	WORD PTR lead$6[rbp-256], 12290		; 00003002H
$radixnum$1234:
; Line 1018
	mov	rbx, QWORD PTR va$GSCopy$1$[rsp]
	add	rbx, 8
	mov	QWORD PTR va$GSCopy$1$[rsp], rbx
	test	r13b, 32				; 00000020H
	je	SHORT $LN267@stbsp_vspr
; Line 1019
	mov	r9, QWORD PTR [r9]
	jmp	SHORT $LN268@stbsp_vspr
$LN267@stbsp_vspr:
; Line 1021
	mov	r9d, DWORD PTR [r9]
$LN268@stbsp_vspr:
; Line 1024
	xor	eax, eax
	lea	rsi, QWORD PTR num$8[rbp+256]
	mov	DWORD PTR dp$2[rsp], eax
; Line 1026
	mov	BYTE PTR tail$7[rbp-256], al
; Line 1027
	test	r9, r9
	jne	SHORT $LN1109@stbsp_vspr
; Line 1028
	xor	r12b, r12b
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 1029
	test	r14d, r14d
	jne	SHORT $LN1109@stbsp_vspr
; Line 1030
	xor	r10d, r10d
	mov	r13d, r10d
	mov	DWORD PTR l$1[rsp], r10d
	mov	QWORD PTR sn$1$[rsp], r13
; Line 1031
	mov	r15d, r10d
; Line 1146
	jmp	$LN298@stbsp_vspr
$LN1109@stbsp_vspr:
	mov	r11d, 1
	npad	3
$LL63@stbsp_vspr:
; Line 1037
	mov	ecx, r8d
	mov	eax, r11d
	shr	ecx, 8
	dec	rsi
	shl	eax, cl
; Line 1038
	mov	ecx, r8d
	cdqe
	dec	rax
	shr	rcx, 8
	and	rax, r9
	shr	r9, cl
	movzx	eax, BYTE PTR [rax+r10]
	mov	BYTE PTR [rsi], al
; Line 1039
	test	r9, r9
	jne	SHORT $LN272@stbsp_vspr
	lea	rcx, QWORD PTR num$8[rbp+256]
	lea	rax, QWORD PTR num$8[rbp+256]
	sub	ecx, esi
	sub	eax, esi
	cmp	eax, r14d
	jge	SHORT $LN549@stbsp_vspr
$LN272@stbsp_vspr:
; Line 1041
	test	r13b, 64				; 00000040H
	je	SHORT $LL63@stbsp_vspr
; Line 1042
	inc	r8d
	mov	eax, r8d
	shr	eax, 4
; Line 1043
	xor	eax, r8d
	test	al, 15
	jne	SHORT $LL63@stbsp_vspr
; Line 1044
	and	r8d, -16				; fffffff0H
; Line 1045
	mov	BYTE PTR [rsi-1], r15b
	dec	rsi
; Line 1048
	jmp	SHORT $LL63@stbsp_vspr
$LN549@stbsp_vspr:
; Line 1050
	and	r8d, 240				; 000000f0H
; Line 1052
	mov	DWORD PTR l$1[rsp], ecx
	shl	r8d, 20
	lea	r15d, QWORD PTR num$8[rbp+256]
	sub	r8d, esi
	mov	r13d, ecx
	add	r15d, r8d
	mov	QWORD PTR sn$1$[rsp], r13
; Line 1054
	xor	r10d, r10d
	jmp	$LN1215@stbsp_vspr
$LN276@stbsp_vspr:
; Line 1060
	add	r10, 8
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	test	r13b, 32				; 00000020H
	je	SHORT $LN279@stbsp_vspr
; Line 1061
	mov	rbx, QWORD PTR [r9]
; Line 1063
	cmp	dl, 117					; 00000075H
	je	SHORT $LN282@stbsp_vspr
	test	rbx, rbx
	jns	SHORT $LN282@stbsp_vspr
; Line 1064
	neg	rbx
; Line 1067
	jmp	SHORT $LN1216@stbsp_vspr
$LN279@stbsp_vspr:
; Line 1068
	mov	eax, DWORD PTR [r9]
; Line 1069
	mov	ebx, eax
; Line 1070
	cmp	dl, 117					; 00000075H
	je	SHORT $LN282@stbsp_vspr
	test	eax, eax
	jns	SHORT $LN282@stbsp_vspr
; Line 1071
	neg	eax
	mov	ebx, eax
$LN1216@stbsp_vspr:
; Line 1077
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN282@stbsp_vspr:
	bt	r13d, 8
	jae	$LN283@stbsp_vspr
; Line 1078
	cmp	rbx, 1024				; 00000400H
	jae	SHORT $LN284@stbsp_vspr
; Line 1079
	mov	r14d, esi
	jmp	SHORT $LN286@stbsp_vspr
$LN284@stbsp_vspr:
; Line 1080
	cmp	r14d, -1
	mov	eax, 1
	cmove	r14d, eax
$LN286@stbsp_vspr:
; Line 1082
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, rbx
$doafloat$1233:
; Line 809
	bt	r13d, 8
	jae	SHORT $LN550@stbsp_vspr
; Line 812
	bt	r13d, 11
	movaps	xmm2, xmm8
	jae	SHORT $LN496@stbsp_vspr
; Line 813
	movaps	xmm2, xmm7
$LN496@stbsp_vspr:
; Line 814
	cmp	r13d, 67108864				; 04000000H
	jae	SHORT $LN550@stbsp_vspr
	npad	5
$LL39@stbsp_vspr:
; Line 815
	comisd	xmm2, xmm1
	jbe	SHORT $LN222@stbsp_vspr
	movaps	xmm0, xmm2
	xorps	xmm0, xmm6
	comisd	xmm1, xmm0
	ja	SHORT $LN1145@stbsp_vspr
$LN222@stbsp_vspr:
; Line 818
	add	r13d, 16777216				; 01000000H
	divsd	xmm1, xmm2
	cmp	r13d, 67108864				; 04000000H
	jb	SHORT $LL39@stbsp_vspr
$LN1145@stbsp_vspr:
	mov	DWORD PTR fl$1$[rsp], r13d
$LN550@stbsp_vspr:
; Line 821
	mov	eax, 6
; Line 824
	lea	r9, QWORD PTR dp$2[rsp]
	cmp	r14d, -1
	lea	r8, QWORD PTR num$8[rbp-256]
	lea	rdx, QWORD PTR l$1[rsp]
	cmove	r14d, eax
	lea	rcx, QWORD PTR sn$3[rsp]
	mov	DWORD PTR [rsp+40], r14d
	movsd	QWORD PTR [rsp+32], xmm1
	mov	DWORD PTR pr$3$[rsp], r14d
	call	stbsp__real_to_str
	mov	r15d, DWORD PTR dp$2[rsp]
	mov	rsi, QWORD PTR sn$3[rsp]
	test	eax, eax
	je	SHORT $LN1102@stbsp_vspr
; Line 825
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN1102@stbsp_vspr:
; Line 827
	mov	r13d, DWORD PTR l$1[rsp]
	mov	QWORD PTR sn$1$[rsp], r13
$LN1213@stbsp_vspr:
	mov	r9d, r14d
$LN1212@stbsp_vspr:
	xor	r10d, r10d
$dofloatfromg$1230:
; Line 297
	mov	eax, DWORD PTR fl$1$[rsp]
	xor	r12b, r12b
; Line 827
	mov	BYTE PTR tail$7[rbp-256], 0
; Line 296
	mov	BYTE PTR lead$2$[rsp], r12b
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 297
	test	al, al
	jns	SHORT $LN466@stbsp_vspr
; Line 298
	mov	WORD PTR lead$6[rbp-256], 11521		; 00002d01H
; Line 299
	jmp	SHORT $LN1217@stbsp_vspr
$LN466@stbsp_vspr:
; Line 300
	test	al, 4
	je	SHORT $LN468@stbsp_vspr
; Line 301
	mov	WORD PTR lead$6[rbp-256], 8193		; 00002001H
; Line 302
	jmp	SHORT $LN1217@stbsp_vspr
$LN468@stbsp_vspr:
; Line 303
	test	al, 2
	je	SHORT $LN470@stbsp_vspr
; Line 304
	mov	WORD PTR lead$6[rbp-256], 11009		; 00002b01H
$LN1217@stbsp_vspr:
; Line 829
	mov	r12b, 1
	mov	BYTE PTR lead$2$[rsp], r12b
$LN470@stbsp_vspr:
	cmp	r15d, 28672				; 00007000H
	jne	SHORT $LN225@stbsp_vspr
; Line 831
	mov	r15d, r10d
; Line 832
	mov	r14d, r10d
; Line 1146
	jmp	$LN1210@stbsp_vspr
$LN225@stbsp_vspr:
; Line 835
	lea	r14, QWORD PTR num$8[rbp-192]
; Line 838
	test	r15d, r15d
	jg	$LN227@stbsp_vspr
; Line 842
	movzx	ecx, BYTE PTR num$8[rbp-191]
; Line 844
	lea	r14, QWORD PTR num$8[rbp-191]
	movzx	eax, BYTE PTR stbsp__period
	test	r9d, r9d
	mov	BYTE PTR num$8[rbp-192], 48		; 00000030H
	cmovne	ecx, eax
	lea	rax, QWORD PTR num$8[rbp-190]
	cmovne	r14, rax
	mov	BYTE PTR num$8[rbp-191], cl
	neg	r15d
; Line 845
	cmp	r15d, r9d
	cmovg	r15d, r9d
; Line 847
	mov	r13d, r15d
; Line 848
	test	r15d, r15d
	je	SHORT $LN1146@stbsp_vspr
	npad	3
$LL41@stbsp_vspr:
; Line 849
	test	r14b, 3
	je	SHORT $LN1146@stbsp_vspr
; Line 851
	mov	BYTE PTR [r14], 48			; 00000030H
	inc	r14
; Line 852
	sub	r13d, 1
	jne	SHORT $LL41@stbsp_vspr
$LN1146@stbsp_vspr:
; Line 854
	cmp	r13d, 4
	jl	SHORT $LN43@stbsp_vspr
	mov	ebx, r13d
	mov	edx, 808464432				; 30303030H
	shr	rbx, 2
	mov	rcx, r14
	mov	r8, rbx
	shl	r8, 2
	call	memset
	lea	r14, QWORD PTR [r14+rbx*4]
	neg	ebx
	lea	r13d, DWORD PTR [r13+rbx*4]
$LN43@stbsp_vspr:
; Line 859
	test	r13d, r13d
	je	SHORT $LN45@stbsp_vspr
	mov	r8d, r13d
	mov	dl, 48					; 00000030H
	mov	rcx, r14
	mov	ebx, r13d
	call	memset
	add	r14, rbx
$LN45@stbsp_vspr:
; Line 863
	mov	edx, DWORD PTR pr$3$[rsp]
	mov	r10d, edx
	mov	r8, QWORD PTR sn$1$[rsp]
	sub	r10d, r15d
	lea	eax, DWORD PTR [r15+r8]
	cmp	eax, edx
	jle	SHORT $LN795@stbsp_vspr
; Line 864
	mov	r8d, r10d
$LN795@stbsp_vspr:
; Line 865
	mov	ecx, r8d
	test	r8d, r8d
; Line 866
	je	SHORT $LN48@stbsp_vspr
	sub	rsi, r14
	npad	4
$LL47@stbsp_vspr:
; Line 867
	movzx	eax, BYTE PTR [rsi+r14]
	mov	BYTE PTR [r14], al
	inc	r14
; Line 868
	sub	ecx, 1
	jne	SHORT $LL47@stbsp_vspr
; Line 864
	mov	r10d, edx
	sub	r10d, r15d
$LN48@stbsp_vspr:
; Line 870
	sub	r10d, r8d
; Line 871
	mov	r15d, 50331649				; 03000001H
	mov	DWORD PTR tz$1$[rbp-256], r10d
; Line 872
	xor	r10d, r10d
	jmp	$LN234@stbsp_vspr
$LN227@stbsp_vspr:
; Line 873
	mov	r13d, eax
	and	r13d, 64				; 00000040H
	je	SHORT $LN405@stbsp_vspr
	mov	ebx, 600				; 00000258H
	mov	eax, -1431655765			; aaaaaaabH
	sub	ebx, r15d
	mul	ebx
	shr	edx, 1
	lea	eax, DWORD PTR [rdx+rdx*2]
	sub	ebx, eax
	jmp	SHORT $LN406@stbsp_vspr
$LN405@stbsp_vspr:
	mov	ebx, r10d
$LN406@stbsp_vspr:
; Line 874
	mov	r8, QWORD PTR sn$1$[rsp]
	mov	edx, r10d
	cmp	r15d, r8d
	jb	$LN233@stbsp_vspr
	movzx	r9d, BYTE PTR stbsp__comma$1$[rsp]
$LL49@stbsp_vspr:
; Line 878
	test	r13d, r13d
	je	SHORT $LN235@stbsp_vspr
	inc	ebx
	cmp	ebx, 4
	jne	SHORT $LN235@stbsp_vspr
; Line 880
	mov	BYTE PTR [r14], r9b
	mov	ebx, r10d
	inc	r14
; Line 881
	jmp	SHORT $LL49@stbsp_vspr
$LN235@stbsp_vspr:
; Line 882
	mov	eax, edx
; Line 883
	inc	edx
	movzx	ecx, BYTE PTR [rax+rsi]
	mov	BYTE PTR [r14], cl
	inc	r14
; Line 884
	cmp	edx, r8d
	jb	SHORT $LL49@stbsp_vspr
; Line 888
	cmp	edx, r15d
	jae	$LN57@stbsp_vspr
; Line 889
	sub	r15d, edx
; Line 890
	test	r13d, r13d
	jne	SHORT $LN504@stbsp_vspr
; Line 891
	test	r15d, r15d
	je	SHORT $LN1147@stbsp_vspr
$LL52@stbsp_vspr:
; Line 892
	test	r14b, 3
	je	SHORT $LN1147@stbsp_vspr
; Line 894
	mov	BYTE PTR [r14], 48			; 00000030H
	inc	r14
; Line 895
	add	r15d, -1				; ffffffffH
	jne	SHORT $LL52@stbsp_vspr
$LN1147@stbsp_vspr:
; Line 897
	cmp	r15d, 4
	jb	SHORT $LN504@stbsp_vspr
	mov	esi, r15d
	mov	edx, 808464432				; 30303030H
	shr	rsi, 2
	mov	rcx, r14
	mov	r8, rsi
	shl	r8, 2
	call	memset
	lea	r14, QWORD PTR [r14+rsi*4]
	npad	2
$LL54@stbsp_vspr:
; Line 900
	add	r15d, -4				; fffffffcH
	sub	rsi, 1
	jne	SHORT $LL54@stbsp_vspr
	xor	r10d, r10d
$LN504@stbsp_vspr:
; Line 903
	test	r15d, r15d
	je	SHORT $LN57@stbsp_vspr
	movzx	r12d, BYTE PTR stbsp__comma$1$[rsp]
$LL56@stbsp_vspr:
; Line 904
	test	r13d, r13d
	je	SHORT $LN241@stbsp_vspr
	inc	ebx
	cmp	ebx, 4
	jne	SHORT $LN241@stbsp_vspr
; Line 905
	mov	ebx, r10d
; Line 906
	mov	BYTE PTR [r14], r12b
; Line 907
	jmp	SHORT $LN242@stbsp_vspr
$LN241@stbsp_vspr:
; Line 908
	mov	BYTE PTR [r14], 48			; 00000030H
; Line 909
	dec	r15d
$LN242@stbsp_vspr:
; Line 903
	inc	r14
	test	r15d, r15d
	jne	SHORT $LL56@stbsp_vspr
	movzx	r12d, BYTE PTR lead$2$[rsp]
$LN57@stbsp_vspr:
; Line 914
	mov	edx, DWORD PTR pr$3$[rsp]
	lea	rax, QWORD PTR num$8[rbp-256]
	mov	r15d, r14d
	sub	r15d, eax
	add	r15d, 50331584				; 02ffffc0H
	test	edx, edx
	je	$LN234@stbsp_vspr
; Line 915
	movzx	eax, BYTE PTR stbsp__period
	mov	BYTE PTR [r14], al
	inc	r14
; Line 916
	mov	DWORD PTR tz$1$[rbp-256], edx
; Line 918
	jmp	$LN234@stbsp_vspr
$LN233@stbsp_vspr:
	movzx	r8d, BYTE PTR stbsp__comma$1$[rsp]
	npad	7
$LL58@stbsp_vspr:
; Line 922
	test	r13d, r13d
	je	SHORT $LN244@stbsp_vspr
	inc	ebx
	cmp	ebx, 4
	jne	SHORT $LN244@stbsp_vspr
; Line 924
	mov	BYTE PTR [r14], r8b
	mov	ebx, r10d
	inc	r14
; Line 925
	jmp	SHORT $LL58@stbsp_vspr
$LN244@stbsp_vspr:
; Line 926
	mov	eax, edx
; Line 927
	inc	edx
	movzx	ecx, BYTE PTR [rax+rsi]
	mov	BYTE PTR [r14], cl
	inc	r14
	mov	eax, r14d
; Line 928
	cmp	edx, r15d
	jb	SHORT $LL58@stbsp_vspr
; Line 932
	mov	r8, QWORD PTR sn$1$[rsp]
	lea	rcx, QWORD PTR num$8[rbp-256]
	sub	eax, ecx
	add	eax, 50331584				; 02ffffc0H
	mov	DWORD PTR cs$2$[rsp], eax
; Line 933
	test	r9d, r9d
	je	SHORT $LN247@stbsp_vspr
; Line 934
	movzx	eax, BYTE PTR stbsp__period
	mov	BYTE PTR [r14], al
	inc	r14
$LN247@stbsp_vspr:
; Line 935
	mov	eax, r8d
	sub	eax, r15d
	cmp	eax, r9d
	jbe	SHORT $LN506@stbsp_vspr
; Line 936
	lea	r8d, DWORD PTR [r15+r9]
$LN506@stbsp_vspr:
; Line 937
	cmp	edx, r8d
	jae	SHORT $LN62@stbsp_vspr
	mov	ecx, edx
	mov	eax, r8d
	add	rcx, rsi
	sub	eax, edx
	mov	edx, eax
$LL61@stbsp_vspr:
; Line 938
	movzx	eax, BYTE PTR [rcx]
; Line 939
	lea	rcx, QWORD PTR [rcx+1]
	mov	BYTE PTR [r14], al
	inc	r14
	sub	rdx, 1
	jne	SHORT $LL61@stbsp_vspr
$LN62@stbsp_vspr:
; Line 941
	mov	eax, r15d
	mov	r15d, DWORD PTR cs$2$[rsp]
	sub	eax, r8d
	add	eax, r9d
	mov	DWORD PTR tz$1$[rbp-256], eax
$LN234@stbsp_vspr:
; Line 947
	mov	r9d, DWORD PTR fl$1$[rsp]
	mov	DWORD PTR pr$3$[rsp], r10d
	bt	r9d, 8
	jae	SHORT $flt_lead$1232
; Line 950
	mov	r8d, r9d
; Line 953
	mov	BYTE PTR tail$7[rbp-255], 32		; 00000020H
	shr	r8d, 10
	not	r8b
	and	r8b, 1
	mov	BYTE PTR tail$7[rbp-256], r8b
; Line 955
	cmp	r9d, 16777216				; 01000000H
	jb	SHORT $flt_lead$1232
; Line 956
	mov	r11d, 2048				; 00000800H
	movzx	edx, r8b
	test	r9d, r11d
; Line 960
	lea	rax, OFFSET FLAT:??_C@_05JPHLCBNH@_kMGT@
	lea	rcx, OFFSET FLAT:??_C@_05FOLKAOND@_KMGT@
	cmove	rcx, rax
	mov	eax, r9d
	shr	rax, 24
	inc	r8b
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$7[rbp+rdx-255], al
	mov	eax, r9d
	and	eax, 6144				; 00001800H
	cmp	eax, r11d
; Line 962
	jne	SHORT $LN254@stbsp_vspr
; Line 963
	movzx	eax, r8b
; Line 964
	inc	r8b
	mov	BYTE PTR tail$7[rbp+rax-255], 105	; 00000069H
$LN254@stbsp_vspr:
; Line 966
	mov	BYTE PTR tail$7[rbp-256], r8b
$flt_lead$1232:
; Line 973
	lea	rax, QWORD PTR num$8[rbp-256]
	sub	r14d, eax
; Line 974
	lea	rsi, QWORD PTR num$8[rbp-192]
	lea	r13d, DWORD PTR [r14-64]
; Line 1146
	mov	r14d, DWORD PTR pr$3$[rsp]
	mov	QWORD PTR sn$1$[rsp], r13
	mov	DWORD PTR l$1[rsp], r13d
	jmp	$LN1210@stbsp_vspr
$LN283@stbsp_vspr:
; Line 1089
	xor	r12d, r12d
	lea	rsi, QWORD PTR num$8[rbp+256]
	mov	r14d, r13d
	mov	r10d, r12d
	and	r14d, 64				; 00000040H
	mov	r13, -6067343680855748867		; abcc77118461cefdH
	npad	10
$LL66@stbsp_vspr:
; Line 1093
	lea	r11, QWORD PTR [rsi-8]
; Line 1094
	mov	r8d, ebx
	cmp	rbx, 100000000				; 05f5e100H
	jb	SHORT $LN287@stbsp_vspr
; Line 1095
	mov	rax, r13
	mul	rbx
	mov	rbx, rdx
	shr	rbx, 26
	imul	eax, ebx, 100000000			; 05f5e100H
	sub	r8d, eax
; Line 1097
	jmp	SHORT $LN288@stbsp_vspr
$LN287@stbsp_vspr:
; Line 1099
	mov	rbx, r12
$LN288@stbsp_vspr:
; Line 1101
	test	r14d, r14d
	jne	SHORT $LN70@stbsp_vspr
	lea	rcx, OFFSET FLAT:__ImageBase
	npad	9
$LL71@stbsp_vspr:
; Line 1103
	sub	rsi, 2
; Line 1104
	mov	eax, 1374389535				; 51eb851fH
	mul	r8d
	shr	edx, 5
	imul	eax, edx, 100				; 00000064H
	sub	r8d, eax
	add	r8d, r8d
	movzx	eax, WORD PTR stbsp__digitpair[r8+rcx+2]
; Line 1105
	mov	r8d, edx
	mov	WORD PTR [rsi], ax
; Line 1106
	test	edx, edx
	jne	SHORT $LL71@stbsp_vspr
; Line 864
	jmp	SHORT $LN73@stbsp_vspr
$LN70@stbsp_vspr:
; Line 1108
	test	r8d, r8d
	je	SHORT $LN73@stbsp_vspr
	npad	14
$LL72@stbsp_vspr:
; Line 1109
	mov	eax, r10d
	dec	rsi
	inc	r10d
	mov	r9d, r8d
	cmp	eax, 3
	jne	SHORT $LN290@stbsp_vspr
; Line 1110
	mov	r10d, r12d
; Line 1111
	mov	BYTE PTR [rsi], r15b
; Line 1112
	dec	r11
; Line 1113
	jmp	SHORT $LN291@stbsp_vspr
$LN290@stbsp_vspr:
; Line 1114
	mov	eax, -858993459				; cccccccdH
	mul	r9d
	mov	r8d, edx
	shr	r8d, 3
	movzx	eax, r8b
	shl	al, 2
	lea	ecx, DWORD PTR [rax+r8]
	add	cl, cl
	sub	r9b, cl
	add	r9b, 48					; 00000030H
	mov	BYTE PTR [rsi], r9b
$LN291@stbsp_vspr:
; Line 1108
	test	r8d, r8d
	jne	SHORT $LL72@stbsp_vspr
$LN73@stbsp_vspr:
; Line 1118
	test	rbx, rbx
	je	SHORT $LN555@stbsp_vspr
; Line 1123
	cmp	rsi, r11
	je	$LL66@stbsp_vspr
$LL74@stbsp_vspr:
; Line 1124
	test	r14d, r14d
	je	SHORT $LN294@stbsp_vspr
	mov	eax, r10d
	inc	r10d
	cmp	eax, 3
	jne	SHORT $LN294@stbsp_vspr
; Line 1126
	dec	rsi
	mov	r10d, r12d
; Line 1127
	dec	r11
	mov	BYTE PTR [rsi], r15b
; Line 1128
	jmp	SHORT $LN295@stbsp_vspr
$LN294@stbsp_vspr:
; Line 1129
	dec	rsi
	mov	BYTE PTR [rsi], 48			; 00000030H
$LN295@stbsp_vspr:
; Line 1123
	cmp	rsi, r11
	jne	SHORT $LL74@stbsp_vspr
; Line 1131
	jmp	$LL66@stbsp_vspr
$LN555@stbsp_vspr:
; Line 1119
	cmp	BYTE PTR [rsi], 48			; 00000030H
	mov	r13d, DWORD PTR fl$1$[rsp]
	jne	SHORT $LN293@stbsp_vspr
	lea	rax, QWORD PTR num$8[rbp+256]
	cmp	rsi, rax
	je	SHORT $LN293@stbsp_vspr
; Line 1120
	inc	rsi
$LN293@stbsp_vspr:
; Line 1133
	mov	BYTE PTR tail$7[rbp-256], r12b
; Line 296
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 297
	test	r13b, r13b
	jns	SHORT $LN473@stbsp_vspr
; Line 298
	mov	WORD PTR lead$6[rbp-256], 11521		; 00002d01H
; Line 299
	jmp	SHORT $LN1218@stbsp_vspr
$LN473@stbsp_vspr:
; Line 300
	test	r13b, 4
	je	SHORT $LN475@stbsp_vspr
; Line 301
	mov	WORD PTR lead$6[rbp-256], 8193		; 00002001H
; Line 302
	jmp	SHORT $LN1218@stbsp_vspr
$LN475@stbsp_vspr:
; Line 303
	test	r13b, 2
	je	SHORT $LN477@stbsp_vspr
; Line 304
	mov	WORD PTR lead$6[rbp-256], 11009		; 00002b01H
$LN1218@stbsp_vspr:
; Line 1137
	mov	r12b, 1
$LN477@stbsp_vspr:
	lea	rax, QWORD PTR num$8[rbp+256]
	sub	eax, esi
	mov	r13d, eax
	mov	DWORD PTR l$1[rsp], eax
	mov	QWORD PTR sn$1$[rsp], r13
; Line 1138
	jne	SHORT $LN296@stbsp_vspr
; Line 1140
	mov	eax, 1
	mov	BYTE PTR [rsi-1], 48			; 00000030H
	dec	rsi
	mov	DWORD PTR l$1[rsp], eax
	mov	r13d, eax
	mov	QWORD PTR sn$1$[rsp], r13
$LN296@stbsp_vspr:
; Line 1143
	mov	r14d, DWORD PTR pr$3$[rsp]
	lea	r15d, DWORD PTR [rax+50331648]
; Line 1146
	mov	rbx, QWORD PTR va$GSCopy$1$[rsp]
	test	r14d, r14d
	mov	r10d, 0
	cmovs	r14d, r10d
$LN1215@stbsp_vspr:
; Line 1148
	mov	QWORD PTR va$GSCopy$1$[rsp], rbx
$LN1210@stbsp_vspr:
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
$scopy$1229:
	cmp	r14d, r13d
	jge	SHORT $LN298@stbsp_vspr
	jmp	SHORT $LN893@stbsp_vspr
$LN362@stbsp_vspr:
; Line 1336
	xor	r10d, r10d
	mov	BYTE PTR num$8[rbp+255], dl
	mov	DWORD PTR fl$1$[rsp], r10d
; Line 1337
	xor	r12b, r12b
	mov	DWORD PTR fw$2$[rsp], r10d
; Line 1338
	mov	BYTE PTR tail$7[rbp-256], r10b
$LN1208@stbsp_vspr:
; Line 1149
	mov	r13d, 1
	mov	DWORD PTR dp$2[rsp], r10d
	mov	DWORD PTR l$1[rsp], r13d
	lea	rsi, QWORD PTR num$8[rbp+255]
	mov	QWORD PTR sn$1$[rsp], r13
	mov	r15d, r10d
	mov	BYTE PTR lead$6[rbp-256], r12b
$LN893@stbsp_vspr:
	mov	r14d, r13d
$LN298@stbsp_vspr:
; Line 1151
	mov	edx, DWORD PTR fw$2$[rsp]
	movsx	eax, BYTE PTR tail$7[rbp-256]
	add	eax, DWORD PTR tz$1$[rbp-256]
	movsx	ecx, r12b
	add	ecx, eax
	add	ecx, r14d
	cmp	edx, ecx
	cmovl	edx, ecx
; Line 1154
	sub	r14d, r13d
	sub	edx, ecx
	mov	DWORD PTR pr$3$[rsp], r14d
; Line 1157
	mov	ecx, DWORD PTR fl$1$[rsp]
	mov	DWORD PTR fw$2$[rsp], edx
	test	cl, 1
	jne	SHORT $LN302@stbsp_vspr
; Line 1158
	test	cl, 16
	je	SHORT $LN301@stbsp_vspr
; Line 1160
	cmp	edx, r14d
	cmovg	r14d, edx
; Line 1161
	mov	edx, r10d
	mov	DWORD PTR fw$2$[rsp], edx
	mov	DWORD PTR pr$3$[rsp], r14d
; Line 1162
	jmp	SHORT $LN302@stbsp_vspr
$LN301@stbsp_vspr:
; Line 1163
	and	ecx, -65				; ffffffbfH
	mov	DWORD PTR fl$1$[rsp], ecx
$LN302@stbsp_vspr:
; Line 1168
	lea	eax, DWORD PTR [r14+rdx]
	test	eax, eax
	je	$LN89@stbsp_vspr
; Line 1173
	mov	r13, QWORD PTR callback$GSCopy$1$[rbp-256]
	test	cl, 1
	jne	$LN1154@stbsp_vspr
; Line 1174
	test	edx, edx
	jle	$LN1154@stbsp_vspr
	mov	r12, QWORD PTR user$GSCopy$1$[rbp-256]
$LL76@stbsp_vspr:
; Line 1175
	mov	r14d, edx
	test	r13, r13
	je	SHORT $LN306@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	edx, eax
	cmovg	r14d, eax
$LN306@stbsp_vspr:
; Line 1176
	sub	edx, r14d
	mov	DWORD PTR fw$2$[rsp], edx
; Line 1177
	test	r14d, r14d
	je	SHORT $LN1148@stbsp_vspr
$LL78@stbsp_vspr:
; Line 1178
	test	dil, 3
	je	SHORT $LN1148@stbsp_vspr
; Line 1180
	mov	BYTE PTR [rdi], 32			; 00000020H
	inc	rdi
; Line 1181
	sub	r14d, 1
	jne	SHORT $LL78@stbsp_vspr
$LN1148@stbsp_vspr:
; Line 1183
	cmp	r14d, 4
	jl	SHORT $LN80@stbsp_vspr
	mov	ebx, r14d
	mov	edx, 538976288				; 20202020H
	shr	rbx, 2
	mov	rcx, rdi
	mov	r8, rbx
	shl	r8, 2
	call	memset
	lea	rdi, QWORD PTR [rdi+rbx*4]
	neg	ebx
	lea	r14d, DWORD PTR [r14+rbx*4]
$LN80@stbsp_vspr:
; Line 1188
	test	r14d, r14d
	je	SHORT $LN82@stbsp_vspr
	mov	r8d, r14d
	mov	dl, 32					; 00000020H
	mov	rcx, rdi
	mov	ebx, r14d
	call	memset
	add	rdi, rbx
$LN82@stbsp_vspr:
; Line 1192
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
	test	r13, r13
	je	SHORT $LN310@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN310@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rdx, r12
	add	r14d, r8d
	mov	rcx, r11
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r13
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
$LN310@stbsp_vspr:
; Line 1174
	mov	edx, DWORD PTR fw$2$[rsp]
	test	edx, edx
	jg	$LL76@stbsp_vspr
; Line 1173
	movzx	r9d, BYTE PTR stbsp__comma
	movzx	r12d, BYTE PTR lead$6[rbp-256]
	mov	r14d, DWORD PTR pr$3$[rsp]
	mov	ecx, DWORD PTR fl$1$[rsp]
	mov	BYTE PTR stbsp__comma$1$[rsp], r9b
	jmp	SHORT $LN77@stbsp_vspr
$LN1154@stbsp_vspr:
; Line 1196
	movzx	r9d, BYTE PTR stbsp__comma$1$[rsp]
$LN77@stbsp_vspr:
	lea	rbx, QWORD PTR lead$6[rbp-255]
; Line 1197
	test	r12b, r12b
	je	$LN85@stbsp_vspr
	npad	4
$LL84@stbsp_vspr:
; Line 1198
	movsx	ecx, r12b
	test	r13, r13
	je	SHORT $LN313@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	ecx, eax
	cmovg	ecx, eax
$LN313@stbsp_vspr:
; Line 1199
	sub	r12b, cl
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 1200
	test	ecx, ecx
	je	SHORT $LN87@stbsp_vspr
	npad	13
$LL86@stbsp_vspr:
; Line 1201
	movzx	eax, BYTE PTR [rbx]
	inc	rbx
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 1202
	sub	ecx, 1
	jne	SHORT $LL86@stbsp_vspr
	movzx	r12d, BYTE PTR lead$6[rbp-256]
$LN87@stbsp_vspr:
; Line 1204
	test	r13, r13
	je	SHORT $LN316@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN316@stbsp_vspr
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	mov	rcx, r11
	add	DWORD PTR tlen$1$[rsp], r8d
	call	r13
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$LN1163@stbsp_vspr
	movzx	r12d, BYTE PTR lead$6[rbp-256]
$LN316@stbsp_vspr:
; Line 1197
	test	r12b, r12b
	jne	$LL84@stbsp_vspr
	movzx	r9d, BYTE PTR stbsp__comma
	mov	ecx, DWORD PTR fl$1$[rsp]
	mov	BYTE PTR stbsp__comma$1$[rsp], r9b
$LN85@stbsp_vspr:
; Line 1208
	mov	r8d, r15d
; Line 1210
	mov	r13d, ecx
	shr	r8d, 24
	mov	DWORD PTR c$1$[rsp], r8d
	and	r13d, 64				; 00000040H
	je	SHORT $LN427@stbsp_vspr
	and	r15d, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [r8+1]
	xor	edx, edx
	lea	eax, DWORD PTR [r14+r15]
	mov	r15d, r8d
	div	ecx
	sub	r15d, edx
	jmp	SHORT $LN428@stbsp_vspr
$LN427@stbsp_vspr:
	xor	eax, eax
	mov	r15d, eax
$LN428@stbsp_vspr:
; Line 1211
	test	r14d, r14d
	jle	$LN1152@stbsp_vspr
	mov	r12, QWORD PTR callback$GSCopy$1$[rbp-256]
	npad	1
$LL88@stbsp_vspr:
; Line 1212
	test	r12, r12
	je	SHORT $LN319@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	DWORD PTR pr$3$[rsp], eax
	cmovg	r14d, eax
$LN319@stbsp_vspr:
; Line 1213
	sub	DWORD PTR pr$3$[rsp], r14d
; Line 1214
	test	r13d, r13d
	jne	SHORT $LN92@stbsp_vspr
; Line 1215
	test	r14d, r14d
	je	SHORT $LN1149@stbsp_vspr
$LL90@stbsp_vspr:
; Line 1216
	test	dil, 3
	je	SHORT $LN1149@stbsp_vspr
; Line 1218
	mov	BYTE PTR [rdi], 48			; 00000030H
	inc	rdi
; Line 1219
	sub	r14d, 1
	jne	SHORT $LL90@stbsp_vspr
$LN1149@stbsp_vspr:
; Line 1221
	cmp	r14d, 4
	jl	SHORT $LN92@stbsp_vspr
	mov	ebx, r14d
	mov	edx, 808464432				; 30303030H
	shr	rbx, 2
	mov	rcx, rdi
	mov	r8, rbx
	shl	r8, 2
	call	memset
	mov	r8d, DWORD PTR c$1$[rsp]
	lea	rdi, QWORD PTR [rdi+rbx*4]
	movzx	r9d, BYTE PTR stbsp__comma$1$[rsp]
	neg	ebx
	lea	r14d, DWORD PTR [r14+rbx*4]
$LN92@stbsp_vspr:
; Line 1227
	test	r14d, r14d
	je	SHORT $LN95@stbsp_vspr
	xor	r12d, r12d
$LL94@stbsp_vspr:
; Line 1228
	test	r13d, r13d
	je	SHORT $LN322@stbsp_vspr
	mov	eax, r15d
	inc	r15d
	cmp	eax, r8d
	jne	SHORT $LN322@stbsp_vspr
; Line 1229
	mov	r15d, r12d
; Line 1230
	mov	BYTE PTR [rdi], r9b
; Line 1231
	jmp	SHORT $LN323@stbsp_vspr
$LN322@stbsp_vspr:
; Line 1232
	mov	BYTE PTR [rdi], 48			; 00000030H
$LN323@stbsp_vspr:
; Line 1227
	inc	rdi
; Line 1233
	sub	r14d, 1
	jne	SHORT $LL94@stbsp_vspr
	mov	r12, QWORD PTR callback$GSCopy$1$[rbp-256]
$LN95@stbsp_vspr:
; Line 1235
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
	test	r12, r12
	je	SHORT $LN326@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN326@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rcx, r11
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	add	r14d, r8d
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
	movzx	r9d, BYTE PTR stbsp__comma
	mov	BYTE PTR stbsp__comma$1$[rsp], r9b
$LN326@stbsp_vspr:
; Line 1211
	mov	r14d, DWORD PTR pr$3$[rsp]
	mov	r8d, DWORD PTR c$1$[rsp]
	test	r14d, r14d
	jg	$LL88@stbsp_vspr
	movzx	r12d, BYTE PTR lead$6[rbp-256]
$LN1152@stbsp_vspr:
; Line 1240
	mov	r13, QWORD PTR sn$1$[rsp]
$LN89@stbsp_vspr:
	lea	rbx, QWORD PTR lead$6[rbp-255]
	mov	QWORD PTR sn$3[rsp], rbx
; Line 1241
	test	r12b, r12b
	je	$LN97@stbsp_vspr
	mov	r9, QWORD PTR callback$GSCopy$1$[rbp-256]
$LL96@stbsp_vspr:
; Line 1243
	movsx	ecx, r12b
	test	r9, r9
	je	SHORT $LN329@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	ecx, eax
	cmovg	ecx, eax
$LN329@stbsp_vspr:
; Line 1244
	sub	r12b, cl
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 1245
	test	ecx, ecx
	je	SHORT $LN99@stbsp_vspr
	npad	9
$LL98@stbsp_vspr:
; Line 1246
	movzx	eax, BYTE PTR [rbx]
	inc	rbx
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 1247
	sub	ecx, 1
	jne	SHORT $LL98@stbsp_vspr
; Line 1246
	movzx	r12d, BYTE PTR lead$6[rbp-256]
	mov	QWORD PTR sn$3[rsp], rbx
$LN99@stbsp_vspr:
; Line 1249
	test	r9, r9
	je	SHORT $LN332@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN332@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rcx, r11
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	add	r14d, r8d
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r9
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
	movzx	r12d, BYTE PTR lead$6[rbp-256]
	mov	r9, QWORD PTR callback$GSCopy$1$[rbp-256]
$LN332@stbsp_vspr:
; Line 1241
	test	r12b, r12b
	jne	$LL96@stbsp_vspr
$LN97@stbsp_vspr:
; Line 1254
	mov	r12, QWORD PTR callback$GSCopy$1$[rbp-256]
	test	r13d, r13d
	je	$LN526@stbsp_vspr
	npad	6
$LL100@stbsp_vspr:
; Line 1256
	mov	ecx, r13d
	test	r12, r12
	je	SHORT $LN335@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	r13d, eax
	cmovg	ecx, eax
$LN335@stbsp_vspr:
; Line 1257
	sub	r13d, ecx
; Line 1258
	cmp	ecx, 4
	jl	SHORT $LN525@stbsp_vspr
; Line 1257
	mov	edx, ecx
	shr	rdx, 2
	mov	eax, edx
	neg	eax
	lea	ecx, DWORD PTR [rcx+rax*4]
	npad	3
$LL102@stbsp_vspr:
; Line 1258
	mov	eax, DWORD PTR [rsi]
	add	rsi, 4
	mov	DWORD PTR [rdi], eax
	add	rdi, 4
	sub	rdx, 1
	jne	SHORT $LL102@stbsp_vspr
$LN525@stbsp_vspr:
; Line 1264
	test	ecx, ecx
	je	SHORT $LN105@stbsp_vspr
	npad	10
$LL104@stbsp_vspr:
; Line 1265
	movzx	eax, BYTE PTR [rsi]
	inc	rsi
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 1266
	sub	ecx, 1
	jne	SHORT $LL104@stbsp_vspr
$LN105@stbsp_vspr:
; Line 1268
	test	r12, r12
	je	SHORT $LN338@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN338@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rcx, r11
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	add	r14d, r8d
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
$LN338@stbsp_vspr:
; Line 1254
	test	r13d, r13d
	jne	$LL100@stbsp_vspr
$LN526@stbsp_vspr:
; Line 1272
	mov	r14d, DWORD PTR tz$1$[rbp-256]
	test	r14d, r14d
	je	$LN107@stbsp_vspr
$LL106@stbsp_vspr:
; Line 1274
	mov	esi, r14d
	test	r12, r12
	je	SHORT $LN341@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	r14d, eax
	cmovg	esi, eax
$LN341@stbsp_vspr:
; Line 1275
	sub	r14d, esi
; Line 1276
	test	esi, esi
	je	SHORT $LN1150@stbsp_vspr
$LL108@stbsp_vspr:
; Line 1277
	test	dil, 3
	je	SHORT $LN1150@stbsp_vspr
; Line 1279
	mov	BYTE PTR [rdi], 48			; 00000030H
	inc	rdi
; Line 1280
	sub	esi, 1
	jne	SHORT $LL108@stbsp_vspr
$LN1150@stbsp_vspr:
; Line 1282
	cmp	esi, 4
	jl	SHORT $LN110@stbsp_vspr
	mov	ebx, esi
	mov	edx, 808464432				; 30303030H
	shr	rbx, 2
	mov	rcx, rdi
	mov	r8, rbx
	shl	r8, 2
	call	memset
	lea	rdi, QWORD PTR [rdi+rbx*4]
	neg	ebx
	lea	esi, DWORD PTR [rsi+rbx*4]
$LN110@stbsp_vspr:
; Line 1287
	test	esi, esi
	je	SHORT $LN112@stbsp_vspr
	mov	r8d, esi
	mov	dl, 48					; 00000030H
	mov	rcx, rdi
	mov	ebx, esi
	call	memset
	add	rdi, rbx
$LN112@stbsp_vspr:
; Line 1291
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
	test	r12, r12
	je	SHORT $LN345@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN345@stbsp_vspr
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	mov	rcx, r11
	add	DWORD PTR tlen$1$[rsp], r8d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$LN1163@stbsp_vspr
$LN345@stbsp_vspr:
; Line 1272
	test	r14d, r14d
	jne	$LL106@stbsp_vspr
$LN107@stbsp_vspr:
; Line 1296
	cmp	BYTE PTR tail$7[rbp-256], 0
	lea	rbx, QWORD PTR tail$7[rbp-255]
	mov	QWORD PTR sn$3[rsp], rbx
	je	$LN115@stbsp_vspr
	npad	1
$LL114@stbsp_vspr:
; Line 1298
	movsx	ecx, BYTE PTR tail$7[rbp-256]
	test	r12, r12
	je	SHORT $LN348@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	ecx, eax
	cmovg	ecx, eax
$LN348@stbsp_vspr:
; Line 1299
	sub	BYTE PTR tail$7[rbp-256], cl
; Line 1300
	test	ecx, ecx
	je	SHORT $LN117@stbsp_vspr
	npad	1
$LL116@stbsp_vspr:
; Line 1301
	movzx	eax, BYTE PTR [rbx]
	inc	rbx
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 1302
	sub	ecx, 1
	jne	SHORT $LL116@stbsp_vspr
; Line 1301
	mov	QWORD PTR sn$3[rsp], rbx
$LN117@stbsp_vspr:
; Line 1304
	test	r12, r12
	je	SHORT $LN351@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN351@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rcx, r11
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	add	r14d, r8d
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
$LN351@stbsp_vspr:
; Line 1296
	cmp	BYTE PTR tail$7[rbp-256], 0
	jne	SHORT $LL114@stbsp_vspr
$LN115@stbsp_vspr:
; Line 1308
	mov	eax, DWORD PTR fl$1$[rsp]
	test	al, 1
	je	$LN1165@stbsp_vspr
; Line 1309
	mov	r14d, DWORD PTR fw$2$[rsp]
	test	r14d, r14d
	jle	$LN1165@stbsp_vspr
$LL118@stbsp_vspr:
; Line 1312
	mov	esi, r14d
	test	r12, r12
	je	SHORT $LN356@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	r14d, eax
	cmovg	esi, eax
$LN356@stbsp_vspr:
; Line 1313
	sub	r14d, esi
; Line 1314
	test	esi, esi
	je	SHORT $LN1151@stbsp_vspr
$LL120@stbsp_vspr:
; Line 1315
	test	dil, 3
	je	SHORT $LN1151@stbsp_vspr
; Line 1317
	mov	BYTE PTR [rdi], 32			; 00000020H
	inc	rdi
; Line 1318
	sub	esi, 1
	jne	SHORT $LL120@stbsp_vspr
$LN1151@stbsp_vspr:
; Line 1320
	cmp	esi, 4
	jl	SHORT $LN122@stbsp_vspr
	mov	ebx, esi
	mov	edx, 538976288				; 20202020H
	shr	rbx, 2
	mov	rcx, rdi
	mov	r8, rbx
	shl	r8, 2
	call	memset
	lea	rdi, QWORD PTR [rdi+rbx*4]
	neg	ebx
	lea	esi, DWORD PTR [rsi+rbx*4]
$LN122@stbsp_vspr:
; Line 1325
	test	esi, esi
	je	SHORT $LN124@stbsp_vspr
	mov	r8d, esi
	mov	dl, 32					; 00000020H
	mov	rcx, rdi
	mov	ebx, esi
	call	memset
	add	rdi, rbx
$LN124@stbsp_vspr:
; Line 1327
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
	test	r12, r12
	je	SHORT $LN360@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN360@stbsp_vspr
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	mov	rcx, r11
	add	DWORD PTR tlen$1$[rsp], r8d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN1163@stbsp_vspr
$LN360@stbsp_vspr:
; Line 1310
	test	r14d, r14d
	jne	$LL118@stbsp_vspr
$LN1165@stbsp_vspr:
; Line 1344
	mov	r15, QWORD PTR f$1$[rsp]
	xor	esi, esi
	mov	r14d, DWORD PTR tlen$1$[rsp]
	inc	r15
	mov	r10, QWORD PTR va$GSCopy$1$[rsp]
	mov	r9, QWORD PTR user$GSCopy$1$[rbp-256]
	jmp	$LL2@stbsp_vspr
$endfmt$1226:
; Line 1348
	test	r12, r12
	jne	SHORT $LN363@stbsp_vspr
; Line 1349
	mov	BYTE PTR [rdi], r12b
	jmp	SHORT $done$1227
$LN363@stbsp_vspr:
; Line 1351
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+511]
	cmp	eax, 512				; 00000200H
	jl	SHORT $done$1227
	add	r14d, r8d
	mov	rdx, r9
	mov	rcx, r11
	call	r12
	mov	r11, rax
	mov	rdi, rax
	jmp	SHORT $done$1227
$LN1163@stbsp_vspr:
; Line 1354
	mov	r14d, DWORD PTR tlen$1$[rsp]
$done$1227:
	sub	edi, r11d
	lea	eax, DWORD PTR [r14+rdi]
; Line 1355
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+776]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
$LN1023@stbsp_vspr:
	DD	$LN140@stbsp_vspr
	DD	$LN141@stbsp_vspr
	DD	$LN143@stbsp_vspr
	DD	$LN142@stbsp_vspr
	DD	$LN139@stbsp_vspr
	DD	$LN138@stbsp_vspr
	DD	$LN149@stbsp_vspr
	DD	$LN148@stbsp_vspr
	DD	$flags_done$1228
$LN1022@stbsp_vspr:
	DB	0
	DB	8
	DB	8
	DB	1
	DB	2
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	5
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
$LN1021@stbsp_vspr:
	DD	$LN165@stbsp_vspr
	DD	$LN158@stbsp_vspr
	DD	$LN162@stbsp_vspr
	DD	$LN160@stbsp_vspr
	DD	$LN169@stbsp_vspr
$LN1020@stbsp_vspr:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	2
	DB	4
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	npad	2
$LN1019@stbsp_vspr:
	DD	$LN177@stbsp_vspr
	DD	$LN256@stbsp_vspr
	DD	$LN207@stbsp_vspr
	DD	$LN191@stbsp_vspr
	DD	$LN264@stbsp_vspr
	DD	$LN174@stbsp_vspr
	DD	$LN276@stbsp_vspr
	DD	$LN219@stbsp_vspr
	DD	$LN176@stbsp_vspr
	DD	$LN260@stbsp_vspr
	DD	$LN263@stbsp_vspr
	DD	$LN171@stbsp_vspr
	DD	$LN362@stbsp_vspr
$LN1018@stbsp_vspr:
	DB	0
	DB	1
	DB	12
	DB	12
	DB	2
	DB	12
	DB	3
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	4
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	0
	DB	1
	DB	5
	DB	6
	DB	2
	DB	7
	DB	3
	DB	12
	DB	6
	DB	12
	DB	12
	DB	12
	DB	12
	DB	8
	DB	9
	DB	10
	DB	12
	DB	12
	DB	11
	DB	12
	DB	6
	DB	12
	DB	12
	DB	4
stbsp_vsprintfcb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_snprintf
_TEXT	SEGMENT
buf$ = 48
count$ = 56
fmt$ = 64
stbsp_snprintf PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1461
$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 40					; 00000028H
; Line 1464
	lea	r9, QWORD PTR fmt$[rsp+8]
; Line 1466
	call	stbsp_vsnprintf
; Line 1470
	add	rsp, 40					; 00000028H
	ret	0
stbsp_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_sprintf
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
stbsp_sprintf PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1377
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1380
	lea	rax, QWORD PTR fmt$[rsp+8]
; Line 1381
	mov	r9, rdx
	mov	r8, rcx
	mov	QWORD PTR [rsp+32], rax
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1384
	add	rsp, 56					; 00000038H
	ret	0
stbsp_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_vsnprintf
_TEXT	SEGMENT
c$ = 48
__$ArrayPad$ = 576
buf$ = 624
count$ = 632
fmt$ = 640
va$ = 648
stbsp_vsnprintf PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1431
$LN23:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 592				; 00000250H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rsi, r9
	mov	r11, r8
	mov	edi, edx
	mov	rbx, rcx
; Line 1434
	test	edx, edx
	jne	SHORT $LN2@stbsp_vsnp
	test	rcx, rcx
	jne	SHORT $LN2@stbsp_vsnp
; Line 1438
	mov	QWORD PTR [rsp+32], r9
	lea	rdx, QWORD PTR c$[rsp]
	mov	r9, r8
	lea	rcx, OFFSET FLAT:stbsp__count_clamp_callback
	xor	eax, eax
	lea	r8, QWORD PTR c$[rsp+16]
	mov	DWORD PTR c$[rsp+12], eax
	call	stbsp_vsprintfcb
; Line 1439
	jmp	$LN21@stbsp_vsnp
$LN2@stbsp_vsnp:
; Line 1396
	xor	eax, eax
; Line 1444
	mov	QWORD PTR c$[rsp], rbx
; Line 1401
	test	edi, edi
	mov	DWORD PTR c$[rsp+12], eax
	mov	r8d, edi
; Line 1445
	mov	ecx, edi
; Line 1401
	cmovns	r8d, eax
; Line 1445
	mov	DWORD PTR c$[rsp+8], ecx
	mov	r10, rbx
; Line 1401
	mov	r9, rbx
	test	r8d, r8d
	je	SHORT $LN11@stbsp_vsnp
; Line 1402
	movsxd	rdx, r8d
	test	rbx, rbx
	je	SHORT $LN8@stbsp_vsnp
	npad	9
$LL9@stbsp_vsnp:
; Line 1409
	movzx	ecx, BYTE PTR [rax]
	mov	BYTE PTR [rax+rbx], cl
	inc	rax
; Line 1410
	cmp	rax, rdx
	jb	SHORT $LL9@stbsp_vsnp
	mov	ecx, DWORD PTR c$[rsp+8]
	mov	r10, QWORD PTR c$[rsp]
$LN8@stbsp_vsnp:
; Line 1412
	lea	r9, QWORD PTR [rdx+r10]
; Line 1413
	sub	ecx, r8d
	mov	QWORD PTR c$[rsp], r9
	mov	edx, ecx
	mov	DWORD PTR c$[rsp+8], ecx
$LN11@stbsp_vsnp:
; Line 1416
	lea	r8, QWORD PTR c$[rsp+16]
	test	edx, edx
	jle	SHORT $LN15@stbsp_vsnp
; Line 1418
	cmp	edx, 512				; 00000200H
	cmovge	r8, r9
$LN15@stbsp_vsnp:
; Line 1448
	mov	r9, r11
	mov	QWORD PTR [rsp+32], rsi
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__clamp_callback
	call	stbsp_vsprintfcb
; Line 1451
	mov	ecx, DWORD PTR c$[rsp]
; Line 1454
	lea	eax, DWORD PTR [rdi-1]
	sub	ecx, ebx
	cmp	ecx, edi
	cmovl	eax, ecx
	cdqe
	mov	BYTE PTR [rax+rbx], 0
$LN21@stbsp_vsnp:
; Line 1458
	mov	eax, DWORD PTR c$[rsp+12]
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 592				; 00000250H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
stbsp_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_vsprintf
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
va$ = 80
stbsp_vsprintf PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1473
$LN4:
	sub	rsp, 56					; 00000038H
; Line 1474
	mov	QWORD PTR [rsp+32], r8
	mov	r9, rdx
	mov	r8, rcx
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1475
	add	rsp, 56					; 00000038H
	ret	0
stbsp_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; Line 959
	lea	rsi, QWORD PTR _Format$[rsp+8]
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 963
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 645
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccfilesize
_TEXT	SEGMENT
file$ = 8
ccfilesize PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 37
	xor	edx, edx
	rex_jmp	QWORD PTR __imp_GetFileSize
ccfilesize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccpushfile
_TEXT	SEGMENT
file$ = 64
offset$ = 72
length$ = 80
file_data$ = 88
ccpushfile PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 67
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbp, r9
	mov	edi, r8d
	mov	esi, edx
	mov	rbx, rcx
; Line 32
	cmp	rcx, -1
; Line 67
	je	SHORT $LN10@ccpushfile
; Line 37
	xor	edx, edx
	call	QWORD PTR __imp_GetFileSize
; Line 70
	cmp	eax, esi
	jb	SHORT $LN10@ccpushfile
; Line 71
	xor	esi, esi
	xor	r9d, r9d
	mov	r8d, edi
	mov	QWORD PTR [rsp+32], rsi
	mov	rdx, rbp
	mov	rcx, rbx
	call	QWORD PTR __imp_WriteFile
	test	eax, eax
	cmove	edi, esi
	mov	eax, edi
	jmp	SHORT $LN1@ccpushfile
$LN10@ccpushfile:
	xor	eax, eax
$LN1@ccpushfile:
; Line 73
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ccpushfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccpullfile
_TEXT	SEGMENT
length$ = 64
file$ = 64
offset$ = 72
lplength$ = 80
ccpullfile PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 53
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, r8
	mov	ebx, edx
	mov	rsi, rcx
; Line 32
	cmp	rcx, -1
; Line 53
	je	SHORT $LN21@ccpullfile
; Line 37
	xor	edx, edx
	call	QWORD PTR __imp_GetFileSize
; Line 56
	xor	ebp, ebp
; Line 37
	mov	r9d, eax
; Line 56
	test	rdi, rdi
	je	SHORT $LN8@ccpullfile
	mov	ecx, DWORD PTR [rdi]
	jmp	SHORT $LN9@ccpullfile
$LN8@ccpullfile:
	mov	ecx, ebp
$LN9@ccpullfile:
; Line 57
	lea	eax, DWORD PTR [rcx+rbx]
	mov	DWORD PTR length$[rsp], ecx
	cmp	r9d, eax
	jb	SHORT $LN21@ccpullfile
; Line 58
	test	ecx, ecx
	jne	SHORT $LN4@ccpullfile
	mov	DWORD PTR length$[rsp], r9d
	mov	rcx, r9
$LN4@ccpullfile:
; File W:\cpp\void\ktt-c\cc.c
; Line 554
	test	rcx, rcx
	je	SHORT $LN19@ccpullfile
; Line 558
	call	malloc
	mov	rbx, rax
	jmp	SHORT $LN16@ccpullfile
$LN19@ccpullfile:
; Line 560
	call	free
; Line 561
	mov	rbx, rbp
$LN16@ccpullfile:
; File W:\cpp\void\ktt-c\ccfio.c
; Line 61
	mov	r8d, DWORD PTR length$[rsp]
	lea	r9, QWORD PTR length$[rsp]
	test	rdi, rdi
	mov	QWORD PTR [rsp+32], rbp
	mov	rdx, rbx
	mov	rcx, rsi
	cmovne	r9, rdi
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	cmove	rbx, rbp
	mov	rax, rbx
	jmp	SHORT $LN1@ccpullfile
$LN21@ccpullfile:
	xor	eax, eax
$LN1@ccpullfile:
; Line 63
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ccpullfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccopenfile
_TEXT	SEGMENT
name$ = 80
ccopenfile PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 47
	push	rbx
	sub	rsp, 64					; 00000040H
	xor	ebx, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+48], rbx
	mov	edx, -1073741824			; c0000000H
	mov	DWORD PTR [rsp+40], ebx
	mov	DWORD PTR [rsp+32], 4
	lea	r8d, QWORD PTR [rbx+3]
	call	QWORD PTR __imp_CreateFileA
; Line 32
	cmp	rax, -1
; Line 48
	cmovne	rbx, rax
	mov	rax, rbx
; Line 49
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
ccopenfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccclosefile
_TEXT	SEGMENT
file$ = 8
ccclosefile PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 42
	rex_jmp	QWORD PTR __imp_CloseHandle
ccclosefile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccrealfile
_TEXT	SEGMENT
file$ = 8
ccrealfile PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 32
	xor	eax, eax
	cmp	rcx, -1
	setne	al
; Line 33
	ret	0
ccrealfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccclocksecs
_TEXT	SEGMENT
l$ = 48
t$ = 48
ccclocksecs PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 25
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 26
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 27
	xorps	xmm0, xmm0
	test	rbx, rbx
	js	SHORT $LN3@ccclocksec
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, QWORD PTR l$[rsp]
	cvtsi2sd xmm0, rbx
	divsd	xmm0, xmm1
; Line 28
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN3@ccclocksec:
; Line 27
	mov	rax, rbx
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, QWORD PTR l$[rsp]
	shr	rax, 1
	and	ebx, 1
	or	rax, rbx
	cvtsi2sd xmm0, rax
	addsd	xmm0, xmm0
	divsd	xmm0, xmm1
; Line 28
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccclocksecs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccclocktick
_TEXT	SEGMENT
l$ = 48
ccclocktick PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 19
	sub	rsp, 40					; 00000028H
; Line 20
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 21
	mov	rax, QWORD PTR l$[rsp]
; Line 22
	add	rsp, 40					; 00000028H
	ret	0
ccclocktick ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctrace_
_TEXT	SEGMENT
label$ = 112
format$ = 120
cctrace_ PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclog.h
; Line 266
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+32], r9
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 273
	mov	r8d, DWORD PTR _tls_index
	lea	r9, QWORD PTR [rax+24]
	mov	rax, QWORD PTR gs:88
	mov	rsi, rcx
	mov	ebp, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	mov	rbx, QWORD PTR [rax+r8*8]
; File W:\cpp\void\ktt-c\cc.c
; Line 493
	mov	r8, rdx
	mov	edx, 255				; 000000ffH
; File W:\cpp\void\ktt-c\cclog.h
; Line 273
	lea	rdi, QWORD PTR [rbx+rbp]
; File W:\cpp\void\ktt-c\cc.c
; Line 493
	mov	rcx, rdi
	call	stbsp_vsnprintf
; File W:\cpp\void\ktt-c\cclog.h
; Line 273
	inc	eax
; Line 276
	mov	QWORD PTR [rsp+56], rdi
	movsxd	rcx, eax
	lea	r8, OFFSET FLAT:??_C@_0BE@GMJDDHPH@?$CFs?3?5?$CFs?$FL?$CFi?$FN?5?$CFs?$CI?$CJ?5?$CFs?6@
	add	rbx, rcx
	xorps	xmm1, xmm1
	xorps	xmm0, xmm0
	mov	edx, 4095				; 00000fffH
	psrldq	xmm0, 8
	add	rbx, rbp
	movq	QWORD PTR [rsp+48], xmm0
	mov	rcx, rbx
	movd	DWORD PTR [rsp+40], xmm1
	sub	edx, eax
	psrldq	xmm1, 8
	mov	r9, rsi
	movq	QWORD PTR [rsp+32], xmm1
	call	ccformatex
; Line 254
	mov	rcx, rbx
	call	printf
; Line 282
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
cctrace_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccinternalalloctr_
_TEXT	SEGMENT
size$ = 48
data$ = 56
ccinternalalloctr_ PROC					; COMDAT
; File W:\cpp\void\ktt-c\cc.c
; Line 553
	sub	rsp, 40					; 00000028H
	mov	rax, rdx
; Line 554
	test	rcx, rcx
	je	SHORT $LN4@ccinternal
; Line 555
	test	rdx, rdx
	je	SHORT $LN3@ccinternal
; Line 556
	mov	rdx, rcx
	mov	rcx, rax
; Line 562
	add	rsp, 40					; 00000028H
; Line 556
	jmp	realloc
$LN3@ccinternal:
; Line 562
	add	rsp, 40					; 00000028H
; Line 558
	jmp	malloc
$LN4@ccinternal:
; Line 560
	mov	rcx, rax
	call	free
; Line 561
	xor	eax, eax
; Line 562
	add	rsp, 40					; 00000028H
	ret	0
ccinternalalloctr_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccuseralloctr_
_TEXT	SEGMENT
size$ = 48
data$ = 56
ccuseralloctr_ PROC					; COMDAT
; File W:\cpp\void\ktt-c\cc.c
; Line 660
	sub	rsp, 40					; 00000028H
	mov	rax, rdx
; Line 554
	test	rcx, rcx
	je	SHORT $LN6@ccuserallo
; Line 555
	test	rdx, rdx
	je	SHORT $LN5@ccuserallo
; Line 556
	mov	rdx, rcx
	mov	rcx, rax
; Line 662
	add	rsp, 40					; 00000028H
; Line 556
	jmp	realloc
$LN5@ccuserallo:
; Line 662
	add	rsp, 40					; 00000028H
; Line 558
	jmp	malloc
$LN6@ccuserallo:
; Line 560
	mov	rcx, rax
	call	free
; Line 661
	xor	eax, eax
; Line 662
	add	rsp, 40					; 00000028H
	ret	0
ccuseralloctr_ ENDP
_TEXT	ENDS
END

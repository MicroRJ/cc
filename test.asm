; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_TLS	SEGMENT
ccallocator DQ	FLAT:ccuserallocator_
_TLS	ENDS
CONST	SEGMENT
$SG49153 DB	'expected '')''', 00H
	ORG $+3
$SG49154 DB	'err', 00H
$SG49159 DB	'war', 00H
$SG49155 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+3
$SG49164 DB	'war', 00H
$SG49156 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49158 DB	'function that returns function', 00H
	ORG $+1
$SG49160 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+3
$SG49170 DB	'err', 00H
$SG49161 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49163 DB	'function that returns array', 00H
$SG49190 DB	'err', 00H
$SG49165 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+3
$SG49221 DB	'err', 00H
$SG49166 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49169 DB	'expected '']''', 00H
	ORG $+3
$SG49171 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+3
$SG49236 DB	'err', 00H
$SG49172 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49189 DB	'expected '')''', 00H
	ORG $+3
$SG49191 DB	'ccread_direct_decl_name', 00H
$SG49192 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49220 DB	'expected initializer after ''=''', 00H
	ORG $+1
$SG49222 DB	'ccread_init_decl_name', 00H
	ORG $+2
$SG49223 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49235 DB	'expected constant expression after '':''', 00H
	ORG $+1
$SG49237 DB	'ccread_struct_decl_name', 00H
$SG49238 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49277 DB	'expected declarator', 00H
$SG49278 DB	'err', 00H
$SG49279 DB	'ccread_init_decl', 00H
	ORG $+3
$SG49293 DB	'err', 00H
$SG49280 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49292 DB	'expected declarator', 00H
$SG49315 DB	'err', 00H
$SG49294 DB	'ccread_struct_decl', 00H
	ORG $+1
$SG49320 DB	'err', 00H
$SG49295 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49314 DB	'expected ''{'' for struct specifier', 00H
	ORG $+2
$SG49325 DB	'err', 00H
$SG49316 DB	'ccread_struct_or_union_specifier', 00H
	ORG $+3
$SG49329 DB	'noimpl', 00H
	ORG $+1
$SG49412 DB	'err', 00H
$SG49317 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49319 DB	'expected '';''', 00H
	ORG $+3
$SG49321 DB	'ccread_struct_or_union_specifier', 00H
	ORG $+3
$SG49489 DB	'err', 00H
$SG49322 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49324 DB	'expected ''}'' for struct specifier', 00H
	ORG $+2
$SG49496 DB	'err', 00H
$SG49326 DB	'ccread_struct_or_union_specifier', 00H
	ORG $+3
$SG49503 DB	'err', 00H
$SG49327 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49411 DB	'unexpected ''...'', must be at end of function', 00H
	ORG $+3
$SG49413 DB	'ccread_param_decl', 00H
	ORG $+2
$SG49508 DB	'err', 00H
$SG49414 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49488 DB	'expected ''}''', 00H
	ORG $+3
$SG49490 DB	'ccread_statement', 00H
	ORG $+3
$SG49515 DB	'err', 00H
$SG49491 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49495 DB	'expected '';''', 00H
	ORG $+3
$SG49497 DB	'ccread_statement', 00H
	ORG $+3
$SG49520 DB	'err', 00H
$SG49498 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49502 DB	'expected expression', 00H
$SG49525 DB	'err', 00H
$SG49504 DB	'ccread_statement', 00H
	ORG $+3
$SG49531 DB	'err', 00H
$SG49505 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49507 DB	'expected '';''', 00H
	ORG $+3
$SG49509 DB	'ccread_statement', 00H
	ORG $+3
$SG49538 DB	'err', 00H
$SG49510 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49514 DB	'expected ''(''', 00H
	ORG $+3
$SG49516 DB	'ccread_statement', 00H
	ORG $+3
$SG49543 DB	'err', 00H
$SG49517 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49519 DB	'expected '')''', 00H
	ORG $+3
$SG49521 DB	'ccread_statement', 00H
	ORG $+3
$SG49552 DB	'err', 00H
$SG49522 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49524 DB	'expected expression', 00H
$SG49557 DB	'err', 00H
$SG49526 DB	'ccread_statement', 00H
	ORG $+3
$SG49562 DB	'err', 00H
$SG49527 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49530 DB	'expected statement', 00H
	ORG $+1
$SG49568 DB	'err', 00H
$SG49532 DB	'ccread_statement', 00H
	ORG $+3
$SG49574 DB	'err', 00H
$SG49533 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49537 DB	'missing goto label identifier', 00H
	ORG $+2
$SG49539 DB	'ccread_statement', 00H
	ORG $+3
$SG49585 DB	'err', 00H
$SG49540 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49542 DB	'expected '';''', 00H
	ORG $+3
$SG49544 DB	'ccread_statement', 00H
	ORG $+3
$SG49589 DB	'err', 00H
$SG49545 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49551 DB	'expected ''(''', 00H
	ORG $+3
$SG49553 DB	'ccread_statement', 00H
	ORG $+3
$SG49613 DB	'err', 00H
$SG49554 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49556 DB	'expected '')''', 00H
	ORG $+3
$SG49558 DB	'ccread_statement', 00H
	ORG $+3
$SG49645 DB	'err', 00H
$SG49559 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49561 DB	'expected expression', 00H
$SG49650 DB	'err', 00H
$SG49563 DB	'ccread_statement', 00H
	ORG $+3
$SG49655 DB	'err', 00H
$SG49564 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49567 DB	'expected statement', 00H
	ORG $+1
$SG49946 DB	'err', 00H
$SG49569 DB	'ccread_statement', 00H
	ORG $+3
$SG49679 DB	'array', 00H
	ORG $+2
$SG49864 DB	'.JP-WL', 00H
	ORG $+1
$SG49998 DB	'err', 00H
$SG49570 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49573 DB	'expected statement', 00H
	ORG $+1
$SG50052 DB	'>', 00H
	ORG $+2
$SG49575 DB	'ccread_statement', 00H
	ORG $+3
$SG49683 DB	'error', 00H
	ORG $+2
$SG49865 DB	'.JP-WE', 00H
	ORG $+1
$SG50054 DB	'>=', 00H
	ORG $+1
$SG49576 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49584 DB	'invalid statement, missing '':'' for label statement?', 00H
$SG50056 DB	'<', 00H
	ORG $+2
$SG49586 DB	'ccread_statement', 00H
	ORG $+3
$SG49861 DB	'.JP-E', 00H
	ORG $+2
$SG50058 DB	'<=', 00H
	ORG $+1
$SG49587 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49588 DB	'invalid statement', 00H
	ORG $+2
$SG50060 DB	'*', 00H
	ORG $+2
$SG49590 DB	'ccread_statement', 00H
	ORG $+3
$SG49866 DB	'error', 00H
	ORG $+2
$SG50062 DB	'/', 00H
	ORG $+2
$SG49591 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49612 DB	'expected ''}''', 00H
	ORG $+3
$SG49614 DB	'ccread_block', 00H
	ORG $+3
$SG49615 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49644 DB	'expected '';''', 00H
	ORG $+3
$SG49646 DB	'ccread_external_declaration', 00H
$SG50064 DB	'-', 00H
	ORG $+2
$SG49647 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49649 DB	'expected '';''', 00H
	ORG $+3
$SG49651 DB	'ccread_external_declaration', 00H
$SG50066 DB	'+', 00H
	ORG $+2
$SG49652 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49654 DB	'invalid external declaration', 00H
	ORG $+3
$SG49656 DB	'ccread_external_declaration', 00H
$SG50175 DB	'zro', 00H
$SG49657 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49682 DB	'integer', 00H
$SG49708 DB	'ccemit_constant', 00H
$SG49709 DB	'W:\cpp\void\cc\ccemit.c', 00H
$SG49755 DB	'internal', 00H
	ORG $+3
$SG49896 DB	'error', 00H
	ORG $+2
$SG50314 DB	'invoke', 00H
	ORG $+1
pf	DB	069H
	DB	075H
	DB	063H
	DB	066H
$SG49773 DB	'internal', 00H
	ORG $+3
$SG49895 DB	'main', 00H
	ORG $+3
$SG50068 DB	'error', 00H
	ORG $+2
$SG50325 DB	'invoke', 00H
	ORG $+1
fn	DB	078H
	DB	079H
	DB	07aH
	DB	077H
$SG49923 DB	'stack-mingle', 00H
	ORG $+3
$SG49924 DB	'ccstack_mingle', 00H
	ORG $+1
$SG49925 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG49926 DB	'stack-mingle', 00H
	ORG $+3
$SG49927 DB	'ccstack_mingle', 00H
	ORG $+1
$SG49928 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG49941 DB	'stack-yield', 00H
$SG50421 DB	'i', 00H
	ORG $+2
$SG49942 DB	'ccstack_yield', 00H
	ORG $+2
$SG49943 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG49948 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG49945 DB	'value kind is invalid, did you register this value and n'
	DB	'ot set its contents?', 00H
	ORG $+3
$SG49947 DB	'ccstack_yield', 00H
	ORG $+2
$SG49949 DB	'stack-yield', 00H
$SG50422 DB	'lli', 00H
$SG49950 DB	'ccstack_yield', 00H
	ORG $+2
$SG49951 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG49969 DB	'constant-value', 00H
	ORG $+1
$SG49997 DB	'stack_overflow', 00H
	ORG $+1
$SG49999 DB	'ccstack_push', 00H
	ORG $+3
$SG50000 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50001 DB	'stack_overflow', 00H
	ORG $+1
$SG50015 DB	'stack-local-alloc', 00H
	ORG $+2
$SG50423 DB	'c', 00H
	ORG $+2
$SG50016 DB	'ccstack_local_alloc', 00H
$SG50424 DB	'f', 00H
	ORG $+2
$SG50017 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50018 DB	'local_alloc', 00H
$SG50439 DB	'x%i', 00H
$SG50019 DB	'stack-local-alloc', 00H
	ORG $+2
$SG50449 DB	'%s', 00H
	ORG $+1
$SG50020 DB	'ccstack_local_alloc', 00H
$SG50455 DB	'*', 00H
	ORG $+2
$SG50021 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50069 DB	'internal-error', 00H
	ORG $+1
$SG50172 DB	'exec-edict', 00H
	ORG $+1
$SG50457 DB	'&', 00H
	ORG $+2
$SG50173 DB	'ccexec_edict', 00H
	ORG $+3
$SG50174 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50177 DB	'exec-edict-param', 00H
	ORG $+3
$SG50204 DB	'fetch', 00H
	ORG $+2
$SG50459 DB	'[]', 00H
	ORG $+1
$SG50178 DB	'ccexec_edict', 00H
	ORG $+3
$SG50179 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50180 DB	'exec-edict-param', 00H
	ORG $+3
$SG50262 DB	'error', 00H
	ORG $+2
$SG50472 DB	'%s ', 00H
$SG50181 DB	'ccexec_edict', 00H
	ORG $+3
$SG50182 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50184 DB	'exec-edict-local', 00H
	ORG $+3
$SG50277 DB	'error', 00H
	ORG $+2
$SG50479 DB	'%c', 00H
	ORG $+1
$SG50185 DB	'ccexec_edict', 00H
	ORG $+3
$SG50186 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50187 DB	'exec-edict-local', 00H
	ORG $+3
$SG50339 DB	'arg-0', 00H
	ORG $+2
$SG50505 DB	'(', 00H
	ORG $+2
$SG50188 DB	'ccexec_edict', 00H
	ORG $+3
$SG50189 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50191 DB	'exec-edict-address', 00H
	ORG $+1
$SG50507 DB	',', 00H
	ORG $+2
$SG50192 DB	'ccexec_edict', 00H
	ORG $+3
$SG50193 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50194 DB	'address', 00H
$SG50195 DB	'exec-edict-address', 00H
	ORG $+1
$SG50508 DB	')', 00H
	ORG $+2
$SG50196 DB	'ccexec_edict', 00H
	ORG $+3
$SG50197 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50199 DB	'exec-edict-fetch', 00H
	ORG $+3
$SG50517 DB	'%sm', 00H
$SG50200 DB	'ccexec_edict', 00H
	ORG $+3
$SG50201 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50205 DB	'exec-edict-fetch', 00H
	ORG $+3
$SG50518 DB	0dH, 0aH, 00H
	ORG $+1
$SG50206 DB	'ccexec_edict', 00H
	ORG $+3
$SG50207 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50209 DB	'exec-edict-store', 00H
	ORG $+3
$SG50519 DB	'{ ', 00H
	ORG $+1
$SG50210 DB	'ccexec_edict', 00H
	ORG $+3
$SG50211 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50212 DB	'exec-edict-store', 00H
	ORG $+3
$SG50520 DB	';', 00H
	ORG $+2
$SG50213 DB	'ccexec_edict', 00H
	ORG $+3
$SG50214 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50216 DB	'exec-edict-arith', 00H
	ORG $+3
$SG50523 DB	'}', 0dH, 0aH, 00H
$SG50217 DB	'ccexec_edict', 00H
	ORG $+3
$SG50218 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50219 DB	'exec-edict-arith', 00H
	ORG $+3
$SG50536 DB	',', 00H
	ORG $+2
$SG50220 DB	'ccexec_edict', 00H
	ORG $+3
$SG50221 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50224 DB	'exec-edict-jumpf', 00H
	ORG $+3
$SG50537 DB	')', 0dH, 0aH, 00H
$SG50225 DB	'ccexec_edict', 00H
	ORG $+3
$SG50226 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50228 DB	'exec-edict-jumpf', 00H
	ORG $+3
$SG50538 DB	'{ ', 00H
	ORG $+1
$SG50229 DB	'ccexec_edict', 00H
	ORG $+3
$SG50230 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50232 DB	'exec-edict-jumpt', 00H
	ORG $+3
$SG50539 DB	';', 00H
	ORG $+2
$SG50233 DB	'ccexec_edict', 00H
	ORG $+3
$SG50234 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50236 DB	'exec-edict-jumpt', 00H
	ORG $+3
$SG50542 DB	'}', 0dH, 0aH, 00H
$SG50237 DB	'ccexec_edict', 00H
	ORG $+3
$SG50238 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50240 DB	'exec-edict-return', 00H
	ORG $+2
$SG50553 DB	0dH, 0aH, 00H
	ORG $+1
$SG50241 DB	'ccexec_edict', 00H
	ORG $+3
$SG50242 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50243 DB	'exec-edict-return', 00H
	ORG $+2
$SG50554 DB	'{', 00H
	ORG $+2
$SG50244 DB	'ccexec_edict', 00H
	ORG $+3
$SG50245 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50247 DB	'exec-edict-invoke', 00H
	ORG $+2
$SG50556 DB	';', 00H
	ORG $+2
$SG50248 DB	'ccexec_edict', 00H
	ORG $+3
$SG50249 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50251 DB	'no-return value, error', 00H
	ORG $+1
$SG50252 DB	'exec-edict-invoke', 00H
	ORG $+2
$SG50557 DB	0dH, 0aH, 00H
	ORG $+1
$SG50253 DB	'ccexec_edict', 00H
	ORG $+3
$SG50254 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50263 DB	'exec-edict', 00H
	ORG $+1
$SG50558 DB	'} ', 00H
	ORG $+1
$SG50264 DB	'ccexec_edict', 00H
	ORG $+3
$SG50265 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50315 DB	'ccexec_invoke', 00H
	ORG $+2
$SG50316 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50317 DB	'procd-exec', 00H
	ORG $+1
$SG50559 DB	';', 0dH, 0aH, 00H
$SG50318 DB	'ccexec_invoke', 00H
	ORG $+2
$SG50319 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50322 DB	'procd-exec', 00H
	ORG $+1
$SG50560 DB	'*', 00H
	ORG $+2
$SG50323 DB	'ccexec_invoke', 00H
	ORG $+2
$SG50324 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50326 DB	'ccexec_invoke', 00H
	ORG $+2
$SG50327 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50346 DB	'ccexec_init', 00H
$SG50561 DB	'*=', 00H
	ORG $+1
$SG50347 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50352 DB	'ccexec_uninit', 00H
	ORG $+2
$SG50353 DB	'W:\cpp\void\cc\ccexec.c', 00H
$SG50395 DB	'gen_type', 00H
	ORG $+3
$SG50562 DB	'/', 00H
	ORG $+2
$SG50396 DB	'W:\cpp\void\cc\ccemit-c.c', 00H
	ORG $+2
$SG50433 DB	'%c%i', 00H
	ORG $+3
$SG50563 DB	'/=', 00H
	ORG $+1
$SG50436 DB	'%c%i_%i', 00H
$SG50500 DB	'static ', 00H
$SG50503 DB	'void', 00H
	ORG $+3
$SG50504 DB	0dH, 0aH, '%s', 00H
	ORG $+3
$SG50521 DB	0dH, 0aH, '  r.%c=%c;', 00H
	ORG $+3
$SG50522 DB	0dH, 0aH, '  return r;', 0dH, 0aH, 00H
$SG50533 DB	'static %s operator %s (', 00H
$SG50540 DB	0dH, 0aH, '  r.%c=a.%c%cb.%c;', 00H
	ORG $+3
$SG50541 DB	0dH, 0aH, '  return r;', 0dH, 0aH, 00H
$SG50552 DB	'typedef struct ', 00H
$SG50555 DB	0dH, 0aH, '  ', 00H
	ORG $+3
$SG50564 DB	'+', 00H
	ORG $+2
$SG50565 DB	'+=', 00H
	ORG $+1
$SG50566 DB	'-', 00H
	ORG $+2
$SG50567 DB	'-=', 00H
	ORG $+1
$SG50620 DB	'main', 00H
	ORG $+3
$SG50621 DB	'main', 00H
	ORG $+3
$SG50622 DB	'test.c', 00H
	ORG $+1
$SG50623 DB	'test-debug-system', 00H
	ORG $+2
$SG50624 DB	'main', 00H
	ORG $+3
$SG50625 DB	'test.c', 00H
	ORG $+1
$SG50670 DB	'log', 00H
$SG50626 DB	'test-debug-track-master', 00H
$SG50627 DB	'main', 00H
	ORG $+3
$SG50628 DB	'test.c', 00H
	ORG $+1
$SG50629 DB	'test-debug-track', 00H
	ORG $+3
$SG50630 DB	'main', 00H
	ORG $+3
$SG50631 DB	'test.c', 00H
	ORG $+1
$SG50632 DB	'main', 00H
	ORG $+3
$SG50633 DB	'test.c', 00H
	ORG $+1
$SG50634 DB	'main', 00H
	ORG $+3
$SG50635 DB	'test.c', 00H
	ORG $+1
$SG50636 DB	'main', 00H
	ORG $+3
$SG50637 DB	'test.c', 00H
	ORG $+1
$SG45969 DB	'NaN', 00H
$SG50638 DB	'test-debug-track', 00H
	ORG $+3
$SG50639 DB	'main', 00H
	ORG $+3
$SG50640 DB	'test.c', 00H
	ORG $+1
$SG45970 DB	'Inf', 00H
$SG50641 DB	'test-debug-track-master', 00H
$SG50642 DB	'main', 00H
	ORG $+3
$SG50643 DB	'test.c', 00H
	ORG $+1
$SG50644 DB	'test-debug-system', 00H
	ORG $+2
$SG50645 DB	'main', 00H
	ORG $+3
$SG50646 DB	'test.c', 00H
	ORG $+1
$SG50647 DB	'read', 00H
	ORG $+3
$SG50648 DB	'main', 00H
	ORG $+3
$SG50649 DB	'test.c', 00H
	ORG $+1
$SG46349 DB	'Gb', 00H
	ORG $+1
$SG50650 DB	'test.svm.c', 00H
	ORG $+1
$SG50651 DB	'read', 00H
	ORG $+3
$SG50652 DB	'main', 00H
	ORG $+3
$SG50653 DB	'test.c', 00H
	ORG $+1
$SG50654 DB	'emit', 00H
	ORG $+3
$SG50655 DB	'main', 00H
	ORG $+3
$SG50656 DB	'test.c', 00H
	ORG $+1
$SG50657 DB	'emit', 00H
	ORG $+3
$SG50658 DB	'main', 00H
	ORG $+3
$SG50659 DB	'test.c', 00H
	ORG $+1
$SG50660 DB	'exec', 00H
	ORG $+3
$SG50661 DB	'main', 00H
	ORG $+3
$SG50662 DB	'test.c', 00H
	ORG $+1
$SG50663 DB	'exec', 00H
	ORG $+3
$SG50664 DB	'main', 00H
	ORG $+3
$SG50665 DB	'test.c', 00H
	ORG $+1
$SG46352 DB	'Mb', 00H
	ORG $+1
$SG50666 DB	'compare', 00H
$SG50667 DB	'main', 00H
	ORG $+3
$SG50668 DB	'test.c', 00H
	ORG $+1
$SG50669 DB	'c:%i - cc:%i', 00H
	ORG $+3
$SG50671 DB	'main', 00H
	ORG $+3
$SG50672 DB	'test.c', 00H
	ORG $+1
$SG50673 DB	'compare', 00H
$SG50674 DB	'main', 00H
	ORG $+3
$SG50675 DB	'test.c', 00H
	ORG $+1
$SG50676 DB	'main', 00H
	ORG $+3
$SG50677 DB	'main', 00H
	ORG $+3
$SG50678 DB	'test.c', 00H
	ORG $+1
$SG45354 DB	'null', 00H
	ORG $+3
$SG45436 DB	'_KMGT', 00H
	ORG $+2
$SG45437 DB	'_kMGT', 00H
	ORG $+2
$SG46086 DB	'W:\cpp\void\cc\ccfio.c', 00H
	ORG $+1
stbsp__bot DQ	03ff0000000000000r		; 1
	DQ	04024000000000000r		; 10
	DQ	04059000000000000r		; 100
	DQ	0408f400000000000r		; 1000
	DQ	040c3880000000000r		; 10000
	DQ	040f86a0000000000r		; 100000
	DQ	0412e848000000000r		; 1e+06
	DQ	0416312d000000000r		; 1e+07
	DQ	04197d78400000000r		; 1e+08
	DQ	041cdcd6500000000r		; 1e+09
	DQ	04202a05f20000000r		; 1e+10
	DQ	042374876e8000000r		; 1e+11
	DQ	0426d1a94a2000000r		; 1e+12
	DQ	042a2309ce5400000r		; 1e+13
	DQ	042d6bcc41e900000r		; 1e+14
	DQ	0430c6bf526340000r		; 1e+15
	DQ	04341c37937e08000r		; 1e+16
	DQ	04376345785d8a000r		; 1e+17
	DQ	043abc16d674ec800r		; 1e+18
	DQ	043e158e460913d00r		; 1e+19
	DQ	04415af1d78b58c40r		; 1e+20
	DQ	0444b1ae4d6e2ef50r		; 1e+21
	DQ	04480f0cf064dd592r		; 1e+22
$SG46126 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
stbsp__negbot DQ 03fb999999999999ar		; 0.1
	DQ	03f847ae147ae147br		; 0.01
	DQ	03f50624dd2f1a9fcr		; 0.001
	DQ	03f1a36e2eb1c432dr		; 0.0001
	DQ	03ee4f8b588e368f1r		; 1e-05
	DQ	03eb0c6f7a0b5ed8dr		; 1e-06
	DQ	03e7ad7f29abcaf48r		; 1e-07
	DQ	03e45798ee2308c3ar		; 1e-08
	DQ	03e112e0be826d695r		; 1e-09
	DQ	03ddb7cdfd9d7bdbbr		; 1e-10
	DQ	03da5fd7fe1796495r		; 1e-11
	DQ	03d719799812dea11r		; 1e-12
	DQ	03d3c25c268497682r		; 1e-13
	DQ	03d06849b86a12b9br		; 1e-14
	DQ	03cd203af9ee75616r		; 1e-15
	DQ	03c9cd2b297d889bcr		; 1e-16
	DQ	03c670ef54646d497r		; 1e-17
	DQ	03c32725dd1d243acr		; 1e-18
	DQ	03bfd83c94fb6d2acr		; 1e-19
	DQ	03bc79ca10c924223r		; 1e-20
	DQ	03b92e3b40a0e9b4fr		; 1e-21
	DQ	03b5e392010175ee6r		; 1e-22
stbsp__negboterr DQ 0bc5999999999999ar		; -5.55112e-18
	DQ	0bc0eb851eb851eb8r		; -2.08167e-19
	DQ	0bbd89374bc6a7efar		; -2.08167e-20
	DQ	0bbb6a161e4f765fer		; -4.79217e-21
	DQ	0bb8ee78183f91e64r		; -8.18031e-22
	DQ	03b4b5a63f9a49c2cr		; 4.52519e-23
	DQ	03b15e1e99483b023r		; 4.52519e-24
	DQ	0bad03023df2d4c94r		; -2.09226e-25
	DQ	0bab34674bfabb83br		; -6.22816e-26
	DQ	0ba720a5465df8d2cr		; -3.64322e-27
	DQ	03a47f7bc7b4d28aar		; 6.0503e-28
	DQ	039f97f27f0f6e886r		; 2.01134e-29
	DQ	0b9cecd79a5a0df95r		; -3.03737e-30
	DQ	0394ea70909833de7r		; 1.18069e-32
	DQ	0b97937831647f5a0r		; -7.77054e-32
	DQ	03925b4c2ebe68799r		; 2.09022e-33
	DQ	0b90db7b2080a3029r		; -7.15424e-34
	DQ	0b8d7c628066e8ceer		; -7.15424e-35
	DQ	0388a52b31e9e3d07r		; 2.47541e-36
	DQ	038675447a5d8e536r		; 5.48467e-37
	DQ	0383f769fb7e0b75er		; 9.24625e-38
	DQ	0b7fa7566d9cba769r		; -4.85968e-39
stbsp__top DQ	044b52d02c7e14af6r		; 1e+23
	DQ	0497c06a5ec5433c6r		; 1e+46
	DQ	04e428bc8abe49f64r		; 1e+69
	DQ	053088ba3bf284e24r		; 1e+92
	DQ	057d03e29f5c2b18cr		; 1e+115
	DQ	05c957f48bb41db7cr		; 1e+138
	DQ	0615c73892ecbfbf4r		; 1e+161
	DQ	06622d3d6f88f0b3dr		; 1e+184
	DQ	06ae8eb0138858d0ar		; 1e+207
	DQ	06fb07d457124123dr		; 1e+230
	DQ	07475d2ce55747a18r		; 1e+253
	DQ	0793ce2137f743382r		; 1e+276
	DQ	07e031cfd3999f7b0r		; 1e+299
$SG46128 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
stbsp__negtop DQ 03b282db34012b251r		; 1e-23
	DQ	0366244ce242c5561r		; 1e-46
	DQ	0319b9b6364f30304r		; 1e-69
	DQ	02cd4dbf7b3f71cb7r		; 1e-92
	DQ	0280f8587e7083e30r		; 1e-115
	DQ	02347d12a4670c123r		; 1e-138
	DQ	01e81fee341fc585dr		; 1e-161
	DQ	019bb31bb5dc320d2r		; 1e-184
	DQ	014f48c22ca71a1bdr		; 1e-207
	DQ	0102f0ce4839198dbr		; 1e-230
	DQ	00b677603725064a8r		; 1e-253
	DQ	006a1ba03f5b21000r		; 1e-276
	DQ	001dac9a7b3b7302fr		; 1e-299
$SG46146 DB	'arradd', 00H
	ORG $+1
stbsp__toperr DQ 04160000000000000r		; 8.38861e+06
	DQ	045ebb542c80deb40r		; 6.86018e+28
	DQ	0cae83b80b9aab60ar		; -7.25314e+52
	DQ	0cfa32e22d17a166cr		; -4.33773e+75
	DQ	0d4523606902e180er		; -1.55594e+98
	DQ	0d9296fb782462e87r		; -3.28416e+121
	DQ	0ddf358952c0bd011r		; -3.77459e+144
	DQ	0e2a78c1376a34b6cr		; -1.73567e+167
	DQ	0e7817569fc243adfr		; -3.88936e+190
	DQ	0ec5d9365a897aaa6r		; -9.95664e+213
	DQ	07119050c256123a0r		; 6.36413e+236
	DQ	0f5db1799d76cc7a6r		; -5.20691e+259
	DQ	0faa213fe39571a38r		; -5.25048e+282
$SG46148 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
stbsp__negtoperr DQ 037c13badb829e079r		; 3.95653e-40
	DQ	0b2ee46a98d3d9f64r		; -2.2999e-63
	DQ	02e3227c7218a2b65r		; 3.65062e-86
	DQ	02951d96999aa01e9r		; 1.18752e-109
	DQ	0a4acc2229efc3962r		; -5.06449e-132
	DQ	09fecd04a2263407ar		; -6.71568e-155
	DQ	09b123b80f187a157r		; -2.81208e-178
	DQ	0965c4e22914ed912r		; -5.77789e-201
	DQ	0119bc296cdf42f82r		; 7.49971e-224
	DQ	08cc9f9e7f4e16fe1r		; -4.64397e-247
	DQ	0880aeb0a72a8902ar		; -6.36911e-270
	DQ	0834e228e12c13408r		; -9.43681e-293
	DQ	00000000000fa1259r		; 8.09709e-317
$SG46153 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
stbsp__powten DQ 0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000064H
	DQ	00000000000003e8H
	DQ	0000000000002710H
	DQ	00000000000186a0H
	DQ	00000000000f4240H
	DQ	0000000000989680H
	DQ	0000000005f5e100H
	DQ	000000003b9aca00H
	DQ	00000002540be400H
	DQ	000000174876e800H
	DQ	000000e8d4a51000H
	DQ	000009184e72a000H
	DQ	00005af3107a4000H
	DQ	00038d7ea4c68000H
	DQ	002386f26fc10000H
	DQ	016345785d8a0000H
	DQ	0de0b6b3a7640000H
	DQ	8ac7230489e80000H
$SG46085 DB	'ccpullfile', 00H
	ORG $+1
$SG46355 DB	'Kb', 00H
	ORG $+1
$SG46125 DB	'ccdlbdel_', 00H
	ORG $+2
$SG46155 DB	'arradd', 00H
	ORG $+1
$SG46356 DB	'b', 00H
	ORG $+2
$SG46127 DB	'ccdlbdel_', 00H
	ORG $+2
$SG46179 DB	'stradd', 00H
	ORG $+1
$SG46459 DB	'%c', 00H
	ORG $+1
$SG46147 DB	'ccdlb_arradd_', 00H
	ORG $+2
$SG46152 DB	'ccdlb_arradd_', 00H
	ORG $+2
$SG46156 DB	'ccdlb_arradd_', 00H
	ORG $+2
$SG46157 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46180 DB	'ccdlb_stradd', 00H
	ORG $+3
$SG46181 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46182 DB	'stradd', 00H
	ORG $+1
$SG46183 DB	'ccdlb_stradd', 00H
	ORG $+3
$SG46184 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46222 DB	'ccdlb_tblcat', 00H
	ORG $+3
$SG46223 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46252 DB	'tblget', 00H
	ORG $+1
$SG46253 DB	'ccdlb_tblget', 00H
	ORG $+3
$SG46254 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46257 DB	'tblget', 00H
	ORG $+1
$SG46258 DB	'ccdlb_tblget', 00H
	ORG $+3
$SG46259 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46272 DB	'tblput', 00H
	ORG $+1
$SG46273 DB	'ccdlb_tblput', 00H
	ORG $+3
$SG46274 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46278 DB	'tblput', 00H
	ORG $+1
$SG46279 DB	'ccdlb_tblput', 00H
	ORG $+3
$SG46280 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46293 DB	'tblset', 00H
	ORG $+1
$SG46294 DB	'ccdlb_tblset', 00H
	ORG $+3
$SG46295 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46298 DB	'tblset', 00H
	ORG $+1
$SG46299 DB	'ccdlb_tblset', 00H
	ORG $+3
$SG46300 DB	'W:\cpp\void\cc\ccdlb.h', 00H
	ORG $+1
$SG46334 DB	'dummy', 00H
	ORG $+2
$SG46466 DB	'error', 00H
	ORG $+2
$SG46473 DB	'%%', 00H
	ORG $+1
$SG46476 DB	'%i', 00H
	ORG $+1
$SG46479 DB	'%f', 00H
	ORG $+1
$SG46482 DB	'%s', 00H
	ORG $+1
$SG46485 DB	'%c', 00H
	ORG $+1
$SG46488 DB	'%lli', 00H
	ORG $+3
$SG46491 DB	'%llu', 00H
	ORG $+3
$SG46492 DB	'error', 00H
	ORG $+2
$SG46520 DB	'leaked', 00H
	ORG $+1
$SG46521 DB	' ', 00H
	ORG $+2
$SG46518 DB	'deferred', 00H
	ORG $+7
$SG46522 DB	'<!%i#%i in %s[%i] %s(): %i <!6''%s''!> event(s), took %f'
	DB	'(s) <!9(%%%f)!> with [%lli-%lli] @ <!%i%s %f%s!> in %i block('
	DB	's)!>', 0aH, 00H
	ORG $+3
$SG46545 DB	'log', 00H
$SG46544 DB	'Debug Dump: ', 00H
	ORG $+3
$SG46546 DB	'ccdebugdump', 00H
$SG46554 DB	'log', 00H
$SG46547 DB	'W:\cpp\void\cc\cclog.h', 00H
	ORG $+1
$SG46548 DB	'ccdebugdump', 00H
$SG46607 DB	0dH, 0aH, 00H
	ORG $+1
$SG46549 DB	'W:\cpp\void\cc\cclog.h', 00H
	ORG $+1
$SG46550 DB	'root-master', 00H
$SG47273 DB	'err', 00H
$SG46551 DB	'ccdebugdump', 00H
$SG47298 DB	'err', 00H
$SG46552 DB	'W:\cpp\void\cc\cclog.h', 00H
	ORG $+1
$SG46553 DB	'freed %i block(s) for you', 00H
	ORG $+2
$SG46690 DB	'malloc', 00H
	ORG $+1
$SG47321 DB	'err', 00H
$SG46555 DB	'ccdebugdump', 00H
$SG47333 DB	'err', 00H
$SG46556 DB	'W:\cpp\void\cc\cclog.h', 00H
	ORG $+1
$SG46623 DB	'%s: %s[%i] %s() %s', 0aH, 00H
$SG47345 DB	'err', 00H
$SG46665 DB	'user-allocator', 00H
	ORG $+1
$SG46666 DB	'ccuserallocator_', 00H
	ORG $+3
$SG46693 DB	'malloc', 00H
	ORG $+1
$SG47361 DB	'err', 00H
$SG46667 DB	'W:\cpp\void\cc\cc.c', 00H
$SG46670 DB	'free', 00H
	ORG $+3
$SG46969 DB	'kENUM', 00H
	ORG $+2
$SG46971 DB	'kARRAY', 00H
	ORG $+1
$SG47436 DB	'err', 00H
$SG46671 DB	'ccuserallocator_', 00H
	ORG $+3
$SG46970 DB	'kFUNC', 00H
	ORG $+2
$SG46975 DB	'kFLOAT', 00H
	ORG $+1
$SG47440 DB	'err', 00H
$SG46672 DB	'W:\cpp\void\cc\cc.c', 00H
$SG46676 DB	'free', 00H
	ORG $+3
$SG46977 DB	'kBLOCK', 00H
	ORG $+1
$SG47446 DB	'err', 00H
$SG46677 DB	'ccuserallocator_', 00H
	ORG $+3
$SG46978 DB	'kLABEL', 00H
	ORG $+1
$SG48261 DB	'int', 00H
$SG46678 DB	'W:\cpp\void\cc\cc.c', 00H
$SG48277 DB	'if', 00H
	ORG $+1
$SG46681 DB	'ccrealloc', 00H
	ORG $+2
$SG46981 DB	'kWHILE', 00H
	ORG $+1
$SG48282 DB	'for', 00H
$SG46682 DB	'ccuserallocator_', 00H
	ORG $+3
$SG46980 DB	'kGOTO', 00H
	ORG $+2
$SG46986 DB	'kUNARY', 00H
	ORG $+1
$SG48284 DB	'do', 00H
	ORG $+1
$SG46683 DB	'W:\cpp\void\cc\cc.c', 00H
$SG48737 DB	'err', 00H
$SG46687 DB	'ccrealloc', 00H
	ORG $+2
$SG46987 DB	'kGROUP', 00H
	ORG $+1
$SG48765 DB	'err', 00H
$SG46688 DB	'ccuserallocator_', 00H
	ORG $+3
$SG46983 DB	'kDECL', 00H
	ORG $+2
$SG46989 DB	'kINDEX', 00H
	ORG $+1
$SG48772 DB	'err', 00H
$SG46689 DB	'W:\cpp\void\cc\cc.c', 00H
$SG48833 DB	'err', 00H
$SG46691 DB	'ccuserallocator_', 00H
	ORG $+3
$SG46988 DB	'kCALL', 00H
	ORG $+2
$SG46990 DB	'kTUNIT', 00H
	ORG $+1
$SG49041 DB	'err', 00H
$SG46692 DB	'W:\cpp\void\cc\cc.c', 00H
	ORG $+4
$SG46694 DB	'ccuserallocator_', 00H
	ORG $+7
$SG46695 DB	'W:\cpp\void\cc\cc.c', 00H
	ORG $+4
$SG46696 DB	'user-allocator', 00H
	ORG $+1
$SG46697 DB	'ccuserallocator_', 00H
	ORG $+7
$SG46698 DB	'W:\cpp\void\cc\cc.c', 00H
	ORG $+4
$SG46967 DB	'kTYPENAME', 00H
	ORG $+6
$SG46968 DB	'kSTRUCT', 00H
$SG46972 DB	'kPOINTER', 00H
	ORG $+7
$SG46973 DB	'kIDENTIFIER', 00H
	ORG $+4
$SG46974 DB	'kINTEGER', 00H
	ORG $+7
$SG46976 DB	'kSTRING', 00H
$SG46979 DB	'kRETURN', 00H
$SG46982 DB	'kDECLNAME', 00H
	ORG $+6
$SG46984 DB	'kTERNARY', 00H
	ORG $+7
$SG46985 DB	'kBINARY', 00H
$SG46991 DB	't_designator', 00H
	ORG $+3
$SG46992 DB	't_designation', 00H
	ORG $+2
$SG47086 DB	'cctree_del', 00H
	ORG $+5
$SG47087 DB	'W:\cpp\void\cc\cctree.h', 00H
$SG47097 DB	'cctree_new', 00H
	ORG $+5
$SG47098 DB	'W:\cpp\void\cc\cctree.h', 00H
$SG47272 DB	'''%s[0x%x]'': uncoupled tree, ''%s'', checker did not do'
	DB	' its job', 00H
	ORG $+3
$SG47274 DB	'cctree_resolve_symbol', 00H
	ORG $+2
$SG47275 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+3
$SG47291 DB	'error', 00H
	ORG $+6
$SG47297 DB	'''%s[0x%x]'': invalid mingling tree, expected CALL or ID'
	DB	'ENTIFIER', 00H
	ORG $+1
$SG47299 DB	'cctree_mingle', 00H
	ORG $+2
$SG47300 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+7
$SG47320 DB	'%s: identifier not found', 00H
	ORG $+7
$SG47322 DB	'cctree_solve_call', 00H
	ORG $+6
$SG47323 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+7
$SG47332 DB	'%s: identifier not found', 00H
	ORG $+7
$SG47334 DB	'cctree_solve_index', 00H
	ORG $+5
$SG47335 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+7
$SG47344 DB	'''%s'': undeclared lvalue identifier', 00H
	ORG $+5
$SG47346 DB	'cctree_solve_lvalue', 00H
	ORG $+4
$SG47347 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+7
$SG47350 DB	'internal', 00H
	ORG $+7
$SG47360 DB	'''%s'': undeclared rvalue identifier', 00H
	ORG $+5
$SG47362 DB	'cctree_solve_rvalue', 00H
	ORG $+4
$SG47363 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+7
$SG47368 DB	'internal', 00H
	ORG $+3
$SG47408 DB	'error', 00H
	ORG $+6
$SG47435 DB	'%s: already has a body', 00H
	ORG $+1
$SG47437 DB	'cctree_solve_decl_name', 00H
	ORG $+1
$SG47438 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+7
$SG47439 DB	'''%s'': local function defintions are illegal', 00H
	ORG $+4
$SG47441 DB	'cctree_solve_decl_name', 00H
	ORG $+1
$SG47442 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+7
$SG47445 DB	'''%s'': variable redefinition', 00H
	ORG $+4
$SG47447 DB	'cctree_solve_decl_name', 00H
	ORG $+1
$SG47448 DB	'W:\cpp\void\cc\cccheck.c', 00H
	ORG $+3
$SG47454 DB	'error', 00H
	ORG $+2
$SG47488 DB	'LOCAL', 00H
	ORG $+2
$SG47489 DB	'PARAM', 00H
	ORG $+6
$SG47490 DB	'ADDRESS', 00H
$SG47491 DB	'STORE', 00H
	ORG $+2
$SG47492 DB	'FETCH', 00H
	ORG $+2
$SG47493 DB	'ARITH', 00H
	ORG $+2
$SG47494 DB	'JUMP', 00H
	ORG $+3
$SG47495 DB	'JUMPT', 00H
	ORG $+2
$SG47496 DB	'JUMPF', 00H
	ORG $+2
$SG47497 DB	'JUMPC', 00H
	ORG $+2
$SG47498 DB	'TERNARY', 00H
$SG47499 DB	'ENTER', 00H
	ORG $+2
$SG47500 DB	'INVOKE', 00H
	ORG $+1
$SG47501 DB	'RETURN', 00H
	ORG $+1
$SG47687 DB	'ccedict', 00H
$SG47688 DB	'W:\cpp\void\cc\ccedict.h', 00H
	ORG $+3
$SG47708 DB	'store', 00H
	ORG $+2
$SG47714 DB	'fetch', 00H
	ORG $+2
$SG47721 DB	'arith', 00H
	ORG $+2
$SG47726 DB	'enter', 00H
	ORG $+2
$SG47746 DB	'jump-c', 00H
	ORG $+1
$SG47752 DB	'invoke', 00H
	ORG $+1
$SG47757 DB	'return', 00H
	ORG $+5
$SG47763 DB	'address', 00H
$SG47770 DB	'ternary', 00H
$SG47886 DB	'ccvalue', 00H
$SG47887 DB	'W:\cpp\void\cc\ccemit.h', 00H
$SG47896 DB	'cctype', 00H
	ORG $+1
$SG47897 DB	'W:\cpp\void\cc\ccemit.h', 00H
$SG47905 DB	'ccblock', 00H
$SG47906 DB	'W:\cpp\void\cc\ccemit.h', 00H
$SG47914 DB	'ccprocd', 00H
$SG47915 DB	'W:\cpp\void\cc\ccemit.h', 00H
$SG47945 DB	'$decls', 00H
	ORG $+1
$SG47946 DB	'$enter', 00H
	ORG $+1
$SG47947 DB	'$leave', 00H
	ORG $+1
$SG47969 DB	'ccblock_add', 00H
	ORG $+4
$SG47970 DB	'W:\cpp\void\cc\ccemit.h', 00H
$SG48236 DB	'__asm', 00H
	ORG $+2
$SG48237 DB	'__based', 00H
$SG48238 DB	'__cdecl', 00H
$SG48239 DB	'__clrcall', 00H
	ORG $+6
$SG48240 DB	'__fastcall', 00H
	ORG $+5
$SG48241 DB	'__inline', 00H
	ORG $+7
$SG48242 DB	'__stdcall', 00H
	ORG $+6
$SG48243 DB	'__thiscall', 00H
	ORG $+5
$SG48244 DB	'__vectorcal', 00H
	ORG $+4
$SG48245 DB	'_Alignof', 00H
	ORG $+7
$SG48246 DB	'_Alignas', 00H
	ORG $+3
$SG48247 DB	'const', 00H
	ORG $+6
$SG48248 DB	'restrict', 00H
	ORG $+7
$SG48249 DB	'volatile', 00H
	ORG $+3
$SG48250 DB	'inline', 00H
	ORG $+5
$SG48251 DB	'_Noreturn', 00H
	ORG $+2
$SG48252 DB	'signed', 00H
	ORG $+5
$SG48253 DB	'unsigned', 00H
	ORG $+3
$SG48254 DB	'__int8', 00H
	ORG $+5
$SG48255 DB	'__int16', 00H
$SG48256 DB	'__int32', 00H
$SG48257 DB	'__int64', 00H
$SG48258 DB	'double', 00H
	ORG $+1
$SG48259 DB	'float', 00H
	ORG $+2
$SG48260 DB	'long', 00H
	ORG $+3
$SG48262 DB	'short', 00H
	ORG $+2
$SG48263 DB	'char', 00H
	ORG $+3
$SG48264 DB	'void', 00H
	ORG $+3
$SG48265 DB	'_Bool', 00H
	ORG $+2
$SG48266 DB	'_Complex', 00H
	ORG $+7
$SG48267 DB	'_Atomic', 00H
$SG48268 DB	'enum', 00H
	ORG $+3
$SG48269 DB	'struct', 00H
	ORG $+1
$SG48270 DB	'typedef', 00H
$SG48271 DB	'auto', 00H
	ORG $+3
$SG48272 DB	'extern', 00H
	ORG $+1
$SG48273 DB	'register', 00H
	ORG $+3
$SG48274 DB	'static', 00H
	ORG $+5
$SG48275 DB	'_Thread_local', 00H
	ORG $+2
$SG48276 DB	'__declspec', 00H
	ORG $+1
$SG48278 DB	'switch', 00H
	ORG $+1
$SG48279 DB	'else', 00H
	ORG $+3
$SG48280 DB	'case', 00H
	ORG $+7
$SG48281 DB	'default', 00H
$SG48283 DB	'while', 00H
	ORG $+2
$SG48285 DB	'goto', 00H
	ORG $+3
$SG48286 DB	'return', 00H
	ORG $+1
$SG48287 DB	'break', 00H
	ORG $+2
$SG48288 DB	'continue', 00H
	ORG $+7
$SG48330 DB	'next_token', 00H
	ORG $+5
$SG48331 DB	'cclex_next_token', 00H
	ORG $+7
$SG48332 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48333 DB	'next_token', 00H
	ORG $+5
$SG48334 DB	'cclex_next_token', 00H
	ORG $+7
$SG48335 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48345 DB	'identifier', 00H
	ORG $+5
$SG48346 DB	'cclex_identifier', 00H
	ORG $+7
$SG48347 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48350 DB	'identifier', 00H
	ORG $+5
$SG48351 DB	'cclex_identifier', 00H
	ORG $+7
$SG48352 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48380 DB	'string_token', 00H
	ORG $+3
$SG48381 DB	'cclex_readstr', 00H
	ORG $+2
$SG48382 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48400 DB	'string_token', 00H
	ORG $+3
$SG48401 DB	'cclex_readstr', 00H
	ORG $+2
$SG48402 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48429 DB	'next_token_internal', 00H
	ORG $+4
$SG48430 DB	'cclex_next_token_internal', 00H
	ORG $+6
$SG48431 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48589 DB	'token-trailing', 00H
	ORG $+1
$SG48590 DB	'cclex_next_token_internal', 00H
	ORG $+6
$SG48591 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48603 DB	'token-trailing', 00H
	ORG $+1
$SG48604 DB	'cclex_next_token_internal', 00H
	ORG $+6
$SG48605 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48606 DB	'next_token_internal', 00H
	ORG $+4
$SG48607 DB	'cclex_next_token_internal', 00H
	ORG $+6
$SG48608 DB	'W:\cpp\void\cc\cclex.c', 00H
	ORG $+1
$SG48725 DB	'primary', 00H
$SG48726 DB	'ccread_primary', 00H
	ORG $+1
$SG48727 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48733 DB	'error', 00H
	ORG $+2
$SG48736 DB	'expected '')''', 00H
	ORG $+3
$SG48738 DB	'ccread_primary', 00H
	ORG $+1
$SG48739 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48740 DB	'primary', 00H
$SG48741 DB	'ccread_primary', 00H
	ORG $+1
$SG48742 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48758 DB	'postfix', 00H
$SG48759 DB	'ccread_postfix', 00H
	ORG $+1
$SG48760 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48764 DB	'expected '')''', 00H
	ORG $+3
$SG48766 DB	'ccread_postfix', 00H
	ORG $+1
$SG48767 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48771 DB	'expected '']''', 00H
	ORG $+3
$SG48773 DB	'ccread_postfix', 00H
	ORG $+1
$SG48774 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48780 DB	'postfix', 00H
$SG48781 DB	'ccread_postfix', 00H
	ORG $+1
$SG48782 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48797 DB	'unary', 00H
	ORG $+2
$SG48798 DB	'ccread_unary', 00H
	ORG $+3
$SG48799 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48813 DB	'unary', 00H
	ORG $+2
$SG48814 DB	'ccread_unary', 00H
	ORG $+3
$SG48815 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48826 DB	'cast', 00H
	ORG $+3
$SG48827 DB	'ccread_cast', 00H
	ORG $+4
$SG48828 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48832 DB	'expected '')''', 00H
	ORG $+3
$SG48834 DB	'ccread_cast', 00H
	ORG $+4
$SG48835 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48836 DB	'cast', 00H
	ORG $+3
$SG48837 DB	'ccread_cast', 00H
	ORG $+4
$SG48838 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48851 DB	'multiplicative_expr', 00H
	ORG $+4
$SG48852 DB	'ccread_multiplicative', 00H
	ORG $+2
$SG48853 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48855 DB	'multiplicative_expr', 00H
	ORG $+4
$SG48856 DB	'ccread_multiplicative', 00H
	ORG $+2
$SG48857 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48870 DB	'additive_expr', 00H
	ORG $+2
$SG48871 DB	'ccread_additive', 00H
$SG48872 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48874 DB	'additive_expr', 00H
	ORG $+2
$SG48875 DB	'ccread_additive', 00H
$SG48876 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48889 DB	'shift_expr', 00H
	ORG $+5
$SG48890 DB	'ccread_shift', 00H
	ORG $+3
$SG48891 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48893 DB	'shift_expr', 00H
	ORG $+5
$SG48894 DB	'ccread_shift', 00H
	ORG $+3
$SG48895 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48908 DB	'relational_expr', 00H
$SG48909 DB	'ccread_relational', 00H
	ORG $+6
$SG48910 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48912 DB	'relational_expr', 00H
$SG48913 DB	'ccread_relational', 00H
	ORG $+6
$SG48914 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48925 DB	'equality_expr', 00H
	ORG $+2
$SG48926 DB	'ccread_equality', 00H
$SG48927 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48930 DB	'equality_expr', 00H
	ORG $+2
$SG48931 DB	'ccread_equality', 00H
$SG48932 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48945 DB	'bitwise_and_expr', 00H
	ORG $+7
$SG48946 DB	'ccread_bitwise_and', 00H
	ORG $+5
$SG48947 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48948 DB	'bitwise_and_expr', 00H
	ORG $+7
$SG48949 DB	'ccread_bitwise_and', 00H
	ORG $+5
$SG48950 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48963 DB	'bitwise_xor_expr', 00H
	ORG $+7
$SG48964 DB	'ccread_bitwise_xor', 00H
	ORG $+5
$SG48965 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48966 DB	'bitwise_xor_expr', 00H
	ORG $+7
$SG48967 DB	'ccread_bitwise_xor', 00H
	ORG $+5
$SG48968 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48981 DB	'bitwise_or_expr', 00H
$SG48982 DB	'ccread_bitwise_or', 00H
	ORG $+6
$SG48983 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48984 DB	'bitwise_or_expr', 00H
$SG48985 DB	'ccread_bitwise_or', 00H
	ORG $+6
$SG48986 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG48999 DB	'logical_and_expr', 00H
	ORG $+7
$SG49000 DB	'ccread_logical_and', 00H
	ORG $+5
$SG49001 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49002 DB	'logical_and_expr', 00H
	ORG $+7
$SG49003 DB	'ccread_logical_and', 00H
	ORG $+5
$SG49004 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49017 DB	'logical_or_expr', 00H
$SG49018 DB	'ccread_logical_or', 00H
	ORG $+6
$SG49019 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49020 DB	'logical_or_expr', 00H
$SG49021 DB	'ccread_logical_or', 00H
	ORG $+6
$SG49022 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49034 DB	'conditional', 00H
	ORG $+4
$SG49035 DB	'ccread_conditional', 00H
	ORG $+5
$SG49036 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49040 DB	'expected '':'' invalid conditional expression', 00H
	ORG $+4
$SG49042 DB	'ccread_conditional', 00H
	ORG $+5
$SG49043 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49044 DB	'conditional', 00H
	ORG $+4
$SG49045 DB	'ccread_conditional', 00H
	ORG $+5
$SG49046 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49057 DB	'assignment', 00H
	ORG $+5
$SG49058 DB	'ccread_assignment', 00H
	ORG $+6
$SG49059 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49061 DB	'assignment', 00H
	ORG $+5
$SG49062 DB	'ccread_assignment', 00H
	ORG $+6
$SG49063 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49072 DB	'constant_expression', 00H
	ORG $+4
$SG49073 DB	'ccread_constant_expression', 00H
	ORG $+5
$SG49074 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49075 DB	'constant_expression', 00H
	ORG $+4
$SG49076 DB	'ccread_constant_expression', 00H
	ORG $+5
$SG49077 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49086 DB	'expression', 00H
	ORG $+5
$SG49087 DB	'ccread_expression', 00H
	ORG $+6
$SG49088 DB	'W:\cpp\void\cc\ccread.c', 00H
$SG49090 DB	'expression', 00H
	ORG $+5
$SG49091 DB	'ccread_expression', 00H
	ORG $+6
$SG49092 DB	'W:\cpp\void\cc\ccread.c', 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	stbsp_vsprintf
PUBLIC	stbsp_vsnprintf
PUBLIC	stbsp_sprintf
PUBLIC	stbsp_snprintf
PUBLIC	stbsp_vsprintfcb
PUBLIC	stbsp_set_separators
PUBLIC	gen_type
PUBLIC	gen_vectype
PUBLIC	gen_ptrtype
PUBLIC	gen_vartype
PUBLIC	gen_fixtype
PUBLIC	gen_typename_ex
PUBLIC	gen_typename
PUBLIC	emit_typename
PUBLIC	emit_modifier
PUBLIC	emit_vardecl_ex
PUBLIC	emit_vardecl
PUBLIC	emit_fundecl
PUBLIC	genmake
PUBLIC	emit_vecoprari
PUBLIC	emit_vectype
PUBLIC	emit_type
PUBLIC	?fib@@YAHH@Z					; fib
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4059000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090000000000000
PUBLIC	__real@4130000000000000
PUBLIC	__real@41d0000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_SetConsoleTextAttribute:PROC
EXTRN	free:PROC
EXTRN	malloc:PROC
EXTRN	realloc:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	_Init_thread_epoch:DWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
_TLS	SEGMENT
ccerr	DD	01H DUP (?)
	ALIGN	8

cckey	DQ	01H DUP (?)
ccdebugroot DB	0b0H DUP (?)
ccdebugthis DQ	01H DUP (?)
ccdebugnone DD	01H DUP (?)
_TLS	ENDS
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?buf@?1??ccformatv@@9@4PADA
_TLS	SEGMENT
?buf@?1??ccformatv@@9@4PADA DB 0ffH DUP (?)		; `ccformatv'::`2'::buf
_TLS	ENDS
;	COMDAT ?buf@?1??cctrace_@@9@4PADA
_TLS	SEGMENT
?buf@?1??cctrace_@@9@4PADA DB 0fffH DUP (?)		; `cctrace_'::`2'::buf
_TLS	ENDS
_BSS	SEGMENT
func_decls DQ	01H DUP (?)
vari_decls DQ	01H DUP (?)
symbols	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A
_BSS	SEGMENT
?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A DB 018H DUP (?) ; `ccexec_edict'::`2'::zro
_BSS	ENDS
;	COMDAT ?$TSS0@?1??ccexec_edict@@9@4HA
_BSS	SEGMENT
?$TSS0@?1??ccexec_edict@@9@4HA DD 01H DUP (?)		; `ccexec_edict'::`2'::$TSS0
_BSS	ENDS
;	COMDAT ?buf@?1??gen_typename@@9@4PADA
_BSS	SEGMENT
?buf@?1??gen_typename@@9@4PADA DB 020H DUP (?)		; `gen_typename'::`2'::buf
_BSS	ENDS
pdata	SEGMENT
$pdata$ccuserallocator_ DD imagerel ccuserallocator_
	DD	imagerel ccuserallocator_+2519
	DD	imagerel $unwind$ccuserallocator_
$pdata$ccinternalallocator_ DD imagerel ccinternalallocator_
	DD	imagerel ccinternalallocator_+83
	DD	imagerel $unwind$ccinternalallocator_
$pdata$ccdlb_tblget DD imagerel ccdlb_tblget
	DD	imagerel ccdlb_tblget+667
	DD	imagerel $unwind$ccdlb_tblget
$pdata$ccdlb_tblput DD imagerel ccdlb_tblput
	DD	imagerel ccdlb_tblput+828
	DD	imagerel $unwind$ccdlb_tblput
$pdata$ccdlb_tblset DD imagerel ccdlb_tblset
	DD	imagerel ccdlb_tblset+789
	DD	imagerel $unwind$ccdlb_tblset
$pdata$cccaller DD imagerel cccaller
	DD	imagerel cccaller+91
	DD	imagerel $unwind$cccaller
$pdata$ccsentry_enter DD imagerel ccsentry_enter
	DD	imagerel ccsentry_enter+515
	DD	imagerel $unwind$ccsentry_enter
$pdata$ccsentry_leave DD imagerel ccsentry_leave
	DD	imagerel ccsentry_leave+767
	DD	imagerel $unwind$ccsentry_leave
$pdata$ccclocktick DD imagerel ccclocktick
	DD	imagerel ccclocktick+25
	DD	imagerel $unwind$ccclocktick
$pdata$ccclocksecs DD imagerel ccclocksecs
	DD	imagerel ccclocksecs+78
	DD	imagerel $unwind$ccclocksecs
$pdata$ccfilename DD imagerel ccfilename
	DD	imagerel ccfilename+103
	DD	imagerel $unwind$ccfilename
$pdata$ccrealfile DD imagerel ccrealfile
	DD	imagerel ccrealfile+41
	DD	imagerel $unwind$ccrealfile
$pdata$ccclosefile DD imagerel ccclosefile
	DD	imagerel ccclosefile+25
	DD	imagerel $unwind$ccclosefile
$pdata$ccopenfile DD imagerel ccopenfile
	DD	imagerel ccopenfile+109
	DD	imagerel $unwind$ccopenfile
$pdata$ccpullfile DD imagerel ccpullfile
	DD	imagerel ccpullfile+343
	DD	imagerel $unwind$ccpullfile
$pdata$ccfilesize DD imagerel ccfilesize
	DD	imagerel ccfilesize+27
	DD	imagerel $unwind$ccfilesize
$pdata$ccformatvex DD imagerel ccformatvex
	DD	imagerel ccformatvex+52
	DD	imagerel $unwind$ccformatvex
$pdata$ccformatv DD imagerel ccformatv
	DD	imagerel ccformatv+94
	DD	imagerel $unwind$ccformatv
$pdata$ccformatex DD imagerel ccformatex
	DD	imagerel ccformatex+79
	DD	imagerel $unwind$ccformatex
$pdata$ccformat DD imagerel ccformat
	DD	imagerel ccformat+73
	DD	imagerel $unwind$ccformat
$pdata$cctrace_ DD imagerel cctrace_
	DD	imagerel cctrace_+303
	DD	imagerel $unwind$cctrace_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$stbsp_vsprintf DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$stbsp_vsprintf
$pdata$stbsp_vsnprintf DD imagerel $LN6
	DD	imagerel $LN6+303
	DD	imagerel $unwind$stbsp_vsnprintf
$pdata$stbsp_sprintf DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$stbsp_sprintf
$pdata$stbsp_snprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$stbsp_snprintf
$pdata$stbsp_vsprintfcb DD imagerel $LN461
	DD	imagerel $LN461+14412
	DD	imagerel $unwind$stbsp_vsprintfcb
$pdata$stbsp__real_to_str DD imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+1622
	DD	imagerel $unwind$stbsp__real_to_str
$pdata$stbsp__real_to_parts DD imagerel stbsp__real_to_parts
	DD	imagerel stbsp__real_to_parts+154
	DD	imagerel $unwind$stbsp__real_to_parts
$pdata$stbsp__strlen_limited DD imagerel stbsp__strlen_limited
	DD	imagerel stbsp__strlen_limited+239
	DD	imagerel $unwind$stbsp__strlen_limited
$pdata$stbsp__clamp_callback DD imagerel stbsp__clamp_callback
	DD	imagerel stbsp__clamp_callback+300
	DD	imagerel $unwind$stbsp__clamp_callback
$pdata$stbsp__count_clamp_callback DD imagerel stbsp__count_clamp_callback
	DD	imagerel stbsp__count_clamp_callback+59
	DD	imagerel $unwind$stbsp__count_clamp_callback
$pdata$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+3868
	DD	imagerel $unwind$stbsp__raise_to_power10
$pdata$ccdebug_checkblock DD imagerel ccdebug_checkblock
	DD	imagerel ccdebug_checkblock+352
	DD	imagerel $unwind$ccdebug_checkblock
$pdata$ccdlbdel_ DD imagerel ccdlbdel_
	DD	imagerel ccdlbdel_+509
	DD	imagerel $unwind$ccdlbdel_
$pdata$ccdlb_arradd_ DD imagerel ccdlb_arradd_
	DD	imagerel ccdlb_arradd_+990
	DD	imagerel $unwind$ccdlb_arradd_
$pdata$ccdlb_arradd DD imagerel ccdlb_arradd
	DD	imagerel ccdlb_arradd+150
	DD	imagerel $unwind$ccdlb_arradd
$pdata$ccdlb_stradd DD imagerel ccdlb_stradd
	DD	imagerel ccdlb_stradd+563
	DD	imagerel $unwind$ccdlb_stradd
$pdata$cchsh_abc DD imagerel cchsh_abc
	DD	imagerel cchsh_abc+103
	DD	imagerel $unwind$cchsh_abc
$pdata$ccdlb_tblini DD imagerel ccdlb_tblini
	DD	imagerel ccdlb_tblini+298
	DD	imagerel $unwind$ccdlb_tblini
$pdata$ccdlb_tblcat DD imagerel ccdlb_tblcat
	DD	imagerel ccdlb_tblcat+500
	DD	imagerel $unwind$ccdlb_tblcat
$pdata$ccdbl_query DD imagerel ccdbl_query
	DD	imagerel ccdbl_query+329
	DD	imagerel $unwind$ccdbl_query
$pdata$ccstr_vcatf DD imagerel ccstr_vcatf
	DD	imagerel ccstr_vcatf+132
	DD	imagerel $unwind$ccstr_vcatf
$pdata$ccstr_catf DD imagerel ccstr_catf
	DD	imagerel ccstr_catf+78
	DD	imagerel $unwind$ccstr_catf
$pdata$ccprintf DD imagerel ccprintf
	DD	imagerel ccprintf+1687
	DD	imagerel $unwind$ccprintf
$pdata$ccsentry_report DD imagerel ccsentry_report
	DD	imagerel ccsentry_report+1112
	DD	imagerel $unwind$ccsentry_report
$pdata$ccdebugdump DD imagerel ccdebugdump
	DD	imagerel ccdebugdump+998
	DD	imagerel $unwind$ccdebugdump
$pdata$ccdebugend DD imagerel ccdebugend
	DD	imagerel ccdebugend+74
	DD	imagerel $unwind$ccdebugend
$pdata$ccout DD	imagerel ccout
	DD	imagerel ccout+35
	DD	imagerel $unwind$ccout
$pdata$cctree_del DD imagerel cctree_del
	DD	imagerel cctree_del+125
	DD	imagerel $unwind$cctree_del
$pdata$cctree_new DD imagerel cctree_new
	DD	imagerel cctree_new+209
	DD	imagerel $unwind$cctree_new
$pdata$cctree_clone DD imagerel cctree_clone
	DD	imagerel cctree_clone+75
	DD	imagerel $unwind$cctree_clone
$pdata$cctree_name DD imagerel cctree_name
	DD	imagerel cctree_name+49
	DD	imagerel $unwind$cctree_name
$pdata$cctreee_pointer_modifier DD imagerel cctreee_pointer_modifier
	DD	imagerel cctreee_pointer_modifier+53
	DD	imagerel $unwind$cctreee_pointer_modifier
$pdata$cctreee_array_modifier DD imagerel cctreee_array_modifier
	DD	imagerel cctreee_array_modifier+72
	DD	imagerel $unwind$cctreee_array_modifier
$pdata$cctreee_function_modifier DD imagerel cctreee_function_modifier
	DD	imagerel cctreee_function_modifier+72
	DD	imagerel $unwind$cctreee_function_modifier
$pdata$cctreee_struct_specifier DD imagerel cctreee_struct_specifier
	DD	imagerel cctreee_struct_specifier+86
	DD	imagerel $unwind$cctreee_struct_specifier
$pdata$cctree_translation_unit DD imagerel cctree_translation_unit
	DD	imagerel cctree_translation_unit+34
	DD	imagerel $unwind$cctree_translation_unit
$pdata$cctree_group DD imagerel cctree_group
	DD	imagerel cctree_group+67
	DD	imagerel $unwind$cctree_group
$pdata$cctree_call DD imagerel cctree_call
	DD	imagerel cctree_call+100
	DD	imagerel $unwind$cctree_call
$pdata$cctree_index DD imagerel cctree_index
	DD	imagerel cctree_index+100
	DD	imagerel $unwind$cctree_index
$pdata$cctree_block DD imagerel cctree_block
	DD	imagerel cctree_block+67
	DD	imagerel $unwind$cctree_block
$pdata$cctree_while DD imagerel cctree_while
	DD	imagerel cctree_while+95
	DD	imagerel $unwind$cctree_while
$pdata$cctree_label DD imagerel cctree_label
	DD	imagerel cctree_label+91
	DD	imagerel $unwind$cctree_label
$pdata$cctree_goto DD imagerel cctree_goto
	DD	imagerel cctree_goto+72
	DD	imagerel $unwind$cctree_goto
$pdata$cctree_return DD imagerel cctree_return
	DD	imagerel cctree_return+67
	DD	imagerel $unwind$cctree_return
$pdata$cctree_decl_name DD imagerel cctree_decl_name
	DD	imagerel cctree_decl_name+119
	DD	imagerel $unwind$cctree_decl_name
$pdata$cctree_decl DD imagerel cctree_decl
	DD	imagerel cctree_decl+86
	DD	imagerel $unwind$cctree_decl
$pdata$cctree_litide DD imagerel cctree_litide
	DD	imagerel cctree_litide+67
	DD	imagerel $unwind$cctree_litide
$pdata$cctree_litint DD imagerel cctree_litint
	DD	imagerel cctree_litint+71
	DD	imagerel $unwind$cctree_litint
$pdata$cctree_litflo DD imagerel cctree_litflo
	DD	imagerel cctree_litflo+71
	DD	imagerel $unwind$cctree_litflo
$pdata$cctree_unary DD imagerel cctree_unary
	DD	imagerel cctree_unary+87
	DD	imagerel $unwind$cctree_unary
$pdata$cctree_binary DD imagerel cctree_binary
	DD	imagerel cctree_binary+101
	DD	imagerel $unwind$cctree_binary
$pdata$cctree_ternary DD imagerel cctree_ternary
	DD	imagerel cctree_ternary+100
	DD	imagerel $unwind$cctree_ternary
$pdata$cctree_solve_decl DD imagerel cctree_solve_decl
	DD	imagerel cctree_solve_decl+135
	DD	imagerel $unwind$cctree_solve_decl
$pdata$cctree_solve_statement DD imagerel cctree_solve_statement
	DD	imagerel cctree_solve_statement+419
	DD	imagerel $unwind$cctree_solve_statement
$pdata$cctree_include_invokable DD imagerel cctree_include_invokable
	DD	imagerel cctree_include_invokable+195
	DD	imagerel $unwind$cctree_include_invokable
$pdata$cctree_resolve_symbol DD imagerel cctree_resolve_symbol
	DD	imagerel cctree_resolve_symbol+369
	DD	imagerel $unwind$cctree_resolve_symbol
$pdata$cctree_mingle DD imagerel cctree_mingle
	DD	imagerel cctree_mingle+628
	DD	imagerel $unwind$cctree_mingle
$pdata$cctree_solve_binary DD imagerel cctree_solve_binary
	DD	imagerel cctree_solve_binary+62
	DD	imagerel $unwind$cctree_solve_binary
$pdata$cctree_solve_rvalue DD imagerel cctree_solve_rvalue
	DD	imagerel cctree_solve_rvalue+331
	DD	imagerel $unwind$cctree_solve_rvalue
$pdata$cctree_solve_lvalue DD imagerel cctree_solve_lvalue
	DD	imagerel cctree_solve_lvalue+240
	DD	imagerel $unwind$cctree_solve_lvalue
$pdata$cctree_solve_call DD imagerel cctree_solve_call
	DD	imagerel cctree_solve_call+337
	DD	imagerel $unwind$cctree_solve_call
$pdata$cctree_solve_index DD imagerel cctree_solve_index
	DD	imagerel cctree_solve_index+284
	DD	imagerel $unwind$cctree_solve_index
$pdata$cctree_solve_block DD imagerel cctree_solve_block
	DD	imagerel cctree_solve_block+135
	DD	imagerel $unwind$cctree_solve_block
$pdata$cctree_solve_decl_name DD imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+1088
	DD	imagerel $unwind$cctree_solve_decl_name
$pdata$cctree_solve_translation_unit DD imagerel cctree_solve_translation_unit
	DD	imagerel cctree_solve_translation_unit+146
	DD	imagerel $unwind$cctree_solve_translation_unit
$pdata$ccedict DD imagerel ccedict
	DD	imagerel ccedict+189
	DD	imagerel $unwind$ccedict
$pdata$ccedict_local DD imagerel ccedict_local
	DD	imagerel ccedict_local+64
	DD	imagerel $unwind$ccedict_local
$pdata$ccedict_param DD imagerel ccedict_param
	DD	imagerel ccedict_param+67
	DD	imagerel $unwind$ccedict_param
$pdata$ccedict_store DD imagerel ccedict_store
	DD	imagerel ccedict_store+74
	DD	imagerel $unwind$ccedict_store
$pdata$ccedict_fetch DD imagerel ccedict_fetch
	DD	imagerel ccedict_fetch+74
	DD	imagerel $unwind$ccedict_fetch
$pdata$ccedict_arith DD imagerel ccedict_arith
	DD	imagerel ccedict_arith+99
	DD	imagerel $unwind$ccedict_arith
$pdata$ccedict_enter DD imagerel ccedict_enter
	DD	imagerel ccedict_enter+58
	DD	imagerel $unwind$ccedict_enter
$pdata$ccedict_jump DD imagerel ccedict_jump
	DD	imagerel ccedict_jump+76
	DD	imagerel $unwind$ccedict_jump
$pdata$ccedict_fjump DD imagerel ccedict_fjump
	DD	imagerel ccedict_fjump+95
	DD	imagerel $unwind$ccedict_fjump
$pdata$ccedict_call DD imagerel ccedict_call
	DD	imagerel ccedict_call+83
	DD	imagerel $unwind$ccedict_call
$pdata$ccedict_return DD imagerel ccedict_return
	DD	imagerel ccedict_return+55
	DD	imagerel $unwind$ccedict_return
$pdata$ccedict_address DD imagerel ccedict_address
	DD	imagerel ccedict_address+74
	DD	imagerel $unwind$ccedict_address
$pdata$ccvalue DD imagerel ccvalue
	DD	imagerel ccvalue+171
	DD	imagerel $unwind$ccvalue
$pdata$cctype DD imagerel cctype
	DD	imagerel cctype+189
	DD	imagerel $unwind$cctype
$pdata$ccblock DD imagerel ccblock
	DD	imagerel ccblock+170
	DD	imagerel $unwind$ccblock
$pdata$ccprocd DD imagerel ccprocd
	DD	imagerel ccprocd+170
	DD	imagerel $unwind$ccprocd
$pdata$ccemit_global DD imagerel ccemit_global
	DD	imagerel ccemit_global+116
	DD	imagerel $unwind$ccemit_global
$pdata$ccemit_include_global DD imagerel ccemit_include_global
	DD	imagerel ccemit_include_global+136
	DD	imagerel $unwind$ccemit_include_global
$pdata$ccemit_global_procd DD imagerel ccemit_global_procd
	DD	imagerel ccemit_global_procd+370
	DD	imagerel $unwind$ccemit_global_procd
$pdata$ccvalue_retarget DD imagerel ccvalue_retarget
	DD	imagerel ccvalue_retarget+82
	DD	imagerel $unwind$ccvalue_retarget
$pdata$ccblock_label DD imagerel ccblock_label
	DD	imagerel ccblock_label+129
	DD	imagerel $unwind$ccblock_label
$pdata$ccblock_add DD imagerel ccblock_add
	DD	imagerel ccblock_add+225
	DD	imagerel $unwind$ccblock_add
$pdata$ccblock_add_edict DD imagerel ccblock_add_edict
	DD	imagerel ccblock_add_edict+64
	DD	imagerel $unwind$ccblock_add_edict
$pdata$ccprocd_local DD imagerel ccprocd_local
	DD	imagerel ccprocd_local+114
	DD	imagerel $unwind$ccprocd_local
$pdata$ccblock_store DD imagerel ccblock_store
	DD	imagerel ccblock_store+52
	DD	imagerel $unwind$ccblock_store
$pdata$ccblock_fetch DD imagerel ccblock_fetch
	DD	imagerel ccblock_fetch+52
	DD	imagerel $unwind$ccblock_fetch
$pdata$ccblock_address DD imagerel ccblock_address
	DD	imagerel ccblock_address+52
	DD	imagerel $unwind$ccblock_address
$pdata$ccblock_arith DD imagerel ccblock_arith
	DD	imagerel ccblock_arith+60
	DD	imagerel $unwind$ccblock_arith
$pdata$ccblock_enter DD imagerel ccblock_enter
	DD	imagerel ccblock_enter+42
	DD	imagerel $unwind$ccblock_enter
$pdata$ccblock_return DD imagerel ccblock_return
	DD	imagerel ccblock_return+42
	DD	imagerel $unwind$ccblock_return
$pdata$ccblock_invoke DD imagerel ccblock_invoke
	DD	imagerel ccblock_invoke+52
	DD	imagerel $unwind$ccblock_invoke
$pdata$ccblock_jump DD imagerel ccblock_jump
	DD	imagerel ccblock_jump+66
	DD	imagerel $unwind$ccblock_jump
$pdata$ccblock_fjump DD imagerel ccblock_fjump
	DD	imagerel ccblock_fjump+76
	DD	imagerel $unwind$ccblock_fjump
$pdata$ccexec_rvalue DD imagerel ccexec_rvalue
	DD	imagerel ccexec_rvalue+79
	DD	imagerel $unwind$ccexec_rvalue
$pdata$ccexec_lvalue DD imagerel ccexec_lvalue
	DD	imagerel ccexec_lvalue+79
	DD	imagerel $unwind$ccexec_lvalue
$pdata$cclex_hash_init DD imagerel cclex_hash_init
	DD	imagerel cclex_hash_init+4466
	DD	imagerel $unwind$cclex_hash_init
$pdata$cclex_init DD imagerel cclex_init
	DD	imagerel cclex_init+69
	DD	imagerel $unwind$cclex_init
$pdata$cclex_idenlen DD imagerel cclex_idenlen
	DD	imagerel cclex_idenlen+165
	DD	imagerel $unwind$cclex_idenlen
$pdata$cclex_token DD imagerel cclex_token
	DD	imagerel cclex_token+83
	DD	imagerel $unwind$cclex_token
$pdata$cclex_next_token_internal DD imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+6180
	DD	imagerel $unwind$cclex_next_token_internal
$pdata$cclex_next_token DD imagerel cclex_next_token
	DD	imagerel cclex_next_token+509
	DD	imagerel $unwind$cclex_next_token
$pdata$cclex_identifier DD imagerel cclex_identifier
	DD	imagerel cclex_identifier+609
	DD	imagerel $unwind$cclex_identifier
$pdata$cclex_readstr DD imagerel cclex_readstr
	DD	imagerel cclex_readstr+1315
	DD	imagerel $unwind$cclex_readstr
$pdata$ccread_init DD imagerel ccread_init
	DD	imagerel ccread_init+45
	DD	imagerel $unwind$ccread_init
$pdata$ccread_uninit DD imagerel ccread_uninit
	DD	imagerel ccread_uninit+44
	DD	imagerel $unwind$ccread_uninit
$pdata$ccread_all_tokens DD imagerel ccread_all_tokens
	DD	imagerel ccread_all_tokens+103
	DD	imagerel $unwind$ccread_all_tokens
$pdata$ccreader_move DD imagerel ccreader_move
	DD	imagerel ccreader_move+165
	DD	imagerel $unwind$ccreader_move
$pdata$ccread_include DD imagerel ccread_include
	DD	imagerel ccread_include+95
	DD	imagerel $unwind$ccread_include
$pdata$ccpeep DD imagerel ccpeep
	DD	imagerel ccpeep+26
	DD	imagerel $unwind$ccpeep
$pdata$ccsee DD	imagerel ccsee
	DD	imagerel ccsee+58
	DD	imagerel $unwind$ccsee
$pdata$ccsee_end DD imagerel ccsee_end
	DD	imagerel ccsee_end+29
	DD	imagerel $unwind$ccsee_end
$pdata$ccgobble DD imagerel ccgobble
	DD	imagerel ccgobble+105
	DD	imagerel $unwind$ccgobble
$pdata$cceat DD	imagerel cceat
	DD	imagerel cceat+50
	DD	imagerel $unwind$cceat
$pdata$kttc__peek_alignment_specifier DD imagerel kttc__peek_alignment_specifier
	DD	imagerel kttc__peek_alignment_specifier+58
	DD	imagerel $unwind$kttc__peek_alignment_specifier
$pdata$kttc__peek_type_qualifier DD imagerel kttc__peek_type_qualifier
	DD	imagerel kttc__peek_type_qualifier+58
	DD	imagerel $unwind$kttc__peek_type_qualifier
$pdata$ccsee_typespec DD imagerel ccsee_typespec
	DD	imagerel ccsee_typespec+58
	DD	imagerel $unwind$ccsee_typespec
$pdata$kttc__peek_storage_class DD imagerel kttc__peek_storage_class
	DD	imagerel kttc__peek_storage_class+58
	DD	imagerel $unwind$kttc__peek_storage_class
$pdata$kttc__peek_func_specifier DD imagerel kttc__peek_func_specifier
	DD	imagerel kttc__peek_func_specifier+58
	DD	imagerel $unwind$kttc__peek_func_specifier
$pdata$ccread_arglist DD imagerel ccread_arglist
	DD	imagerel ccread_arglist+168
	DD	imagerel $unwind$ccread_arglist
$pdata$ccread_expression DD imagerel ccread_expression
	DD	imagerel ccread_expression+565
	DD	imagerel $unwind$ccread_expression
$pdata$ccread_cast DD imagerel ccread_cast
	DD	imagerel ccread_cast+652
	DD	imagerel $unwind$ccread_cast
$pdata$ccread_litide DD imagerel ccread_litide
	DD	imagerel ccread_litide+94
	DD	imagerel $unwind$ccread_litide
$pdata$ccread_primary DD imagerel ccread_primary
	DD	imagerel ccread_primary+873
	DD	imagerel $unwind$ccread_primary
$pdata$ccread_postfix DD imagerel ccread_postfix
	DD	imagerel ccread_postfix+1194
	DD	imagerel $unwind$ccread_postfix
$pdata$ccread_unary DD imagerel ccread_unary
	DD	imagerel ccread_unary+1208
	DD	imagerel $unwind$ccread_unary
$pdata$ccread_multiplicative DD imagerel ccread_multiplicative
	DD	imagerel ccread_multiplicative+621
	DD	imagerel $unwind$ccread_multiplicative
$pdata$ccread_additive DD imagerel ccread_additive
	DD	imagerel ccread_additive+599
	DD	imagerel $unwind$ccread_additive
$pdata$ccread_shift DD imagerel ccread_shift
	DD	imagerel ccread_shift+599
	DD	imagerel $unwind$ccread_shift
$pdata$ccread_relational DD imagerel ccread_relational
	DD	imagerel ccread_relational+643
	DD	imagerel $unwind$ccread_relational
$pdata$ccread_equality DD imagerel ccread_equality
	DD	imagerel ccread_equality+594
	DD	imagerel $unwind$ccread_equality
$pdata$ccread_bitwise_and DD imagerel ccread_bitwise_and
	DD	imagerel ccread_bitwise_and+574
	DD	imagerel $unwind$ccread_bitwise_and
$pdata$ccread_bitwise_xor DD imagerel ccread_bitwise_xor
	DD	imagerel ccread_bitwise_xor+574
	DD	imagerel $unwind$ccread_bitwise_xor
$pdata$ccread_bitwise_or DD imagerel ccread_bitwise_or
	DD	imagerel ccread_bitwise_or+574
	DD	imagerel $unwind$ccread_bitwise_or
$pdata$ccread_logical_and DD imagerel ccread_logical_and
	DD	imagerel ccread_logical_and+574
	DD	imagerel $unwind$ccread_logical_and
$pdata$ccread_logical_or DD imagerel ccread_logical_or
	DD	imagerel ccread_logical_or+574
	DD	imagerel $unwind$ccread_logical_or
$pdata$ccread_conditional DD imagerel ccread_conditional
	DD	imagerel ccread_conditional+757
	DD	imagerel $unwind$ccread_conditional
$pdata$ccread_assignment DD imagerel ccread_assignment
	DD	imagerel ccread_assignment+563
	DD	imagerel $unwind$ccread_assignment
$pdata$ccread_constant_expression DD imagerel ccread_constant_expression
	DD	imagerel ccread_constant_expression+453
	DD	imagerel $unwind$ccread_constant_expression
$pdata$ccread_param_type_list DD imagerel ccread_param_type_list
	DD	imagerel ccread_param_type_list+54
	DD	imagerel $unwind$ccread_param_type_list
$pdata$ccread_initializer DD imagerel ccread_initializer
	DD	imagerel ccread_initializer+44
	DD	imagerel $unwind$ccread_initializer
$pdata$ccread_decl_name DD imagerel ccread_decl_name
	DD	imagerel ccread_decl_name+96
	DD	imagerel $unwind$ccread_decl_name
$pdata$ccread_declaration_specifiers DD imagerel ccread_declaration_specifiers
	DD	imagerel ccread_declaration_specifiers+94
	DD	imagerel $unwind$ccread_declaration_specifiers
$pdata$ccread_specifier_qualifier_list DD imagerel ccread_specifier_qualifier_list
	DD	imagerel ccread_specifier_qualifier_list+94
	DD	imagerel $unwind$ccread_specifier_qualifier_list
$pdata$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+831
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
$pdata$ccread_direct_decl_name DD imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+587
	DD	imagerel $unwind$ccread_direct_decl_name
$pdata$ccread_decl_name_modifier_maybe DD imagerel ccread_decl_name_modifier_maybe
	DD	imagerel ccread_decl_name_modifier_maybe+89
	DD	imagerel $unwind$ccread_decl_name_modifier_maybe
$pdata$ccread_init_decl_name DD imagerel ccread_init_decl_name
	DD	imagerel ccread_init_decl_name+296
	DD	imagerel $unwind$ccread_init_decl_name
$pdata$ccread_struct_decl_name DD imagerel ccread_struct_decl_name
	DD	imagerel ccread_struct_decl_name+296
	DD	imagerel $unwind$ccread_struct_decl_name
$pdata$ccread_init_decl_name_list DD imagerel ccread_init_decl_name_list
	DD	imagerel ccread_init_decl_name_list+153
	DD	imagerel $unwind$ccread_init_decl_name_list
$pdata$ccread_struct_decl_name_list DD imagerel ccread_struct_decl_name_list
	DD	imagerel ccread_struct_decl_name_list+150
	DD	imagerel $unwind$ccread_struct_decl_name_list
$pdata$ccread_init_decl DD imagerel ccread_init_decl
	DD	imagerel ccread_init_decl+301
	DD	imagerel $unwind$ccread_init_decl
$pdata$ccread_struct_decl DD imagerel ccread_struct_decl
	DD	imagerel ccread_struct_decl+272
	DD	imagerel $unwind$ccread_struct_decl
$pdata$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+684
	DD	imagerel $unwind$ccread_struct_or_union_specifier
$pdata$ccread_type_specifier DD imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+480
	DD	imagerel $unwind$ccread_type_specifier
$pdata$ccread_storage_class_specifier DD imagerel ccread_storage_class_specifier
	DD	imagerel ccread_storage_class_specifier+63
	DD	imagerel $unwind$ccread_storage_class_specifier
$pdata$ccread_type_qualifier DD imagerel ccread_type_qualifier
	DD	imagerel ccread_type_qualifier+63
	DD	imagerel $unwind$ccread_type_qualifier
$pdata$ccread_function_specifier DD imagerel ccread_function_specifier
	DD	imagerel ccread_function_specifier+63
	DD	imagerel $unwind$ccread_function_specifier
$pdata$ccread_alignment_specifier DD imagerel ccread_alignment_specifier
	DD	imagerel ccread_alignment_specifier+63
	DD	imagerel $unwind$ccread_alignment_specifier
$pdata$ccread_param_decl DD imagerel ccread_param_decl
	DD	imagerel ccread_param_decl+269
	DD	imagerel $unwind$ccread_param_decl
$pdata$ccread_param_decl_list DD imagerel ccread_param_decl_list
	DD	imagerel ccread_param_decl_list+136
	DD	imagerel $unwind$ccread_param_decl_list
$pdata$ccread_block DD imagerel ccread_block
	DD	imagerel ccread_block+270
	DD	imagerel $unwind$ccread_block
$pdata$ccread_statement_list DD imagerel ccread_statement_list
	DD	imagerel ccread_statement_list+130
	DD	imagerel $unwind$ccread_statement_list
$pdata$ccread_statement DD imagerel ccread_statement
	DD	imagerel ccread_statement+3419
	DD	imagerel $unwind$ccread_statement
$pdata$ccread_block_or_single_stmt DD imagerel ccread_block_or_single_stmt
	DD	imagerel ccread_block_or_single_stmt+87
	DD	imagerel $unwind$ccread_block_or_single_stmt
$pdata$ccread_external_declaration DD imagerel ccread_external_declaration
	DD	imagerel ccread_external_declaration+735
	DD	imagerel $unwind$ccread_external_declaration
$pdata$ccread_translation_unit DD imagerel ccread_translation_unit
	DD	imagerel ccread_translation_unit+114
	DD	imagerel $unwind$ccread_translation_unit
$pdata$ccemit_lvalue DD imagerel ccemit_lvalue
	DD	imagerel ccemit_lvalue+237
	DD	imagerel $unwind$ccemit_lvalue
$pdata$ccemit_rvalue DD imagerel ccemit_rvalue
	DD	imagerel ccemit_rvalue+455
	DD	imagerel $unwind$ccemit_rvalue
$pdata$cctree_to_type DD imagerel cctree_to_type
	DD	imagerel cctree_to_type+207
	DD	imagerel $unwind$cctree_to_type
$pdata$ccemit_include_local DD imagerel ccemit_include_local
	DD	imagerel ccemit_include_local+288
	DD	imagerel $unwind$ccemit_include_local
$pdata$ccemit_constant DD imagerel ccemit_constant
	DD	imagerel ccemit_constant+209
	DD	imagerel $unwind$ccemit_constant
$pdata$ccemit_const_i32 DD imagerel ccemit_const_i32
	DD	imagerel ccemit_const_i32+46
	DD	imagerel $unwind$ccemit_const_i32
$pdata$ccemit_resolve DD imagerel ccemit_resolve
	DD	imagerel ccemit_resolve+112
	DD	imagerel $unwind$ccemit_resolve
$pdata$ccemit_invoke_easy DD imagerel ccemit_invoke_easy
	DD	imagerel ccemit_invoke_easy+334
	DD	imagerel $unwind$ccemit_invoke_easy
$pdata$ccemit_tree DD imagerel ccemit_tree
	DD	imagerel ccemit_tree+1362
	DD	imagerel $unwind$ccemit_tree
$pdata$ccemit_treelist DD imagerel ccemit_treelist
	DD	imagerel ccemit_treelist+149
	DD	imagerel $unwind$ccemit_treelist
$pdata$ccemit_decl_name DD imagerel ccemit_decl_name
	DD	imagerel ccemit_decl_name+138
	DD	imagerel $unwind$ccemit_decl_name
$pdata$ccemit_decl DD imagerel ccemit_decl
	DD	imagerel ccemit_decl+165
	DD	imagerel $unwind$ccemit_decl
$pdata$ccemit_param DD imagerel ccemit_param
	DD	imagerel ccemit_param+72
	DD	imagerel $unwind$ccemit_param
$pdata$ccemit_function DD imagerel ccemit_function
	DD	imagerel ccemit_function+448
	DD	imagerel $unwind$ccemit_function
$pdata$ccemit_external_decl DD imagerel ccemit_external_decl
	DD	imagerel ccemit_external_decl+264
	DD	imagerel $unwind$ccemit_external_decl
$pdata$ccemit_translation_unit DD imagerel ccemit_translation_unit
	DD	imagerel ccemit_translation_unit+155
	DD	imagerel $unwind$ccemit_translation_unit
$pdata$ccemit_init DD imagerel ccemit_init
	DD	imagerel ccemit_init+32
	DD	imagerel $unwind$ccemit_init
$pdata$ccexec_sizeof DD imagerel ccexec_sizeof
	DD	imagerel ccexec_sizeof+194
	DD	imagerel $unwind$ccexec_sizeof
$pdata$ccstack_mingle DD imagerel ccstack_mingle
	DD	imagerel ccstack_mingle+474
	DD	imagerel $unwind$ccstack_mingle
$pdata$ccstack_yield DD imagerel ccstack_yield
	DD	imagerel ccstack_yield+678
	DD	imagerel $unwind$ccstack_yield
$pdata$ccstack_yield_rvalue DD imagerel ccstack_yield_rvalue
	DD	imagerel ccstack_yield_rvalue+306
	DD	imagerel $unwind$ccstack_yield_rvalue
$pdata$ccstack_yield_lvalue DD imagerel ccstack_yield_lvalue
	DD	imagerel ccstack_yield_lvalue+205
	DD	imagerel $unwind$ccstack_yield_lvalue
$pdata$ccstack_push DD imagerel ccstack_push
	DD	imagerel ccstack_push+253
	DD	imagerel $unwind$ccstack_push
$pdata$ccstack_local_alloc DD imagerel ccstack_local_alloc
	DD	imagerel ccstack_local_alloc+697
	DD	imagerel $unwind$ccstack_local_alloc
$pdata$ccexec_edict_arith DD imagerel ccexec_edict_arith
	DD	imagerel ccexec_edict_arith+1195
	DD	imagerel $unwind$ccexec_edict_arith
$pdata$ccexec_invoke DD imagerel ccexec_invoke
	DD	imagerel ccexec_invoke+1538
	DD	imagerel $unwind$ccexec_invoke
$pdata$ccexec_edict DD imagerel ccexec_edict
	DD	imagerel ccexec_edict+7360
	DD	imagerel $unwind$ccexec_edict
$pdata$ccexec_translation_unit DD imagerel ccexec_translation_unit
	DD	imagerel ccexec_translation_unit+276
	DD	imagerel $unwind$ccexec_translation_unit
$pdata$ccexec_init DD imagerel ccexec_init
	DD	imagerel ccexec_init+206
	DD	imagerel $unwind$ccexec_init
$pdata$ccexec_uninit DD imagerel ccexec_uninit
	DD	imagerel ccexec_uninit+129
	DD	imagerel $unwind$ccexec_uninit
$pdata$gen_type DD imagerel $LN3
	DD	imagerel $LN3+163
	DD	imagerel $unwind$gen_type
$pdata$gen_vectype DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$gen_vectype
$pdata$gen_ptrtype DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$gen_ptrtype
$pdata$gen_vartype DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$gen_vartype
$pdata$gen_fixtype DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$gen_fixtype
$pdata$gen_typename_ex DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$gen_typename_ex
$pdata$gen_typename DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$gen_typename
$pdata$emit_typename DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$emit_typename
$pdata$emit_modifier DD imagerel $LN6
	DD	imagerel $LN6+90
	DD	imagerel $unwind$emit_modifier
$pdata$emit_vardecl_ex DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$emit_vardecl_ex
$pdata$emit_vardecl DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$emit_vardecl
$pdata$emit_fundecl DD imagerel $LN9
	DD	imagerel $LN9+232
	DD	imagerel $unwind$emit_fundecl
$pdata$genmake DD imagerel $LN6
	DD	imagerel $LN6+276
	DD	imagerel $unwind$genmake
$pdata$emit_vecoprari DD imagerel $LN8
	DD	imagerel $LN8+412
	DD	imagerel $unwind$emit_vecoprari
$pdata$emit_vectype DD imagerel $LN7
	DD	imagerel $LN7+462
	DD	imagerel $unwind$emit_vectype
$pdata$emit_type DD imagerel $LN7
	DD	imagerel $LN7+182
	DD	imagerel $unwind$emit_type
$pdata$?fib@@YAHH@Z DD imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$?fib@@YAHH@Z
$pdata$main DD	imagerel $LN6
	DD	imagerel $LN6+4053
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@41d0000000000000
CONST	SEGMENT
__real@41d0000000000000 DQ 041d0000000000000r	; 1.07374e+09
CONST	ENDS
;	COMDAT __real@4130000000000000
CONST	SEGMENT
__real@4130000000000000 DQ 04130000000000000r	; 1.04858e+06
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
_DATA	SEGMENT
?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A DD 01H		; `ccpeek'::`2'::end_tok
	ORG $+4
	ORG $+24
_DATA	ENDS
;	COMDAT ?dummy@?1??ccdebug_@@9@4Uccsentry_t@@A
_DATA	SEGMENT
?dummy@?1??ccdebug_@@9@4Uccsentry_t@@A DQ FLAT:$SG46334	; `ccdebug_'::`2'::dummy
	ORG $+168
_DATA	ENDS
;	COMDAT ?hexu@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hexu@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789ABCDEFXP', 00H ; `stbsp_vsprintfcb'::`2'::hexu
_DATA	ENDS
;	COMDAT ?hex@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hex@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789abcdefxp', 00H ; `stbsp_vsprintfcb'::`2'::hex
_DATA	ENDS
_DATA	SEGMENT
stbsp__period DB 02eH
stbsp__comma DB	02cH
	ORG $+14
stbsp__digitpair DW 00H
	DB	'00010203040506070809101112131415161718192021222324252627'
	DB	'2829303132333435363738394041424344454647484950515253545556575'
	DB	'8596061626364656667686970717273747576777879808182838485868788'
	DB	'8990919293949596979899', 00H
	ORG $+1
	ORG $+4
cctree_s DQ	FLAT:$SG46967
	DQ	FLAT:$SG46968
	DQ	FLAT:$SG46969
	DQ	FLAT:$SG46970
	DQ	FLAT:$SG46971
	DQ	FLAT:$SG46972
	DQ	FLAT:$SG46973
	DQ	FLAT:$SG46974
	DQ	FLAT:$SG46975
	DQ	FLAT:$SG46976
	DQ	FLAT:$SG46977
	DQ	FLAT:$SG46978
	DQ	FLAT:$SG46979
	DQ	FLAT:$SG46980
	DQ	FLAT:$SG46981
	DQ	FLAT:$SG46982
	DQ	FLAT:$SG46983
	DQ	FLAT:$SG46984
	DQ	FLAT:$SG46985
	DQ	FLAT:$SG46986
	DQ	FLAT:$SG46987
	DQ	FLAT:$SG46988
	DQ	FLAT:$SG46989
	DQ	FLAT:$SG46990
	DQ	FLAT:$SG46991
	DQ	FLAT:$SG46992
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:ccprintf
	DD	025H
	DD	067fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsnprintf
	DD	024H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsprintfcb
	DD	025H
	DD	02f34H
	DD	02f36H
	DD	036f8H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
xdata	SEGMENT
$unwind$ccuserallocator_ DD 041801H
	DD	07b0118H
	DD	060107011H
$unwind$ccinternalallocator_ DD 011301H
	DD	04213H
$unwind$ccdlb_tblget DD 041c01H
	DD	029011cH
	DD	060147015H
$unwind$ccdlb_tblput DD 041c01H
	DD	029011cH
	DD	060147015H
$unwind$ccdlb_tblset DD 041c01H
	DD	029011cH
	DD	060147015H
$unwind$cccaller DD 031901H
	DD	070154219H
	DD	06014H
$unwind$ccsentry_enter DD 031501H
	DD	070118215H
	DD	06010H
$unwind$ccsentry_leave DD 011301H
	DD	08213H
$unwind$ccclocktick DD 010401H
	DD	06204H
$unwind$ccclocksecs DD 010901H
	DD	06209H
$unwind$ccfilename DD 010901H
	DD	02209H
$unwind$ccrealfile DD 010901H
	DD	02209H
$unwind$ccclosefile DD 010901H
	DD	04209H
$unwind$ccopenfile DD 010901H
	DD	0a209H
$unwind$ccpullfile DD 041701H
	DD	0170117H
	DD	0600f7010H
$unwind$ccfilesize DD 010901H
	DD	04209H
$unwind$ccformatvex DD 011701H
	DD	04217H
$unwind$ccformatv DD 010e01H
	DD	0420eH
$unwind$ccformatex DD 011701H
	DD	06217H
$unwind$ccformat DD 011801H
	DD	06218H
$unwind$cctrace_ DD 011801H
	DD	0a218H
$unwind$stbsp_vsprintf DD 011301H
	DD	06213H
$unwind$stbsp_vsnprintf DD 022c19H
	DD	04d011aH
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$stbsp_sprintf DD 011801H
	DD	08218H
$unwind$stbsp_snprintf DD 011701H
	DD	06217H
$unwind$stbsp_vsprintfcb DD 022d19H
	DD	097011bH
	DD	imagerel __GSHandlerCheck
	DD	04a0H
$unwind$stbsp__real_to_str DD 021b01H
	DD	017011bH
$unwind$stbsp__real_to_parts DD 011401H
	DD	04214H
$unwind$stbsp__strlen_limited DD 010d01H
	DD	0220dH
$unwind$stbsp__clamp_callback DD 011301H
	DD	06213H
$unwind$stbsp__count_clamp_callback DD 011301H
	DD	02213H
$unwind$stbsp__raise_to_power10 DD 021c01H
	DD	035011cH
$unwind$ccdebug_checkblock DD 010e01H
	DD	0220eH
$unwind$ccdlbdel_ DD 040e01H
	DD	027010eH
	DD	060067007H
$unwind$ccdlb_arradd_ DD 041801H
	DD	0350118H
	DD	060107011H
$unwind$ccdlb_arradd DD 011801H
	DD	08218H
$unwind$ccdlb_stradd DD 041d01H
	DD	025011dH
	DD	060157016H
$unwind$cchsh_abc DD 010d01H
	DD	0220dH
$unwind$ccdlb_tblini DD 010d01H
	DD	0820dH
$unwind$ccdlb_tblcat DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$ccdbl_query DD 011201H
	DD	08212H
$unwind$ccstr_vcatf DD 011301H
	DD	06213H
$unwind$ccstr_catf DD 011801H
	DD	06218H
$unwind$ccprintf DD 022d19H
	DD	015011bH
	DD	imagerel __GSHandlerCheck
	DD	098H
$unwind$ccsentry_report DD 021601H
	DD	0210116H
$unwind$ccdebugdump DD 040a01H
	DD	039010aH
	DD	060027003H
$unwind$ccdebugend DD 010401H
	DD	04204H
$unwind$ccout DD 010901H
	DD	04209H
$unwind$cctree_del DD 040e01H
	DD	013010eH
	DD	060067007H
$unwind$cctree_new DD 041701H
	DD	0150117H
	DD	0600f7010H
$unwind$cctree_clone DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$cctree_name DD 010901H
	DD	02209H
$unwind$cctreee_pointer_modifier DD 010901H
	DD	06209H
$unwind$cctreee_array_modifier DD 010e01H
	DD	0620eH
$unwind$cctreee_function_modifier DD 010e01H
	DD	0620eH
$unwind$cctreee_struct_specifier DD 010e01H
	DD	0620eH
$unwind$cctree_translation_unit DD 010401H
	DD	06204H
$unwind$cctree_group DD 011201H
	DD	06212H
$unwind$cctree_call DD 011701H
	DD	06217H
$unwind$cctree_index DD 011701H
	DD	06217H
$unwind$cctree_block DD 011201H
	DD	06212H
$unwind$cctree_while DD 011701H
	DD	06217H
$unwind$cctree_label DD 011701H
	DD	06217H
$unwind$cctree_goto DD 011201H
	DD	06212H
$unwind$cctree_return DD 011201H
	DD	06212H
$unwind$cctree_decl_name DD 011701H
	DD	06217H
$unwind$cctree_decl DD 011701H
	DD	06217H
$unwind$cctree_litide DD 011201H
	DD	06212H
$unwind$cctree_litint DD 011201H
	DD	06212H
$unwind$cctree_litflo DD 011201H
	DD	06212H
$unwind$cctree_unary DD 011701H
	DD	06217H
$unwind$cctree_binary DD 011701H
	DD	06217H
$unwind$cctree_ternary DD 011701H
	DD	06217H
$unwind$cctree_solve_decl DD 010901H
	DD	06209H
$unwind$cctree_solve_statement DD 010901H
	DD	06209H
$unwind$cctree_include_invokable DD 010e01H
	DD	0620eH
$unwind$cctree_resolve_symbol DD 040e01H
	DD	017010eH
	DD	060067007H
$unwind$cctree_mingle DD 041301H
	DD	0190113H
	DD	0600b700cH
$unwind$cctree_solve_binary DD 011201H
	DD	04212H
$unwind$cctree_solve_rvalue DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$cctree_solve_lvalue DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$cctree_solve_call DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$cctree_solve_index DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$cctree_solve_block DD 010901H
	DD	06209H
$unwind$cctree_solve_decl_name DD 040e01H
	DD	02f010eH
	DD	060067007H
$unwind$cctree_solve_translation_unit DD 010901H
	DD	06209H
$unwind$ccedict DD 041201H
	DD	0150112H
	DD	0600a700bH
$unwind$ccedict_local DD 010e01H
	DD	0620eH
$unwind$ccedict_param DD 010e01H
	DD	0620eH
$unwind$ccedict_store DD 010e01H
	DD	0620eH
$unwind$ccedict_fetch DD 010e01H
	DD	0620eH
$unwind$ccedict_arith DD 011201H
	DD	06212H
$unwind$ccedict_enter DD 010901H
	DD	06209H
$unwind$ccedict_jump DD 010901H
	DD	06209H
$unwind$ccedict_fjump DD 010e01H
	DD	0620eH
$unwind$ccedict_call DD 010e01H
	DD	0620eH
$unwind$ccedict_return DD 010901H
	DD	06209H
$unwind$ccedict_address DD 010e01H
	DD	0620eH
$unwind$ccvalue DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$cctype DD 041201H
	DD	0150112H
	DD	0600a700bH
$unwind$ccblock DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$ccprocd DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$ccemit_global DD 010e01H
	DD	0620eH
$unwind$ccemit_include_global DD 011301H
	DD	06213H
$unwind$ccemit_global_procd DD 011301H
	DD	0a213H
$unwind$ccvalue_retarget DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$ccblock_label DD 031501H
	DD	070114215H
	DD	06010H
$unwind$ccblock_add DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$ccblock_add_edict DD 010e01H
	DD	0620eH
$unwind$ccprocd_local DD 010e01H
	DD	0620eH
$unwind$ccblock_store DD 011301H
	DD	04213H
$unwind$ccblock_fetch DD 011301H
	DD	04213H
$unwind$ccblock_address DD 011301H
	DD	04213H
$unwind$ccblock_arith DD 011701H
	DD	04217H
$unwind$ccblock_enter DD 010e01H
	DD	0420eH
$unwind$ccblock_return DD 010e01H
	DD	0420eH
$unwind$ccblock_invoke DD 011301H
	DD	04213H
$unwind$ccblock_jump DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$ccblock_fjump DD 031501H
	DD	070118215H
	DD	06010H
$unwind$ccexec_rvalue DD 031501H
	DD	070114215H
	DD	06010H
$unwind$ccexec_lvalue DD 031501H
	DD	070114215H
	DD	06010H
$unwind$cclex_hash_init DD 010901H
	DD	04209H
$unwind$cclex_init DD 030b01H
	DD	07007820bH
	DD	06006H
$unwind$cclex_idenlen DD 010901H
	DD	02209H
$unwind$cclex_token DD 031001H
	DD	0700c4210H
	DD	0600bH
$unwind$cclex_next_token_internal DD 040e01H
	DD	045010eH
	DD	060067007H
$unwind$cclex_next_token DD 040e01H
	DD	025010eH
	DD	060067007H
$unwind$cclex_identifier DD 041301H
	DD	0250113H
	DD	0600b700cH
$unwind$cclex_readstr DD 041301H
	DD	0270113H
	DD	0600b700cH
$unwind$ccread_init DD 010901H
	DD	04209H
$unwind$ccread_uninit DD 010901H
	DD	04209H
$unwind$ccread_all_tokens DD 010901H
	DD	06209H
$unwind$ccreader_move DD 011301H
	DD	06213H
$unwind$ccread_include DD 010e01H
	DD	0820eH
$unwind$ccpeep DD 010901H
	DD	04209H
$unwind$ccsee DD 010d01H
	DD	0620dH
$unwind$ccsee_end DD 010901H
	DD	04209H
$unwind$ccgobble DD 010901H
	DD	06209H
$unwind$cceat DD 010d01H
	DD	0420dH
$unwind$kttc__peek_alignment_specifier DD 010901H
	DD	06209H
$unwind$kttc__peek_type_qualifier DD 010901H
	DD	06209H
$unwind$ccsee_typespec DD 010901H
	DD	06209H
$unwind$kttc__peek_storage_class DD 010901H
	DD	06209H
$unwind$kttc__peek_func_specifier DD 010901H
	DD	06209H
$unwind$ccread_arglist DD 031501H
	DD	070116215H
	DD	06010H
$unwind$ccread_expression DD 041801H
	DD	0250118H
	DD	060107011H
$unwind$ccread_cast DD 041801H
	DD	0310118H
	DD	060107011H
$unwind$ccread_litide DD 011301H
	DD	06213H
$unwind$ccread_primary DD 041801H
	DD	0330118H
	DD	060107011H
$unwind$ccread_postfix DD 041801H
	DD	0410118H
	DD	060107011H
$unwind$ccread_unary DD 041801H
	DD	0350118H
	DD	060107011H
$unwind$ccread_multiplicative DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_additive DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_shift DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_relational DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_equality DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_bitwise_and DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_bitwise_xor DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_bitwise_or DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_logical_and DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_logical_or DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_conditional DD 041801H
	DD	0330118H
	DD	060107011H
$unwind$ccread_assignment DD 041801H
	DD	0270118H
	DD	060107011H
$unwind$ccread_constant_expression DD 041801H
	DD	0250118H
	DD	060107011H
$unwind$ccread_param_type_list DD 011301H
	DD	06213H
$unwind$ccread_initializer DD 011301H
	DD	04213H
$unwind$ccread_decl_name DD 011801H
	DD	06218H
$unwind$ccread_declaration_specifiers DD 011301H
	DD	06213H
$unwind$ccread_specifier_qualifier_list DD 011301H
	DD	06213H
$unwind$ccread_direct_decl_name_modifier DD 041d01H
	DD	03b011dH
	DD	060157016H
$unwind$ccread_direct_decl_name DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$ccread_decl_name_modifier_maybe DD 011801H
	DD	04218H
$unwind$ccread_init_decl_name DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$ccread_struct_decl_name DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$ccread_init_decl_name_list DD 011801H
	DD	06218H
$unwind$ccread_struct_decl_name_list DD 011801H
	DD	06218H
$unwind$ccread_init_decl DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$ccread_struct_decl DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$ccread_struct_or_union_specifier DD 041801H
	DD	02f0118H
	DD	060107011H
$unwind$ccread_type_specifier DD 011301H
	DD	06213H
$unwind$ccread_storage_class_specifier DD 011301H
	DD	06213H
$unwind$ccread_type_qualifier DD 011301H
	DD	06213H
$unwind$ccread_function_specifier DD 011301H
	DD	06213H
$unwind$ccread_alignment_specifier DD 011301H
	DD	06213H
$unwind$ccread_param_decl DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$ccread_param_decl_list DD 011301H
	DD	06213H
$unwind$ccread_block DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$ccread_statement_list DD 011301H
	DD	06213H
$unwind$ccread_statement DD 041801H
	DD	0dd0118H
	DD	060107011H
$unwind$ccread_block_or_single_stmt DD 011301H
	DD	06213H
$unwind$ccread_external_declaration DD 041801H
	DD	02f0118H
	DD	060107011H
$unwind$ccread_translation_unit DD 010901H
	DD	06209H
$unwind$ccemit_lvalue DD 011801H
	DD	08218H
$unwind$ccemit_rvalue DD 011801H
	DD	0a218H
$unwind$cctree_to_type DD 011801H
	DD	06218H
$unwind$ccemit_include_local DD 011801H
	DD	0a218H
$unwind$ccemit_constant DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$ccemit_const_i32 DD 010e01H
	DD	0620eH
$unwind$ccemit_resolve DD 011301H
	DD	06213H
$unwind$ccemit_invoke_easy DD 011801H
	DD	0c218H
$unwind$ccemit_tree DD 041d01H
	DD	041011dH
	DD	060157016H
$unwind$ccemit_treelist DD 011801H
	DD	06218H
$unwind$ccemit_decl_name DD 011801H
	DD	08218H
$unwind$ccemit_decl DD 011801H
	DD	06218H
$unwind$ccemit_param DD 011801H
	DD	08218H
$unwind$ccemit_function DD 011301H
	DD	08213H
$unwind$ccemit_external_decl DD 010e01H
	DD	0820eH
$unwind$ccemit_translation_unit DD 010e01H
	DD	0620eH
$unwind$ccemit_init DD 010901H
	DD	04209H
$unwind$ccexec_sizeof DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$ccstack_mingle DD 041301H
	DD	0250113H
	DD	0600b700cH
$unwind$ccstack_yield DD 041801H
	DD	0310118H
	DD	060107011H
$unwind$ccstack_yield_rvalue DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$ccstack_yield_lvalue DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$ccstack_push DD 041201H
	DD	0150112H
	DD	0600a700bH
$unwind$ccstack_local_alloc DD 041801H
	DD	02f0118H
	DD	060107011H
$unwind$ccexec_edict_arith DD 041c01H
	DD	041011cH
	DD	060147015H
$unwind$ccexec_invoke DD 041d01H
	DD	057011dH
	DD	060157016H
$unwind$ccexec_edict DD 041801H
	DD	01e70118H
	DD	060107011H
$unwind$ccexec_translation_unit DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$ccexec_init DD 040e01H
	DD	015010eH
	DD	060067007H
$unwind$ccexec_uninit DD 040e01H
	DD	013010eH
	DD	060067007H
$unwind$gen_type DD 040d01H
	DD	015010dH
	DD	060057006H
$unwind$gen_vectype DD 010d01H
	DD	0620dH
$unwind$gen_ptrtype DD 010901H
	DD	06209H
$unwind$gen_vartype DD 011101H
	DD	06211H
$unwind$gen_fixtype DD 010c01H
	DD	0620cH
$unwind$gen_typename_ex DD 011301H
	DD	08213H
$unwind$gen_typename DD 010901H
	DD	04209H
$unwind$emit_typename DD 010e01H
	DD	0420eH
$unwind$emit_modifier DD 010d01H
	DD	0420dH
$unwind$emit_vardecl_ex DD 011801H
	DD	04218H
$unwind$emit_vardecl DD 011301H
	DD	04213H
$unwind$emit_fundecl DD 011801H
	DD	06218H
$unwind$genmake DD 010e01H
	DD	0820eH
$unwind$emit_vecoprari DD 011301H
	DD	08213H
$unwind$emit_vectype DD 010e01H
	DD	0620eH
$unwind$emit_type DD 010e01H
	DD	0620eH
$unwind$?fib@@YAHH@Z DD 010801H
	DD	06208H
$unwind$main DD	041201H
	DD	01390112H
	DD	0600a700bH
xdata	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
c$ = 52
mem$2 = 56
tv707 = 64
tv657 = 72
tv721 = 80
tv655 = 88
tv734 = 96
tv653 = 104
tv746 = 112
tv651 = 120
tv788 = 128
tv649 = 136
tv800 = 144
tv647 = 152
tv812 = 160
tv645 = 168
tv824 = 176
tv643 = 184
tv836 = 192
tv641 = 200
tv848 = 208
tv607 = 216
tree$ = 224
tv860 = 232
tv605 = 240
tv872 = 248
tv603 = 256
tv893 = 264
tv601 = 272
tv905 = 280
tv599 = 288
tv928 = 296
tv597 = 304
tv940 = 312
tv595 = 320
emit$ = 328
exec$ = 352
$T3 = 384
retr$ = 408
$T4 = 432
$T5 = 464
$T6 = 496
$T7 = 528
$T8 = 560
$T9 = 592
$T10 = 624
$T11 = 656
$T12 = 688
$T13 = 720
$T14 = 752
$T15 = 784
$T16 = 816
$T17 = 848
$T18 = 880
$T19 = 912
$T20 = 944
$T21 = 976
$T22 = 1008
$T23 = 1040
$T24 = 1072
$T25 = 1104
$T26 = 1136
$T27 = 1168
$T28 = 1200
$T29 = 1232
$T30 = 1264
$T31 = 1296
$T32 = 1328
$T33 = 1360
$T34 = 1392
$T35 = 1424
$T36 = 1456
$T37 = 1488
$T38 = 1520
$T39 = 1552
$T40 = 1584
$T41 = 1616
$T42 = 1648
$T43 = 1680
$T44 = 1712
read$ = 1744
$T45 = 1856
$T46 = 1888
$T47 = 1920
$T48 = 1952
$T49 = 1984
$T50 = 2016
$T51 = 2048
$T52 = 2080
$T53 = 2112
$T54 = 2144
$T55 = 2176
$T56 = 2208
$T57 = 2240
$T58 = 2272
$T59 = 2304
$T60 = 2336
$T61 = 2368
$T62 = 2400
$T63 = 2432
$T64 = 2464
argc$ = 2528
argv$ = 2536
main	PROC
; File W:\cpp\void\cc\test.c
; Line 15
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 2504				; 000009c8H
; Line 16
	call	ccini
; Line 18
	lea	rax, OFFSET FLAT:$SG50621
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 18
	lea	r8, OFFSET FLAT:$SG50622
	mov	edx, 167				; 000000a7H
	lea	rcx, QWORD PTR $T45[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv657[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv707[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv707[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50620
	mov	rcx, QWORD PTR tv657[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 19
	mov	rax, QWORD PTR argv$[rsp]
	add	rax, 8
	mov	QWORD PTR argv$[rsp], rax
; Line 20
	mov	eax, DWORD PTR argc$[rsp]
	dec	eax
	mov	DWORD PTR argc$[rsp], eax
; Line 23
	lea	rax, OFFSET FLAT:$SG50624
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 23
	lea	r8, OFFSET FLAT:$SG50625
	mov	edx, 168				; 000000a8H
	lea	rcx, QWORD PTR $T46[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv655[rsp], rcx
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rdi, QWORD PTR $T7[rsp]
	mov	QWORD PTR tv721[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv721[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50623
	mov	rcx, QWORD PTR tv655[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 24
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@main:
	cmp	DWORD PTR i$1[rsp], 8
	jge	$LN3@main
; Line 26
	lea	rax, OFFSET FLAT:$SG50627
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 26
	lea	r8, OFFSET FLAT:$SG50628
	mov	edx, 169				; 000000a9H
	lea	rcx, QWORD PTR $T47[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv653[rsp], rcx
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rdi, QWORD PTR $T9[rsp]
	mov	QWORD PTR tv734[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv734[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50626
	mov	rcx, QWORD PTR tv653[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 27
	lea	rax, OFFSET FLAT:$SG50630
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 27
	lea	r8, OFFSET FLAT:$SG50631
	mov	edx, 170				; 000000aaH
	lea	rcx, QWORD PTR $T48[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv651[rsp], rcx
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rdi, QWORD PTR $T11[rsp]
	mov	QWORD PTR tv746[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv746[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50629
	mov	rcx, QWORD PTR tv651[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 28
	lea	rax, OFFSET FLAT:$SG50632
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 28
	lea	r8, OFFSET FLAT:$SG50633
	mov	edx, 171				; 000000abH
	lea	rcx, QWORD PTR $T49[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 24
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccuserallocator_
	mov	QWORD PTR mem$2[rsp], rax
; Line 29
	lea	rax, OFFSET FLAT:$SG50634
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 29
	lea	r8, OFFSET FLAT:$SG50635
	mov	edx, 172				; 000000acH
	lea	rcx, QWORD PTR $T50[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR mem$2[rsp]
	mov	edx, 48					; 00000030H
	lea	rcx, QWORD PTR $T16[rsp]
	call	ccuserallocator_
	mov	QWORD PTR mem$2[rsp], rax
; Line 30
	lea	rax, OFFSET FLAT:$SG50636
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 30
	lea	r8, OFFSET FLAT:$SG50637
	mov	edx, 173				; 000000adH
	lea	rcx, QWORD PTR $T51[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR mem$2[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T18[rsp]
	call	ccuserallocator_
; Line 31
	lea	rax, OFFSET FLAT:$SG50639
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 31
	lea	r8, OFFSET FLAT:$SG50640
	mov	edx, 174				; 000000aeH
	lea	rcx, QWORD PTR $T52[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv649[rsp], rcx
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rdi, QWORD PTR $T19[rsp]
	mov	QWORD PTR tv788[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv788[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50638
	mov	rcx, QWORD PTR tv649[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T20[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 32
	lea	rax, OFFSET FLAT:$SG50642
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	lea	r8, OFFSET FLAT:$SG50643
	mov	edx, 175				; 000000afH
	lea	rcx, QWORD PTR $T64[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv647[rsp], rcx
	lea	rdx, QWORD PTR $T22[rsp]
	lea	rdi, QWORD PTR $T21[rsp]
	mov	QWORD PTR tv800[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv800[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50641
	mov	rcx, QWORD PTR tv647[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T22[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 33
	jmp	$LN2@main
$LN3@main:
; Line 34
	lea	rax, OFFSET FLAT:$SG50645
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 34					; 00000022H
	lea	r8, OFFSET FLAT:$SG50646
	mov	edx, 176				; 000000b0H
	lea	rcx, QWORD PTR $T53[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv645[rsp], rcx
	lea	rdx, QWORD PTR $T24[rsp]
	lea	rdi, QWORD PTR $T23[rsp]
	mov	QWORD PTR tv812[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv812[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50644
	mov	rcx, QWORD PTR tv645[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T24[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 38
	lea	rax, OFFSET FLAT:$SG50648
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 38					; 00000026H
	lea	r8, OFFSET FLAT:$SG50649
	mov	edx, 177				; 000000b1H
	lea	rcx, QWORD PTR $T54[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv643[rsp], rcx
	lea	rdx, QWORD PTR $T26[rsp]
	lea	rdi, QWORD PTR $T25[rsp]
	mov	QWORD PTR tv824[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv824[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50647
	mov	rcx, QWORD PTR tv643[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T26[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 40
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_init
; Line 41
	lea	rdx, OFFSET FLAT:$SG50650
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_include
; Line 43
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_translation_unit
	mov	QWORD PTR tree$[rsp], rax
; Line 44
	lea	rax, OFFSET FLAT:$SG50652
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 44					; 0000002cH
	lea	r8, OFFSET FLAT:$SG50653
	mov	edx, 178				; 000000b2H
	lea	rcx, QWORD PTR $T55[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv641[rsp], rcx
	lea	rdx, QWORD PTR $T27[rsp]
	lea	rdi, QWORD PTR $T15[rsp]
	mov	QWORD PTR tv836[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv836[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50651
	mov	rcx, QWORD PTR tv641[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T27[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 47
	lea	rax, OFFSET FLAT:$SG50655
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 47					; 0000002fH
	lea	r8, OFFSET FLAT:$SG50656
	mov	edx, 179				; 000000b3H
	lea	rcx, QWORD PTR $T56[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T28[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv607[rsp], rcx
	lea	rdx, QWORD PTR $T29[rsp]
	lea	rdi, QWORD PTR $T28[rsp]
	mov	QWORD PTR tv848[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv848[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50654
	mov	rcx, QWORD PTR tv607[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T29[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 49
	lea	rcx, QWORD PTR emit$[rsp]
	call	ccemit_init
; Line 50
	mov	rdx, QWORD PTR tree$[rsp]
	lea	rcx, QWORD PTR emit$[rsp]
	call	ccemit_translation_unit
; Line 51
	lea	rax, OFFSET FLAT:$SG50658
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 51					; 00000033H
	lea	r8, OFFSET FLAT:$SG50659
	mov	edx, 180				; 000000b4H
	lea	rcx, QWORD PTR $T57[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T30[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv605[rsp], rcx
	lea	rdx, QWORD PTR $T31[rsp]
	lea	rdi, QWORD PTR $T30[rsp]
	mov	QWORD PTR tv860[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv860[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50657
	mov	rcx, QWORD PTR tv605[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T31[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 53
	lea	rax, OFFSET FLAT:$SG50661
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 53					; 00000035H
	lea	r8, OFFSET FLAT:$SG50662
	mov	edx, 181				; 000000b5H
	lea	rcx, QWORD PTR $T58[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T32[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv603[rsp], rcx
	lea	rdx, QWORD PTR $T33[rsp]
	lea	rdi, QWORD PTR $T32[rsp]
	mov	QWORD PTR tv872[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv872[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50660
	mov	rcx, QWORD PTR tv603[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T33[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 60
	lea	rcx, QWORD PTR exec$[rsp]
	call	ccexec_init
; Line 61
	lea	r8, QWORD PTR emit$[rsp]
	lea	rdx, QWORD PTR exec$[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	call	ccexec_translation_unit
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR retr$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 62
	lea	rcx, QWORD PTR exec$[rsp]
	call	ccexec_uninit
; Line 68
	lea	rax, OFFSET FLAT:$SG50664
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 68					; 00000044H
	lea	r8, OFFSET FLAT:$SG50665
	mov	edx, 182				; 000000b6H
	lea	rcx, QWORD PTR $T59[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T34[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv601[rsp], rcx
	lea	rdx, QWORD PTR $T35[rsp]
	lea	rdi, QWORD PTR $T34[rsp]
	mov	QWORD PTR tv893[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv893[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50663
	mov	rcx, QWORD PTR tv601[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T35[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 70
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_uninit
; Line 72
	lea	rax, OFFSET FLAT:$SG50667
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 72					; 00000048H
	lea	r8, OFFSET FLAT:$SG50668
	mov	edx, 183				; 000000b7H
	lea	rcx, QWORD PTR $T60[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T36[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv599[rsp], rcx
	lea	rdx, QWORD PTR $T37[rsp]
	lea	rdi, QWORD PTR $T36[rsp]
	mov	QWORD PTR tv905[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv905[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50666
	mov	rcx, QWORD PTR tv599[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T37[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 73
	mov	ecx, 22
	call	?fib@@YAHH@Z				; fib
	mov	DWORD PTR c$[rsp], eax
; Line 74
	lea	rax, OFFSET FLAT:$SG50671
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 74					; 0000004aH
	lea	r8, OFFSET FLAT:$SG50672
	mov	edx, 184				; 000000b8H
	lea	rcx, QWORD PTR $T61[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T38[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, DWORD PTR retr$[rsp+16]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR c$[rsp]
	lea	r8, OFFSET FLAT:$SG50669
	lea	rdx, OFFSET FLAT:$SG50670
	lea	rcx, QWORD PTR $T39[rsp]
	call	cctrace_
; Line 75
	lea	rax, OFFSET FLAT:$SG50674
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 75					; 0000004bH
	lea	r8, OFFSET FLAT:$SG50675
	mov	edx, 185				; 000000b9H
	lea	rcx, QWORD PTR $T62[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T40[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv597[rsp], rcx
	lea	rdx, QWORD PTR $T41[rsp]
	lea	rdi, QWORD PTR $T40[rsp]
	mov	QWORD PTR tv928[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv928[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50673
	mov	rcx, QWORD PTR tv597[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T41[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 125
	lea	rax, OFFSET FLAT:$SG50677
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 125				; 0000007dH
	lea	r8, OFFSET FLAT:$SG50678
	mov	edx, 186				; 000000baH
	lea	rcx, QWORD PTR $T63[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T42[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv595[rsp], rcx
	lea	rdx, QWORD PTR $T43[rsp]
	lea	rdi, QWORD PTR $T42[rsp]
	mov	QWORD PTR tv940[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv940[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50676
	mov	rcx, QWORD PTR tv595[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T43[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 126
	call	ccdebugend
; Line 127
	xor	eax, eax
	add	rsp, 2504				; 000009c8H
	pop	rdi
	pop	rsi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 32
l$2 = 36
x$ = 64
?fib@@YAHH@Z PROC					; fib
; File W:\cpp\void\cc\test.c
; Line 6
$LN4:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	cmp	DWORD PTR x$[rsp], 2
	jl	SHORT $LN2@fib
; Line 7
	mov	eax, DWORD PTR x$[rsp]
	sub	eax, 2
	mov	ecx, eax
	call	?fib@@YAHH@Z				; fib
	mov	DWORD PTR l$2[rsp], eax
; Line 8
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	ecx, eax
	call	?fib@@YAHH@Z				; fib
	mov	DWORD PTR r$1[rsp], eax
; Line 9
	mov	eax, DWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR l$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	jmp	SHORT $LN1@fib
$LN2@fib:
; Line 11
	mov	eax, DWORD PTR x$[rsp]
$LN1@fib:
; Line 12
	add	rsp, 56					; 00000038H
	ret	0
?fib@@YAHH@Z ENDP					; fib
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
fix$2 = 40
out$ = 64
t$ = 72
emit_type PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 324
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 325
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 2
	jne	$LN5@emit_type
; Line 327
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR i$1[rsp], eax
	jmp	SHORT $LN4@emit_type
$LN2@emit_type:
	mov	eax, DWORD PTR i$1[rsp]
	shl	eax, 1
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_type:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN3@emit_type
; Line 329
	mov	edx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	gen_fixtype
	mov	QWORD PTR fix$2[rsp], rax
; Line 331
	mov	edx, 2
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 332
	mov	edx, 3
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 333
	mov	edx, 4
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 334
	jmp	$LN2@emit_type
$LN3@emit_type:
$LN5@emit_type:
; Line 337
	add	rsp, 56					; 00000038H
	ret	0
emit_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
out$ = 64
t$ = 72
emit_vectype PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 291
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 292
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	$LN5@emit_vecty
; Line 293
	lea	rdx, OFFSET FLAT:$SG50552
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 294
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 295
	lea	rdx, OFFSET FLAT:$SG50553
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 296
	lea	rdx, OFFSET FLAT:$SG50554
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 297
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_vecty
$LN2@emit_vecty:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_vecty:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_vecty
; Line 298
	lea	rdx, OFFSET FLAT:$SG50555
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 299
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	rax, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 300
	lea	rdx, OFFSET FLAT:$SG50556
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 301
	jmp	SHORT $LN2@emit_vecty
$LN3@emit_vecty:
; Line 302
	lea	rdx, OFFSET FLAT:$SG50557
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 303
	lea	rdx, OFFSET FLAT:$SG50558
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 304
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 305
	lea	rdx, OFFSET FLAT:$SG50559
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN5@emit_vecty:
; Line 308
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	genmake
; Line 309
	lea	r8, OFFSET FLAT:$SG50560
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG50561
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 310
	lea	r8, OFFSET FLAT:$SG50562
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG50563
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 311
	lea	r8, OFFSET FLAT:$SG50564
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG50565
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 312
	lea	r8, OFFSET FLAT:$SG50566
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG50567
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 321
	add	rsp, 56					; 00000038H
	ret	0
emit_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$ = 80
t$ = 88
opr$ = 96
emit_vecoprari PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 202
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 203
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r9, QWORD PTR opr$[rsp]
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG50533
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 205
	mov	rcx, QWORD PTR opr$[rsp]
	call	strlen
	cmp	rax, 2
	jne	SHORT $LN5@emit_vecop
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR opr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN5@emit_vecop
; Line 207
	mov	r9b, 97					; 00000061H
	mov	r8d, 6
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl_ex
; Line 208
	jmp	SHORT $LN6@emit_vecop
$LN5@emit_vecop:
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
$LN6@emit_vecop:
; Line 213
	lea	rdx, OFFSET FLAT:$SG50536
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:$SG50537
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:$SG50538
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:$SG50539
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 222
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_vecop
$LN2@emit_vecop:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_vecop:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_vecop
; Line 223
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR opr$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR i$1[rsp]
	lea	r8, OFFSET FLAT:fn
	movsx	edx, BYTE PTR [r8+rdx]
	movsxd	r8, DWORD PTR i$1[rsp]
	lea	r9, OFFSET FLAT:fn
	movsx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	lea	rdx, OFFSET FLAT:$SG50540
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 224
	jmp	SHORT $LN2@emit_vecop
$LN3@emit_vecop:
; Line 225
	lea	rdx, OFFSET FLAT:$SG50541
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:$SG50542
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 227
	add	rsp, 72					; 00000048H
	ret	0
emit_vecoprari ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$ = 80
t$ = 88
genmake	PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 183
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 184
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG50517
	call	ccformat
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	r8d, DWORD PTR [rax+20]
	mov	rax, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_fundecl
; Line 187
	lea	rdx, OFFSET FLAT:$SG50518
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 188
	lea	rdx, OFFSET FLAT:$SG50519
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 190
	mov	r8b, 114				; 00000072H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 191
	lea	rdx, OFFSET FLAT:$SG50520
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 193
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@genmake
$LN2@genmake:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@genmake:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@genmake
; Line 194
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movsx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$1[rsp]
	lea	rdx, OFFSET FLAT:fn
	movsx	ecx, BYTE PTR [rdx+rcx]
	mov	r9d, eax
	mov	r8d, ecx
	lea	rdx, OFFSET FLAT:$SG50521
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 195
	jmp	SHORT $LN2@genmake
$LN3@genmake:
; Line 197
	lea	rdx, OFFSET FLAT:$SG50522
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 198
	lea	rdx, OFFSET FLAT:$SG50523
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 199
	add	rsp, 72					; 00000048H
	ret	0
genmake	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
out$ = 64
t$ = 72
l$ = 80
r$ = 88
n$ = 96
emit_fundecl PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 163
$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 164
	lea	rdx, OFFSET FLAT:$SG50500
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 165
	cmp	QWORD PTR r$[rsp], 0
	je	SHORT $LN5@emit_funde
; Line 166
	mov	rdx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 167
	jmp	SHORT $LN6@emit_funde
$LN5@emit_funde:
; Line 168
	lea	rdx, OFFSET FLAT:$SG50503
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN6@emit_funde:
; Line 170
	mov	r8, QWORD PTR n$[rsp]
	lea	rdx, OFFSET FLAT:$SG50504
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:$SG50505
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 173
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_funde
$LN2@emit_funde:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_funde:
	mov	eax, DWORD PTR l$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_funde
; Line 174
	cmp	DWORD PTR i$1[rsp], 0
	je	SHORT $LN7@emit_funde
	lea	rdx, OFFSET FLAT:$SG50507
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN7@emit_funde:
; Line 175
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 176
	jmp	SHORT $LN2@emit_funde
$LN3@emit_funde:
; Line 177
	lea	rdx, OFFSET FLAT:$SG50508
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 179
	add	rsp, 56					; 00000038H
	ret	0
emit_fundecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
name$ = 64
emit_vardecl PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 158
$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 159
	movzx	r9d, BYTE PTR name$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl_ex
; Line 160
	add	rsp, 40					; 00000028H
	ret	0
emit_vardecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
override_modifier$ = 64
name$ = 72
emit_vardecl_ex PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 126
$LN19:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 127
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG50472
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 129
	cmp	DWORD PTR override_modifier$[rsp], 5
	je	SHORT $LN10@emit_varde
	cmp	DWORD PTR override_modifier$[rsp], 6
	jne	SHORT $LN8@emit_varde
$LN10@emit_varde:
; Line 132
	mov	edx, DWORD PTR override_modifier$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 133
	jmp	SHORT $LN9@emit_varde
$LN8@emit_varde:
$LN2@emit_varde:
; Line 135
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 5
	je	SHORT $LN13@emit_varde
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 6
	jne	SHORT $LN11@emit_varde
$LN13@emit_varde:
; Line 138
	mov	rax, QWORD PTR t$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 139
	jmp	SHORT $LN12@emit_varde
$LN11@emit_varde:
	jmp	SHORT $LN3@emit_varde
$LN12@emit_varde:
; Line 140
	jmp	SHORT $LN2@emit_varde
$LN3@emit_varde:
$LN9@emit_varde:
; Line 142
	movsx	eax, BYTE PTR name$[rsp]
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:$SG50479
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 144
	cmp	DWORD PTR override_modifier$[rsp], 7
	jne	SHORT $LN14@emit_varde
; Line 146
	mov	edx, DWORD PTR override_modifier$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 147
	jmp	SHORT $LN15@emit_varde
$LN14@emit_varde:
$LN5@emit_varde:
; Line 150
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 7
	jne	SHORT $LN16@emit_varde
; Line 152
	mov	rax, QWORD PTR t$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 153
	jmp	SHORT $LN17@emit_varde
$LN16@emit_varde:
	jmp	SHORT $LN6@emit_varde
$LN17@emit_varde:
; Line 154
	jmp	SHORT $LN5@emit_varde
$LN6@emit_varde:
$LN15@emit_varde:
; Line 155
	add	rsp, 40					; 00000028H
	ret	0
emit_vardecl_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
modifier$ = 56
emit_modifier PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 119
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 120
	cmp	DWORD PTR modifier$[rsp], 5
	jne	SHORT $LN2@emit_modif
	lea	rdx, OFFSET FLAT:$SG50455
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN2@emit_modif:
; Line 121
	cmp	DWORD PTR modifier$[rsp], 6
	jne	SHORT $LN3@emit_modif
	lea	rdx, OFFSET FLAT:$SG50457
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN3@emit_modif:
; Line 122
	cmp	DWORD PTR modifier$[rsp], 7
	jne	SHORT $LN4@emit_modif
	lea	rdx, OFFSET FLAT:$SG50459
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN4@emit_modif:
; Line 123
	add	rsp, 40					; 00000028H
	ret	0
emit_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
emit_typename PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 114
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 115
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG50449
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 116
	add	rsp, 40					; 00000028H
	ret	0
emit_typename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 48
gen_typename PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 107
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename_ex
; Line 110
	lea	rax, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
; Line 111
	add	rsp, 40					; 00000028H
	ret	0
gen_typename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$1 = 48
t$ = 80
buf$ = 88
len$ = 96
gen_typename_ex PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 87
$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 88
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN2@gen_typena
; Line 90
	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:pf
	movsx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	lea	r8, OFFSET FLAT:$SG50433
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatex
	jmp	$LN1@gen_typena
; Line 91
	jmp	$LN3@gen_typena
$LN2@gen_typena:
; Line 92
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN4@gen_typena
; Line 94
	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:pf
	movsx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	lea	r8, OFFSET FLAT:$SG50436
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatex
	jmp	SHORT $LN1@gen_typena
; Line 95
	jmp	SHORT $LN5@gen_typena
$LN4@gen_typena:
; Line 96
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN6@gen_typena
; Line 98
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	gen_typename_ex
	mov	DWORD PTR p$1[rsp], eax
; Line 99
	mov	eax, DWORD PTR p$1[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$1[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR t$[rsp]
	mov	r9d, DWORD PTR [rdx+20]
	lea	r8, OFFSET FLAT:$SG50439
	mov	edx, eax
	call	ccformatex
	jmp	SHORT $LN1@gen_typena
; Line 100
	jmp	SHORT $LN7@gen_typena
$LN6@gen_typena:
; Line 102
	xor	eax, eax
$LN7@gen_typena:
$LN5@gen_typena:
$LN3@gen_typena:
$LN1@gen_typena:
; Line 104
	add	rsp, 72					; 00000048H
	ret	0
gen_typename_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
d$ = 64
b$ = 72
gen_fixtype PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 72
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 73
	mov	ecx, 3
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 75
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 76
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 78
	mov	rax, QWORD PTR type$[rsp]
; Line 79
	add	rsp, 56					; 00000038H
	ret	0
gen_fixtype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
d$ = 64
i$ = 72
a$ = 80
gen_vartype PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 61
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 62
	mov	ecx, 2
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 64
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 65
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 66
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 68
	mov	rax, QWORD PTR type$[rsp]
; Line 69
	add	rsp, 56					; 00000038H
	ret	0
gen_vartype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
t$ = 64
gen_ptrtype PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 52
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 53
	mov	ecx, 5
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 55
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 57
	mov	rax, QWORD PTR type$[rsp]
; Line 58
	add	rsp, 56					; 00000038H
	ret	0
gen_ptrtype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
t$ = 64
length$ = 72
gen_vectype PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 42
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 43
	mov	ecx, 4
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 45
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 46
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR length$[rsp]
	mov	DWORD PTR [rax+20], ecx
; Line 48
	mov	rax, QWORD PTR type$[rsp]
; Line 49
	add	rsp, 56					; 00000038H
	ret	0
gen_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
k$ = 192
gen_type PROC
; File W:\cpp\void\cc\ccemit-c.c
; Line 32
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 33
	lea	rax, OFFSET FLAT:$SG50395
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 33					; 00000021H
	lea	r8, OFFSET FLAT:$SG50396
	mov	edx, 166				; 000000a6H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR type$[rsp], rax
; Line 35
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 36
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 38
	mov	rax, QWORD PTR type$[rsp]
; Line 39
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
gen_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
exec$ = 176
ccexec_uninit PROC
; File W:\cpp\void\cc\ccexec.c
; Line 463
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 464
	lea	rax, OFFSET FLAT:$SG50352
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 464				; 000001d0H
	lea	r8, OFFSET FLAT:$SG50353
	mov	edx, 165				; 000000a5H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR exec$[rsp]
	mov	r8, QWORD PTR [rax+8]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 465
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
ccexec_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stack_size$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
exec$ = 192
ccexec_init PROC
; File W:\cpp\void\cc\ccexec.c
; Line 450
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR exec$[rsp]
	call	memset
; Line 452
	mov	QWORD PTR stack_size$[rsp], 10485760	; 00a00000H
; Line 454
	lea	rax, OFFSET FLAT:$SG50346
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 454				; 000001c6H
	lea	r8, OFFSET FLAT:$SG50347
	mov	edx, 164				; 000000a4H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	rdx, QWORD PTR stack_size$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	rcx, QWORD PTR exec$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 455
	mov	rax, QWORD PTR exec$[rsp]
	mov	rcx, QWORD PTR stack_size$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 456
	mov	rax, QWORD PTR exec$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 458
	mov	eax, 1
; Line 459
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccexec_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
args$ = 48
tv83 = 56
$T1 = 64
ret$ = 88
$T2 = 112
__$ReturnAddress$ = 176
exec$ = 184
emit$ = 192
ccexec_translation_unit PROC
; File W:\cpp\void\cc\ccexec.c
; Line 436
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
; Line 437
	mov	rax, QWORD PTR exec$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 439
	mov	QWORD PTR args$[rsp], 0
; Line 440
	lea	r8, OFFSET FLAT:$SG50339
	mov	edx, 22
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 24
	lea	rcx, QWORD PTR args$[rsp]
	call	ccdlb_arradd
	imul	rax, rax, 24
	mov	rcx, QWORD PTR args$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
; Line 443
	cmp	QWORD PTR args$[rsp], 0
	je	SHORT $LN3@ccexec_tra
	xor	edx, edx
	mov	rax, QWORD PTR args$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 24
	div	rcx
	mov	QWORD PTR tv83[rsp], rax
	jmp	SHORT $LN4@ccexec_tra
$LN3@ccexec_tra:
	mov	QWORD PTR tv83[rsp], 0
$LN4@ccexec_tra:
	mov	rax, QWORD PTR args$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR tv83[rsp]
	lea	r8, QWORD PTR ret$[rsp]
	mov	rax, QWORD PTR emit$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccexec_invoke
; Line 445
	lea	rax, QWORD PTR ret$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 446
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
ccexec_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
edict$ = 48
rlen$1 = 56
tv136 = 60
result$ = 64
list$2 = 72
memory$3 = 80
memory$4 = 88
saved$5 = 96
setr$6 = 104
rvalue$7 = 112
tv900 = 120
tv918 = 128
rval$8 = 136
tv1187 = 144
tv1101 = 152
tv1214 = 160
tv1098 = 168
tv1230 = 176
tv1096 = 184
tv1242 = 192
tv1094 = 200
tv1254 = 208
tv1092 = 216
tv1266 = 224
tv1090 = 232
lvalue$9 = 240
rvalue$10 = 248
saved$11 = 256
tv1311 = 264
tv1088 = 272
tv1323 = 280
tv1086 = 288
lvalue$12 = 296
saved$13 = 304
tv1374 = 312
tv1084 = 320
tv1386 = 328
tv1082 = 336
tv1427 = 344
tv1080 = 352
tv1439 = 360
tv1078 = 368
saved$14 = 376
tv1490 = 384
tv1076 = 392
tv1508 = 400
tv1074 = 408
tv1536 = 416
tv1072 = 424
tv1548 = 432
tv1070 = 440
tv1577 = 448
tv1068 = 456
tv1589 = 464
tv1066 = 472
saved$15 = 480
tv1610 = 488
tv1064 = 496
tv1622 = 504
tv1062 = 512
ret$16 = 520
tv1662 = 528
tv1057 = 536
tv1690 = 544
tv1055 = 552
rval$17 = 560
rval$18 = 584
$T19 = 608
$T20 = 632
$T21 = 656
lval$22 = 680
rval$23 = 704
$T24 = 728
$T25 = 752
$T26 = 776
lval$27 = 800
$T28 = 824
$T29 = 848
$T30 = 872
lval$31 = 896
$T32 = 920
$T33 = 944
rval$34 = 968
lval$35 = 992
$T36 = 1024
$T37 = 1056
$T38 = 1088
$T39 = 1112
rval$40 = 1136
$T41 = 1160
rval$42 = 1184
$T43 = 1208
$T44 = 1232
$T45 = 1256
rval$46 = 1280
$T47 = 1312
$T48 = 1344
$T49 = 1376
$T50 = 1408
$T51 = 1440
$T52 = 1472
$T53 = 1504
$T54 = 1536
$T55 = 1568
$T56 = 1600
$T57 = 1632
$T58 = 1664
$T59 = 1696
$T60 = 1728
$T61 = 1760
$T62 = 1792
$T63 = 1824
$T64 = 1856
$T65 = 1888
$T66 = 1920
$T67 = 1952
$T68 = 1984
$T69 = 2016
$T70 = 2048
$T71 = 2080
$T72 = 2112
$T73 = 2144
$T74 = 2176
$T75 = 2208
$T76 = 2240
$T77 = 2272
$T78 = 2304
$T79 = 2336
$T80 = 2368
$T81 = 2400
$T82 = 2432
$T83 = 2464
$T84 = 2496
$T85 = 2528
$T86 = 2560
$T87 = 2592
$T88 = 2624
$T89 = 2656
$T90 = 2688
$T91 = 2720
$T92 = 2744
$T93 = 2768
$T94 = 2792
$T95 = 2816
$T96 = 2840
$T97 = 2864
$T98 = 2888
$T99 = 2912
$T100 = 2936
$T101 = 2960
$T102 = 2984
$T103 = 3008
$T104 = 3032
$T105 = 3056
$T106 = 3080
$T107 = 3104
$T108 = 3128
$T109 = 3152
$T110 = 3176
$T111 = 3208
$T112 = 3240
$T113 = 3272
$T114 = 3304
$T115 = 3336
$T116 = 3368
$T117 = 3400
$T118 = 3432
$T119 = 3464
$T120 = 3496
$T121 = 3528
$T122 = 3560
$T123 = 3592
$T124 = 3624
$T125 = 3656
$T126 = 3688
$T127 = 3720
$T128 = 3752
$T129 = 3784
$T130 = 3816
$T131 = 3848
exec$ = 3920
stack$ = 3928
value$ = 3936
ccexec_edict PROC
; File W:\cpp\void\cc\ccexec.c
; Line 180
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 3896				; 00000f38H
; Line 181
	lea	rax, OFFSET FLAT:$SG50173
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 181				; 000000b5H
	lea	r8, OFFSET FLAT:$SG50174
	mov	edx, 138				; 0000008aH
	lea	rcx, QWORD PTR $T110[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T66[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1101[rsp], rcx
	lea	rdx, QWORD PTR $T47[rsp]
	lea	rdi, QWORD PTR $T66[rsp]
	mov	QWORD PTR tv1187[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1187[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50172
	mov	rcx, QWORD PTR tv1101[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T47[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 184
	mov	eax, OFFSET FLAT:_Init_thread_epoch
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	cmp	DWORD PTR ?$TSS0@?1??ccexec_edict@@9@4HA, eax
	jle	SHORT $LN2@ccexec_edi
	lea	rcx, OFFSET FLAT:?$TSS0@?1??ccexec_edict@@9@4HA
	call	_Init_thread_header
	cmp	DWORD PTR ?$TSS0@?1??ccexec_edict@@9@4HA, -1
	jne	SHORT $LN2@ccexec_edi
	lea	r8, OFFSET FLAT:$SG50175
	xor	edx, edx
	lea	rcx, QWORD PTR $T108[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, OFFSET FLAT:?$TSS0@?1??ccexec_edict@@9@4HA
	call	_Init_thread_footer
$LN2@ccexec_edi:
; Line 186
	mov	rax, QWORD PTR value$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR edict$[rsp], rax
; Line 188
	mov	DWORD PTR result$[rsp], 1
; Line 189
	mov	rax, QWORD PTR edict$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv136[rsp], eax
	cmp	DWORD PTR tv136[rsp], 13
	ja	$LN30@ccexec_edi
	movsxd	rax, DWORD PTR tv136[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN50@ccexec_edi[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN8@ccexec_edi:
; Line 194
	lea	rax, OFFSET FLAT:$SG50178
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 194				; 000000c2H
	lea	r8, OFFSET FLAT:$SG50179
	mov	edx, 139				; 0000008bH
	lea	rcx, QWORD PTR $T111[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T68[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1098[rsp], rcx
	lea	rdx, QWORD PTR $T69[rsp]
	lea	rdi, QWORD PTR $T68[rsp]
	mov	QWORD PTR tv1214[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1214[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50177
	mov	rcx, QWORD PTR tv1098[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T69[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 195
	mov	r8, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T109[rsp]
	call	ccstack_yield
	lea	rcx, QWORD PTR $T91[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 196
	lea	rax, OFFSET FLAT:$SG50181
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 196				; 000000c4H
	lea	r8, OFFSET FLAT:$SG50182
	mov	edx, 140				; 0000008cH
	lea	rcx, QWORD PTR $T112[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T70[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1096[rsp], rcx
	lea	rdx, QWORD PTR $T48[rsp]
	lea	rdi, QWORD PTR $T70[rsp]
	mov	QWORD PTR tv1230[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1230[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50180
	mov	rcx, QWORD PTR tv1096[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T48[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 197
	jmp	$LN3@ccexec_edi
$LN9@ccexec_edi:
; Line 200
	lea	rax, OFFSET FLAT:$SG50185
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 200				; 000000c8H
	lea	r8, OFFSET FLAT:$SG50186
	mov	edx, 141				; 0000008dH
	lea	rcx, QWORD PTR $T113[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T49[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1094[rsp], rcx
	lea	rdx, QWORD PTR $T50[rsp]
	lea	rdi, QWORD PTR $T49[rsp]
	mov	QWORD PTR tv1242[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1242[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50184
	mov	rcx, QWORD PTR tv1094[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T50[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 201
	mov	r8, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccstack_local_alloc
; Line 202
	lea	rax, OFFSET FLAT:$SG50188
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 202				; 000000caH
	lea	r8, OFFSET FLAT:$SG50189
	mov	edx, 142				; 0000008eH
	lea	rcx, QWORD PTR $T114[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T51[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1092[rsp], rcx
	lea	rdx, QWORD PTR $T52[rsp]
	lea	rdi, QWORD PTR $T51[rsp]
	mov	QWORD PTR tv1254[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1254[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50187
	mov	rcx, QWORD PTR tv1092[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T52[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 203
	jmp	$LN3@ccexec_edi
$LN10@ccexec_edi:
; Line 206
	lea	rax, OFFSET FLAT:$SG50192
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 206				; 000000ceH
	lea	r8, OFFSET FLAT:$SG50193
	mov	edx, 143				; 0000008fH
	lea	rcx, QWORD PTR $T115[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T53[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1090[rsp], rcx
	lea	rdx, QWORD PTR $T54[rsp]
	lea	rdi, QWORD PTR $T53[rsp]
	mov	QWORD PTR tv1266[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1266[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50191
	mov	rcx, QWORD PTR tv1090[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T54[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 208
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR lvalue$9[rsp], rax
; Line 209
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR rvalue$10[rsp], rax
; Line 212
	mov	r8, QWORD PTR lvalue$9[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T92[rsp]
	call	ccstack_yield_lvalue
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR lval$22[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 213
	mov	r8, QWORD PTR rvalue$10[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T93[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$23[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 215
	mov	rax, QWORD PTR lval$22[rsp+16]
	mov	QWORD PTR memory$3[rsp], rax
; Line 216
	mov	rax, QWORD PTR memory$3[rsp]
	mov	rcx, QWORD PTR rval$23[rsp+16]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR memory$3[rsp], rax
; Line 218
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$11[rsp], rax
; Line 219
	lea	r8, OFFSET FLAT:$SG50194
	mov	rdx, QWORD PTR memory$3[rsp]
	lea	rcx, QWORD PTR $T94[rsp]
	call	ccexec_lvalue
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T24[rsp]
	mov	rdi, QWORD PTR saved$11[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 221
	lea	rax, OFFSET FLAT:$SG50196
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 221				; 000000ddH
	lea	r8, OFFSET FLAT:$SG50197
	mov	edx, 144				; 00000090H
	lea	rcx, QWORD PTR $T116[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T55[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1088[rsp], rcx
	lea	rdx, QWORD PTR $T56[rsp]
	lea	rdi, QWORD PTR $T55[rsp]
	mov	QWORD PTR tv1311[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1311[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50195
	mov	rcx, QWORD PTR tv1088[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T56[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 222
	jmp	$LN3@ccexec_edi
$LN11@ccexec_edi:
; Line 225
	lea	rax, OFFSET FLAT:$SG50200
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 225				; 000000e1H
	lea	r8, OFFSET FLAT:$SG50201
	mov	edx, 145				; 00000091H
	lea	rcx, QWORD PTR $T117[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T58[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1086[rsp], rcx
	lea	rdx, QWORD PTR $T59[rsp]
	lea	rdi, QWORD PTR $T58[rsp]
	mov	QWORD PTR tv1323[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1323[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50199
	mov	rcx, QWORD PTR tv1086[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T59[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 227
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR lvalue$12[rsp], rax
; Line 228
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR rvalue$7[rsp], rax
; Line 231
	mov	r8, QWORD PTR lvalue$12[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T95[rsp]
	call	ccstack_yield_lvalue
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR lval$27[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 233
	cmp	QWORD PTR rvalue$7[rsp], 0
	je	SHORT $LN12@ccexec_edi
; Line 234
	mov	r8, QWORD PTR rvalue$7[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T96[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$18[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	jmp	SHORT $LN13@ccexec_edi
$LN12@ccexec_edi:
; Line 236
	lea	rax, QWORD PTR rval$18[rsp]
	lea	rcx, OFFSET FLAT:?zro@?1??ccexec_edict@@9@4Uccexec_value_t@@A
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
$LN13@ccexec_edi:
; Line 238
	mov	rax, QWORD PTR lval$27[rsp+16]
	mov	QWORD PTR memory$4[rsp], rax
; Line 239
	mov	rax, QWORD PTR memory$4[rsp]
	mov	rcx, QWORD PTR rval$18[rsp+16]
	lea	rax, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR memory$4[rsp], rax
; Line 241
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$13[rsp], rax
; Line 242
	lea	r8, OFFSET FLAT:$SG50204
	mov	rax, QWORD PTR memory$4[rsp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, QWORD PTR $T97[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T28[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T28[rsp]
	mov	rdi, QWORD PTR saved$13[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 243
	lea	rax, OFFSET FLAT:$SG50206
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 243				; 000000f3H
	lea	r8, OFFSET FLAT:$SG50207
	mov	edx, 146				; 00000092H
	lea	rcx, QWORD PTR $T118[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T60[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1084[rsp], rcx
	lea	rdx, QWORD PTR $T61[rsp]
	lea	rdi, QWORD PTR $T60[rsp]
	mov	QWORD PTR tv1374[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1374[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50205
	mov	rcx, QWORD PTR tv1084[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T61[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 244
	jmp	$LN3@ccexec_edi
$LN14@ccexec_edi:
; Line 247
	lea	rax, OFFSET FLAT:$SG50210
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 247				; 000000f7H
	lea	r8, OFFSET FLAT:$SG50211
	mov	edx, 147				; 00000093H
	lea	rcx, QWORD PTR $T119[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T62[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1082[rsp], rcx
	lea	rdx, QWORD PTR $T63[rsp]
	lea	rdi, QWORD PTR $T62[rsp]
	mov	QWORD PTR tv1386[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1386[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50209
	mov	rcx, QWORD PTR tv1082[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T63[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 250
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN32@ccexec_edi
	int	3
$LN32@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+48]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T98[rsp]
	call	ccstack_yield_lvalue
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR lval$31[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 251
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+56], 0
	jne	SHORT $LN34@ccexec_edi
	int	3
$LN34@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+56]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T107[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T30[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$17[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 254
	mov	rax, QWORD PTR lval$31[rsp+16]
	mov	rcx, QWORD PTR rval$17[rsp+16]
	mov	QWORD PTR [rax], rcx
; Line 256
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$5[rsp], rax
; Line 257
	mov	rax, QWORD PTR saved$5[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 258
	mov	rax, QWORD PTR saved$5[rsp]
	mov	rcx, QWORD PTR rval$17[rsp+16]
	mov	QWORD PTR [rax+16], rcx
; Line 259
	mov	rax, QWORD PTR saved$5[rsp]
	mov	rcx, QWORD PTR rval$17[rsp]
	mov	QWORD PTR [rax], rcx
; Line 261
	lea	rax, OFFSET FLAT:$SG50213
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 261				; 00000105H
	lea	r8, OFFSET FLAT:$SG50214
	mov	edx, 148				; 00000094H
	lea	rcx, QWORD PTR $T120[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T64[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1080[rsp], rcx
	lea	rdx, QWORD PTR $T65[rsp]
	lea	rdi, QWORD PTR $T64[rsp]
	mov	QWORD PTR tv1427[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1427[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50212
	mov	rcx, QWORD PTR tv1080[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T65[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 262
	jmp	$LN3@ccexec_edi
$LN15@ccexec_edi:
; Line 265
	lea	rax, OFFSET FLAT:$SG50217
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 265				; 00000109H
	lea	r8, OFFSET FLAT:$SG50218
	mov	edx, 149				; 00000095H
	lea	rcx, QWORD PTR $T121[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T67[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1078[rsp], rcx
	lea	rdx, QWORD PTR $T57[rsp]
	lea	rdi, QWORD PTR $T67[rsp]
	mov	QWORD PTR tv1439[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1439[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50216
	mov	rcx, QWORD PTR tv1078[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T57[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 267
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+168]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T99[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T32[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR lval$35[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 268
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+176]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T100[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$34[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 270
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$14[rsp], rax
; Line 271
	lea	rax, QWORD PTR $T36[rsp]
	lea	rcx, QWORD PTR rval$34[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T37[rsp]
	lea	rcx, QWORD PTR lval$35[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, QWORD PTR $T36[rsp]
	lea	r8, QWORD PTR $T37[rsp]
	mov	rax, QWORD PTR edict$[rsp]
	mov	edx, DWORD PTR [rax+160]
	lea	rcx, QWORD PTR $T101[rsp]
	call	ccexec_edict_arith
	lea	rcx, QWORD PTR $T38[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T38[rsp]
	mov	rdi, QWORD PTR saved$14[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 272
	lea	rax, OFFSET FLAT:$SG50220
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 272				; 00000110H
	lea	r8, OFFSET FLAT:$SG50221
	mov	edx, 150				; 00000096H
	lea	rcx, QWORD PTR $T122[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T71[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1076[rsp], rcx
	lea	rdx, QWORD PTR $T72[rsp]
	lea	rdi, QWORD PTR $T71[rsp]
	mov	QWORD PTR tv1490[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1490[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50219
	mov	rcx, QWORD PTR tv1076[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T72[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 273
	jmp	$LN3@ccexec_edi
$LN16@ccexec_edi:
; Line 275
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	mov	QWORD PTR [rax+8], rcx
; Line 276
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	mov	DWORD PTR [rax+16], ecx
; Line 277
	jmp	$LN3@ccexec_edi
$LN17@ccexec_edi:
; Line 280
	lea	rax, OFFSET FLAT:$SG50225
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 280				; 00000118H
	lea	r8, OFFSET FLAT:$SG50226
	mov	edx, 151				; 00000097H
	lea	rcx, QWORD PTR $T123[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T73[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1074[rsp], rcx
	lea	rdx, QWORD PTR $T74[rsp]
	lea	rdi, QWORD PTR $T73[rsp]
	mov	QWORD PTR tv1508[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1508[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50224
	mov	rcx, QWORD PTR tv1074[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T74[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 282
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+120]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T102[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T39[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$40[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 283
	cmp	DWORD PTR rval$40[rsp+16], 0
	jne	SHORT $LN18@ccexec_edi
; Line 284
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	mov	QWORD PTR [rax+8], rcx
; Line 285
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	mov	DWORD PTR [rax+16], ecx
$LN18@ccexec_edi:
; Line 287
	lea	rax, OFFSET FLAT:$SG50229
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 287				; 0000011fH
	lea	r8, OFFSET FLAT:$SG50230
	mov	edx, 152				; 00000098H
	lea	rcx, QWORD PTR $T124[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T75[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1072[rsp], rcx
	lea	rdx, QWORD PTR $T76[rsp]
	lea	rdi, QWORD PTR $T75[rsp]
	mov	QWORD PTR tv1536[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1536[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50228
	mov	rcx, QWORD PTR tv1072[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T76[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 288
	jmp	$LN3@ccexec_edi
$LN19@ccexec_edi:
; Line 291
	lea	rax, OFFSET FLAT:$SG50233
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 291				; 00000123H
	lea	r8, OFFSET FLAT:$SG50234
	mov	edx, 153				; 00000099H
	lea	rcx, QWORD PTR $T125[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T77[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1070[rsp], rcx
	lea	rdx, QWORD PTR $T78[rsp]
	lea	rdi, QWORD PTR $T77[rsp]
	mov	QWORD PTR tv1548[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1548[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50232
	mov	rcx, QWORD PTR tv1070[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T78[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 293
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+120], 0
	jne	SHORT $LN36@ccexec_edi
	int	3
$LN36@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+120]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T103[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T41[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$42[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 294
	cmp	DWORD PTR rval$42[rsp+16], 0
	je	SHORT $LN20@ccexec_edi
; Line 295
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR [rcx+104]
	mov	QWORD PTR [rax+8], rcx
; Line 296
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	mov	DWORD PTR [rax+16], ecx
$LN20@ccexec_edi:
; Line 298
	lea	rax, OFFSET FLAT:$SG50237
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 298				; 0000012aH
	lea	r8, OFFSET FLAT:$SG50238
	mov	edx, 154				; 0000009aH
	lea	rcx, QWORD PTR $T126[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T79[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1068[rsp], rcx
	lea	rdx, QWORD PTR $T80[rsp]
	lea	rdi, QWORD PTR $T79[rsp]
	mov	QWORD PTR tv1577[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1577[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50236
	mov	rcx, QWORD PTR tv1068[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T80[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 299
	jmp	$LN3@ccexec_edi
$LN21@ccexec_edi:
; Line 303
	lea	rax, OFFSET FLAT:$SG50241
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 303				; 0000012fH
	lea	r8, OFFSET FLAT:$SG50242
	mov	edx, 155				; 0000009bH
	lea	rcx, QWORD PTR $T127[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T81[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1066[rsp], rcx
	lea	rdx, QWORD PTR $T82[rsp]
	lea	rdi, QWORD PTR $T81[rsp]
	mov	QWORD PTR tv1589[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1589[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50240
	mov	rcx, QWORD PTR tv1066[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T82[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 304
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$15[rsp], rax
; Line 305
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+96]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T104[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T43[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T43[rsp]
	mov	rdi, QWORD PTR saved$15[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 306
	mov	DWORD PTR result$[rsp], 0
; Line 307
	lea	rax, OFFSET FLAT:$SG50244
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 307				; 00000133H
	lea	r8, OFFSET FLAT:$SG50245
	mov	edx, 156				; 0000009cH
	lea	rcx, QWORD PTR $T128[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T83[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1064[rsp], rcx
	lea	rdx, QWORD PTR $T84[rsp]
	lea	rdi, QWORD PTR $T83[rsp]
	mov	QWORD PTR tv1610[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1610[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50243
	mov	rcx, QWORD PTR tv1064[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T84[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 308
	jmp	$LN3@ccexec_edi
$LN22@ccexec_edi:
; Line 311
	lea	rax, OFFSET FLAT:$SG50248
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 311				; 00000137H
	lea	r8, OFFSET FLAT:$SG50249
	mov	edx, 157				; 0000009dH
	lea	rcx, QWORD PTR $T129[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T85[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1062[rsp], rcx
	lea	rdx, QWORD PTR $T86[rsp]
	lea	rdi, QWORD PTR $T85[rsp]
	mov	QWORD PTR tv1622[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1622[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50247
	mov	rcx, QWORD PTR tv1062[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T86[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 313
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN38@ccexec_edi
	int	3
$LN38@ccexec_edi:
; Line 322
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+88], 0
	je	SHORT $LN40@ccexec_edi
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+88]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv900[rsp], rax
	jmp	SHORT $LN41@ccexec_edi
$LN40@ccexec_edi:
	mov	QWORD PTR tv900[rsp], 0
$LN41@ccexec_edi:
	mov	eax, DWORD PTR tv900[rsp]
	mov	DWORD PTR rlen$1[rsp], eax
; Line 323
	mov	edx, DWORD PTR rlen$1[rsp]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccstack_push
	mov	QWORD PTR rval$8[rsp], rax
; Line 324
	mov	rax, QWORD PTR rval$8[rsp]
	mov	QWORD PTR setr$6[rsp], rax
; Line 325
	mov	QWORD PTR list$2[rsp], 0
; Line 326
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR list$2[rsp], rax
	jmp	SHORT $LN7@ccexec_edi
$LN5@ccexec_edi:
	mov	rax, QWORD PTR list$2[rsp]
	add	rax, 8
	mov	QWORD PTR list$2[rsp], rax
$LN7@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+88], 0
	je	SHORT $LN42@ccexec_edi
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+88]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv918[rsp], rax
	jmp	SHORT $LN43@ccexec_edi
$LN42@ccexec_edi:
	mov	QWORD PTR tv918[rsp], 0
$LN43@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rcx, QWORD PTR tv918[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR list$2[rsp], rax
	jae	SHORT $LN6@ccexec_edi
; Line 327
	mov	rax, QWORD PTR list$2[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T105[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T44[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T44[rsp]
	mov	rdi, QWORD PTR setr$6[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR setr$6[rsp]
	add	rax, 24
	mov	QWORD PTR setr$6[rsp], rax
	jmp	$LN5@ccexec_edi
$LN6@ccexec_edi:
; Line 330
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR ret$16[rsp], rax
; Line 331
	mov	rax, QWORD PTR rval$8[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR rlen$1[rsp]
	mov	r8, QWORD PTR ret$16[rsp]
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+80]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccexec_invoke
	test	eax, eax
	jne	SHORT $LN23@ccexec_edi
; Line 333
	lea	rax, OFFSET FLAT:$SG50251
	test	rax, rax
	je	SHORT $LN44@ccexec_edi
	int	3
$LN44@ccexec_edi:
$LN23@ccexec_edi:
; Line 335
	mov	edx, DWORD PTR rlen$1[rsp]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccstack_pull
; Line 336
	lea	rax, OFFSET FLAT:$SG50253
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 336				; 00000150H
	lea	r8, OFFSET FLAT:$SG50254
	mov	edx, 158				; 0000009eH
	lea	rcx, QWORD PTR $T130[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T87[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1057[rsp], rcx
	lea	rdx, QWORD PTR $T88[rsp]
	lea	rdi, QWORD PTR $T87[rsp]
	mov	QWORD PTR tv1662[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1662[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50252
	mov	rcx, QWORD PTR tv1057[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T88[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 337
	jmp	$LN3@ccexec_edi
$LN24@ccexec_edi:
; Line 341
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_enter
; Line 342
	jmp	$LN3@ccexec_edi
$LN25@ccexec_edi:
; Line 345
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+136], 0
	jne	SHORT $LN46@ccexec_edi
	int	3
$LN46@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+136]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T106[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T45[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$46[rsp]
	lea	rcx, QWORD PTR $T45[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 346
	cmp	DWORD PTR rval$46[rsp+16], 0
	je	SHORT $LN26@ccexec_edi
; Line 347
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+144], 0
	je	SHORT $LN28@ccexec_edi
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+144]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_enter
$LN28@ccexec_edi:
; Line 348
	jmp	SHORT $LN27@ccexec_edi
$LN26@ccexec_edi:
; Line 350
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+152], 0
	je	SHORT $LN29@ccexec_edi
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+152]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_enter
$LN29@ccexec_edi:
$LN27@ccexec_edi:
; Line 352
	jmp	SHORT $LN3@ccexec_edi
$LN30@ccexec_edi:
; Line 354
	lea	rax, OFFSET FLAT:$SG50262
	test	rax, rax
	je	SHORT $LN48@ccexec_edi
	int	3
$LN48@ccexec_edi:
$LN3@ccexec_edi:
; Line 357
	lea	rax, OFFSET FLAT:$SG50264
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 357				; 00000165H
	lea	r8, OFFSET FLAT:$SG50265
	mov	edx, 159				; 0000009fH
	lea	rcx, QWORD PTR $T131[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T89[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv1055[rsp], rcx
	lea	rdx, QWORD PTR $T90[rsp]
	lea	rdi, QWORD PTR $T89[rsp]
	mov	QWORD PTR tv1690[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1690[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50263
	mov	rcx, QWORD PTR tv1055[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T90[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 358
	mov	eax, DWORD PTR result$[rsp]
; Line 359
	add	rsp, 3896				; 00000f38H
	pop	rdi
	pop	rsi
	ret	0
	npad	3
$LN50@ccexec_edi:
	DD	$LN9@ccexec_edi
	DD	$LN8@ccexec_edi
	DD	$LN10@ccexec_edi
	DD	$LN14@ccexec_edi
	DD	$LN11@ccexec_edi
	DD	$LN15@ccexec_edi
	DD	$LN16@ccexec_edi
	DD	$LN19@ccexec_edi
	DD	$LN17@ccexec_edi
	DD	$LN30@ccexec_edi
	DD	$LN25@ccexec_edi
	DD	$LN24@ccexec_edi
	DD	$LN22@ccexec_edi
	DD	$LN21@ccexec_edi
ccexec_edict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
type$ = 56
tv206 = 64
ltree$ = 72
int_value$1 = 80
it$2 = 88
stack$ = 96
tv131 = 128
tv143 = 136
tv190 = 144
tv274 = 152
lparam$3 = 160
lvalue$4 = 168
tv372 = 176
tv268 = 184
edict$5 = 192
tv405 = 200
tv263 = 208
tv417 = 216
tv261 = 224
tv333 = 232
$T6 = 240
$T7 = 264
$T8 = 304
$T9 = 336
$T10 = 368
$T11 = 400
$T12 = 432
$T13 = 464
$T14 = 496
$T15 = 528
$T16 = 552
$T17 = 584
$T18 = 616
$T19 = 648
exec$ = 720
procd$ = 728
r$ = 736
l$ = 744
i$ = 752
ccexec_invoke PROC
; File W:\cpp\void\cc\ccexec.c
; Line 384
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 696				; 000002b8H
; Line 385
	lea	rax, OFFSET FLAT:$SG50315
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 385				; 00000181H
	lea	r8, OFFSET FLAT:$SG50316
	mov	edx, 160				; 000000a0H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv274[rsp], rcx
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rdi, QWORD PTR $T7[rsp]
	mov	QWORD PTR tv333[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv333[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50314
	mov	rcx, QWORD PTR tv274[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 386
	mov	DWORD PTR result$[rsp], 0
; Line 389
	lea	rax, QWORD PTR stack$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
; Line 391
	mov	rax, QWORD PTR procd$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR type$[rsp], rax
; Line 393
	mov	rax, QWORD PTR type$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN10@ccexec_inv
	mov	rax, QWORD PTR type$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv131[rsp], rax
	jmp	SHORT $LN11@ccexec_inv
$LN10@ccexec_inv:
	mov	QWORD PTR tv131[rsp], 0
$LN11@ccexec_inv:
	mov	eax, DWORD PTR l$[rsp]
	cmp	DWORD PTR tv131[rsp], eax
	je	SHORT $LN12@ccexec_inv
	int	3
$LN12@ccexec_inv:
; Line 396
	mov	rax, QWORD PTR type$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR ltree$[rsp], rax
	jmp	SHORT $LN4@ccexec_inv
$LN2@ccexec_inv:
	mov	rax, QWORD PTR ltree$[rsp]
	add	rax, 8
	mov	QWORD PTR ltree$[rsp], rax
$LN4@ccexec_inv:
	mov	rax, QWORD PTR type$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN14@ccexec_inv
	mov	rax, QWORD PTR type$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv143[rsp], rax
	jmp	SHORT $LN15@ccexec_inv
$LN14@ccexec_inv:
	mov	QWORD PTR tv143[rsp], 0
$LN15@ccexec_inv:
	mov	rax, QWORD PTR type$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv143[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR ltree$[rsp], rax
	jae	SHORT $LN3@ccexec_inv
; Line 397
	mov	rax, QWORD PTR ltree$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR procd$[rsp]
	call	ccprocd_local
	mov	QWORD PTR lparam$3[rsp], rax
; Line 398
	mov	r8, QWORD PTR lparam$3[rsp]
	lea	rdx, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccstack_local_alloc
	mov	QWORD PTR lvalue$4[rsp], rax
; Line 400
	mov	rax, QWORD PTR i$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR int_value$1[rsp], eax
; Line 401
	mov	rax, QWORD PTR lvalue$4[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, DWORD PTR int_value$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 402
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 24
	mov	QWORD PTR i$[rsp], rax
; Line 403
	jmp	$LN2@ccexec_inv
$LN3@ccexec_inv:
; Line 405
	mov	rax, QWORD PTR procd$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, QWORD PTR stack$[rsp]
	call	ccexec_enter
; Line 407
	lea	rax, OFFSET FLAT:$SG50318
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 407				; 00000197H
	lea	r8, OFFSET FLAT:$SG50319
	mov	edx, 161				; 000000a1H
	lea	rcx, QWORD PTR $T17[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv268[rsp], rcx
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rdi, QWORD PTR $T9[rsp]
	mov	QWORD PTR tv372[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv372[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50317
	mov	rcx, QWORD PTR tv268[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
$LN5@ccexec_inv:
; Line 408
	mov	rax, QWORD PTR stack$[rsp+8]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN16@ccexec_inv
	mov	rax, QWORD PTR stack$[rsp+8]
	mov	rax, QWORD PTR [rax+8]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv190[rsp], rax
	jmp	SHORT $LN17@ccexec_inv
$LN16@ccexec_inv:
	mov	QWORD PTR tv190[rsp], 0
$LN17@ccexec_inv:
	mov	eax, DWORD PTR tv190[rsp]
	cmp	DWORD PTR stack$[rsp+16], eax
	jae	$LN6@ccexec_inv
; Line 410
	movsxd	rax, DWORD PTR stack$[rsp+16]
	mov	rcx, QWORD PTR stack$[rsp+8]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR it$2[rsp], rax
; Line 411
	mov	eax, DWORD PTR stack$[rsp+16]
	inc	eax
	mov	DWORD PTR stack$[rsp+16], eax
; Line 413
	mov	rax, QWORD PTR it$2[rsp]
	mov	r8, QWORD PTR [rax]
	lea	rdx, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccexec_edict
	test	eax, eax
	jne	$LN7@ccexec_inv
; Line 416
	mov	rax, QWORD PTR it$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR edict$5[rsp], rax
; Line 418
	mov	rax, QWORD PTR edict$5[rsp]
	cmp	DWORD PTR [rax], 13
	jne	SHORT $LN18@ccexec_inv
	mov	DWORD PTR tv206[rsp], 1
	jmp	SHORT $LN19@ccexec_inv
$LN18@ccexec_inv:
	mov	DWORD PTR tv206[rsp], 0
$LN19@ccexec_inv:
	mov	eax, DWORD PTR tv206[rsp]
	mov	DWORD PTR result$[rsp], eax
; Line 420
	cmp	DWORD PTR result$[rsp], 0
	je	SHORT $LN8@ccexec_inv
; Line 421
	mov	rax, QWORD PTR it$2[rsp]
	mov	r8, QWORD PTR [rax]
	lea	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	ccstack_yield
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	mov	rdi, QWORD PTR r$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
$LN8@ccexec_inv:
; Line 423
	jmp	SHORT $LN6@ccexec_inv
$LN7@ccexec_inv:
; Line 425
	jmp	$LN5@ccexec_inv
$LN6@ccexec_inv:
; Line 426
	lea	rax, OFFSET FLAT:$SG50323
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 426				; 000001aaH
	lea	r8, OFFSET FLAT:$SG50324
	mov	edx, 162				; 000000a2H
	lea	rcx, QWORD PTR $T18[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv263[rsp], rcx
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rdi, QWORD PTR $T11[rsp]
	mov	QWORD PTR tv405[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv405[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50322
	mov	rcx, QWORD PTR tv263[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 428
	lea	rcx, QWORD PTR stack$[rsp+24]
	call	ccdlbdel_
; Line 430
	lea	rax, OFFSET FLAT:$SG50326
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 430				; 000001aeH
	lea	r8, OFFSET FLAT:$SG50327
	mov	edx, 163				; 000000a3H
	lea	rcx, QWORD PTR $T19[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv261[rsp], rcx
	lea	rdx, QWORD PTR $T14[rsp]
	lea	rdi, QWORD PTR $T13[rsp]
	mov	QWORD PTR tv417[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv417[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50325
	mov	rcx, QWORD PTR tv261[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 431
	mov	eax, DWORD PTR result$[rsp]
; Line 432
	add	rsp, 696				; 000002b8H
	pop	rdi
	pop	rsi
	ret	0
ccexec_invoke ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 32
tv70 = 40
tv79 = 48
tv88 = 56
tv129 = 64
$T1 = 72
$T2 = 96
$T3 = 120
$T4 = 144
$T5 = 168
$T6 = 192
$T7 = 216
$T8 = 240
$T9 = 264
$T10 = 288
$T11 = 312
$T12 = 336
$T13 = 360
$T14 = 384
$T15 = 408
$T16 = 432
$T17 = 456
$T18 = 480
__$ReturnAddress$ = 544
opr$ = 552
lval$ = 560
rval$ = 568
ccexec_edict_arith PROC
; File W:\cpp\void\cc\ccexec.c
; Line 150
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 520				; 00000208H
; Line 151
	mov	eax, DWORD PTR opr$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	mov	eax, DWORD PTR tv64[rsp]
	sub	eax, 93					; 0000005dH
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 26
	ja	$LN12@ccexec_edi
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN24@ccexec_edi[rcx+rax]
	mov	eax, DWORD PTR $LN25@ccexec_edi[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@ccexec_edi:
; Line 153
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jle	SHORT $LN14@ccexec_edi
	mov	QWORD PTR tv70[rsp], 1
	jmp	SHORT $LN15@ccexec_edi
$LN14@ccexec_edi:
	mov	QWORD PTR tv70[rsp], 0
$LN15@ccexec_edi:
	lea	r8, OFFSET FLAT:$SG50052
	mov	rdx, QWORD PTR tv70[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN5@ccexec_edi:
; Line 155
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jl	SHORT $LN16@ccexec_edi
	mov	QWORD PTR tv79[rsp], 1
	jmp	SHORT $LN17@ccexec_edi
$LN16@ccexec_edi:
	mov	QWORD PTR tv79[rsp], 0
$LN17@ccexec_edi:
	lea	r8, OFFSET FLAT:$SG50054
	mov	rdx, QWORD PTR tv79[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN6@ccexec_edi:
; Line 157
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jge	SHORT $LN18@ccexec_edi
	mov	QWORD PTR tv88[rsp], 1
	jmp	SHORT $LN19@ccexec_edi
$LN18@ccexec_edi:
	mov	QWORD PTR tv88[rsp], 0
$LN19@ccexec_edi:
	lea	r8, OFFSET FLAT:$SG50056
	mov	rdx, QWORD PTR tv88[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN7@ccexec_edi:
; Line 159
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jg	SHORT $LN20@ccexec_edi
	mov	QWORD PTR tv129[rsp], 1
	jmp	SHORT $LN21@ccexec_edi
$LN20@ccexec_edi:
	mov	QWORD PTR tv129[rsp], 0
$LN21@ccexec_edi:
	lea	r8, OFFSET FLAT:$SG50058
	mov	rdx, QWORD PTR tv129[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN8@ccexec_edi:
; Line 161
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rax, QWORD PTR [rax+16]
	imul	rax, QWORD PTR [rcx+16]
	lea	r8, OFFSET FLAT:$SG50060
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN9@ccexec_edi:
; Line 163
	mov	rax, QWORD PTR lval$[rsp]
	mov	rax, QWORD PTR [rax+16]
	cdq
	mov	rcx, QWORD PTR rval$[rsp]
	idiv	QWORD PTR [rcx+16]
	lea	r8, OFFSET FLAT:$SG50062
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN10@ccexec_edi:
; Line 165
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	lea	r8, OFFSET FLAT:$SG50064
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN11@ccexec_edi:
; Line 167
	mov	rax, QWORD PTR lval$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR rval$[rsp]
	add	rax, QWORD PTR [rcx+16]
	lea	r8, OFFSET FLAT:$SG50066
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@ccexec_edi
$LN12@ccexec_edi:
; Line 168
	lea	rax, OFFSET FLAT:$SG50068
	test	rax, rax
	je	SHORT $LN22@ccexec_edi
	int	3
$LN22@ccexec_edi:
; Line 170
	lea	r8, OFFSET FLAT:$SG50069
	xor	edx, edx
	lea	rcx, QWORD PTR $T18[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@ccexec_edi:
; Line 171
	add	rsp, 520				; 00000208H
	pop	rdi
	pop	rsi
	ret	0
	npad	2
$LN25@ccexec_edi:
	DD	$LN8@ccexec_edi
	DD	$LN9@ccexec_edi
	DD	$LN11@ccexec_edi
	DD	$LN10@ccexec_edi
	DD	$LN4@ccexec_edi
	DD	$LN6@ccexec_edi
	DD	$LN5@ccexec_edi
	DD	$LN7@ccexec_edi
	DD	$LN12@ccexec_edi
$LN24@ccexec_edi:
	DB	0
	DB	1
	DB	8
	DB	2
	DB	3
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	7
ccexec_edict_arith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stack$ = 8
block$ = 16
ccexec_enter PROC
; File W:\cpp\void\cc\ccexec.c
; Line 142
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 143
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 144
	mov	rax, QWORD PTR stack$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 145
	ret	0
ccexec_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 48
edict$ = 56
memory$ = 64
result$ = 72
tv198 = 80
tv182 = 88
tv230 = 96
tv177 = 104
$T1 = 112
$T2 = 136
$T3 = 176
$T4 = 208
$T5 = 240
$T6 = 272
$T7 = 296
$T8 = 328
exec$ = 400
stack$ = 408
value$ = 416
ccstack_local_alloc PROC
; File W:\cpp\void\cc\ccexec.c
; Line 113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
; Line 114
	lea	rax, OFFSET FLAT:$SG50016
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 114				; 00000072H
	lea	r8, OFFSET FLAT:$SG50017
	mov	edx, 136				; 00000088H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv182[rsp], rcx
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rdi, QWORD PTR $T2[rsp]
	mov	QWORD PTR tv198[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv198[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50015
	mov	rcx, QWORD PTR tv182[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 116
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN3@ccstack_lo
	int	3
$LN3@ccstack_lo:
; Line 117
	mov	rax, QWORD PTR value$[rsp]
	cmp	DWORD PTR [rax], 5
	je	SHORT $LN5@ccstack_lo
	int	3
$LN5@ccstack_lo:
; Line 120
	mov	rax, QWORD PTR value$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR edict$[rsp], rax
; Line 122
	cmp	QWORD PTR edict$[rsp], 0
	jne	SHORT $LN7@ccstack_lo
	int	3
$LN7@ccstack_lo:
; Line 123
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN9@ccstack_lo
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN9@ccstack_lo
	int	3
$LN9@ccstack_lo:
; Line 126
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_sizeof
	mov	DWORD PTR size$[rsp], eax
; Line 127
	cmp	DWORD PTR size$[rsp], 8
	jae	SHORT $LN11@ccstack_lo
	int	3
$LN11@ccstack_lo:
; Line 129
	mov	rax, QWORD PTR exec$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR exec$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR memory$[rsp], rax
; Line 130
	mov	eax, DWORD PTR size$[rsp]
	mov	r8d, eax
	xor	edx, edx
	mov	rcx, QWORD PTR memory$[rsp]
	call	memset
; Line 131
	mov	eax, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR exec$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR exec$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 133
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR result$[rsp], rax
; Line 134
	lea	r8, OFFSET FLAT:$SG50018
	mov	rdx, QWORD PTR memory$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccexec_lvalue
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR result$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 136
	lea	rax, OFFSET FLAT:$SG50020
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 136				; 00000088H
	lea	r8, OFFSET FLAT:$SG50021
	mov	edx, 137				; 00000089H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv177[rsp], rcx
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rdi, QWORD PTR $T4[rsp]
	mov	QWORD PTR tv230[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv230[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG50019
	mov	rcx, QWORD PTR tv177[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 137
	mov	rax, QWORD PTR result$[rsp]
; Line 138
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
ccstack_local_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
memory$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
exec$ = 192
length$ = 200
ccstack_push PROC
; File W:\cpp\void\cc\ccexec.c
; Line 96
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 97
	movsxd	rax, DWORD PTR length$[rsp]
	mov	rcx, QWORD PTR exec$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR exec$[rsp]
	cmp	rax, QWORD PTR [rcx+16]
	jbe	SHORT $LN2@ccstack_pu
; Line 99
	lea	rax, OFFSET FLAT:$SG49999
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 99					; 00000063H
	lea	r8, OFFSET FLAT:$SG50000
	mov	edx, 135				; 00000087H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49997
	lea	rdx, OFFSET FLAT:$SG49998
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
; Line 100
	lea	rax, OFFSET FLAT:$SG50001
	test	rax, rax
	je	SHORT $LN4@ccstack_pu
	int	3
$LN4@ccstack_pu:
$LN2@ccstack_pu:
; Line 102
	mov	rax, QWORD PTR exec$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR exec$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR memory$[rsp], rax
; Line 103
	movsxd	rax, DWORD PTR length$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR exec$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR exec$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 104
	mov	rax, QWORD PTR memory$[rsp]
; Line 105
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccstack_push ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
exec$ = 8
length$ = 16
ccstack_pull PROC
; File W:\cpp\void\cc\ccexec.c
; Line 89
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 90
	movsxd	rax, DWORD PTR length$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR exec$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR exec$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 91
	ret	0
ccstack_pull ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
result$ = 40
$T1 = 64
$T2 = 88
__$ReturnAddress$ = 144
stack$ = 152
couple$ = 160
ccstack_yield_lvalue PROC
; File W:\cpp\void\cc\ccexec.c
; Line 69
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 70
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
; Line 72
	mov	rax, QWORD PTR couple$[rsp]
	cmp	DWORD PTR [rax], 5
	jne	SHORT $LN4@ccstack_yi
; Line 73
	mov	rax, QWORD PTR couple$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv72[rsp], eax
	cmp	DWORD PTR tv72[rsp], 0
	je	SHORT $LN5@ccstack_yi
	cmp	DWORD PTR tv72[rsp], 1
	je	SHORT $LN6@ccstack_yi
	cmp	DWORD PTR tv72[rsp], 2
	je	SHORT $LN7@ccstack_yi
	jmp	SHORT $LN2@ccstack_yi
$LN5@ccstack_yi:
$LN6@ccstack_yi:
$LN7@ccstack_yi:
; Line 77
	mov	r8, QWORD PTR couple$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccstack_yield
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR result$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
$LN2@ccstack_yi:
$LN4@ccstack_yi:
; Line 82
	cmp	DWORD PTR result$[rsp+8], 2
	je	SHORT $LN9@ccstack_yi
	int	3
$LN9@ccstack_yi:
; Line 83
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 84
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
ccstack_yield_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv69 = 36
result$ = 40
$T1 = 64
$T2 = 88
$T3 = 112
$T4 = 136
__$ReturnAddress$ = 192
stack$ = 200
couple$ = 208
ccstack_yield_rvalue PROC
; File W:\cpp\void\cc\ccexec.c
; Line 43
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 44
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
; Line 46
	mov	rax, QWORD PTR couple$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv69[rsp], eax
	cmp	DWORD PTR tv69[rsp], 2
	je	SHORT $LN10@ccstack_yi
	cmp	DWORD PTR tv69[rsp], 5
	je	SHORT $LN6@ccstack_yi
	jmp	$LN2@ccstack_yi
$LN6@ccstack_yi:
; Line 48
	mov	rax, QWORD PTR couple$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv72[rsp], eax
	cmp	DWORD PTR tv72[rsp], 4
	je	SHORT $LN7@ccstack_yi
	cmp	DWORD PTR tv72[rsp], 5
	je	SHORT $LN8@ccstack_yi
	cmp	DWORD PTR tv72[rsp], 12
	je	SHORT $LN9@ccstack_yi
	jmp	SHORT $LN4@ccstack_yi
$LN7@ccstack_yi:
$LN8@ccstack_yi:
$LN9@ccstack_yi:
; Line 52
	mov	r8, QWORD PTR couple$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccstack_yield
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR result$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
$LN4@ccstack_yi:
; Line 55
	jmp	SHORT $LN2@ccstack_yi
$LN10@ccstack_yi:
; Line 57
	lea	r8, OFFSET FLAT:$SG49969
	mov	rax, QWORD PTR couple$[rsp]
	mov	rdx, QWORD PTR [rax+72]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR result$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
$LN2@ccstack_yi:
; Line 62
	cmp	DWORD PTR result$[rsp+8], 1
	je	SHORT $LN12@ccstack_yi
	int	3
$LN12@ccstack_yi:
; Line 64
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 65
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccstack_yield_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tv191 = 56
tv177 = 64
tv219 = 72
tv173 = 80
$T1 = 88
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
$T8 = 320
$T9 = 352
__$ReturnAddress$ = 416
stack$ = 424
value$ = 432
ccstack_yield PROC
; File W:\cpp\void\cc\ccexec.c
; Line 25
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 26
	lea	rax, OFFSET FLAT:$SG49942
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 26
	lea	r8, OFFSET FLAT:$SG49943
	mov	edx, 132				; 00000084H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv177[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv191[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv191[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49941
	mov	rcx, QWORD PTR tv177[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 27
	mov	rax, QWORD PTR stack$[rsp]
	add	rax, 24
	mov	r9, QWORD PTR value$[rsp]
	mov	r8d, -8
	mov	edx, 24
	mov	rcx, rax
	call	ccdlb_tblget
	imul	rax, rax, 24
	mov	rcx, QWORD PTR stack$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR result$[rsp], rax
; Line 29
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@ccstack_yi
	int	3
$LN4@ccstack_yi:
; Line 31
	mov	rax, QWORD PTR result$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jne	SHORT $LN2@ccstack_yi
; Line 32
	lea	rax, OFFSET FLAT:$SG49947
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 32					; 00000020H
	lea	r8, OFFSET FLAT:$SG49948
	mov	edx, 133				; 00000085H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49945
	lea	rdx, OFFSET FLAT:$SG49946
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
$LN2@ccstack_yi:
; Line 34
	mov	rax, QWORD PTR result$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jne	SHORT $LN6@ccstack_yi
	int	3
$LN6@ccstack_yi:
; Line 36
	lea	rax, OFFSET FLAT:$SG49950
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 36					; 00000024H
	lea	r8, OFFSET FLAT:$SG49951
	mov	edx, 134				; 00000086H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv173[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv219[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv219[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49949
	mov	rcx, QWORD PTR tv173[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 37
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, QWORD PTR result$[rsp]
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 38
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
ccstack_yield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv168 = 48
tv155 = 56
tv183 = 64
tv152 = 72
result$ = 80
$T1 = 88
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
stack$ = 320
value$ = 328
ccstack_mingle PROC
; File W:\cpp\void\cc\ccexec.c
; Line 15
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 16
	lea	rax, OFFSET FLAT:$SG49924
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 16
	lea	r8, OFFSET FLAT:$SG49925
	mov	edx, 130				; 00000082H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv155[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv168[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv168[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49923
	mov	rcx, QWORD PTR tv155[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 17
	mov	rax, QWORD PTR stack$[rsp]
	add	rax, 24
	mov	r9, QWORD PTR value$[rsp]
	mov	r8d, -8
	mov	edx, 24
	mov	rcx, rax
	call	ccdlb_tblset
	imul	rax, rax, 24
	mov	rcx, QWORD PTR stack$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR result$[rsp], rax
; Line 18
	lea	rax, OFFSET FLAT:$SG49927
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 18
	lea	r8, OFFSET FLAT:$SG49928
	mov	edx, 131				; 00000083H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv152[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv183[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49926
	mov	rcx, QWORD PTR tv152[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 19
	mov	rax, QWORD PTR result$[rsp]
; Line 20
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
ccstack_mingle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$1 = 32
$T2 = 40
rval$3 = 64
$T4 = 88
_s$ = 144
_t$ = 152
ccexec_sizeof PROC
; File W:\cpp\void\cc\ccexec.c
; Line 363
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 364
	mov	rax, QWORD PTR _t$[rsp]
	cmp	DWORD PTR [rax+8], 1
	jne	SHORT $LN2@ccexec_siz
; Line 367
	mov	rax, QWORD PTR _t$[rsp]
	mov	r8, QWORD PTR [rax+24]
	mov	rdx, QWORD PTR _s$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 369
	mov	rax, QWORD PTR _t$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR _s$[rsp]
	call	ccexec_sizeof
	mov	DWORD PTR size$1[rsp], eax
; Line 370
	mov	eax, DWORD PTR size$1[rsp]
	imul	eax, DWORD PTR rval$3[rsp+16]
	mov	DWORD PTR size$1[rsp], eax
; Line 372
	mov	eax, DWORD PTR size$1[rsp]
	jmp	SHORT $LN1@ccexec_siz
; Line 373
	jmp	SHORT $LN3@ccexec_siz
$LN2@ccexec_siz:
; Line 374
	mov	rax, QWORD PTR _t$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jne	SHORT $LN4@ccexec_siz
; Line 375
	mov	eax, 8
	jmp	SHORT $LN1@ccexec_siz
$LN4@ccexec_siz:
$LN3@ccexec_siz:
; Line 377
	lea	rax, OFFSET FLAT:$SG50277
	test	rax, rax
	je	SHORT $LN6@ccexec_siz
	int	3
$LN6@ccexec_siz:
; Line 378
	xor	eax, eax
$LN1@ccexec_siz:
; Line 379
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
ccexec_sizeof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
emit$ = 48
ccemit_init PROC
; File W:\cpp\void\cc\ccemit.c
; Line 371
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 24
	xor	edx, edx
	mov	rcx, QWORD PTR emit$[rsp]
	call	memset
; Line 372
	add	rsp, 40					; 00000028H
	ret	0
ccemit_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 32
tv74 = 40
emit$ = 64
tree$ = 72
ccemit_translation_unit PROC
; File W:\cpp\void\cc\ccemit.c
; Line 362
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 363
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_translation_unit
; Line 366
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR decl$[rsp], rax
	jmp	SHORT $LN4@ccemit_tra
$LN2@ccemit_tra:
	mov	rax, QWORD PTR decl$[rsp]
	add	rax, 8
	mov	QWORD PTR decl$[rsp], rax
$LN4@ccemit_tra:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@ccemit_tra
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN7@ccemit_tra
$LN6@ccemit_tra:
	mov	QWORD PTR tv74[rsp], 0
$LN7@ccemit_tra:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv74[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR decl$[rsp], rax
	jae	SHORT $LN3@ccemit_tra
	mov	rax, QWORD PTR decl$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_external_decl
	jmp	SHORT $LN2@ccemit_tra
$LN3@ccemit_tra:
; Line 367
	add	rsp, 56					; 00000038H
	ret	0
ccemit_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 32
decl_$ = 40
tv73 = 48
p$1 = 56
emit$ = 80
tree$ = 88
ccemit_external_decl PROC
; File W:\cpp\void\cc\ccemit.c
; Line 338
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 341
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR decl_$[rsp], rax
	jmp	SHORT $LN4@ccemit_ext
$LN2@ccemit_ext:
	mov	rax, QWORD PTR decl_$[rsp]
	add	rax, 8
	mov	QWORD PTR decl_$[rsp], rax
$LN4@ccemit_ext:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN9@ccemit_ext
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN10@ccemit_ext
$LN9@ccemit_ext:
	mov	QWORD PTR tv73[rsp], 0
$LN10@ccemit_ext:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv73[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR decl_$[rsp], rax
	jae	$LN3@ccemit_ext
; Line 342
	mov	rax, QWORD PTR decl_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR decl$[rsp], rax
; Line 344
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN5@ccemit_ext
; Line 346
	mov	rax, QWORD PTR decl$[rsp]
	mov	r8, QWORD PTR [rax+24]
	mov	rdx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_global_procd
	mov	QWORD PTR p$1[rsp], rax
; Line 347
	mov	r8, QWORD PTR decl$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_function
; Line 349
	lea	rdx, OFFSET FLAT:$SG49895
	mov	rax, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN7@ccemit_ext
; Line 350
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN7@ccemit_ext:
; Line 352
	jmp	SHORT $LN6@ccemit_ext
$LN5@ccemit_ext:
; Line 355
	lea	rax, OFFSET FLAT:$SG49896
	test	rax, rax
	je	SHORT $LN11@ccemit_ext
	int	3
$LN11@ccemit_ext:
$LN6@ccemit_ext:
; Line 357
	jmp	$LN2@ccemit_ext
$LN3@ccemit_ext:
; Line 358
	add	rsp, 72					; 00000048H
	ret	0
ccemit_external_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
tv90 = 40
tv144 = 48
emit$ = 80
procd$ = 88
tree$ = 96
ccemit_function PROC
; File W:\cpp\void\cc\ccemit.c
; Line 312
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 313
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN9@ccemit_fun
	int	3
$LN9@ccemit_fun:
; Line 315
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN11@ccemit_fun
	int	3
$LN11@ccemit_fun:
; Line 316
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 3
	je	SHORT $LN13@ccemit_fun
	int	3
$LN13@ccemit_fun:
; Line 318
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN15@ccemit_fun
	int	3
$LN15@ccemit_fun:
; Line 319
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	cmp	DWORD PTR [rax], 10
	je	SHORT $LN17@ccemit_fun
	int	3
$LN17@ccemit_fun:
; Line 322
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR procd$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+8], rcx
; Line 326
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN4@ccemit_fun
$LN2@ccemit_fun:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 8
	mov	QWORD PTR list$[rsp], rax
$LN4@ccemit_fun:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN19@ccemit_fun
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv90[rsp], rax
	jmp	SHORT $LN20@ccemit_fun
$LN19@ccemit_fun:
	mov	QWORD PTR tv90[rsp], 0
$LN20@ccemit_fun:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv90[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN3@ccemit_fun
; Line 327
	mov	rax, QWORD PTR list$[rsp]
	mov	r9, QWORD PTR [rax]
	mov	rax, QWORD PTR emit$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR procd$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_param
	jmp	$LN2@ccemit_fun
$LN3@ccemit_fun:
; Line 329
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN7@ccemit_fun
$LN5@ccemit_fun:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 8
	mov	QWORD PTR list$[rsp], rax
$LN7@ccemit_fun:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN21@ccemit_fun
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv144[rsp], rax
	jmp	SHORT $LN22@ccemit_fun
$LN21@ccemit_fun:
	mov	QWORD PTR tv144[rsp], 0
$LN22@ccemit_fun:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv144[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN6@ccemit_fun
; Line 330
	mov	rax, QWORD PTR list$[rsp]
	mov	r9, QWORD PTR [rax]
	mov	rax, QWORD PTR emit$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR procd$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	jmp	$LN5@ccemit_fun
$LN6@ccemit_fun:
; Line 332
	mov	rax, QWORD PTR procd$[rsp]
	mov	rdx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR procd$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	ccblock_enter
; Line 333
	add	rsp, 72					; 00000048H
	ret	0
ccemit_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lval$ = 48
emit$ = 80
func$ = 88
block$ = 96
tree$ = 104
ccemit_param PROC
; File W:\cpp\void\cc\ccemit.c
; Line 212
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	DWORD PTR [rsp+32], 1
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_include_local
	mov	QWORD PTR lval$[rsp], rax
; Line 213
	mov	rax, QWORD PTR lval$[rsp]
; Line 214
	add	rsp, 72					; 00000048H
	ret	0
ccemit_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
tv73 = 40
emit$ = 64
func$ = 72
block$ = 80
decl$ = 88
ccemit_decl PROC
; File W:\cpp\void\cc\ccemit.c
; Line 206
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 207
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN4@ccemit_dec
$LN2@ccemit_dec:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 8
	mov	QWORD PTR list$[rsp], rax
$LN4@ccemit_dec:
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@ccemit_dec
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN7@ccemit_dec
$LN6@ccemit_dec:
	mov	QWORD PTR tv73[rsp], 0
$LN7@ccemit_dec:
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv73[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN3@ccemit_dec
	mov	rax, QWORD PTR list$[rsp]
	mov	r9, QWORD PTR [rax]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_decl_name
	jmp	SHORT $LN2@ccemit_dec
$LN3@ccemit_dec:
; Line 208
	add	rsp, 56					; 00000038H
	ret	0
ccemit_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lval$ = 48
rval$1 = 56
emit$ = 80
func$ = 88
block$ = 96
tree$ = 104
ccemit_decl_name PROC
; File W:\cpp\void\cc\ccemit.c
; Line 195
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	DWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_include_local
	mov	QWORD PTR lval$[rsp], rax
; Line 197
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN2@ccemit_dec
; Line 198
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+64]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR rval$1[rsp], rax
; Line 199
	mov	r8, QWORD PTR rval$1[rsp]
	mov	rdx, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_store
$LN2@ccemit_dec:
; Line 201
	mov	rax, QWORD PTR lval$[rsp]
; Line 202
	add	rsp, 72					; 00000048H
	ret	0
ccemit_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
it$ = 32
tv69 = 40
emit$ = 64
func$ = 72
irset$ = 80
list$ = 88
ccemit_treelist PROC
; File W:\cpp\void\cc\ccemit.c
; Line 188
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 190
	mov	rax, QWORD PTR list$[rsp]
	mov	QWORD PTR it$[rsp], rax
	jmp	SHORT $LN4@ccemit_tre
$LN2@ccemit_tre:
	mov	rax, QWORD PTR it$[rsp]
	add	rax, 8
	mov	QWORD PTR it$[rsp], rax
$LN4@ccemit_tre:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN6@ccemit_tre
	xor	edx, edx
	mov	rax, QWORD PTR list$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv69[rsp], rax
	jmp	SHORT $LN7@ccemit_tre
$LN6@ccemit_tre:
	mov	QWORD PTR tv69[rsp], 0
$LN7@ccemit_tre:
	mov	rax, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR tv69[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR it$[rsp], rax
	jae	SHORT $LN3@ccemit_tre
	mov	rax, QWORD PTR it$[rsp]
	mov	r9, QWORD PTR [rax]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	jmp	SHORT $LN2@ccemit_tre
$LN3@ccemit_tre:
; Line 191
	add	rsp, 56					; 00000038H
	ret	0
ccemit_treelist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lval$1 = 32
rval$2 = 40
rval$3 = 48
cvalue$4 = 56
j$5 = 64
v$6 = 72
c$7 = 80
l$8 = 88
$T9 = 96
$T10 = 128
$T11 = 160
$T12 = 192
$T13 = 224
$T14 = 248
$T15 = 272
p$16 = 304
$T17 = 336
$T18 = 368
$T19 = 400
$T20 = 432
$T21 = 456
$T22 = 480
emit$ = 544
func$ = 552
irset$ = 560
tree$ = 568
ccemit_tree PROC
; File W:\cpp\void\cc\ccemit.c
; Line 219
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 520				; 00000208H
; Line 220
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN2@ccemit_tre
; Line 222
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_decl
; Line 224
	xor	eax, eax
	jmp	$LN1@ccemit_tre
; Line 225
	jmp	$LN3@ccemit_tre
$LN2@ccemit_tre:
; Line 226
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 10
	jne	SHORT $LN4@ccemit_tre
; Line 228
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+32]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_treelist
; Line 229
	xor	eax, eax
	jmp	$LN1@ccemit_tre
; Line 230
	jmp	$LN5@ccemit_tre
$LN4@ccemit_tre:
; Line 231
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 11
	jne	SHORT $LN6@ccemit_tre
; Line 236
	jmp	$LN7@ccemit_tre
$LN6@ccemit_tre:
; Line 237
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 12
	jne	SHORT $LN8@ccemit_tre
; Line 239
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR rval$3[rsp], rax
; Line 241
	mov	rdx, QWORD PTR rval$3[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_return
	jmp	$LN1@ccemit_tre
; Line 242
	jmp	$LN9@ccemit_tre
$LN8@ccemit_tre:
; Line 243
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 13
	jne	SHORT $LN10@ccemit_tre
; Line 246
	jmp	$LN11@ccemit_tre
$LN10@ccemit_tre:
; Line 247
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 21
	jne	SHORT $LN12@ccemit_tre
; Line 249
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_invoke_easy
	jmp	$LN1@ccemit_tre
; Line 250
	jmp	$LN13@ccemit_tre
$LN12@ccemit_tre:
; Line 251
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 18
	jne	$LN14@ccemit_tre
; Line 254
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+72]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_lvalue
	mov	QWORD PTR lval$1[rsp], rax
; Line 255
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR rval$2[rsp], rax
; Line 257
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax+40], 110			; 0000006eH
	jne	SHORT $LN16@ccemit_tre
; Line 259
	mov	r8, QWORD PTR rval$2[rsp]
	mov	rdx, QWORD PTR lval$1[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_store
	jmp	$LN1@ccemit_tre
; Line 260
	jmp	SHORT $LN17@ccemit_tre
$LN16@ccemit_tre:
; Line 264
	xor	r8d, r8d
	mov	rdx, QWORD PTR lval$1[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_fetch
	mov	QWORD PTR lval$1[rsp], rax
; Line 266
	mov	r9, QWORD PTR rval$2[rsp]
	mov	r8, QWORD PTR lval$1[rsp]
	mov	rax, QWORD PTR tree$[rsp]
	mov	edx, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_arith
	jmp	$LN1@ccemit_tre
$LN17@ccemit_tre:
; Line 269
	jmp	$LN15@ccemit_tre
$LN14@ccemit_tre:
; Line 270
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 17
	jne	$LN18@ccemit_tre
; Line 271
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+64]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	mov	QWORD PTR cvalue$4[rsp], rax
; Line 274
	lea	rax, QWORD PTR $T9[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r8, QWORD PTR cvalue$4[rsp]
	lea	rdx, QWORD PTR $T10[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_fjump
	mov	QWORD PTR j$5[rsp], rax
; Line 276
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN20@ccemit_tre
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+72]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
$LN20@ccemit_tre:
; Line 278
	lea	r8, OFFSET FLAT:$SG49861
	mov	rdx, QWORD PTR irset$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	ccblock_label
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T12[rsp]
	mov	rcx, QWORD PTR j$5[rsp]
	call	ccvalue_retarget
; Line 281
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN21@ccemit_tre
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
$LN21@ccemit_tre:
; Line 283
	xor	eax, eax
	jmp	$LN1@ccemit_tre
; Line 284
	jmp	$LN19@ccemit_tre
$LN18@ccemit_tre:
; Line 285
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 14
	jne	$LN22@ccemit_tre
; Line 290
	lea	r8, OFFSET FLAT:$SG49864
	mov	rdx, QWORD PTR irset$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	ccblock_label
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR p$16[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 291
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+64]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR v$6[rsp], rax
; Line 292
	lea	rax, QWORD PTR $T14[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r8, QWORD PTR v$6[rsp]
	lea	rdx, QWORD PTR $T15[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_fjump
	mov	QWORD PTR c$7[rsp], rax
; Line 294
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+72]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
; Line 296
	lea	rax, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR p$16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T17[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_jump
	mov	QWORD PTR l$8[rsp], rax
; Line 298
	lea	r8, OFFSET FLAT:$SG49865
	mov	rdx, QWORD PTR irset$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	ccblock_label
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T19[rsp]
	mov	rcx, QWORD PTR c$7[rsp]
	call	ccvalue_retarget
; Line 301
	xor	eax, eax
	jmp	SHORT $LN1@ccemit_tre
$LN22@ccemit_tre:
$LN19@ccemit_tre:
$LN15@ccemit_tre:
$LN13@ccemit_tre:
$LN11@ccemit_tre:
$LN9@ccemit_tre:
$LN7@ccemit_tre:
$LN5@ccemit_tre:
$LN3@ccemit_tre:
; Line 304
	lea	rax, OFFSET FLAT:$SG49866
	test	rax, rax
	je	SHORT $LN24@ccemit_tre
	int	3
$LN24@ccemit_tre:
; Line 305
	xor	eax, eax
$LN1@ccemit_tre:
; Line 306
	add	rsp, 520				; 00000208H
	pop	rdi
	pop	rsi
	ret	0
ccemit_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rtree$ = 32
list$ = 40
rvalue$ = 48
allude$ = 56
tv79 = 64
ltree$ = 72
tv90 = 80
call$ = 88
emit$ = 112
func$ = 120
block$ = 128
tree$ = 136
ccemit_invoke_easy PROC
; File W:\cpp\void\cc\ccemit.c
; Line 100
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 101
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR ltree$[rsp], rax
; Line 102
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR rtree$[rsp], rax
; Line 104
	mov	rax, QWORD PTR ltree$[rsp]
	cmp	DWORD PTR [rax], 6
	je	SHORT $LN6@ccemit_inv
	int	3
$LN6@ccemit_inv:
; Line 109
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_resolve_symbol
	mov	QWORD PTR allude$[rsp], rax
; Line 110
	cmp	QWORD PTR allude$[rsp], 0
	jne	SHORT $LN8@ccemit_inv
	int	3
$LN8@ccemit_inv:
; Line 112
	mov	rdx, QWORD PTR allude$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_global
	mov	QWORD PTR call$[rsp], rax
; Line 114
	mov	QWORD PTR rvalue$[rsp], 0
; Line 117
	mov	rax, QWORD PTR rtree$[rsp]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN4@ccemit_inv
$LN2@ccemit_inv:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 152				; 00000098H
	mov	QWORD PTR list$[rsp], rax
$LN4@ccemit_inv:
	cmp	QWORD PTR rtree$[rsp], 0
	je	SHORT $LN10@ccemit_inv
	xor	edx, edx
	mov	rax, QWORD PTR rtree$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 152				; 00000098H
	div	rcx
	mov	QWORD PTR tv79[rsp], rax
	jmp	SHORT $LN11@ccemit_inv
$LN10@ccemit_inv:
	mov	QWORD PTR tv79[rsp], 0
$LN11@ccemit_inv:
	imul	rax, QWORD PTR tv79[rsp], 152		; 00000098H
	mov	rcx, QWORD PTR rtree$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN3@ccemit_inv
; Line 118
	mov	r9, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR tv90[rsp], rax
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR rvalue$[rsp]
	call	ccdlb_arradd
	mov	rcx, QWORD PTR rvalue$[rsp]
	mov	rdx, QWORD PTR tv90[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	jmp	$LN2@ccemit_inv
$LN3@ccemit_inv:
; Line 120
	mov	r8, QWORD PTR rvalue$[rsp]
	mov	rax, QWORD PTR call$[rsp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_invoke
; Line 121
	add	rsp, 104				; 00000068H
	ret	0
ccemit_invoke_easy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
couple$ = 32
result$ = 40
emit$ = 64
func$ = 72
tree$ = 80
ccemit_resolve PROC
; File W:\cpp\void\cc\ccemit.c
; Line 84
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN3@ccemit_res
	int	3
$LN3@ccemit_res:
; Line 85
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 6
	je	SHORT $LN5@ccemit_res
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 22
	je	SHORT $LN5@ccemit_res
	int	3
$LN5@ccemit_res:
; Line 88
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_resolve_symbol
	mov	QWORD PTR couple$[rsp], rax
; Line 89
	cmp	QWORD PTR couple$[rsp], 0
	jne	SHORT $LN7@ccemit_res
	int	3
$LN7@ccemit_res:
; Line 92
	mov	rdx, QWORD PTR couple$[rsp]
	mov	rcx, QWORD PTR func$[rsp]
	call	ccprocd_local
	mov	QWORD PTR result$[rsp], rax
; Line 93
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN9@ccemit_res
	int	3
$LN9@ccemit_res:
; Line 94
	mov	rax, QWORD PTR result$[rsp]
; Line 95
	add	rsp, 56					; 00000038H
	ret	0
ccemit_resolve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
classic$ = 32
emit$ = 64
value$ = 72
ccemit_const_i32 PROC
; File W:\cpp\void\cc\ccemit.c
; Line 77
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 78
	mov	rax, QWORD PTR value$[rsp]
	mov	QWORD PTR classic$[rsp], rax
; Line 79
	mov	r8, QWORD PTR classic$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_constant
; Line 80
	add	rsp, 56					; 00000038H
	ret	0
ccemit_const_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
emit$ = 192
type$ = 200
clsc$ = 208
ccemit_constant PROC
; File W:\cpp\void\cc\ccemit.c
; Line 63
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 65
	lea	rax, OFFSET FLAT:$SG49708
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 65					; 00000041H
	lea	r8, OFFSET FLAT:$SG49709
	mov	edx, 129				; 00000081H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 80					; 00000050H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR value$[rsp], rax
; Line 66
	mov	r8d, 80					; 00000050H
	xor	edx, edx
	mov	rcx, QWORD PTR value$[rsp]
	call	memset
; Line 68
	mov	rax, QWORD PTR value$[rsp]
	mov	DWORD PTR [rax], 2
; Line 69
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 70
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR clsc$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 71
	mov	rax, QWORD PTR value$[rsp]
; Line 72
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccemit_constant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
tv83 = 40
i$ = 48
e$ = 56
v$ = 64
emit$ = 96
func$ = 104
block$ = 112
tree$ = 120
is_param$ = 128
ccemit_include_local PROC
; File W:\cpp\void\cc\ccemit.c
; Line 43
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 44
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN3@ccemit_inc
	int	3
$LN3@ccemit_inc:
; Line 45
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 15
	je	SHORT $LN5@ccemit_inc
	int	3
$LN5@ccemit_inc:
; Line 47
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+48]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	cctree_to_type
	mov	QWORD PTR type$[rsp], rax
; Line 48
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN7@ccemit_inc
	int	3
$LN7@ccemit_inc:
; Line 50
	cmp	DWORD PTR is_param$[rsp], 0
	je	SHORT $LN9@ccemit_inc
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR type$[rsp]
	call	ccedict_param
	mov	QWORD PTR tv83[rsp], rax
	jmp	SHORT $LN10@ccemit_inc
$LN9@ccemit_inc:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR type$[rsp]
	call	ccedict_local
	mov	QWORD PTR tv83[rsp], rax
$LN10@ccemit_inc:
	mov	rax, QWORD PTR tv83[rsp]
	mov	QWORD PTR e$[rsp], rax
; Line 54
	mov	rdx, QWORD PTR e$[rsp]
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	ccblock_add_edict
	mov	QWORD PTR i$[rsp], rax
; Line 55
	mov	rax, QWORD PTR func$[rsp]
	add	rax, 16
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$[rsp], rax
; Line 56
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN11@ccemit_inc
	int	3
$LN11@ccemit_inc:
; Line 57
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR i$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 58
	mov	rax, QWORD PTR i$[rsp]
; Line 59
	add	rsp, 88					; 00000058H
	ret	0
ccemit_include_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
v$1 = 40
emit$ = 64
func$ = 72
block$ = 80
tree$ = 88
cctree_to_type PROC
; File W:\cpp\void\cc\ccemit.c
; Line 24
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR type$[rsp], 0
; Line 25
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN2@cctree_to_
; Line 27
	lea	rdx, OFFSET FLAT:$SG49679
	mov	ecx, 1
	call	cctype
	mov	QWORD PTR type$[rsp], rax
; Line 28
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+48]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	cctree_to_type
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 30
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR v$1[rsp], rax
; Line 31
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR v$1[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 33
	jmp	SHORT $LN3@cctree_to_
$LN2@cctree_to_:
; Line 34
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN4@cctree_to_
; Line 35
	lea	rdx, OFFSET FLAT:$SG49682
	xor	ecx, ecx
	call	cctype
	mov	QWORD PTR type$[rsp], rax
; Line 36
	jmp	SHORT $LN5@cctree_to_
$LN4@cctree_to_:
; Line 37
	lea	rax, OFFSET FLAT:$SG49683
	test	rax, rax
	je	SHORT $LN7@cctree_to_
	int	3
$LN7@cctree_to_:
$LN5@cctree_to_:
$LN3@cctree_to_:
; Line 38
	mov	rax, QWORD PTR type$[rsp]
; Line 39
	add	rsp, 56					; 00000038H
	ret	0
cctree_to_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
value$ = 40
tv72 = 48
rval$1 = 56
lval$2 = 64
emit$ = 96
func$ = 104
block$ = 112
tree$ = 120
ccemit_rvalue PROC
; File W:\cpp\void\cc\ccemit.c
; Line 149
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	QWORD PTR value$[rsp], 0
; Line 150
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	$LN6@ccemit_rva
	cmp	DWORD PTR tv65[rsp], 7
	je	SHORT $LN4@ccemit_rva
	cmp	DWORD PTR tv65[rsp], 18
	je	SHORT $LN5@ccemit_rva
	cmp	DWORD PTR tv65[rsp], 21
	je	$LN7@ccemit_rva
	cmp	DWORD PTR tv65[rsp], 22
	je	$LN8@ccemit_rva
	jmp	$LN9@ccemit_rva
$LN4@ccemit_rva:
; Line 152
	mov	rax, QWORD PTR tree$[rsp]
	movsxd	rax, DWORD PTR [rax+96]
	mov	rdx, rax
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_const_i32
	mov	QWORD PTR value$[rsp], rax
; Line 153
	jmp	$LN2@ccemit_rva
$LN5@ccemit_rva:
; Line 155
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR tv72[rsp], rax
	mov	rcx, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rcx+72]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	rcx, QWORD PTR tv72[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rax, QWORD PTR tree$[rsp]
	mov	edx, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_arith
	mov	QWORD PTR value$[rsp], rax
; Line 159
	jmp	$LN2@ccemit_rva
$LN6@ccemit_rva:
; Line 161
	mov	r8, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_resolve
	xor	r8d, r8d
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_fetch
	mov	QWORD PTR value$[rsp], rax
; Line 162
	jmp	$LN2@ccemit_rva
$LN7@ccemit_rva:
; Line 164
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_invoke_easy
	mov	QWORD PTR value$[rsp], rax
; Line 165
	jmp	$LN2@ccemit_rva
$LN8@ccemit_rva:
; Line 167
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	jne	SHORT $LN11@ccemit_rva
	int	3
$LN11@ccemit_rva:
; Line 168
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN13@ccemit_rva
	int	3
$LN13@ccemit_rva:
; Line 171
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+72]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_lvalue
	mov	QWORD PTR lval$2[rsp], rax
; Line 172
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR rval$1[rsp], rax
; Line 174
	mov	r8, QWORD PTR rval$1[rsp]
	mov	rdx, QWORD PTR lval$2[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_fetch
	mov	QWORD PTR value$[rsp], rax
; Line 175
	jmp	SHORT $LN2@ccemit_rva
$LN9@ccemit_rva:
; Line 176
	lea	rax, OFFSET FLAT:$SG49773
	test	rax, rax
	je	SHORT $LN15@ccemit_rva
	int	3
$LN15@ccemit_rva:
$LN2@ccemit_rva:
; Line 178
	mov	rax, QWORD PTR value$[rsp]
; Line 179
	add	rsp, 88					; 00000058H
	ret	0
ccemit_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
value$ = 40
rval$1 = 48
lval$2 = 56
emit$ = 80
func$ = 88
block$ = 96
tree$ = 104
ccemit_lvalue PROC
; File W:\cpp\void\cc\ccemit.c
; Line 125
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR value$[rsp], 0
; Line 126
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	SHORT $LN4@ccemit_lva
	cmp	DWORD PTR tv65[rsp], 22
	je	SHORT $LN5@ccemit_lva
	jmp	$LN6@ccemit_lva
$LN4@ccemit_lva:
; Line 128
	mov	r8, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_resolve
	mov	QWORD PTR value$[rsp], rax
; Line 129
	jmp	$LN2@ccemit_lva
$LN5@ccemit_lva:
; Line 132
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	jne	SHORT $LN8@ccemit_lva
	int	3
$LN8@ccemit_lva:
; Line 133
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN10@ccemit_lva
	int	3
$LN10@ccemit_lva:
; Line 136
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+72]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_lvalue
	mov	QWORD PTR lval$2[rsp], rax
; Line 137
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR rval$1[rsp], rax
; Line 139
	mov	r8, QWORD PTR rval$1[rsp]
	mov	rdx, QWORD PTR lval$2[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_address
	mov	QWORD PTR value$[rsp], rax
; Line 140
	jmp	SHORT $LN2@ccemit_lva
$LN6@ccemit_lva:
; Line 142
	lea	rax, OFFSET FLAT:$SG49755
	test	rax, rax
	je	SHORT $LN12@ccemit_lva
	int	3
$LN12@ccemit_lva:
$LN2@ccemit_lva:
; Line 144
	mov	rax, QWORD PTR value$[rsp]
; Line 145
	add	rsp, 72					; 00000048H
	ret	0
ccemit_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
next$1 = 40
reader$ = 64
ccread_translation_unit PROC
; File W:\cpp\void\cc\ccread.c
; Line 1246
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1247
	call	cctree_translation_unit
	mov	QWORD PTR tree$[rsp], rax
$LN2@ccread_tra:
; Line 1249
	xor	r8d, r8d
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_external_declaration
	mov	QWORD PTR next$1[rsp], rax
	cmp	QWORD PTR next$1[rsp], 0
	je	SHORT $LN3@ccread_tra
; Line 1250
	mov	rax, QWORD PTR tree$[rsp]
	add	rax, 32					; 00000020H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rdx, QWORD PTR next$1[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	jmp	SHORT $LN2@ccread_tra
$LN3@ccread_tra:
; Line 1252
	mov	rax, QWORD PTR tree$[rsp]
; Line 1253
	add	rsp, 56					; 00000038H
	ret	0
ccread_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 48
name$ = 56
tv92 = 64
$T1 = 72
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
$T9 = 336
reader$ = 400
root$ = 408
mark$ = 416
ccread_external_declaration PROC
; File W:\cpp\void\cc\ccread.c
; Line 1257
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
; Line 1258
	mov	eax, DWORD PTR mark$[rsp]
	or	eax, 4
	or	eax, 16
	mov	r8d, eax
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl
	mov	QWORD PTR decl$[rsp], rax
; Line 1260
	cmp	QWORD PTR decl$[rsp], 0
	jne	SHORT $LN2@ccread_ext
	xor	eax, eax
	jmp	$LN1@ccread_ext
$LN2@ccread_ext:
; Line 1262
	mov	rax, QWORD PTR decl$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN9@ccread_ext
	int	3
$LN9@ccread_ext:
; Line 1263
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN11@ccread_ext
	int	3
$LN11@ccread_ext:
; Line 1265
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR name$[rsp], rax
; Line 1267
	mov	rax, QWORD PTR name$[rsp]
	cmp	DWORD PTR [rax], 15
	je	SHORT $LN13@ccread_ext
	int	3
$LN13@ccread_ext:
; Line 1268
	mov	rax, QWORD PTR name$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN15@ccread_ext
	int	3
$LN15@ccread_ext:
; Line 1269
	mov	rax, QWORD PTR name$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN17@ccread_ext
	int	3
$LN17@ccread_ext:
; Line 1271
	mov	rax, QWORD PTR name$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN3@ccread_ext
; Line 1274
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN19@ccread_ext
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv92[rsp], rax
	jmp	SHORT $LN20@ccread_ext
$LN19@ccread_ext:
	mov	QWORD PTR tv92[rsp], 0
$LN20@ccread_ext:
	cmp	DWORD PTR tv92[rsp], 1
	je	SHORT $LN21@ccread_ext
	int	3
$LN21@ccread_ext:
; Line 1276
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rcx+88], rax
; Line 1278
	mov	rax, QWORD PTR name$[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	$LN5@ccread_ext
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN5@ccread_ext
	lea	rax, OFFSET FLAT:$SG49646
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1278				; 000004feH
	lea	r8, OFFSET FLAT:$SG49647
	mov	edx, 126				; 0000007eH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49644
	lea	rdx, OFFSET FLAT:$SG49645
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN5@ccread_ext:
; Line 1279
	jmp	$LN4@ccread_ext
$LN3@ccread_ext:
; Line 1282
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN6@ccread_ext
	lea	rax, OFFSET FLAT:$SG49651
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1282				; 00000502H
	lea	r8, OFFSET FLAT:$SG49652
	mov	edx, 127				; 0000007fH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49649
	lea	rdx, OFFSET FLAT:$SG49650
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
	int	3
$LN6@ccread_ext:
$LN4@ccread_ext:
; Line 1285
	cmp	QWORD PTR decl$[rsp], 0
	jne	$LN7@ccread_ext
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee_end
	test	eax, eax
	jne	SHORT $LN7@ccread_ext
	lea	rax, OFFSET FLAT:$SG49656
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1285				; 00000505H
	lea	r8, OFFSET FLAT:$SG49657
	mov	edx, 128				; 00000080H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49654
	lea	rdx, OFFSET FLAT:$SG49655
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN7@ccread_ext:
; Line 1286
	mov	rax, QWORD PTR decl$[rsp]
$LN1@ccread_ext:
; Line 1287
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
ccread_external_declaration ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stmt$ = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_block_or_single_stmt PROC
; File W:\cpp\void\cc\ccread.c
; Line 1100
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block
	mov	QWORD PTR stmt$[rsp], rax
; Line 1101
	cmp	QWORD PTR stmt$[rsp], 0
	jne	SHORT $LN2@ccread_blo
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_statement
	mov	QWORD PTR stmt$[rsp], rax
$LN2@ccread_blo:
; Line 1102
	mov	rax, QWORD PTR stmt$[rsp]
; Line 1103
	add	rsp, 56					; 00000038H
	ret	0
ccread_block_or_single_stmt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
child$ = 48
then_tree$1 = 56
cond_tree$2 = 64
else_tree$3 = 72
then_tree$4 = 80
cond_tree$5 = 88
expr_tree$6 = 96
ident$7 = 104
list$8 = 112
$T9 = 120
$T10 = 160
$T11 = 192
$T12 = 224
$T13 = 256
$T14 = 288
$T15 = 320
$T16 = 352
$T17 = 384
$T18 = 416
$T19 = 448
$T20 = 480
$T21 = 512
$T22 = 544
$T23 = 576
$T24 = 608
$T25 = 640
$T26 = 672
$T27 = 704
$T28 = 736
$T29 = 768
$T30 = 800
$T31 = 832
$T32 = 864
$T33 = 896
$T34 = 928
$T35 = 960
$T36 = 992
$T37 = 1024
$T38 = 1056
$T39 = 1088
$T40 = 1120
$T41 = 1152
$T42 = 1184
$T43 = 1216
$T44 = 1248
$T45 = 1280
$T46 = 1312
$T47 = 1344
$T48 = 1376
$T49 = 1408
$T50 = 1440
$T51 = 1472
$T52 = 1504
$T53 = 1536
$T54 = 1568
$T55 = 1600
$T56 = 1632
$T57 = 1664
$T58 = 1696
$T59 = 1728
reader$ = 1792
root$ = 1800
mark$ = 1808
ccread_statement PROC
; File W:\cpp\void\cc\ccread.c
; Line 1108
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1768				; 000006e8H
; Line 1109
	mov	QWORD PTR child$[rsp], 0
; Line 1111
	mov	edx, 7
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_sta
; Line 1114
	jmp	$LN3@ccread_sta
$LN2@ccread_sta:
; Line 1115
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN4@ccread_sta
; Line 1116
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block
	mov	QWORD PTR child$[rsp], rax
; Line 1117
	mov	edx, 7
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN6@ccread_sta
	lea	rax, OFFSET FLAT:$SG49490
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1117				; 0000045dH
	lea	r8, OFFSET FLAT:$SG49491
	mov	edx, 108				; 0000006cH
	lea	rcx, QWORD PTR $T43[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49488
	lea	rdx, OFFSET FLAT:$SG49489
	lea	rcx, QWORD PTR $T10[rsp]
	call	cctrace_
	int	3
$LN6@ccread_sta:
; Line 1118
	mov	rax, QWORD PTR child$[rsp]
	jmp	$LN1@ccread_sta
; Line 1119
	jmp	$LN5@ccread_sta
$LN4@ccread_sta:
; Line 1120
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl
	mov	QWORD PTR child$[rsp], rax
	cmp	QWORD PTR child$[rsp], 0
	je	$LN7@ccread_sta
; Line 1121
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN9@ccread_sta
	lea	rax, OFFSET FLAT:$SG49497
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1121				; 00000461H
	lea	r8, OFFSET FLAT:$SG49498
	mov	edx, 109				; 0000006dH
	lea	rcx, QWORD PTR $T44[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49495
	lea	rdx, OFFSET FLAT:$SG49496
	lea	rcx, QWORD PTR $T12[rsp]
	call	cctrace_
	int	3
$LN9@ccread_sta:
; Line 1122
	mov	rax, QWORD PTR child$[rsp]
	jmp	$LN1@ccread_sta
; Line 1123
	jmp	$LN8@ccread_sta
$LN7@ccread_sta:
; Line 1124
	mov	edx, 82					; 00000052H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN10@ccread_sta
; Line 1126
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR expr_tree$6[rsp], rax
; Line 1127
	mov	r8, QWORD PTR expr_tree$6[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_return
	mov	QWORD PTR child$[rsp], rax
; Line 1129
	cmp	QWORD PTR expr_tree$6[rsp], 0
	jne	SHORT $LN12@ccread_sta
	lea	rax, OFFSET FLAT:$SG49504
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1129				; 00000469H
	lea	r8, OFFSET FLAT:$SG49505
	mov	edx, 110				; 0000006eH
	lea	rcx, QWORD PTR $T45[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49502
	lea	rdx, OFFSET FLAT:$SG49503
	lea	rcx, QWORD PTR $T14[rsp]
	call	cctrace_
	int	3
$LN12@ccread_sta:
; Line 1131
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN13@ccread_sta
	lea	rax, OFFSET FLAT:$SG49509
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1131				; 0000046bH
	lea	r8, OFFSET FLAT:$SG49510
	mov	edx, 111				; 0000006fH
	lea	rcx, QWORD PTR $T46[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49507
	lea	rdx, OFFSET FLAT:$SG49508
	lea	rcx, QWORD PTR $T16[rsp]
	call	cctrace_
	int	3
$LN13@ccread_sta:
; Line 1132
	jmp	$LN11@ccread_sta
$LN10@ccread_sta:
; Line 1133
	mov	edx, 79					; 0000004fH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN14@ccread_sta
; Line 1135
	mov	QWORD PTR cond_tree$2[rsp], 0
	mov	QWORD PTR then_tree$1[rsp], 0
; Line 1137
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN16@ccread_sta
	lea	rax, OFFSET FLAT:$SG49516
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1137				; 00000471H
	lea	r8, OFFSET FLAT:$SG49517
	mov	edx, 112				; 00000070H
	lea	rcx, QWORD PTR $T47[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49514
	lea	rdx, OFFSET FLAT:$SG49515
	lea	rcx, QWORD PTR $T18[rsp]
	call	cctrace_
	int	3
$LN16@ccread_sta:
; Line 1138
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR cond_tree$2[rsp], rax
; Line 1139
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN17@ccread_sta
	lea	rax, OFFSET FLAT:$SG49521
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1139				; 00000473H
	lea	r8, OFFSET FLAT:$SG49522
	mov	edx, 113				; 00000071H
	lea	rcx, QWORD PTR $T48[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49519
	lea	rdx, OFFSET FLAT:$SG49520
	lea	rcx, QWORD PTR $T20[rsp]
	call	cctrace_
	int	3
$LN17@ccread_sta:
; Line 1141
	cmp	QWORD PTR cond_tree$2[rsp], 0
	jne	SHORT $LN18@ccread_sta
	lea	rax, OFFSET FLAT:$SG49526
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1141				; 00000475H
	lea	r8, OFFSET FLAT:$SG49527
	mov	edx, 114				; 00000072H
	lea	rcx, QWORD PTR $T49[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T22[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49524
	lea	rdx, OFFSET FLAT:$SG49525
	lea	rcx, QWORD PTR $T22[rsp]
	call	cctrace_
	int	3
$LN18@ccread_sta:
; Line 1143
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	$LN19@ccread_sta
; Line 1145
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR then_tree$1[rsp], rax
; Line 1146
	cmp	QWORD PTR then_tree$1[rsp], 0
	jne	SHORT $LN20@ccread_sta
	lea	rax, OFFSET FLAT:$SG49532
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1146				; 0000047aH
	lea	r8, OFFSET FLAT:$SG49533
	mov	edx, 115				; 00000073H
	lea	rcx, QWORD PTR $T50[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49530
	lea	rdx, OFFSET FLAT:$SG49531
	lea	rcx, QWORD PTR $T24[rsp]
	call	cctrace_
	int	3
$LN20@ccread_sta:
$LN19@ccread_sta:
; Line 1148
	mov	r9, QWORD PTR then_tree$1[rsp]
	mov	r8, QWORD PTR cond_tree$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_while
	mov	QWORD PTR child$[rsp], rax
; Line 1149
	jmp	$LN15@ccread_sta
$LN14@ccread_sta:
; Line 1150
	mov	edx, 81					; 00000051H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN21@ccread_sta
; Line 1152
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_litide
	mov	QWORD PTR ident$7[rsp], rax
; Line 1153
	cmp	QWORD PTR ident$7[rsp], 0
	jne	SHORT $LN23@ccread_sta
	lea	rax, OFFSET FLAT:$SG49539
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1153				; 00000481H
	lea	r8, OFFSET FLAT:$SG49540
	mov	edx, 116				; 00000074H
	lea	rcx, QWORD PTR $T51[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T26[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49537
	lea	rdx, OFFSET FLAT:$SG49538
	lea	rcx, QWORD PTR $T26[rsp]
	call	cctrace_
	int	3
$LN23@ccread_sta:
; Line 1155
	mov	r8, QWORD PTR ident$7[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_goto
	mov	QWORD PTR child$[rsp], rax
; Line 1157
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN24@ccread_sta
	lea	rax, OFFSET FLAT:$SG49544
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1157				; 00000485H
	lea	r8, OFFSET FLAT:$SG49545
	mov	edx, 117				; 00000075H
	lea	rcx, QWORD PTR $T52[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49542
	lea	rdx, OFFSET FLAT:$SG49543
	lea	rcx, QWORD PTR $T28[rsp]
	call	cctrace_
	int	3
$LN24@ccread_sta:
; Line 1158
	jmp	$LN22@ccread_sta
$LN21@ccread_sta:
; Line 1159
	mov	edx, 75					; 0000004bH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN25@ccread_sta
; Line 1162
	jmp	$LN26@ccread_sta
$LN25@ccread_sta:
; Line 1163
	mov	edx, 73					; 00000049H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN27@ccread_sta
; Line 1165
	mov	QWORD PTR cond_tree$5[rsp], 0
; Line 1166
	mov	QWORD PTR then_tree$4[rsp], 0
; Line 1167
	mov	QWORD PTR else_tree$3[rsp], 0
; Line 1169
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN29@ccread_sta
	lea	rax, OFFSET FLAT:$SG49553
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1169				; 00000491H
	lea	r8, OFFSET FLAT:$SG49554
	mov	edx, 118				; 00000076H
	lea	rcx, QWORD PTR $T53[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49551
	lea	rdx, OFFSET FLAT:$SG49552
	lea	rcx, QWORD PTR $T30[rsp]
	call	cctrace_
	int	3
$LN29@ccread_sta:
; Line 1170
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR cond_tree$5[rsp], rax
; Line 1171
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN30@ccread_sta
	lea	rax, OFFSET FLAT:$SG49558
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1171				; 00000493H
	lea	r8, OFFSET FLAT:$SG49559
	mov	edx, 119				; 00000077H
	lea	rcx, QWORD PTR $T54[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T31[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T32[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49556
	lea	rdx, OFFSET FLAT:$SG49557
	lea	rcx, QWORD PTR $T32[rsp]
	call	cctrace_
	int	3
$LN30@ccread_sta:
; Line 1173
	cmp	QWORD PTR cond_tree$5[rsp], 0
	jne	SHORT $LN31@ccread_sta
	lea	rax, OFFSET FLAT:$SG49563
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1173				; 00000495H
	lea	r8, OFFSET FLAT:$SG49564
	mov	edx, 120				; 00000078H
	lea	rcx, QWORD PTR $T55[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T34[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49561
	lea	rdx, OFFSET FLAT:$SG49562
	lea	rcx, QWORD PTR $T34[rsp]
	call	cctrace_
	int	3
$LN31@ccread_sta:
; Line 1175
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	$LN32@ccread_sta
; Line 1176
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR then_tree$4[rsp], rax
; Line 1177
	cmp	QWORD PTR then_tree$4[rsp], 0
	jne	SHORT $LN33@ccread_sta
	lea	rax, OFFSET FLAT:$SG49569
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1177				; 00000499H
	lea	r8, OFFSET FLAT:$SG49570
	mov	edx, 121				; 00000079H
	lea	rcx, QWORD PTR $T56[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T35[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T36[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49567
	lea	rdx, OFFSET FLAT:$SG49568
	lea	rcx, QWORD PTR $T36[rsp]
	call	cctrace_
	int	3
$LN33@ccread_sta:
$LN32@ccread_sta:
; Line 1179
	mov	edx, 75					; 0000004bH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN34@ccread_sta
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	$LN34@ccread_sta
; Line 1180
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR else_tree$3[rsp], rax
; Line 1181
	cmp	QWORD PTR else_tree$3[rsp], 0
	jne	SHORT $LN35@ccread_sta
	lea	rax, OFFSET FLAT:$SG49575
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1181				; 0000049dH
	lea	r8, OFFSET FLAT:$SG49576
	mov	edx, 122				; 0000007aH
	lea	rcx, QWORD PTR $T57[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T37[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T38[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49573
	lea	rdx, OFFSET FLAT:$SG49574
	lea	rcx, QWORD PTR $T38[rsp]
	call	cctrace_
	int	3
$LN35@ccread_sta:
$LN34@ccread_sta:
; Line 1184
	mov	rax, QWORD PTR else_tree$3[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR then_tree$4[rsp]
	mov	r8, QWORD PTR cond_tree$5[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_ternary
	mov	QWORD PTR child$[rsp], rax
; Line 1186
	jmp	$LN28@ccread_sta
$LN27@ccread_sta:
; Line 1188
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR child$[rsp], rax
	cmp	QWORD PTR child$[rsp], 0
	je	$LN36@ccread_sta
; Line 1191
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	$LN37@ccread_sta
; Line 1193
	mov	rax, QWORD PTR child$[rsp]
	cmp	DWORD PTR [rax], 6
	jne	$LN38@ccread_sta
; Line 1195
	mov	edx, 11
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN40@ccread_sta
; Line 1198
	mov	QWORD PTR list$8[rsp], 0
; Line 1199
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN42@ccread_sta
; Line 1200
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_statement_list
	mov	QWORD PTR list$8[rsp], rax
$LN42@ccread_sta:
; Line 1202
	mov	r9, QWORD PTR list$8[rsp]
	mov	r8, QWORD PTR child$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_label
	mov	QWORD PTR child$[rsp], rax
; Line 1203
	jmp	SHORT $LN41@ccread_sta
$LN40@ccread_sta:
; Line 1204
	lea	rax, OFFSET FLAT:$SG49586
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1204				; 000004b4H
	lea	r8, OFFSET FLAT:$SG49587
	mov	edx, 123				; 0000007bH
	lea	rcx, QWORD PTR $T58[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T39[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T40[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49584
	lea	rdx, OFFSET FLAT:$SG49585
	lea	rcx, QWORD PTR $T40[rsp]
	call	cctrace_
	int	3
$LN41@ccread_sta:
; Line 1205
	jmp	SHORT $LN39@ccread_sta
$LN38@ccread_sta:
; Line 1206
	lea	rax, OFFSET FLAT:$SG49590
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1206				; 000004b6H
	lea	r8, OFFSET FLAT:$SG49591
	mov	edx, 124				; 0000007cH
	lea	rcx, QWORD PTR $T59[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T41[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49588
	lea	rdx, OFFSET FLAT:$SG49589
	lea	rcx, QWORD PTR $T42[rsp]
	call	cctrace_
	int	3
$LN39@ccread_sta:
$LN37@ccread_sta:
; Line 1209
	mov	rax, QWORD PTR child$[rsp]
	jmp	SHORT $LN1@ccread_sta
$LN36@ccread_sta:
$LN28@ccread_sta:
$LN26@ccread_sta:
$LN22@ccread_sta:
$LN15@ccread_sta:
$LN11@ccread_sta:
$LN8@ccread_sta:
$LN5@ccread_sta:
$LN3@ccread_sta:
; Line 1211
	mov	rax, QWORD PTR child$[rsp]
$LN1@ccread_sta:
; Line 1212
	add	rsp, 1768				; 000006e8H
	pop	rdi
	pop	rsi
	ret	0
ccread_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
next$ = 40
reader$ = 64
root$ = 72
mark$ = 80
ccread_statement_list PROC
; File W:\cpp\void\cc\ccread.c
; Line 1216
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN2@ccread_sta:
; Line 1217
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_statement
	mov	QWORD PTR next$[rsp], rax
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN3@ccread_sta
; Line 1218
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR next$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 1219
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee_end
	test	eax, eax
	je	SHORT $LN4@ccread_sta
	jmp	SHORT $LN3@ccread_sta
$LN4@ccread_sta:
; Line 1220
	jmp	SHORT $LN2@ccread_sta
$LN3@ccread_sta:
; Line 1221
	mov	rax, QWORD PTR list$[rsp]
; Line 1222
	add	rsp, 56					; 00000038H
	ret	0
ccread_statement_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
reader$ = 192
root$ = 200
mark$ = 208
ccread_block PROC
; File W:\cpp\void\cc\ccread.c
; Line 1226
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	QWORD PTR tree$[rsp], 0
; Line 1227
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_blo
; Line 1228
	xor	r8d, r8d
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_block
	mov	QWORD PTR tree$[rsp], rax
; Line 1229
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_statement_list
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 1230
	mov	edx, 7
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN3@ccread_blo
; Line 1231
	lea	rax, OFFSET FLAT:$SG49614
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1231				; 000004cfH
	lea	r8, OFFSET FLAT:$SG49615
	mov	edx, 125				; 0000007dH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49612
	lea	rdx, OFFSET FLAT:$SG49613
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN3@ccread_blo:
$LN2@ccread_blo:
; Line 1233
	mov	rax, QWORD PTR tree$[rsp]
; Line 1234
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccread_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
next$ = 40
reader$ = 64
root$ = 72
mark$ = 80
ccread_param_decl_list PROC
; File W:\cpp\void\cc\ccread.c
; Line 1074
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN2@ccread_par:
; Line 1075
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_decl
	mov	QWORD PTR next$[rsp], rax
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN3@ccread_par
; Line 1076
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR next$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 1077
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_par
	jmp	SHORT $LN3@ccread_par
$LN4@ccread_par:
; Line 1078
	jmp	SHORT $LN2@ccread_par
$LN3@ccread_par:
; Line 1079
	mov	rax, QWORD PTR list$[rsp]
; Line 1080
	add	rsp, 56					; 00000038H
	ret	0
ccread_param_decl_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spec$ = 48
decl$ = 56
$T1 = 64
$T2 = 96
$T3 = 128
reader$ = 192
root$ = 200
mark$ = 208
ccread_param_decl PROC
; File W:\cpp\void\cc\ccread.c
; Line 1059
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 1060
	mov	QWORD PTR spec$[rsp], 0
; Line 1061
	mov	QWORD PTR decl$[rsp], 0
; Line 1063
	mov	edx, 13
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_par
; Line 1064
	lea	rax, OFFSET FLAT:$SG49413
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1064				; 00000428H
	lea	r8, OFFSET FLAT:$SG49414
	mov	edx, 107				; 0000006bH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49411
	lea	rdx, OFFSET FLAT:$SG49412
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN2@ccread_par:
; Line 1066
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_declaration_specifiers
	mov	QWORD PTR spec$[rsp], rax
; Line 1067
	cmp	QWORD PTR spec$[rsp], 0
	je	SHORT $LN3@ccread_par
	mov	r9, QWORD PTR spec$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
$LN3@ccread_par:
; Line 1069
	mov	rax, QWORD PTR decl$[rsp]
; Line 1070
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccread_param_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_alignment_specifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 989
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR reader$[rsp]
	call	kttc__peek_alignment_specifier
	test	rax, rax
	je	SHORT $LN2@ccread_ali
; Line 990
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 992
	mov	eax, 1
	jmp	SHORT $LN1@ccread_ali
$LN2@ccread_ali:
; Line 994
	xor	eax, eax
$LN1@ccread_ali:
; Line 995
	add	rsp, 56					; 00000038H
	ret	0
ccread_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_function_specifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 975
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR reader$[rsp]
	call	kttc__peek_func_specifier
	test	rax, rax
	je	SHORT $LN2@ccread_fun
; Line 976
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 978
	mov	eax, 1
	jmp	SHORT $LN1@ccread_fun
$LN2@ccread_fun:
; Line 980
	xor	eax, eax
$LN1@ccread_fun:
; Line 981
	add	rsp, 56					; 00000038H
	ret	0
ccread_function_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_type_qualifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 961
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR reader$[rsp]
	call	kttc__peek_type_qualifier
	test	rax, rax
	je	SHORT $LN2@ccread_typ
; Line 962
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 964
	mov	eax, 1
	jmp	SHORT $LN1@ccread_typ
$LN2@ccread_typ:
; Line 966
	xor	eax, eax
$LN1@ccread_typ:
; Line 967
	add	rsp, 56					; 00000038H
	ret	0
ccread_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_storage_class_specifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 942
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 943
	mov	rcx, QWORD PTR reader$[rsp]
	call	kttc__peek_storage_class
	test	rax, rax
	je	SHORT $LN2@ccread_sto
; Line 945
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 948
	mov	eax, 1
	jmp	SHORT $LN1@ccread_sto
$LN2@ccread_sto:
; Line 950
	xor	eax, eax
$LN1@ccread_sto:
; Line 951
	add	rsp, 56					; 00000038H
	ret	0
ccread_storage_class_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
tok$1 = 40
reader$ = 64
root$ = 72
mark$ = 80
ccread_type_specifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 909
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 911
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee_typespec
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	$LN4@ccread_typ
; Line 912
	mov	rax, QWORD PTR tok$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	mov	eax, DWORD PTR tv68[rsp]
	sub	eax, 47					; 0000002fH
	mov	DWORD PTR tv68[rsp], eax
	cmp	DWORD PTR tv68[rsp], 15
	ja	$LN2@ccread_typ
	movsxd	rax, DWORD PTR tv68[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN19@ccread_typ[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN5@ccread_typ:
$LN6@ccread_typ:
; Line 914
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_or_union_specifier
	jmp	$LN1@ccread_typ
$LN7@ccread_typ:
; Line 915
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	$LN1@ccread_typ
$LN8@ccread_typ:
; Line 916
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	$LN1@ccread_typ
$LN9@ccread_typ:
; Line 917
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	$LN1@ccread_typ
$LN10@ccread_typ:
; Line 918
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	$LN1@ccread_typ
$LN11@ccread_typ:
; Line 919
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	$LN1@ccread_typ
$LN12@ccread_typ:
; Line 920
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	SHORT $LN1@ccread_typ
$LN13@ccread_typ:
; Line 921
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	SHORT $LN1@ccread_typ
$LN14@ccread_typ:
; Line 922
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	SHORT $LN1@ccread_typ
$LN15@ccread_typ:
; Line 923
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	SHORT $LN1@ccread_typ
$LN16@ccread_typ:
; Line 924
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	SHORT $LN1@ccread_typ
$LN17@ccread_typ:
; Line 925
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	jmp	SHORT $LN1@ccread_typ
$LN2@ccread_typ:
$LN4@ccread_typ:
; Line 928
	xor	eax, eax
$LN1@ccread_typ:
; Line 929
	add	rsp, 56					; 00000038H
	ret	0
	npad	2
$LN19@ccread_typ:
	DD	$LN7@ccread_typ
	DD	$LN8@ccread_typ
	DD	$LN9@ccread_typ
	DD	$LN10@ccread_typ
	DD	$LN17@ccread_typ
	DD	$LN16@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN15@ccread_typ
	DD	$LN14@ccread_typ
	DD	$LN13@ccread_typ
	DD	$LN12@ccread_typ
	DD	$LN11@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN5@ccread_typ
	DD	$LN6@ccread_typ
ccread_type_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$1 = 48
next$2 = 56
name$3 = 64
tree$4 = 72
$T5 = 80
$T6 = 112
$T7 = 144
$T8 = 176
$T9 = 208
$T10 = 240
$T11 = 272
$T12 = 304
$T13 = 336
reader$ = 400
root$ = 408
mark$ = 416
ccread_struct_or_union_specifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 862
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
	mov	edx, 62					; 0000003eH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN4@ccread_str
; Line 865
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_litide
	mov	QWORD PTR name$3[rsp], rax
; Line 866
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN6@ccread_str
; Line 867
	lea	rax, OFFSET FLAT:$SG49316
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 867				; 00000363H
	lea	r8, OFFSET FLAT:$SG49317
	mov	edx, 104				; 00000068H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49314
	lea	rdx, OFFSET FLAT:$SG49315
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN6@ccread_str:
; Line 869
	mov	QWORD PTR list$1[rsp], 0
$LN2@ccread_str:
; Line 870
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_decl
	mov	QWORD PTR next$2[rsp], rax
	cmp	QWORD PTR next$2[rsp], 0
	je	$LN3@ccread_str
; Line 871
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$1[rsp]
	call	ccdlb_arradd
	mov	rcx, QWORD PTR list$1[rsp]
	mov	rdx, QWORD PTR next$2[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 872
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+16]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN7@ccread_str
	lea	rax, OFFSET FLAT:$SG49321
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 872				; 00000368H
	lea	r8, OFFSET FLAT:$SG49322
	mov	edx, 105				; 00000069H
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49319
	lea	rdx, OFFSET FLAT:$SG49320
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
	int	3
$LN7@ccread_str:
; Line 873
	jmp	$LN2@ccread_str
$LN3@ccread_str:
; Line 874
	mov	edx, 7
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN8@ccread_str
; Line 875
	lea	rax, OFFSET FLAT:$SG49326
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 875				; 0000036bH
	lea	r8, OFFSET FLAT:$SG49327
	mov	edx, 106				; 0000006aH
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49324
	lea	rdx, OFFSET FLAT:$SG49325
	lea	rcx, QWORD PTR $T10[rsp]
	call	cctrace_
	int	3
$LN8@ccread_str:
; Line 876
	mov	rdx, QWORD PTR name$3[rsp]
	mov	rcx, QWORD PTR list$1[rsp]
	call	cctreee_struct_specifier
	mov	QWORD PTR tree$4[rsp], rax
; Line 877
	mov	rax, QWORD PTR tree$4[rsp]
	jmp	SHORT $LN1@ccread_str
; Line 878
	jmp	SHORT $LN5@ccread_str
$LN4@ccread_str:
; Line 879
	mov	edx, 61					; 0000003dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN9@ccread_str
; Line 881
	lea	rax, OFFSET FLAT:$SG49329
	test	rax, rax
	je	SHORT $LN11@ccread_str
	int	3
$LN11@ccread_str:
$LN9@ccread_str:
$LN5@ccread_str:
; Line 883
	xor	eax, eax
$LN1@ccread_str:
; Line 884
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
ccread_struct_or_union_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
list$ = 56
$T1 = 64
$T2 = 96
$T3 = 128
reader$ = 192
root$ = 200
mark$ = 208
ccread_struct_decl PROC
; File W:\cpp\void\cc\ccread.c
; Line 851
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 852
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_specifier_qualifier_list
	mov	QWORD PTR type$[rsp], rax
	cmp	QWORD PTR type$[rsp], 0
	je	$LN2@ccread_str
; Line 853
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_decl_name_list
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN3@ccread_str
; Line 854
	mov	r9, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR type$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_decl
	jmp	SHORT $LN1@ccread_str
	jmp	SHORT $LN4@ccread_str
$LN3@ccread_str:
; Line 855
	lea	rax, OFFSET FLAT:$SG49294
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 855				; 00000357H
	lea	r8, OFFSET FLAT:$SG49295
	mov	edx, 103				; 00000067H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49292
	lea	rdx, OFFSET FLAT:$SG49293
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN4@ccread_str:
$LN2@ccread_str:
; Line 857
	xor	eax, eax
$LN1@ccread_str:
; Line 858
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccread_struct_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
list$ = 56
$T1 = 64
$T2 = 96
$T3 = 128
reader$ = 192
root$ = 200
mark$ = 208
ccread_init_decl PROC
; File W:\cpp\void\cc\ccread.c
; Line 839
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 840
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_declaration_specifiers
	mov	QWORD PTR type$[rsp], rax
	cmp	QWORD PTR type$[rsp], 0
	je	$LN2@ccread_ini
; Line 841
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_attribute_seq
; Line 842
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl_name_list
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN3@ccread_ini
; Line 843
	mov	r9, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR type$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_decl
	jmp	SHORT $LN1@ccread_ini
	jmp	SHORT $LN4@ccread_ini
$LN3@ccread_ini:
; Line 844
	lea	rax, OFFSET FLAT:$SG49279
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 844				; 0000034cH
	lea	r8, OFFSET FLAT:$SG49280
	mov	edx, 102				; 00000066H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49277
	lea	rdx, OFFSET FLAT:$SG49278
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN4@ccread_ini:
$LN2@ccread_ini:
; Line 846
	xor	eax, eax
$LN1@ccread_ini:
; Line 847
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccread_init_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 64
root$ = 72
mark$ = 80
type$ = 88
ccread_struct_decl_name_list PROC
; File W:\cpp\void\cc\ccread.c
; Line 829
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_str:
; Line 831
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_decl_name
	mov	QWORD PTR next$[rsp], rax
; Line 832
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN5@ccread_str
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR next$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
$LN5@ccread_str:
; Line 833
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN6@ccread_str
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_str
$LN6@ccread_str:
; Line 834
	mov	rax, QWORD PTR list$[rsp]
; Line 835
	add	rsp, 56					; 00000038H
	ret	0
ccread_struct_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
next$ = 40
reader$ = 64
root$ = 72
mark$ = 80
type$ = 88
ccread_init_decl_name_list PROC
; File W:\cpp\void\cc\ccread.c
; Line 817
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR root$[rsp], 0
	jne	SHORT $LN7@ccread_ini
	int	3
$LN7@ccread_ini:
; Line 818
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_ini:
; Line 820
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl_name
	mov	QWORD PTR next$[rsp], rax
; Line 821
	cmp	QWORD PTR next$[rsp], 0
	jne	SHORT $LN5@ccread_ini
	jmp	SHORT $LN3@ccread_ini
$LN5@ccread_ini:
; Line 822
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR next$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 823
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_ini
$LN3@ccread_ini:
; Line 824
	mov	rax, QWORD PTR list$[rsp]
; Line 825
	add	rsp, 56					; 00000038H
	ret	0
ccread_init_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
reader$ = 192
root$ = 200
mark$ = 208
type$ = 216
ccread_struct_decl_name PROC
; File W:\cpp\void\cc\ccread.c
; Line 804
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN6@ccread_str
	int	3
$LN6@ccread_str:
; Line 805
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
; Line 806
	cmp	QWORD PTR decl$[rsp], 0
	je	$LN2@ccread_str
; Line 807
	mov	edx, 11
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN3@ccread_str
; Line 808
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_constant_expression
	mov	rcx, QWORD PTR decl$[rsp]
	mov	QWORD PTR [rcx+56], rax
; Line 809
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+56], 0
	jne	SHORT $LN4@ccread_str
	lea	rax, OFFSET FLAT:$SG49237
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 809				; 00000329H
	lea	r8, OFFSET FLAT:$SG49238
	mov	edx, 101				; 00000065H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49235
	lea	rdx, OFFSET FLAT:$SG49236
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN4@ccread_str:
$LN3@ccread_str:
$LN2@ccread_str:
; Line 812
	mov	rax, QWORD PTR decl$[rsp]
; Line 813
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccread_struct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
reader$ = 192
root$ = 200
mark$ = 208
type$ = 216
ccread_init_decl_name PROC
; File W:\cpp\void\cc\ccread.c
; Line 789
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN6@ccread_ini
	int	3
$LN6@ccread_ini:
; Line 791
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
; Line 793
	cmp	QWORD PTR decl$[rsp], 0
	je	$LN2@ccread_ini
; Line 794
	mov	edx, 110				; 0000006eH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN3@ccread_ini
; Line 795
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_initializer
	mov	rcx, QWORD PTR decl$[rsp]
	mov	QWORD PTR [rcx+64], rax
; Line 796
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+64], 0
	jne	SHORT $LN4@ccread_ini
	lea	rax, OFFSET FLAT:$SG49222
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 796				; 0000031cH
	lea	r8, OFFSET FLAT:$SG49223
	mov	edx, 100				; 00000064H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49220
	lea	rdx, OFFSET FLAT:$SG49221
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
	int	3
$LN4@ccread_ini:
$LN3@ccread_ini:
$LN2@ccread_ini:
; Line 799
	mov	rax, QWORD PTR decl$[rsp]
; Line 800
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccread_init_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_decl_name_modifier_maybe PROC
; File W:\cpp\void\cc\ccread.c
; Line 773
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	edx, 93					; 0000005dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN2@ccread_dec
; Line 774
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name_modifier_maybe
	mov	rcx, rax
	call	cctreee_pointer_modifier
	jmp	SHORT $LN1@ccread_dec
$LN2@ccread_dec:
; Line 775
	mov	rax, QWORD PTR type$[rsp]
$LN1@ccread_dec:
; Line 776
	add	rsp, 40					; 00000028H
	ret	0
ccread_decl_name_modifier_maybe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mod$1 = 48
tmp$2 = 56
res$3 = 64
name$4 = 72
mod$5 = 80
mod$6 = 88
$T7 = 96
$T8 = 128
$T9 = 160
reader$ = 224
root$ = 232
mark$ = 240
type$ = 248
ccread_direct_decl_name PROC
; File W:\cpp\void\cc\ccread.c
; Line 748
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_dir
; Line 751
	mov	rcx, QWORD PTR type$[rsp]
	call	cctree_clone
	mov	QWORD PTR mod$1[rsp], rax
; Line 752
	mov	r9, QWORD PTR mod$1[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR res$3[rsp], rax
; Line 753
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_dir
; Line 754
	lea	rax, OFFSET FLAT:$SG49191
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 754				; 000002f2H
	lea	r8, OFFSET FLAT:$SG49192
	mov	edx, 99					; 00000063H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49189
	lea	rdx, OFFSET FLAT:$SG49190
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
	int	3
$LN4@ccread_dir:
; Line 756
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR tmp$2[rsp], rax
; Line 757
	mov	rdi, QWORD PTR mod$1[rsp]
	mov	rsi, QWORD PTR tmp$2[rsp]
	mov	ecx, 152				; 00000098H
	rep movsb
; Line 758
	mov	rcx, QWORD PTR tmp$2[rsp]
	call	cctree_del
; Line 759
	mov	rax, QWORD PTR res$3[rsp]
	jmp	$LN1@ccread_dir
; Line 760
	jmp	$LN3@ccread_dir
$LN2@ccread_dir:
; Line 761
	mov	edx, 19
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN5@ccread_dir
; Line 762
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_litide
	mov	QWORD PTR name$4[rsp], rax
; Line 763
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR mod$5[rsp], rax
; Line 764
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR name$4[rsp]
	mov	r8, QWORD PTR mod$5[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_decl_name
	jmp	SHORT $LN1@ccread_dir
; Line 765
	jmp	SHORT $LN6@ccread_dir
$LN5@ccread_dir:
; Line 766
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR mod$6[rsp], rax
; Line 767
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR mod$6[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_decl_name
$LN6@ccread_dir:
$LN3@ccread_dir:
$LN1@ccread_dir:
; Line 769
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
ccread_direct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
modifier$1 = 48
list$2 = 56
rval$3 = 64
modi$4 = 72
$T5 = 80
$T6 = 112
$T7 = 144
$T8 = 176
$T9 = 208
$T10 = 240
$T11 = 272
$T12 = 304
$T13 = 336
$T14 = 368
$T15 = 400
$T16 = 432
reader$ = 496
root$ = 504
mark$ = 512
type$ = 520
ccread_direct_decl_name_modifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 725
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 472				; 000001d8H
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_dir
; Line 726
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_type_list
	mov	QWORD PTR list$2[rsp], rax
; Line 727
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_dir
	lea	rax, OFFSET FLAT:$SG49155
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 727				; 000002d7H
	lea	r8, OFFSET FLAT:$SG49156
	mov	edx, 95					; 0000005fH
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49153
	lea	rdx, OFFSET FLAT:$SG49154
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN4@ccread_dir:
; Line 728
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR modifier$1[rsp], rax
; Line 729
	mov	rax, QWORD PTR modifier$1[rsp]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN5@ccread_dir
	lea	rax, OFFSET FLAT:$SG49160
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 729				; 000002d9H
	lea	r8, OFFSET FLAT:$SG49161
	mov	edx, 96					; 00000060H
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49158
	lea	rdx, OFFSET FLAT:$SG49159
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
$LN5@ccread_dir:
; Line 730
	mov	rax, QWORD PTR modifier$1[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN6@ccread_dir
	lea	rax, OFFSET FLAT:$SG49165
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 730				; 000002daH
	lea	r8, OFFSET FLAT:$SG49166
	mov	edx, 97					; 00000061H
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49163
	lea	rdx, OFFSET FLAT:$SG49164
	lea	rcx, QWORD PTR $T10[rsp]
	call	cctrace_
$LN6@ccread_dir:
; Line 731
	mov	rdx, QWORD PTR list$2[rsp]
	mov	rcx, QWORD PTR modifier$1[rsp]
	call	cctreee_function_modifier
	jmp	$LN1@ccread_dir
; Line 732
	jmp	$LN3@ccread_dir
$LN2@ccread_dir:
; Line 733
	mov	edx, 8
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN7@ccread_dir
; Line 735
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR rval$3[rsp], rax
; Line 737
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN8@ccread_dir
; Line 738
	lea	rax, OFFSET FLAT:$SG49171
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 738				; 000002e2H
	lea	r8, OFFSET FLAT:$SG49172
	mov	edx, 98					; 00000062H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49169
	lea	rdx, OFFSET FLAT:$SG49170
	lea	rcx, QWORD PTR $T12[rsp]
	call	cctrace_
	int	3
$LN8@ccread_dir:
; Line 740
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR modi$4[rsp], rax
; Line 741
	mov	rdx, QWORD PTR rval$3[rsp]
	mov	rcx, QWORD PTR modi$4[rsp]
	call	cctreee_array_modifier
	jmp	SHORT $LN1@ccread_dir
$LN7@ccread_dir:
$LN3@ccread_dir:
; Line 743
	mov	rax, QWORD PTR type$[rsp]
$LN1@ccread_dir:
; Line 744
	add	rsp, 472				; 000001d8H
	pop	rdi
	pop	rsi
	ret	0
ccread_direct_decl_name_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_specifier_qualifier_list PROC
; File W:\cpp\void\cc\ccread.c
; Line 1004
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1005
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_type_specifier
	mov	QWORD PTR type$[rsp], rax
; Line 1006
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_type_qualifier
; Line 1007
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_alignment_specifier
; Line 1009
	mov	rax, QWORD PTR type$[rsp]
; Line 1010
	add	rsp, 56					; 00000038H
	ret	0
ccread_specifier_qualifier_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_attribute_seq PROC
; File W:\cpp\void\cc\ccread.c
; Line 1019
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 1021
	xor	eax, eax
; Line 1022
	ret	0
ccread_attribute_seq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_declaration_specifiers PROC
; File W:\cpp\void\cc\ccread.c
; Line 1033
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1034
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_storage_class_specifier
; Line 1036
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_specifier_qualifier_list
	mov	QWORD PTR type$[rsp], rax
; Line 1038
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_function_specifier
; Line 1040
	mov	rax, QWORD PTR type$[rsp]
; Line 1041
	add	rsp, 56					; 00000038H
	ret	0
ccread_declaration_specifiers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
reader$ = 64
root$ = 72
mark$ = 80
type$ = 88
ccread_decl_name PROC
; File W:\cpp\void\cc\ccread.c
; Line 780
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN3@ccread_dec
	int	3
$LN3@ccread_dec:
; Line 782
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name
	mov	QWORD PTR tree$[rsp], rax
; Line 784
	mov	rax, QWORD PTR tree$[rsp]
; Line 785
	add	rsp, 56					; 00000038H
	ret	0
ccread_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_initializer PROC
; File W:\cpp\void\cc\ccread.c
; Line 705
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 720
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_assignment
; Line 721
	add	rsp, 40					; 00000028H
	ret	0
ccread_initializer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_param_type_list PROC
; File W:\cpp\void\cc\ccread.c
; Line 1084
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1085
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_decl_list
	mov	QWORD PTR list$[rsp], rax
; Line 1090
	mov	rax, QWORD PTR list$[rsp]
; Line 1091
	add	rsp, 56					; 00000038H
	ret	0
ccread_param_type_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv162 = 48
tv149 = 56
tv174 = 64
tv147 = 72
result$ = 80
$T1 = 88
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
reader$ = 320
root$ = 328
mark$ = 336
ccread_constant_expression PROC
; File W:\cpp\void\cc\ccread.c
; Line 583
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 584
	lea	rax, OFFSET FLAT:$SG49073
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 584				; 00000248H
	lea	r8, OFFSET FLAT:$SG49074
	mov	edx, 91					; 0000005bH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv149[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv162[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv162[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49072
	mov	rcx, QWORD PTR tv149[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 585
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_conditional
	mov	QWORD PTR result$[rsp], rax
; Line 586
	lea	rax, OFFSET FLAT:$SG49076
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 586				; 0000024aH
	lea	r8, OFFSET FLAT:$SG49077
	mov	edx, 92					; 0000005cH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv147[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv174[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv174[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49075
	mov	rcx, QWORD PTR tv147[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 587
	mov	rax, QWORD PTR result$[rsp]
; Line 588
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
ccread_constant_expression ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tok$1 = 56
tv179 = 64
tv163 = 72
rhs$2 = 80
tv192 = 88
tv161 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_assignment PROC
; File W:\cpp\void\cc\ccread.c
; Line 567
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 568
	lea	rax, OFFSET FLAT:$SG49058
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 568				; 00000238H
	lea	r8, OFFSET FLAT:$SG49059
	mov	edx, 89					; 00000059H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv163[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv179[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv179[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49057
	mov	rcx, QWORD PTR tv163[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 569
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_conditional
	mov	QWORD PTR lhs$[rsp], rax
; Line 570
	mov	edx, 110				; 0000006eH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	SHORT $LN2@ccread_ass
; Line 571
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_assignment
	mov	QWORD PTR rhs$2[rsp], rax
; Line 572
	mov	rax, QWORD PTR rhs$2[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_ass:
; Line 574
	lea	rax, OFFSET FLAT:$SG49062
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 574				; 0000023eH
	lea	r8, OFFSET FLAT:$SG49063
	mov	edx, 90					; 0000005aH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv161[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv192[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv192[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49061
	mov	rcx, QWORD PTR tv161[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 575
	mov	rax, QWORD PTR lhs$[rsp]
; Line 576
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_assignment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
rhs$1 = 56
lhs$2 = 64
tv200 = 72
tv181 = 80
tv223 = 88
tv179 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
$T9 = 304
$T10 = 336
$T11 = 368
parser$ = 432
root$ = 440
mark$ = 448
ccread_conditional PROC
; File W:\cpp\void\cc\ccread.c
; Line 541
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
; Line 542
	lea	rax, OFFSET FLAT:$SG49035
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 542				; 0000021eH
	lea	r8, OFFSET FLAT:$SG49036
	mov	edx, 86					; 00000056H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv181[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv200[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv200[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49034
	mov	rcx, QWORD PTR tv181[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 543
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_or
	mov	QWORD PTR result$[rsp], rax
; Line 545
	mov	edx, 109				; 0000006dH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_con
; Line 546
	mov	QWORD PTR lhs$2[rsp], 0
	mov	QWORD PTR rhs$1[rsp], 0
; Line 547
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_or
	mov	QWORD PTR lhs$2[rsp], rax
; Line 548
	mov	edx, 11
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN3@ccread_con
; Line 549
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_conditional
	mov	QWORD PTR rhs$1[rsp], rax
	jmp	SHORT $LN4@ccread_con
$LN3@ccread_con:
; Line 551
	lea	rax, OFFSET FLAT:$SG49042
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 551				; 00000227H
	lea	r8, OFFSET FLAT:$SG49043
	mov	edx, 87					; 00000057H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49040
	lea	rdx, OFFSET FLAT:$SG49041
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
	int	3
$LN4@ccread_con:
; Line 552
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$2[rsp]
	mov	r8, QWORD PTR result$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_ternary
	mov	QWORD PTR result$[rsp], rax
$LN2@ccread_con:
; Line 554
	lea	rax, OFFSET FLAT:$SG49045
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 554				; 0000022aH
	lea	r8, OFFSET FLAT:$SG49046
	mov	edx, 88					; 00000058H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv179[rsp], rcx
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rdi, QWORD PTR $T7[rsp]
	mov	QWORD PTR tv223[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv223[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49044
	mov	rcx, QWORD PTR tv179[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 555
	mov	rax, QWORD PTR result$[rsp]
; Line 556
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
ccread_conditional ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv183 = 56
tv165 = 64
rhs$1 = 72
tok$2 = 80
tv196 = 88
tv163 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_logical_or PROC
; File W:\cpp\void\cc\ccread.c
; Line 523
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 524
	lea	rax, OFFSET FLAT:$SG49018
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 524				; 0000020cH
	lea	r8, OFFSET FLAT:$SG49019
	mov	edx, 84					; 00000054H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv165[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv183[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49017
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 525
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_and
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_log:
; Line 526
	mov	edx, 108				; 0000006cH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_log
; Line 527
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 528
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_and
	mov	QWORD PTR rhs$1[rsp], rax
; Line 529
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 530
	jmp	SHORT $LN2@ccread_log
$LN3@ccread_log:
; Line 531
	lea	rax, OFFSET FLAT:$SG49021
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 531				; 00000213H
	lea	r8, OFFSET FLAT:$SG49022
	mov	edx, 85					; 00000055H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv163[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv196[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv196[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49020
	mov	rcx, QWORD PTR tv163[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 532
	mov	rax, QWORD PTR lhs$[rsp]
; Line 533
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_logical_or ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv183 = 56
tv165 = 64
rhs$1 = 72
tok$2 = 80
tv196 = 88
tv163 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_logical_and PROC
; File W:\cpp\void\cc\ccread.c
; Line 505
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 506
	lea	rax, OFFSET FLAT:$SG49000
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 506				; 000001faH
	lea	r8, OFFSET FLAT:$SG49001
	mov	edx, 82					; 00000052H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv165[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv183[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48999
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 507
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_or
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_log:
; Line 508
	mov	edx, 107				; 0000006bH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_log
; Line 509
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 510
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_or
	mov	QWORD PTR rhs$1[rsp], rax
; Line 511
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 512
	jmp	SHORT $LN2@ccread_log
$LN3@ccread_log:
; Line 513
	lea	rax, OFFSET FLAT:$SG49003
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 513				; 00000201H
	lea	r8, OFFSET FLAT:$SG49004
	mov	edx, 83					; 00000053H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv163[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv196[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv196[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49002
	mov	rcx, QWORD PTR tv163[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 514
	mov	rax, QWORD PTR lhs$[rsp]
; Line 515
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_logical_and ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv183 = 56
tv165 = 64
rhs$1 = 72
tok$2 = 80
tv196 = 88
tv163 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_bitwise_or PROC
; File W:\cpp\void\cc\ccread.c
; Line 487
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 488
	lea	rax, OFFSET FLAT:$SG48982
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 488				; 000001e8H
	lea	r8, OFFSET FLAT:$SG48983
	mov	edx, 80					; 00000050H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv165[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv183[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48981
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 489
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_xor
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 490
	mov	edx, 106				; 0000006aH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 491
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 492
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_xor
	mov	QWORD PTR rhs$1[rsp], rax
; Line 493
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 494
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 495
	lea	rax, OFFSET FLAT:$SG48985
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 495				; 000001efH
	lea	r8, OFFSET FLAT:$SG48986
	mov	edx, 81					; 00000051H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv163[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv196[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv196[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48984
	mov	rcx, QWORD PTR tv163[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 496
	mov	rax, QWORD PTR lhs$[rsp]
; Line 497
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_bitwise_or ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv183 = 56
tv165 = 64
rhs$1 = 72
tok$2 = 80
tv196 = 88
tv163 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_bitwise_xor PROC
; File W:\cpp\void\cc\ccread.c
; Line 469
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 470
	lea	rax, OFFSET FLAT:$SG48964
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 470				; 000001d6H
	lea	r8, OFFSET FLAT:$SG48965
	mov	edx, 78					; 0000004eH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv165[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv183[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48963
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 471
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_and
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 472
	mov	edx, 104				; 00000068H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 473
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 474
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_and
	mov	QWORD PTR rhs$1[rsp], rax
; Line 475
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 476
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 477
	lea	rax, OFFSET FLAT:$SG48967
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 477				; 000001ddH
	lea	r8, OFFSET FLAT:$SG48968
	mov	edx, 79					; 0000004fH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv163[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv196[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv196[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48966
	mov	rcx, QWORD PTR tv163[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 478
	mov	rax, QWORD PTR lhs$[rsp]
; Line 479
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_bitwise_xor ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv183 = 56
tv165 = 64
rhs$1 = 72
tok$2 = 80
tv196 = 88
tv163 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_bitwise_and PROC
; File W:\cpp\void\cc\ccread.c
; Line 451
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 452
	lea	rax, OFFSET FLAT:$SG48946
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 452				; 000001c4H
	lea	r8, OFFSET FLAT:$SG48947
	mov	edx, 76					; 0000004cH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv165[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv183[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48945
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 453
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 454
	mov	edx, 104				; 00000068H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 455
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 456
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality
	mov	QWORD PTR rhs$1[rsp], rax
; Line 457
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 458
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 459
	lea	rax, OFFSET FLAT:$SG48949
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 459				; 000001cbH
	lea	r8, OFFSET FLAT:$SG48950
	mov	edx, 77					; 0000004dH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv163[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv196[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv196[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48948
	mov	rcx, QWORD PTR tv163[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 460
	mov	rax, QWORD PTR lhs$[rsp]
; Line 461
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_bitwise_and ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv189 = 56
tv169 = 64
rhs$1 = 72
tok$2 = 80
tv202 = 88
tv167 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_equality PROC
; File W:\cpp\void\cc\ccread.c
; Line 431
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 432
	lea	rax, OFFSET FLAT:$SG48926
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 432				; 000001b0H
	lea	r8, OFFSET FLAT:$SG48927
	mov	edx, 74					; 0000004aH
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv169[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv189[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv189[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48925
	mov	rcx, QWORD PTR tv169[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 433
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_relational
	mov	QWORD PTR lhs$[rsp], rax
; Line 434
	mov	edx, 102				; 00000066H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN3@ccread_equ
	mov	edx, 103				; 00000067H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_equ
$LN3@ccread_equ:
; Line 436
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 437
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality
	mov	QWORD PTR rhs$1[rsp], rax
; Line 438
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_equ:
; Line 440
	lea	rax, OFFSET FLAT:$SG48931
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 440				; 000001b8H
	lea	r8, OFFSET FLAT:$SG48932
	mov	edx, 75					; 0000004bH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv167[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv202[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv202[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48930
	mov	rcx, QWORD PTR tv167[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 441
	mov	rax, QWORD PTR lhs$[rsp]
; Line 442
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_equality ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv201 = 56
tv177 = 64
rhs$1 = 72
tok$2 = 80
tv214 = 88
tv175 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_relational PROC
; File W:\cpp\void\cc\ccread.c
; Line 409
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 410
	lea	rax, OFFSET FLAT:$SG48909
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 410				; 0000019aH
	lea	r8, OFFSET FLAT:$SG48910
	mov	edx, 72					; 00000048H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv177[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv201[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv201[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48908
	mov	rcx, QWORD PTR tv177[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 411
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_shift
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_rel:
; Line 414
	mov	edx, 101				; 00000065H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 119				; 00000077H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 100				; 00000064H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 118				; 00000076H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_rel
$LN4@ccread_rel:
; Line 416
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 417
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_shift
	mov	QWORD PTR rhs$1[rsp], rax
; Line 418
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 419
	jmp	$LN2@ccread_rel
$LN3@ccread_rel:
; Line 420
	lea	rax, OFFSET FLAT:$SG48913
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 420				; 000001a4H
	lea	r8, OFFSET FLAT:$SG48914
	mov	edx, 73					; 00000049H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv175[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv214[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv214[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48912
	mov	rcx, QWORD PTR tv175[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 421
	mov	rax, QWORD PTR lhs$[rsp]
; Line 422
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_relational ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv189 = 56
tv169 = 64
rhs$1 = 72
tok$2 = 80
tv202 = 88
tv167 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_shift PROC
; File W:\cpp\void\cc\ccread.c
; Line 386
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 387
	lea	rax, OFFSET FLAT:$SG48890
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 387				; 00000183H
	lea	r8, OFFSET FLAT:$SG48891
	mov	edx, 70					; 00000046H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv169[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv189[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv189[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48889
	mov	rcx, QWORD PTR tv169[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 388
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_additive
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_shi:
; Line 389
	mov	edx, 98					; 00000062H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_shi
	mov	edx, 99					; 00000063H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_shi
$LN4@ccread_shi:
; Line 391
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 392
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_additive
	mov	QWORD PTR rhs$1[rsp], rax
; Line 393
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 394
	jmp	$LN2@ccread_shi
$LN3@ccread_shi:
; Line 395
	lea	rax, OFFSET FLAT:$SG48894
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 395				; 0000018bH
	lea	r8, OFFSET FLAT:$SG48895
	mov	edx, 71					; 00000047H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv167[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv202[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv202[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48893
	mov	rcx, QWORD PTR tv167[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 396
	mov	rax, QWORD PTR lhs$[rsp]
; Line 397
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_shift ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv189 = 56
tv169 = 64
rhs$1 = 72
tok$2 = 80
tv202 = 88
tv167 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_additive PROC
; File W:\cpp\void\cc\ccread.c
; Line 365
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 366
	lea	rax, OFFSET FLAT:$SG48871
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 366				; 0000016eH
	lea	r8, OFFSET FLAT:$SG48872
	mov	edx, 68					; 00000044H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv169[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv189[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv189[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48870
	mov	rcx, QWORD PTR tv169[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 367
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_multiplicative
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_add:
; Line 368
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_add
	mov	edx, 97					; 00000061H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_add
$LN4@ccread_add:
; Line 371
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 372
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_multiplicative
	mov	QWORD PTR rhs$1[rsp], rax
; Line 373
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 374
	jmp	$LN2@ccread_add
$LN3@ccread_add:
; Line 375
	lea	rax, OFFSET FLAT:$SG48875
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 375				; 00000177H
	lea	r8, OFFSET FLAT:$SG48876
	mov	edx, 69					; 00000045H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv167[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv202[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv202[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48874
	mov	rcx, QWORD PTR tv167[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 376
	mov	rax, QWORD PTR lhs$[rsp]
; Line 377
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_additive ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tv195 = 56
tv173 = 64
rhs$1 = 72
tok$2 = 80
tv208 = 88
tv171 = 96
$T3 = 104
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 240
$T8 = 272
parser$ = 336
root$ = 344
mark$ = 352
ccread_multiplicative PROC
; File W:\cpp\void\cc\ccread.c
; Line 343
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 344
	lea	rax, OFFSET FLAT:$SG48852
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 344				; 00000158H
	lea	r8, OFFSET FLAT:$SG48853
	mov	edx, 66					; 00000042H
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv173[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv195[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv195[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48851
	mov	rcx, QWORD PTR tv173[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 345
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_mul:
; Line 347
	mov	edx, 93					; 0000005dH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_mul
	mov	edx, 94					; 0000005eH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_mul
	mov	edx, 95					; 0000005fH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_mul
$LN4@ccread_mul:
; Line 350
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 351
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary
	mov	QWORD PTR rhs$1[rsp], rax
; Line 352
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 353
	jmp	$LN2@ccread_mul
$LN3@ccread_mul:
; Line 354
	lea	rax, OFFSET FLAT:$SG48856
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 354				; 00000162H
	lea	r8, OFFSET FLAT:$SG48857
	mov	edx, 67					; 00000043H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv171[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv208[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv208[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48855
	mov	rcx, QWORD PTR tv171[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 355
	mov	rax, QWORD PTR lhs$[rsp]
; Line 356
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccread_multiplicative ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tok$1 = 56
tok$2 = 64
tv283 = 72
tv242 = 80
tok$3 = 88
tv202 = 96
tv307 = 104
tv240 = 112
clo$4 = 120
clo$5 = 152
clo$6 = 184
$T7 = 216
$T8 = 256
$T9 = 288
$T10 = 320
$T11 = 352
$T12 = 384
reader$ = 448
root$ = 456
mark$ = 464
ccread_unary PROC
; File W:\cpp\void\cc\ccread.c
; Line 267
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H
; Line 268
	lea	rax, OFFSET FLAT:$SG48798
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 268				; 0000010cH
	lea	r8, OFFSET FLAT:$SG48799
	mov	edx, 61					; 0000003dH
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv242[rsp], rcx
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rdi, QWORD PTR $T7[rsp]
	mov	QWORD PTR tv283[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv283[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48797
	mov	rcx, QWORD PTR tv242[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 269
	mov	QWORD PTR result$[rsp], 0
; Line 271
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN2@ccread_una
; Line 272
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 273
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN4@ccread_una
; Line 275
	lea	rax, QWORD PTR clo$4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$1[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 276
	mov	QWORD PTR clo$4[rsp+24], 124		; 0000007cH
; Line 277
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast
	mov	r9, rax
	lea	r8, QWORD PTR clo$4[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 278
	jmp	SHORT $LN5@ccread_una
$LN4@ccread_una:
; Line 279
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast
	mov	r9, rax
	mov	r8, QWORD PTR tok$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
$LN5@ccread_una:
; Line 281
	jmp	$LN3@ccread_una
$LN2@ccread_una:
; Line 282
	mov	edx, 97					; 00000061H
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN6@ccread_una
; Line 283
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 284
	mov	edx, 97					; 00000061H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN8@ccread_una
; Line 286
	lea	rax, QWORD PTR clo$5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$2[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 287
	mov	QWORD PTR clo$5[rsp+24], 123		; 0000007bH
; Line 288
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast
	mov	r9, rax
	lea	r8, QWORD PTR clo$5[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 289
	jmp	SHORT $LN9@ccread_una
$LN8@ccread_una:
; Line 290
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast
	mov	r9, rax
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
$LN9@ccread_una:
; Line 292
	jmp	$LN7@ccread_una
$LN6@ccread_una:
; Line 293
	mov	edx, 93					; 0000005dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN10@ccread_una
; Line 296
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$3[rsp], rax
; Line 297
	lea	rax, QWORD PTR clo$6[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$3[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 298
	mov	QWORD PTR clo$6[rsp+24], 85		; 00000055H
; Line 300
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast
	mov	r9, rax
	lea	r8, QWORD PTR clo$6[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 301
	jmp	$LN11@ccread_una
$LN10@ccread_una:
; Line 302
	mov	edx, 87					; 00000057H
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN14@ccread_una
	mov	edx, 90					; 0000005aH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN12@ccread_una
$LN14@ccread_una:
; Line 304
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast
	mov	QWORD PTR tv202[rsp], rax
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rcx, QWORD PTR tv202[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 305
	jmp	SHORT $LN13@ccread_una
$LN12@ccread_una:
; Line 306
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_postfix
	mov	QWORD PTR result$[rsp], rax
$LN13@ccread_una:
$LN11@ccread_una:
$LN7@ccread_una:
$LN3@ccread_una:
; Line 308
	lea	rax, OFFSET FLAT:$SG48814
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 308				; 00000134H
	lea	r8, OFFSET FLAT:$SG48815
	mov	edx, 62					; 0000003eH
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv240[rsp], rcx
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rdi, QWORD PTR $T9[rsp]
	mov	QWORD PTR tv307[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv307[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48813
	mov	rcx, QWORD PTR tv240[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 309
	mov	rax, QWORD PTR result$[rsp]
; Line 310
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
ccread_unary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
result$ = 56
inc$1 = 64
tv267 = 72
tv236 = 80
args$2 = 88
args$3 = 96
dec$4 = 104
tv304 = 112
tv234 = 120
$T5 = 128
$T6 = 160
$T7 = 192
$T8 = 224
$T9 = 256
$T10 = 288
$T11 = 320
$T12 = 352
$T13 = 384
$T14 = 416
$T15 = 448
$T16 = 480
reader$ = 544
root$ = 552
mark$ = 560
ccread_postfix PROC
; File W:\cpp\void\cc\ccread.c
; Line 235
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 520				; 00000208H
; Line 236
	lea	rax, OFFSET FLAT:$SG48759
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 236				; 000000ecH
	lea	r8, OFFSET FLAT:$SG48760
	mov	edx, 57					; 00000039H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv236[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv267[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv267[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48758
	mov	rcx, QWORD PTR tv236[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 237
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_primary
	mov	QWORD PTR lhs$[rsp], rax
; Line 238
	mov	rax, QWORD PTR lhs$[rsp]
	mov	QWORD PTR result$[rsp], rax
; Line 240
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_pos
; Line 241
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_arglist
	mov	QWORD PTR args$2[rsp], rax
; Line 242
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_pos
; Line 243
	lea	rax, OFFSET FLAT:$SG48766
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 243				; 000000f3H
	lea	r8, OFFSET FLAT:$SG48767
	mov	edx, 58					; 0000003aH
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48764
	lea	rdx, OFFSET FLAT:$SG48765
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
	int	3
$LN4@ccread_pos:
; Line 244
	mov	rax, QWORD PTR lhs$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR args$2[rsp]
	mov	r8, QWORD PTR lhs$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_call
	mov	QWORD PTR result$[rsp], rax
; Line 245
	jmp	$LN3@ccread_pos
$LN2@ccread_pos:
; Line 246
	mov	edx, 8
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN5@ccread_pos
; Line 247
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR args$3[rsp], rax
; Line 248
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN7@ccread_pos
; Line 249
	lea	rax, OFFSET FLAT:$SG48773
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 249				; 000000f9H
	lea	r8, OFFSET FLAT:$SG48774
	mov	edx, 59					; 0000003bH
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48771
	lea	rdx, OFFSET FLAT:$SG48772
	lea	rcx, QWORD PTR $T10[rsp]
	call	cctrace_
	int	3
$LN7@ccread_pos:
; Line 250
	mov	rax, QWORD PTR lhs$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR args$3[rsp]
	mov	r8, QWORD PTR lhs$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_index
	mov	QWORD PTR result$[rsp], rax
; Line 251
	jmp	$LN6@ccread_pos
$LN5@ccread_pos:
; Line 252
	mov	edx, 91					; 0000005bH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN8@ccread_pos
; Line 253
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 254
	jmp	$LN9@ccread_pos
$LN8@ccread_pos:
; Line 255
	mov	edx, 126				; 0000007eH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	mov	QWORD PTR inc$1[rsp], rax
	cmp	QWORD PTR inc$1[rsp], 0
	je	SHORT $LN10@ccread_pos
; Line 256
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR inc$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 257
	jmp	SHORT $LN11@ccread_pos
$LN10@ccread_pos:
; Line 258
	mov	edx, 125				; 0000007dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	mov	QWORD PTR dec$4[rsp], rax
	cmp	QWORD PTR dec$4[rsp], 0
	je	SHORT $LN12@ccread_pos
; Line 259
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR inc$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
$LN12@ccread_pos:
$LN11@ccread_pos:
$LN9@ccread_pos:
$LN6@ccread_pos:
$LN3@ccread_pos:
; Line 261
	lea	rax, OFFSET FLAT:$SG48781
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 261				; 00000105H
	lea	r8, OFFSET FLAT:$SG48782
	mov	edx, 60					; 0000003cH
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv234[rsp], rcx
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rdi, QWORD PTR $T11[rsp]
	mov	QWORD PTR tv304[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv304[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48780
	mov	rcx, QWORD PTR tv234[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 262
	mov	rax, QWORD PTR result$[rsp]
; Line 263
	add	rsp, 520				; 00000208H
	pop	rdi
	pop	rsi
	ret	0
ccread_postfix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 48
result$ = 56
token$ = 64
tv217 = 72
tv195 = 80
group$1 = 88
tv241 = 96
tv193 = 104
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
$T6 = 240
$T7 = 272
$T8 = 304
$T9 = 336
$T10 = 368
reader$ = 432
root$ = 440
mark$ = 448
ccread_primary PROC
; File W:\cpp\void\cc\ccread.c
; Line 201
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 408				; 00000198H
; Line 202
	lea	rax, OFFSET FLAT:$SG48726
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 202				; 000000caH
	lea	r8, OFFSET FLAT:$SG48727
	mov	edx, 54					; 00000036H
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv195[rsp], rcx
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rdi, QWORD PTR $T2[rsp]
	mov	QWORD PTR tv217[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv217[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48725
	mov	rcx, QWORD PTR tv195[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 203
	mov	QWORD PTR result$[rsp], 0
; Line 204
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 205
	cmp	QWORD PTR token$[rsp], 0
	je	$LN4@ccread_pri
; Line 206
	mov	rax, QWORD PTR token$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv91[rsp], eax
	cmp	DWORD PTR tv91[rsp], 4
	je	$LN9@ccread_pri
	cmp	DWORD PTR tv91[rsp], 16
	je	$LN8@ccread_pri
	cmp	DWORD PTR tv91[rsp], 19
	je	SHORT $LN5@ccread_pri
	cmp	DWORD PTR tv91[rsp], 20
	je	SHORT $LN6@ccread_pri
	cmp	DWORD PTR tv91[rsp], 21
	je	SHORT $LN7@ccread_pri
	jmp	$LN2@ccread_pri
$LN5@ccread_pri:
; Line 208
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_litide
	mov	QWORD PTR result$[rsp], rax
; Line 209
	jmp	$LN2@ccread_pri
$LN6@ccread_pri:
; Line 211
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	r8, rax
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_litint
	mov	QWORD PTR result$[rsp], rax
; Line 212
	jmp	$LN2@ccread_pri
$LN7@ccread_pri:
; Line 214
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	r8, rax
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_litflo
	mov	QWORD PTR result$[rsp], rax
; Line 215
	jmp	$LN2@ccread_pri
$LN8@ccread_pri:
; Line 217
	lea	rax, OFFSET FLAT:$SG48733
	test	rax, rax
	je	SHORT $LN12@ccread_pri
	int	3
$LN12@ccread_pri:
; Line 218
	jmp	$LN2@ccread_pri
$LN9@ccread_pri:
; Line 220
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR group$1[rsp], rax
; Line 221
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN10@ccread_pri
; Line 222
	lea	rax, OFFSET FLAT:$SG48738
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 222				; 000000deH
	lea	r8, OFFSET FLAT:$SG48739
	mov	edx, 55					; 00000037H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48736
	lea	rdx, OFFSET FLAT:$SG48737
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
$LN10@ccread_pri:
; Line 223
	mov	r8, QWORD PTR group$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_group
	mov	QWORD PTR result$[rsp], rax
$LN2@ccread_pri:
$LN4@ccread_pri:
; Line 228
	lea	rax, OFFSET FLAT:$SG48741
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 228				; 000000e4H
	lea	r8, OFFSET FLAT:$SG48742
	mov	edx, 56					; 00000038H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv193[rsp], rcx
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rdi, QWORD PTR $T6[rsp]
	mov	QWORD PTR tv241[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv241[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48740
	mov	rcx, QWORD PTR tv193[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 229
	mov	rax, QWORD PTR result$[rsp]
; Line 230
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rsi
	ret	0
ccread_primary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
tree$ = 40
reader$ = 64
root$ = 72
mark$ = 80
ccread_litide PROC
; File W:\cpp\void\cc\ccread.c
; Line 191
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	edx, 19
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	mov	QWORD PTR token$[rsp], rax
; Line 192
	mov	QWORD PTR tree$[rsp], 0
; Line 193
	cmp	QWORD PTR token$[rsp], 0
	je	SHORT $LN2@ccread_lit
	mov	rax, QWORD PTR token$[rsp]
	mov	r8, QWORD PTR [rax+24]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_litide
	mov	QWORD PTR tree$[rsp], rax
$LN2@ccread_lit:
; Line 194
	mov	rax, QWORD PTR tree$[rsp]
; Line 195
	add	rsp, 56					; 00000038H
	ret	0
ccread_litide ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tv183 = 56
tv167 = 64
tok$1 = 72
tv205 = 80
tv165 = 88
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
parser$ = 416
root$ = 424
mark$ = 432
ccread_cast PROC
; File W:\cpp\void\cc\ccread.c
; Line 318
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 392				; 00000188H
; Line 319
	lea	rax, OFFSET FLAT:$SG48827
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 319				; 0000013fH
	lea	r8, OFFSET FLAT:$SG48828
	mov	edx, 63					; 0000003fH
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv167[rsp], rcx
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rdi, QWORD PTR $T2[rsp]
	mov	QWORD PTR tv183[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48826
	mov	rcx, QWORD PTR tv167[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 320
	mov	QWORD PTR result$[rsp], 0
; Line 321
	mov	edx, 4
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	$LN2@ccread_cas
; Line 323
	mov	QWORD PTR result$[rsp], 0
; Line 325
	mov	edx, 5
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_cas
; Line 326
	lea	rax, OFFSET FLAT:$SG48834
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 326				; 00000146H
	lea	r8, OFFSET FLAT:$SG48835
	mov	edx, 64					; 00000040H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48832
	lea	rdx, OFFSET FLAT:$SG48833
	lea	rcx, QWORD PTR $T5[rsp]
	call	cctrace_
	int	3
$LN4@ccread_cas:
; Line 328
	jmp	SHORT $LN3@ccread_cas
$LN2@ccread_cas:
; Line 329
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary
	mov	QWORD PTR result$[rsp], rax
$LN3@ccread_cas:
; Line 331
	lea	rax, OFFSET FLAT:$SG48837
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 331				; 0000014bH
	lea	r8, OFFSET FLAT:$SG48838
	mov	edx, 65					; 00000041H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv165[rsp], rcx
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rdi, QWORD PTR $T6[rsp]
	mov	QWORD PTR tv205[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv205[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48836
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 332
	mov	rax, QWORD PTR result$[rsp]
; Line 333
	add	rsp, 392				; 00000188H
	pop	rdi
	pop	rsi
	ret	0
ccread_cast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tv183 = 56
tv165 = 64
tv128 = 72
tv195 = 80
tv163 = 88
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
reader$ = 320
root$ = 328
mark$ = 336
ccread_expression PROC
; File W:\cpp\void\cc\ccread.c
; Line 598
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 599
	lea	rax, OFFSET FLAT:$SG49087
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 599				; 00000257H
	lea	r8, OFFSET FLAT:$SG49088
	mov	edx, 93					; 0000005dH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv165[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv183[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv183[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49086
	mov	rcx, QWORD PTR tv165[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 600
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_assignment
	mov	QWORD PTR result$[rsp], rax
; Line 601
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_exp
; Line 602
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR tv128[rsp], rax
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rcx, QWORD PTR tv128[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR result$[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR result$[rsp], rax
$LN2@ccread_exp:
; Line 603
	lea	rax, OFFSET FLAT:$SG49091
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 603				; 0000025bH
	lea	r8, OFFSET FLAT:$SG49092
	mov	edx, 94					; 0000005eH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv163[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv195[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv195[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG49090
	mov	rcx, QWORD PTR tv163[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 604
	mov	rax, QWORD PTR result$[rsp]
; Line 605
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
ccread_expression ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 80
root$ = 88
mark$ = 96
ccread_arglist PROC
; File W:\cpp\void\cc\ccread.c
; Line 613
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_arg:
; Line 615
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_assignment
	mov	QWORD PTR next$[rsp], rax
; Line 616
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN5@ccread_arg
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 152				; 00000098H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	imul	rax, rax, 152				; 00000098H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$[rsp]
	mov	ecx, 152				; 00000098H
	rep movsb
$LN5@ccread_arg:
; Line 617
	mov	rcx, QWORD PTR next$[rsp]
	call	cctree_del
; Line 618
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN6@ccread_arg
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_arg
$LN6@ccread_arg:
; Line 619
	mov	rax, QWORD PTR list$[rsp]
; Line 620
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_arglist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_func_specifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 171
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 172
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 174
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 40			; 00000028H
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 43			; 0000002bH
	jge	SHORT $LN2@kttc__peek
; Line 177
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 179
	xor	eax, eax
$LN1@kttc__peek:
; Line 180
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_func_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_storage_class PROC
; File W:\cpp\void\cc\ccread.c
; Line 157
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 158
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 160
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 63			; 0000003fH
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 72			; 00000048H
	jge	SHORT $LN2@kttc__peek
; Line 163
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 165
	xor	eax, eax
$LN1@kttc__peek:
; Line 166
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_storage_class ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
ccsee_typespec PROC
; File W:\cpp\void\cc\ccread.c
; Line 143
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 144
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 146
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 44			; 0000002cH
	jle	SHORT $LN2@ccsee_type
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 65			; 00000041H
	jge	SHORT $LN2@ccsee_type
; Line 149
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@ccsee_type
$LN2@ccsee_type:
; Line 151
	xor	eax, eax
$LN1@ccsee_type:
; Line 152
	add	rsp, 56					; 00000038H
	ret	0
ccsee_typespec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_type_qualifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 129
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 130
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 132
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 35			; 00000023H
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 39			; 00000027H
	jge	SHORT $LN2@kttc__peek
; Line 135
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 137
	xor	eax, eax
$LN1@kttc__peek:
; Line 138
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_alignment_specifier PROC
; File W:\cpp\void\cc\ccread.c
; Line 115
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 116
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 118
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 31
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 34			; 00000022H
	jge	SHORT $LN2@kttc__peek
; Line 121
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 123
	xor	eax, eax
$LN1@kttc__peek:
; Line 124
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
_k$ = 56
cceat	PROC
; File W:\cpp\void\cc\ccread.c
; Line 103
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 104
	mov	edx, DWORD PTR _k$[rsp]
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@cceat
; Line 105
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccgobble
	jmp	SHORT $LN1@cceat
$LN2@cceat:
; Line 106
	xor	eax, eax
$LN1@cceat:
; Line 107
	add	rsp, 40					; 00000028H
	ret	0
cceat	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
_r$ = 64
ccgobble PROC
; File W:\cpp\void\cc\ccread.c
; Line 93
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 95
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	cmp	QWORD PTR [rax+88], rcx
	jae	SHORT $LN2@ccgobble
; Line 96
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	mov	QWORD PTR [rax+96], rcx
	mov	rax, QWORD PTR _r$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR tv73[rsp], rax
	mov	rax, QWORD PTR _r$[rsp]
	mov	rax, QWORD PTR [rax+88]
	add	rax, 32					; 00000020H
	mov	rcx, QWORD PTR _r$[rsp]
	mov	QWORD PTR [rcx+88], rax
	mov	rax, QWORD PTR tv73[rsp]
	jmp	SHORT $LN1@ccgobble
$LN2@ccgobble:
; Line 98
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccpeep
$LN1@ccgobble:
; Line 99
	add	rsp, 56					; 00000038H
	ret	0
ccgobble ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
ccsee_end PROC
; File W:\cpp\void\cc\ccread.c
; Line 86
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 87
	mov	edx, 1
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccsee
; Line 88
	add	rsp, 40					; 00000028H
	ret	0
ccsee_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
_r$ = 64
kind$ = 72
ccsee	PROC
; File W:\cpp\void\cc\ccread.c
; Line 80
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 81
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccpeep
	mov	ecx, DWORD PTR kind$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@ccsee
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@ccsee
$LN3@ccsee:
	mov	DWORD PTR tv68[rsp], 0
$LN4@ccsee:
	mov	eax, DWORD PTR tv68[rsp]
; Line 82
	add	rsp, 56					; 00000038H
	ret	0
ccsee	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
ccpeep	PROC
; File W:\cpp\void\cc\ccread.c
; Line 74
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 75
	xor	edx, edx
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccpeek
; Line 76
	add	rsp, 40					; 00000028H
	ret	0
ccpeep	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 8
_o$ = 16
ccpeek	PROC
; File W:\cpp\void\cc\ccread.c
; Line 61
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 62
	movsxd	rax, DWORD PTR _o$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR _r$[rsp]
	add	rax, QWORD PTR [rcx+88]
	mov	rcx, QWORD PTR _r$[rsp]
	cmp	rax, QWORD PTR [rcx+80]
	jae	SHORT $LN2@ccpeek
; Line 64
	movsxd	rax, DWORD PTR _o$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR _r$[rsp]
	add	rax, QWORD PTR [rcx+88]
	jmp	SHORT $LN1@ccpeek
$LN2@ccpeek:
; Line 69
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
$LN1@ccpeek:
; Line 70
	ret	0
ccpeek	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 32
file$ = 40
data$ = 48
_r$ = 80
name$ = 88
ccread_include PROC
; File W:\cpp\void\cc\ccread.c
; Line 38
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 39
	mov	DWORD PTR size$[rsp], 0
; Line 40
	mov	rcx, QWORD PTR name$[rsp]
	call	ccopenfile
	mov	QWORD PTR file$[rsp], rax
; Line 41
	lea	r8, QWORD PTR size$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	ccpullfile
	mov	QWORD PTR data$[rsp], rax
; Line 42
	mov	rcx, QWORD PTR file$[rsp]
	call	ccclosefile
; Line 44
	mov	eax, DWORD PTR size$[rsp]
	mov	r8, QWORD PTR data$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccreader_move
; Line 48
	add	rsp, 72					; 00000048H
	ret	0
ccread_include ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
_r$ = 64
_l$ = 72
_d$ = 80
ccreader_move PROC
; File W:\cpp\void\cc\ccread.c
; Line 27
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 28
	mov	rax, QWORD PTR _r$[rsp]
	mov	r8, QWORD PTR _d$[rsp]
	mov	rdx, QWORD PTR _l$[rsp]
	mov	rcx, rax
	call	cclex_move
; Line 29
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccread_all_tokens
; Line 31
	mov	rax, QWORD PTR _r$[rsp]
	mov	QWORD PTR [rax+96], 0
; Line 32
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR [rcx+72]
	mov	QWORD PTR [rax+88], rcx
; Line 33
	mov	rax, QWORD PTR _r$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN3@ccreader_m
	mov	rax, QWORD PTR _r$[rsp]
	mov	rax, QWORD PTR [rax+72]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 32					; 00000020H
	div	rcx
	mov	QWORD PTR tv80[rsp], rax
	jmp	SHORT $LN4@ccreader_m
$LN3@ccreader_m:
	mov	QWORD PTR tv80[rsp], 0
$LN4@ccreader_m:
	mov	eax, DWORD PTR tv80[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR _r$[rsp]
	add	rax, QWORD PTR [rcx+72]
	mov	rcx, QWORD PTR _r$[rsp]
	mov	QWORD PTR [rcx+80], rax
; Line 34
	add	rsp, 56					; 00000038H
	ret	0
ccreader_move ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$1 = 32
_r$ = 64
ccread_all_tokens PROC
; File W:\cpp\void\cc\ccread.c
; Line 52
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@ccread_all:
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, rax
	call	cclex_next_token
	test	eax, eax
	je	SHORT $LN3@ccread_all
; Line 54
	mov	rax, QWORD PTR _r$[rsp]
	add	rax, 72					; 00000048H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	ccdlb_arradd
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR _r$[rsp]
	add	rax, QWORD PTR [rcx+72]
	mov	QWORD PTR token$1[rsp], rax
; Line 55
	mov	rax, QWORD PTR _r$[rsp]
	mov	rdx, QWORD PTR token$1[rsp]
	mov	rcx, rax
	call	cclex_token
; Line 56
	jmp	SHORT $LN2@ccread_all
$LN3@ccread_all:
; Line 57
	add	rsp, 56					; 00000038H
	ret	0
ccread_all_tokens ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
ccread_uninit PROC
; File W:\cpp\void\cc\ccread.c
; Line 16
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 17
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, rax
	call	cclex_uninit
; Line 18
	mov	rax, QWORD PTR _r$[rsp]
	add	rax, 72					; 00000048H
	mov	rcx, rax
	call	ccdlbdel_
; Line 19
	add	rsp, 40					; 00000028H
	ret	0
ccread_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
ccread_init PROC
; File W:\cpp\void\cc\ccread.c
; Line 9
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10
	mov	r8d, 104				; 00000068H
	xor	edx, edx
	mov	rcx, QWORD PTR _r$[rsp]
	call	memset
; Line 11
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, rax
	call	cclex_init
; Line 12
	add	rsp, 40					; 00000028H
	ret	0
ccread_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur$ = 48
end$ = 56
com$ = 60
res$ = 64
tv159 = 68
tv220 = 72
tv203 = 80
tv282 = 88
tv200 = 96
$T1 = 104
$T2 = 144
$T3 = 176
$T4 = 208
$T5 = 240
$T6 = 272
l$ = 336
str$ = 344
cclex_readstr PROC
; File W:\cpp\void\cc\cclex.c
; Line 181
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 182
	lea	rax, OFFSET FLAT:$SG48381
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 182				; 000000b6H
	lea	r8, OFFSET FLAT:$SG48382
	mov	edx, 48					; 00000030H
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv203[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv220[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv220[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48380
	mov	rcx, QWORD PTR tv203[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 186
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 18
; Line 187
	mov	rax, QWORD PTR l$[rsp]
	mov	QWORD PTR [rax+64], 0
; Line 189
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR end$[rsp], al
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 193
	mov	DWORD PTR res$[rsp], 32			; 00000020H
	mov	DWORD PTR com$[rsp], 0
	jmp	SHORT $LN4@cclex_read
$LN2@cclex_read:
	mov	eax, DWORD PTR res$[rsp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR res$[rsp], eax
$LN4@cclex_read:
	mov	eax, DWORD PTR res$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	add	rcx, 64					; 00000040H
	xor	r9d, r9d
	mov	r8d, eax
	mov	edx, 1
	call	ccdlb_arradd
	mov	rcx, QWORD PTR l$[rsp]
	add	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR cur$[rsp], rax
	cmp	QWORD PTR cur$[rsp], 0
	je	$LN3@cclex_read
; Line 195
	jmp	SHORT $LN7@cclex_read
$LN5@cclex_read:
	mov	eax, DWORD PTR com$[rsp]
	inc	eax
	mov	DWORD PTR com$[rsp], eax
$LN7@cclex_read:
	mov	eax, DWORD PTR res$[rsp]
	cmp	DWORD PTR com$[rsp], eax
	jae	$LN6@cclex_read
; Line 197
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR end$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN10@cclex_read
; Line 198
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
; Line 199
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 200
	mov	eax, DWORD PTR com$[rsp]
	inc	eax
	mov	DWORD PTR com$[rsp], eax
; Line 202
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 16
; Line 203
	mov	eax, DWORD PTR com$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	add	rcx, 64					; 00000040H
	mov	r9d, eax
	xor	r8d, r8d
	mov	edx, 1
	call	ccdlb_arradd
; Line 204
	jmp	$LN12@cclex_read
	jmp	$leave$30
; Line 205
	jmp	$LN11@cclex_read
$LN10@cclex_read:
; Line 206
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	jne	$LN13@cclex_read
; Line 207
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv159[rsp], eax
	mov	eax, DWORD PTR tv159[rsp]
	sub	eax, 34					; 00000022H
	mov	DWORD PTR tv159[rsp], eax
	cmp	DWORD PTR tv159[rsp], 86		; 00000056H
	ja	$LN26@cclex_read
	movsxd	rax, DWORD PTR tv159[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN28@cclex_read[rcx+rax]
	mov	eax, DWORD PTR $LN29@cclex_read[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN15@cclex_read:
; Line 208
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 92			; 0000005cH
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN16@cclex_read:
; Line 209
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 39			; 00000027H
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN17@cclex_read:
; Line 210
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 34			; 00000022H
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN18@cclex_read:
; Line 211
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 9
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN19@cclex_read:
; Line 212
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 12
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN20@cclex_read:
; Line 213
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 10
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN21@cclex_read:
; Line 214
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 13
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN22@cclex_read:
; Line 217
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN23@cclex_read:
$LN24@cclex_read:
; Line 221
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN25@cclex_read:
; Line 224
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN26@cclex_read:
; Line 227
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
$LN8@cclex_read:
; Line 229
	mov	rax, QWORD PTR str$[rsp]
	add	rax, 2
	mov	QWORD PTR str$[rsp], rax
	jmp	SHORT $LN14@cclex_read
$LN13@cclex_read:
; Line 230
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
$LN14@cclex_read:
$LN11@cclex_read:
; Line 231
	jmp	$LN5@cclex_read
$LN6@cclex_read:
; Line 232
	jmp	$LN2@cclex_read
$LN3@cclex_read:
$LN12@cclex_read:
$leave$30:
; Line 234
	lea	rax, OFFSET FLAT:$SG48401
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 234				; 000000eaH
	lea	r8, OFFSET FLAT:$SG48402
	mov	edx, 49					; 00000031H
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv200[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv282[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv282[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48400
	mov	rcx, QWORD PTR tv200[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 235
	mov	rax, QWORD PTR str$[rsp]
; Line 236
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
	npad	3
$LN29@cclex_read:
	DD	$LN17@cclex_read
	DD	$LN16@cclex_read
	DD	$LN22@cclex_read
	DD	$LN24@cclex_read
	DD	$LN15@cclex_read
	DD	$LN19@cclex_read
	DD	$LN20@cclex_read
	DD	$LN21@cclex_read
	DD	$LN18@cclex_read
	DD	$LN25@cclex_read
	DD	$LN23@cclex_read
	DD	$LN26@cclex_read
$LN28@cclex_read:
	DB	0
	DB	11
	DB	11
	DB	11
	DB	11
	DB	1
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	2
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	3
	DB	11
	DB	11
	DB	11
	DB	4
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	5
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	6
	DB	11
	DB	11
	DB	11
	DB	7
	DB	11
	DB	8
	DB	9
	DB	11
	DB	11
	DB	10
cclex_readstr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
k$ = 56
tv190 = 64
tv175 = 72
tv215 = 80
tv171 = 88
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
l$ = 320
str$ = 328
cclex_identifier PROC
; File W:\cpp\void\cc\cclex.c
; Line 160
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 161
	lea	rax, OFFSET FLAT:$SG48346
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 161				; 000000a1H
	lea	r8, OFFSET FLAT:$SG48347
	mov	edx, 46					; 0000002eH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv175[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv190[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv190[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48345
	mov	rcx, QWORD PTR tv175[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 162
	mov	rcx, QWORD PTR str$[rsp]
	call	cclex_idenlen
	mov	DWORD PTR len$[rsp], eax
; Line 164
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 19
; Line 166
	mov	rax, QWORD PTR l$[rsp]
	add	rax, 32					; 00000020H
	mov	r9, QWORD PTR str$[rsp]
	mov	r8d, DWORD PTR len$[rsp]
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblset
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR k$[rsp], rax
; Line 167
	mov	rax, QWORD PTR k$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN2@cclex_iden
; Line 168
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR k$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+40], ecx
; Line 169
	jmp	SHORT $LN3@cclex_iden
$LN2@cclex_iden:
; Line 170
	mov	rax, QWORD PTR k$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rax], ecx
$LN3@cclex_iden:
; Line 173
	mov	eax, OFFSET FLAT:cckey
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR [rdx+64], rax
; Line 175
	lea	rax, OFFSET FLAT:$SG48351
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 175				; 000000afH
	lea	r8, OFFSET FLAT:$SG48352
	mov	edx, 47					; 0000002fH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv171[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv215[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv215[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48350
	mov	rcx, QWORD PTR tv171[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 176
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
; Line 177
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
cclex_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv158 = 48
tv174 = 56
tv162 = 64
tv190 = 72
tv160 = 80
$T1 = 88
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
l$ = 320
cclex_next_token PROC
; File W:\cpp\void\cc\cclex.c
; Line 144
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 145
	lea	rax, OFFSET FLAT:$SG48331
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 145				; 00000091H
	lea	r8, OFFSET FLAT:$SG48332
	mov	edx, 44					; 0000002cH
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv162[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv174[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv174[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48330
	mov	rcx, QWORD PTR tv162[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
$LN10@cclex_next:
$LN9@cclex_next:
$LN8@cclex_next:
$LN4@cclex_next:
; Line 147
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_next_token_internal
; Line 150
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+40], 14
	je	SHORT $LN4@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+40], 12
	je	SHORT $LN8@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+40], 2
	je	SHORT $LN9@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+40], 3
	je	SHORT $LN10@cclex_next
; Line 153
	lea	rax, OFFSET FLAT:$SG48334
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 153				; 00000099H
	lea	r8, OFFSET FLAT:$SG48335
	mov	edx, 45					; 0000002dH
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv160[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv190[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv190[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48333
	mov	rcx, QWORD PTR tv160[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 154
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+40], 1
	je	SHORT $LN6@cclex_next
	mov	DWORD PTR tv158[rsp], 1
	jmp	SHORT $LN7@cclex_next
$LN6@cclex_next:
	mov	DWORD PTR tv158[rsp], 0
$LN7@cclex_next:
	mov	eax, DWORD PTR tv158[rsp]
; Line 155
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
cclex_next_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$1 = 48
tv147 = 52
tv681 = 56
u$2 = 64
d$3 = 72
tv132 = 80
p$4 = 88
tv922 = 96
tv887 = 104
tv1265 = 112
tv806 = 120
tv1325 = 128
tv798 = 136
tv1337 = 144
tv796 = 152
$T5 = 160
$T6 = 192
$T7 = 224
$T8 = 256
$T9 = 288
$T10 = 320
$T11 = 352
$T12 = 384
$T13 = 416
$T14 = 448
$T15 = 480
$T16 = 512
l$ = 576
cclex_next_token_internal PROC
; File W:\cpp\void\cc\cclex.c
; Line 241
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 552				; 00000228H
; Line 242
	lea	rax, OFFSET FLAT:$SG48430
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 242				; 000000f2H
	lea	r8, OFFSET FLAT:$SG48431
	mov	edx, 50					; 00000032H
	lea	rcx, QWORD PTR $T13[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv887[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv922[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv922[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48429
	mov	rcx, QWORD PTR tv887[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 243
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+24], rcx
; Line 245
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+48], rcx
; Line 247
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jb	SHORT $LN15@cclex_next
; Line 248
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 1
; Line 249
	jmp	$LN16@cclex_next
	jmp	$leave$194
$LN15@cclex_next:
; Line 251
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv132[rsp], eax
	cmp	DWORD PTR tv132[rsp], 126		; 0000007eH
	ja	SHORT $LN17@cclex_next
	movsxd	rax, DWORD PTR tv132[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN193@cclex_next[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN17@cclex_next:
; Line 253
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 0
; Line 254
	jmp	$LN2@cclex_next
$LN18@cclex_next:
$LN19@cclex_next:
$LN20@cclex_next:
$LN21@cclex_next:
$LN22@cclex_next:
$LN23@cclex_next:
$LN24@cclex_next:
$LN25@cclex_next:
$LN26@cclex_next:
$LN27@cclex_next:
; Line 259
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	$LN28@cclex_next
; Line 260
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR tv147[rsp], al
	cmp	BYTE PTR tv147[rsp], 98			; 00000062H
	je	$LN34@cclex_next
	cmp	BYTE PTR tv147[rsp], 100		; 00000064H
	je	SHORT $LN32@cclex_next
	cmp	BYTE PTR tv147[rsp], 104		; 00000068H
	je	SHORT $LN30@cclex_next
	cmp	BYTE PTR tv147[rsp], 111		; 0000006fH
	je	SHORT $LN33@cclex_next
	cmp	BYTE PTR tv147[rsp], 120		; 00000078H
	je	SHORT $LN31@cclex_next
	jmp	$LN35@cclex_next
$LN30@cclex_next:
$LN31@cclex_next:
; Line 263
	mov	DWORD PTR b$1[rsp], 16
; Line 264
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 265
	jmp	SHORT $LN4@cclex_next
$LN32@cclex_next:
; Line 267
	mov	DWORD PTR b$1[rsp], 10
; Line 268
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 269
	jmp	SHORT $LN4@cclex_next
$LN33@cclex_next:
; Line 271
	mov	DWORD PTR b$1[rsp], 8
; Line 272
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 273
	jmp	SHORT $LN4@cclex_next
$LN34@cclex_next:
; Line 275
	mov	DWORD PTR b$1[rsp], 2
; Line 276
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 277
	jmp	SHORT $LN4@cclex_next
$LN35@cclex_next:
; Line 279
	mov	DWORD PTR b$1[rsp], 10
$LN4@cclex_next:
; Line 282
	jmp	SHORT $LN29@cclex_next
$LN28@cclex_next:
; Line 283
	mov	DWORD PTR b$1[rsp], 10
$LN29@cclex_next:
; Line 285
	mov	QWORD PTR u$2[rsp], 0
$LN6@cclex_next:
; Line 286
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN7@cclex_next
; Line 287
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN36@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN36@cclex_next
; Line 288
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 289
	jmp	$LN37@cclex_next
$LN36@cclex_next:
; Line 290
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN38@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN38@cclex_next
; Line 291
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 292
	jmp	SHORT $LN39@cclex_next
$LN38@cclex_next:
; Line 293
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN40@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN40@cclex_next
; Line 294
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 295
	jmp	SHORT $LN41@cclex_next
$LN40@cclex_next:
; Line 296
	jmp	SHORT $LN7@cclex_next
$LN41@cclex_next:
$LN39@cclex_next:
$LN37@cclex_next:
; Line 298
	jmp	$LN6@cclex_next
$LN7@cclex_next:
; Line 299
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN42@cclex_next
; Line 300
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 303
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR p$4[rsp], xmm0
; Line 304
	mov	QWORD PTR d$3[rsp], 0
; Line 306
	jmp	SHORT $LN10@cclex_next
$LN8@cclex_next:
	cvtsi2sd xmm0, DWORD PTR b$1[rsp]
	movsd	xmm1, QWORD PTR p$4[rsp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p$4[rsp], xmm0
$LN10@cclex_next:
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN9@cclex_next
; Line 307
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN44@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN44@cclex_next
; Line 308
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 309
	jmp	$LN45@cclex_next
$LN44@cclex_next:
; Line 310
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN46@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN46@cclex_next
; Line 311
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 312
	jmp	SHORT $LN47@cclex_next
$LN46@cclex_next:
; Line 313
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN48@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN48@cclex_next
; Line 314
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 315
	jmp	SHORT $LN49@cclex_next
$LN48@cclex_next:
; Line 316
	jmp	SHORT $LN9@cclex_next
$LN49@cclex_next:
$LN47@cclex_next:
$LN45@cclex_next:
; Line 318
	jmp	$LN8@cclex_next
$LN9@cclex_next:
; Line 319
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 21
; Line 320
	mov	rax, QWORD PTR u$2[rsp]
	test	rax, rax
	jl	SHORT $LN191@cclex_next
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN192@cclex_next
$LN191@cclex_next:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN192@cclex_next:
	mov	rax, QWORD PTR d$3[rsp]
	test	rax, rax
	jl	SHORT $LN189@cclex_next
	cvtsi2sd xmm1, rax
	jmp	SHORT $LN190@cclex_next
$LN189@cclex_next:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
	movaps	xmm1, xmm2
$LN190@cclex_next:
	divsd	xmm1, QWORD PTR p$4[rsp]
	addsd	xmm0, xmm1
	mov	rax, QWORD PTR l$[rsp]
	movsd	QWORD PTR [rax+64], xmm0
; Line 321
	jmp	SHORT $LN43@cclex_next
$LN42@cclex_next:
; Line 322
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 20
; Line 323
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	mov	QWORD PTR [rax+64], rcx
$LN43@cclex_next:
; Line 325
	jmp	$LN2@cclex_next
$LN50@cclex_next:
$LN51@cclex_next:
$LN52@cclex_next:
$LN53@cclex_next:
$LN54@cclex_next:
$LN55@cclex_next:
$LN56@cclex_next:
$LN57@cclex_next:
$LN58@cclex_next:
$LN59@cclex_next:
$LN60@cclex_next:
$LN61@cclex_next:
$LN62@cclex_next:
$LN63@cclex_next:
$LN64@cclex_next:
$LN65@cclex_next:
$LN66@cclex_next:
$LN67@cclex_next:
$LN68@cclex_next:
$LN69@cclex_next:
$LN70@cclex_next:
$LN71@cclex_next:
$LN72@cclex_next:
$LN73@cclex_next:
$LN74@cclex_next:
$LN75@cclex_next:
$LN76@cclex_next:
$LN77@cclex_next:
$LN78@cclex_next:
$LN79@cclex_next:
$LN80@cclex_next:
$LN81@cclex_next:
$LN82@cclex_next:
$LN83@cclex_next:
$LN84@cclex_next:
$LN85@cclex_next:
$LN86@cclex_next:
$LN87@cclex_next:
$LN88@cclex_next:
$LN89@cclex_next:
$LN90@cclex_next:
$LN91@cclex_next:
$LN92@cclex_next:
$LN93@cclex_next:
$LN94@cclex_next:
$LN95@cclex_next:
$LN96@cclex_next:
$LN97@cclex_next:
$LN98@cclex_next:
$LN99@cclex_next:
$LN100@cclex_next:
$LN101@cclex_next:
$LN102@cclex_next:
; Line 338
	mov	rax, QWORD PTR l$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_identifier
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 339
	jmp	$LN2@cclex_next
$LN103@cclex_next:
; Line 341
	mov	rax, QWORD PTR l$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_readstr
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 342
	jmp	$LN2@cclex_next
$LN104@cclex_next:
; Line 344
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 11
; Line 345
	jmp	$LN2@cclex_next
$LN105@cclex_next:
; Line 347
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 10
; Line 348
	jmp	$LN2@cclex_next
$LN106@cclex_next:
; Line 353
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 4
; Line 354
	jmp	$LN2@cclex_next
$LN107@cclex_next:
; Line 356
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 5
; Line 357
	jmp	$LN2@cclex_next
$LN108@cclex_next:
; Line 359
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 8
; Line 360
	jmp	$LN2@cclex_next
$LN109@cclex_next:
; Line 362
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 9
; Line 363
	jmp	$LN2@cclex_next
$LN110@cclex_next:
; Line 365
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 6
; Line 366
	jmp	$LN2@cclex_next
$LN111@cclex_next:
; Line 368
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 7
; Line 369
	jmp	$LN2@cclex_next
$LN112@cclex_next:
; Line 372
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 87			; 00000057H
; Line 373
	jmp	$LN2@cclex_next
$LN113@cclex_next:
; Line 377
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN114@cclex_next
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN114@cclex_next
; Line 378
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 3
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 13
; Line 379
	jmp	SHORT $LN115@cclex_next
$LN114@cclex_next:
; Line 380
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 91			; 0000005bH
$LN115@cclex_next:
; Line 382
	jmp	$LN2@cclex_next
$LN116@cclex_next:
; Line 387
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN117@cclex_next
; Line 388
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 121			; 00000079H
; Line 389
	jmp	SHORT $LN118@cclex_next
$LN117@cclex_next:
; Line 390
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 105			; 00000069H
$LN118@cclex_next:
; Line 392
	jmp	$LN2@cclex_next
$LN119@cclex_next:
; Line 398
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 124				; 0000007cH
	jne	SHORT $LN120@cclex_next
; Line 399
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 108			; 0000006cH
; Line 400
	jmp	SHORT $LN121@cclex_next
$LN120@cclex_next:
; Line 401
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN122@cclex_next
; Line 402
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 122			; 0000007aH
; Line 403
	jmp	SHORT $LN123@cclex_next
$LN122@cclex_next:
; Line 404
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 106			; 0000006aH
$LN123@cclex_next:
$LN121@cclex_next:
; Line 406
	jmp	$LN2@cclex_next
$LN124@cclex_next:
; Line 412
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 38					; 00000026H
	jne	SHORT $LN125@cclex_next
; Line 413
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 107			; 0000006bH
; Line 414
	jmp	SHORT $LN126@cclex_next
$LN125@cclex_next:
; Line 415
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN127@cclex_next
; Line 416
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 120			; 00000078H
; Line 417
	jmp	SHORT $LN128@cclex_next
$LN127@cclex_next:
; Line 418
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 104			; 00000068H
$LN128@cclex_next:
$LN126@cclex_next:
; Line 420
	jmp	$LN2@cclex_next
$LN129@cclex_next:
; Line 425
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN130@cclex_next
; Line 426
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 112			; 00000070H
; Line 427
	jmp	SHORT $LN131@cclex_next
$LN130@cclex_next:
; Line 428
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 94			; 0000005eH
$LN131@cclex_next:
; Line 430
	jmp	$LN2@cclex_next
$LN132@cclex_next:
; Line 435
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN133@cclex_next
; Line 436
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 111			; 0000006fH
; Line 437
	jmp	SHORT $LN134@cclex_next
$LN133@cclex_next:
; Line 438
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 93			; 0000005dH
$LN134@cclex_next:
; Line 440
	jmp	$LN2@cclex_next
$LN135@cclex_next:
; Line 453
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN136@cclex_next
; Line 454
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 114			; 00000072H
; Line 455
	jmp	SHORT $LN137@cclex_next
$LN136@cclex_next:
; Line 456
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 96			; 00000060H
$LN137@cclex_next:
; Line 458
	jmp	$LN2@cclex_next
$LN138@cclex_next:
; Line 471
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN139@cclex_next
; Line 472
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 92			; 0000005cH
; Line 473
	jmp	SHORT $LN140@cclex_next
$LN139@cclex_next:
; Line 474
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN141@cclex_next
; Line 475
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 115			; 00000073H
; Line 476
	jmp	SHORT $LN142@cclex_next
$LN141@cclex_next:
; Line 477
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 97			; 00000061H
$LN142@cclex_next:
$LN140@cclex_next:
; Line 479
	jmp	$LN2@cclex_next
$LN143@cclex_next:
; Line 484
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN144@cclex_next
; Line 485
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 102			; 00000066H
; Line 486
	jmp	SHORT $LN145@cclex_next
$LN144@cclex_next:
; Line 487
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 110			; 0000006eH
$LN145@cclex_next:
; Line 489
	jmp	$LN2@cclex_next
$LN146@cclex_next:
; Line 494
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN147@cclex_next
; Line 495
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 103			; 00000067H
; Line 496
	jmp	SHORT $LN148@cclex_next
$LN147@cclex_next:
; Line 497
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 90			; 0000005aH
$LN148@cclex_next:
; Line 499
	jmp	$LN2@cclex_next
$LN149@cclex_next:
; Line 504
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN150@cclex_next
; Line 505
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 118			; 00000076H
; Line 506
	jmp	SHORT $LN151@cclex_next
$LN150@cclex_next:
; Line 507
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 100			; 00000064H
$LN151@cclex_next:
; Line 509
	jmp	$LN2@cclex_next
$LN152@cclex_next:
; Line 514
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN153@cclex_next
; Line 515
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 119			; 00000077H
; Line 516
	jmp	SHORT $LN154@cclex_next
$LN153@cclex_next:
; Line 517
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 101			; 00000065H
$LN154@cclex_next:
; Line 519
	jmp	$LN2@cclex_next
$LN155@cclex_next:
; Line 524
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN156@cclex_next
; Line 525
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 113			; 00000071H
; Line 526
	jmp	SHORT $LN157@cclex_next
$LN156@cclex_next:
; Line 527
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 95			; 0000005fH
$LN157@cclex_next:
; Line 529
	jmp	$LN2@cclex_next
$LN158@cclex_next:
; Line 532
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN159@cclex_next
; Line 533
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 0
; Line 534
	jmp	SHORT $LN160@cclex_next
$LN159@cclex_next:
; Line 535
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 0
$LN160@cclex_next:
; Line 537
	jmp	$LN2@cclex_next
$LN161@cclex_next:
; Line 540
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 1
; Line 541
	jmp	$LN2@cclex_next
$LN162@cclex_next:
$LN163@cclex_next:
$LN164@cclex_next:
$LN165@cclex_next:
$LN166@cclex_next:
; Line 546
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 12
; Line 547
	jmp	$LN2@cclex_next
$LN167@cclex_next:
; Line 549
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN168@cclex_next
; Line 550
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 2
; Line 551
	jmp	SHORT $LN169@cclex_next
$LN168@cclex_next:
; Line 552
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 2
$LN169@cclex_next:
; Line 554
	jmp	SHORT $LN2@cclex_next
$LN170@cclex_next:
; Line 556
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 2
; Line 557
	jmp	SHORT $LN2@cclex_next
$LN171@cclex_next:
; Line 559
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+40], 3
$LN2@cclex_next:
; Line 563
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+56]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+56], eax
; Line 564
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+56]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+56], eax
; Line 566
	lea	rax, OFFSET FLAT:$SG48590
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 566				; 00000236H
	lea	r8, OFFSET FLAT:$SG48591
	mov	edx, 51					; 00000033H
	lea	rcx, QWORD PTR $T14[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv806[rsp], rcx
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rdi, QWORD PTR $T7[rsp]
	mov	QWORD PTR tv1265[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1265[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48589
	mov	rcx, QWORD PTR tv806[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T8[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
$LN186@cclex_next:
$LN185@cclex_next:
$LN184@cclex_next:
$LN11@cclex_next:
; Line 567
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN12@cclex_next
; Line 568
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv681[rsp], eax
	mov	eax, DWORD PTR tv681[rsp]
	sub	eax, 8
	mov	DWORD PTR tv681[rsp], eax
	cmp	DWORD PTR tv681[rsp], 51		; 00000033H
	ja	$LN13@cclex_next
	movsxd	rax, DWORD PTR tv681[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN187@cclex_next[rcx+rax]
	mov	eax, DWORD PTR $LN188@cclex_next[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN172@cclex_next:
$LN173@cclex_next:
$LN174@cclex_next:
$LN175@cclex_next:
$LN176@cclex_next:
; Line 570
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 571
	jmp	$LN11@cclex_next
$LN177@cclex_next:
; Line 573
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN178@cclex_next
; Line 574
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 575
	jmp	SHORT $LN179@cclex_next
$LN178@cclex_next:
; Line 576
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN179@cclex_next:
; Line 578
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+56]
	and	eax, 1
	inc	eax
	and	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+56], eax
; Line 579
	jmp	$LN184@cclex_next
$LN180@cclex_next:
; Line 581
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 582
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+56]
	and	eax, 1
	inc	eax
	and	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+56], eax
; Line 583
	jmp	$LN185@cclex_next
$LN181@cclex_next:
; Line 585
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 586
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	inc	eax
	and	eax, 1
	shl	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+56], eax
; Line 587
	jmp	$LN186@cclex_next
$LN13@cclex_next:
; Line 589
	jmp	SHORT $LN182@cclex_next
	jmp	SHORT $leave_token_trailing$195
; Line 590
	jmp	$LN11@cclex_next
$LN12@cclex_next:
$LN182@cclex_next:
$leave_token_trailing$195:
; Line 593
	lea	rax, OFFSET FLAT:$SG48604
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 593				; 00000251H
	lea	r8, OFFSET FLAT:$SG48605
	mov	edx, 52					; 00000034H
	lea	rcx, QWORD PTR $T15[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv798[rsp], rcx
	lea	rdx, QWORD PTR $T10[rsp]
	lea	rdi, QWORD PTR $T9[rsp]
	mov	QWORD PTR tv1325[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1325[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48603
	mov	rcx, QWORD PTR tv798[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
$LN16@cclex_next:
$leave$194:
; Line 596
	lea	rax, OFFSET FLAT:$SG48607
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 596				; 00000254H
	lea	r8, OFFSET FLAT:$SG48608
	mov	edx, 53					; 00000035H
	lea	rcx, QWORD PTR $T16[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv796[rsp], rcx
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rdi, QWORD PTR $T11[rsp]
	mov	QWORD PTR tv1337[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv1337[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG48606
	mov	rcx, QWORD PTR tv796[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 597
	add	rsp, 552				; 00000228H
	pop	rdi
	pop	rsi
	ret	0
	npad	3
$LN193@cclex_next:
	DD	$LN161@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN166@cclex_next
	DD	$LN163@cclex_next
	DD	$LN170@cclex_next
	DD	$LN165@cclex_next
	DD	$LN164@cclex_next
	DD	$LN167@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN162@cclex_next
	DD	$LN146@cclex_next
	DD	$LN103@cclex_next
	DD	$LN17@cclex_next
	DD	$LN17@cclex_next
	DD	$LN155@cclex_next
	DD	$LN124@cclex_next
	DD	$LN17@cclex_next
	DD	$LN106@cclex_next
	DD	$LN107@cclex_next
	DD	$LN132@cclex_next
	DD	$LN135@cclex_next
	DD	$LN105@cclex_next
	DD	$LN138@cclex_next
	DD	$LN113@cclex_next
	DD	$LN129@cclex_next
	DD	$LN18@cclex_next
	DD	$LN19@cclex_next
	DD	$LN20@cclex_next
	DD	$LN21@cclex_next
	DD	$LN22@cclex_next
	DD	$LN23@cclex_next
	DD	$LN24@cclex_next
	DD	$LN25@cclex_next
	DD	$LN26@cclex_next
	DD	$LN27@cclex_next
	DD	$LN104@cclex_next
	DD	$LN171@cclex_next
	DD	$LN152@cclex_next
	DD	$LN143@cclex_next
	DD	$LN149@cclex_next
	DD	$LN158@cclex_next
	DD	$LN17@cclex_next
	DD	$LN50@cclex_next
	DD	$LN51@cclex_next
	DD	$LN52@cclex_next
	DD	$LN53@cclex_next
	DD	$LN54@cclex_next
	DD	$LN55@cclex_next
	DD	$LN56@cclex_next
	DD	$LN57@cclex_next
	DD	$LN58@cclex_next
	DD	$LN59@cclex_next
	DD	$LN60@cclex_next
	DD	$LN61@cclex_next
	DD	$LN62@cclex_next
	DD	$LN63@cclex_next
	DD	$LN64@cclex_next
	DD	$LN65@cclex_next
	DD	$LN66@cclex_next
	DD	$LN67@cclex_next
	DD	$LN68@cclex_next
	DD	$LN69@cclex_next
	DD	$LN70@cclex_next
	DD	$LN71@cclex_next
	DD	$LN72@cclex_next
	DD	$LN73@cclex_next
	DD	$LN74@cclex_next
	DD	$LN75@cclex_next
	DD	$LN108@cclex_next
	DD	$LN17@cclex_next
	DD	$LN109@cclex_next
	DD	$LN116@cclex_next
	DD	$LN102@cclex_next
	DD	$LN17@cclex_next
	DD	$LN76@cclex_next
	DD	$LN77@cclex_next
	DD	$LN78@cclex_next
	DD	$LN79@cclex_next
	DD	$LN80@cclex_next
	DD	$LN81@cclex_next
	DD	$LN82@cclex_next
	DD	$LN83@cclex_next
	DD	$LN84@cclex_next
	DD	$LN85@cclex_next
	DD	$LN86@cclex_next
	DD	$LN87@cclex_next
	DD	$LN88@cclex_next
	DD	$LN89@cclex_next
	DD	$LN90@cclex_next
	DD	$LN91@cclex_next
	DD	$LN92@cclex_next
	DD	$LN93@cclex_next
	DD	$LN94@cclex_next
	DD	$LN95@cclex_next
	DD	$LN96@cclex_next
	DD	$LN97@cclex_next
	DD	$LN98@cclex_next
	DD	$LN99@cclex_next
	DD	$LN100@cclex_next
	DD	$LN101@cclex_next
	DD	$LN110@cclex_next
	DD	$LN119@cclex_next
	DD	$LN111@cclex_next
	DD	$LN112@cclex_next
$LN188@cclex_next:
	DD	$LN176@cclex_next
	DD	$LN173@cclex_next
	DD	$LN180@cclex_next
	DD	$LN175@cclex_next
	DD	$LN174@cclex_next
	DD	$LN177@cclex_next
	DD	$LN172@cclex_next
	DD	$LN181@cclex_next
	DD	$LN13@cclex_next
$LN187@cclex_next:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
cclex_next_token_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
l$ = 64
token$ = 72
cclex_token PROC
; File W:\cpp\void\cc\cclex.c
; Line 136
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR l$[rsp]
	mov	rdi, QWORD PTR token$[rsp]
	lea	rsi, QWORD PTR [rax+40]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 137
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
	mov	rax, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rax+40]
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 138
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
cclex_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 0
s$ = 32
cclex_idenlen PROC
; File W:\cpp\void\cc\cclex.c
; Line 127
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 128
	mov	DWORD PTR l$[rsp], 0
	jmp	SHORT $LN4@cclex_iden
$LN2@cclex_iden:
; Line 130
	mov	eax, DWORD PTR l$[rsp]
	inc	eax
	mov	DWORD PTR l$[rsp], eax
$LN4@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN6@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 122				; 0000007aH
	jle	SHORT $LN5@cclex_iden
$LN6@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN7@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 90					; 0000005aH
	jle	SHORT $LN5@cclex_iden
$LN7@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN8@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN5@cclex_iden
$LN8@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 95					; 0000005fH
	jne	SHORT $LN3@cclex_iden
$LN5@cclex_iden:
	jmp	$LN2@cclex_iden
$LN3@cclex_iden:
; Line 131
	mov	eax, DWORD PTR l$[rsp]
; Line 132
	add	rsp, 24
	ret	0
cclex_idenlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 8
cclex_uninit PROC
; File W:\cpp\void\cc\cclex.c
; Line 119
	mov	QWORD PTR [rsp+8], rcx
; Line 122
	ret	0
cclex_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
l$ = 96
cclex_init PROC
; File W:\cpp\void\cc\cclex.c
; Line 112
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 113
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
	mov	rax, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rax+40]
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 114
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_hash_init
; Line 115
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
cclex_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 8
len$ = 16
bed$ = 24
cclex_move PROC
; File W:\cpp\void\cc\cclex.c
; Line 105
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 106
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 107
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+24], rcx
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 108
	ret	0
cclex_move ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lexer$ = 48
cclex_hash_init PROC
; File W:\cpp\void\cc\cclex.c
; Line 11
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 17
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48236
	mov	r8d, 5
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 22
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN3@cclex_hash
	int	3
$LN3@cclex_hash:
; Line 18
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48237
	mov	r8d, 7
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 23
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN5@cclex_hash
	int	3
$LN5@cclex_hash:
; Line 19
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48238
	mov	r8d, 7
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 24
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN7@cclex_hash
	int	3
$LN7@cclex_hash:
; Line 20
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48239
	mov	r8d, 9
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 25
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@cclex_hash
	int	3
$LN9@cclex_hash:
; Line 21
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48240
	mov	r8d, 10
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 26
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN11@cclex_hash
	int	3
$LN11@cclex_hash:
; Line 22
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48241
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 27
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN13@cclex_hash
	int	3
$LN13@cclex_hash:
; Line 23
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48242
	mov	r8d, 9
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 28
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN15@cclex_hash
	int	3
$LN15@cclex_hash:
; Line 24
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48243
	mov	r8d, 10
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 29
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN17@cclex_hash
	int	3
$LN17@cclex_hash:
; Line 25
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48244
	mov	r8d, 11
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 30
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN19@cclex_hash
	int	3
$LN19@cclex_hash:
; Line 31
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48245
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 32		; 00000020H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN21@cclex_hash
	int	3
$LN21@cclex_hash:
; Line 32
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48246
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 33		; 00000021H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN23@cclex_hash
	int	3
$LN23@cclex_hash:
; Line 38
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48247
	mov	r8d, 5
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 36		; 00000024H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN25@cclex_hash
	int	3
$LN25@cclex_hash:
; Line 39
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48248
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 37		; 00000025H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN27@cclex_hash
	int	3
$LN27@cclex_hash:
; Line 40
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48249
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 38		; 00000026H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN29@cclex_hash
	int	3
$LN29@cclex_hash:
; Line 46
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48250
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 41		; 00000029H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN31@cclex_hash
	int	3
$LN31@cclex_hash:
; Line 47
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48251
	mov	r8d, 9
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 42		; 0000002aH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN33@cclex_hash
	int	3
$LN33@cclex_hash:
; Line 53
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48252
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 45		; 0000002dH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN35@cclex_hash
	int	3
$LN35@cclex_hash:
; Line 54
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48253
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 46		; 0000002eH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN37@cclex_hash
	int	3
$LN37@cclex_hash:
; Line 55
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48254
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 47		; 0000002fH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN39@cclex_hash
	int	3
$LN39@cclex_hash:
; Line 56
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48255
	mov	r8d, 7
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 48		; 00000030H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN41@cclex_hash
	int	3
$LN41@cclex_hash:
; Line 57
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48256
	mov	r8d, 7
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 49		; 00000031H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN43@cclex_hash
	int	3
$LN43@cclex_hash:
; Line 58
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48257
	mov	r8d, 7
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 50		; 00000032H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN45@cclex_hash
	int	3
$LN45@cclex_hash:
; Line 59
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48258
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 51		; 00000033H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN47@cclex_hash
	int	3
$LN47@cclex_hash:
; Line 60
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48259
	mov	r8d, 5
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 52		; 00000034H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN49@cclex_hash
	int	3
$LN49@cclex_hash:
; Line 61
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48260
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 53		; 00000035H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN51@cclex_hash
	int	3
$LN51@cclex_hash:
; Line 62
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48261
	mov	r8d, 3
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 54		; 00000036H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN53@cclex_hash
	int	3
$LN53@cclex_hash:
; Line 63
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48262
	mov	r8d, 5
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 55		; 00000037H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN55@cclex_hash
	int	3
$LN55@cclex_hash:
; Line 64
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48263
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 56		; 00000038H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN57@cclex_hash
	int	3
$LN57@cclex_hash:
; Line 65
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48264
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 57		; 00000039H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN59@cclex_hash
	int	3
$LN59@cclex_hash:
; Line 66
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48265
	mov	r8d, 5
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 58		; 0000003aH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN61@cclex_hash
	int	3
$LN61@cclex_hash:
; Line 67
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48266
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 59		; 0000003bH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN63@cclex_hash
	int	3
$LN63@cclex_hash:
; Line 68
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48267
	mov	r8d, 7
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 60		; 0000003cH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN65@cclex_hash
	int	3
$LN65@cclex_hash:
; Line 69
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48268
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 61		; 0000003dH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN67@cclex_hash
	int	3
$LN67@cclex_hash:
; Line 70
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48269
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 62		; 0000003eH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN69@cclex_hash
	int	3
$LN69@cclex_hash:
; Line 74
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48270
	mov	r8d, 7
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 64		; 00000040H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN71@cclex_hash
	int	3
$LN71@cclex_hash:
; Line 79
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48271
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 66		; 00000042H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN73@cclex_hash
	int	3
$LN73@cclex_hash:
; Line 80
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48272
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 67		; 00000043H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN75@cclex_hash
	int	3
$LN75@cclex_hash:
; Line 81
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48273
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 68		; 00000044H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN77@cclex_hash
	int	3
$LN77@cclex_hash:
; Line 82
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48274
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 69		; 00000045H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN79@cclex_hash
	int	3
$LN79@cclex_hash:
; Line 83
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48275
	mov	r8d, 13
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 70		; 00000046H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN81@cclex_hash
	int	3
$LN81@cclex_hash:
; Line 84
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48276
	mov	r8d, 10
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 71		; 00000047H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN83@cclex_hash
	int	3
$LN83@cclex_hash:
; Line 89
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48277
	mov	r8d, 2
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 73		; 00000049H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN85@cclex_hash
	int	3
$LN85@cclex_hash:
; Line 90
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48278
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 74		; 0000004aH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN87@cclex_hash
	int	3
$LN87@cclex_hash:
; Line 91
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48279
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 75		; 0000004bH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN89@cclex_hash
	int	3
$LN89@cclex_hash:
; Line 92
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48280
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 76		; 0000004cH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN91@cclex_hash
	int	3
$LN91@cclex_hash:
; Line 93
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48281
	mov	r8d, 7
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 77		; 0000004dH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN93@cclex_hash
	int	3
$LN93@cclex_hash:
; Line 94
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48282
	mov	r8d, 3
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 78		; 0000004eH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN95@cclex_hash
	int	3
$LN95@cclex_hash:
; Line 95
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48283
	mov	r8d, 5
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 79		; 0000004fH
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN97@cclex_hash
	int	3
$LN97@cclex_hash:
; Line 96
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48284
	mov	r8d, 2
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 80		; 00000050H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN99@cclex_hash
	int	3
$LN99@cclex_hash:
; Line 97
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48285
	mov	r8d, 4
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 81		; 00000051H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN101@cclex_hash
	int	3
$LN101@cclex_hash:
; Line 98
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48286
	mov	r8d, 6
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 82		; 00000052H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN103@cclex_hash
	int	3
$LN103@cclex_hash:
; Line 99
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48287
	mov	r8d, 5
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 83		; 00000053H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN105@cclex_hash
	int	3
$LN105@cclex_hash:
; Line 100
	mov	rax, QWORD PTR lexer$[rsp]
	add	rax, 32					; 00000020H
	lea	r9, OFFSET FLAT:$SG48288
	mov	r8d, 8
	mov	edx, 4
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR lexer$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	DWORD PTR [rcx+rax*4], 84		; 00000054H
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN107@cclex_hash
	int	3
$LN107@cclex_hash:
; Line 101
	add	rsp, 40					; 00000028H
	ret	0
cclex_hash_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
__$ReturnAddress$ = 64
value$ = 72
label$ = 80
ccexec_lvalue PROC
; File W:\cpp\void\cc\ccexec.h
; Line 57
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 58
	mov	DWORD PTR t$[rsp+8], 2
; Line 59
	mov	rax, QWORD PTR value$[rsp]
	mov	QWORD PTR t$[rsp+16], rax
; Line 60
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR t$[rsp], rax
; Line 61
	lea	rax, QWORD PTR t$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 62
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
ccexec_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
__$ReturnAddress$ = 64
value$ = 72
label$ = 80
ccexec_rvalue PROC
; File W:\cpp\void\cc\ccexec.h
; Line 48
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 49
	mov	DWORD PTR t$[rsp+8], 1
; Line 50
	mov	rax, QWORD PTR value$[rsp]
	mov	QWORD PTR t$[rsp+16], rax
; Line 51
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR t$[rsp], rax
; Line 52
	lea	rax, QWORD PTR t$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 53
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
ccexec_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
block$ = 96
point$ = 104
cnd$ = 112
ccblock_fjump PROC
; File W:\cpp\void\cc\ccemit.h
; Line 272
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 273
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR point$[rsp]
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR cnd$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccedict_fjump
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 274
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
ccblock_fjump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
block$ = 96
point$ = 104
ccblock_jump PROC
; File W:\cpp\void\cc\ccemit.h
; Line 260
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 261
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR point$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccedict_jump
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 262
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
ccblock_jump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
p$ = 56
i$ = 64
ccblock_invoke PROC
; File W:\cpp\void\cc\ccemit.h
; Line 254
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 255
	mov	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	ccedict_call
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 256
	add	rsp, 40					; 00000028H
	ret	0
ccblock_invoke ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
value$ = 56
ccblock_return PROC
; File W:\cpp\void\cc\ccemit.h
; Line 242
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 243
	mov	rcx, QWORD PTR value$[rsp]
	call	ccedict_return
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 244
	add	rsp, 40					; 00000028H
	ret	0
ccblock_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
blc$ = 56
ccblock_enter PROC
; File W:\cpp\void\cc\ccemit.h
; Line 236
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 237
	mov	rcx, QWORD PTR blc$[rsp]
	call	ccedict_enter
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 238
	add	rsp, 40					; 00000028H
	ret	0
ccblock_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
opr$ = 56
lhs$ = 64
rhs$ = 72
ccblock_arith PROC
; File W:\cpp\void\cc\ccemit.h
; Line 230
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 231
	mov	r8, QWORD PTR rhs$[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	ecx, DWORD PTR opr$[rsp]
	call	ccedict_arith
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 232
	add	rsp, 40					; 00000028H
	ret	0
ccblock_arith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccblock_address PROC
; File W:\cpp\void\cc\ccemit.h
; Line 224
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 225
	mov	rdx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	call	ccedict_address
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 226
	add	rsp, 40					; 00000028H
	ret	0
ccblock_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccblock_fetch PROC
; File W:\cpp\void\cc\ccemit.h
; Line 218
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 219
	mov	rdx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	call	ccedict_fetch
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 220
	add	rsp, 40					; 00000028H
	ret	0
ccblock_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccblock_store PROC
; File W:\cpp\void\cc\ccemit.h
; Line 212
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 213
	mov	rdx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	call	ccedict_store
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 214
	add	rsp, 40					; 00000028H
	ret	0
ccblock_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
func$ = 64
tree$ = 72
ccprocd_local PROC
; File W:\cpp\void\cc\ccemit.h
; Line 202
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 205
	mov	rax, QWORD PTR func$[rsp]
	add	rax, 16
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_tblget
	mov	rcx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$[rsp], rax
; Line 206
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN2@ccprocd_lo
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	jmp	SHORT $LN1@ccprocd_lo
$LN2@ccprocd_lo:
; Line 207
	xor	eax, eax
$LN1@ccprocd_lo:
; Line 208
	add	rsp, 56					; 00000038H
	ret	0
ccprocd_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
block$ = 64
edict$ = 72
ccblock_add_edict PROC
; File W:\cpp\void\cc\ccemit.h
; Line 194
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add
	mov	QWORD PTR value$[rsp], rax
; Line 195
	mov	rax, QWORD PTR value$[rsp]
	mov	DWORD PTR [rax], 5
; Line 196
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 197
	mov	rax, QWORD PTR value$[rsp]
; Line 198
	add	rsp, 56					; 00000038H
	ret	0
ccblock_add_edict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
t$ = 56
$T1 = 64
$T2 = 96
$T3 = 128
block$ = 192
ccblock_add PROC
; File W:\cpp\void\cc\ccemit.h
; Line 185
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rax, OFFSET FLAT:$SG47969
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 185				; 000000b9H
	lea	r8, OFFSET FLAT:$SG47970
	mov	edx, 43					; 0000002bH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 80					; 00000050H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR v$[rsp], rax
; Line 186
	mov	rax, QWORD PTR block$[rsp]
	add	rax, 8
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR t$[rsp], rax
; Line 187
	mov	r8d, 80					; 00000050H
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	memset
; Line 188
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 189
	mov	rax, QWORD PTR v$[rsp]
; Line 190
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccblock_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 0
t$ = 8
__$ReturnAddress$ = 64
block$ = 72
label$ = 80
ccblock_label PROC
; File W:\cpp\void\cc\ccemit.h
; Line 176
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 177
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR t$[rsp], rax
; Line 178
	mov	rax, QWORD PTR block$[rsp]
	mov	QWORD PTR t$[rsp+8], rax
; Line 179
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN3@ccblock_la
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+8]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv70[rsp], rax
	jmp	SHORT $LN4@ccblock_la
$LN3@ccblock_la:
	mov	QWORD PTR tv70[rsp], 0
$LN4@ccblock_la:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR t$[rsp+16], eax
; Line 180
	lea	rax, QWORD PTR t$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 181
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
ccblock_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
value$ = 96
p$ = 104
ccvalue_retarget PROC
; File W:\cpp\void\cc\ccemit.h
; Line 167
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 168
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN3@ccvalue_re
	int	3
$LN3@ccvalue_re:
; Line 169
	mov	rax, QWORD PTR value$[rsp]
	cmp	DWORD PTR [rax], 5
	je	SHORT $LN5@ccvalue_re
	int	3
$LN5@ccvalue_re:
; Line 171
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR p$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR [rax+48]
	call	ccedict_retarget
; Line 172
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
ccvalue_retarget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
tv83 = 40
tv95 = 48
tv139 = 56
v$ = 64
emit$ = 96
tree$ = 104
label$ = 112
ccemit_global_procd PROC
; File W:\cpp\void\cc\ccemit.h
; Line 146
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 147
	mov	r8, QWORD PTR label$[rsp]
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_include_global
	mov	QWORD PTR v$[rsp], rax
; Line 148
	mov	rax, QWORD PTR v$[rsp]
	mov	DWORD PTR [rax], 4
; Line 150
	mov	rcx, QWORD PTR label$[rsp]
	call	ccprocd
	mov	QWORD PTR p$[rsp], rax
; Line 152
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 153
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 156
	lea	rcx, OFFSET FLAT:$SG47945
	call	ccblock
	mov	QWORD PTR tv83[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR tv83[rsp]
	mov	QWORD PTR [rax+32], rcx
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 24
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR tv83[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 157
	lea	rcx, OFFSET FLAT:$SG47946
	call	ccblock
	mov	QWORD PTR tv95[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR tv95[rsp]
	mov	QWORD PTR [rax+40], rcx
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 24
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR tv95[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 158
	lea	rcx, OFFSET FLAT:$SG47947
	call	ccblock
	mov	QWORD PTR tv139[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR tv139[rsp]
	mov	QWORD PTR [rax+48], rcx
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 24
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR tv139[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 160
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 162
	mov	rax, QWORD PTR p$[rsp]
; Line 163
	add	rsp, 88					; 00000058H
	ret	0
ccemit_global_procd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
v$ = 40
emit$ = 64
tree$ = 72
label$ = 80
ccemit_include_global PROC
; File W:\cpp\void\cc\ccemit.h
; Line 134
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 135
	mov	rax, QWORD PTR emit$[rsp]
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_tblput
	mov	rcx, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$[rsp], rax
; Line 136
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN3@ccemit_inc
	int	3
$LN3@ccemit_inc:
; Line 138
	mov	rcx, QWORD PTR label$[rsp]
	call	ccvalue
	mov	QWORD PTR value$[rsp], rax
; Line 139
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 141
	mov	rax, QWORD PTR value$[rsp]
; Line 142
	add	rsp, 56					; 00000038H
	ret	0
ccemit_include_global ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
value$ = 40
emit$ = 64
tree$ = 72
ccemit_global PROC
; File W:\cpp\void\cc\ccemit.h
; Line 124
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 125
	mov	rax, QWORD PTR emit$[rsp]
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_tblget
	mov	rcx, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$[rsp], rax
; Line 126
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN3@ccemit_glo
	int	3
$LN3@ccemit_glo:
; Line 128
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR value$[rsp], rax
; Line 129
	mov	rax, QWORD PTR value$[rsp]
; Line 130
	add	rsp, 56					; 00000038H
	ret	0
ccemit_global ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
label$ = 192
ccprocd	PROC
; File W:\cpp\void\cc\ccemit.h
; Line 111
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 112
	lea	rax, OFFSET FLAT:$SG47914
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 112				; 00000070H
	lea	r8, OFFSET FLAT:$SG47915
	mov	edx, 42					; 0000002aH
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 56					; 00000038H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR t$[rsp], rax
; Line 113
	mov	r8d, 56					; 00000038H
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	memset
; Line 115
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR label$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 116
	mov	rax, QWORD PTR t$[rsp]
; Line 117
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccprocd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
label$ = 192
ccblock	PROC
; File W:\cpp\void\cc\ccemit.h
; Line 100
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 101
	lea	rax, OFFSET FLAT:$SG47905
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 101				; 00000065H
	lea	r8, OFFSET FLAT:$SG47906
	mov	edx, 41					; 00000029H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 16
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR t$[rsp], rax
; Line 102
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	memset
; Line 104
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR label$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 105
	mov	rax, QWORD PTR t$[rsp]
; Line 106
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccblock	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
kind$ = 192
label$ = 200
cctype	PROC
; File W:\cpp\void\cc\ccemit.h
; Line 88
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 89
	lea	rax, OFFSET FLAT:$SG47896
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 89					; 00000059H
	lea	r8, OFFSET FLAT:$SG47897
	mov	edx, 40					; 00000028H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR t$[rsp], rax
; Line 90
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	memset
; Line 92
	mov	rax, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR kind$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 93
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR label$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 94
	mov	rax, QWORD PTR t$[rsp]
; Line 95
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
cctype	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
label$ = 192
ccvalue	PROC
; File W:\cpp\void\cc\ccemit.h
; Line 77
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 78
	lea	rax, OFFSET FLAT:$SG47886
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 78					; 0000004eH
	lea	r8, OFFSET FLAT:$SG47887
	mov	edx, 39					; 00000027H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 80					; 00000050H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR t$[rsp], rax
; Line 79
	mov	r8d, 80					; 00000050H
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	memset
; Line 81
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR label$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 82
	mov	rax, QWORD PTR t$[rsp]
; Line 83
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccvalue	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
lval$ = 64
rval$ = 72
ccedict_address PROC
; File W:\cpp\void\cc\ccedict.h
; Line 235
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 236
	lea	rdx, OFFSET FLAT:$SG47763
	mov	ecx, 2
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 237
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 238
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 239
	mov	rax, QWORD PTR e$[rsp]
; Line 240
	add	rsp, 56					; 00000038H
	ret	0
ccedict_address ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
rval$ = 64
ccedict_return PROC
; File W:\cpp\void\cc\ccedict.h
; Line 227
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 228
	lea	rdx, OFFSET FLAT:$SG47757
	mov	ecx, 13
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 229
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+96], rcx
; Line 230
	mov	rax, QWORD PTR e$[rsp]
; Line 231
	add	rsp, 56					; 00000038H
	ret	0
ccedict_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
lval$ = 64
rval$ = 72
ccedict_call PROC
; File W:\cpp\void\cc\ccedict.h
; Line 216
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 217
	cmp	QWORD PTR lval$[rsp], 0
	jne	SHORT $LN3@ccedict_ca
	int	3
$LN3@ccedict_ca:
; Line 219
	lea	rdx, OFFSET FLAT:$SG47752
	mov	ecx, 12
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 220
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 221
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+88], rcx
; Line 222
	mov	rax, QWORD PTR e$[rsp]
; Line 223
	add	rsp, 56					; 00000038H
	ret	0
ccedict_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
point$ = 64
cnd$ = 72
ccedict_fjump PROC
; File W:\cpp\void\cc\ccedict.h
; Line 196
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 197
	mov	rax, QWORD PTR point$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, 8
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 198
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR point$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+104], rcx
; Line 199
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR point$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+112], ecx
; Line 200
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR cnd$[rsp]
	mov	QWORD PTR [rax+120], rcx
; Line 201
	mov	rax, QWORD PTR e$[rsp]
; Line 202
	add	rsp, 56					; 00000038H
	ret	0
ccedict_fjump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
point$ = 64
ccedict_jump PROC
; File W:\cpp\void\cc\ccedict.h
; Line 177
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 178
	mov	rax, QWORD PTR point$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, 6
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 179
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR point$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+104], rcx
; Line 180
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR point$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+112], ecx
; Line 181
	mov	rax, QWORD PTR e$[rsp]
; Line 182
	add	rsp, 56					; 00000038H
	ret	0
ccedict_jump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
blc$ = 64
ccedict_enter PROC
; File W:\cpp\void\cc\ccedict.h
; Line 169
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 170
	lea	rdx, OFFSET FLAT:$SG47726
	mov	ecx, 11
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 171
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR blc$[rsp]
	mov	QWORD PTR [rax+128], rcx
; Line 172
	mov	rax, QWORD PTR e$[rsp]
; Line 173
	add	rsp, 56					; 00000038H
	ret	0
ccedict_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
opr$ = 64
lhs$ = 72
rhs$ = 80
ccedict_arith PROC
; File W:\cpp\void\cc\ccedict.h
; Line 159
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 160
	lea	rdx, OFFSET FLAT:$SG47721
	mov	ecx, 5
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 161
	mov	rax, QWORD PTR e$[rsp]
	mov	ecx, DWORD PTR opr$[rsp]
	mov	DWORD PTR [rax+160], ecx
; Line 162
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lhs$[rsp]
	mov	QWORD PTR [rax+168], rcx
; Line 163
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rax+176], rcx
; Line 164
	mov	rax, QWORD PTR e$[rsp]
; Line 165
	add	rsp, 56					; 00000038H
	ret	0
ccedict_arith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
lval$ = 64
rval$ = 72
ccedict_fetch PROC
; File W:\cpp\void\cc\ccedict.h
; Line 150
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 151
	lea	rdx, OFFSET FLAT:$SG47714
	mov	ecx, 4
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 152
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 153
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 154
	mov	rax, QWORD PTR e$[rsp]
; Line 155
	add	rsp, 56					; 00000038H
	ret	0
ccedict_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
lval$ = 64
rval$ = 72
ccedict_store PROC
; File W:\cpp\void\cc\ccedict.h
; Line 141
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 142
	lea	rdx, OFFSET FLAT:$SG47708
	mov	ecx, 3
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 143
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 144
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 145
	mov	rax, QWORD PTR e$[rsp]
; Line 146
	add	rsp, 56					; 00000038H
	ret	0
ccedict_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 8
p$ = 16
ccedict_retarget PROC
; File W:\cpp\void\cc\ccedict.h
; Line 134
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 135
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+104], rcx
; Line 136
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+112], ecx
; Line 137
	ret	0
ccedict_retarget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
type$ = 64
label$ = 72
ccedict_param PROC
; File W:\cpp\void\cc\ccedict.h
; Line 122
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 123
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN3@ccedict_pa
	int	3
$LN3@ccedict_pa:
; Line 126
	mov	rdx, QWORD PTR label$[rsp]
	mov	ecx, 1
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 128
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 129
	mov	rax, QWORD PTR e$[rsp]
; Line 130
	add	rsp, 56					; 00000038H
	ret	0
ccedict_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
type$ = 64
label$ = 72
ccedict_local PROC
; File W:\cpp\void\cc\ccedict.h
; Line 110
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 111
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN3@ccedict_lo
	int	3
$LN3@ccedict_lo:
; Line 114
	mov	rdx, QWORD PTR label$[rsp]
	xor	ecx, ecx
	call	ccedict
	mov	QWORD PTR e$[rsp], rax
; Line 116
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 117
	mov	rax, QWORD PTR e$[rsp]
; Line 118
	add	rsp, 56					; 00000038H
	ret	0
ccedict_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
kind$ = 192
label$ = 200
ccedict	PROC
; File W:\cpp\void\cc\ccedict.h
; Line 98
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 99
	lea	rax, OFFSET FLAT:$SG47687
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 99					; 00000063H
	lea	r8, OFFSET FLAT:$SG47688
	mov	edx, 38					; 00000026H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 184				; 000000b8H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR e$[rsp], rax
; Line 100
	mov	r8d, 184				; 000000b8H
	xor	edx, edx
	mov	rcx, QWORD PTR e$[rsp]
	call	memset
; Line 102
	mov	rax, QWORD PTR e$[rsp]
	mov	ecx, DWORD PTR kind$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 103
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR label$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 104
	mov	rax, QWORD PTR e$[rsp]
; Line 105
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccedict	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 32
tv75 = 40
tree$ = 64
cctree_solve_translation_unit PROC
; File W:\cpp\void\cc\cccheck.c
; Line 285
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 23
	je	SHORT $LN6@cctree_sol
	int	3
$LN6@cctree_sol:
; Line 288
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR decl$[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR decl$[rsp]
	add	rax, 8
	mov	QWORD PTR decl$[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN8@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN9@cctree_sol
$LN8@cctree_sol:
	mov	QWORD PTR tv75[rsp], 0
$LN9@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv75[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR decl$[rsp], rax
	jae	SHORT $LN3@cctree_sol
	mov	rax, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_decl
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 289
	add	rsp, 56					; 00000038H
	ret	0
cctree_solve_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$1 = 48
tv132 = 56
tv150 = 64
value$2 = 72
$T3 = 80
$T4 = 112
$T5 = 144
$T6 = 176
$T7 = 208
$T8 = 240
$T9 = 272
$T10 = 304
$T11 = 336
tree$ = 400
cctree_solve_decl_name PROC
; File W:\cpp\void\cc\cccheck.c
; Line 223
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
; Line 225
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax], 23
	jne	SHORT $LN8@cctree_sol
; Line 226
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN24@cctree_sol
	int	3
$LN24@cctree_sol:
$LN8@cctree_sol:
; Line 228
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN9@cctree_sol
; Line 229
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax], 23
	je	SHORT $LN26@cctree_sol
	int	3
$LN26@cctree_sol:
$LN9@cctree_sol:
; Line 232
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN10@cctree_sol
; Line 234
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 16
	test	eax, eax
	je	$LN12@cctree_sol
; Line 236
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_include_invokable
	test	eax, eax
	je	$LN14@cctree_sol
; Line 239
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$1[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR list$1[rsp]
	add	rax, 8
	mov	QWORD PTR list$1[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN28@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv132[rsp], rax
	jmp	SHORT $LN29@cctree_sol
$LN28@cctree_sol:
	mov	QWORD PTR tv132[rsp], 0
$LN29@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv132[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR list$1[rsp], rax
	jae	SHORT $LN3@cctree_sol
; Line 240
	mov	rax, QWORD PTR list$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_decl_name
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 242
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$1[rsp], rax
	jmp	SHORT $LN7@cctree_sol
$LN5@cctree_sol:
	mov	rax, QWORD PTR list$1[rsp]
	add	rax, 8
	mov	QWORD PTR list$1[rsp], rax
$LN7@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN30@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv150[rsp], rax
	jmp	SHORT $LN31@cctree_sol
$LN30@cctree_sol:
	mov	QWORD PTR tv150[rsp], 0
$LN31@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv150[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR list$1[rsp], rax
	jae	SHORT $LN6@cctree_sol
; Line 243
	mov	rax, QWORD PTR list$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_statement
	jmp	SHORT $LN5@cctree_sol
$LN6@cctree_sol:
; Line 244
	jmp	SHORT $LN15@cctree_sol
$LN14@cctree_sol:
; Line 245
	lea	rax, OFFSET FLAT:$SG47437
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 245				; 000000f5H
	lea	r8, OFFSET FLAT:$SG47438
	mov	edx, 35					; 00000023H
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+24]
	lea	r8, OFFSET FLAT:$SG47435
	lea	rdx, OFFSET FLAT:$SG47436
	lea	rcx, QWORD PTR $T4[rsp]
	call	cctrace_
$LN15@cctree_sol:
; Line 246
	jmp	$LN13@cctree_sol
$LN12@cctree_sol:
; Line 247
	lea	rax, OFFSET FLAT:$SG47441
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 247				; 000000f7H
	lea	r8, OFFSET FLAT:$SG47442
	mov	edx, 36					; 00000024H
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+24]
	lea	r8, OFFSET FLAT:$SG47439
	lea	rdx, OFFSET FLAT:$SG47440
	lea	rcx, QWORD PTR $T6[rsp]
	call	cctrace_
$LN13@cctree_sol:
; Line 248
	jmp	$LN11@cctree_sol
$LN10@cctree_sol:
; Line 250
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	strlen
	mov	rcx, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rcx+24]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, OFFSET FLAT:vari_decls
	call	ccdlb_tblput
	mov	rcx, QWORD PTR vari_decls
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR value$2[rsp], rax
; Line 251
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN16@cctree_sol
; Line 252
	mov	rax, QWORD PTR value$2[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN17@cctree_sol
$LN16@cctree_sol:
; Line 254
	lea	rax, OFFSET FLAT:$SG47447
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 254				; 000000feH
	lea	r8, OFFSET FLAT:$SG47448
	mov	edx, 37					; 00000025H
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+24]
	lea	r8, OFFSET FLAT:$SG47445
	lea	rdx, OFFSET FLAT:$SG47446
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
$LN17@cctree_sol:
; Line 256
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN18@cctree_sol
; Line 258
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	cctree_solve_rvalue
$LN18@cctree_sol:
; Line 261
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN19@cctree_sol
; Line 264
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rcx, QWORD PTR [rax+80]
	call	cctree_solve_rvalue
; Line 266
	jmp	SHORT $LN20@cctree_sol
$LN19@cctree_sol:
; Line 267
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN21@cctree_sol
; Line 270
	jmp	SHORT $LN22@cctree_sol
$LN21@cctree_sol:
; Line 272
	lea	rax, OFFSET FLAT:$SG47454
	test	rax, rax
	je	SHORT $LN32@cctree_sol
	int	3
$LN32@cctree_sol:
$LN22@cctree_sol:
$LN20@cctree_sol:
$LN11@cctree_sol:
; Line 275
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
cctree_solve_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
tv73 = 40
block$ = 64
cctree_solve_block PROC
; File W:\cpp\void\cc\cccheck.c
; Line 173
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 175
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tree$[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	add	rax, 8
	mov	QWORD PTR tree$[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@cctree_sol
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	mov	QWORD PTR tv73[rsp], 0
$LN7@cctree_sol:
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv73[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR tree$[rsp], rax
	jae	SHORT $LN3@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_statement
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 176
	add	rsp, 56					; 00000038H
	ret	0
cctree_solve_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lval$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
tree$ = 192
cctree_solve_index PROC
; File W:\cpp\void\cc\cccheck.c
; Line 97
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 98
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	jne	SHORT $LN6@cctree_sol
	int	3
$LN6@cctree_sol:
; Line 99
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN8@cctree_sol
	int	3
$LN8@cctree_sol:
; Line 101
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR lval$[rsp], rax
$LN2@cctree_sol:
; Line 102
	cmp	QWORD PTR lval$[rsp], 0
	je	SHORT $LN3@cctree_sol
	mov	rax, QWORD PTR lval$[rsp]
	cmp	DWORD PTR [rax], 6
	je	SHORT $LN3@cctree_sol
; Line 103
	mov	rax, QWORD PTR lval$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR lval$[rsp], rax
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 105
	cmp	QWORD PTR lval$[rsp], 0
	jne	SHORT $LN10@cctree_sol
	int	3
$LN10@cctree_sol:
; Line 106
	mov	rax, QWORD PTR lval$[rsp]
	cmp	DWORD PTR [rax], 6
	je	SHORT $LN12@cctree_sol
	int	3
$LN12@cctree_sol:
; Line 108
	mov	rax, QWORD PTR lval$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR lval$[rsp]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN4@cctree_sol
; Line 109
	lea	rax, OFFSET FLAT:$SG47334
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 109				; 0000006dH
	lea	r8, OFFSET FLAT:$SG47335
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR lval$[rsp]
	mov	r9, QWORD PTR [rax+24]
	lea	r8, OFFSET FLAT:$SG47332
	lea	rdx, OFFSET FLAT:$SG47333
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
$LN4@cctree_sol:
; Line 111
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	cctree_solve_rvalue
; Line 112
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
cctree_solve_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rval$ = 48
tv94 = 56
$T1 = 64
$T2 = 96
$T3 = 128
tree$ = 192
cctree_solve_call PROC
; File W:\cpp\void\cc\cccheck.c
; Line 84
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 85
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	jne	SHORT $LN7@cctree_sol
	int	3
$LN7@cctree_sol:
; Line 86
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN9@cctree_sol
	int	3
$LN9@cctree_sol:
; Line 88
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN5@cctree_sol
; Line 89
	lea	rax, OFFSET FLAT:$SG47322
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 89					; 00000059H
	lea	r8, OFFSET FLAT:$SG47323
	mov	edx, 31
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+24]
	lea	r8, OFFSET FLAT:$SG47320
	lea	rdx, OFFSET FLAT:$SG47321
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
$LN5@cctree_sol:
; Line 92
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR rval$[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR rval$[rsp]
	add	rax, 152				; 00000098H
	mov	QWORD PTR rval$[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN11@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+80]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 152				; 00000098H
	div	rcx
	mov	QWORD PTR tv94[rsp], rax
	jmp	SHORT $LN12@cctree_sol
$LN11@cctree_sol:
	mov	QWORD PTR tv94[rsp], 0
$LN12@cctree_sol:
	imul	rax, QWORD PTR tv94[rsp], 152		; 00000098H
	mov	rcx, QWORD PTR tree$[rsp]
	add	rax, QWORD PTR [rcx+80]
	cmp	QWORD PTR rval$[rsp], rax
	jae	SHORT $LN3@cctree_sol
	mov	rcx, QWORD PTR rval$[rsp]
	call	cctree_solve_rvalue
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 93
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
cctree_solve_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 48
$T1 = 56
$T2 = 96
$T3 = 128
tree$ = 192
cctree_solve_lvalue PROC
; File W:\cpp\void\cc\cccheck.c
; Line 116
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 117
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	SHORT $LN4@cctree_sol
	cmp	DWORD PTR tv65[rsp], 22
	je	$LN6@cctree_sol
	jmp	$LN7@cctree_sol
$LN4@cctree_sol:
; Line 121
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN5@cctree_sol
; Line 122
	lea	rax, OFFSET FLAT:$SG47346
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 122				; 0000007aH
	lea	r8, OFFSET FLAT:$SG47347
	mov	edx, 33					; 00000021H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+24]
	lea	r8, OFFSET FLAT:$SG47344
	lea	rdx, OFFSET FLAT:$SG47345
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
$LN5@cctree_sol:
; Line 123
	jmp	SHORT $LN2@cctree_sol
$LN6@cctree_sol:
; Line 126
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_index
; Line 127
	jmp	SHORT $LN2@cctree_sol
$LN7@cctree_sol:
; Line 128
	lea	rax, OFFSET FLAT:$SG47350
	test	rax, rax
	je	SHORT $LN9@cctree_sol
	int	3
$LN9@cctree_sol:
$LN2@cctree_sol:
; Line 130
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
cctree_solve_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 48
$T1 = 56
$T2 = 96
$T3 = 128
tree$ = 192
cctree_solve_rvalue PROC
; File W:\cpp\void\cc\cccheck.c
; Line 134
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 135
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	SHORT $LN5@cctree_sol
	cmp	DWORD PTR tv65[rsp], 7
	je	SHORT $LN4@cctree_sol
	cmp	DWORD PTR tv65[rsp], 18
	je	$LN7@cctree_sol
	cmp	DWORD PTR tv65[rsp], 21
	je	$LN8@cctree_sol
	cmp	DWORD PTR tv65[rsp], 22
	je	$LN9@cctree_sol
	jmp	$LN10@cctree_sol
$LN4@cctree_sol:
; Line 137
	jmp	$LN2@cctree_sol
$LN5@cctree_sol:
; Line 140
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN6@cctree_sol
; Line 141
	lea	rax, OFFSET FLAT:$SG47362
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 141				; 0000008dH
	lea	r8, OFFSET FLAT:$SG47363
	mov	edx, 34					; 00000022H
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+24]
	lea	r8, OFFSET FLAT:$SG47360
	lea	rdx, OFFSET FLAT:$SG47361
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
$LN6@cctree_sol:
; Line 143
	jmp	SHORT $LN2@cctree_sol
$LN7@cctree_sol:
; Line 146
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [rax+80]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+72]
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	cctree_solve_binary
; Line 147
	jmp	SHORT $LN2@cctree_sol
$LN8@cctree_sol:
; Line 150
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_call
; Line 151
	jmp	SHORT $LN2@cctree_sol
$LN9@cctree_sol:
; Line 154
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_index
; Line 155
	jmp	SHORT $LN2@cctree_sol
$LN10@cctree_sol:
; Line 156
	lea	rax, OFFSET FLAT:$SG47368
	test	rax, rax
	je	SHORT $LN12@cctree_sol
	int	3
$LN12@cctree_sol:
$LN2@cctree_sol:
; Line 158
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
cctree_solve_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
oper$ = 48
lvalue$ = 56
rvalue$ = 64
cctree_solve_binary PROC
; File W:\cpp\void\cc\cccheck.c
; Line 162
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 163
	cmp	DWORD PTR oper$[rsp], 110		; 0000006eH
	jne	SHORT $LN2@cctree_sol
; Line 164
	mov	rcx, QWORD PTR lvalue$[rsp]
	call	cctree_solve_lvalue
	jmp	SHORT $LN3@cctree_sol
$LN2@cctree_sol:
; Line 166
	mov	rcx, QWORD PTR lvalue$[rsp]
	call	cctree_solve_rvalue
$LN3@cctree_sol:
; Line 168
	mov	rcx, QWORD PTR rvalue$[rsp]
	call	cctree_solve_rvalue
; Line 169
	add	rsp, 40					; 00000028H
	ret	0
cctree_solve_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv178 = 48
solved$ = 56
tv207 = 64
tv180 = 72
symbol$1 = 80
$T2 = 88
$T3 = 128
$T4 = 160
tree$ = 224
name$ = 232
cctree_mingle PROC
; File W:\cpp\void\cc\cccheck.c
; Line 44
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 45
	mov	QWORD PTR solved$[rsp], 0
; Line 47
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 49
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 22
	jne	SHORT $LN2@cctree_min
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+72]
	cmp	DWORD PTR [rax], 6
	je	SHORT $LN2@cctree_min
; Line 52
	lea	rax, OFFSET FLAT:$SG47291
	test	rax, rax
	je	SHORT $LN10@cctree_min
	int	3
$LN10@cctree_min:
$LN2@cctree_min:
; Line 55
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 6
	je	SHORT $LN5@cctree_min
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 22
	jne	SHORT $LN3@cctree_min
$LN5@cctree_min:
; Line 57
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	r9, QWORD PTR name$[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, OFFSET FLAT:vari_decls
	call	ccdlb_tblget
	mov	rcx, QWORD PTR vari_decls
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR solved$[rsp], rax
	jmp	$LN4@cctree_min
$LN3@cctree_min:
; Line 59
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 21
	jne	SHORT $LN6@cctree_min
; Line 60
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	r9, QWORD PTR name$[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, OFFSET FLAT:func_decls
	call	ccdlb_tblget
	mov	rcx, QWORD PTR func_decls
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR solved$[rsp], rax
	jmp	$LN7@cctree_min
$LN6@cctree_min:
; Line 62
	lea	rax, OFFSET FLAT:$SG47299
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 63					; 0000003fH
	lea	r8, OFFSET FLAT:$SG47300
	mov	edx, 30
	lea	rcx, QWORD PTR $T4[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tree$[rsp]
	movsxd	rax, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:cctree_s
	mov	QWORD PTR tv180[rsp], rcx
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rdi, QWORD PTR $T2[rsp]
	mov	QWORD PTR tv207[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv207[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv180[rsp]
	mov	r9, QWORD PTR [rcx+rax*8]
	lea	r8, OFFSET FLAT:$SG47297
	lea	rdx, OFFSET FLAT:$SG47298
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
$LN7@cctree_min:
$LN4@cctree_min:
; Line 65
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN8@cctree_min
; Line 67
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	lea	rcx, OFFSET FLAT:symbols
	call	ccdlb_tblput
	mov	rcx, QWORD PTR symbols
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR symbol$1[rsp], rax
; Line 68
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN12@cctree_min
	int	3
$LN12@cctree_min:
; Line 69
	mov	rax, QWORD PTR symbol$1[rsp]
	mov	rcx, QWORD PTR solved$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
$LN8@cctree_min:
; Line 72
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN14@cctree_min
	mov	DWORD PTR tv178[rsp], 1
	jmp	SHORT $LN15@cctree_min
$LN14@cctree_min:
	mov	DWORD PTR tv178[rsp], 0
$LN15@cctree_min:
	mov	eax, DWORD PTR tv178[rsp]
; Line 73
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
cctree_mingle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
symbol$ = 48
tv136 = 56
tv151 = 64
tv137 = 72
$T1 = 80
$T2 = 112
$T3 = 144
tree$ = 208
cctree_resolve_symbol PROC
; File W:\cpp\void\cc\cccheck.c
; Line 30
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
; Line 31
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN4@cctree_res
	int	3
$LN4@cctree_res:
; Line 33
	mov	QWORD PTR symbol$[rsp], 0
; Line 34
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	lea	rcx, OFFSET FLAT:symbols
	call	ccdlb_tblget
	mov	rcx, QWORD PTR symbols
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR symbol$[rsp], rax
; Line 36
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	$LN2@cctree_res
; Line 37
	lea	rax, OFFSET FLAT:$SG47274
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 37					; 00000025H
	lea	r8, OFFSET FLAT:$SG47275
	mov	edx, 29
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR tree$[rsp]
	movsxd	rax, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:cctree_s
	mov	QWORD PTR tv137[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv151[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv151[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv137[rsp]
	mov	r9, QWORD PTR [rcx+rax*8]
	lea	r8, OFFSET FLAT:$SG47272
	lea	rdx, OFFSET FLAT:$SG47273
	lea	rcx, QWORD PTR $T2[rsp]
	call	cctrace_
$LN2@cctree_res:
; Line 39
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN6@cctree_res
	mov	rax, QWORD PTR symbol$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv136[rsp], rax
	jmp	SHORT $LN7@cctree_res
$LN6@cctree_res:
	mov	QWORD PTR tv136[rsp], 0
$LN7@cctree_res:
	mov	rax, QWORD PTR tv136[rsp]
; Line 40
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
cctree_resolve_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv92 = 32
value$ = 40
tree$ = 64
name$ = 72
cctree_include_invokable PROC
; File W:\cpp\void\cc\cccheck.c
; Line 18
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 19
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN4@cctree_inc
	int	3
$LN4@cctree_inc:
; Line 20
	cmp	QWORD PTR name$[rsp], 0
	jne	SHORT $LN6@cctree_inc
	int	3
$LN6@cctree_inc:
; Line 22
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	strlen
	mov	rcx, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rcx+24]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, OFFSET FLAT:func_decls
	call	ccdlb_tblput
	mov	rcx, QWORD PTR func_decls
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR value$[rsp], rax
; Line 23
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN2@cctree_inc
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rax], rcx
$LN2@cctree_inc:
; Line 25
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN8@cctree_inc
	mov	DWORD PTR tv92[rsp], 1
	jmp	SHORT $LN9@cctree_inc
$LN8@cctree_inc:
	mov	DWORD PTR tv92[rsp], 0
$LN9@cctree_inc:
	mov	eax, DWORD PTR tv92[rsp]
; Line 26
	add	rsp, 56					; 00000038H
	ret	0
cctree_include_invokable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$1 = 32
tv75 = 40
tree$ = 64
cctree_solve_statement PROC
; File W:\cpp\void\cc\cccheck.c
; Line 180
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 181
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 10
	jne	SHORT $LN5@cctree_sol
; Line 184
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$1[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR list$1[rsp]
	add	rax, 8
	mov	QWORD PTR list$1[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN22@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN23@cctree_sol
$LN22@cctree_sol:
	mov	QWORD PTR tv75[rsp], 0
$LN23@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv75[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR list$1[rsp], rax
	jae	SHORT $LN3@cctree_sol
; Line 185
	mov	rax, QWORD PTR list$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_statement
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 186
	jmp	$LN6@cctree_sol
$LN5@cctree_sol:
; Line 187
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN7@cctree_sol
; Line 189
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_decl
; Line 190
	jmp	$LN8@cctree_sol
$LN7@cctree_sol:
; Line 191
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 21
	jne	SHORT $LN9@cctree_sol
; Line 193
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_call
; Line 195
	jmp	$LN10@cctree_sol
$LN9@cctree_sol:
; Line 196
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 12
	jne	SHORT $LN11@cctree_sol
; Line 198
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN24@cctree_sol
	int	3
$LN24@cctree_sol:
; Line 199
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	cctree_solve_rvalue
; Line 200
	jmp	$LN12@cctree_sol
$LN11@cctree_sol:
; Line 201
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 18
	jne	SHORT $LN13@cctree_sol
; Line 203
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [rax+80]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+72]
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	cctree_solve_binary
; Line 204
	jmp	$LN14@cctree_sol
$LN13@cctree_sol:
; Line 205
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 14
	jne	SHORT $LN15@cctree_sol
; Line 207
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	cctree_solve_rvalue
; Line 208
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	cctree_solve_statement
; Line 209
	jmp	SHORT $LN16@cctree_sol
$LN15@cctree_sol:
; Line 210
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 17
	jne	SHORT $LN17@cctree_sol
; Line 212
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	cctree_solve_rvalue
; Line 213
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN19@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	cctree_solve_block
$LN19@cctree_sol:
; Line 214
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN20@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	cctree_solve_block
$LN20@cctree_sol:
; Line 215
	jmp	SHORT $LN18@cctree_sol
$LN17@cctree_sol:
; Line 217
	lea	rax, OFFSET FLAT:$SG47408
	test	rax, rax
	je	SHORT $LN26@cctree_sol
	int	3
$LN26@cctree_sol:
$LN18@cctree_sol:
$LN16@cctree_sol:
$LN14@cctree_sol:
$LN12@cctree_sol:
$LN10@cctree_sol:
$LN8@cctree_sol:
$LN6@cctree_sol:
; Line 219
	add	rsp, 56					; 00000038H
	ret	0
cctree_solve_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
tv73 = 40
decl$ = 64
cctree_solve_decl PROC
; File W:\cpp\void\cc\cccheck.c
; Line 279
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 280
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 8
	mov	QWORD PTR list$[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@cctree_sol
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	mov	QWORD PTR tv73[rsp], 0
$LN7@cctree_sol:
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR tv73[rsp]
	lea	rax, QWORD PTR [rax+rcx*8]
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN3@cctree_sol
	mov	rax, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_decl_name
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 281
	add	rsp, 56					; 00000038H
	ret	0
cctree_solve_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
cond_tree$ = 80
then_tree$ = 88
else_tree$ = 96
cctree_ternary PROC
; File W:\cpp\void\cc\cctree.h
; Line 313
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 17
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 314
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR cond_tree$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 315
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR then_tree$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 316
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR else_tree$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 317
	mov	rax, QWORD PTR result$[rsp]
; Line 318
	add	rsp, 56					; 00000038H
	ret	0
cctree_ternary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
token$ = 80
lhs$ = 88
rhs$ = 96
cctree_binary PROC
; File W:\cpp\void\cc\cctree.h
; Line 304
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 18
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 305
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+40], ecx
; Line 306
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR lhs$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 307
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 308
	mov	rax, QWORD PTR result$[rsp]
; Line 309
	add	rsp, 56					; 00000038H
	ret	0
cctree_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
token$ = 80
rval$ = 88
cctree_unary PROC
; File W:\cpp\void\cc\cctree.h
; Line 296
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 19
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 297
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+40], ecx
; Line 298
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 299
	mov	rax, QWORD PTR result$[rsp]
; Line 300
	add	rsp, 56					; 00000038H
	ret	0
cctree_unary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
token$ = 80
cctree_litflo PROC
; File W:\cpp\void\cc\cctree.h
; Line 289
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 8
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 290
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+96], rcx
; Line 291
	mov	rax, QWORD PTR result$[rsp]
; Line 292
	add	rsp, 56					; 00000038H
	ret	0
cctree_litflo ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
token$ = 80
cctree_litint PROC
; File W:\cpp\void\cc\cctree.h
; Line 282
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 7
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 283
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+96], rcx
; Line 284
	mov	rax, QWORD PTR result$[rsp]
; Line 285
	add	rsp, 56					; 00000038H
	ret	0
cctree_litint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
name$ = 80
cctree_litide PROC
; File W:\cpp\void\cc\cctree.h
; Line 275
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 6
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 276
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 277
	mov	rax, QWORD PTR tree$[rsp]
; Line 278
	add	rsp, 56					; 00000038H
	ret	0
cctree_litide ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
type$ = 80
list$ = 88
cctree_decl PROC
; File W:\cpp\void\cc\cctree.h
; Line 267
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 16
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 268
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 269
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 270
	mov	rax, QWORD PTR tree$[rsp]
; Line 271
	add	rsp, 56					; 00000038H
	ret	0
cctree_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
type$ = 80
name$ = 88
size$ = 96
init$ = 104
cctree_decl_name PROC
; File W:\cpp\void\cc\cctree.h
; Line 257
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 15
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 258
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 259
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_name
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 260
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 261
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR init$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 262
	mov	rax, QWORD PTR tree$[rsp]
; Line 263
	add	rsp, 56					; 00000038H
	ret	0
cctree_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
rval$ = 80
cctree_return PROC
; File W:\cpp\void\cc\cctree.h
; Line 250
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 12
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 251
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 252
	mov	rax, QWORD PTR tree$[rsp]
; Line 253
	add	rsp, 56					; 00000038H
	ret	0
cctree_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
name$ = 80
cctree_goto PROC
; File W:\cpp\void\cc\cctree.h
; Line 243
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 13
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 244
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_name
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 245
	mov	rax, QWORD PTR tree$[rsp]
; Line 246
	add	rsp, 56					; 00000038H
	ret	0
cctree_goto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
name$ = 80
list$ = 88
cctree_label PROC
; File W:\cpp\void\cc\cctree.h
; Line 235
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 11
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 236
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_name
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 237
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 238
	mov	rax, QWORD PTR tree$[rsp]
; Line 239
	add	rsp, 56					; 00000038H
	ret	0
cctree_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
cond_tree$ = 80
then_tree$ = 88
cctree_while PROC
; File W:\cpp\void\cc\cctree.h
; Line 226
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR cond_tree$[rsp], 0
	jne	SHORT $LN3@cctree_whi
	int	3
$LN3@cctree_whi:
; Line 227
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 14
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 228
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR cond_tree$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 229
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR then_tree$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 230
	mov	rax, QWORD PTR tree$[rsp]
; Line 231
	add	rsp, 56					; 00000038H
	ret	0
cctree_while ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
list$ = 80
cctree_block PROC
; File W:\cpp\void\cc\cctree.h
; Line 219
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 10
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 220
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 221
	mov	rax, QWORD PTR tree$[rsp]
; Line 222
	add	rsp, 56					; 00000038H
	ret	0
cctree_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
lval$ = 80
rval$ = 88
name$ = 96
cctree_index PROC
; File W:\cpp\void\cc\cctree.h
; Line 210
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 22
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 211
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 212
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 213
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 214
	mov	rax, QWORD PTR tree$[rsp]
; Line 215
	add	rsp, 56					; 00000038H
	ret	0
cctree_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
lval$ = 80
rval$ = 88
name$ = 96
cctree_call PROC
; File W:\cpp\void\cc\cctree.h
; Line 201
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 21
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 202
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 203
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 204
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 205
	mov	rax, QWORD PTR tree$[rsp]
; Line 206
	add	rsp, 56					; 00000038H
	ret	0
cctree_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
init$ = 80
cctree_group PROC
; File W:\cpp\void\cc\cctree.h
; Line 194
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 20
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 195
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR init$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 196
	mov	rax, QWORD PTR tree$[rsp]
; Line 197
	add	rsp, 56					; 00000038H
	ret	0
cctree_group ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
cctree_translation_unit PROC
; File W:\cpp\void\cc\cctree.h
; Line 188
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 23
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 189
	mov	rax, QWORD PTR tree$[rsp]
; Line 190
	add	rsp, 56					; 00000038H
	ret	0
cctree_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
list$ = 64
name$ = 72
cctreee_struct_specifier PROC
; File W:\cpp\void\cc\cctree.h
; Line 179
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR list$[rsp], 0
	jne	SHORT $LN3@cctreee_st
	int	3
$LN3@cctreee_st:
; Line 180
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 1
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 181
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 182
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_name
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 183
	mov	rax, QWORD PTR tree$[rsp]
; Line 184
	add	rsp, 56					; 00000038H
	ret	0
cctreee_struct_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
type$ = 64
list$ = 72
cctreee_function_modifier PROC
; File W:\cpp\void\cc\cctree.h
; Line 171
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 3
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 172
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 173
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 174
	mov	rax, QWORD PTR tree$[rsp]
; Line 175
	add	rsp, 56					; 00000038H
	ret	0
cctreee_function_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
type$ = 64
rval$ = 72
cctreee_array_modifier PROC
; File W:\cpp\void\cc\cctree.h
; Line 163
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 4
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 164
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 165
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 166
	mov	rax, QWORD PTR tree$[rsp]
; Line 167
	add	rsp, 56					; 00000038H
	ret	0
cctreee_array_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
type$ = 64
cctreee_pointer_modifier PROC
; File W:\cpp\void\cc\cctree.h
; Line 156
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 5
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 157
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 158
	mov	rax, QWORD PTR tree$[rsp]
; Line 159
	add	rsp, 56					; 00000038H
	ret	0
cctreee_pointer_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
name$ = 32
cctree_name PROC
; File W:\cpp\void\cc\cctree.h
; Line 150
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 151
	cmp	QWORD PTR name$[rsp], 0
	je	SHORT $LN3@cctree_nam
	mov	rax, QWORD PTR name$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@cctree_nam
$LN3@cctree_nam:
	mov	QWORD PTR tv66[rsp], 0
$LN4@cctree_nam:
	mov	rax, QWORD PTR tv66[rsp]
; Line 152
	add	rsp, 24
	ret	0
cctree_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
tree$ = 80
cctree_clone PROC
; File W:\cpp\void\cc\cctree.h
; Line 143
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 144
	mov	rdi, QWORD PTR result$[rsp]
	mov	rsi, QWORD PTR tree$[rsp]
	mov	ecx, 152				; 00000098H
	rep movsb
; Line 145
	mov	rax, QWORD PTR result$[rsp]
; Line 146
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctree_clone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 48
$T1 = 56
$T2 = 96
$T3 = 128
kind$ = 192
root$ = 200
mark$ = 208
cctree_new PROC
; File W:\cpp\void\cc\cctree.h
; Line 133
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	lea	rax, OFFSET FLAT:$SG47097
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 133				; 00000085H
	lea	r8, OFFSET FLAT:$SG47098
	mov	edx, 28
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 152				; 00000098H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR tree$[rsp], rax
; Line 134
	mov	r8d, 152				; 00000098H
	xor	edx, edx
	mov	rcx, QWORD PTR tree$[rsp]
	call	memset
; Line 135
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR kind$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 136
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 137
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR mark$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 138
	mov	rax, QWORD PTR tree$[rsp]
; Line 139
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
cctree_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 48
$T2 = 80
$T3 = 112
tree$ = 176
cctree_del PROC
; File W:\cpp\void\cc\cctree.h
; Line 128
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	lea	rax, OFFSET FLAT:$SG47086
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 128				; 00000080H
	lea	r8, OFFSET FLAT:$SG47087
	mov	edx, 27
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR tree$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
; Line 129
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
cctree_del ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
string$ = 48
ccout	PROC
; File W:\cpp\void\cc\cclog.h
; Line 259
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 261
	mov	rcx, QWORD PTR string$[rsp]
	call	QWORD PTR __imp_OutputDebugStringA
; Line 263
	mov	rcx, QWORD PTR string$[rsp]
	call	printf
; Line 264
	add	rsp, 40					; 00000028H
	ret	0
ccout	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ccdebugend PROC
; File W:\cpp\void\cc\cclog.h
; Line 249
	sub	rsp, 40					; 00000028H
; Line 251
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:ccdebugroot
	mov	edx, edx
	mov	r8d, DWORD PTR _tls_index
	mov	r9, QWORD PTR gs:88
	add	rdx, QWORD PTR [r9+r8*8]
	cmp	QWORD PTR [rax+rcx], rdx
	je	SHORT $LN3@ccdebugend
	int	3
$LN3@ccdebugend:
; Line 252
	call	ccdebugdump
; Line 254
	add	rsp, 40					; 00000028H
	ret	0
ccdebugend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ccini	PROC
; File W:\cpp\void\cc\cclog.h
; Line 170
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 171
	ret	0
ccini	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sentry$ = 8
block$ = 16
ccsentry_addblock PROC
; File W:\cpp\void\cc\cclog.h
; Line 158
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 159
	mov	rax, QWORD PTR sentry$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN2@ccsentry_a
; Line 160
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	QWORD PTR [rax+32], rcx
; Line 161
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+40], rcx
$LN2@ccsentry_a:
; Line 163
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 164
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 165
	mov	rax, QWORD PTR block$[rsp]
; Line 166
	ret	0
ccsentry_addblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sentry$ = 8
block$ = 16
ccsentry_remblock PROC
; File W:\cpp\void\cc\cclog.h
; Line 144
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+rcx]
	cmp	QWORD PTR [rdx+8], rax
	je	SHORT $LN6@ccsentry_r
	int	3
$LN6@ccsentry_r:
; Line 146
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN2@ccsentry_r
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+40], rcx
$LN2@ccsentry_r:
; Line 147
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN3@ccsentry_r
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+32], rcx
	jmp	SHORT $LN4@ccsentry_r
$LN3@ccsentry_r:
; Line 148
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+64], rcx
$LN4@ccsentry_r:
; Line 150
	mov	rax, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+32], 0
; Line 151
	mov	rax, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+40], 0
; Line 153
	mov	rax, QWORD PTR block$[rsp]
; Line 154
	ret	0
ccsentry_remblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
freed_count$ = 48
s$ = 56
i$1 = 64
t$ = 72
tv160 = 80
f$ = 88
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 224
$T7 = 256
$T8 = 288
$T9 = 320
$T10 = 352
$T11 = 384
$T12 = 416
ccdebugdump PROC
; File W:\cpp\void\cc\cclog.h
; Line 111
	push	rsi
	push	rdi
	sub	rsp, 456				; 000001c8H
; Line 112
	lea	rax, OFFSET FLAT:$SG46546
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 112				; 00000070H
	lea	r8, OFFSET FLAT:$SG46547
	mov	edx, 15
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46544
	lea	rdx, OFFSET FLAT:$SG46545
	lea	rcx, QWORD PTR $T3[rsp]
	call	cctrace_
; Line 115
	mov	QWORD PTR t$[rsp], 0
; Line 117
	lea	rax, OFFSET FLAT:$SG46548
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 117				; 00000075H
	lea	r8, OFFSET FLAT:$SG46549
	mov	edx, 16
	lea	rcx, QWORD PTR $T10[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR [rcx+rax+32]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 118
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, OFFSET FLAT:$SG46550
	mov	QWORD PTR [rcx+rax], rdx
; Line 120
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+16]
	mov	QWORD PTR s$[rsp], rax
	jmp	SHORT $LN4@ccdebugdum
$LN2@ccdebugdum:
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 176				; 000000b0H
	mov	QWORD PTR s$[rsp], rax
$LN4@ccdebugdum:
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	QWORD PTR [rcx+rax+16], 0
	je	SHORT $LN9@ccdebugdum
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+16]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 176				; 000000b0H
	div	rcx
	mov	QWORD PTR tv160[rsp], rax
	jmp	SHORT $LN10@ccdebugdum
$LN9@ccdebugdum:
	mov	QWORD PTR tv160[rsp], 0
$LN10@ccdebugdum:
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	imul	rdx, QWORD PTR tv160[rsp], 176		; 000000b0H
	add	rdx, QWORD PTR [rcx+rax+16]
	mov	rax, rdx
	cmp	QWORD PTR s$[rsp], rax
	jae	SHORT $LN3@ccdebugdum
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rcx, QWORD PTR t$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR t$[rsp], rax
	jmp	$LN2@ccdebugdum
$LN3@ccdebugdum:
; Line 121
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rcx+rax+88], rdx
; Line 123
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	ecx, OFFSET FLAT:ccdebugroot
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	add	rcx, QWORD PTR [rdi+rdx*8]
	mov	r8, rax
	mov	rdx, rcx
	xor	ecx, ecx
	call	ccsentry_report
; Line 125
	mov	eax, OFFSET FLAT:ccdebugnone
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 127
	mov	DWORD PTR freed_count$[rsp], 0
; Line 130
	mov	eax, OFFSET FLAT:ccdebugroot
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rcx+rax+64]
	mov	QWORD PTR i$1[rsp], rax
	jmp	SHORT $LN7@ccdebugdum
$LN5@ccdebugdum:
	mov	eax, DWORD PTR freed_count$[rsp]
	inc	eax
	mov	DWORD PTR freed_count$[rsp], eax
$LN7@ccdebugdum:
	cmp	QWORD PTR i$1[rsp], 0
	je	$LN6@ccdebugdum
; Line 132
	mov	rax, QWORD PTR i$1[rsp]
	mov	QWORD PTR f$[rsp], rax
; Line 133
	mov	rax, QWORD PTR i$1[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR i$1[rsp], rax
; Line 135
	lea	rax, OFFSET FLAT:$SG46551
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 135				; 00000087H
	lea	r8, OFFSET FLAT:$SG46552
	mov	edx, 17
	lea	rcx, QWORD PTR $T11[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 96					; 00000060H
	lea	rcx, QWORD PTR $T6[rsp]
	lea	rdx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccuserallocator_
; Line 136
	jmp	$LN5@ccdebugdum
$LN6@ccdebugdum:
; Line 138
	lea	rax, OFFSET FLAT:$SG46555
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 138				; 0000008aH
	lea	r8, OFFSET FLAT:$SG46556
	mov	edx, 18
	lea	rcx, QWORD PTR $T12[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r9d, DWORD PTR freed_count$[rsp]
	lea	r8, OFFSET FLAT:$SG46553
	lea	rdx, OFFSET FLAT:$SG46554
	lea	rcx, QWORD PTR $T8[rsp]
	call	cctrace_
; Line 139
	add	rsp, 456				; 000001c8H
	pop	rdi
	pop	rsi
	ret	0
ccdebugdump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 144
i$1 = 152
tv135 = 156
tv164 = 160
n$ = 168
tv92 = 176
tv73 = 184
leak_string$ = 192
tv178 = 200
tv194 = 208
suffix$ = 216
memory$ = 224
percent_used$ = 232
seconds_used$ = 240
r$ = 272
h$ = 280
t$ = 288
ccsentry_report PROC
; File W:\cpp\void\cc\cclog.h
; Line 66
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 264				; 00000108H
; Line 70
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rax+88]
	call	ccclocksecs
	movsd	QWORD PTR seconds_used$[rsp], xmm0
; Line 71
	cmp	QWORD PTR r$[rsp], 0
	je	SHORT $LN15@ccsentry_r
	mov	rax, QWORD PTR r$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN16@ccsentry_r
$LN15@ccsentry_r:
	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv73[rsp], rax
$LN16@ccsentry_r:
	mov	rax, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR [rax+88]
	mov	rcx, QWORD PTR tv73[rsp]
	call	ccclockperc
	movsd	QWORD PTR percent_used$[rsp], xmm0
; Line 73
	lea	rax, OFFSET FLAT:$SG46518
	mov	QWORD PTR leak_string$[rsp], rax
; Line 74
	cmp	QWORD PTR r$[rsp], 0
	jne	SHORT $LN11@ccsentry_r
	lea	rax, OFFSET FLAT:$SG46520
	mov	QWORD PTR leak_string$[rsp], rax
$LN11@ccsentry_r:
; Line 76
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@ccsentry_r
$LN2@ccsentry_r:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@ccsentry_r:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@ccsentry_r
	lea	rcx, OFFSET FLAT:$SG46521
	call	printf
	jmp	SHORT $LN2@ccsentry_r
$LN3@ccsentry_r:
; Line 81
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+160]
	mov	rax, QWORD PTR [rax+152]
	sub	rax, rcx
	lea	rdx, QWORD PTR memory$[rsp]
	mov	rcx, rax
	call	ccbytecountreadable
	mov	QWORD PTR suffix$[rsp], rax
; Line 82
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+160]
	mov	rax, QWORD PTR [rax+152]
	sub	rax, rcx
	test	rax, rax
	jle	SHORT $LN17@ccsentry_r
	mov	DWORD PTR tv135[rsp], 14
	jmp	SHORT $LN18@ccsentry_r
$LN17@ccsentry_r:
	mov	DWORD PTR tv135[rsp], 7
$LN18@ccsentry_r:
	mov	rax, QWORD PTR t$[rsp]
	cmp	QWORD PTR h$[rsp], rax
	jne	SHORT $LN19@ccsentry_r
	mov	DWORD PTR tv164[rsp], 4
	jmp	SHORT $LN20@ccsentry_r
$LN19@ccsentry_r:
	mov	DWORD PTR tv164[rsp], 7
$LN20@ccsentry_r:
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+172]
	mov	eax, DWORD PTR [rax+168]
	sub	eax, ecx
	mov	DWORD PTR tv92[rsp], eax
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	call	ccfilename
	mov	ecx, DWORD PTR tv92[rsp]
	mov	DWORD PTR [rsp+128], ecx
	mov	rcx, QWORD PTR suffix$[rsp]
	mov	QWORD PTR [rsp+120], rcx
	movsd	xmm0, QWORD PTR memory$[rsp]
	movsd	QWORD PTR [rsp+112], xmm0
	mov	rcx, QWORD PTR leak_string$[rsp]
	mov	QWORD PTR [rsp+104], rcx
	mov	ecx, DWORD PTR tv135[rsp]
	mov	DWORD PTR [rsp+96], ecx
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+144]
	mov	QWORD PTR [rsp+88], rcx
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+136]
	mov	QWORD PTR [rsp+80], rcx
	movsd	xmm0, QWORD PTR percent_used$[rsp]
	movsd	QWORD PTR [rsp+72], xmm0
	movsd	xmm0, QWORD PTR seconds_used$[rsp]
	movsd	QWORD PTR [rsp+64], xmm0
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+72]
	mov	DWORD PTR [rsp+48], ecx
	mov	rcx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9, rax
	mov	rax, QWORD PTR t$[rsp]
	mov	r8d, DWORD PTR [rax+32]
	mov	edx, DWORD PTR tv164[rsp]
	lea	rcx, OFFSET FLAT:$SG46522
	call	ccprintf
; Line 96
	mov	QWORD PTR n$[rsp], 0
; Line 98
	mov	rax, QWORD PTR t$[rsp]
	cmp	QWORD PTR h$[rsp], rax
	jne	$LN12@ccsentry_r
; Line 99
	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR n$[rsp], rax
; Line 101
	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR i$[rsp], rax
	jmp	SHORT $LN7@ccsentry_r
$LN5@ccsentry_r:
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 176				; 000000b0H
	mov	QWORD PTR i$[rsp], rax
$LN7@ccsentry_r:
	mov	rax, QWORD PTR t$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN21@ccsentry_r
	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+16]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 176				; 000000b0H
	div	rcx
	mov	QWORD PTR tv178[rsp], rax
	jmp	SHORT $LN22@ccsentry_r
$LN21@ccsentry_r:
	mov	QWORD PTR tv178[rsp], 0
$LN22@ccsentry_r:
	imul	rax, QWORD PTR tv178[rsp], 176		; 000000b0H
	mov	rcx, QWORD PTR t$[rsp]
	add	rax, QWORD PTR [rcx+16]
	cmp	QWORD PTR i$[rsp], rax
	jae	SHORT $LN6@ccsentry_r
; Line 102
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	cmp	QWORD PTR [rax+88], rcx
	jbe	SHORT $LN13@ccsentry_r
	mov	rax, QWORD PTR i$[rsp]
	mov	QWORD PTR n$[rsp], rax
$LN13@ccsentry_r:
	jmp	$LN5@ccsentry_r
$LN6@ccsentry_r:
$LN12@ccsentry_r:
; Line 105
	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR i$[rsp], rax
	jmp	SHORT $LN10@ccsentry_r
$LN8@ccsentry_r:
	mov	rax, QWORD PTR i$[rsp]
	add	rax, 176				; 000000b0H
	mov	QWORD PTR i$[rsp], rax
$LN10@ccsentry_r:
	mov	rax, QWORD PTR t$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN23@ccsentry_r
	mov	rax, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR [rax+16]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 176				; 000000b0H
	div	rcx
	mov	QWORD PTR tv194[rsp], rax
	jmp	SHORT $LN24@ccsentry_r
$LN23@ccsentry_r:
	mov	QWORD PTR tv194[rsp], 0
$LN24@ccsentry_r:
	imul	rax, QWORD PTR tv194[rsp], 176		; 000000b0H
	mov	rcx, QWORD PTR t$[rsp]
	add	rax, QWORD PTR [rcx+16]
	cmp	QWORD PTR i$[rsp], rax
	jae	SHORT $LN9@ccsentry_r
; Line 106
	mov	r8, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR n$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	call	ccsentry_report
	jmp	$LN8@ccsentry_r
$LN9@ccsentry_r:
; Line 107
	add	rsp, 264				; 00000108H
	ret	0
ccsentry_report ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
r$ = 40
vli$ = 48
v$ = 56
tv210 = 60
p$ = 64
tv150 = 72
tv174 = 76
tv186 = 80
tv198 = 88
tv231 = 96
tv251 = 104
h$ = 112
s$ = 120
__$ArrayPad$ = 152
f$ = 176
ccprintf PROC
; File W:\cpp\void\cc\cccolor.c
; Line 10
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 11
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR h$[rsp], rax
; Line 19
	mov	rax, QWORD PTR f$[rsp]
	mov	QWORD PTR r$[rsp], rax
; Line 22
	lea	rax, QWORD PTR f$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 25
	lea	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 26
	xor	eax, eax
	mov	WORD PTR v$[rsp], ax
; Line 40
	mov	eax, 7
	mov	WORD PTR v$[rsp], ax
$LN2@ccprintf:
; Line 42
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	movsx	eax, BYTE PTR c$[rsp]
	test	eax, eax
	je	$LN3@ccprintf
; Line 43
	movzx	edx, WORD PTR v$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	call	QWORD PTR __imp_SetConsoleTextAttribute
; Line 44
	jmp	SHORT $LN7@ccprintf
$LN5@ccprintf:
; Line 46
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
$LN7@ccprintf:
; Line 45
	movsx	eax, BYTE PTR c$[rsp]
	test	eax, eax
	je	SHORT $LN6@ccprintf
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 37					; 00000025H
	je	SHORT $LN6@ccprintf
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN8@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 33					; 00000021H
	je	SHORT $LN6@ccprintf
$LN8@ccprintf:
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 33					; 00000021H
	jne	SHORT $LN9@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 62					; 0000003eH
	je	SHORT $LN6@ccprintf
$LN9@ccprintf:
; Line 46
	movsx	eax, BYTE PTR c$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46459
	call	printf
	jmp	$LN5@ccprintf
$LN6@ccprintf:
; Line 48
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 60					; 0000003cH
	jne	$LN10@ccprintf
; Line 49
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 2
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
; Line 50
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN12@ccprintf
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN12@ccprintf
; Line 51
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, WORD PTR v$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 2
	mov	QWORD PTR p$[rsp], rax
	movsx	eax, BYTE PTR c$[rsp]
	sub	eax, 48					; 00000030H
	mov	WORD PTR v$[rsp], ax
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN13@ccprintf
$LN12@ccprintf:
; Line 53
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 37					; 00000025H
	jne	$LN14@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 105				; 00000069H
	jne	$LN14@ccprintf
; Line 54
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, WORD PTR v$[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 2
	mov	QWORD PTR p$[rsp], rax
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN36@ccprintf
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv150[rsp], eax
	jmp	SHORT $LN37@ccprintf
$LN36@ccprintf:
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv150[rsp], eax
$LN37@ccprintf:
	movzx	eax, WORD PTR tv150[rsp]
	mov	WORD PTR v$[rsp], ax
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 2
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	SHORT $LN15@ccprintf
$LN14@ccprintf:
; Line 56
	lea	rax, OFFSET FLAT:$SG46466
	test	rax, rax
	je	SHORT $LN38@ccprintf
	int	3
$LN38@ccprintf:
$LN15@ccprintf:
$LN13@ccprintf:
; Line 57
	jmp	$LN11@ccprintf
$LN10@ccprintf:
; Line 58
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 33					; 00000021H
	jne	SHORT $LN16@ccprintf
; Line 59
	mov	rax, QWORD PTR p$[rsp]
	sub	rax, 2
	mov	QWORD PTR p$[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR v$[rsp], ax
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 2
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
; Line 60
	jmp	$LN17@ccprintf
$LN16@ccprintf:
; Line 61
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 37					; 00000025H
	jne	$LN18@ccprintf
; Line 62
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
; Line 63
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN20@ccprintf
; Line 64
	lea	rcx, OFFSET FLAT:$SG46473
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN21@ccprintf
$LN20@ccprintf:
; Line 66
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 105				; 00000069H
	jne	SHORT $LN22@ccprintf
; Line 67
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN40@ccprintf
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv174[rsp], eax
	jmp	SHORT $LN41@ccprintf
$LN40@ccprintf:
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv174[rsp], eax
$LN41@ccprintf:
	mov	edx, DWORD PTR tv174[rsp]
	lea	rcx, OFFSET FLAT:$SG46476
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN23@ccprintf
$LN22@ccprintf:
; Line 69
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 102				; 00000066H
	jne	SHORT $LN24@ccprintf
; Line 70
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN42@ccprintf
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv186[rsp], xmm0
	jmp	SHORT $LN43@ccprintf
$LN42@ccprintf:
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv186[rsp], xmm0
$LN43@ccprintf:
	movsd	xmm1, QWORD PTR tv186[rsp]
	movq	rdx, xmm1
	lea	rcx, OFFSET FLAT:$SG46479
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN25@ccprintf
$LN24@ccprintf:
; Line 72
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 115				; 00000073H
	jne	SHORT $LN26@ccprintf
; Line 73
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN44@ccprintf
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv198[rsp], rax
	jmp	SHORT $LN45@ccprintf
$LN44@ccprintf:
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv198[rsp], rax
$LN45@ccprintf:
	mov	rdx, QWORD PTR tv198[rsp]
	lea	rcx, OFFSET FLAT:$SG46482
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN27@ccprintf
$LN26@ccprintf:
; Line 75
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 99					; 00000063H
	jne	SHORT $LN28@ccprintf
; Line 76
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN46@ccprintf
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv210[rsp], al
	jmp	SHORT $LN47@ccprintf
$LN46@ccprintf:
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	movzx	eax, BYTE PTR [rax-8]
	mov	BYTE PTR tv210[rsp], al
$LN47@ccprintf:
	movsx	eax, BYTE PTR tv210[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46485
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	inc	rax
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN29@ccprintf
$LN28@ccprintf:
; Line 78
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 108				; 0000006cH
	jne	$LN30@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	$LN30@ccprintf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 105				; 00000069H
	jne	SHORT $LN30@ccprintf
; Line 79
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN48@ccprintf
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv231[rsp], rax
	jmp	SHORT $LN49@ccprintf
$LN48@ccprintf:
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv231[rsp], rax
$LN49@ccprintf:
	mov	rdx, QWORD PTR tv231[rsp]
	lea	rcx, OFFSET FLAT:$SG46488
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 3
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	$LN31@ccprintf
$LN30@ccprintf:
; Line 81
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 108				; 0000006cH
	jne	$LN32@ccprintf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	$LN32@ccprintf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR r$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	jne	SHORT $LN32@ccprintf
; Line 82
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN50@ccprintf
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv251[rsp], rax
	jmp	SHORT $LN51@ccprintf
$LN50@ccprintf:
	mov	rax, QWORD PTR vli$[rsp]
	add	rax, 8
	mov	QWORD PTR vli$[rsp], rax
	mov	rax, QWORD PTR vli$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv251[rsp], rax
$LN51@ccprintf:
	mov	rdx, QWORD PTR tv251[rsp]
	lea	rcx, OFFSET FLAT:$SG46491
	call	printf
	mov	rax, QWORD PTR r$[rsp]
	add	rax, 3
	mov	QWORD PTR r$[rsp], rax
	mov	rax, QWORD PTR r$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR c$[rsp], al
	jmp	SHORT $LN33@ccprintf
$LN32@ccprintf:
; Line 84
	lea	rax, OFFSET FLAT:$SG46492
	test	rax, rax
	je	SHORT $LN52@ccprintf
	int	3
$LN52@ccprintf:
$LN33@ccprintf:
$LN31@ccprintf:
$LN29@ccprintf:
$LN27@ccprintf:
$LN25@ccprintf:
$LN23@ccprintf:
$LN21@ccprintf:
; Line 86
	jmp	SHORT $LN19@ccprintf
$LN18@ccprintf:
; Line 87
	movsx	eax, BYTE PTR c$[rsp]
	test	eax, eax
	jne	SHORT $LN34@ccprintf
; Line 88
	jmp	SHORT $LN3@ccprintf
$LN34@ccprintf:
$LN19@ccprintf:
$LN17@ccprintf:
$LN11@ccprintf:
; Line 89
	jmp	$LN2@ccprintf
$LN3@ccprintf:
; Line 90
	mov	QWORD PTR vli$[rsp], 0
; Line 101
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	ret	0
ccprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 8
f$ = 16
ccbytecountreadable PROC
; File W:\cpp\void\cc\cclog.h
; Line 41
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 42
	cmp	QWORD PTR b$[rsp], 1073741824		; 40000000H
	jle	SHORT $LN2@ccbytecoun
; Line 43
	cvtsi2sd xmm0, QWORD PTR b$[rsp]
	divsd	xmm0, QWORD PTR __real@41d0000000000000
	mov	rax, QWORD PTR f$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 44
	lea	rax, OFFSET FLAT:$SG46349
	jmp	SHORT $LN1@ccbytecoun
; Line 45
	jmp	SHORT $LN3@ccbytecoun
$LN2@ccbytecoun:
; Line 46
	cmp	QWORD PTR b$[rsp], 1048576		; 00100000H
	jle	SHORT $LN4@ccbytecoun
; Line 47
	cvtsi2sd xmm0, QWORD PTR b$[rsp]
	divsd	xmm0, QWORD PTR __real@4130000000000000
	mov	rax, QWORD PTR f$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 48
	lea	rax, OFFSET FLAT:$SG46352
	jmp	SHORT $LN1@ccbytecoun
; Line 49
	jmp	SHORT $LN5@ccbytecoun
$LN4@ccbytecoun:
; Line 50
	cmp	QWORD PTR b$[rsp], 1024			; 00000400H
	jle	SHORT $LN6@ccbytecoun
; Line 51
	cvtsi2sd xmm0, QWORD PTR b$[rsp]
	divsd	xmm0, QWORD PTR __real@4090000000000000
	mov	rax, QWORD PTR f$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 52
	lea	rax, OFFSET FLAT:$SG46355
	jmp	SHORT $LN1@ccbytecoun
; Line 53
	jmp	SHORT $LN7@ccbytecoun
$LN6@ccbytecoun:
; Line 55
	cvtsi2sd xmm0, QWORD PTR b$[rsp]
	mov	rax, QWORD PTR f$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 56
	lea	rax, OFFSET FLAT:$SG46356
$LN7@ccbytecoun:
$LN5@ccbytecoun:
$LN3@ccbytecoun:
$LN1@ccbytecoun:
; Line 58
	ret	0
ccbytecountreadable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
total$ = 8
local$ = 16
ccclockperc PROC
; File W:\cpp\void\cc\cclog.h
; Line 34
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 35
	mov	rax, QWORD PTR local$[rsp]
	test	rax, rax
	jl	SHORT $LN5@ccclockper
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN6@ccclockper
$LN5@ccclockper:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN6@ccclockper:
	mov	rax, QWORD PTR total$[rsp]
	test	rax, rax
	jl	SHORT $LN3@ccclockper
	cvtsi2sd xmm1, rax
	jmp	SHORT $LN4@ccclockper
$LN3@ccclockper:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
	movaps	xmm1, xmm2
$LN4@ccclockper:
	divsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR __real@4059000000000000
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
; Line 37
	ret	0
ccclockperc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vli$ = 32
res$ = 40
ccm$ = 64
fmt$ = 72
ccstr_catf PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 279
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 280
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 281
	mov	r8, QWORD PTR vli$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccstr_vcatf
	mov	QWORD PTR res$[rsp], rax
; Line 282
	mov	QWORD PTR vli$[rsp], 0
; Line 283
	mov	rax, QWORD PTR res$[rsp]
; Line 284
	add	rsp, 56					; 00000038H
	ret	0
ccstr_catf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
res$ = 40
ccm$ = 64
fmt$ = 72
vli$ = 80
ccstr_vcatf PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 271
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsnprintf
	mov	DWORD PTR len$[rsp], eax
; Line 272
	movsxd	rax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	r9, rax
	mov	r8, rcx
	mov	edx, 1
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccdlb_arradd
	mov	QWORD PTR res$[rsp], rax
; Line 273
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	rcx, QWORD PTR [rcx]
	add	rcx, QWORD PTR res$[rsp]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, eax
	call	stbsp_vsnprintf
	mov	DWORD PTR len$[rsp], eax
; Line 274
	mov	rax, QWORD PTR res$[rsp]
; Line 275
	add	rsp, 56					; 00000038H
	ret	0
ccstr_vcatf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ent$ = 32
tv75 = 40
hsh$ = 48
idx$ = 56
tbl$ = 80
len$ = 88
key$ = 96
ccdbl_query PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 165
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 166
	cmp	QWORD PTR key$[rsp], 0
	jne	SHORT $LN8@ccdbl_quer
	int	3
$LN8@ccdbl_quer:
; Line 167
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN10@ccdbl_quer
	int	3
$LN10@ccdbl_quer:
; Line 169
	mov	rdx, QWORD PTR key$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	call	cchsh_abc
	mov	QWORD PTR hsh$[rsp], rax
; Line 170
	mov	rax, QWORD PTR tbl$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN12@ccdbl_quer
	mov	rax, QWORD PTR tbl$[rsp]
	mov	rax, QWORD PTR [rax+16]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-16]
	mov	ecx, 32					; 00000020H
	div	rcx
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN13@ccdbl_quer
$LN12@ccdbl_quer:
	mov	QWORD PTR tv75[rsp], 0
$LN13@ccdbl_quer:
	xor	edx, edx
	mov	rax, QWORD PTR hsh$[rsp]
	div	QWORD PTR tv75[rsp]
	mov	rax, rdx
	mov	QWORD PTR idx$[rsp], rax
; Line 172
	imul	rax, QWORD PTR idx$[rsp], 32		; 00000020H
	mov	rcx, QWORD PTR tbl$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR ent$[rsp], rax
; Line 174
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 0
$LN2@ccdbl_quer:
; Line 175
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN3@ccdbl_quer
; Line 176
	mov	rax, QWORD PTR ent$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN4@ccdbl_quer
	mov	rax, QWORD PTR ent$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	cmp	QWORD PTR [rax+16], rcx
	je	SHORT $LN5@ccdbl_quer
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR key$[rsp]
	mov	rax, QWORD PTR ent$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN4@ccdbl_quer
$LN5@ccdbl_quer:
; Line 177
	mov	rax, QWORD PTR ent$[rsp]
	jmp	SHORT $LN1@ccdbl_quer
$LN4@ccdbl_quer:
; Line 178
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN6@ccdbl_quer
; Line 179
	jmp	SHORT $LN3@ccdbl_quer
$LN6@ccdbl_quer:
; Line 180
	mov	rax, QWORD PTR ent$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR ent$[rsp], rax
; Line 181
	jmp	SHORT $LN2@ccdbl_quer
$LN3@ccdbl_quer:
; Line 182
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 183
	mov	rax, QWORD PTR ent$[rsp]
$LN1@ccdbl_quer:
; Line 184
	add	rsp, 72					; 00000048H
	ret	0
ccdbl_query ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 48
tv141 = 56
$T1 = 64
$T2 = 96
$T3 = 128
tbl$ = 192
isze$ = 200
len$ = 208
key$ = 216
ent$ = 224
ccdlb_tblcat PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 135
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 136
	cmp	QWORD PTR tbl$[rsp], 0
	jne	SHORT $LN6@ccdlb_tblc
	int	3
$LN6@ccdlb_tblc:
; Line 137
	mov	rax, QWORD PTR tbl$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN8@ccdlb_tblc
	int	3
$LN8@ccdlb_tblc:
; Line 139
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN2@ccdlb_tblc
; Line 140
	lea	rax, OFFSET FLAT:$SG46222
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 140				; 0000008cH
	lea	r8, OFFSET FLAT:$SG46223
	mov	edx, 8
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, 32					; 00000020H
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 141
	mov	rax, QWORD PTR ent$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR ent$[rsp], rax
; Line 142
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR ent$[rsp]
	call	memset
$LN2@ccdlb_tblc:
; Line 144
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN10@ccdlb_tblc
	int	3
$LN10@ccdlb_tblc:
; Line 145
	mov	rax, QWORD PTR ent$[rsp]
	cmp	DWORD PTR [rax+8], 0
	je	SHORT $LN12@ccdlb_tblc
	int	3
$LN12@ccdlb_tblc:
; Line 146
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN14@ccdlb_tblc
	int	3
$LN14@ccdlb_tblc:
; Line 149
	mov	r8, QWORD PTR isze$[rsp]
	mov	rdx, QWORD PTR isze$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_arradd_
	mov	QWORD PTR val$[rsp], rax
; Line 150
	mov	rax, QWORD PTR tbl$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR val$[rsp]
	lea	rax, QWORD PTR [rax+rcx+40]
	mov	r8, QWORD PTR isze$[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 153
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN3@ccdlb_tblc
; Line 154
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	cdqe
	mov	ecx, DWORD PTR len$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR ent$[rsp]
	add	rdx, 16
	mov	QWORD PTR tv141[rsp], rdx
	mov	r9, QWORD PTR key$[rsp]
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv141[rsp]
	mov	rcx, rax
	call	ccdlb_stradd
	jmp	SHORT $LN4@ccdlb_tblc
$LN3@ccdlb_tblc:
; Line 156
	mov	rax, QWORD PTR ent$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN4@ccdlb_tblc:
; Line 158
	mov	rax, QWORD PTR ent$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 159
	mov	rax, QWORD PTR ent$[rsp]
	mov	rcx, QWORD PTR val$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 160
	mov	rax, QWORD PTR ent$[rsp]
; Line 161
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccdlb_tblcat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv136 = 32
dlb$ = 40
tv76 = 48
tv91 = 56
dlb_$ = 80
isze$ = 88
ccdlb_tblini PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 114
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 115
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR dlb$[rsp], rax
; Line 117
	cmp	QWORD PTR dlb$[rsp], 0
	jne	$LN2@ccdlb_tbli
; Line 120
	imul	eax, DWORD PTR isze$[rsp], 255		; 000000ffH
	cdqe
	xor	r8d, r8d
	mov	rdx, rax
	lea	rcx, QWORD PTR dlb$[rsp]
	call	ccdlb_arradd_
; Line 121
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 40					; 00000028H
	test	rax, rax
	je	SHORT $LN4@ccdlb_tbli
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv76[rsp], rax
	jmp	SHORT $LN5@ccdlb_tbli
$LN4@ccdlb_tbli:
	mov	QWORD PTR tv76[rsp], 0
$LN5@ccdlb_tbli:
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 40					; 00000028H
	mov	r8, QWORD PTR tv76[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 124
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 16
	mov	r9d, 255				; 000000ffH
	mov	r8d, 255				; 000000ffH
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	ccdlb_arradd
; Line 125
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN6@ccdlb_tbli
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax-16]
	mov	QWORD PTR tv91[rsp], rax
	jmp	SHORT $LN7@ccdlb_tbli
$LN6@ccdlb_tbli:
	mov	QWORD PTR tv91[rsp], 0
$LN7@ccdlb_tbli:
	mov	r8, QWORD PTR tv91[rsp]
	xor	edx, edx
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memset
; Line 126
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN8@ccdlb_tbli
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rax-40]
	or	eax, 2
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	DWORD PTR [rcx-40], eax
	mov	DWORD PTR tv136[rsp], 1
	jmp	SHORT $LN9@ccdlb_tbli
$LN8@ccdlb_tbli:
	mov	DWORD PTR tv136[rsp], 0
$LN9@ccdlb_tbli:
; Line 129
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	QWORD PTR [rax], rcx
$LN2@ccdlb_tbli:
; Line 131
	add	rsp, 72					; 00000048H
	ret	0
ccdlb_tblini ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hsh$ = 0
len$ = 32
key$ = 40
cchsh_abc PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 104
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 105
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN5@cchsh_abc
; Line 106
	mov	QWORD PTR hsh$[rsp], 5381		; 00001505H
	jmp	SHORT $LN4@cchsh_abc
$LN2@cchsh_abc:
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	movsx	rax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR hsh$[rsp]
	shl	rcx, 5
	add	rax, QWORD PTR hsh$[rsp]
	add	rax, rcx
	mov	QWORD PTR hsh$[rsp], rax
$LN4@cchsh_abc:
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN3@cchsh_abc
	jmp	SHORT $LN2@cchsh_abc
$LN3@cchsh_abc:
	jmp	SHORT $LN6@cchsh_abc
$LN5@cchsh_abc:
; Line 108
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR hsh$[rsp], rax
$LN6@cchsh_abc:
; Line 109
	mov	rax, QWORD PTR hsh$[rsp]
; Line 110
	add	rsp, 24
	ret	0
cchsh_abc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur$ = 48
res$ = 56
tv174 = 64
tv161 = 72
tv191 = 80
tv158 = 88
$T1 = 96
$T2 = 128
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
ccm$ = 320
cres$ = 328
ccom$ = 336
cpy$ = 344
ccdlb_stradd PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 86
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
; Line 87
	lea	rax, OFFSET FLAT:$SG46180
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 87					; 00000057H
	lea	r8, OFFSET FLAT:$SG46181
	mov	edx, 6
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv161[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv174[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv174[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46179
	mov	rcx, QWORD PTR tv161[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 90
	cmp	QWORD PTR cres$[rsp], 0
	jne	SHORT $LN3@ccdlb_stra
	int	3
$LN3@ccdlb_stra:
; Line 91
	cmp	QWORD PTR ccom$[rsp], 0
	jne	SHORT $LN5@ccdlb_stra
	int	3
$LN5@ccdlb_stra:
; Line 92
	mov	r9, QWORD PTR ccom$[rsp]
	mov	r8, QWORD PTR cres$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccdlb_arradd
	mov	QWORD PTR res$[rsp], rax
; Line 93
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, QWORD PTR res$[rsp]
	mov	QWORD PTR cur$[rsp], rax
; Line 94
	mov	rax, QWORD PTR cres$[rsp]
	dec	rax
	mov	r8, rax
	mov	rdx, QWORD PTR cpy$[rsp]
	mov	rcx, QWORD PTR cur$[rsp]
	call	memcpy
; Line 95
	mov	rax, QWORD PTR cres$[rsp]
	mov	rcx, QWORD PTR cur$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR [rax-1], 0
; Line 97
	lea	rax, OFFSET FLAT:$SG46183
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 97					; 00000061H
	lea	r8, OFFSET FLAT:$SG46184
	mov	edx, 7
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv158[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv191[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv191[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46182
	mov	rcx, QWORD PTR tv158[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 98
	mov	rax, QWORD PTR res$[rsp]
; Line 99
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
ccdlb_stradd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 32
dlb$ = 40
res$ = 48
ccm$ = 80
isze$ = 88
cres$ = 96
ccom$ = 104
ccdlb_arradd PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 75
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 78
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@ccdlb_arra
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@ccdlb_arra
$LN3@ccdlb_arra:
	mov	QWORD PTR tv66[rsp], 0
$LN4@ccdlb_arra:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR dlb$[rsp], rax
; Line 79
	mov	rax, QWORD PTR isze$[rsp]
	imul	rax, QWORD PTR ccom$[rsp]
	mov	rcx, QWORD PTR isze$[rsp]
	imul	rcx, QWORD PTR cres$[rsp]
	mov	r8, rax
	mov	rdx, rcx
	lea	rcx, QWORD PTR dlb$[rsp]
	call	ccdlb_arradd_
	mov	QWORD PTR res$[rsp], rax
; Line 80
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 81
	mov	rax, QWORD PTR res$[rsp]
	cdq
	idiv	QWORD PTR isze$[rsp]
; Line 82
	add	rsp, 72					; 00000048H
	ret	0
ccdlb_arradd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dlb$ = 48
sze_max$ = 56
sze_min$ = 64
tv88 = 72
rem_rze$ = 76
is_ini$ = 80
allocator$ = 88
tv209 = 96
tv195 = 104
tv272 = 112
tv192 = 120
$T1 = 128
$T2 = 160
$T3 = 192
$T4 = 224
$T5 = 256
$T6 = 288
$T7 = 320
$T8 = 352
$T9 = 384
dlb_$ = 448
rsze$ = 456
csze$ = 464
ccdlb_arradd_ PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 24
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 424				; 000001a8H
; Line 25
	lea	rax, OFFSET FLAT:$SG46147
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 25
	lea	r8, OFFSET FLAT:$SG46148
	mov	edx, 3
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv195[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv209[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv209[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46146
	mov	rcx, QWORD PTR tv195[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 26
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR dlb$[rsp], rax
; Line 29
	cmp	QWORD PTR dlb$[rsp], 0
	jne	SHORT $LN7@ccdlb_arra
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN8@ccdlb_arra
$LN7@ccdlb_arra:
	mov	DWORD PTR tv88[rsp], 0
$LN8@ccdlb_arra:
	mov	eax, DWORD PTR tv88[rsp]
	mov	DWORD PTR is_ini$[rsp], eax
; Line 30
	mov	DWORD PTR rem_rze$[rsp], 0
; Line 32
	mov	QWORD PTR sze_max$[rsp], 0
; Line 33
	mov	QWORD PTR sze_min$[rsp], 0
; Line 35
	mov	eax, OFFSET FLAT:ccallocator
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR allocator$[rsp], rax
; Line 37
	cmp	DWORD PTR is_ini$[rsp], 0
	jne	SHORT $LN2@ccdlb_arra
; Line 38
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR sze_max$[rsp], rax
; Line 39
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR sze_min$[rsp], rax
; Line 40
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	mov	DWORD PTR rem_rze$[rsp], eax
; Line 41
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR allocator$[rsp], rax
$LN2@ccdlb_arra:
; Line 46
	mov	rax, QWORD PTR sze_max$[rsp]
	mov	rcx, QWORD PTR rsze$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR sze_min$[rsp]
	cmp	QWORD PTR csze$[rsp], rax
	jle	SHORT $LN9@ccdlb_arra
	int	3
$LN9@ccdlb_arra:
; Line 48
	mov	rax, QWORD PTR rsze$[rsp]
	mov	rcx, QWORD PTR sze_min$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR sze_max$[rsp], rax
	jge	$LN3@ccdlb_arra
; Line 50
	cmp	DWORD PTR rem_rze$[rsp], 0
	je	SHORT $LN11@ccdlb_arra
	int	3
$LN11@ccdlb_arra:
; Line 52
	mov	rax, QWORD PTR sze_max$[rsp]
	shl	rax, 1
	mov	QWORD PTR sze_max$[rsp], rax
; Line 53
	mov	rax, QWORD PTR rsze$[rsp]
	mov	rcx, QWORD PTR sze_min$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR sze_max$[rsp], rax
	jge	SHORT $LN4@ccdlb_arra
; Line 54
	mov	rax, QWORD PTR rsze$[rsp]
	mov	rcx, QWORD PTR sze_min$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR sze_max$[rsp], rax
$LN4@ccdlb_arra:
; Line 56
	lea	rax, OFFSET FLAT:$SG46152
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 56					; 00000038H
	lea	r8, OFFSET FLAT:$SG46153
	mov	edx, 4
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR sze_max$[rsp]
	add	rax, 40					; 00000028H
	lea	rcx, QWORD PTR $T4[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR dlb$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR $T4[rsp]
	call	QWORD PTR allocator$[rsp]
	mov	QWORD PTR dlb$[rsp], rax
; Line 57
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 59
	cmp	DWORD PTR is_ini$[rsp], 0
	je	SHORT $LN5@ccdlb_arra
; Line 60
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 61
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, -2					; fffffffeH
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 62
	mov	rax, QWORD PTR dlb$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 63
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR allocator$[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN5@ccdlb_arra:
$LN3@ccdlb_arra:
; Line 67
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR sze_max$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 68
	mov	rax, QWORD PTR csze$[rsp]
	mov	rcx, QWORD PTR sze_min$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 69
	lea	rax, OFFSET FLAT:$SG46156
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 69					; 00000045H
	lea	r8, OFFSET FLAT:$SG46157
	mov	edx, 5
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv192[rsp], rcx
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rdi, QWORD PTR $T5[rsp]
	mov	QWORD PTR tv272[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv272[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46155
	mov	rcx, QWORD PTR tv192[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T6[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 70
	mov	rax, QWORD PTR sze_min$[rsp]
; Line 71
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rsi
	ret	0
ccdlb_arradd_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dlb$ = 48
e$1 = 56
i$2 = 64
tv66 = 72
tv79 = 80
a$ = 88
f$3 = 96
$T4 = 104
$T5 = 144
$T6 = 176
$T7 = 208
$T8 = 240
$T9 = 272
dlb_$ = 336
ccdlbdel_ PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 5
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR dlb_$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@ccdlbdel_
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN11@ccdlbdel_
$LN10@ccdlbdel_:
	mov	QWORD PTR tv66[rsp], 0
$LN11@ccdlbdel_:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR dlb$[rsp], rax
; Line 7
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR a$[rsp], rax
; Line 8
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN8@ccdlbdel_
; Line 10
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR e$1[rsp], rax
	jmp	SHORT $LN4@ccdlbdel_
$LN2@ccdlbdel_:
	mov	rax, QWORD PTR e$1[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR e$1[rsp], rax
$LN4@ccdlbdel_:
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN12@ccdlbdel_
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+16]
	xor	edx, edx
	mov	rax, QWORD PTR [rax-8]
	mov	ecx, 32					; 00000020H
	div	rcx
	mov	QWORD PTR tv79[rsp], rax
	jmp	SHORT $LN13@ccdlbdel_
$LN12@ccdlbdel_:
	mov	QWORD PTR tv79[rsp], 0
$LN13@ccdlbdel_:
	imul	rax, QWORD PTR tv79[rsp], 32		; 00000020H
	mov	rcx, QWORD PTR dlb$[rsp]
	add	rax, QWORD PTR [rcx+16]
	cmp	QWORD PTR e$1[rsp], rax
	jae	$LN3@ccdlbdel_
; Line 11
	mov	rax, QWORD PTR e$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR i$2[rsp], rax
$LN5@ccdlbdel_:
	cmp	QWORD PTR i$2[rsp], 0
	je	$LN6@ccdlbdel_
; Line 12
	mov	rax, QWORD PTR i$2[rsp]
	mov	QWORD PTR f$3[rsp], rax
; Line 13
	mov	rax, QWORD PTR i$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR i$2[rsp], rax
; Line 14
	lea	rax, OFFSET FLAT:$SG46125
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 14
	lea	r8, OFFSET FLAT:$SG46126
	mov	edx, 1
	lea	rcx, QWORD PTR $T8[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR f$3[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	QWORD PTR a$[rsp]
; Line 15
	jmp	$LN5@ccdlbdel_
$LN6@ccdlbdel_:
; Line 16
	jmp	$LN2@ccdlbdel_
$LN3@ccdlbdel_:
; Line 17
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 16
	mov	rcx, rax
	call	ccdlbdel_
$LN8@ccdlbdel_:
; Line 19
	lea	rax, OFFSET FLAT:$SG46127
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 19
	lea	r8, OFFSET FLAT:$SG46128
	mov	edx, 2
	lea	rcx, QWORD PTR $T9[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	r8, QWORD PTR dlb$[rsp]
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	QWORD PTR a$[rsp]
; Line 20
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccdlbdel_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 0
i$2 = 4
allocator$ = 32
block$ = 40
ccdebug_checkblock PROC
; File W:\cpp\void\cc\cc.c
; Line 508
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@ccdebug_ch
$LN2@ccdebug_ch:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@ccdebug_ch:
	cmp	DWORD PTR i$1[rsp], 4
	jge	SHORT $LN3@ccdebug_ch
; Line 509
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN9@ccdebug_ch
	int	3
$LN9@ccdebug_ch:
	jmp	SHORT $LN2@ccdebug_ch
$LN3@ccdebug_ch:
; Line 510
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@ccdebug_ch
$LN5@ccdebug_ch:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@ccdebug_ch:
	cmp	DWORD PTR i$2[rsp], 4
	jge	SHORT $LN6@ccdebug_ch
; Line 511
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+88]
	test	eax, eax
	je	SHORT $LN11@ccdebug_ch
	int	3
$LN11@ccdebug_ch:
	jmp	SHORT $LN5@ccdebug_ch
$LN6@ccdebug_ch:
; Line 513
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN13@ccdebug_ch
	int	3
$LN13@ccdebug_ch:
; Line 514
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN15@ccdebug_ch
	int	3
$LN15@ccdebug_ch:
; Line 516
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR allocator$[rsp]
	cmp	QWORD PTR [rax+24], rcx
	je	SHORT $LN17@ccdebug_ch
	int	3
$LN17@ccdebug_ch:
; Line 518
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN19@ccdebug_ch
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax+8], rcx
	je	SHORT $LN19@ccdebug_ch
	int	3
$LN19@ccdebug_ch:
; Line 519
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN21@ccdebug_ch
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax+8], rcx
	je	SHORT $LN21@ccdebug_ch
	int	3
$LN21@ccdebug_ch:
; Line 521
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN23@ccdebug_ch
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], rcx
	je	SHORT $LN23@ccdebug_ch
	int	3
$LN23@ccdebug_ch:
; Line 522
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN25@ccdebug_ch
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], rcx
	je	SHORT $LN25@ccdebug_ch
	int	3
$LN25@ccdebug_ch:
; Line 524
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN27@ccdebug_ch
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], rcx
	jne	SHORT $LN27@ccdebug_ch
	int	3
$LN27@ccdebug_ch:
; Line 525
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN29@ccdebug_ch
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], rcx
	jne	SHORT $LN29@ccdebug_ch
	int	3
$LN29@ccdebug_ch:
; Line 526
	add	rsp, 24
	ret	0
ccdebug_checkblock ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
et$1 = 0
ph$ = 8
eb$2 = 16
e$3 = 20
pl$ = 24
cn$4 = 32
cn$5 = 36
cn$6 = 40
cn$7 = 44
cn$8 = 48
cn$9 = 52
cn$10 = 56
cn$11 = 60
cn$12 = 64
cn$13 = 68
cn$14 = 72
cn$15 = 76
cn$16 = 80
cn$17 = 84
cn$18 = 88
cn$19 = 92
cn$20 = 96
cn$21 = 100
cn$22 = 104
cn$23 = 108
cn$24 = 112
cn$25 = 116
cn$26 = 120
cn$27 = 124
p2l$28 = 128
p2h$29 = 136
bt$30 = 144
bt$31 = 152
bt$32 = 160
bt$33 = 168
bt$34 = 176
bt$35 = 184
ahi$36 = 192
bhi$37 = 200
ahi$38 = 208
bhi$39 = 216
ahi$40 = 224
bhi$41 = 232
ahi$42 = 240
bhi$43 = 248
ahi$44 = 256
bhi$45 = 264
ahi$46 = 272
bhi$47 = 280
alo$48 = 288
blo$49 = 296
alo$50 = 304
blo$51 = 312
s$52 = 320
alo$53 = 328
blo$54 = 336
alo$55 = 344
blo$56 = 352
s$57 = 360
alo$58 = 368
blo$59 = 376
s$60 = 384
alo$61 = 392
blo$62 = 400
s$63 = 408
ohi$ = 432
olo$ = 440
d$ = 448
power$ = 456
stbsp__raise_to_power10 PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1639
	mov	DWORD PTR [rsp+32], r9d
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 424				; 000001a8H
; Line 1641
	cmp	DWORD PTR power$[rsp], 0
	jl	$LN74@stbsp__rai
	cmp	DWORD PTR power$[rsp], 22
	jg	$LN74@stbsp__rai
; Line 1642
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$36[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$37[rsp], xmm0
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$4[rsp], 0
	jmp	SHORT $LN4@stbsp__rai
$LN2@stbsp__rai:
	mov	eax, DWORD PTR cn$4[rsp]
	inc	eax
	mov	DWORD PTR cn$4[rsp], eax
$LN4@stbsp__rai:
	cmp	DWORD PTR cn$4[rsp], 8
	jge	SHORT $LN3@stbsp__rai
	movsxd	rax, DWORD PTR cn$4[rsp]
	movsxd	rcx, DWORD PTR cn$4[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$30[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rai
$LN3@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$5[rsp], 0
	jmp	SHORT $LN7@stbsp__rai
$LN5@stbsp__rai:
	mov	eax, DWORD PTR cn$5[rsp]
	inc	eax
	mov	DWORD PTR cn$5[rsp], eax
$LN7@stbsp__rai:
	cmp	DWORD PTR cn$5[rsp], 8
	jge	SHORT $LN6@stbsp__rai
	movsxd	rax, DWORD PTR cn$5[rsp]
	movsxd	rcx, DWORD PTR cn$5[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR ahi$36[rsp+rcx], al
	jmp	SHORT $LN5@stbsp__rai
$LN6@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$36[rsp]
	movsd	QWORD PTR alo$48[rsp], xmm0
	mov	DWORD PTR cn$6[rsp], 0
	jmp	SHORT $LN10@stbsp__rai
$LN8@stbsp__rai:
	mov	eax, DWORD PTR cn$6[rsp]
	inc	eax
	mov	DWORD PTR cn$6[rsp], eax
$LN10@stbsp__rai:
	cmp	DWORD PTR cn$6[rsp], 8
	jge	SHORT $LN9@stbsp__rai
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$6[rsp]
	movsxd	rdx, DWORD PTR cn$6[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$30[rsp+rdx], al
	jmp	SHORT $LN8@stbsp__rai
$LN9@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$7[rsp], 0
	jmp	SHORT $LN13@stbsp__rai
$LN11@stbsp__rai:
	mov	eax, DWORD PTR cn$7[rsp]
	inc	eax
	mov	DWORD PTR cn$7[rsp], eax
$LN13@stbsp__rai:
	cmp	DWORD PTR cn$7[rsp], 8
	jge	SHORT $LN12@stbsp__rai
	movsxd	rax, DWORD PTR cn$7[rsp]
	movsxd	rcx, DWORD PTR cn$7[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR bhi$37[rsp+rcx], al
	jmp	SHORT $LN11@stbsp__rai
$LN12@stbsp__rai:
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$37[rsp]
	movsd	QWORD PTR blo$49[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$36[rsp]
	mulsd	xmm0, QWORD PTR bhi$37[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$36[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR bhi$37[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1643
	jmp	$LN75@stbsp__rai
$LN74@stbsp__rai:
; Line 1647
	mov	eax, DWORD PTR power$[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1648
	cmp	DWORD PTR power$[rsp], 0
	jge	SHORT $LN76@stbsp__rai
; Line 1649
	mov	eax, DWORD PTR e$3[rsp]
	neg	eax
	mov	DWORD PTR e$3[rsp], eax
$LN76@stbsp__rai:
; Line 1650
	imul	eax, DWORD PTR e$3[rsp], 713		; 000002c9H
	sar	eax, 14
	mov	DWORD PTR et$1[rsp], eax
; Line 1651
	cmp	DWORD PTR et$1[rsp], 13
	jle	SHORT $LN77@stbsp__rai
; Line 1652
	mov	DWORD PTR et$1[rsp], 13
$LN77@stbsp__rai:
; Line 1653
	imul	eax, DWORD PTR et$1[rsp], 23
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR eb$2[rsp], eax
; Line 1655
	movsd	xmm0, QWORD PTR d$[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1656
	xorps	xmm0, xmm0
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1657
	cmp	DWORD PTR power$[rsp], 0
	jge	$LN78@stbsp__rai
; Line 1658
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN80@stbsp__rai
; Line 1659
	mov	eax, DWORD PTR eb$2[rsp]
	dec	eax
	mov	DWORD PTR eb$2[rsp], eax
; Line 1660
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$38[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$39[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$8[rsp], 0
	jmp	SHORT $LN16@stbsp__rai
$LN14@stbsp__rai:
	mov	eax, DWORD PTR cn$8[rsp]
	inc	eax
	mov	DWORD PTR cn$8[rsp], eax
$LN16@stbsp__rai:
	cmp	DWORD PTR cn$8[rsp], 8
	jge	SHORT $LN15@stbsp__rai
	movsxd	rax, DWORD PTR cn$8[rsp]
	movsxd	rcx, DWORD PTR cn$8[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$31[rsp+rcx], al
	jmp	SHORT $LN14@stbsp__rai
$LN15@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$9[rsp], 0
	jmp	SHORT $LN19@stbsp__rai
$LN17@stbsp__rai:
	mov	eax, DWORD PTR cn$9[rsp]
	inc	eax
	mov	DWORD PTR cn$9[rsp], eax
$LN19@stbsp__rai:
	cmp	DWORD PTR cn$9[rsp], 8
	jge	SHORT $LN18@stbsp__rai
	movsxd	rax, DWORD PTR cn$9[rsp]
	movsxd	rcx, DWORD PTR cn$9[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR ahi$38[rsp+rcx], al
	jmp	SHORT $LN17@stbsp__rai
$LN18@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$38[rsp]
	movsd	QWORD PTR alo$50[rsp], xmm0
	mov	DWORD PTR cn$10[rsp], 0
	jmp	SHORT $LN22@stbsp__rai
$LN20@stbsp__rai:
	mov	eax, DWORD PTR cn$10[rsp]
	inc	eax
	mov	DWORD PTR cn$10[rsp], eax
$LN22@stbsp__rai:
	cmp	DWORD PTR cn$10[rsp], 8
	jge	SHORT $LN21@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$10[rsp]
	movsxd	rdx, DWORD PTR cn$10[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$31[rsp+rdx], al
	jmp	SHORT $LN20@stbsp__rai
$LN21@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$11[rsp], 0
	jmp	SHORT $LN25@stbsp__rai
$LN23@stbsp__rai:
	mov	eax, DWORD PTR cn$11[rsp]
	inc	eax
	mov	DWORD PTR cn$11[rsp], eax
$LN25@stbsp__rai:
	cmp	DWORD PTR cn$11[rsp], 8
	jge	SHORT $LN24@stbsp__rai
	movsxd	rax, DWORD PTR cn$11[rsp]
	movsxd	rcx, DWORD PTR cn$11[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR bhi$39[rsp+rcx], al
	jmp	SHORT $LN23@stbsp__rai
$LN24@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$39[rsp]
	movsd	QWORD PTR blo$51[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$38[rsp]
	mulsd	xmm0, QWORD PTR bhi$39[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$38[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR bhi$39[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1661
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negboterr
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	xmm1, QWORD PTR pl$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
$LN80@stbsp__rai:
; Line 1663
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN81@stbsp__rai
; Line 1664
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$52[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1665
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1666
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$40[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$41[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$12[rsp], 0
	jmp	SHORT $LN28@stbsp__rai
$LN26@stbsp__rai:
	mov	eax, DWORD PTR cn$12[rsp]
	inc	eax
	mov	DWORD PTR cn$12[rsp], eax
$LN28@stbsp__rai:
	cmp	DWORD PTR cn$12[rsp], 8
	jge	SHORT $LN27@stbsp__rai
	movsxd	rax, DWORD PTR cn$12[rsp]
	movsxd	rcx, DWORD PTR cn$12[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$32[rsp+rcx], al
	jmp	SHORT $LN26@stbsp__rai
$LN27@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$13[rsp], 0
	jmp	SHORT $LN31@stbsp__rai
$LN29@stbsp__rai:
	mov	eax, DWORD PTR cn$13[rsp]
	inc	eax
	mov	DWORD PTR cn$13[rsp], eax
$LN31@stbsp__rai:
	cmp	DWORD PTR cn$13[rsp], 8
	jge	SHORT $LN30@stbsp__rai
	movsxd	rax, DWORD PTR cn$13[rsp]
	movsxd	rcx, DWORD PTR cn$13[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR ahi$40[rsp+rcx], al
	jmp	SHORT $LN29@stbsp__rai
$LN30@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$40[rsp]
	movsd	QWORD PTR alo$53[rsp], xmm0
	mov	DWORD PTR cn$14[rsp], 0
	jmp	SHORT $LN34@stbsp__rai
$LN32@stbsp__rai:
	mov	eax, DWORD PTR cn$14[rsp]
	inc	eax
	mov	DWORD PTR cn$14[rsp], eax
$LN34@stbsp__rai:
	cmp	DWORD PTR cn$14[rsp], 8
	jge	SHORT $LN33@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$14[rsp]
	movsxd	rdx, DWORD PTR cn$14[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$32[rsp+rdx], al
	jmp	SHORT $LN32@stbsp__rai
$LN33@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$15[rsp], 0
	jmp	SHORT $LN37@stbsp__rai
$LN35@stbsp__rai:
	mov	eax, DWORD PTR cn$15[rsp]
	inc	eax
	mov	DWORD PTR cn$15[rsp], eax
$LN37@stbsp__rai:
	cmp	DWORD PTR cn$15[rsp], 8
	jge	SHORT $LN36@stbsp__rai
	movsxd	rax, DWORD PTR cn$15[rsp]
	movsxd	rcx, DWORD PTR cn$15[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR bhi$41[rsp+rcx], al
	jmp	SHORT $LN35@stbsp__rai
$LN36@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$41[rsp]
	movsd	QWORD PTR blo$54[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$40[rsp]
	mulsd	xmm0, QWORD PTR bhi$41[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$40[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR bhi$41[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1667
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtoperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1668
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1669
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN81@stbsp__rai:
; Line 1671
	jmp	$LN79@stbsp__rai
$LN78@stbsp__rai:
; Line 1672
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN82@stbsp__rai
; Line 1673
	mov	eax, DWORD PTR eb$2[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1674
	cmp	DWORD PTR eb$2[rsp], 22
	jle	SHORT $LN83@stbsp__rai
; Line 1675
	mov	DWORD PTR eb$2[rsp], 22
$LN83@stbsp__rai:
; Line 1676
	mov	eax, DWORD PTR eb$2[rsp]
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$3[rsp], eax
; Line 1677
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$42[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$43[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$16[rsp], 0
	jmp	SHORT $LN40@stbsp__rai
$LN38@stbsp__rai:
	mov	eax, DWORD PTR cn$16[rsp]
	inc	eax
	mov	DWORD PTR cn$16[rsp], eax
$LN40@stbsp__rai:
	cmp	DWORD PTR cn$16[rsp], 8
	jge	SHORT $LN39@stbsp__rai
	movsxd	rax, DWORD PTR cn$16[rsp]
	movsxd	rcx, DWORD PTR cn$16[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$33[rsp+rcx], al
	jmp	SHORT $LN38@stbsp__rai
$LN39@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$17[rsp], 0
	jmp	SHORT $LN43@stbsp__rai
$LN41@stbsp__rai:
	mov	eax, DWORD PTR cn$17[rsp]
	inc	eax
	mov	DWORD PTR cn$17[rsp], eax
$LN43@stbsp__rai:
	cmp	DWORD PTR cn$17[rsp], 8
	jge	SHORT $LN42@stbsp__rai
	movsxd	rax, DWORD PTR cn$17[rsp]
	movsxd	rcx, DWORD PTR cn$17[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR ahi$42[rsp+rcx], al
	jmp	SHORT $LN41@stbsp__rai
$LN42@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$42[rsp]
	movsd	QWORD PTR alo$55[rsp], xmm0
	mov	DWORD PTR cn$18[rsp], 0
	jmp	SHORT $LN46@stbsp__rai
$LN44@stbsp__rai:
	mov	eax, DWORD PTR cn$18[rsp]
	inc	eax
	mov	DWORD PTR cn$18[rsp], eax
$LN46@stbsp__rai:
	cmp	DWORD PTR cn$18[rsp], 8
	jge	SHORT $LN45@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$18[rsp]
	movsxd	rdx, DWORD PTR cn$18[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$33[rsp+rdx], al
	jmp	SHORT $LN44@stbsp__rai
$LN45@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$19[rsp], 0
	jmp	SHORT $LN49@stbsp__rai
$LN47@stbsp__rai:
	mov	eax, DWORD PTR cn$19[rsp]
	inc	eax
	mov	DWORD PTR cn$19[rsp], eax
$LN49@stbsp__rai:
	cmp	DWORD PTR cn$19[rsp], 8
	jge	SHORT $LN48@stbsp__rai
	movsxd	rax, DWORD PTR cn$19[rsp]
	movsxd	rcx, DWORD PTR cn$19[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR bhi$43[rsp+rcx], al
	jmp	SHORT $LN47@stbsp__rai
$LN48@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$43[rsp]
	movsd	QWORD PTR blo$56[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$42[rsp]
	mulsd	xmm0, QWORD PTR bhi$43[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$42[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR bhi$43[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1678
	cmp	DWORD PTR e$3[rsp], 0
	je	$LN84@stbsp__rai
; Line 1679
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$57[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1680
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$44[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$45[rsp], xmm0
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$20[rsp], 0
	jmp	SHORT $LN52@stbsp__rai
$LN50@stbsp__rai:
	mov	eax, DWORD PTR cn$20[rsp]
	inc	eax
	mov	DWORD PTR cn$20[rsp], eax
$LN52@stbsp__rai:
	cmp	DWORD PTR cn$20[rsp], 8
	jge	SHORT $LN51@stbsp__rai
	movsxd	rax, DWORD PTR cn$20[rsp]
	movsxd	rcx, DWORD PTR cn$20[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$34[rsp+rcx], al
	jmp	SHORT $LN50@stbsp__rai
$LN51@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$21[rsp], 0
	jmp	SHORT $LN55@stbsp__rai
$LN53@stbsp__rai:
	mov	eax, DWORD PTR cn$21[rsp]
	inc	eax
	mov	DWORD PTR cn$21[rsp], eax
$LN55@stbsp__rai:
	cmp	DWORD PTR cn$21[rsp], 8
	jge	SHORT $LN54@stbsp__rai
	movsxd	rax, DWORD PTR cn$21[rsp]
	movsxd	rcx, DWORD PTR cn$21[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR ahi$44[rsp+rcx], al
	jmp	SHORT $LN53@stbsp__rai
$LN54@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$44[rsp]
	movsd	QWORD PTR alo$58[rsp], xmm0
	mov	DWORD PTR cn$22[rsp], 0
	jmp	SHORT $LN58@stbsp__rai
$LN56@stbsp__rai:
	mov	eax, DWORD PTR cn$22[rsp]
	inc	eax
	mov	DWORD PTR cn$22[rsp], eax
$LN58@stbsp__rai:
	cmp	DWORD PTR cn$22[rsp], 8
	jge	SHORT $LN57@stbsp__rai
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$22[rsp]
	movsxd	rdx, DWORD PTR cn$22[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$34[rsp+rdx], al
	jmp	SHORT $LN56@stbsp__rai
$LN57@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$23[rsp], 0
	jmp	SHORT $LN61@stbsp__rai
$LN59@stbsp__rai:
	mov	eax, DWORD PTR cn$23[rsp]
	inc	eax
	mov	DWORD PTR cn$23[rsp], eax
$LN61@stbsp__rai:
	cmp	DWORD PTR cn$23[rsp], 8
	jge	SHORT $LN60@stbsp__rai
	movsxd	rax, DWORD PTR cn$23[rsp]
	movsxd	rcx, DWORD PTR cn$23[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR bhi$45[rsp+rcx], al
	jmp	SHORT $LN59@stbsp__rai
$LN60@stbsp__rai:
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$45[rsp]
	movsd	QWORD PTR blo$59[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$44[rsp]
	mulsd	xmm0, QWORD PTR bhi$45[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$44[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR bhi$45[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1681
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	mulsd	xmm0, QWORD PTR pl$[rsp]
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1682
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1683
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN84@stbsp__rai:
$LN82@stbsp__rai:
; Line 1686
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN85@stbsp__rai
; Line 1687
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$60[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1688
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1689
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$46[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$47[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$24[rsp], 0
	jmp	SHORT $LN64@stbsp__rai
$LN62@stbsp__rai:
	mov	eax, DWORD PTR cn$24[rsp]
	inc	eax
	mov	DWORD PTR cn$24[rsp], eax
$LN64@stbsp__rai:
	cmp	DWORD PTR cn$24[rsp], 8
	jge	SHORT $LN63@stbsp__rai
	movsxd	rax, DWORD PTR cn$24[rsp]
	movsxd	rcx, DWORD PTR cn$24[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$35[rsp+rcx], al
	jmp	SHORT $LN62@stbsp__rai
$LN63@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$25[rsp], 0
	jmp	SHORT $LN67@stbsp__rai
$LN65@stbsp__rai:
	mov	eax, DWORD PTR cn$25[rsp]
	inc	eax
	mov	DWORD PTR cn$25[rsp], eax
$LN67@stbsp__rai:
	cmp	DWORD PTR cn$25[rsp], 8
	jge	SHORT $LN66@stbsp__rai
	movsxd	rax, DWORD PTR cn$25[rsp]
	movsxd	rcx, DWORD PTR cn$25[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR ahi$46[rsp+rcx], al
	jmp	SHORT $LN65@stbsp__rai
$LN66@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$46[rsp]
	movsd	QWORD PTR alo$61[rsp], xmm0
	mov	DWORD PTR cn$26[rsp], 0
	jmp	SHORT $LN70@stbsp__rai
$LN68@stbsp__rai:
	mov	eax, DWORD PTR cn$26[rsp]
	inc	eax
	mov	DWORD PTR cn$26[rsp], eax
$LN70@stbsp__rai:
	cmp	DWORD PTR cn$26[rsp], 8
	jge	SHORT $LN69@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$26[rsp]
	movsxd	rdx, DWORD PTR cn$26[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$35[rsp+rdx], al
	jmp	SHORT $LN68@stbsp__rai
$LN69@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$27[rsp], 0
	jmp	SHORT $LN73@stbsp__rai
$LN71@stbsp__rai:
	mov	eax, DWORD PTR cn$27[rsp]
	inc	eax
	mov	DWORD PTR cn$27[rsp], eax
$LN73@stbsp__rai:
	cmp	DWORD PTR cn$27[rsp], 8
	jge	SHORT $LN72@stbsp__rai
	movsxd	rax, DWORD PTR cn$27[rsp]
	movsxd	rcx, DWORD PTR cn$27[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR bhi$47[rsp+rcx], al
	jmp	SHORT $LN71@stbsp__rai
$LN72@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$47[rsp]
	movsd	QWORD PTR blo$62[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$46[rsp]
	mulsd	xmm0, QWORD PTR bhi$47[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$46[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR bhi$47[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1690
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__toperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1691
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1692
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN85@stbsp__rai:
$LN79@stbsp__rai:
$LN75@stbsp__rai:
; Line 1696
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$63[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1697
	mov	rax, QWORD PTR ohi$[rsp]
	movsd	xmm0, QWORD PTR ph$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1698
	mov	rax, QWORD PTR olo$[rsp]
	movsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1699
	add	rsp, 424				; 000001a8H
	ret	0
stbsp__raise_to_power10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
buf$ = 32
user$ = 40
len$ = 48
stbsp__count_clamp_callback PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1422
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1423
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1426
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1427
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
; Line 1428
	add	rsp, 24
	ret	0
stbsp__count_clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
s$1 = 8
d$2 = 16
tv93 = 24
se$3 = 32
buf$ = 64
user$ = 72
len$ = 80
stbsp__clamp_callback PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1394
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1395
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1396
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1398
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN5@stbsp__cla
; Line 1399
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR len$[rsp], eax
$LN5@stbsp__cla:
; Line 1401
	cmp	DWORD PTR len$[rsp], 0
	je	$LN6@stbsp__cla
; Line 1402
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR buf$[rsp], rax
	je	SHORT $LN7@stbsp__cla
; Line 1405
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR d$2[rsp], rax
; Line 1406
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR s$1[rsp], rax
; Line 1407
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR se$3[rsp], rax
$LN4@stbsp__cla:
; Line 1409
	mov	rax, QWORD PTR d$2[rsp]
	mov	rcx, QWORD PTR s$1[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR d$2[rsp]
	inc	rax
	mov	QWORD PTR d$2[rsp], rax
	mov	rax, QWORD PTR s$1[rsp]
	inc	rax
	mov	QWORD PTR s$1[rsp], rax
; Line 1410
	mov	rax, QWORD PTR se$3[rsp]
	cmp	QWORD PTR s$1[rsp], rax
	jb	SHORT $LN4@stbsp__cla
$LN7@stbsp__cla:
; Line 1412
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1413
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN6@stbsp__cla:
; Line 1416
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jg	SHORT $LN8@stbsp__cla
; Line 1417
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	jmp	SHORT $LN1@stbsp__cla
$LN8@stbsp__cla:
; Line 1418
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 512			; 00000200H
	jl	SHORT $LN10@stbsp__cla
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv93[rsp], rax
	jmp	SHORT $LN11@stbsp__cla
$LN10@stbsp__cla:
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	mov	QWORD PTR tv93[rsp], rax
$LN11@stbsp__cla:
	mov	rax, QWORD PTR tv93[rsp]
$LN1@stbsp__cla:
; Line 1419
	add	rsp, 56					; 00000038H
	ret	0
stbsp__clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 0
sn$ = 8
s$ = 32
limit$ = 40
stbsp__strlen_limited PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 310
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 311
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR sn$[rsp], rax
$LN2@stbsp__str:
; Line 315
	mov	rax, QWORD PTR sn$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN9@stbsp__str
; Line 316
	jmp	SHORT $LN3@stbsp__str
$LN9@stbsp__str:
; Line 318
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN11@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN10@stbsp__str
$LN11@stbsp__str:
; Line 319
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	jmp	$LN1@stbsp__str
$LN10@stbsp__str:
; Line 321
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 322
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 323
	jmp	SHORT $LN2@stbsp__str
$LN3@stbsp__str:
$LN5@stbsp__str:
; Line 330
	cmp	DWORD PTR limit$[rsp], 4
	jb	SHORT $LN6@stbsp__str
; Line 331
	mov	rax, QWORD PTR sn$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$1[rsp], eax
; Line 333
	mov	eax, DWORD PTR v$1[rsp]
	sub	eax, 16843009				; 01010101H
	mov	ecx, DWORD PTR v$1[rsp]
	not	ecx
	and	eax, ecx
	and	eax, -2139062144			; 80808080H
	test	eax, eax
	je	SHORT $LN12@stbsp__str
; Line 334
	jmp	SHORT $LN6@stbsp__str
$LN12@stbsp__str:
; Line 336
	mov	rax, QWORD PTR sn$[rsp]
	add	rax, 4
	mov	QWORD PTR sn$[rsp], rax
; Line 337
	mov	eax, DWORD PTR limit$[rsp]
	sub	eax, 4
	mov	DWORD PTR limit$[rsp], eax
; Line 338
	jmp	SHORT $LN5@stbsp__str
$LN6@stbsp__str:
$LN7@stbsp__str:
; Line 341
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN8@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN8@stbsp__str
; Line 342
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 343
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 344
	jmp	SHORT $LN7@stbsp__str
$LN8@stbsp__str:
; Line 346
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@stbsp__str:
; Line 347
	add	rsp, 24
	ret	0
stbsp__strlen_limited ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$ = 8
sign$ = 16
stbsp__lead_sign PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 295
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
; Line 296
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 297
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN2@stbsp__lea
; Line 298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 299
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 45			; 0000002dH
	jmp	SHORT $LN3@stbsp__lea
$LN2@stbsp__lea:
; Line 300
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN4@stbsp__lea
; Line 301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 302
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H
	jmp	SHORT $LN5@stbsp__lea
$LN4@stbsp__lea:
; Line 303
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN6@stbsp__lea
; Line 304
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 305
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 43			; 0000002bH
$LN6@stbsp__lea:
$LN5@stbsp__lea:
$LN3@stbsp__lea:
; Line 307
	ret	0
stbsp__lead_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cn$1 = 0
b$ = 8
d$ = 16
bits$ = 48
expo$ = 56
value$ = 64
stbsp__real_to_parts PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1492
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1494
	mov	QWORD PTR b$[rsp], 0
; Line 1497
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1499
	mov	DWORD PTR cn$1[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$1[rsp]
	inc	eax
	mov	DWORD PTR cn$1[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$1[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$1[rsp]
	movsxd	rcx, DWORD PTR cn$1[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR b$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1501
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR b$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR bits$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1502
	mov	rax, QWORD PTR b$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	sub	rax, 1023				; 000003ffH
	mov	rcx, QWORD PTR expo$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1504
	mov	rax, QWORD PTR b$[rsp]
	shr	rax, 63					; 0000003fH
; Line 1505
	add	rsp, 40					; 00000028H
	ret	0
stbsp__real_to_parts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bits$ = 32
tens$ = 40
e$ = 44
dg$1 = 48
cn$2 = 52
expo$ = 56
n$3 = 60
n$4 = 64
ng$ = 68
tv131 = 72
tv157 = 76
d$ = 80
ph$5 = 88
ahi$6 = 96
v$7 = 104
tv82 = 112
vh$8 = 120
t$9 = 128
r$10 = 136
alo$11 = 144
pl$12 = 152
o$13 = 160
start$ = 192
len$ = 200
out$ = 208
decimal_pos$ = 216
value$ = 224
frac_digits$ = 232
stbsp__real_to_str PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1706
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
; Line 1708
	mov	QWORD PTR bits$[rsp], 0
; Line 1711
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1712
	mov	DWORD PTR cn$2[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$2[rsp]
	inc	eax
	mov	DWORD PTR cn$2[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$2[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$2[rsp]
	movsxd	rcx, DWORD PTR cn$2[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bits$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1713
	mov	rax, QWORD PTR bits$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	mov	DWORD PTR expo$[rsp], eax
; Line 1714
	mov	rax, QWORD PTR bits$[rsp]
	shr	rax, 63					; 0000003fH
	mov	DWORD PTR ng$[rsp], eax
; Line 1715
	cmp	DWORD PTR ng$[rsp], 0
	je	SHORT $LN21@stbsp__rea
; Line 1716
	movsd	xmm0, QWORD PTR d$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR d$[rsp], xmm0
$LN21@stbsp__rea:
; Line 1718
	cmp	DWORD PTR expo$[rsp], 2047		; 000007ffH
	jne	SHORT $LN22@stbsp__rea
; Line 1720
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN43@stbsp__rea
	lea	rax, OFFSET FLAT:$SG45969
	mov	QWORD PTR tv82[rsp], rax
	jmp	SHORT $LN44@stbsp__rea
$LN43@stbsp__rea:
	lea	rax, OFFSET FLAT:$SG45970
	mov	QWORD PTR tv82[rsp], rax
$LN44@stbsp__rea:
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR tv82[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1721
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 28672			; 00007000H
; Line 1722
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 3
; Line 1723
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN22@stbsp__rea:
; Line 1726
	cmp	DWORD PTR expo$[rsp], 0
	jne	$LN23@stbsp__rea
; Line 1728
	mov	rax, QWORD PTR bits$[rsp]
	shl	rax, 1
	test	rax, rax
	jne	SHORT $LN24@stbsp__rea
; Line 1730
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1731
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1732
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 48			; 00000030H
; Line 1733
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1734
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN24@stbsp__rea:
; Line 1738
	mov	rax, 2251799813685248			; 0008000000000000H
	mov	QWORD PTR v$7[rsp], rax
$LN5@stbsp__rea:
; Line 1739
	mov	rax, QWORD PTR v$7[rsp]
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN6@stbsp__rea
; Line 1740
	mov	eax, DWORD PTR expo$[rsp]
	dec	eax
	mov	DWORD PTR expo$[rsp], eax
; Line 1741
	mov	rax, QWORD PTR v$7[rsp]
	sar	rax, 1
	mov	QWORD PTR v$7[rsp], rax
; Line 1742
	jmp	SHORT $LN5@stbsp__rea
$LN6@stbsp__rea:
$LN23@stbsp__rea:
; Line 1751
	mov	eax, DWORD PTR expo$[rsp]
	sub	eax, 1023				; 000003ffH
	mov	DWORD PTR tens$[rsp], eax
; Line 1752
	cmp	DWORD PTR tens$[rsp], 0
	jge	SHORT $LN45@stbsp__rea
	imul	eax, DWORD PTR tens$[rsp], 617		; 00000269H
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN46@stbsp__rea
$LN45@stbsp__rea:
	imul	eax, DWORD PTR tens$[rsp], 1233		; 000004d1H
	cdq
	and	edx, 4095				; 00000fffH
	add	eax, edx
	sar	eax, 12
	inc	eax
	mov	DWORD PTR tv131[rsp], eax
$LN46@stbsp__rea:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR tens$[rsp], eax
; Line 1755
	mov	eax, 18
	sub	eax, DWORD PTR tens$[rsp]
	mov	r9d, eax
	movsd	xmm2, QWORD PTR d$[rsp]
	lea	rdx, QWORD PTR pl$12[rsp]
	lea	rcx, QWORD PTR ph$5[rsp]
	call	stbsp__raise_to_power10
; Line 1758
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$6[rsp], xmm0
	cvttsd2si rax, QWORD PTR ph$5[rsp]
	mov	QWORD PTR bits$[rsp], rax
	cvtsi2sd xmm0, QWORD PTR bits$[rsp]
	movsd	QWORD PTR vh$8[rsp], xmm0
	movsd	xmm0, QWORD PTR ph$5[rsp]
	subsd	xmm0, QWORD PTR vh$8[rsp]
	movsd	QWORD PTR ahi$6[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR ph$5[rsp]
	movsd	QWORD PTR t$9[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR t$9[rsp]
	movsd	xmm1, QWORD PTR ph$5[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR vh$8[rsp]
	addsd	xmm1, QWORD PTR t$9[rsp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR alo$11[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	addsd	xmm0, QWORD PTR alo$11[rsp]
	addsd	xmm0, QWORD PTR pl$12[rsp]
	cvttsd2si rax, xmm0
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1761
	mov	rax, 1000000000000000000		; 0de0b6b3a7640000H
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN25@stbsp__rea
; Line 1762
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN25@stbsp__rea:
; Line 1766
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, -2147483648			; 80000000H
	test	eax, eax
	je	SHORT $LN47@stbsp__rea
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	mov	DWORD PTR tv157[rsp], eax
	jmp	SHORT $LN48@stbsp__rea
$LN47@stbsp__rea:
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv157[rsp], eax
$LN48@stbsp__rea:
	mov	eax, DWORD PTR tv157[rsp]
	mov	DWORD PTR frac_digits$[rsp], eax
; Line 1767
	cmp	DWORD PTR frac_digits$[rsp], 24
	jae	$LN26@stbsp__rea
; Line 1768
	mov	DWORD PTR dg$1[rsp], 1
; Line 1769
	mov	eax, 8
	imul	rax, rax, 9
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN27@stbsp__rea
; Line 1770
	mov	DWORD PTR dg$1[rsp], 10
$LN27@stbsp__rea:
$LN7@stbsp__rea:
; Line 1771
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN8@stbsp__rea
; Line 1772
	mov	eax, DWORD PTR dg$1[rsp]
	inc	eax
	mov	DWORD PTR dg$1[rsp], eax
; Line 1773
	cmp	DWORD PTR dg$1[rsp], 20
	jne	SHORT $LN28@stbsp__rea
; Line 1774
	jmp	$LN29@stbsp__rea
	jmp	$noround$49
$LN28@stbsp__rea:
; Line 1775
	jmp	SHORT $LN7@stbsp__rea
$LN8@stbsp__rea:
; Line 1776
	mov	eax, DWORD PTR dg$1[rsp]
	cmp	DWORD PTR frac_digits$[rsp], eax
	jae	$LN30@stbsp__rea
; Line 1779
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR dg$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 1780
	cmp	DWORD PTR e$[rsp], 24
	jb	SHORT $LN31@stbsp__rea
; Line 1781
	jmp	SHORT $LN32@stbsp__rea
	jmp	SHORT $noround$49
$LN31@stbsp__rea:
; Line 1782
	movsxd	rax, DWORD PTR e$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR r$10[rsp], rax
; Line 1783
	xor	edx, edx
	mov	rax, QWORD PTR r$10[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1784
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN33@stbsp__rea
; Line 1785
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN33@stbsp__rea:
; Line 1786
	xor	edx, edx
	mov	rax, QWORD PTR bits$[rsp]
	div	QWORD PTR r$10[rsp]
	mov	QWORD PTR bits$[rsp], rax
$LN30@stbsp__rea:
$LN29@stbsp__rea:
$LN32@stbsp__rea:
$noround$49:
$LN26@stbsp__rea:
; Line 1792
	cmp	QWORD PTR bits$[rsp], 0
	je	SHORT $LN34@stbsp__rea
$LN9@stbsp__rea:
; Line 1795
	mov	eax, -1
	cmp	QWORD PTR bits$[rsp], rax
	jg	SHORT $LN35@stbsp__rea
; Line 1796
	jmp	SHORT $LN10@stbsp__rea
$LN35@stbsp__rea:
; Line 1797
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	rax, rdx
	test	rax, rax
	je	SHORT $LN36@stbsp__rea
; Line 1798
	jmp	SHORT $LN37@stbsp__rea
	jmp	SHORT $donez$50
$LN36@stbsp__rea:
; Line 1799
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1800
	jmp	SHORT $LN9@stbsp__rea
$LN10@stbsp__rea:
; Line 1801
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$4[rsp], eax
$LN12@stbsp__rea:
; Line 1802
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	eax, edx
	test	eax, eax
	jne	SHORT $LN13@stbsp__rea
; Line 1803
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR n$4[rsp], eax
	jmp	SHORT $LN12@stbsp__rea
$LN13@stbsp__rea:
; Line 1804
	mov	eax, DWORD PTR n$4[rsp]
	mov	QWORD PTR bits$[rsp], rax
$LN37@stbsp__rea:
$donez$50:
$LN34@stbsp__rea:
; Line 1809
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR out$[rsp], rax
; Line 1810
	mov	DWORD PTR e$[rsp], 0
$LN14@stbsp__rea:
; Line 1813
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
	mov	QWORD PTR o$13[rsp], rax
; Line 1815
	cmp	QWORD PTR bits$[rsp], 100000000		; 05f5e100H
	jl	SHORT $LN38@stbsp__rea
; Line 1816
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1817
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1818
	jmp	SHORT $LN39@stbsp__rea
$LN38@stbsp__rea:
; Line 1819
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1820
	mov	QWORD PTR bits$[rsp], 0
$LN39@stbsp__rea:
$LN17@stbsp__rea:
; Line 1822
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN18@stbsp__rea
; Line 1823
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 2
	mov	QWORD PTR out$[rsp], rax
; Line 1824
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR out$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1825
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1826
	mov	eax, DWORD PTR e$[rsp]
	add	eax, 2
	mov	DWORD PTR e$[rsp], eax
; Line 1827
	jmp	SHORT $LN17@stbsp__rea
$LN18@stbsp__rea:
; Line 1828
	cmp	QWORD PTR bits$[rsp], 0
	jne	SHORT $LN40@stbsp__rea
; Line 1829
	cmp	DWORD PTR e$[rsp], 0
	je	SHORT $LN41@stbsp__rea
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN41@stbsp__rea
; Line 1830
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 1831
	mov	eax, DWORD PTR e$[rsp]
	dec	eax
	mov	DWORD PTR e$[rsp], eax
$LN41@stbsp__rea:
; Line 1833
	jmp	SHORT $LN15@stbsp__rea
$LN40@stbsp__rea:
$LN19@stbsp__rea:
; Line 1835
	mov	rax, QWORD PTR o$13[rsp]
	cmp	QWORD PTR out$[rsp], rax
	je	SHORT $LN20@stbsp__rea
; Line 1836
	mov	rax, QWORD PTR out$[rsp]
	dec	rax
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1837
	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax
; Line 1838
	jmp	SHORT $LN19@stbsp__rea
$LN20@stbsp__rea:
; Line 1839
	jmp	$LN14@stbsp__rea
$LN15@stbsp__rea:
; Line 1841
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1842
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1843
	mov	rax, QWORD PTR len$[rsp]
	mov	ecx, DWORD PTR e$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1844
	mov	eax, DWORD PTR ng$[rsp]
$LN1@stbsp__rea:
; Line 1845
	add	rsp, 184				; 000000b8H
	ret	0
stbsp__real_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pcomma$ = 8
pperiod$ = 16
stbsp_set_separators PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 275
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
; Line 276
	movzx	eax, BYTE PTR pperiod$[rsp]
	mov	BYTE PTR stbsp__period, al
; Line 277
	movzx	eax, BYTE PTR pcomma$[rsp]
	mov	BYTE PTR stbsp__comma, al
; Line 278
	ret	0
stbsp_set_separators ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$1 = 48
pr$2 = 52
n$3 = 56
s$4 = 64
l$5 = 72
bf$ = 80
dp$6 = 88
idx$7 = 92
f$ = 96
cs$8 = 104
i$9 = 108
tlen$ = 112
fw$10 = 116
n64$11 = 120
i$12 = 128
sn$13 = 136
i$14 = 144
i$15 = 148
tz$16 = 152
i$17 = 156
i$18 = 160
i$19 = 164
fv$20 = 168
h$21 = 176
tv228 = 184
tv141 = 188
v$22 = 192
tv275 = 196
len$23 = 200
c$24 = 204
len$25 = 208
len$26 = 212
len$27 = 216
len$28 = 220
len$29 = 224
len$30 = 228
len$31 = 232
len$32 = 236
i$33 = 240
len$34 = 244
tv438 = 248
tv440 = 252
tv503 = 256
tv506 = 260
tv566 = 264
tv642 = 268
tv818 = 272
tv886 = 276
tv979 = 280
lg$35 = 284
lg$36 = 288
tv1058 = 292
lg$37 = 296
tv439 = 300
lg$38 = 304
lg$39 = 308
lg$40 = 312
lg$41 = 316
c$42 = 320
lg$43 = 324
tv176 = 328
tv208 = 332
tv286 = 336
tv303 = 340
tv345 = 344
o$44 = 352
divisor$45 = 360
tv1941 = 368
tv922 = 372
tv945 = 376
i64$46 = 384
tv1082 = 392
tv1081 = 396
tv1277 = 400
tv418 = 404
$T47 = 408
$T48 = 416
tv282 = 424
$T49 = 432
$T50 = 440
$T51 = 448
$T52 = 456
tv317 = 464
tv325 = 472
tv332 = 480
tv462 = 488
tv469 = 496
tv512 = 504
tv519 = 512
$T53 = 520
tv584 = 528
$T54 = 536
tv760 = 544
$T55 = 552
$T56 = 560
tv789 = 568
$T57 = 576
tv811 = 584
$T58 = 592
$T59 = 600
tv872 = 608
$T60 = 616
d$61 = 624
tv1581 = 632
lead$62 = 640
tail$63 = 648
num$64 = 656
__$ArrayPad$ = 1184
callback$ = 1216
user$ = 1224
buf$ = 1232
fmt$ = 1240
va$ = 1248
stbsp_vsprintfcb PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 350
$LN461:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1208				; 000004b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 355
	mov	DWORD PTR tlen$[rsp], 0
; Line 357
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
; Line 358
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR f$[rsp], rax
$LN2@stbsp_vspr:
$LN5@stbsp_vspr:
$LN8@stbsp_vspr:
; Line 393
	mov	rax, QWORD PTR f$[rsp]
	and	rax, 3
	test	rax, rax
	je	$LN9@stbsp_vspr
$schk1$462:
; Line 395
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN126@stbsp_vspr
; Line 396
	jmp	$LN127@stbsp_vspr
	jmp	$scandd$463
$LN126@stbsp_vspr:
$schk2$464:
; Line 398
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN128@stbsp_vspr
; Line 399
	jmp	$LN129@stbsp_vspr
	jmp	$endfmt$465
$LN128@stbsp_vspr:
; Line 400
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN130@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$32[rsp], eax
	mov	eax, DWORD PTR len$32[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN131@stbsp_vspr
	mov	eax, DWORD PTR len$32[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$32[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN132@stbsp_vspr
	jmp	$LN133@stbsp_vspr
	jmp	$done$466
$LN132@stbsp_vspr:
$LN131@stbsp_vspr:
$LN130@stbsp_vspr:
; Line 401
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bf$[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 402
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 403
	jmp	$LN8@stbsp_vspr
$LN9@stbsp_vspr:
$LN10@stbsp_vspr:
; Line 409
	mov	rax, QWORD PTR f$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$22[rsp], eax
; Line 410
	mov	eax, DWORD PTR v$22[rsp]
	not	eax
	and	eax, -2139062144			; 80808080H
	mov	DWORD PTR c$42[rsp], eax
; Line 411
	mov	eax, DWORD PTR v$22[rsp]
	xor	eax, 623191333				; 25252525H
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$42[rsp]
	test	eax, eax
	je	SHORT $LN134@stbsp_vspr
; Line 412
	jmp	$schk1$462
$LN134@stbsp_vspr:
; Line 413
	mov	eax, DWORD PTR v$22[rsp]
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$42[rsp]
	test	eax, eax
	je	SHORT $LN135@stbsp_vspr
; Line 414
	jmp	$schk2$464
$LN135@stbsp_vspr:
; Line 415
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN136@stbsp_vspr
; Line 416
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 4
	jge	SHORT $LN137@stbsp_vspr
; Line 417
	jmp	$schk1$462
$LN137@stbsp_vspr:
$LN136@stbsp_vspr:
; Line 427
	mov	rax, QWORD PTR bf$[rsp]
	mov	ecx, DWORD PTR v$22[rsp]
	mov	DWORD PTR [rax], ecx
; Line 429
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 430
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 4
	mov	QWORD PTR f$[rsp], rax
; Line 431
	jmp	$LN10@stbsp_vspr
; Line 432
	jmp	$LN5@stbsp_vspr
$LN127@stbsp_vspr:
$scandd$463:
; Line 435
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 438
	mov	DWORD PTR fw$10[rsp], 0
; Line 439
	mov	DWORD PTR pr$2[rsp], -1
; Line 440
	mov	DWORD PTR fl$1[rsp], 0
; Line 441
	mov	DWORD PTR tz$16[rsp], 0
$LN13@stbsp_vspr:
; Line 445
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv141[rsp], eax
	mov	eax, DWORD PTR tv141[rsp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR tv141[rsp], eax
	cmp	DWORD PTR tv141[rsp], 63		; 0000003fH
	ja	$LN151@stbsp_vspr
	movsxd	rax, DWORD PTR tv141[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN459@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN460@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN138@stbsp_vspr:
; Line 448
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 1
	mov	DWORD PTR fl$1[rsp], eax
; Line 449
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 450
	jmp	SHORT $LN13@stbsp_vspr
$LN139@stbsp_vspr:
; Line 453
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 2
	mov	DWORD PTR fl$1[rsp], eax
; Line 454
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 455
	jmp	$LN13@stbsp_vspr
$LN140@stbsp_vspr:
; Line 458
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 4
	mov	DWORD PTR fl$1[rsp], eax
; Line 459
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 460
	jmp	$LN13@stbsp_vspr
$LN141@stbsp_vspr:
; Line 463
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
; Line 464
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 465
	jmp	$LN13@stbsp_vspr
$LN142@stbsp_vspr:
; Line 468
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR fl$1[rsp], eax
; Line 469
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 470
	jmp	$LN13@stbsp_vspr
$LN143@stbsp_vspr:
; Line 473
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN144@stbsp_vspr
; Line 474
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN146@stbsp_vspr
; Line 475
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 12
	mov	DWORD PTR fl$1[rsp], eax
; Line 476
	jmp	SHORT $LN147@stbsp_vspr
$LN146@stbsp_vspr:
; Line 477
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 11
	mov	DWORD PTR fl$1[rsp], eax
$LN147@stbsp_vspr:
; Line 479
	jmp	SHORT $LN145@stbsp_vspr
$LN144@stbsp_vspr:
; Line 480
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
$LN145@stbsp_vspr:
; Line 482
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 483
	jmp	$LN13@stbsp_vspr
$LN148@stbsp_vspr:
; Line 486
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 10
	mov	DWORD PTR fl$1[rsp], eax
; Line 487
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 488
	jmp	$LN13@stbsp_vspr
$LN149@stbsp_vspr:
; Line 491
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 16
	mov	DWORD PTR fl$1[rsp], eax
; Line 492
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 493
	jmp	SHORT $LN150@stbsp_vspr
	jmp	SHORT $flags_done$467
$LN151@stbsp_vspr:
; Line 494
	jmp	SHORT $LN152@stbsp_vspr
	jmp	SHORT $flags_done$467
; Line 496
	jmp	$LN13@stbsp_vspr
$LN150@stbsp_vspr:
$LN152@stbsp_vspr:
$flags_done$467:
; Line 500
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN153@stbsp_vspr
; Line 501
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN369@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv176[rsp], eax
	jmp	SHORT $LN370@stbsp_vspr
$LN369@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv176[rsp], eax
$LN370@stbsp_vspr:
	mov	eax, DWORD PTR tv176[rsp]
	mov	DWORD PTR fw$10[rsp], eax
; Line 502
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 503
	jmp	SHORT $LN154@stbsp_vspr
$LN153@stbsp_vspr:
$LN18@stbsp_vspr:
; Line 504
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN19@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN19@stbsp_vspr
; Line 505
	imul	eax, DWORD PTR fw$10[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR fw$10[rsp], eax
; Line 506
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 507
	jmp	SHORT $LN18@stbsp_vspr
$LN19@stbsp_vspr:
$LN154@stbsp_vspr:
; Line 510
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN155@stbsp_vspr
; Line 511
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 512
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN156@stbsp_vspr
; Line 513
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN371@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv208[rsp], eax
	jmp	SHORT $LN372@stbsp_vspr
$LN371@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv208[rsp], eax
$LN372@stbsp_vspr:
	mov	eax, DWORD PTR tv208[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 514
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 515
	jmp	SHORT $LN157@stbsp_vspr
$LN156@stbsp_vspr:
; Line 516
	mov	DWORD PTR pr$2[rsp], 0
$LN20@stbsp_vspr:
; Line 517
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN21@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN21@stbsp_vspr
; Line 518
	imul	eax, DWORD PTR pr$2[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR pr$2[rsp], eax
; Line 519
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 520
	jmp	SHORT $LN20@stbsp_vspr
$LN21@stbsp_vspr:
$LN157@stbsp_vspr:
$LN155@stbsp_vspr:
; Line 525
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv228[rsp], eax
	mov	eax, DWORD PTR tv228[rsp]
	sub	eax, 73					; 00000049H
	mov	DWORD PTR tv228[rsp], eax
	cmp	DWORD PTR tv228[rsp], 49		; 00000031H
	ja	$LN170@stbsp_vspr
	movsxd	rax, DWORD PTR tv228[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN457@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN458@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN158@stbsp_vspr:
; Line 528
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 9
	mov	DWORD PTR fl$1[rsp], eax
; Line 529
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 530
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 104				; 00000068H
	jne	SHORT $LN159@stbsp_vspr
; Line 531
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN159@stbsp_vspr:
; Line 532
	jmp	$LN22@stbsp_vspr
$LN160@stbsp_vspr:
; Line 535
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fl$1[rsp], eax
; Line 536
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 537
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN161@stbsp_vspr
; Line 538
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 539
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN161@stbsp_vspr:
; Line 541
	jmp	$LN22@stbsp_vspr
$LN162@stbsp_vspr:
; Line 544
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 545
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 546
	jmp	$LN22@stbsp_vspr
$LN163@stbsp_vspr:
; Line 549
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 550
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 551
	jmp	$LN22@stbsp_vspr
$LN164@stbsp_vspr:
; Line 553
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 554
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 555
	jmp	$LN22@stbsp_vspr
$LN165@stbsp_vspr:
; Line 558
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN166@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 52					; 00000034H
	jne	SHORT $LN166@stbsp_vspr
; Line 559
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 560
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
	jmp	SHORT $LN167@stbsp_vspr
$LN166@stbsp_vspr:
; Line 561
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 51					; 00000033H
	jne	SHORT $LN168@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 50					; 00000032H
	jne	SHORT $LN168@stbsp_vspr
; Line 562
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
; Line 563
	jmp	SHORT $LN169@stbsp_vspr
$LN168@stbsp_vspr:
; Line 564
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 565
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN169@stbsp_vspr:
$LN167@stbsp_vspr:
$LN170@stbsp_vspr:
$LN22@stbsp_vspr:
; Line 572
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv275[rsp], eax
	mov	eax, DWORD PTR tv275[rsp]
	sub	eax, 65					; 00000041H
	mov	DWORD PTR tv275[rsp], eax
	cmp	DWORD PTR tv275[rsp], 55		; 00000037H
	ja	$LN362@stbsp_vspr
	movsxd	rax, DWORD PTR tv275[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN455@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN456@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN171@stbsp_vspr:
; Line 589
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN373@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv282[rsp], rax
	jmp	SHORT $LN374@stbsp_vspr
$LN373@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv282[rsp], rax
$LN374@stbsp_vspr:
	mov	rax, QWORD PTR tv282[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 590
	cmp	QWORD PTR s$4[rsp], 0
	jne	SHORT $LN172@stbsp_vspr
; Line 591
	lea	rax, OFFSET FLAT:$SG45354
	mov	QWORD PTR s$4[rsp], rax
$LN172@stbsp_vspr:
; Line 594
	cmp	DWORD PTR pr$2[rsp], 0
	jl	SHORT $LN375@stbsp_vspr
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv286[rsp], eax
	jmp	SHORT $LN376@stbsp_vspr
$LN375@stbsp_vspr:
	mov	DWORD PTR tv286[rsp], -1		; ffffffffH
$LN376@stbsp_vspr:
	mov	edx, DWORD PTR tv286[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	call	stbsp__strlen_limited
	mov	DWORD PTR l$5[rsp], eax
; Line 595
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T49[rsp], rax
	cmp	QWORD PTR $T49[rsp], 8
	jae	SHORT $LN377@stbsp_vspr
	jmp	SHORT $LN378@stbsp_vspr
$LN377@stbsp_vspr:
	call	__report_rangecheckfailure
$LN378@stbsp_vspr:
	mov	rax, QWORD PTR $T49[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 596
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T50[rsp], rax
	cmp	QWORD PTR $T50[rsp], 8
	jae	SHORT $LN379@stbsp_vspr
	jmp	SHORT $LN380@stbsp_vspr
$LN379@stbsp_vspr:
	call	__report_rangecheckfailure
$LN380@stbsp_vspr:
	mov	rax, QWORD PTR $T50[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 597
	mov	DWORD PTR pr$2[rsp], 0
; Line 598
	mov	DWORD PTR dp$6[rsp], 0
; Line 599
	mov	DWORD PTR cs$8[rsp], 0
; Line 601
	jmp	$LN173@stbsp_vspr
	jmp	$scopy$468
$LN174@stbsp_vspr:
; Line 605
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 606
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN381@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv303[rsp], eax
	jmp	SHORT $LN382@stbsp_vspr
$LN381@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv303[rsp], eax
$LN382@stbsp_vspr:
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR tv303[rsp]
	mov	BYTE PTR [rax], cl
; Line 607
	mov	DWORD PTR l$5[rsp], 1
; Line 608
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T51[rsp], rax
	cmp	QWORD PTR $T51[rsp], 8
	jae	SHORT $LN383@stbsp_vspr
	jmp	SHORT $LN384@stbsp_vspr
$LN383@stbsp_vspr:
	call	__report_rangecheckfailure
$LN384@stbsp_vspr:
	mov	rax, QWORD PTR $T51[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 609
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T52[rsp], rax
	cmp	QWORD PTR $T52[rsp], 8
	jae	SHORT $LN385@stbsp_vspr
	jmp	SHORT $LN386@stbsp_vspr
$LN385@stbsp_vspr:
	call	__report_rangecheckfailure
$LN386@stbsp_vspr:
	mov	rax, QWORD PTR $T52[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 610
	mov	DWORD PTR pr$2[rsp], 0
; Line 611
	mov	DWORD PTR dp$6[rsp], 0
; Line 612
	mov	DWORD PTR cs$8[rsp], 0
; Line 613
	jmp	$LN175@stbsp_vspr
	jmp	$scopy$468
$LN176@stbsp_vspr:
; Line 617
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN387@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv317[rsp], rax
	jmp	SHORT $LN388@stbsp_vspr
$LN387@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv317[rsp], rax
$LN388@stbsp_vspr:
	mov	rax, QWORD PTR tv317[rsp]
	mov	QWORD PTR d$61[rsp], rax
; Line 618
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR d$61[rsp]
	mov	DWORD PTR [rcx], eax
; Line 619
	jmp	$LN24@stbsp_vspr
$LN177@stbsp_vspr:
$LN178@stbsp_vspr:
; Line 641
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN389@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv325[rsp], rax
	jmp	SHORT $LN390@stbsp_vspr
$LN389@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv325[rsp], rax
$LN390@stbsp_vspr:
	mov	rax, QWORD PTR tv325[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 642
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN391@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv332[rsp], xmm0
	jmp	SHORT $LN392@stbsp_vspr
$LN391@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv332[rsp], xmm0
$LN392@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv332[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 643
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN179@stbsp_vspr
; Line 644
	mov	DWORD PTR pr$2[rsp], 6
$LN179@stbsp_vspr:
; Line 646
	movsd	xmm2, QWORD PTR fv$20[rsp]
	lea	rdx, QWORD PTR dp$6[rsp]
	lea	rcx, QWORD PTR n64$11[rsp]
	call	stbsp__real_to_parts
	test	eax, eax
	je	SHORT $LN180@stbsp_vspr
; Line 647
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN180@stbsp_vspr:
; Line 649
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 651
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 653
	cmp	DWORD PTR dp$6[rsp], -1023		; fffffffffffffc01H
	jne	SHORT $LN181@stbsp_vspr
; Line 654
	cmp	QWORD PTR n64$11[rsp], 0
	je	SHORT $LN393@stbsp_vspr
	mov	DWORD PTR tv345[rsp], -1022		; fffffffffffffc02H
	jmp	SHORT $LN394@stbsp_vspr
$LN393@stbsp_vspr:
	mov	DWORD PTR tv345[rsp], 0
$LN394@stbsp_vspr:
	mov	eax, DWORD PTR tv345[rsp]
	mov	DWORD PTR dp$6[rsp], eax
	jmp	SHORT $LN182@stbsp_vspr
$LN181@stbsp_vspr:
; Line 656
	mov	rax, 4503599627370496			; 0010000000000000H
	mov	rcx, QWORD PTR n64$11[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN182@stbsp_vspr:
; Line 657
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 8
	mov	QWORD PTR n64$11[rsp], rax
; Line 658
	cmp	DWORD PTR pr$2[rsp], 15
	jge	SHORT $LN183@stbsp_vspr
; Line 659
	mov	eax, DWORD PTR pr$2[rsp]
	shl	eax, 2
	mov	rcx, 576460752303423488			; 0800000000000000H
	mov	QWORD PTR tv1581[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1581[rsp]
	shr	rax, cl
	mov	rcx, QWORD PTR n64$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN183@stbsp_vspr:
; Line 666
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	inc	eax
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 667
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 120		; 00000078H
; Line 668
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
; Line 670
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 671
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 672
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN184@stbsp_vspr
; Line 673
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN184@stbsp_vspr:
; Line 674
	mov	rax, QWORD PTR s$4[rsp]
	mov	QWORD PTR sn$13[rsp], rax
; Line 677
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 678
	cmp	DWORD PTR n$3[rsp], 13
	jbe	SHORT $LN185@stbsp_vspr
; Line 679
	mov	DWORD PTR n$3[rsp], 13
$LN185@stbsp_vspr:
; Line 680
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN186@stbsp_vspr
; Line 681
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN186@stbsp_vspr:
; Line 682
	mov	DWORD PTR pr$2[rsp], 0
$LN26@stbsp_vspr:
; Line 683
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR tv418[rsp], eax
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
	cmp	DWORD PTR tv418[rsp], 0
	je	SHORT $LN27@stbsp_vspr
; Line 684
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 685
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 686
	jmp	SHORT $LN26@stbsp_vspr
$LN27@stbsp_vspr:
; Line 689
	mov	eax, 1
	imul	rax, rax, 17
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 690
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN187@stbsp_vspr
; Line 691
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 692
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 693
	jmp	SHORT $LN188@stbsp_vspr
$LN187@stbsp_vspr:
; Line 694
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN188@stbsp_vspr:
; Line 695
	cmp	DWORD PTR dp$6[rsp], 1000		; 000003e8H
	jl	SHORT $LN399@stbsp_vspr
	mov	DWORD PTR tv440[rsp], 6
	jmp	SHORT $LN400@stbsp_vspr
$LN399@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN397@stbsp_vspr
	mov	DWORD PTR tv439[rsp], 5
	jmp	SHORT $LN398@stbsp_vspr
$LN397@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 10
	jl	SHORT $LN395@stbsp_vspr
	mov	DWORD PTR tv438[rsp], 4
	jmp	SHORT $LN396@stbsp_vspr
$LN395@stbsp_vspr:
	mov	DWORD PTR tv438[rsp], 3
$LN396@stbsp_vspr:
	mov	eax, DWORD PTR tv438[rsp]
	mov	DWORD PTR tv439[rsp], eax
$LN398@stbsp_vspr:
	mov	eax, DWORD PTR tv439[rsp]
	mov	DWORD PTR tv440[rsp], eax
$LN400@stbsp_vspr:
	mov	eax, DWORD PTR tv440[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 696
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN28@stbsp_vspr:
; Line 698
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 699
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN189@stbsp_vspr
; Line 700
	jmp	SHORT $LN29@stbsp_vspr
$LN189@stbsp_vspr:
; Line 701
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 702
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 703
	jmp	SHORT $LN28@stbsp_vspr
$LN29@stbsp_vspr:
; Line 705
	mov	rax, QWORD PTR sn$13[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dp$6[rsp], eax
; Line 706
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 707
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 708
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 709
	jmp	$LN190@stbsp_vspr
	jmp	$scopy$468
$LN191@stbsp_vspr:
$LN192@stbsp_vspr:
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN401@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv462[rsp], rax
	jmp	SHORT $LN402@stbsp_vspr
$LN401@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv462[rsp], rax
$LN402@stbsp_vspr:
	mov	rax, QWORD PTR tv462[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 714
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN403@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv469[rsp], xmm0
	jmp	SHORT $LN404@stbsp_vspr
$LN403@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv469[rsp], xmm0
$LN404@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv469[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 715
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN193@stbsp_vspr
; Line 716
	mov	DWORD PTR pr$2[rsp], 6
	jmp	SHORT $LN194@stbsp_vspr
$LN193@stbsp_vspr:
; Line 717
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN195@stbsp_vspr
; Line 718
	mov	DWORD PTR pr$2[rsp], 1
$LN195@stbsp_vspr:
$LN194@stbsp_vspr:
; Line 720
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN196@stbsp_vspr
; Line 721
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN196@stbsp_vspr:
; Line 724
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 725
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR l$5[rsp], eax
	jbe	SHORT $LN197@stbsp_vspr
; Line 726
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR l$5[rsp], eax
$LN197@stbsp_vspr:
$LN31@stbsp_vspr:
; Line 727
	cmp	DWORD PTR l$5[rsp], 1
	jbe	SHORT $LN32@stbsp_vspr
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN32@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR sn$13[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN32@stbsp_vspr
; Line 728
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
; Line 729
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 730
	jmp	SHORT $LN31@stbsp_vspr
$LN32@stbsp_vspr:
; Line 733
	cmp	DWORD PTR dp$6[rsp], -4
	jle	SHORT $LN199@stbsp_vspr
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jle	SHORT $LN198@stbsp_vspr
$LN199@stbsp_vspr:
; Line 734
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN200@stbsp_vspr
; Line 735
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
	jmp	SHORT $LN201@stbsp_vspr
$LN200@stbsp_vspr:
; Line 736
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN202@stbsp_vspr
; Line 737
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
$LN202@stbsp_vspr:
$LN201@stbsp_vspr:
; Line 738
	jmp	$LN203@stbsp_vspr
	jmp	$doexpfromg$469
$LN198@stbsp_vspr:
; Line 741
	cmp	DWORD PTR dp$6[rsp], 0
	jle	SHORT $LN204@stbsp_vspr
; Line 742
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jge	SHORT $LN405@stbsp_vspr
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv503[rsp], eax
	jmp	SHORT $LN406@stbsp_vspr
$LN405@stbsp_vspr:
	mov	DWORD PTR tv503[rsp], 0
$LN406@stbsp_vspr:
	mov	eax, DWORD PTR tv503[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 743
	jmp	SHORT $LN205@stbsp_vspr
$LN204@stbsp_vspr:
; Line 744
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN407@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv506[rsp], eax
	jmp	SHORT $LN408@stbsp_vspr
$LN407@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv506[rsp], eax
$LN408@stbsp_vspr:
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	add	eax, DWORD PTR tv506[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN205@stbsp_vspr:
; Line 746
	jmp	$LN206@stbsp_vspr
	jmp	$dofloatfromg$470
$LN207@stbsp_vspr:
$LN208@stbsp_vspr:
; Line 750
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN409@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv512[rsp], rax
	jmp	SHORT $LN410@stbsp_vspr
$LN409@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv512[rsp], rax
$LN410@stbsp_vspr:
	mov	rax, QWORD PTR tv512[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 751
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN411@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv519[rsp], xmm0
	jmp	SHORT $LN412@stbsp_vspr
$LN411@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv519[rsp], xmm0
$LN412@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv519[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 752
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN209@stbsp_vspr
; Line 753
	mov	DWORD PTR pr$2[rsp], 6
$LN209@stbsp_vspr:
; Line 755
	mov	eax, DWORD PTR pr$2[rsp]
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN210@stbsp_vspr
; Line 756
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN210@stbsp_vspr:
$LN203@stbsp_vspr:
$doexpfromg$469:
; Line 758
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T53[rsp], rax
	cmp	QWORD PTR $T53[rsp], 8
	jae	SHORT $LN413@stbsp_vspr
	jmp	SHORT $LN414@stbsp_vspr
$LN413@stbsp_vspr:
	call	__report_rangecheckfailure
$LN414@stbsp_vspr:
	mov	rax, QWORD PTR $T53[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 759
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 760
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN211@stbsp_vspr
; Line 761
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 762
	mov	DWORD PTR cs$8[rsp], 0
; Line 763
	mov	DWORD PTR pr$2[rsp], 0
; Line 764
	jmp	$LN212@stbsp_vspr
	jmp	$scopy$468
$LN211@stbsp_vspr:
; Line 766
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 768
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 770
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN213@stbsp_vspr
; Line 771
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN213@stbsp_vspr:
; Line 774
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN214@stbsp_vspr
; Line 775
	mov	eax, DWORD PTR pr$2[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
$LN214@stbsp_vspr:
; Line 776
	mov	DWORD PTR n$3[rsp], 1
	jmp	SHORT $LN35@stbsp_vspr
$LN33@stbsp_vspr:
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
$LN35@stbsp_vspr:
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN34@stbsp_vspr
; Line 777
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	jmp	SHORT $LN33@stbsp_vspr
$LN34@stbsp_vspr:
; Line 779
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 780
	mov	DWORD PTR pr$2[rsp], 0
; Line 782
	mov	eax, 1
	imul	rax, rax, 14
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 783
	mov	eax, DWORD PTR dp$6[rsp]
	dec	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 784
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN215@stbsp_vspr
; Line 785
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 786
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 787
	jmp	SHORT $LN216@stbsp_vspr
$LN215@stbsp_vspr:
; Line 788
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN216@stbsp_vspr:
; Line 792
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN415@stbsp_vspr
	mov	DWORD PTR tv566[rsp], 5
	jmp	SHORT $LN416@stbsp_vspr
$LN415@stbsp_vspr:
	mov	DWORD PTR tv566[rsp], 4
$LN416@stbsp_vspr:
	mov	eax, DWORD PTR tv566[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 794
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN36@stbsp_vspr:
; Line 796
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 797
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN217@stbsp_vspr
; Line 798
	jmp	SHORT $LN37@stbsp_vspr
$LN217@stbsp_vspr:
; Line 799
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 800
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 801
	jmp	SHORT $LN36@stbsp_vspr
$LN37@stbsp_vspr:
; Line 802
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 803
	jmp	$LN218@stbsp_vspr
	jmp	$flt_lead$471
$LN219@stbsp_vspr:
; Line 806
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN417@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv584[rsp], xmm0
	jmp	SHORT $LN418@stbsp_vspr
$LN417@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv584[rsp], xmm0
$LN418@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv584[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
$doafloat$472:
; Line 809
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN220@stbsp_vspr
; Line 811
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
; Line 812
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN221@stbsp_vspr
; Line 813
	movsd	xmm0, QWORD PTR __real@4090000000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
$LN221@stbsp_vspr:
$LN39@stbsp_vspr:
; Line 814
	cmp	DWORD PTR fl$1[rsp], 67108864		; 04000000H
	jae	SHORT $LN40@stbsp_vspr
; Line 815
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	comisd	xmm0, QWORD PTR fv$20[rsp]
	jbe	SHORT $LN222@stbsp_vspr
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR fv$20[rsp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN222@stbsp_vspr
; Line 816
	jmp	SHORT $LN40@stbsp_vspr
$LN222@stbsp_vspr:
; Line 817
	movsd	xmm0, QWORD PTR fv$20[rsp]
	divsd	xmm0, QWORD PTR divisor$45[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 818
	mov	eax, DWORD PTR fl$1[rsp]
	add	eax, 16777216				; 01000000H
	mov	DWORD PTR fl$1[rsp], eax
; Line 819
	jmp	SHORT $LN39@stbsp_vspr
$LN40@stbsp_vspr:
$LN220@stbsp_vspr:
; Line 821
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN223@stbsp_vspr
; Line 822
	mov	DWORD PTR pr$2[rsp], 6
$LN223@stbsp_vspr:
; Line 824
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN224@stbsp_vspr
; Line 825
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN224@stbsp_vspr:
$LN206@stbsp_vspr:
$dofloatfromg$470:
; Line 827
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T54[rsp], rax
	cmp	QWORD PTR $T54[rsp], 8
	jae	SHORT $LN419@stbsp_vspr
	jmp	SHORT $LN420@stbsp_vspr
$LN419@stbsp_vspr:
	call	__report_rangecheckfailure
$LN420@stbsp_vspr:
	mov	rax, QWORD PTR $T54[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 828
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 829
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN225@stbsp_vspr
; Line 830
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 831
	mov	DWORD PTR cs$8[rsp], 0
; Line 832
	mov	DWORD PTR pr$2[rsp], 0
; Line 833
	jmp	$LN226@stbsp_vspr
	jmp	$scopy$468
$LN225@stbsp_vspr:
; Line 835
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 838
	cmp	DWORD PTR dp$6[rsp], 0
	jg	$LN227@stbsp_vspr
; Line 841
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 842
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN229@stbsp_vspr
; Line 843
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN229@stbsp_vspr:
; Line 844
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 845
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jle	SHORT $LN230@stbsp_vspr
; Line 846
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN230@stbsp_vspr:
; Line 847
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN41@stbsp_vspr:
; Line 848
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN42@stbsp_vspr
; Line 849
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN231@stbsp_vspr
; Line 850
	jmp	SHORT $LN42@stbsp_vspr
$LN231@stbsp_vspr:
; Line 851
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 852
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 853
	jmp	SHORT $LN41@stbsp_vspr
$LN42@stbsp_vspr:
$LN43@stbsp_vspr:
; Line 854
	cmp	DWORD PTR i$12[rsp], 4
	jl	SHORT $LN44@stbsp_vspr
; Line 855
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 856
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 857
	mov	eax, DWORD PTR i$12[rsp]
	sub	eax, 4
	mov	DWORD PTR i$12[rsp], eax
; Line 858
	jmp	SHORT $LN43@stbsp_vspr
$LN44@stbsp_vspr:
$LN45@stbsp_vspr:
; Line 859
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN46@stbsp_vspr
; Line 860
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 861
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 862
	jmp	SHORT $LN45@stbsp_vspr
$LN46@stbsp_vspr:
; Line 863
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jle	SHORT $LN232@stbsp_vspr
; Line 864
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN232@stbsp_vspr:
; Line 865
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN47@stbsp_vspr:
; Line 866
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN48@stbsp_vspr
; Line 867
	mov	rax, QWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 868
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 869
	jmp	SHORT $LN47@stbsp_vspr
$LN48@stbsp_vspr:
; Line 870
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 871
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 872
	jmp	$LN228@stbsp_vspr
$LN227@stbsp_vspr:
; Line 873
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN421@stbsp_vspr
	mov	eax, 600				; 00000258H
	sub	eax, DWORD PTR dp$6[rsp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	eax, edx
	mov	DWORD PTR tv642[rsp], eax
	jmp	SHORT $LN422@stbsp_vspr
$LN421@stbsp_vspr:
	mov	DWORD PTR tv642[rsp], 0
$LN422@stbsp_vspr:
	mov	eax, DWORD PTR tv642[rsp]
	mov	DWORD PTR cs$8[rsp], eax
; Line 874
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jb	$LN233@stbsp_vspr
; Line 876
	mov	DWORD PTR n$3[rsp], 0
$LN49@stbsp_vspr:
; Line 878
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN235@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN235@stbsp_vspr
; Line 879
	mov	DWORD PTR cs$8[rsp], 0
; Line 880
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 881
	jmp	SHORT $LN236@stbsp_vspr
$LN235@stbsp_vspr:
; Line 882
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 883
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 884
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN237@stbsp_vspr
; Line 885
	jmp	SHORT $LN50@stbsp_vspr
$LN237@stbsp_vspr:
$LN236@stbsp_vspr:
; Line 887
	jmp	SHORT $LN49@stbsp_vspr
$LN50@stbsp_vspr:
; Line 888
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	$LN238@stbsp_vspr
; Line 889
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR dp$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 890
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN239@stbsp_vspr
$LN52@stbsp_vspr:
; Line 891
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN53@stbsp_vspr
; Line 892
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN240@stbsp_vspr
; Line 893
	jmp	SHORT $LN53@stbsp_vspr
$LN240@stbsp_vspr:
; Line 894
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 895
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 896
	jmp	SHORT $LN52@stbsp_vspr
$LN53@stbsp_vspr:
$LN54@stbsp_vspr:
; Line 897
	cmp	DWORD PTR n$3[rsp], 4
	jb	SHORT $LN55@stbsp_vspr
; Line 898
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 899
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 900
	mov	eax, DWORD PTR n$3[rsp]
	sub	eax, 4
	mov	DWORD PTR n$3[rsp], eax
; Line 901
	jmp	SHORT $LN54@stbsp_vspr
$LN55@stbsp_vspr:
$LN239@stbsp_vspr:
$LN56@stbsp_vspr:
; Line 903
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN57@stbsp_vspr
; Line 904
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN241@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN241@stbsp_vspr
; Line 905
	mov	DWORD PTR cs$8[rsp], 0
; Line 906
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 907
	jmp	SHORT $LN242@stbsp_vspr
$LN241@stbsp_vspr:
; Line 908
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 909
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
$LN242@stbsp_vspr:
; Line 911
	jmp	SHORT $LN56@stbsp_vspr
$LN57@stbsp_vspr:
$LN238@stbsp_vspr:
; Line 913
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 914
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN243@stbsp_vspr
; Line 915
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 916
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tz$16[rsp], eax
$LN243@stbsp_vspr:
; Line 918
	jmp	$LN234@stbsp_vspr
$LN233@stbsp_vspr:
; Line 920
	mov	DWORD PTR n$3[rsp], 0
$LN58@stbsp_vspr:
; Line 922
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN244@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN244@stbsp_vspr
; Line 923
	mov	DWORD PTR cs$8[rsp], 0
; Line 924
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 925
	jmp	SHORT $LN245@stbsp_vspr
$LN244@stbsp_vspr:
; Line 926
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 927
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 928
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN246@stbsp_vspr
; Line 929
	jmp	SHORT $LN59@stbsp_vspr
$LN246@stbsp_vspr:
$LN245@stbsp_vspr:
; Line 931
	jmp	SHORT $LN58@stbsp_vspr
$LN59@stbsp_vspr:
; Line 932
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 933
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN247@stbsp_vspr
; Line 934
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN247@stbsp_vspr:
; Line 935
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN248@stbsp_vspr
; Line 936
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN248@stbsp_vspr:
$LN61@stbsp_vspr:
; Line 937
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN62@stbsp_vspr
; Line 938
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 939
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 940
	jmp	SHORT $LN61@stbsp_vspr
$LN62@stbsp_vspr:
; Line 941
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN234@stbsp_vspr:
$LN228@stbsp_vspr:
; Line 944
	mov	DWORD PTR pr$2[rsp], 0
; Line 947
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN249@stbsp_vspr
; Line 949
	mov	BYTE PTR idx$7[rsp], 1
; Line 950
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN250@stbsp_vspr
; Line 951
	mov	BYTE PTR idx$7[rsp], 0
$LN250@stbsp_vspr:
; Line 952
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
; Line 953
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR tail$63[rsp+rax], 32		; 00000020H
; Line 955
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	test	eax, eax
	je	$LN251@stbsp_vspr
; Line 956
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN252@stbsp_vspr
; Line 957
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG45436
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
	jmp	SHORT $LN253@stbsp_vspr
$LN252@stbsp_vspr:
; Line 959
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG45437
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
$LN253@stbsp_vspr:
; Line 960
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
; Line 962
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN254@stbsp_vspr
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	jne	SHORT $LN254@stbsp_vspr
; Line 963
	movsx	eax, BYTE PTR idx$7[rsp]
	inc	eax
	cdqe
	mov	BYTE PTR tail$63[rsp+rax], 105		; 00000069H
; Line 964
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
$LN254@stbsp_vspr:
; Line 966
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN251@stbsp_vspr:
$LN249@stbsp_vspr:
$LN218@stbsp_vspr:
$flt_lead$471:
; Line 973
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 974
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 975
	jmp	$LN255@stbsp_vspr
	jmp	$scopy$468
$LN256@stbsp_vspr:
$LN257@stbsp_vspr:
; Line 980
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN423@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv760[rsp], rax
	jmp	SHORT $LN424@stbsp_vspr
$LN423@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv760[rsp], rax
$LN424@stbsp_vspr:
	mov	rax, QWORD PTR tv760[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 981
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T55[rsp], rax
	cmp	QWORD PTR $T55[rsp], 8
	jae	SHORT $LN425@stbsp_vspr
	jmp	SHORT $LN426@stbsp_vspr
$LN425@stbsp_vspr:
	call	__report_rangecheckfailure
$LN426@stbsp_vspr:
	mov	rax, QWORD PTR $T55[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 982
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN258@stbsp_vspr
; Line 983
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 984
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 985
	mov	eax, 1
	imul	rax, rax, 11
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN258@stbsp_vspr:
; Line 987
	mov	DWORD PTR l$5[rsp], 384			; 00000180H
; Line 988
	jmp	$LN259@stbsp_vspr
	jmp	$radixnum$473
$LN260@stbsp_vspr:
; Line 991
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR h$21[rsp], rax
; Line 992
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T56[rsp], rax
	cmp	QWORD PTR $T56[rsp], 8
	jae	SHORT $LN427@stbsp_vspr
	jmp	SHORT $LN428@stbsp_vspr
$LN427@stbsp_vspr:
	call	__report_rangecheckfailure
$LN428@stbsp_vspr:
	mov	rax, QWORD PTR $T56[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 993
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN261@stbsp_vspr
; Line 994
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 1
; Line 995
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
$LN261@stbsp_vspr:
; Line 997
	mov	DWORD PTR l$5[rsp], 816			; 00000330H
; Line 998
	jmp	$LN262@stbsp_vspr
	jmp	$radixnum$473
$LN263@stbsp_vspr:
; Line 1001
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 1002
	mov	DWORD PTR pr$2[rsp], 16
; Line 1003
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -17				; ffffffefH
	mov	DWORD PTR fl$1[rsp], eax
$LN264@stbsp_vspr:
$LN265@stbsp_vspr:
; Line 1008
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 88					; 00000058H
	jne	SHORT $LN429@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv789[rsp], rax
	jmp	SHORT $LN430@stbsp_vspr
$LN429@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv789[rsp], rax
$LN430@stbsp_vspr:
	mov	rax, QWORD PTR tv789[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 1009
	mov	DWORD PTR l$5[rsp], 1088		; 00000440H
; Line 1010
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T57[rsp], rax
	cmp	QWORD PTR $T57[rsp], 8
	jae	SHORT $LN431@stbsp_vspr
	jmp	SHORT $LN432@stbsp_vspr
$LN431@stbsp_vspr:
	call	__report_rangecheckfailure
$LN432@stbsp_vspr:
	mov	rax, QWORD PTR $T57[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1011
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN266@stbsp_vspr
; Line 1012
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 1013
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 1014
	mov	eax, 1
	imul	rax, rax, 16
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN266@stbsp_vspr:
$LN259@stbsp_vspr:
$LN262@stbsp_vspr:
$radixnum$473:
; Line 1018
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN267@stbsp_vspr
; Line 1019
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN433@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv811[rsp], rax
	jmp	SHORT $LN434@stbsp_vspr
$LN433@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv811[rsp], rax
$LN434@stbsp_vspr:
	mov	rax, QWORD PTR tv811[rsp]
	mov	QWORD PTR n64$11[rsp], rax
	jmp	SHORT $LN268@stbsp_vspr
$LN267@stbsp_vspr:
; Line 1021
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN435@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv818[rsp], eax
	jmp	SHORT $LN436@stbsp_vspr
$LN435@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv818[rsp], eax
$LN436@stbsp_vspr:
	mov	eax, DWORD PTR tv818[rsp]
	mov	QWORD PTR n64$11[rsp], rax
$LN268@stbsp_vspr:
; Line 1023
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1024
	mov	DWORD PTR dp$6[rsp], 0
; Line 1026
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T58[rsp], rax
	cmp	QWORD PTR $T58[rsp], 8
	jae	SHORT $LN437@stbsp_vspr
	jmp	SHORT $LN438@stbsp_vspr
$LN437@stbsp_vspr:
	call	__report_rangecheckfailure
$LN438@stbsp_vspr:
	mov	rax, QWORD PTR $T58[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1027
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN269@stbsp_vspr
; Line 1028
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T59[rsp], rax
	cmp	QWORD PTR $T59[rsp], 8
	jae	SHORT $LN439@stbsp_vspr
	jmp	SHORT $LN440@stbsp_vspr
$LN439@stbsp_vspr:
	call	__report_rangecheckfailure
$LN440@stbsp_vspr:
	mov	rax, QWORD PTR $T59[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1029
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN270@stbsp_vspr
; Line 1030
	mov	DWORD PTR l$5[rsp], 0
; Line 1031
	mov	DWORD PTR cs$8[rsp], 0
; Line 1032
	jmp	$LN271@stbsp_vspr
	jmp	$scopy$468
$LN270@stbsp_vspr:
$LN269@stbsp_vspr:
$LN63@stbsp_vspr:
; Line 1037
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	ecx, 1
	mov	DWORD PTR tv1941[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1941[rsp]
	shl	eax, cl
	dec	eax
	cdqe
	mov	rcx, QWORD PTR n64$11[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1038
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	eax, eax
	movzx	ecx, al
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, cl
	mov	QWORD PTR n64$11[rsp], rax
; Line 1039
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN272@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	cmp	eax, DWORD PTR pr$2[rsp]
	jl	SHORT $LN272@stbsp_vspr
; Line 1040
	jmp	SHORT $LN64@stbsp_vspr
$LN272@stbsp_vspr:
; Line 1041
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN273@stbsp_vspr
; Line 1042
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 1043
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, 15
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	cmp	eax, ecx
	jne	SHORT $LN274@stbsp_vspr
; Line 1044
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR l$5[rsp], eax
; Line 1045
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
$LN274@stbsp_vspr:
$LN273@stbsp_vspr:
; Line 1048
	jmp	$LN63@stbsp_vspr
$LN64@stbsp_vspr:
; Line 1050
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	shl	ecx, 24
	add	eax, ecx
	mov	DWORD PTR cs$8[rsp], eax
; Line 1052
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1054
	jmp	$LN275@stbsp_vspr
	jmp	$scopy$468
$LN276@stbsp_vspr:
$LN277@stbsp_vspr:
$LN278@stbsp_vspr:
; Line 1060
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	$LN279@stbsp_vspr
; Line 1061
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN441@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv872[rsp], rax
	jmp	SHORT $LN442@stbsp_vspr
$LN441@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv872[rsp], rax
$LN442@stbsp_vspr:
	mov	rax, QWORD PTR tv872[rsp]
	mov	QWORD PTR i64$46[rsp], rax
; Line 1062
	mov	rax, QWORD PTR i64$46[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1063
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN281@stbsp_vspr
	cmp	QWORD PTR i64$46[rsp], 0
	jge	SHORT $LN281@stbsp_vspr
; Line 1064
	mov	rax, QWORD PTR i64$46[rsp]
	neg	rax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1065
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN281@stbsp_vspr:
; Line 1067
	jmp	$LN280@stbsp_vspr
$LN279@stbsp_vspr:
; Line 1068
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN443@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv886[rsp], eax
	jmp	SHORT $LN444@stbsp_vspr
$LN443@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv886[rsp], eax
$LN444@stbsp_vspr:
	mov	eax, DWORD PTR tv886[rsp]
	mov	DWORD PTR i$33[rsp], eax
; Line 1069
	mov	eax, DWORD PTR i$33[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1070
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN282@stbsp_vspr
	cmp	DWORD PTR i$33[rsp], 0
	jge	SHORT $LN282@stbsp_vspr
; Line 1071
	mov	eax, DWORD PTR i$33[rsp]
	neg	eax
	mov	eax, eax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1072
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN282@stbsp_vspr:
$LN280@stbsp_vspr:
; Line 1077
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN283@stbsp_vspr
; Line 1078
	cmp	QWORD PTR n64$11[rsp], 1024		; 00000400H
	jae	SHORT $LN284@stbsp_vspr
; Line 1079
	mov	DWORD PTR pr$2[rsp], 0
	jmp	SHORT $LN285@stbsp_vspr
$LN284@stbsp_vspr:
; Line 1080
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN286@stbsp_vspr
; Line 1081
	mov	DWORD PTR pr$2[rsp], 1
$LN286@stbsp_vspr:
$LN285@stbsp_vspr:
; Line 1082
	cvtsi2sd xmm0, QWORD PTR n64$11[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 1083
	jmp	$doafloat$472
$LN283@stbsp_vspr:
; Line 1088
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1089
	mov	DWORD PTR l$5[rsp], 0
$LN66@stbsp_vspr:
; Line 1093
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 8
	mov	QWORD PTR o$44[rsp], rax
; Line 1094
	cmp	QWORD PTR n64$11[rsp], 100000000	; 05f5e100H
	jb	SHORT $LN287@stbsp_vspr
; Line 1095
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1096
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	QWORD PTR n64$11[rsp], rax
; Line 1097
	jmp	SHORT $LN288@stbsp_vspr
$LN287@stbsp_vspr:
; Line 1098
	mov	eax, DWORD PTR n64$11[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1099
	mov	QWORD PTR n64$11[rsp], 0
$LN288@stbsp_vspr:
; Line 1101
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN289@stbsp_vspr
$LN71@stbsp_vspr:
; Line 1103
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 2
	mov	QWORD PTR s$4[rsp], rax
; Line 1104
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR s$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1105
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1106
	cmp	DWORD PTR n$3[rsp], 0
	jne	SHORT $LN71@stbsp_vspr
$LN289@stbsp_vspr:
$LN72@stbsp_vspr:
; Line 1108
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN73@stbsp_vspr
; Line 1109
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN290@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv922[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv922[rsp], 3
	jne	SHORT $LN290@stbsp_vspr
; Line 1110
	mov	DWORD PTR l$5[rsp], 0
; Line 1111
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1112
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1113
	jmp	SHORT $LN291@stbsp_vspr
$LN290@stbsp_vspr:
; Line 1114
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	eax, edx
	movsx	eax, al
	add	eax, 48					; 00000030H
	mov	rcx, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rcx], al
; Line 1115
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
$LN291@stbsp_vspr:
; Line 1117
	jmp	$LN72@stbsp_vspr
$LN73@stbsp_vspr:
; Line 1118
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN292@stbsp_vspr
; Line 1119
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN293@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN293@stbsp_vspr
; Line 1120
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN293@stbsp_vspr:
; Line 1121
	jmp	$LN67@stbsp_vspr
$LN292@stbsp_vspr:
$LN74@stbsp_vspr:
; Line 1123
	mov	rax, QWORD PTR o$44[rsp]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN75@stbsp_vspr
; Line 1124
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN294@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv945[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv945[rsp], 3
	jne	SHORT $LN294@stbsp_vspr
; Line 1125
	mov	DWORD PTR l$5[rsp], 0
; Line 1126
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1127
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1128
	jmp	SHORT $LN295@stbsp_vspr
$LN294@stbsp_vspr:
; Line 1129
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
$LN295@stbsp_vspr:
; Line 1130
	jmp	$LN74@stbsp_vspr
$LN75@stbsp_vspr:
; Line 1131
	jmp	$LN66@stbsp_vspr
$LN67@stbsp_vspr:
; Line 1133
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T60[rsp], rax
	cmp	QWORD PTR $T60[rsp], 8
	jae	SHORT $LN445@stbsp_vspr
	jmp	SHORT $LN446@stbsp_vspr
$LN445@stbsp_vspr:
	call	__report_rangecheckfailure
$LN446@stbsp_vspr:
	mov	rax, QWORD PTR $T60[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1134
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 1137
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1138
	cmp	DWORD PTR l$5[rsp], 0
	jne	SHORT $LN296@stbsp_vspr
; Line 1139
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1140
	mov	DWORD PTR l$5[rsp], 1
$LN296@stbsp_vspr:
; Line 1142
	mov	eax, DWORD PTR l$5[rsp]
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 1143
	cmp	DWORD PTR pr$2[rsp], 0
	jge	SHORT $LN297@stbsp_vspr
; Line 1144
	mov	DWORD PTR pr$2[rsp], 0
$LN297@stbsp_vspr:
$LN173@stbsp_vspr:
$LN175@stbsp_vspr:
$LN190@stbsp_vspr:
$LN212@stbsp_vspr:
$LN226@stbsp_vspr:
$LN255@stbsp_vspr:
$LN271@stbsp_vspr:
$LN275@stbsp_vspr:
$scopy$468:
; Line 1148
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jge	SHORT $LN298@stbsp_vspr
; Line 1149
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN298@stbsp_vspr:
; Line 1150
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsx	ecx, BYTE PTR tail$63[rsp+rcx]
	mov	edx, DWORD PTR tz$16[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1151
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jge	SHORT $LN299@stbsp_vspr
; Line 1152
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR fw$10[rsp], eax
$LN299@stbsp_vspr:
; Line 1153
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
; Line 1154
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1157
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN300@stbsp_vspr
; Line 1158
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN301@stbsp_vspr
; Line 1160
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jle	SHORT $LN447@stbsp_vspr
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR tv979[rsp], eax
	jmp	SHORT $LN448@stbsp_vspr
$LN447@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv979[rsp], eax
$LN448@stbsp_vspr:
	mov	eax, DWORD PTR tv979[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 1161
	mov	DWORD PTR fw$10[rsp], 0
; Line 1162
	jmp	SHORT $LN302@stbsp_vspr
$LN301@stbsp_vspr:
; Line 1163
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -65				; ffffffbfH
	mov	DWORD PTR fl$1[rsp], eax
$LN302@stbsp_vspr:
$LN300@stbsp_vspr:
; Line 1168
	mov	eax, DWORD PTR pr$2[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	$LN303@stbsp_vspr
; Line 1173
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN304@stbsp_vspr
$LN76@stbsp_vspr:
; Line 1174
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN77@stbsp_vspr
; Line 1175
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN305@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$35[rsp], eax
	mov	eax, DWORD PTR lg$35[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN306@stbsp_vspr
	mov	eax, DWORD PTR lg$35[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN306@stbsp_vspr:
$LN305@stbsp_vspr:
; Line 1176
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN78@stbsp_vspr:
; Line 1177
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN79@stbsp_vspr
; Line 1178
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN307@stbsp_vspr
; Line 1179
	jmp	SHORT $LN79@stbsp_vspr
$LN307@stbsp_vspr:
; Line 1180
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1181
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1182
	jmp	SHORT $LN78@stbsp_vspr
$LN79@stbsp_vspr:
$LN80@stbsp_vspr:
; Line 1183
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN81@stbsp_vspr
; Line 1184
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1185
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1186
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1187
	jmp	SHORT $LN80@stbsp_vspr
$LN81@stbsp_vspr:
$LN82@stbsp_vspr:
; Line 1188
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN83@stbsp_vspr
; Line 1189
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1191
	jmp	SHORT $LN82@stbsp_vspr
$LN83@stbsp_vspr:
; Line 1192
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN308@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$34[rsp], eax
	mov	eax, DWORD PTR len$34[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN309@stbsp_vspr
	mov	eax, DWORD PTR len$34[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$34[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN310@stbsp_vspr
	jmp	$LN311@stbsp_vspr
	jmp	$done$466
$LN310@stbsp_vspr:
$LN309@stbsp_vspr:
$LN308@stbsp_vspr:
; Line 1193
	jmp	$LN76@stbsp_vspr
$LN77@stbsp_vspr:
$LN304@stbsp_vspr:
; Line 1196
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN84@stbsp_vspr:
; Line 1197
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN85@stbsp_vspr
; Line 1198
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN312@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$36[rsp], eax
	mov	eax, DWORD PTR lg$36[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN313@stbsp_vspr
	mov	eax, DWORD PTR lg$36[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN313@stbsp_vspr:
$LN312@stbsp_vspr:
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$9[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN86@stbsp_vspr:
; Line 1200
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN87@stbsp_vspr
; Line 1201
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1202
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1203
	jmp	SHORT $LN86@stbsp_vspr
$LN87@stbsp_vspr:
; Line 1204
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN314@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$23[rsp], eax
	mov	eax, DWORD PTR len$23[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN315@stbsp_vspr
	mov	eax, DWORD PTR len$23[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$23[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN316@stbsp_vspr
	jmp	$LN317@stbsp_vspr
	jmp	$done$466
$LN316@stbsp_vspr:
$LN315@stbsp_vspr:
$LN314@stbsp_vspr:
; Line 1205
	jmp	$LN84@stbsp_vspr
$LN85@stbsp_vspr:
; Line 1208
	mov	eax, DWORD PTR cs$8[rsp]
	shr	eax, 24
	mov	DWORD PTR c$24[rsp], eax
; Line 1209
	mov	eax, DWORD PTR cs$8[rsp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR cs$8[rsp], eax
; Line 1210
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN449@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$24[rsp]
	inc	ecx
	xor	edx, edx
	div	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR c$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv1058[rsp], eax
	jmp	SHORT $LN450@stbsp_vspr
$LN449@stbsp_vspr:
	mov	DWORD PTR tv1058[rsp], 0
$LN450@stbsp_vspr:
	mov	eax, DWORD PTR tv1058[rsp]
	mov	DWORD PTR cs$8[rsp], eax
$LN88@stbsp_vspr:
; Line 1211
	cmp	DWORD PTR pr$2[rsp], 0
	jle	$LN89@stbsp_vspr
; Line 1212
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN318@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$37[rsp], eax
	mov	eax, DWORD PTR lg$37[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN319@stbsp_vspr
	mov	eax, DWORD PTR lg$37[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN319@stbsp_vspr:
$LN318@stbsp_vspr:
; Line 1213
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1214
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN320@stbsp_vspr
$LN90@stbsp_vspr:
; Line 1215
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN91@stbsp_vspr
; Line 1216
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN321@stbsp_vspr
; Line 1217
	jmp	SHORT $LN91@stbsp_vspr
$LN321@stbsp_vspr:
; Line 1218
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1219
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1220
	jmp	SHORT $LN90@stbsp_vspr
$LN91@stbsp_vspr:
$LN92@stbsp_vspr:
; Line 1221
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN93@stbsp_vspr
; Line 1222
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1223
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1224
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1225
	jmp	SHORT $LN92@stbsp_vspr
$LN93@stbsp_vspr:
$LN320@stbsp_vspr:
$LN94@stbsp_vspr:
; Line 1227
	cmp	DWORD PTR i$9[rsp], 0
	je	$LN95@stbsp_vspr
; Line 1228
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN322@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	DWORD PTR tv1081[rsp], eax
	mov	eax, DWORD PTR c$24[rsp]
	mov	DWORD PTR tv1082[rsp], eax
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	mov	eax, DWORD PTR tv1082[rsp]
	cmp	DWORD PTR tv1081[rsp], eax
	jne	SHORT $LN322@stbsp_vspr
; Line 1229
	mov	DWORD PTR cs$8[rsp], 0
; Line 1230
	mov	rax, QWORD PTR bf$[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1231
	jmp	SHORT $LN323@stbsp_vspr
$LN322@stbsp_vspr:
; Line 1232
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
$LN323@stbsp_vspr:
; Line 1233
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1234
	jmp	$LN94@stbsp_vspr
$LN95@stbsp_vspr:
; Line 1235
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN324@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$25[rsp], eax
	mov	eax, DWORD PTR len$25[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN325@stbsp_vspr
	mov	eax, DWORD PTR len$25[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$25[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN326@stbsp_vspr
	jmp	$LN327@stbsp_vspr
	jmp	$done$466
$LN326@stbsp_vspr:
$LN325@stbsp_vspr:
$LN324@stbsp_vspr:
; Line 1236
	jmp	$LN88@stbsp_vspr
$LN89@stbsp_vspr:
$LN303@stbsp_vspr:
; Line 1240
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN96@stbsp_vspr:
; Line 1241
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN97@stbsp_vspr
; Line 1243
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$18[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN328@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$43[rsp], eax
	mov	eax, DWORD PTR lg$43[rsp]
	cmp	DWORD PTR i$18[rsp], eax
	jle	SHORT $LN329@stbsp_vspr
	mov	eax, DWORD PTR lg$43[rsp]
	mov	DWORD PTR i$18[rsp], eax
$LN329@stbsp_vspr:
$LN328@stbsp_vspr:
; Line 1244
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$18[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN98@stbsp_vspr:
; Line 1245
	cmp	DWORD PTR i$18[rsp], 0
	je	SHORT $LN99@stbsp_vspr
; Line 1246
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1247
	mov	eax, DWORD PTR i$18[rsp]
	dec	eax
	mov	DWORD PTR i$18[rsp], eax
; Line 1248
	jmp	SHORT $LN98@stbsp_vspr
$LN99@stbsp_vspr:
; Line 1249
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN330@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$26[rsp], eax
	mov	eax, DWORD PTR len$26[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN331@stbsp_vspr
	mov	eax, DWORD PTR len$26[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$26[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN332@stbsp_vspr
	jmp	$LN333@stbsp_vspr
	jmp	$done$466
$LN332@stbsp_vspr:
$LN331@stbsp_vspr:
$LN330@stbsp_vspr:
; Line 1250
	jmp	$LN96@stbsp_vspr
$LN97@stbsp_vspr:
; Line 1253
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN100@stbsp_vspr:
; Line 1254
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN101@stbsp_vspr
; Line 1256
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$17[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN334@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$38[rsp], eax
	mov	eax, DWORD PTR lg$38[rsp]
	cmp	DWORD PTR i$17[rsp], eax
	jle	SHORT $LN335@stbsp_vspr
	mov	eax, DWORD PTR lg$38[rsp]
	mov	DWORD PTR i$17[rsp], eax
$LN335@stbsp_vspr:
$LN334@stbsp_vspr:
; Line 1257
	mov	eax, DWORD PTR i$17[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
$LN102@stbsp_vspr:
; Line 1258
	cmp	DWORD PTR i$17[rsp], 4
	jl	SHORT $LN103@stbsp_vspr
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR i$17[rsp]
	sub	eax, 4
	mov	DWORD PTR i$17[rsp], eax
	jmp	SHORT $LN102@stbsp_vspr
$LN103@stbsp_vspr:
$LN104@stbsp_vspr:
; Line 1264
	cmp	DWORD PTR i$17[rsp], 0
	je	SHORT $LN105@stbsp_vspr
; Line 1265
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 1266
	mov	eax, DWORD PTR i$17[rsp]
	dec	eax
	mov	DWORD PTR i$17[rsp], eax
; Line 1267
	jmp	SHORT $LN104@stbsp_vspr
$LN105@stbsp_vspr:
; Line 1268
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN336@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$27[rsp], eax
	mov	eax, DWORD PTR len$27[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN337@stbsp_vspr
	mov	eax, DWORD PTR len$27[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$27[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN338@stbsp_vspr
	jmp	$LN339@stbsp_vspr
	jmp	$done$466
$LN338@stbsp_vspr:
$LN337@stbsp_vspr:
$LN336@stbsp_vspr:
; Line 1269
	jmp	$LN100@stbsp_vspr
$LN101@stbsp_vspr:
$LN106@stbsp_vspr:
; Line 1272
	cmp	DWORD PTR tz$16[rsp], 0
	je	$LN107@stbsp_vspr
; Line 1274
	mov	eax, DWORD PTR tz$16[rsp]
	mov	DWORD PTR i$14[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN340@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$39[rsp], eax
	mov	eax, DWORD PTR lg$39[rsp]
	cmp	DWORD PTR i$14[rsp], eax
	jle	SHORT $LN341@stbsp_vspr
	mov	eax, DWORD PTR lg$39[rsp]
	mov	DWORD PTR i$14[rsp], eax
$LN341@stbsp_vspr:
$LN340@stbsp_vspr:
; Line 1275
	mov	eax, DWORD PTR i$14[rsp]
	mov	ecx, DWORD PTR tz$16[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN108@stbsp_vspr:
; Line 1276
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN109@stbsp_vspr
; Line 1277
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN342@stbsp_vspr
; Line 1278
	jmp	SHORT $LN109@stbsp_vspr
$LN342@stbsp_vspr:
; Line 1279
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1280
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1281
	jmp	SHORT $LN108@stbsp_vspr
$LN109@stbsp_vspr:
$LN110@stbsp_vspr:
; Line 1282
	cmp	DWORD PTR i$14[rsp], 4
	jl	SHORT $LN111@stbsp_vspr
; Line 1283
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1284
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1285
	mov	eax, DWORD PTR i$14[rsp]
	sub	eax, 4
	mov	DWORD PTR i$14[rsp], eax
; Line 1286
	jmp	SHORT $LN110@stbsp_vspr
$LN111@stbsp_vspr:
$LN112@stbsp_vspr:
; Line 1287
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN113@stbsp_vspr
; Line 1288
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1289
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1290
	jmp	SHORT $LN112@stbsp_vspr
$LN113@stbsp_vspr:
; Line 1291
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN343@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$28[rsp], eax
	mov	eax, DWORD PTR len$28[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN344@stbsp_vspr
	mov	eax, DWORD PTR len$28[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$28[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN345@stbsp_vspr
	jmp	$LN346@stbsp_vspr
	jmp	$done$466
$LN345@stbsp_vspr:
$LN344@stbsp_vspr:
$LN343@stbsp_vspr:
; Line 1292
	jmp	$LN106@stbsp_vspr
$LN107@stbsp_vspr:
; Line 1295
	lea	rax, QWORD PTR tail$63[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN114@stbsp_vspr:
; Line 1296
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	test	eax, eax
	je	$LN115@stbsp_vspr
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	mov	DWORD PTR i$19[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN347@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$40[rsp], eax
	mov	eax, DWORD PTR lg$40[rsp]
	cmp	DWORD PTR i$19[rsp], eax
	jle	SHORT $LN348@stbsp_vspr
	mov	eax, DWORD PTR lg$40[rsp]
	mov	DWORD PTR i$19[rsp], eax
$LN348@stbsp_vspr:
$LN347@stbsp_vspr:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$19[rsp]
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR tail$63[rsp+rcx], al
$LN116@stbsp_vspr:
; Line 1300
	cmp	DWORD PTR i$19[rsp], 0
	je	SHORT $LN117@stbsp_vspr
; Line 1301
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1302
	mov	eax, DWORD PTR i$19[rsp]
	dec	eax
	mov	DWORD PTR i$19[rsp], eax
; Line 1303
	jmp	SHORT $LN116@stbsp_vspr
$LN117@stbsp_vspr:
; Line 1304
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN349@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$29[rsp], eax
	mov	eax, DWORD PTR len$29[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN350@stbsp_vspr
	mov	eax, DWORD PTR len$29[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$29[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN351@stbsp_vspr
	jmp	$LN352@stbsp_vspr
	jmp	$done$466
$LN351@stbsp_vspr:
$LN350@stbsp_vspr:
$LN349@stbsp_vspr:
; Line 1305
	jmp	$LN114@stbsp_vspr
$LN115@stbsp_vspr:
; Line 1308
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	je	$LN353@stbsp_vspr
; Line 1309
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN354@stbsp_vspr
$LN118@stbsp_vspr:
; Line 1310
	cmp	DWORD PTR fw$10[rsp], 0
	je	$LN119@stbsp_vspr
; Line 1312
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$15[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN355@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$41[rsp], eax
	mov	eax, DWORD PTR lg$41[rsp]
	cmp	DWORD PTR i$15[rsp], eax
	jle	SHORT $LN356@stbsp_vspr
	mov	eax, DWORD PTR lg$41[rsp]
	mov	DWORD PTR i$15[rsp], eax
$LN356@stbsp_vspr:
$LN355@stbsp_vspr:
; Line 1313
	mov	eax, DWORD PTR i$15[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN120@stbsp_vspr:
; Line 1314
	cmp	DWORD PTR i$15[rsp], 0
	je	SHORT $LN121@stbsp_vspr
; Line 1315
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN357@stbsp_vspr
; Line 1316
	jmp	SHORT $LN121@stbsp_vspr
$LN357@stbsp_vspr:
; Line 1317
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1318
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
; Line 1319
	jmp	SHORT $LN120@stbsp_vspr
$LN121@stbsp_vspr:
$LN122@stbsp_vspr:
; Line 1320
	cmp	DWORD PTR i$15[rsp], 4
	jl	SHORT $LN123@stbsp_vspr
; Line 1321
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1322
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1323
	mov	eax, DWORD PTR i$15[rsp]
	sub	eax, 4
	mov	DWORD PTR i$15[rsp], eax
; Line 1324
	jmp	SHORT $LN122@stbsp_vspr
$LN123@stbsp_vspr:
$LN124@stbsp_vspr:
; Line 1325
	mov	eax, DWORD PTR i$15[rsp]
	mov	DWORD PTR tv1277[rsp], eax
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
	cmp	DWORD PTR tv1277[rsp], 0
	je	SHORT $LN125@stbsp_vspr
; Line 1326
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	jmp	SHORT $LN124@stbsp_vspr
$LN125@stbsp_vspr:
; Line 1327
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN358@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$30[rsp], eax
	mov	eax, DWORD PTR len$30[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN359@stbsp_vspr
	mov	eax, DWORD PTR len$30[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$30[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN360@stbsp_vspr
	jmp	$LN361@stbsp_vspr
	jmp	$done$466
$LN360@stbsp_vspr:
$LN359@stbsp_vspr:
$LN358@stbsp_vspr:
; Line 1328
	jmp	$LN118@stbsp_vspr
$LN119@stbsp_vspr:
$LN354@stbsp_vspr:
$LN353@stbsp_vspr:
; Line 1330
	jmp	$LN24@stbsp_vspr
$LN362@stbsp_vspr:
; Line 1333
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 1334
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1335
	mov	DWORD PTR l$5[rsp], 1
; Line 1336
	mov	DWORD PTR fl$1[rsp], 0
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fw$10[rsp], eax
; Line 1337
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T47[rsp], rax
	cmp	QWORD PTR $T47[rsp], 8
	jae	SHORT $LN451@stbsp_vspr
	jmp	SHORT $LN452@stbsp_vspr
$LN451@stbsp_vspr:
	call	__report_rangecheckfailure
$LN452@stbsp_vspr:
	mov	rax, QWORD PTR $T47[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1338
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T48[rsp], rax
	cmp	QWORD PTR $T48[rsp], 8
	jae	SHORT $LN453@stbsp_vspr
	jmp	SHORT $LN454@stbsp_vspr
$LN453@stbsp_vspr:
	call	__report_rangecheckfailure
$LN454@stbsp_vspr:
	mov	rax, QWORD PTR $T48[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1339
	mov	DWORD PTR pr$2[rsp], 0
; Line 1340
	mov	DWORD PTR dp$6[rsp], 0
; Line 1341
	mov	DWORD PTR cs$8[rsp], 0
; Line 1342
	jmp	$scopy$468
$LN24@stbsp_vspr:
; Line 1344
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 1345
	jmp	$LN2@stbsp_vspr
$LN129@stbsp_vspr:
$endfmt$465:
; Line 1348
	cmp	QWORD PTR callback$[rsp], 0
	jne	SHORT $LN363@stbsp_vspr
; Line 1349
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 0
	jmp	SHORT $LN364@stbsp_vspr
$LN363@stbsp_vspr:
; Line 1351
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$31[rsp], eax
	mov	eax, DWORD PTR len$31[rsp]
	add	eax, 511				; 000001ffH
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN365@stbsp_vspr
	mov	eax, DWORD PTR len$31[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$31[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
$LN365@stbsp_vspr:
$LN364@stbsp_vspr:
$LN133@stbsp_vspr:
$LN311@stbsp_vspr:
$LN317@stbsp_vspr:
$LN327@stbsp_vspr:
$LN333@stbsp_vspr:
$LN339@stbsp_vspr:
$LN346@stbsp_vspr:
$LN352@stbsp_vspr:
$LN361@stbsp_vspr:
$done$466:
; Line 1354
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
$LN368@stbsp_vspr:
; Line 1355
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1208				; 000004b8H
	ret	0
$LN460@stbsp_vspr:
	DD	$LN140@stbsp_vspr
	DD	$LN141@stbsp_vspr
	DD	$LN143@stbsp_vspr
	DD	$LN142@stbsp_vspr
	DD	$LN139@stbsp_vspr
	DD	$LN138@stbsp_vspr
	DD	$LN149@stbsp_vspr
	DD	$LN148@stbsp_vspr
	DD	$LN151@stbsp_vspr
$LN459@stbsp_vspr:
	DB	0
	DB	8
	DB	8
	DB	1
	DB	2
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	5
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
$LN458@stbsp_vspr:
	DD	$LN165@stbsp_vspr
	DD	$LN158@stbsp_vspr
	DD	$LN162@stbsp_vspr
	DD	$LN160@stbsp_vspr
	DD	$LN164@stbsp_vspr
	DD	$LN163@stbsp_vspr
	DD	$LN170@stbsp_vspr
$LN457@stbsp_vspr:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	npad	2
$LN456@stbsp_vspr:
	DD	$LN177@stbsp_vspr
	DD	$LN256@stbsp_vspr
	DD	$LN207@stbsp_vspr
	DD	$LN191@stbsp_vspr
	DD	$LN264@stbsp_vspr
	DD	$LN178@stbsp_vspr
	DD	$LN257@stbsp_vspr
	DD	$LN174@stbsp_vspr
	DD	$LN278@stbsp_vspr
	DD	$LN208@stbsp_vspr
	DD	$LN219@stbsp_vspr
	DD	$LN192@stbsp_vspr
	DD	$LN277@stbsp_vspr
	DD	$LN176@stbsp_vspr
	DD	$LN260@stbsp_vspr
	DD	$LN263@stbsp_vspr
	DD	$LN171@stbsp_vspr
	DD	$LN276@stbsp_vspr
	DD	$LN265@stbsp_vspr
	DD	$LN362@stbsp_vspr
$LN455@stbsp_vspr:
	DB	0
	DB	1
	DB	19
	DB	19
	DB	2
	DB	19
	DB	3
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	4
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	19
	DB	12
	DB	19
	DB	19
	DB	19
	DB	19
	DB	13
	DB	14
	DB	15
	DB	19
	DB	19
	DB	16
	DB	19
	DB	17
	DB	19
	DB	19
	DB	18
stbsp_vsprintfcb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
va$ = 40
buf$ = 64
count$ = 72
fmt$ = 80
stbsp_snprintf PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1461
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1464
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1466
	mov	r9, QWORD PTR va$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR count$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
	mov	DWORD PTR result$[rsp], eax
; Line 1467
	mov	QWORD PTR va$[rsp], 0
; Line 1469
	mov	eax, DWORD PTR result$[rsp]
; Line 1470
	add	rsp, 56					; 00000038H
	ret	0
stbsp_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
va$ = 56
buf$ = 80
fmt$ = 88
stbsp_sprintf PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1377
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 1380
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1381
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
	mov	DWORD PTR result$[rsp], eax
; Line 1382
	mov	QWORD PTR va$[rsp], 0
; Line 1383
	mov	eax, DWORD PTR result$[rsp]
; Line 1384
	add	rsp, 72					; 00000048H
	ret	0
stbsp_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$1 = 48
c$ = 64
__$ArrayPad$ = 592
buf$ = 624
count$ = 632
fmt$ = 640
va$ = 648
stbsp_vsnprintf PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1431
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 616				; 00000268H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1434
	cmp	DWORD PTR count$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
	cmp	QWORD PTR buf$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
; Line 1436
	mov	DWORD PTR c$[rsp+12], 0
; Line 1438
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	lea	r8, QWORD PTR c$[rsp+16]
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__count_clamp_callback
	call	stbsp_vsprintfcb
; Line 1439
	jmp	$LN3@stbsp_vsnp
$LN2@stbsp_vsnp:
; Line 1444
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1445
	mov	eax, DWORD PTR count$[rsp]
	mov	DWORD PTR c$[rsp+8], eax
; Line 1446
	mov	DWORD PTR c$[rsp+12], 0
; Line 1448
	xor	r8d, r8d
	lea	rdx, QWORD PTR c$[rsp]
	xor	ecx, ecx
	call	stbsp__clamp_callback
	mov	rcx, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__clamp_callback
	call	stbsp_vsprintfcb
; Line 1451
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$1[rsp], eax
; Line 1452
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR l$1[rsp], eax
	jl	SHORT $LN4@stbsp_vsnp
; Line 1453
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	DWORD PTR l$1[rsp], eax
$LN4@stbsp_vsnp:
; Line 1454
	movsxd	rax, DWORD PTR l$1[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN3@stbsp_vsnp:
; Line 1457
	mov	eax, DWORD PTR c$[rsp+12]
; Line 1458
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 616				; 00000268H
	ret	0
stbsp_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
va$ = 80
stbsp_vsprintf PROC
; File W:\cpp\void\cc\stb_sprintf.h
; Line 1473
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1474
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1475
	add	rsp, 56					; 00000038H
	ret	0
stbsp_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 64
rem$ = 68
vli$ = 72
caller$ = 96
label$ = 104
format$ = 112
cctrace_ PROC
; File W:\cpp\void\cc\cclog.h
; Line 275
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 88					; 00000058H
; Line 277
	lea	rax, QWORD PTR format$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 280
	mov	eax, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR format$[rsp]
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	ccformatvex
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 282
	movsxd	rax, DWORD PTR len$[rsp]
	mov	ecx, 4095				; 00000fffH
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR rem$[rsp], eax
; Line 283
	mov	eax, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	ecx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	r8, QWORD PTR gs:88
	mov	rdx, QWORD PTR [r8+rdx*8]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR len$[rsp]
	add	rcx, rdx
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR caller$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR caller$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR caller$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR label$[rsp]
	lea	r8, OFFSET FLAT:$SG46623
	mov	edx, DWORD PTR rem$[rsp]
	call	ccformatex
; Line 286
	mov	eax, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR len$[rsp]
	add	rax, rcx
	mov	rcx, rax
	call	ccout
; Line 288
	mov	QWORD PTR vli$[rsp], 0
; Line 289
	add	rsp, 88					; 00000058H
	ret	0
cctrace_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vli$ = 32
res$ = 40
fmt$ = 64
ccformat PROC
; File W:\cpp\void\cc\cc.c
; Line 459
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 461
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 462
	mov	rdx, QWORD PTR vli$[rsp]
	mov	rcx, QWORD PTR fmt$[rsp]
	call	ccformatv
	mov	QWORD PTR res$[rsp], rax
; Line 463
	mov	QWORD PTR vli$[rsp], 0
; Line 465
	mov	rax, QWORD PTR res$[rsp]
; Line 466
	add	rsp, 56					; 00000038H
	ret	0
ccformat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
vli$ = 40
buf$ = 64
len$ = 72
fmt$ = 80
ccformatex PROC
; File W:\cpp\void\cc\cc.c
; Line 448
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 450
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 451
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatvex
	mov	DWORD PTR res$[rsp], eax
; Line 452
	mov	QWORD PTR vli$[rsp], 0
; Line 454
	mov	eax, DWORD PTR res$[rsp]
; Line 455
	add	rsp, 56					; 00000038H
	ret	0
ccformatex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fmt$ = 48
vli$ = 56
ccformatv PROC
; File W:\cpp\void\cc\cc.c
; Line 438
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 441
	mov	eax, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	ccformatvex
; Line 443
	mov	eax, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
; Line 444
	add	rsp, 40					; 00000028H
	ret	0
ccformatv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 48
len$ = 56
fmt$ = 64
vli$ = 72
ccformatvex PROC
; File W:\cpp\void\cc\cc.c
; Line 432
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 433
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
; Line 434
	add	rsp, 40					; 00000028H
	ret	0
ccformatvex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccfilesize PROC
; File W:\cpp\void\cc\ccfio.c
; Line 37
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_GetFileSize
; Line 38
	add	rsp, 40					; 00000028H
	ret	0
ccfilesize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$ = 48
tv70 = 52
file_size$ = 56
file_data$ = 64
$T1 = 72
$T2 = 112
$T3 = 144
file$ = 208
offset$ = 216
lplength$ = 224
ccpullfile PROC
; File W:\cpp\void\cc\ccfio.c
; Line 53
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN2@ccpullfile
	xor	eax, eax
	jmp	$LN1@ccpullfile
$LN2@ccpullfile:
; Line 55
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfilesize
	mov	DWORD PTR file_size$[rsp], eax
; Line 56
	cmp	QWORD PTR lplength$[rsp], 0
	je	SHORT $LN8@ccpullfile
	mov	rax, QWORD PTR lplength$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN9@ccpullfile
$LN8@ccpullfile:
	mov	DWORD PTR tv70[rsp], 0
$LN9@ccpullfile:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR length$[rsp], eax
; Line 57
	mov	eax, DWORD PTR length$[rsp]
	mov	ecx, DWORD PTR offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR file_size$[rsp], eax
	jae	SHORT $LN3@ccpullfile
	xor	eax, eax
	jmp	$LN1@ccpullfile
$LN3@ccpullfile:
; Line 58
	cmp	DWORD PTR length$[rsp], 0
	jne	SHORT $LN4@ccpullfile
	mov	eax, DWORD PTR file_size$[rsp]
	mov	DWORD PTR length$[rsp], eax
$LN4@ccpullfile:
; Line 59
	lea	rax, OFFSET FLAT:$SG46085
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 59					; 0000003bH
	lea	r8, OFFSET FLAT:$SG46086
	xor	edx, edx
	lea	rcx, QWORD PTR $T3[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, DWORD PTR length$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	xor	r8d, r8d
	mov	edx, eax
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccuserallocator_
	mov	QWORD PTR file_data$[rsp], rax
; Line 60
	cmp	QWORD PTR lplength$[rsp], 0
	jne	SHORT $LN5@ccpullfile
	lea	rax, QWORD PTR length$[rsp]
	mov	QWORD PTR lplength$[rsp], rax
$LN5@ccpullfile:
; Line 61
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR lplength$[rsp]
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR file_data$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	jne	SHORT $LN6@ccpullfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpullfile
$LN6@ccpullfile:
; Line 62
	mov	rax, QWORD PTR file_data$[rsp]
$LN1@ccpullfile:
; Line 63
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
ccpullfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 64
tv75 = 72
name$ = 96
ccopenfile PROC
; File W:\cpp\void\cc\ccfio.c
; Line 47
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 4
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, -1073741824			; c0000000H
	mov	rcx, QWORD PTR name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR file$[rsp], rax
; Line 48
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	je	SHORT $LN3@ccopenfile
	mov	rax, QWORD PTR file$[rsp]
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN4@ccopenfile
$LN3@ccopenfile:
	mov	QWORD PTR tv75[rsp], 0
$LN4@ccopenfile:
	mov	rax, QWORD PTR tv75[rsp]
; Line 49
	add	rsp, 88					; 00000058H
	ret	0
ccopenfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccclosefile PROC
; File W:\cpp\void\cc\ccfio.c
; Line 42
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 43
	add	rsp, 40					; 00000028H
	ret	0
ccclosefile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
file$ = 32
ccrealfile PROC
; File W:\cpp\void\cc\ccfio.c
; Line 32
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	cmp	QWORD PTR file$[rsp], -1
	je	SHORT $LN3@ccrealfile
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@ccrealfile
$LN3@ccrealfile:
	mov	DWORD PTR tv65[rsp], 0
$LN4@ccrealfile:
	mov	eax, DWORD PTR tv65[rsp]
; Line 33
	add	rsp, 24
	ret	0
ccrealfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 0
name$ = 32
ccfilename PROC
; File W:\cpp\void\cc\ccfio.c
; Line 6
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR result$[rsp], rax
; Line 7
	mov	rax, QWORD PTR name$[rsp]
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN4@ccfilename
$LN2@ccfilename:
	mov	rax, QWORD PTR name$[rsp]
	inc	rax
	mov	QWORD PTR name$[rsp], rax
$LN4@ccfilename:
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@ccfilename
; Line 8
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	je	SHORT $LN6@ccfilename
	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN5@ccfilename
$LN6@ccfilename:
; Line 9
	mov	rax, QWORD PTR name$[rsp]
	inc	rax
	mov	QWORD PTR result$[rsp], rax
$LN5@ccfilename:
; Line 11
	jmp	SHORT $LN2@ccfilename
$LN3@ccfilename:
; Line 12
	mov	rax, QWORD PTR result$[rsp]
; Line 13
	add	rsp, 24
	ret	0
ccfilename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 32
t$ = 64
ccclocksecs PROC
; File W:\cpp\void\cc\ccfio.c
; Line 25
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 26
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 27
	mov	rax, QWORD PTR t$[rsp]
	test	rax, rax
	jl	SHORT $LN3@ccclocksec
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN4@ccclocksec
$LN3@ccclocksec:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN4@ccclocksec:
	cvtsi2sd xmm1, QWORD PTR l$[rsp]
	divsd	xmm0, xmm1
; Line 28
	add	rsp, 56					; 00000038H
	ret	0
ccclocksecs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 32
ccclocktick PROC
; File W:\cpp\void\cc\ccfio.c
; Line 19
	sub	rsp, 56					; 00000038H
; Line 20
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 21
	mov	rax, QWORD PTR l$[rsp]
; Line 22
	add	rsp, 56					; 00000038H
	ret	0
ccclocktick ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 32
tick$ = 40
remove$1 = 48
caller$ = 80
sentry$ = 88
marker$ = 96
ccsentry_leave PROC
; File W:\cpp\void\cc\cclog.h
; Line 208
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 209
	mov	eax, OFFSET FLAT:ccdebugnone
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN5@ccsentry_l
	mov	rax, QWORD PTR sentry$[rsp]
	jmp	$LN1@ccsentry_l
$LN5@ccsentry_l:
; Line 211
	cmp	QWORD PTR sentry$[rsp], 0
	jne	SHORT $LN7@ccsentry_l
	int	3
$LN7@ccsentry_l:
; Line 212
	mov	rdx, QWORD PTR marker$[rsp]
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	strcmp
	test	eax, eax
	je	SHORT $LN9@ccsentry_l
	int	3
$LN9@ccsentry_l:
; Line 213
	mov	rax, QWORD PTR caller$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	strcmp
	test	eax, eax
	je	SHORT $LN11@ccsentry_l
	int	3
$LN11@ccsentry_l:
; Line 214
	mov	rax, QWORD PTR caller$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rax+56]
	call	strcmp
	test	eax, eax
	je	SHORT $LN13@ccsentry_l
	int	3
$LN13@ccsentry_l:
; Line 216
	call	ccclocktick
	mov	QWORD PTR tick$[rsp], rax
; Line 217
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	rcx, QWORD PTR tick$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR sentry$[rsp]
	add	rax, QWORD PTR [rcx+88]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	QWORD PTR [rcx+88], rax
; Line 219
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR [rdx+96]
	mov	rcx, QWORD PTR [rcx+136]
	sub	rcx, rdx
	add	rcx, QWORD PTR [rax+136]
	mov	rax, rcx
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+136], rax
; Line 220
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR [rdx+104]
	mov	rcx, QWORD PTR [rcx+144]
	sub	rcx, rdx
	add	rcx, QWORD PTR [rax+144]
	mov	rax, rcx
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+144], rax
; Line 221
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR [rdx+112]
	mov	rcx, QWORD PTR [rcx+152]
	sub	rcx, rdx
	add	rcx, QWORD PTR [rax+152]
	mov	rax, rcx
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+152], rax
; Line 222
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR [rdx+120]
	mov	rcx, QWORD PTR [rcx+160]
	sub	rcx, rdx
	add	rcx, QWORD PTR [rax+160]
	mov	rax, rcx
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rcx+160], rax
; Line 223
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR sentry$[rsp]
	mov	edx, DWORD PTR [rdx+128]
	mov	ecx, DWORD PTR [rcx+168]
	sub	ecx, edx
	add	ecx, DWORD PTR [rax+168]
	mov	eax, ecx
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	DWORD PTR [rcx+168], eax
; Line 224
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rdx, QWORD PTR sentry$[rsp]
	mov	edx, DWORD PTR [rdx+132]
	mov	ecx, DWORD PTR [rcx+172]
	sub	ecx, edx
	add	ecx, DWORD PTR [rax+172]
	mov	eax, ecx
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	DWORD PTR [rcx+172], eax
; Line 226
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+136]
	mov	QWORD PTR [rax+96], rcx
; Line 227
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+144]
	mov	QWORD PTR [rax+104], rcx
; Line 228
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+152]
	mov	QWORD PTR [rax+112], rcx
; Line 229
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rcx+160]
	mov	QWORD PTR [rax+120], rcx
; Line 230
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	ecx, DWORD PTR [rcx+168]
	mov	DWORD PTR [rax+128], ecx
; Line 231
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	ecx, DWORD PTR [rcx+172]
	mov	DWORD PTR [rax+132], ecx
; Line 235
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR block$[rsp], rax
$LN2@ccsentry_l:
	cmp	QWORD PTR block$[rsp], 0
	je	SHORT $LN3@ccsentry_l
; Line 236
	mov	rax, QWORD PTR block$[rsp]
	mov	QWORD PTR remove$1[rsp], rax
; Line 237
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR block$[rsp], rax
; Line 240
	mov	rdx, QWORD PTR remove$1[rsp]
	mov	rcx, QWORD PTR sentry$[rsp]
	call	ccsentry_remblock
	mov	rdx, rax
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	ccsentry_addblock
; Line 241
	jmp	SHORT $LN2@ccsentry_l
$LN3@ccsentry_l:
; Line 243
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rax, QWORD PTR [rax+8]
$LN1@ccsentry_l:
; Line 244
	add	rsp, 72					; 00000048H
	ret	0
ccsentry_leave ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d$ = 32
tv156 = 36
sentry$ = 40
a$ = 48
caller$ = 96
master$ = 104
marker$ = 112
ccsentry_enter PROC
; File W:\cpp\void\cc\cclog.h
; Line 175
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	eax, OFFSET FLAT:ccdebugnone
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN2@ccsentry_e
	mov	rax, QWORD PTR master$[rsp]
	jmp	$LN1@ccsentry_e
$LN2@ccsentry_e:
; Line 177
	mov	eax, OFFSET FLAT:ccallocator
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax+rcx]
	mov	QWORD PTR a$[rsp], rax
; Line 178
	mov	eax, OFFSET FLAT:ccdebugnone
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR d$[rsp], eax
; Line 180
	mov	eax, OFFSET FLAT:ccdebugnone
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 181
	mov	eax, OFFSET FLAT:ccallocator
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, OFFSET FLAT:ccinternalallocator_
	mov	QWORD PTR [rax+rcx], rdx
; Line 183
	mov	rax, QWORD PTR caller$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR master$[rsp]
	add	rcx, 16
	mov	r9, rax
	mov	r8d, -8
	mov	edx, 176				; 000000b0H
	call	ccdlb_tblset
	imul	rax, rax, 176				; 000000b0H
	mov	rcx, QWORD PTR master$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	QWORD PTR sentry$[rsp], rax
; Line 185
	mov	eax, OFFSET FLAT:ccdebugnone
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 186
	mov	eax, OFFSET FLAT:ccallocator
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rax+rcx], rdx
; Line 188
	mov	rax, QWORD PTR sentry$[rsp]
	mov	eax, DWORD PTR [rax+72]
	mov	DWORD PTR tv156[rsp], eax
	mov	rax, QWORD PTR sentry$[rsp]
	mov	eax, DWORD PTR [rax+72]
	inc	eax
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	DWORD PTR [rcx+72], eax
	cmp	DWORD PTR tv156[rsp], 0
	jne	$LN3@ccsentry_e
; Line 189
	cmp	QWORD PTR sentry$[rsp], 0
	jne	SHORT $LN5@ccsentry_e
	int	3
$LN5@ccsentry_e:
; Line 190
	cmp	QWORD PTR master$[rsp], 0
	jne	SHORT $LN7@ccsentry_e
	int	3
$LN7@ccsentry_e:
; Line 191
	cmp	QWORD PTR marker$[rsp], 0
	jne	SHORT $LN9@ccsentry_e
	int	3
$LN9@ccsentry_e:
; Line 193
	mov	rax, QWORD PTR sentry$[rsp]
	lea	rdi, QWORD PTR [rax+32]
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 194
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR master$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 195
	mov	rax, QWORD PTR sentry$[rsp]
	mov	rcx, QWORD PTR marker$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 196
	mov	rax, QWORD PTR sentry$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 198
	mov	rax, QWORD PTR master$[rsp]
	mov	eax, DWORD PTR [rax+24]
	inc	eax
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 200
	call	ccclocktick
	mov	rcx, QWORD PTR sentry$[rsp]
	mov	QWORD PTR [rcx+80], rax
; Line 201
	mov	rax, QWORD PTR sentry$[rsp]
	mov	QWORD PTR [rax+88], 0
$LN3@ccsentry_e:
; Line 203
	mov	rax, QWORD PTR sentry$[rsp]
$LN1@ccsentry_e:
; Line 204
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
ccsentry_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
__$ReturnAddress$ = 64
guid$ = 72
file$ = 80
line$ = 88
func$ = 96
cccaller PROC
; File W:\cpp\void\cc\cclog.h
; Line 12
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 13
	mov	eax, DWORD PTR guid$[rsp]
	mov	DWORD PTR t$[rsp], eax
; Line 14
	mov	rax, QWORD PTR file$[rsp]
	mov	QWORD PTR t$[rsp+8], rax
; Line 15
	mov	eax, DWORD PTR line$[rsp]
	mov	DWORD PTR t$[rsp+16], eax
; Line 16
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR t$[rsp+24], rax
; Line 17
	lea	rax, QWORD PTR t$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 18
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
cccaller ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ccdebug_ PROC
; File W:\cpp\void\cc\cclog.h
; Line 25
	mov	eax, OFFSET FLAT:ccdebugnone
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN2@ccdebug_
	lea	rax, OFFSET FLAT:?dummy@?1??ccdebug_@@9@4Uccsentry_t@@A
	jmp	SHORT $LN1@ccdebug_
$LN2@ccdebug_:
; Line 27
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	QWORD PTR [rax+rcx], 0
	jne	SHORT $LN4@ccdebug_
	int	3
$LN4@ccdebug_:
; Line 29
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax+rcx]
$LN1@ccdebug_:
; Line 30
	ret	0
ccdebug_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tbl$ = 48
ent$ = 56
tv89 = 64
val$ = 72
tv213 = 80
tv197 = 88
tv240 = 96
tv190 = 104
tv187 = 112
$T1 = 120
$T2 = 160
$T3 = 192
$T4 = 224
$T5 = 256
$T6 = 288
ccm$ = 352
isze$ = 360
len$ = 368
key$ = 376
ccdlb_tblset PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 242
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
; Line 243
	lea	rax, OFFSET FLAT:$SG46294
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 243				; 000000f3H
	lea	r8, OFFSET FLAT:$SG46295
	mov	edx, 13
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv197[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv213[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv213[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46293
	mov	rcx, QWORD PTR tv197[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 245
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@ccdlb_tbls
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR tv89[rsp], rax
	jmp	SHORT $LN6@ccdlb_tbls
$LN5@ccdlb_tbls:
	mov	QWORD PTR tv89[rsp], 0
$LN6@ccdlb_tbls:
	mov	rax, QWORD PTR tv89[rsp]
	mov	QWORD PTR tbl$[rsp], rax
; Line 246
	cmp	QWORD PTR tbl$[rsp], 0
	jne	SHORT $LN2@ccdlb_tbls
; Line 247
	mov	edx, DWORD PTR isze$[rsp]
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblini
$LN2@ccdlb_tbls:
; Line 249
	mov	eax, OFFSET FLAT:cckey
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR [rax+rcx], 0
; Line 252
	mov	QWORD PTR val$[rsp], 0
; Line 253
	mov	r8, QWORD PTR key$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	call	ccdbl_query
	mov	QWORD PTR ent$[rsp], rax
; Line 255
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 1
	jne	SHORT $LN3@ccdlb_tbls
; Line 256
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 0
; Line 257
	movsxd	rax, DWORD PTR isze$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR key$[rsp]
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblcat
	mov	QWORD PTR ent$[rsp], rax
; Line 258
	mov	rax, QWORD PTR tbl$[rsp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	QWORD PTR [rcx], rax
$LN3@ccdlb_tbls:
; Line 261
	mov	rax, QWORD PTR ent$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR val$[rsp], rax
; Line 263
	mov	eax, OFFSET FLAT:cckey
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ent$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	QWORD PTR [rax+rcx], rdx
; Line 265
	lea	rax, OFFSET FLAT:$SG46299
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 265				; 00000109H
	lea	r8, OFFSET FLAT:$SG46300
	mov	edx, 14
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv190[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv240[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv240[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46298
	mov	rcx, QWORD PTR tv190[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 266
	movsxd	rax, DWORD PTR isze$[rsp]
	mov	QWORD PTR tv187[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	cdq
	mov	rcx, QWORD PTR tv187[rsp]
	idiv	rcx
; Line 267
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
ccdlb_tblset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tbl$ = 48
ent$ = 56
tv89 = 64
val$ = 72
tv220 = 80
tv204 = 88
tv248 = 96
tv196 = 104
tv193 = 112
$T1 = 120
$T2 = 160
$T3 = 192
$T4 = 224
$T5 = 256
$T6 = 288
ccm$ = 352
isze$ = 360
len$ = 368
key$ = 376
ccdlb_tblput PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 211
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
; Line 212
	lea	rax, OFFSET FLAT:$SG46273
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 212				; 000000d4H
	lea	r8, OFFSET FLAT:$SG46274
	mov	edx, 11
	lea	rcx, QWORD PTR $T5[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv204[rsp], rcx
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rdi, QWORD PTR $T1[rsp]
	mov	QWORD PTR tv220[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv220[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46272
	mov	rcx, QWORD PTR tv204[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 214
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN6@ccdlb_tblp
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR tv89[rsp], rax
	jmp	SHORT $LN7@ccdlb_tblp
$LN6@ccdlb_tblp:
	mov	QWORD PTR tv89[rsp], 0
$LN7@ccdlb_tblp:
	mov	rax, QWORD PTR tv89[rsp]
	mov	QWORD PTR tbl$[rsp], rax
; Line 215
	cmp	QWORD PTR tbl$[rsp], 0
	jne	SHORT $LN2@ccdlb_tblp
; Line 216
	mov	edx, DWORD PTR isze$[rsp]
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblini
$LN2@ccdlb_tblp:
; Line 217
	mov	eax, OFFSET FLAT:cckey
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR [rax+rcx], 0
; Line 220
	mov	QWORD PTR val$[rsp], 0
; Line 222
	mov	r8, QWORD PTR key$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	call	ccdbl_query
	mov	QWORD PTR ent$[rsp], rax
; Line 224
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 1
	jne	$LN3@ccdlb_tblp
; Line 225
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 0
; Line 227
	movsxd	rax, DWORD PTR isze$[rsp]
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR key$[rsp]
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblcat
	mov	QWORD PTR ent$[rsp], rax
; Line 228
	mov	eax, OFFSET FLAT:cckey
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ent$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	QWORD PTR [rax+rcx], rdx
; Line 230
	mov	rax, QWORD PTR ent$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR val$[rsp], rax
; Line 232
	mov	rax, QWORD PTR tbl$[rsp]
	add	rax, 40					; 00000028H
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 233
	jmp	SHORT $LN4@ccdlb_tblp
$LN3@ccdlb_tblp:
; Line 234
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 2
$LN4@ccdlb_tblp:
; Line 236
	lea	rax, OFFSET FLAT:$SG46279
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 236				; 000000ecH
	lea	r8, OFFSET FLAT:$SG46280
	mov	edx, 12
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv196[rsp], rcx
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rdi, QWORD PTR $T3[rsp]
	mov	QWORD PTR tv248[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv248[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46278
	mov	rcx, QWORD PTR tv196[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 237
	movsxd	rax, DWORD PTR isze$[rsp]
	mov	QWORD PTR tv193[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	cdq
	mov	rcx, QWORD PTR tv193[rsp]
	idiv	rcx
; Line 238
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
ccdlb_tblput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv89 = 48
tbl$ = 56
ent$1 = 64
val$ = 72
tv195 = 80
tv180 = 88
tv218 = 96
tv174 = 104
tv171 = 112
$T2 = 120
$T3 = 160
$T4 = 192
$T5 = 224
$T6 = 256
$T7 = 288
ccm$ = 352
isze$ = 360
len$ = 368
key$ = 376
ccdlb_tblget PROC
; File W:\cpp\void\cc\ccdlb.h
; Line 188
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
; Line 189
	lea	rax, OFFSET FLAT:$SG46253
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 189				; 000000bdH
	lea	r8, OFFSET FLAT:$SG46254
	mov	edx, 9
	lea	rcx, QWORD PTR $T6[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv180[rsp], rcx
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rdi, QWORD PTR $T2[rsp]
	mov	QWORD PTR tv195[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv195[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46252
	mov	rcx, QWORD PTR tv180[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 191
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@ccdlb_tblg
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 40					; 00000028H
	mov	QWORD PTR tv89[rsp], rax
	jmp	SHORT $LN6@ccdlb_tblg
$LN5@ccdlb_tblg:
	mov	QWORD PTR tv89[rsp], 0
$LN6@ccdlb_tblg:
	mov	rax, QWORD PTR tv89[rsp]
	mov	QWORD PTR tbl$[rsp], rax
; Line 192
	mov	eax, OFFSET FLAT:cckey
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR [rax+rcx], 0
; Line 195
	mov	QWORD PTR val$[rsp], 0
; Line 197
	cmp	QWORD PTR tbl$[rsp], 0
	je	SHORT $LN2@ccdlb_tblg
; Line 198
	mov	r8, QWORD PTR key$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	call	ccdbl_query
	mov	QWORD PTR ent$1[rsp], rax
; Line 199
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN3@ccdlb_tblg
; Line 200
	mov	eax, OFFSET FLAT:cckey
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR ent$1[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	QWORD PTR [rax+rcx], rdx
; Line 201
	mov	rax, QWORD PTR ent$1[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR val$[rsp], rax
$LN3@ccdlb_tblg:
$LN2@ccdlb_tblg:
; Line 205
	lea	rax, OFFSET FLAT:$SG46258
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 205				; 000000cdH
	lea	r8, OFFSET FLAT:$SG46259
	mov	edx, 10
	lea	rcx, QWORD PTR $T7[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv174[rsp], rcx
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rdi, QWORD PTR $T4[rsp]
	mov	QWORD PTR tv218[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv218[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46257
	mov	rcx, QWORD PTR tv174[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 206
	movsxd	rax, DWORD PTR isze$[rsp]
	mov	QWORD PTR tv171[rsp], rax
	mov	rax, QWORD PTR val$[rsp]
	cdq
	mov	rcx, QWORD PTR tv171[rsp]
	idiv	rcx
; Line 207
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
ccdlb_tblget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
caller$ = 48
size$ = 56
data$ = 64
ccinternalallocator_ PROC
; File W:\cpp\void\cc\cc.c
; Line 494
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	cmp	QWORD PTR size$[rsp], 0
	je	SHORT $LN2@ccinternal
; Line 495
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN3@ccinternal
; Line 496
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	realloc
	jmp	SHORT $LN1@ccinternal
	jmp	SHORT $LN4@ccinternal
$LN3@ccinternal:
; Line 498
	mov	rcx, QWORD PTR size$[rsp]
	call	malloc
	jmp	SHORT $LN1@ccinternal
$LN4@ccinternal:
$LN2@ccinternal:
; Line 500
	mov	rcx, QWORD PTR data$[rsp]
	call	free
; Line 501
	xor	eax, eax
$LN1@ccinternal:
; Line 502
	add	rsp, 40					; 00000028H
	ret	0
ccinternalallocator_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
debug$1 = 56
debug$2 = 64
debug$3 = 72
tv473 = 80
tv444 = 88
tv485 = 96
tv442 = 104
tv521 = 112
tv433 = 120
tv533 = 128
tv431 = 136
tv574 = 144
tv421 = 152
tv586 = 160
tv419 = 168
tv620 = 176
tv414 = 184
tv632 = 192
tv412 = 200
$T4 = 208
$T5 = 240
$T6 = 272
$T7 = 304
$T8 = 336
$T9 = 368
$T10 = 400
$T11 = 432
$T12 = 464
$T13 = 496
$T14 = 528
$T15 = 560
$T16 = 592
$T17 = 624
$T18 = 656
$T19 = 688
$T20 = 720
$T21 = 752
$T22 = 784
$T23 = 816
$T24 = 848
$T25 = 880
$T26 = 912
$T27 = 944
caller$ = 1008
size$ = 1016
data$ = 1024
ccuserallocator_ PROC
; File W:\cpp\void\cc\cc.c
; Line 529
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 984				; 000003d8H
; Line 530
	lea	rax, OFFSET FLAT:$SG46666
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 530				; 00000212H
	lea	r8, OFFSET FLAT:$SG46667
	mov	edx, 19
	lea	rcx, QWORD PTR $T20[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv444[rsp], rcx
	lea	rdx, QWORD PTR $T5[rsp]
	lea	rdi, QWORD PTR $T4[rsp]
	mov	QWORD PTR tv473[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv473[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46665
	mov	rcx, QWORD PTR tv444[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T5[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 532
	cmp	QWORD PTR size$[rsp], 0
	jne	$LN2@ccuserallo
; Line 534
	lea	rax, OFFSET FLAT:$SG46671
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 534				; 00000216H
	lea	r8, OFFSET FLAT:$SG46672
	mov	edx, 20
	lea	rcx, QWORD PTR $T21[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv442[rsp], rcx
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rdi, QWORD PTR $T6[rsp]
	mov	QWORD PTR tv485[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv485[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46670
	mov	rcx, QWORD PTR tv442[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 535
	call	ccdebug_
	mov	QWORD PTR debug$3[rsp], rax
; Line 536
	mov	rax, QWORD PTR data$[rsp]
	sub	rax, 96					; 00000060H
	mov	QWORD PTR block$[rsp], rax
; Line 537
	mov	rdx, QWORD PTR block$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	ccdebug_checkblock
; Line 539
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN4@ccuserallo
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+40], rcx
$LN4@ccuserallo:
; Line 540
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN5@ccuserallo
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+32], rcx
	jmp	SHORT $LN6@ccuserallo
$LN5@ccuserallo:
; Line 541
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	QWORD PTR [rax+64], rcx
$LN6@ccuserallo:
; Line 543
	mov	rax, QWORD PTR debug$3[rsp]
	mov	eax, DWORD PTR [rax+172]
	inc	eax
	mov	rcx, QWORD PTR debug$3[rsp]
	mov	DWORD PTR [rcx+172], eax
; Line 545
	mov	rax, QWORD PTR debug$3[rsp]
	mov	rax, QWORD PTR [rax+144]
	inc	rax
	mov	rcx, QWORD PTR debug$3[rsp]
	mov	QWORD PTR [rcx+144], rax
; Line 546
	mov	rax, QWORD PTR debug$3[rsp]
	mov	rax, QWORD PTR [rax+160]
	mov	rcx, QWORD PTR block$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR debug$3[rsp]
	mov	QWORD PTR [rcx+160], rax
; Line 549
	mov	rax, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+40], 0
; Line 550
	mov	rax, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+32], 0
; Line 552
	mov	rcx, QWORD PTR block$[rsp]
	call	free
; Line 553
	mov	QWORD PTR block$[rsp], 0
; Line 554
	lea	rax, OFFSET FLAT:$SG46677
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 554				; 0000022aH
	lea	r8, OFFSET FLAT:$SG46678
	mov	edx, 21
	lea	rcx, QWORD PTR $T22[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv433[rsp], rcx
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rdi, QWORD PTR $T8[rsp]
	mov	QWORD PTR tv521[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv521[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46676
	mov	rcx, QWORD PTR tv433[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T9[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 555
	jmp	$LN3@ccuserallo
$LN2@ccuserallo:
; Line 556
	cmp	QWORD PTR data$[rsp], 0
	je	$LN7@ccuserallo
; Line 558
	lea	rax, OFFSET FLAT:$SG46682
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 558				; 0000022eH
	lea	r8, OFFSET FLAT:$SG46683
	mov	edx, 22
	lea	rcx, QWORD PTR $T23[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv431[rsp], rcx
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rdi, QWORD PTR $T10[rsp]
	mov	QWORD PTR tv533[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv533[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46681
	mov	rcx, QWORD PTR tv431[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 559
	call	ccdebug_
	mov	QWORD PTR debug$2[rsp], rax
; Line 560
	mov	rax, QWORD PTR data$[rsp]
	sub	rax, 96					; 00000060H
	mov	QWORD PTR block$[rsp], rax
; Line 561
	mov	rdx, QWORD PTR block$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	ccdebug_checkblock
; Line 563
	mov	rax, QWORD PTR debug$2[rsp]
	mov	rax, QWORD PTR [rax+160]
	mov	rcx, QWORD PTR block$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	rcx, QWORD PTR debug$2[rsp]
	mov	QWORD PTR [rcx+160], rax
; Line 565
	mov	rax, QWORD PTR size$[rsp]
	add	rax, 96					; 00000060H
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	realloc
	mov	QWORD PTR block$[rsp], rax
; Line 566
	mov	rax, QWORD PTR block$[rsp]
	lea	rdi, QWORD PTR [rax+48]
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 567
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 569
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN9@ccuserallo
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+40], rcx
$LN9@ccuserallo:
; Line 570
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN10@ccuserallo
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+32], rcx
	jmp	SHORT $LN11@ccuserallo
$LN10@ccuserallo:
; Line 571
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+64], rcx
$LN11@ccuserallo:
; Line 573
	mov	rax, QWORD PTR debug$2[rsp]
	mov	rax, QWORD PTR [rax+136]
	inc	rax
	mov	rcx, QWORD PTR debug$2[rsp]
	mov	QWORD PTR [rcx+136], rax
; Line 574
	mov	rax, QWORD PTR debug$2[rsp]
	mov	rax, QWORD PTR [rax+144]
	inc	rax
	mov	rcx, QWORD PTR debug$2[rsp]
	mov	QWORD PTR [rcx+144], rax
; Line 575
	mov	rax, QWORD PTR debug$2[rsp]
	mov	rax, QWORD PTR [rax+152]
	add	rax, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR debug$2[rsp]
	mov	QWORD PTR [rcx+152], rax
; Line 577
	lea	rax, OFFSET FLAT:$SG46688
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 577				; 00000241H
	lea	r8, OFFSET FLAT:$SG46689
	mov	edx, 23
	lea	rcx, QWORD PTR $T24[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv421[rsp], rcx
	lea	rdx, QWORD PTR $T13[rsp]
	lea	rdi, QWORD PTR $T12[rsp]
	mov	QWORD PTR tv574[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv574[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46687
	mov	rcx, QWORD PTR tv421[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 578
	jmp	$LN8@ccuserallo
$LN7@ccuserallo:
; Line 580
	lea	rax, OFFSET FLAT:$SG46691
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 580				; 00000244H
	lea	r8, OFFSET FLAT:$SG46692
	mov	edx, 24
	lea	rcx, QWORD PTR $T25[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv419[rsp], rcx
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rdi, QWORD PTR $T14[rsp]
	mov	QWORD PTR tv586[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv586[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46690
	mov	rcx, QWORD PTR tv419[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T15[rsp]
	call	ccsentry_enter
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 581
	call	ccdebug_
	mov	QWORD PTR debug$1[rsp], rax
; Line 582
	mov	rax, QWORD PTR size$[rsp]
	add	rax, 96					; 00000060H
	mov	rcx, rax
	call	malloc
	mov	QWORD PTR block$[rsp], rax
; Line 583
	mov	r8d, 96					; 00000060H
	xor	edx, edx
	mov	rcx, QWORD PTR block$[rsp]
	call	memset
; Line 584
	mov	rax, QWORD PTR block$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	mov	QWORD PTR [rax+24], rcx
; Line 585
	mov	rax, QWORD PTR block$[rsp]
	lea	rdi, QWORD PTR [rax+48]
	mov	rsi, QWORD PTR caller$[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 586
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 587
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 588
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 589
	mov	rdx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR debug$1[rsp]
	call	ccsentry_addblock
; Line 591
	mov	rdx, QWORD PTR block$[rsp]
	lea	rcx, OFFSET FLAT:ccuserallocator_
	call	ccdebug_checkblock
; Line 593
	mov	rax, QWORD PTR debug$1[rsp]
	mov	eax, DWORD PTR [rax+168]
	inc	eax
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	DWORD PTR [rcx+168], eax
; Line 594
	mov	rax, QWORD PTR debug$1[rsp]
	mov	rax, QWORD PTR [rax+136]
	inc	rax
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	QWORD PTR [rcx+136], rax
; Line 595
	mov	rax, QWORD PTR debug$1[rsp]
	mov	rax, QWORD PTR [rax+152]
	add	rax, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR debug$1[rsp]
	mov	QWORD PTR [rcx+152], rax
; Line 596
	lea	rax, OFFSET FLAT:$SG46694
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 596				; 00000254H
	lea	r8, OFFSET FLAT:$SG46695
	mov	edx, 25
	lea	rcx, QWORD PTR $T26[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv414[rsp], rcx
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rdi, QWORD PTR $T16[rsp]
	mov	QWORD PTR tv620[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv620[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46693
	mov	rcx, QWORD PTR tv414[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T17[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
$LN8@ccuserallo:
$LN3@ccuserallo:
; Line 599
	lea	rax, OFFSET FLAT:$SG46697
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 599				; 00000257H
	lea	r8, OFFSET FLAT:$SG46698
	mov	edx, 26
	lea	rcx, QWORD PTR $T27[rsp]
	call	cccaller
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	eax, OFFSET FLAT:ccdebugthis
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR tv412[rsp], rcx
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rdi, QWORD PTR $T18[rsp]
	mov	QWORD PTR tv632[rsp], rdi
	mov	rdi, rdx
	mov	rdx, QWORD PTR tv632[rsp]
	mov	rsi, rdx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, OFFSET FLAT:$SG46696
	mov	rcx, QWORD PTR tv412[rsp]
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, QWORD PTR $T19[rsp]
	call	ccsentry_leave
	mov	ecx, OFFSET FLAT:ccdebugthis
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	mov	QWORD PTR [rcx+rdx], rax
; Line 600
	mov	rax, QWORD PTR block$[rsp]
	add	rax, 96					; 00000060H
; Line 601
	add	rsp, 984				; 000003d8H
	pop	rdi
	pop	rsi
	ret	0
ccuserallocator_ ENDP
_TEXT	ENDS
END

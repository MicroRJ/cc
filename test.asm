; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_01KBJDNOO@i@				; `string'
PUBLIC	??_C@_03FKLJIKPC@lli@				; `string'
PUBLIC	??_C@_01PAPGNFGE@c@				; `string'
PUBLIC	??_C@_01INIBCBCB@f@				; `string'
PUBLIC	??_C@_05EIDBELPO@LOCAL@				; `string'
PUBLIC	??_C@_05HCKLDGME@PARAM@				; `string'
PUBLIC	??_C@_05CIPFEEPL@STORE@				; `string'
PUBLIC	??_C@_05JDMAOHF@FETCH@				; `string'
PUBLIC	??_C@_05HNODEPOI@ARITH@				; `string'
PUBLIC	??_C@_04BFLEPEFN@JUMP@				; `string'
PUBLIC	??_C@_05MLBIABON@JUMPT@				; `string'
PUBLIC	??_C@_05LDOMHBDO@JUMPF@				; `string'
PUBLIC	??_C@_07NMOOOLDL@TERNARY@			; `string'
PUBLIC	??_C@_05EMNIMLKD@ENTER@				; `string'
PUBLIC	??_C@_06DLHNAFG@INVOKE@				; `string'
PUBLIC	??_C@_06LJMOENAO@RETURN@			; `string'
;	COMDAT ??_C@_06LJMOENAO@RETURN@
CONST	SEGMENT
??_C@_06LJMOENAO@RETURN@ DB 'RETURN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DLHNAFG@INVOKE@
CONST	SEGMENT
??_C@_06DLHNAFG@INVOKE@ DB 'INVOKE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMNIMLKD@ENTER@
CONST	SEGMENT
??_C@_05EMNIMLKD@ENTER@ DB 'ENTER', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07NMOOOLDL@TERNARY@
CONST	SEGMENT
??_C@_07NMOOOLDL@TERNARY@ DB 'TERNARY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05LDOMHBDO@JUMPF@
CONST	SEGMENT
??_C@_05LDOMHBDO@JUMPF@ DB 'JUMPF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MLBIABON@JUMPT@
CONST	SEGMENT
??_C@_05MLBIABON@JUMPT@ DB 'JUMPT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFLEPEFN@JUMP@
CONST	SEGMENT
??_C@_04BFLEPEFN@JUMP@ DB 'JUMP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HNODEPOI@ARITH@
CONST	SEGMENT
??_C@_05HNODEPOI@ARITH@ DB 'ARITH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JDMAOHF@FETCH@
CONST	SEGMENT
??_C@_05JDMAOHF@FETCH@ DB 'FETCH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05CIPFEEPL@STORE@
CONST	SEGMENT
??_C@_05CIPFEEPL@STORE@ DB 'STORE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HCKLDGME@PARAM@
CONST	SEGMENT
??_C@_05HCKLDGME@PARAM@ DB 'PARAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EIDBELPO@LOCAL@
CONST	SEGMENT
??_C@_05EIDBELPO@LOCAL@ DB 'LOCAL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01INIBCBCB@f@
CONST	SEGMENT
??_C@_01INIBCBCB@f@ DB 'f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01PAPGNFGE@c@
CONST	SEGMENT
??_C@_01PAPGNFGE@c@ DB 'c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03FKLJIKPC@lli@
CONST	SEGMENT
??_C@_03FKLJIKPC@lli@ DB 'lli', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i@
CONST	SEGMENT
??_C@_01KBJDNOO@i@ DB 'i', 00H				; `string'
CONST	ENDS
CONST	SEGMENT
pf	DB	069H
	DB	075H
	DB	063H
	DB	066H
fn	DB	078H
	DB	079H
	DB	07aH
	DB	077H
	ORG $+8
stbsp__bot DQ	03ff0000000000000r		; 1
	DQ	04024000000000000r		; 10
	DQ	04059000000000000r		; 100
	DQ	0408f400000000000r		; 1000
	DQ	040c3880000000000r		; 10000
	DQ	040f86a0000000000r		; 100000
	DQ	0412e848000000000r		; 1e+06
	DQ	0416312d000000000r		; 1e+07
	DQ	04197d78400000000r		; 1e+08
	DQ	041cdcd6500000000r		; 1e+09
	DQ	04202a05f20000000r		; 1e+10
	DQ	042374876e8000000r		; 1e+11
	DQ	0426d1a94a2000000r		; 1e+12
	DQ	042a2309ce5400000r		; 1e+13
	DQ	042d6bcc41e900000r		; 1e+14
	DQ	0430c6bf526340000r		; 1e+15
	DQ	04341c37937e08000r		; 1e+16
	DQ	04376345785d8a000r		; 1e+17
	DQ	043abc16d674ec800r		; 1e+18
	DQ	043e158e460913d00r		; 1e+19
	DQ	04415af1d78b58c40r		; 1e+20
	DQ	0444b1ae4d6e2ef50r		; 1e+21
	DQ	04480f0cf064dd592r		; 1e+22
	ORG $+8
stbsp__negbot DQ 03fb999999999999ar		; 0.1
	DQ	03f847ae147ae147br		; 0.01
	DQ	03f50624dd2f1a9fcr		; 0.001
	DQ	03f1a36e2eb1c432dr		; 0.0001
	DQ	03ee4f8b588e368f1r		; 1e-05
	DQ	03eb0c6f7a0b5ed8dr		; 1e-06
	DQ	03e7ad7f29abcaf48r		; 1e-07
	DQ	03e45798ee2308c3ar		; 1e-08
	DQ	03e112e0be826d695r		; 1e-09
	DQ	03ddb7cdfd9d7bdbbr		; 1e-10
	DQ	03da5fd7fe1796495r		; 1e-11
	DQ	03d719799812dea11r		; 1e-12
	DQ	03d3c25c268497682r		; 1e-13
	DQ	03d06849b86a12b9br		; 1e-14
	DQ	03cd203af9ee75616r		; 1e-15
	DQ	03c9cd2b297d889bcr		; 1e-16
	DQ	03c670ef54646d497r		; 1e-17
	DQ	03c32725dd1d243acr		; 1e-18
	DQ	03bfd83c94fb6d2acr		; 1e-19
	DQ	03bc79ca10c924223r		; 1e-20
	DQ	03b92e3b40a0e9b4fr		; 1e-21
	DQ	03b5e392010175ee6r		; 1e-22
stbsp__negboterr DQ 0bc5999999999999ar		; -5.55112e-18
	DQ	0bc0eb851eb851eb8r		; -2.08167e-19
	DQ	0bbd89374bc6a7efar		; -2.08167e-20
	DQ	0bbb6a161e4f765fer		; -4.79217e-21
	DQ	0bb8ee78183f91e64r		; -8.18031e-22
	DQ	03b4b5a63f9a49c2cr		; 4.52519e-23
	DQ	03b15e1e99483b023r		; 4.52519e-24
	DQ	0bad03023df2d4c94r		; -2.09226e-25
	DQ	0bab34674bfabb83br		; -6.22816e-26
	DQ	0ba720a5465df8d2cr		; -3.64322e-27
	DQ	03a47f7bc7b4d28aar		; 6.0503e-28
	DQ	039f97f27f0f6e886r		; 2.01134e-29
	DQ	0b9cecd79a5a0df95r		; -3.03737e-30
	DQ	0394ea70909833de7r		; 1.18069e-32
	DQ	0b97937831647f5a0r		; -7.77054e-32
	DQ	03925b4c2ebe68799r		; 2.09022e-33
	DQ	0b90db7b2080a3029r		; -7.15424e-34
	DQ	0b8d7c628066e8ceer		; -7.15424e-35
	DQ	0388a52b31e9e3d07r		; 2.47541e-36
	DQ	038675447a5d8e536r		; 5.48467e-37
	DQ	0383f769fb7e0b75er		; 9.24625e-38
	DQ	0b7fa7566d9cba769r		; -4.85968e-39
stbsp__top DQ	044b52d02c7e14af6r		; 1e+23
	DQ	0497c06a5ec5433c6r		; 1e+46
	DQ	04e428bc8abe49f64r		; 1e+69
	DQ	053088ba3bf284e24r		; 1e+92
	DQ	057d03e29f5c2b18cr		; 1e+115
	DQ	05c957f48bb41db7cr		; 1e+138
	DQ	0615c73892ecbfbf4r		; 1e+161
	DQ	06622d3d6f88f0b3dr		; 1e+184
	DQ	06ae8eb0138858d0ar		; 1e+207
	DQ	06fb07d457124123dr		; 1e+230
	DQ	07475d2ce55747a18r		; 1e+253
	DQ	0793ce2137f743382r		; 1e+276
	DQ	07e031cfd3999f7b0r		; 1e+299
	ORG $+8
stbsp__negtop DQ 03b282db34012b251r		; 1e-23
	DQ	0366244ce242c5561r		; 1e-46
	DQ	0319b9b6364f30304r		; 1e-69
	DQ	02cd4dbf7b3f71cb7r		; 1e-92
	DQ	0280f8587e7083e30r		; 1e-115
	DQ	02347d12a4670c123r		; 1e-138
	DQ	01e81fee341fc585dr		; 1e-161
	DQ	019bb31bb5dc320d2r		; 1e-184
	DQ	014f48c22ca71a1bdr		; 1e-207
	DQ	0102f0ce4839198dbr		; 1e-230
	DQ	00b677603725064a8r		; 1e-253
	DQ	006a1ba03f5b21000r		; 1e-276
	DQ	001dac9a7b3b7302fr		; 1e-299
	ORG $+8
stbsp__toperr DQ 04160000000000000r		; 8.38861e+06
	DQ	045ebb542c80deb40r		; 6.86018e+28
	DQ	0cae83b80b9aab60ar		; -7.25314e+52
	DQ	0cfa32e22d17a166cr		; -4.33773e+75
	DQ	0d4523606902e180er		; -1.55594e+98
	DQ	0d9296fb782462e87r		; -3.28416e+121
	DQ	0ddf358952c0bd011r		; -3.77459e+144
	DQ	0e2a78c1376a34b6cr		; -1.73567e+167
	DQ	0e7817569fc243adfr		; -3.88936e+190
	DQ	0ec5d9365a897aaa6r		; -9.95664e+213
	DQ	07119050c256123a0r		; 6.36413e+236
	DQ	0f5db1799d76cc7a6r		; -5.20691e+259
	DQ	0faa213fe39571a38r		; -5.25048e+282
	ORG $+8
stbsp__negtoperr DQ 037c13badb829e079r		; 3.95653e-40
	DQ	0b2ee46a98d3d9f64r		; -2.2999e-63
	DQ	02e3227c7218a2b65r		; 3.65062e-86
	DQ	02951d96999aa01e9r		; 1.18752e-109
	DQ	0a4acc2229efc3962r		; -5.06449e-132
	DQ	09fecd04a2263407ar		; -6.71568e-155
	DQ	09b123b80f187a157r		; -2.81208e-178
	DQ	0965c4e22914ed912r		; -5.77789e-201
	DQ	0119bc296cdf42f82r		; 7.49971e-224
	DQ	08cc9f9e7f4e16fe1r		; -4.64397e-247
	DQ	0880aeb0a72a8902ar		; -6.36911e-270
	DQ	0834e228e12c13408r		; -9.43681e-293
	DQ	00000000000fa1259r		; 8.09709e-317
	ORG $+8
stbsp__powten DQ 0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000064H
	DQ	00000000000003e8H
	DQ	0000000000002710H
	DQ	00000000000186a0H
	DQ	00000000000f4240H
	DQ	0000000000989680H
	DQ	0000000005f5e100H
	DQ	000000003b9aca00H
	DQ	00000002540be400H
	DQ	000000174876e800H
	DQ	000000e8d4a51000H
	DQ	000009184e72a000H
	DQ	00005af3107a4000H
	DQ	00038d7ea4c68000H
	DQ	002386f26fc10000H
	DQ	016345785d8a0000H
	DQ	0de0b6b3a7640000H
	DQ	8ac7230489e80000H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	stbsp_vsprintf
PUBLIC	stbsp_vsnprintf
PUBLIC	stbsp_sprintf
PUBLIC	stbsp_snprintf
PUBLIC	stbsp_vsprintfcb
PUBLIC	stbsp_set_separators
PUBLIC	fib
PUBLIC	gen_type
PUBLIC	gen_vectype
PUBLIC	gen_ptrtype
PUBLIC	gen_vartype
PUBLIC	gen_fixtype
PUBLIC	gen_typename_ex
PUBLIC	gen_typename
PUBLIC	emit_typename
PUBLIC	emit_modifier
PUBLIC	emit_vardecl_ex
PUBLIC	emit_vardecl
PUBLIC	emit_fundecl
PUBLIC	genmake
PUBLIC	emit_vecoprari
PUBLIC	emit_vectype
PUBLIC	emit_type
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_04MLLLIHIP@null@				; `string'
PUBLIC	??_C@_05FOLKAOND@_KMGT@				; `string'
PUBLIC	??_C@_05JPHLCBNH@_kMGT@				; `string'
PUBLIC	??_C@_03ICJPMMHB@NaN@				; `string'
PUBLIC	??_C@_03EJEJBNFP@Inf@				; `string'
PUBLIC	??_C@_02PCIJFNDE@?$AN?6@			; `string'
PUBLIC	??_C@_0BE@GMJDDHPH@?$CFs?3?5?$CFs?$FL?$CFi?$FN?5?$CFs?$CI?$CJ?5?$CFs?6@ ; `string'
PUBLIC	??_C@_05MNIOPOB@__asm@				; `string'
PUBLIC	??_C@_07BECPAABE@__based@			; `string'
PUBLIC	??_C@_07KOLFKCDI@__cdecl@			; `string'
PUBLIC	??_C@_09HIJEGCPM@__clrcall@			; `string'
PUBLIC	??_C@_0L@JMKHOMEK@__fastcall@			; `string'
PUBLIC	??_C@_08FEOELIIN@__inline@			; `string'
PUBLIC	??_C@_09IFJBGAPI@__stdcall@			; `string'
PUBLIC	??_C@_0L@NPHFGOKO@__thiscall@			; `string'
PUBLIC	??_C@_0M@FJBNGECK@__vectorcal@			; `string'
PUBLIC	??_C@_08LCAALENH@_Alignof@			; `string'
PUBLIC	??_C@_08IPCLHPMJ@_Alignas@			; `string'
PUBLIC	??_C@_05BNCCCJPP@const@				; `string'
PUBLIC	??_C@_08NGGFOJBB@restrict@			; `string'
PUBLIC	??_C@_08PABEKFH@volatile@			; `string'
PUBLIC	??_C@_06OGMBMJA@inline@				; `string'
PUBLIC	??_C@_09JEIHJDJD@_Noreturn@			; `string'
PUBLIC	??_C@_06CPIODIKA@signed@			; `string'
PUBLIC	??_C@_08CLLOMHGD@unsigned@			; `string'
PUBLIC	??_C@_06EBGKOKIG@__int8@			; `string'
PUBLIC	??_C@_07ICFHOGAF@__int16@			; `string'
PUBLIC	??_C@_07OFLPPHGP@__int32@			; `string'
PUBLIC	??_C@_07LFCOJCAC@__int64@			; `string'
PUBLIC	??_C@_06BNJCAIGJ@double@			; `string'
PUBLIC	??_C@_05KNFBNCOH@float@				; `string'
PUBLIC	??_C@_04GOKPGOLB@long@				; `string'
PUBLIC	??_C@_03JBIPMCLC@int@				; `string'
PUBLIC	??_C@_05BFKKPKCG@short@				; `string'
PUBLIC	??_C@_04ENMBGAPA@char@				; `string'
PUBLIC	??_C@_04GKJNKENE@void@				; `string'
PUBLIC	??_C@_05HIFAKALE@_Bool@				; `string'
PUBLIC	??_C@_08PLEDNCDB@_Complex@			; `string'
PUBLIC	??_C@_07LPOMPHGP@_Atomic@			; `string'
PUBLIC	??_C@_04DBJPMPLO@enum@				; `string'
PUBLIC	??_C@_06PBJBIPGK@struct@			; `string'
PUBLIC	??_C@_07FIDIHKEG@typedef@			; `string'
PUBLIC	??_C@_04HAPDLBFF@auto@				; `string'
PUBLIC	??_C@_06PAMNHHEG@extern@			; `string'
PUBLIC	??_C@_08DHHIDNEP@register@			; `string'
PUBLIC	??_C@_06GGHJAEBN@static@			; `string'
PUBLIC	??_C@_0O@COIIMKFA@_Thread_local@		; `string'
PUBLIC	??_C@_0L@LOEMFGDG@__declspec@			; `string'
PUBLIC	??_C@_02HEBPBKGD@if@				; `string'
PUBLIC	??_C@_06DOPOGBGP@switch@			; `string'
PUBLIC	??_C@_04FHMCPBIP@else@				; `string'
PUBLIC	??_C@_04CKOINMPC@case@				; `string'
PUBLIC	??_C@_07DLHCIBDH@default@			; `string'
PUBLIC	??_C@_03JOHEBPFF@for@				; `string'
PUBLIC	??_C@_05OODBEKIG@while@				; `string'
PUBLIC	??_C@_02KNAFDCHJ@do@				; `string'
PUBLIC	??_C@_04MABHPDAO@goto@				; `string'
PUBLIC	??_C@_06LNOFJDNM@return@			; `string'
PUBLIC	??_C@_05ELPHFHOI@break@				; `string'
PUBLIC	??_C@_08DLICDMBN@continue@			; `string'
PUBLIC	??_C@_0BP@IKEJFDCA@function?5that?5returns?5function@ ; `string'
PUBLIC	??_C@_03HMEPACKF@war@				; `string'
PUBLIC	??_C@_0CB@OMCDEOEM@ccread_direct_decl_name_modifie@ ; `string'
PUBLIC	??_C@_0BL@OBLHEIFP@W?3?2cpp?2void?2ktt?9c?2ccread?4c@ ; `string'
PUBLIC	??_C@_0BM@MNHMNFH@function?5that?5returns?5array@ ; `string'
PUBLIC	??_C@_06PHJKMIOD@$decls@			; `string'
PUBLIC	??_C@_06JABCEPLP@$enter@			; `string'
PUBLIC	??_C@_06LMOJBBHE@$leave@			; `string'
PUBLIC	??_C@_04GHJNJNPO@main@				; `string'
PUBLIC	??_C@_0P@CGIBHDEL@constant?9value@		; `string'
PUBLIC	??_C@_0O@EBBNFLMJ@?8?$CFs?8?3localloc@		; `string'
PUBLIC	??_C@_0N@OBPGLKBF@greater?9than@		; `string'
PUBLIC	??_C@_0BB@JDDHICPG@greater?9than?9eql@		; `string'
PUBLIC	??_C@_03KCMAIMAP@sub@				; `string'
PUBLIC	??_C@_03BDGOHNNK@add@				; `string'
PUBLIC	??_C@_09NBKMMCFH@fetch?3?5?$CFs@		; `string'
PUBLIC	??_C@_0BO@DFPLCIIJ@fib?5c?3?$CFi?5?$CFf?$CIs?$CJ?5?9?5cc?3?$CFi?5?$CFf?$CIs?$CJ?6@ ; `string'
PUBLIC	??_C@_04JDNGKEJO@?$CFc?$CFi@			; `string'
PUBLIC	??_C@_07ELIBNAHE@?$CFc?$CFi_?$CFi@		; `string'
PUBLIC	??_C@_03PKIJPMHF@x?$CFi@			; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK@				; `string'
PUBLIC	??_C@_01HNPIGOCE@?$CG@				; `string'
PUBLIC	??_C@_02GPECMEKF@?$FL?$FN@			; `string'
PUBLIC	??_C@_03IKGEINEE@?$CFs?5@			; `string'
PUBLIC	??_C@_02HAOIJKIC@?$CFc@				; `string'
PUBLIC	??_C@_07PGOEDBHP@static?5@			; `string'
PUBLIC	??_C@_04JEGEICAJ@?$AN?6?$CFs@			; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI@				; `string'
PUBLIC	??_C@_01IHBHIGKO@?0@				; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ@				; `string'
PUBLIC	??_C@_03MPLDLMAM@?$CFsm@			; `string'
PUBLIC	??_C@_02MNJOIFPO@?$HL?5@			; `string'
PUBLIC	??_C@_01ICJEACDI@?$DL@				; `string'
PUBLIC	??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@ ; `string'
PUBLIC	??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@ ; `string'
PUBLIC	??_C@_03LFNJCDHL@?$HN?$AN?6@			; `string'
PUBLIC	??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@ ; `string'
PUBLIC	??_C@_03PBLGLLIO@?$CJ?$AN?6@			; `string'
PUBLIC	??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@ ; `string'
PUBLIC	??_C@_0BA@GHJONKJL@typedef?5struct?5@		; `string'
PUBLIC	??_C@_01HCONENDN@?$HL@				; `string'
PUBLIC	??_C@_04DDJEOHF@?$AN?6?5?5@			; `string'
PUBLIC	??_C@_02MJBDPJEM@?$HN?5@			; `string'
PUBLIC	??_C@_03LKGCEJK@?$DL?$AN?6@			; `string'
PUBLIC	??_C@_02FPIMKNGF@?$CK?$DN@			; `string'
PUBLIC	??_C@_01KMDKNFGN@?1@				; `string'
PUBLIC	??_C@_02FJEHGPIO@?1?$DN@			; `string'
PUBLIC	??_C@_01MIFGBAGJ@?$CL@				; `string'
PUBLIC	??_C@_02FOEOMHFC@?$CL?$DN@			; `string'
PUBLIC	??_C@_01JOAMLHOP@?9@				; `string'
PUBLIC	??_C@_02FKMDLLOA@?9?$DN@			; `string'
PUBLIC	??_C@_0L@MLAPBNHN@log?5test?51@			; `string'
PUBLIC	??_C@_03MGHMBJCF@log@				; `string'
PUBLIC	??_C@_06EKBLEAK@test?4c@			; `string'
PUBLIC	??_C@_0L@OACCEOLO@log?5test?52@			; `string'
PUBLIC	??_C@_0L@PJDJHPPP@log?5test?53@			; `string'
PUBLIC	??_C@_0L@NNJAJELN@test?4svm?4c@			; `string'
PUBLIC	??_C@_0CEP@GDNJNAFF@?$CDdefine?5f64?5double?$AN?6?$CDdefine?5f32@ ; `string'
PUBLIC	??_C@_09JFGGGBPA@gen?4ktt?4c@			; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	free:PROC
EXTRN	malloc:PROC
EXTRN	realloc:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?buf@?1??ccformatv@@9@4PADA
_TLS	SEGMENT
?buf@?1??ccformatv@@9@4PADA DB 0ffH DUP (?)		; `ccformatv'::`2'::buf
_TLS	ENDS
;	COMDAT ?buf@?1??cctrace_@@9@4PADA
_BSS	SEGMENT
?buf@?1??cctrace_@@9@4PADA DB 0fffH DUP (?)		; `cctrace_'::`2'::buf
_BSS	ENDS
_TLS	SEGMENT
ccerr	DD	01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
ctype_flo32 DQ	01H DUP (?)
ctype_flo64 DQ	01H DUP (?)
ctype_int64 DQ	01H DUP (?)
ctype_int32 DQ	01H DUP (?)
ctype_int16 DQ	01H DUP (?)
ctype_int8 DQ	01H DUP (?)
ctype_uint64 DQ	01H DUP (?)
ctype_uint32 DQ	01H DUP (?)
ctype_uint16 DQ	01H DUP (?)
ctype_uint8 DQ	01H DUP (?)
ctype_void DQ	01H DUP (?)
func_decls DQ	01H DUP (?)
vari_decls DQ	01H DUP (?)
symbols	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
_BSS	SEGMENT
?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A DB 038H DUP (?) ; `kttc__peek_ahead'::`2'::end_tok
_BSS	ENDS
;	COMDAT ?buf@?1??gen_typename@@9@4PADA
_BSS	SEGMENT
?buf@?1??gen_typename@@9@4PADA DB 020H DUP (?)		; `gen_typename'::`2'::buf
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+83
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctrace_ DD imagerel cctrace_
	DD	imagerel cctrace_+126
	DD	imagerel $unwind$cctrace_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccopenfile DD imagerel ccopenfile
	DD	imagerel ccopenfile+60
	DD	imagerel $unwind$ccopenfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccpullfile DD imagerel ccpullfile
	DD	imagerel ccpullfile+158
	DD	imagerel $unwind$ccpullfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccpushfile DD imagerel ccpushfile
	DD	imagerel ccpushfile+106
	DD	imagerel $unwind$ccpushfile
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccclocktick DD imagerel ccclocktick
	DD	imagerel ccclocktick+25
	DD	imagerel $unwind$ccclocktick
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccclocksecs DD imagerel ccclocksecs
	DD	imagerel ccclocksecs+94
	DD	imagerel $unwind$ccclocksecs
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_vsprintf DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$stbsp_vsprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_vsnprintf DD imagerel $LN23
	DD	imagerel $LN23+280
	DD	imagerel $unwind$stbsp_vsnprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_sprintf DD imagerel $LN4
	DD	imagerel $LN4+49
	DD	imagerel $unwind$stbsp_sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_snprintf DD imagerel $LN4
	DD	imagerel $LN4+29
	DD	imagerel $unwind$stbsp_snprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp_vsprintfcb DD imagerel $LN1222
	DD	imagerel $LN1222+7104
	DD	imagerel $unwind$stbsp_vsprintfcb
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp__real_to_str DD imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel $unwind$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$stbsp__real_to_str DD imagerel stbsp__real_to_str+288
	DD	imagerel stbsp__real_to_str+293
	DD	imagerel $chain$0$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stbsp__real_to_str DD imagerel stbsp__real_to_str+293
	DD	imagerel stbsp__real_to_str+971
	DD	imagerel $chain$1$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stbsp__real_to_str DD imagerel stbsp__real_to_str+971
	DD	imagerel stbsp__real_to_str+997
	DD	imagerel $chain$2$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$stbsp__real_to_str DD imagerel stbsp__real_to_str+997
	DD	imagerel stbsp__real_to_str+1019
	DD	imagerel $chain$3$stbsp__real_to_str
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+432
	DD	imagerel $unwind$stbsp__raise_to_power10
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10+432
	DD	imagerel stbsp__raise_to_power10+2447
	DD	imagerel $chain$1$stbsp__raise_to_power10
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10+2447
	DD	imagerel stbsp__raise_to_power10+2493
	DD	imagerel $chain$2$stbsp__raise_to_power10
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccformatv DD imagerel ccformatv
	DD	imagerel ccformatv+63
	DD	imagerel $unwind$ccformatv
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccformatex DD imagerel ccformatex
	DD	imagerel ccformatex+29
	DD	imagerel $unwind$ccformatex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccformat DD imagerel ccformat
	DD	imagerel ccformat+83
	DD	imagerel $unwind$ccformat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblget DD imagerel ccdlb_tblget
	DD	imagerel ccdlb_tblget+115
	DD	imagerel $unwind$ccdlb_tblget
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblput DD imagerel ccdlb_tblput
	DD	imagerel ccdlb_tblput+242
	DD	imagerel $unwind$ccdlb_tblput
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccdlb_tblput DD imagerel ccdlb_tblput+242
	DD	imagerel ccdlb_tblput+407
	DD	imagerel $chain$0$ccdlb_tblput
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccdlb_tblput DD imagerel ccdlb_tblput+407
	DD	imagerel ccdlb_tblput+501
	DD	imagerel $chain$1$ccdlb_tblput
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_arradd_ DD imagerel ccdlb_arradd_
	DD	imagerel ccdlb_arradd_+140
	DD	imagerel $unwind$ccdlb_arradd_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_arradd DD imagerel ccdlb_arradd
	DD	imagerel ccdlb_arradd+180
	DD	imagerel $unwind$ccdlb_arradd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_stradd DD imagerel ccdlb_stradd
	DD	imagerel ccdlb_stradd+109
	DD	imagerel $unwind$ccdlb_stradd
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblini DD imagerel ccdlb_tblini
	DD	imagerel ccdlb_tblini+25
	DD	imagerel $unwind$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccdlb_tblini DD imagerel ccdlb_tblini+25
	DD	imagerel ccdlb_tblini+32
	DD	imagerel $chain$0$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccdlb_tblini DD imagerel ccdlb_tblini+32
	DD	imagerel ccdlb_tblini+144
	DD	imagerel $chain$2$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccdlb_tblini DD imagerel ccdlb_tblini+144
	DD	imagerel ccdlb_tblini+176
	DD	imagerel $chain$3$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ccdlb_tblini DD imagerel ccdlb_tblini+176
	DD	imagerel ccdlb_tblini+194
	DD	imagerel $chain$4$ccdlb_tblini
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblent_ DD imagerel ccdlb_tblent_
	DD	imagerel ccdlb_tblent_+232
	DD	imagerel $unwind$ccdlb_tblent_
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccdlb_tblcat DD imagerel ccdlb_tblcat
	DD	imagerel ccdlb_tblcat+197
	DD	imagerel $unwind$ccdlb_tblcat
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstr_vcatf DD imagerel ccstr_vcatf
	DD	imagerel ccstr_vcatf+121
	DD	imagerel $unwind$ccstr_vcatf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstr_catf DD imagerel ccstr_catf
	DD	imagerel ccstr_catf+106
	DD	imagerel $unwind$ccstr_catf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_new DD imagerel cctree_new
	DD	imagerel cctree_new+121
	DD	imagerel $unwind$cctree_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_flo32@@YAXXZ DD imagerel ??__Ectype_flo32@@YAXXZ
	DD	imagerel ??__Ectype_flo32@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_flo32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_flo64@@YAXXZ DD imagerel ??__Ectype_flo64@@YAXXZ
	DD	imagerel ??__Ectype_flo64@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_flo64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int64@@YAXXZ DD imagerel ??__Ectype_int64@@YAXXZ
	DD	imagerel ??__Ectype_int64@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_int64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int32@@YAXXZ DD imagerel ??__Ectype_int32@@YAXXZ
	DD	imagerel ??__Ectype_int32@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_int32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int16@@YAXXZ DD imagerel ??__Ectype_int16@@YAXXZ
	DD	imagerel ??__Ectype_int16@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_int16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int8@@YAXXZ DD imagerel ??__Ectype_int8@@YAXXZ
	DD	imagerel ??__Ectype_int8@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_int8@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint64@@YAXXZ DD imagerel ??__Ectype_uint64@@YAXXZ
	DD	imagerel ??__Ectype_uint64@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_uint64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint32@@YAXXZ DD imagerel ??__Ectype_uint32@@YAXXZ
	DD	imagerel ??__Ectype_uint32@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_uint32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint16@@YAXXZ DD imagerel ??__Ectype_uint16@@YAXXZ
	DD	imagerel ??__Ectype_uint16@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_uint16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint8@@YAXXZ DD imagerel ??__Ectype_uint8@@YAXXZ
	DD	imagerel ??__Ectype_uint8@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_uint8@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_void@@YAXXZ DD imagerel ??__Ectype_void@@YAXXZ
	DD	imagerel ??__Ectype_void@@YAXXZ+96
	DD	imagerel $unwind$??__Ectype_void@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_clone DD imagerel cctree_clone
	DD	imagerel cctree_clone+134
	DD	imagerel $unwind$cctree_clone
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctype_new_ptr DD imagerel cctype_new_ptr
	DD	imagerel cctype_new_ptr+66
	DD	imagerel $unwind$cctype_new_ptr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctype_new_arr DD imagerel cctype_new_arr
	DD	imagerel cctype_new_arr+66
	DD	imagerel $unwind$cctype_new_arr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctype_new_fun DD imagerel cctype_new_fun
	DD	imagerel cctype_new_fun+83
	DD	imagerel $unwind$cctype_new_fun
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_struct DD imagerel cctree_struct
	DD	imagerel cctree_struct+116
	DD	imagerel $unwind$cctree_struct
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_translation_unit DD imagerel cctree_translation_unit
	DD	imagerel cctree_translation_unit+93
	DD	imagerel $unwind$cctree_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_group DD imagerel cctree_group
	DD	imagerel cctree_group+35
	DD	imagerel $unwind$cctree_group
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_call DD imagerel cctree_call
	DD	imagerel cctree_call+51
	DD	imagerel $unwind$cctree_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_block DD imagerel cctree_block
	DD	imagerel cctree_block+35
	DD	imagerel $unwind$cctree_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_while DD imagerel cctree_while
	DD	imagerel cctree_while+51
	DD	imagerel $unwind$cctree_while
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_label DD imagerel cctree_label
	DD	imagerel cctree_label+81
	DD	imagerel $unwind$cctree_label
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_goto DD imagerel cctree_goto
	DD	imagerel cctree_goto+58
	DD	imagerel $unwind$cctree_goto
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_return DD imagerel cctree_return
	DD	imagerel cctree_return+35
	DD	imagerel $unwind$cctree_return
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_decl_name DD imagerel cctree_decl_name
	DD	imagerel cctree_decl_name+88
	DD	imagerel $unwind$cctree_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_decl DD imagerel cctree_decl
	DD	imagerel cctree_decl+51
	DD	imagerel $unwind$cctree_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_identifier DD imagerel cctree_identifier
	DD	imagerel cctree_identifier+35
	DD	imagerel $unwind$cctree_identifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_unary DD imagerel cctree_unary
	DD	imagerel cctree_unary+52
	DD	imagerel $unwind$cctree_unary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_binary DD imagerel cctree_binary
	DD	imagerel cctree_binary+61
	DD	imagerel $unwind$cctree_binary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_ternary DD imagerel cctree_ternary
	DD	imagerel cctree_ternary+60
	DD	imagerel $unwind$cctree_ternary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_constant DD imagerel cctree_constant
	DD	imagerel cctree_constant+55
	DD	imagerel $unwind$cctree_constant
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_decl DD imagerel cctree_solve_decl
	DD	imagerel cctree_solve_decl+571
	DD	imagerel $unwind$cctree_solve_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_statement DD imagerel cctree_solve_statement
	DD	imagerel cctree_solve_statement+139
	DD	imagerel $unwind$cctree_solve_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_include_invokeable_symbol DD imagerel cctree_include_invokeable_symbol
	DD	imagerel cctree_include_invokeable_symbol+109
	DD	imagerel $unwind$cctree_include_invokeable_symbol
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_resolve_symbol DD imagerel cctree_resolve_symbol
	DD	imagerel cctree_resolve_symbol+115
	DD	imagerel $unwind$cctree_resolve_symbol
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_resolve_call_symbol_allusion DD imagerel cctree_resolve_call_symbol_allusion
	DD	imagerel cctree_resolve_call_symbol_allusion+116
	DD	imagerel $unwind$cctree_resolve_call_symbol_allusion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cctree_resolve_call_symbol_allusion DD imagerel cctree_resolve_call_symbol_allusion+116
	DD	imagerel cctree_resolve_call_symbol_allusion+183
	DD	imagerel $chain$0$cctree_resolve_call_symbol_allusion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cctree_resolve_call_symbol_allusion DD imagerel cctree_resolve_call_symbol_allusion+183
	DD	imagerel cctree_resolve_call_symbol_allusion+207
	DD	imagerel $chain$1$cctree_resolve_call_symbol_allusion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_resolve_symbol_allusion DD imagerel cctree_resolve_symbol_allusion
	DD	imagerel cctree_resolve_symbol_allusion+116
	DD	imagerel $unwind$cctree_resolve_symbol_allusion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cctree_resolve_symbol_allusion DD imagerel cctree_resolve_symbol_allusion+116
	DD	imagerel cctree_resolve_symbol_allusion+183
	DD	imagerel $chain$0$cctree_resolve_symbol_allusion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cctree_resolve_symbol_allusion DD imagerel cctree_resolve_symbol_allusion+183
	DD	imagerel cctree_resolve_symbol_allusion+207
	DD	imagerel $chain$1$cctree_resolve_symbol_allusion
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_binary DD imagerel cctree_solve_binary
	DD	imagerel cctree_solve_binary+61
	DD	imagerel $unwind$cctree_solve_binary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_rvalue DD imagerel cctree_solve_rvalue
	DD	imagerel cctree_solve_rvalue+99
	DD	imagerel $unwind$cctree_solve_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_call DD imagerel cctree_solve_call
	DD	imagerel cctree_solve_call+257
	DD	imagerel $unwind$cctree_solve_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_block DD imagerel cctree_solve_block
	DD	imagerel cctree_solve_block+70
	DD	imagerel $unwind$cctree_solve_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve_decl_name DD imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+129
	DD	imagerel $unwind$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cctree_solve_decl_name DD imagerel cctree_solve_decl_name+129
	DD	imagerel cctree_solve_decl_name+385
	DD	imagerel $chain$1$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cctree_solve_decl_name DD imagerel cctree_solve_decl_name+385
	DD	imagerel cctree_solve_decl_name+492
	DD	imagerel $chain$2$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cctree_solve_decl_name DD imagerel cctree_solve_decl_name+492
	DD	imagerel cctree_solve_decl_name+502
	DD	imagerel $chain$3$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cctree_solve_decl_name DD imagerel cctree_solve_decl_name+502
	DD	imagerel cctree_solve_decl_name+508
	DD	imagerel $chain$4$cctree_solve_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cctree_solve DD imagerel cctree_solve
	DD	imagerel cctree_solve+136
	DD	imagerel $unwind$cctree_solve
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_local DD imagerel ccedict_local
	DD	imagerel ccedict_local+47
	DD	imagerel $unwind$ccedict_local
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_param DD imagerel ccedict_param
	DD	imagerel ccedict_param+47
	DD	imagerel $unwind$ccedict_param
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_store DD imagerel ccedict_store
	DD	imagerel ccedict_store+51
	DD	imagerel $unwind$ccedict_store
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_fetch DD imagerel ccedict_fetch
	DD	imagerel ccedict_fetch+35
	DD	imagerel $unwind$ccedict_fetch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_arith DD imagerel ccedict_arith
	DD	imagerel ccedict_arith+66
	DD	imagerel $unwind$ccedict_arith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_enter DD imagerel ccedict_enter
	DD	imagerel ccedict_enter+35
	DD	imagerel $unwind$ccedict_enter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_jumpF DD imagerel ccedict_jumpF
	DD	imagerel ccedict_jumpF+66
	DD	imagerel $unwind$ccedict_jumpF
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_call DD imagerel ccedict_call
	DD	imagerel ccedict_call+51
	DD	imagerel $unwind$ccedict_call
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccedict_return DD imagerel ccedict_return
	DD	imagerel ccedict_return+35
	DD	imagerel $unwind$ccedict_return
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock DD imagerel ccblock
	DD	imagerel ccblock+36
	DD	imagerel $unwind$ccblock
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_add DD imagerel ccblock_add
	DD	imagerel ccblock_add+85
	DD	imagerel $unwind$ccblock_add
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccblock_add_edict DD imagerel ccblock_add_edict
	DD	imagerel ccblock_add_edict+105
	DD	imagerel $unwind$ccblock_add_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccfunc_local DD imagerel ccfunc_local
	DD	imagerel ccfunc_local+128
	DD	imagerel $unwind$ccfunc_local
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccfunc_include_local DD imagerel ccfunc_include_local
	DD	imagerel ccfunc_include_local+136
	DD	imagerel $unwind$ccfunc_include_local
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_hash DD imagerel cclex_hash
	DD	imagerel cclex_hash+330
	DD	imagerel $unwind$cclex_hash
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_hashonly DD imagerel cclex_hashonly
	DD	imagerel cclex_hashonly+250
	DD	imagerel $unwind$cclex_hashonly
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_hash_init DD imagerel cclex_hash_init
	DD	imagerel cclex_hash_init+1336
	DD	imagerel $unwind$cclex_hash_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_init DD imagerel cclex_init
	DD	imagerel cclex_init+98
	DD	imagerel $unwind$cclex_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_token DD imagerel cclex_token
	DD	imagerel cclex_token+75
	DD	imagerel $unwind$cclex_token
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_next_token_internal DD imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+48
	DD	imagerel $unwind$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cclex_next_token_internal DD imagerel cclex_next_token_internal+48
	DD	imagerel cclex_next_token_internal+211
	DD	imagerel $chain$1$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$cclex_next_token_internal DD imagerel cclex_next_token_internal+211
	DD	imagerel cclex_next_token_internal+328
	DD	imagerel $chain$2$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$cclex_next_token_internal DD imagerel cclex_next_token_internal+328
	DD	imagerel cclex_next_token_internal+1568
	DD	imagerel $chain$3$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$cclex_next_token_internal DD imagerel cclex_next_token_internal+1568
	DD	imagerel cclex_next_token_internal+1720
	DD	imagerel $chain$4$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$cclex_next_token_internal DD imagerel cclex_next_token_internal+1720
	DD	imagerel cclex_next_token_internal+2048
	DD	imagerel $chain$5$cclex_next_token_internal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_next_token DD imagerel cclex_next_token
	DD	imagerel cclex_next_token+60
	DD	imagerel $unwind$cclex_next_token
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_identifier DD imagerel cclex_identifier
	DD	imagerel cclex_identifier+150
	DD	imagerel $unwind$cclex_identifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cclex_readstr DD imagerel cclex_readstr
	DD	imagerel cclex_readstr+567
	DD	imagerel $unwind$cclex_readstr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_init DD imagerel ccread_init
	DD	imagerel ccread_init+159
	DD	imagerel $unwind$ccread_init
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_all_tokens DD imagerel ccread_all_tokens
	DD	imagerel ccread_all_tokens+305
	DD	imagerel $unwind$ccread_all_tokens
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccreader_move DD imagerel ccreader_move
	DD	imagerel ccreader_move+9
	DD	imagerel $unwind$ccreader_move
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccreader_move DD imagerel ccreader_move+9
	DD	imagerel ccreader_move+341
	DD	imagerel $chain$3$ccreader_move
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ccreader_move DD imagerel ccreader_move+341
	DD	imagerel ccreader_move+391
	DD	imagerel $chain$4$ccreader_move
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_include DD imagerel ccread_include
	DD	imagerel ccread_include+77
	DD	imagerel $unwind$ccread_include
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_include DD imagerel ccread_include+77
	DD	imagerel ccread_include+101
	DD	imagerel $chain$0$ccread_include
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_include DD imagerel ccread_include+101
	DD	imagerel ccread_include+158
	DD	imagerel $chain$1$ccread_include
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_include DD imagerel ccread_include+158
	DD	imagerel ccread_include+163
	DD	imagerel $chain$2$ccread_include
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccread_include DD imagerel ccread_include+163
	DD	imagerel ccread_include+196
	DD	imagerel $chain$3$ccread_include
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_arglist_expr DD imagerel ccread_arglist_expr
	DD	imagerel ccread_arglist_expr+414
	DD	imagerel $unwind$ccread_arglist_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_expression DD imagerel ccread_expression
	DD	imagerel ccread_expression+183
	DD	imagerel $unwind$ccread_expression
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_identifier DD imagerel ccread_identifier
	DD	imagerel ccread_identifier+104
	DD	imagerel $unwind$ccread_identifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_primary DD imagerel ccread_primary
	DD	imagerel ccread_primary+58
	DD	imagerel $unwind$ccread_primary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_primary DD imagerel ccread_primary+58
	DD	imagerel ccread_primary+103
	DD	imagerel $chain$0$ccread_primary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_primary DD imagerel ccread_primary+103
	DD	imagerel ccread_primary+118
	DD	imagerel $chain$1$ccread_primary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_primary DD imagerel ccread_primary+118
	DD	imagerel ccread_primary+344
	DD	imagerel $chain$2$ccread_primary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccread_primary DD imagerel ccread_primary+344
	DD	imagerel ccread_primary+366
	DD	imagerel $chain$3$ccread_primary
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_postfix DD imagerel ccread_postfix
	DD	imagerel ccread_postfix+1166
	DD	imagerel $unwind$ccread_postfix
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_unary_expr DD imagerel ccread_unary_expr
	DD	imagerel ccread_unary_expr+503
	DD	imagerel $unwind$ccread_unary_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_multiplicative_expr DD imagerel ccread_multiplicative_expr
	DD	imagerel ccread_multiplicative_expr+223
	DD	imagerel $unwind$ccread_multiplicative_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_additive_expr DD imagerel ccread_additive_expr
	DD	imagerel ccread_additive_expr+205
	DD	imagerel $unwind$ccread_additive_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_shift_expr DD imagerel ccread_shift_expr
	DD	imagerel ccread_shift_expr+205
	DD	imagerel $unwind$ccread_shift_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_relational_expr DD imagerel ccread_relational_expr
	DD	imagerel ccread_relational_expr+238
	DD	imagerel $unwind$ccread_relational_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_equality_expr DD imagerel ccread_equality_expr
	DD	imagerel ccread_equality_expr+344
	DD	imagerel $unwind$ccread_equality_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_bitwise_and_expr DD imagerel ccread_bitwise_and_expr
	DD	imagerel ccread_bitwise_and_expr+190
	DD	imagerel $unwind$ccread_bitwise_and_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_bitwise_xor_expr DD imagerel ccread_bitwise_xor_expr
	DD	imagerel ccread_bitwise_xor_expr+190
	DD	imagerel $unwind$ccread_bitwise_xor_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_bitwise_or_expr DD imagerel ccread_bitwise_or_expr
	DD	imagerel ccread_bitwise_or_expr+190
	DD	imagerel $unwind$ccread_bitwise_or_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_logical_and_expr DD imagerel ccread_logical_and_expr
	DD	imagerel ccread_logical_and_expr+190
	DD	imagerel $unwind$ccread_logical_and_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_logical_or_expr DD imagerel ccread_logical_or_expr
	DD	imagerel ccread_logical_or_expr+190
	DD	imagerel $unwind$ccread_logical_or_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_conditional_expr DD imagerel ccread_conditional_expr
	DD	imagerel ccread_conditional_expr+110
	DD	imagerel $unwind$ccread_conditional_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_conditional_expr DD imagerel ccread_conditional_expr+110
	DD	imagerel ccread_conditional_expr+255
	DD	imagerel $chain$1$ccread_conditional_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_conditional_expr DD imagerel ccread_conditional_expr+255
	DD	imagerel ccread_conditional_expr+278
	DD	imagerel $chain$2$ccread_conditional_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_assignment_expr DD imagerel ccread_assignment_expr
	DD	imagerel ccread_assignment_expr+188
	DD	imagerel $unwind$ccread_assignment_expr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_param_type_list DD imagerel ccread_param_type_list
	DD	imagerel ccread_param_type_list+315
	DD	imagerel $unwind$ccread_param_type_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_decl_name DD imagerel ccread_decl_name
	DD	imagerel ccread_decl_name+61
	DD	imagerel $unwind$ccread_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_declaration_specifiers DD imagerel ccread_declaration_specifiers
	DD	imagerel ccread_declaration_specifiers+150
	DD	imagerel $unwind$ccread_declaration_specifiers
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_specifier_qualifier_list DD imagerel ccread_specifier_qualifier_list
	DD	imagerel ccread_specifier_qualifier_list+524
	DD	imagerel $unwind$ccread_specifier_qualifier_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+106
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier+106
	DD	imagerel ccread_direct_decl_name_modifier+402
	DD	imagerel $chain$2$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier+402
	DD	imagerel ccread_direct_decl_name_modifier+622
	DD	imagerel $chain$3$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier+622
	DD	imagerel ccread_direct_decl_name_modifier+827
	DD	imagerel $chain$4$ccread_direct_decl_name_modifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_direct_decl_name DD imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+124
	DD	imagerel $unwind$ccread_direct_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_direct_decl_name DD imagerel ccread_direct_decl_name+124
	DD	imagerel ccread_direct_decl_name+477
	DD	imagerel $chain$0$ccread_direct_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_direct_decl_name DD imagerel ccread_direct_decl_name+477
	DD	imagerel ccread_direct_decl_name+633
	DD	imagerel $chain$1$ccread_direct_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_decl_name_modifier_maybe DD imagerel ccread_decl_name_modifier_maybe
	DD	imagerel ccread_decl_name_modifier_maybe+72
	DD	imagerel $unwind$ccread_decl_name_modifier_maybe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_decl_name_modifier_maybe DD imagerel ccread_decl_name_modifier_maybe+72
	DD	imagerel ccread_decl_name_modifier_maybe+138
	DD	imagerel $chain$0$ccread_decl_name_modifier_maybe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_decl_name_modifier_maybe DD imagerel ccread_decl_name_modifier_maybe+138
	DD	imagerel ccread_decl_name_modifier_maybe+147
	DD	imagerel $chain$1$ccread_decl_name_modifier_maybe
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_init_decl_name DD imagerel ccread_init_decl_name
	DD	imagerel ccread_init_decl_name+167
	DD	imagerel $unwind$ccread_init_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_struct_decl_name DD imagerel ccread_struct_decl_name
	DD	imagerel ccread_struct_decl_name+167
	DD	imagerel $unwind$ccread_struct_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_init_decl_name_list DD imagerel ccread_init_decl_name_list
	DD	imagerel ccread_init_decl_name_list+402
	DD	imagerel $unwind$ccread_init_decl_name_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_struct_decl_name_list DD imagerel ccread_struct_decl_name_list
	DD	imagerel ccread_struct_decl_name_list+402
	DD	imagerel $unwind$ccread_struct_decl_name_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_init_decl DD imagerel ccread_init_decl
	DD	imagerel ccread_init_decl+116
	DD	imagerel $unwind$ccread_init_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_struct_decl DD imagerel ccread_struct_decl
	DD	imagerel ccread_struct_decl+116
	DD	imagerel $unwind$ccread_struct_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+102
	DD	imagerel $unwind$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+102
	DD	imagerel ccread_struct_or_union_specifier+118
	DD	imagerel $chain$1$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+118
	DD	imagerel ccread_struct_or_union_specifier+427
	DD	imagerel $chain$3$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+427
	DD	imagerel ccread_struct_or_union_specifier+504
	DD	imagerel $chain$4$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+504
	DD	imagerel ccread_struct_or_union_specifier+537
	DD	imagerel $chain$5$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier+537
	DD	imagerel ccread_struct_or_union_specifier+588
	DD	imagerel $chain$6$ccread_struct_or_union_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_type_specifier DD imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+58
	DD	imagerel $unwind$ccread_type_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_type_specifier DD imagerel ccread_type_specifier+58
	DD	imagerel ccread_type_specifier+89
	DD	imagerel $chain$0$ccread_type_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_type_specifier DD imagerel ccread_type_specifier+89
	DD	imagerel ccread_type_specifier+420
	DD	imagerel $chain$1$ccread_type_specifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_param_decl DD imagerel ccread_param_decl
	DD	imagerel ccread_param_decl+82
	DD	imagerel $unwind$ccread_param_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_param_decl_list DD imagerel ccread_param_decl_list
	DD	imagerel ccread_param_decl_list+315
	DD	imagerel $unwind$ccread_param_decl_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_block DD imagerel ccread_block
	DD	imagerel ccread_block+96
	DD	imagerel $unwind$ccread_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_block DD imagerel ccread_block+96
	DD	imagerel ccread_block+205
	DD	imagerel $chain$0$ccread_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_block DD imagerel ccread_block+205
	DD	imagerel ccread_block+223
	DD	imagerel $chain$1$ccread_block
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_statement_list DD imagerel ccread_statement_list
	DD	imagerel ccread_statement_list+48
	DD	imagerel $unwind$ccread_statement_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_statement_list DD imagerel ccread_statement_list+48
	DD	imagerel ccread_statement_list+246
	DD	imagerel $chain$1$ccread_statement_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccread_statement_list DD imagerel ccread_statement_list+246
	DD	imagerel ccread_statement_list+268
	DD	imagerel $chain$2$ccread_statement_list
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_statement DD imagerel ccread_statement
	DD	imagerel ccread_statement+588
	DD	imagerel $unwind$ccread_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$ccread_statement DD imagerel ccread_statement+588
	DD	imagerel ccread_statement+741
	DD	imagerel $chain$0$ccread_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccread_statement DD imagerel ccread_statement+741
	DD	imagerel ccread_statement+885
	DD	imagerel $chain$1$ccread_statement
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_block_or_single_stmt DD imagerel ccread_block_or_single_stmt
	DD	imagerel ccread_block_or_single_stmt+64
	DD	imagerel $unwind$ccread_block_or_single_stmt
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_external_declaration DD imagerel ccread_external_declaration
	DD	imagerel ccread_external_declaration+117
	DD	imagerel $unwind$ccread_external_declaration
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccread_translation_unit DD imagerel ccread_translation_unit
	DD	imagerel ccread_translation_unit+339
	DD	imagerel $unwind$ccread_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_constant DD imagerel ccemit_constant
	DD	imagerel ccemit_constant+52
	DD	imagerel $unwind$ccemit_constant
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_const_i32 DD imagerel ccemit_const_i32
	DD	imagerel ccemit_const_i32+56
	DD	imagerel $unwind$ccemit_const_i32
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_store DD imagerel ccemit_store
	DD	imagerel ccemit_store+74
	DD	imagerel $unwind$ccemit_store
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_fetch DD imagerel ccemit_fetch
	DD	imagerel ccemit_fetch+57
	DD	imagerel $unwind$ccemit_fetch
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_arith DD imagerel ccemit_arith
	DD	imagerel ccemit_arith+89
	DD	imagerel $unwind$ccemit_arith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_enter DD imagerel ccemit_enter
	DD	imagerel ccemit_enter+57
	DD	imagerel $unwind$ccemit_enter
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_return DD imagerel ccemit_return
	DD	imagerel ccemit_return+57
	DD	imagerel $unwind$ccemit_return
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_invoke DD imagerel ccemit_invoke
	DD	imagerel ccemit_invoke+74
	DD	imagerel $unwind$ccemit_invoke
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_jumpF DD imagerel ccemit_jumpF
	DD	imagerel ccemit_jumpF+90
	DD	imagerel $unwind$ccemit_jumpF
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_resolve DD imagerel ccemit_resolve
	DD	imagerel ccemit_resolve+33
	DD	imagerel $unwind$ccemit_resolve
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_lvalue DD imagerel ccemit_lvalue
	DD	imagerel ccemit_lvalue+47
	DD	imagerel $unwind$ccemit_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_rvalue DD imagerel ccemit_rvalue
	DD	imagerel ccemit_rvalue+249
	DD	imagerel $unwind$ccemit_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_invoke_easy DD imagerel ccemit_invoke_easy
	DD	imagerel ccemit_invoke_easy+384
	DD	imagerel $unwind$ccemit_invoke_easy
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_tree DD imagerel ccemit_tree
	DD	imagerel ccemit_tree+797
	DD	imagerel $unwind$ccemit_tree
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_treelist DD imagerel ccemit_treelist
	DD	imagerel ccemit_treelist+122
	DD	imagerel $unwind$ccemit_treelist
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_decl_name DD imagerel ccemit_decl_name
	DD	imagerel ccemit_decl_name+204
	DD	imagerel $unwind$ccemit_decl_name
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_decl DD imagerel ccemit_decl
	DD	imagerel ccemit_decl+260
	DD	imagerel $unwind$ccemit_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_param DD imagerel ccemit_param
	DD	imagerel ccemit_param+118
	DD	imagerel $unwind$ccemit_param
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_function DD imagerel ccemit_function
	DD	imagerel ccemit_function+747
	DD	imagerel $unwind$ccemit_function
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_external_decl DD imagerel ccemit_external_decl
	DD	imagerel ccemit_external_decl+274
	DD	imagerel $unwind$ccemit_external_decl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccemit_translation_unit DD imagerel ccemit_translation_unit
	DD	imagerel ccemit_translation_unit+362
	DD	imagerel $unwind$ccemit_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_mingle DD imagerel ccstack_mingle
	DD	imagerel ccstack_mingle+48
	DD	imagerel $unwind$ccstack_mingle
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_yield DD imagerel ccstack_yield
	DD	imagerel ccstack_yield+153
	DD	imagerel $unwind$ccstack_yield
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_yield_rvalue DD imagerel ccstack_yield_rvalue
	DD	imagerel ccstack_yield_rvalue+157
	DD	imagerel $unwind$ccstack_yield_rvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_yield_lvalue DD imagerel ccstack_yield_lvalue
	DD	imagerel ccstack_yield_lvalue+74
	DD	imagerel $unwind$ccstack_yield_lvalue
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccstack_local_alloc DD imagerel ccstack_local_alloc
	DD	imagerel ccstack_local_alloc+119
	DD	imagerel $unwind$ccstack_local_alloc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_edict_arith DD imagerel ccexec_edict_arith
	DD	imagerel ccexec_edict_arith+526
	DD	imagerel $unwind$ccexec_edict_arith
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_invoke DD imagerel ccexec_invoke
	DD	imagerel ccexec_invoke+20
	DD	imagerel $unwind$ccexec_invoke
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$ccexec_invoke DD imagerel ccexec_invoke+20
	DD	imagerel ccexec_invoke+373
	DD	imagerel $chain$4$ccexec_invoke
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$ccexec_invoke DD imagerel ccexec_invoke+373
	DD	imagerel ccexec_invoke+608
	DD	imagerel $chain$5$ccexec_invoke
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_edict DD imagerel ccexec_edict
	DD	imagerel ccexec_edict+559
	DD	imagerel $unwind$ccexec_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$ccexec_edict DD imagerel ccexec_edict+559
	DD	imagerel ccexec_edict+968
	DD	imagerel $chain$1$ccexec_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$ccexec_edict DD imagerel ccexec_edict+968
	DD	imagerel ccexec_edict+1108
	DD	imagerel $chain$2$ccexec_edict
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fib DD	imagerel $LN5
	DD	imagerel $LN5+16
	DD	imagerel $unwind$fib
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$fib DD	imagerel $LN5+16
	DD	imagerel $LN5+49
	DD	imagerel $chain$0$fib
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$fib DD	imagerel $LN5+49
	DD	imagerel $LN5+57
	DD	imagerel $chain$1$fib
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ccexec_translation_unit DD imagerel ccexec_translation_unit
	DD	imagerel ccexec_translation_unit+385
	DD	imagerel $unwind$ccexec_translation_unit
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_type DD imagerel $LN4
	DD	imagerel $LN4+30
	DD	imagerel $unwind$gen_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_vectype DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$gen_vectype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_ptrtype DD imagerel $LN6
	DD	imagerel $LN6+35
	DD	imagerel $unwind$gen_ptrtype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_vartype DD imagerel $LN6
	DD	imagerel $LN6+67
	DD	imagerel $unwind$gen_vartype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_fixtype DD imagerel $LN6
	DD	imagerel $LN6+51
	DD	imagerel $unwind$gen_fixtype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_typename_ex DD imagerel $LN10
	DD	imagerel $LN10+228
	DD	imagerel $unwind$gen_typename_ex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_typename DD imagerel $LN4
	DD	imagerel $LN4+34
	DD	imagerel $unwind$gen_typename
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_typename DD imagerel $LN6
	DD	imagerel $LN6+60
	DD	imagerel $unwind$emit_typename
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_vardecl_ex DD imagerel $LN55
	DD	imagerel $LN55+313
	DD	imagerel $unwind$emit_vardecl_ex
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_vardecl DD imagerel $LN55
	DD	imagerel $LN55+212
	DD	imagerel $unwind$emit_vardecl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_fundecl DD imagerel $LN18
	DD	imagerel $LN18+149
	DD	imagerel $unwind$emit_fundecl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$emit_fundecl DD imagerel $LN18+149
	DD	imagerel $LN18+212
	DD	imagerel $chain$0$emit_fundecl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$emit_fundecl DD imagerel $LN18+212
	DD	imagerel $LN18+247
	DD	imagerel $chain$1$emit_fundecl
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$genmake DD imagerel $LN29
	DD	imagerel $LN29+414
	DD	imagerel $unwind$genmake
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_vecoprari DD imagerel $LN62
	DD	imagerel $LN62+323
	DD	imagerel $unwind$emit_vecoprari
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$emit_vecoprari DD imagerel $LN62+323
	DD	imagerel $LN62+387
	DD	imagerel $chain$0$emit_vecoprari
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$emit_vecoprari DD imagerel $LN62+387
	DD	imagerel $LN62+438
	DD	imagerel $chain$1$emit_vecoprari
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_vectype DD imagerel $LN273
	DD	imagerel $LN273+1758
	DD	imagerel $unwind$emit_vectype
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$emit_type DD imagerel $LN29
	DD	imagerel $LN29+26
	DD	imagerel $unwind$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$emit_type DD imagerel $LN29+26
	DD	imagerel $LN29+43
	DD	imagerel $chain$0$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$emit_type DD imagerel $LN29+43
	DD	imagerel $LN29+231
	DD	imagerel $chain$2$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$emit_type DD imagerel $LN29+231
	DD	imagerel $LN29+236
	DD	imagerel $chain$3$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$emit_type DD imagerel $LN29+236
	DD	imagerel $LN29+248
	DD	imagerel $chain$4$emit_type
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN258
	DD	imagerel $LN258+2263
	DD	imagerel $unwind$main
pdata	ENDS
CRT$XCU	SEGMENT
?ctype_flo32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_flo32@@YAXXZ ; ctype_flo32$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ??_C@_09JFGGGBPA@gen?4ktt?4c@
CONST	SEGMENT
??_C@_09JFGGGBPA@gen?4ktt?4c@ DB 'gen.ktt.c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CEP@GDNJNAFF@?$CDdefine?5f64?5double?$AN?6?$CDdefine?5f32@
CONST	SEGMENT
??_C@_0CEP@GDNJNAFF@?$CDdefine?5f64?5double?$AN?6?$CDdefine?5f32@ DB '#de'
	DB	'fine f64 double', 0dH, 0aH, '#define f32 float', 0dH, 0aH, '#'
	DB	'ifdef _MSC_VER', 0dH, 0aH, '# define i64 signed   __int64', 0dH
	DB	0aH, '# define u64 unsigned __int64', 0dH, 0aH, '# define i32 '
	DB	'signed   __int32', 0dH, 0aH, '# define u32 unsigned __int32', 0dH
	DB	0aH, '# define i16 signed   __int16', 0dH, 0aH, '# define u16 '
	DB	'unsigned __int16', 0dH, 0aH, '# define i8  signed   __int8', 0dH
	DB	0aH, '# define u8  unsigned __int8', 0dH, 0aH, '#else', 0dH, 0aH
	DB	'# define i64 signed   long long', 0dH, 0aH, '# define u64 uns'
	DB	'igned long long', 0dH, 0aH, '# define i32 signed   int', 0dH, 0aH
	DB	'# define u32 unsigned int', 0dH, 0aH, '# define i16 signed   '
	DB	'short', 0dH, 0aH, '# define u16 unsigned short', 0dH, 0aH, '#'
	DB	' define i8  signed   char', 0dH, 0aH, '# define u8  unsigned '
	DB	'char', 0dH, 0aH, '#endif', 0dH, 0aH, '#define c8  char', 0dH, 0aH
	DB	'#define c16 wchar_t', 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNJAJELN@test?4svm?4c@
CONST	SEGMENT
??_C@_0L@NNJAJELN@test?4svm?4c@ DB 'test.svm.c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PJDJHPPP@log?5test?53@
CONST	SEGMENT
??_C@_0L@PJDJHPPP@log?5test?53@ DB 'log test 3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OACCEOLO@log?5test?52@
CONST	SEGMENT
??_C@_0L@OACCEOLO@log?5test?52@ DB 'log test 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKBLEAK@test?4c@
CONST	SEGMENT
??_C@_06EKBLEAK@test?4c@ DB 'test.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03MGHMBJCF@log@
CONST	SEGMENT
??_C@_03MGHMBJCF@log@ DB 'log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MLAPBNHN@log?5test?51@
CONST	SEGMENT
??_C@_0L@MLAPBNHN@log?5test?51@ DB 'log test 1', 00H	; `string'
CONST	ENDS
;	COMDAT ?ts@?2??main@@9@4QBUkttcc_type@@B
CONST	SEGMENT
?ts@?2??main@@9@4QBUkttcc_type@@B DD 02H		; `main'::`3'::ts
	DD	03H
	DD	040H
	DD	020H
	ORG $+16
	DD	02H
	DD	00H
	DD	040H
	DD	08H
	ORG $+16
	DD	02H
	DD	01H
	DD	040H
	DD	08H
	ORG $+16
	DD	02H
	DD	02H
	DD	08H
	DD	08H
	ORG $+16
CONST	ENDS
;	COMDAT ??_C@_02FKMDLLOA@?9?$DN@
CONST	SEGMENT
??_C@_02FKMDLLOA@?9?$DN@ DB '-=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01JOAMLHOP@?9@
CONST	SEGMENT
??_C@_01JOAMLHOP@?9@ DB '-', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FOEOMHFC@?$CL?$DN@
CONST	SEGMENT
??_C@_02FOEOMHFC@?$CL?$DN@ DB '+=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01MIFGBAGJ@?$CL@
CONST	SEGMENT
??_C@_01MIFGBAGJ@?$CL@ DB '+', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FJEHGPIO@?1?$DN@
CONST	SEGMENT
??_C@_02FJEHGPIO@?1?$DN@ DB '/=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01KMDKNFGN@?1@
CONST	SEGMENT
??_C@_01KMDKNFGN@?1@ DB '/', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FPIMKNGF@?$CK?$DN@
CONST	SEGMENT
??_C@_02FPIMKNGF@?$CK?$DN@ DB '*=', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03LKGCEJK@?$DL?$AN?6@
CONST	SEGMENT
??_C@_03LKGCEJK@?$DL?$AN?6@ DB ';', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02MJBDPJEM@?$HN?5@
CONST	SEGMENT
??_C@_02MJBDPJEM@?$HN?5@ DB '} ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDJEOHF@?$AN?6?5?5@
CONST	SEGMENT
??_C@_04DDJEOHF@?$AN?6?5?5@ DB 0dH, 0aH, '  ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL@ DB '{', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHJONKJL@typedef?5struct?5@
CONST	SEGMENT
??_C@_0BA@GHJONKJL@typedef?5struct?5@ DB 'typedef struct ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
CONST	SEGMENT
??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@ DB 0dH
	DB	0aH, '  r.%c=a.%c%cb.%c;', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03PBLGLLIO@?$CJ?$AN?6@
CONST	SEGMENT
??_C@_03PBLGLLIO@?$CJ?$AN?6@ DB ')', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
CONST	SEGMENT
??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@ DB 'static %s op'
	DB	'erator %s (', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_03LFNJCDHL@?$HN?$AN?6@
CONST	SEGMENT
??_C@_03LFNJCDHL@?$HN?$AN?6@ DB '}', 0dH, 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
CONST	SEGMENT
??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@ DB 0dH, 0aH, '  return '
	DB	'r;', 0dH, 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@
CONST	SEGMENT
??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@ DB 0dH, 0aH, '  r.%c=%c'
	DB	';', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_01ICJEACDI@?$DL@
CONST	SEGMENT
??_C@_01ICJEACDI@?$DL@ DB ';', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02MNJOIFPO@?$HL?5@
CONST	SEGMENT
??_C@_02MNJOIFPO@?$HL?5@ DB '{ ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03MPLDLMAM@?$CFsm@
CONST	SEGMENT
??_C@_03MPLDLMAM@?$CFsm@ DB '%sm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IHBHIGKO@?0@
CONST	SEGMENT
??_C@_01IHBHIGKO@?0@ DB ',', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JEGEICAJ@?$AN?6?$CFs@
CONST	SEGMENT
??_C@_04JEGEICAJ@?$AN?6?$CFs@ DB 0dH, 0aH, '%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PGOEDBHP@static?5@
CONST	SEGMENT
??_C@_07PGOEDBHP@static?5@ DB 'static ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HAOIJKIC@?$CFc@
CONST	SEGMENT
??_C@_02HAOIJKIC@?$CFc@ DB '%c', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03IKGEINEE@?$CFs?5@
CONST	SEGMENT
??_C@_03IKGEINEE@?$CFs?5@ DB '%s ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GPECMEKF@?$FL?$FN@
CONST	SEGMENT
??_C@_02GPECMEKF@?$FL?$FN@ DB '[]', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HNPIGOCE@?$CG@
CONST	SEGMENT
??_C@_01HNPIGOCE@?$CG@ DB '&', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PKIJPMHF@x?$CFi@
CONST	SEGMENT
??_C@_03PKIJPMHF@x?$CFi@ DB 'x%i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELIBNAHE@?$CFc?$CFi_?$CFi@
CONST	SEGMENT
??_C@_07ELIBNAHE@?$CFc?$CFi_?$CFi@ DB '%c%i_%i', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JDNGKEJO@?$CFc?$CFi@
CONST	SEGMENT
??_C@_04JDNGKEJO@?$CFc?$CFi@ DB '%c%i', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DFPLCIIJ@fib?5c?3?$CFi?5?$CFf?$CIs?$CJ?5?9?5cc?3?$CFi?5?$CFf?$CIs?$CJ?6@
CONST	SEGMENT
??_C@_0BO@DFPLCIIJ@fib?5c?3?$CFi?5?$CFf?$CIs?$CJ?5?9?5cc?3?$CFi?5?$CFf?$CIs?$CJ?6@ DB 'f'
	DB	'ib c:%i %f(s) - cc:%i %f(s)', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBKMMCFH@fetch?3?5?$CFs@
CONST	SEGMENT
??_C@_09NBKMMCFH@fetch?3?5?$CFs@ DB 'fetch: %s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03BDGOHNNK@add@
CONST	SEGMENT
??_C@_03BDGOHNNK@add@ DB 'add', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCMAIMAP@sub@
CONST	SEGMENT
??_C@_03KCMAIMAP@sub@ DB 'sub', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JDDHICPG@greater?9than?9eql@
CONST	SEGMENT
??_C@_0BB@JDDHICPG@greater?9than?9eql@ DB 'greater-than-eql', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OBPGLKBF@greater?9than@
CONST	SEGMENT
??_C@_0N@OBPGLKBF@greater?9than@ DB 'greater-than', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EBBNFLMJ@?8?$CFs?8?3localloc@
CONST	SEGMENT
??_C@_0O@EBBNFLMJ@?8?$CFs?8?3localloc@ DB '''%s'':localloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CGIBHDEL@constant?9value@
CONST	SEGMENT
??_C@_0P@CGIBHDEL@constant?9value@ DB 'constant-value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHJNJNPO@main@
CONST	SEGMENT
??_C@_04GHJNJNPO@main@ DB 'main', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMOJBBHE@$leave@
CONST	SEGMENT
??_C@_06LMOJBBHE@$leave@ DB '$leave', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JABCEPLP@$enter@
CONST	SEGMENT
??_C@_06JABCEPLP@$enter@ DB '$enter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PHJKMIOD@$decls@
CONST	SEGMENT
??_C@_06PHJKMIOD@$decls@ DB '$decls', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MNHMNFH@function?5that?5returns?5array@
CONST	SEGMENT
??_C@_0BM@MNHMNFH@function?5that?5returns?5array@ DB 'function that retur'
	DB	'ns array', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OBLHEIFP@W?3?2cpp?2void?2ktt?9c?2ccread?4c@
CONST	SEGMENT
??_C@_0BL@OBLHEIFP@W?3?2cpp?2void?2ktt?9c?2ccread?4c@ DB 'W:\cpp\void\ktt'
	DB	'-c\ccread.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OMCDEOEM@ccread_direct_decl_name_modifie@
CONST	SEGMENT
??_C@_0CB@OMCDEOEM@ccread_direct_decl_name_modifie@ DB 'ccread_direct_dec'
	DB	'l_name_modifier', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03HMEPACKF@war@
CONST	SEGMENT
??_C@_03HMEPACKF@war@ DB 'war', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@IKEJFDCA@function?5that?5returns?5function@
CONST	SEGMENT
??_C@_0BP@IKEJFDCA@function?5that?5returns?5function@ DB 'function that r'
	DB	'eturns function', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DLICDMBN@continue@
CONST	SEGMENT
??_C@_08DLICDMBN@continue@ DB 'continue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05ELPHFHOI@break@
CONST	SEGMENT
??_C@_05ELPHFHOI@break@ DB 'break', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LNOFJDNM@return@
CONST	SEGMENT
??_C@_06LNOFJDNM@return@ DB 'return', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MABHPDAO@goto@
CONST	SEGMENT
??_C@_04MABHPDAO@goto@ DB 'goto', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02KNAFDCHJ@do@
CONST	SEGMENT
??_C@_02KNAFDCHJ@do@ DB 'do', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OODBEKIG@while@
CONST	SEGMENT
??_C@_05OODBEKIG@while@ DB 'while', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JOHEBPFF@for@
CONST	SEGMENT
??_C@_03JOHEBPFF@for@ DB 'for', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default@
CONST	SEGMENT
??_C@_07DLHCIBDH@default@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CKOINMPC@case@
CONST	SEGMENT
??_C@_04CKOINMPC@case@ DB 'case', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FHMCPBIP@else@
CONST	SEGMENT
??_C@_04FHMCPBIP@else@ DB 'else', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DOPOGBGP@switch@
CONST	SEGMENT
??_C@_06DOPOGBGP@switch@ DB 'switch', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HEBPBKGD@if@
CONST	SEGMENT
??_C@_02HEBPBKGD@if@ DB 'if', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOEMFGDG@__declspec@
CONST	SEGMENT
??_C@_0L@LOEMFGDG@__declspec@ DB '__declspec', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@COIIMKFA@_Thread_local@
CONST	SEGMENT
??_C@_0O@COIIMKFA@_Thread_local@ DB '_Thread_local', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GGHJAEBN@static@
CONST	SEGMENT
??_C@_06GGHJAEBN@static@ DB 'static', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHHIDNEP@register@
CONST	SEGMENT
??_C@_08DHHIDNEP@register@ DB 'register', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PAMNHHEG@extern@
CONST	SEGMENT
??_C@_06PAMNHHEG@extern@ DB 'extern', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HAPDLBFF@auto@
CONST	SEGMENT
??_C@_04HAPDLBFF@auto@ DB 'auto', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FIDIHKEG@typedef@
CONST	SEGMENT
??_C@_07FIDIHKEG@typedef@ DB 'typedef', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBJBIPGK@struct@
CONST	SEGMENT
??_C@_06PBJBIPGK@struct@ DB 'struct', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DBJPMPLO@enum@
CONST	SEGMENT
??_C@_04DBJPMPLO@enum@ DB 'enum', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LPOMPHGP@_Atomic@
CONST	SEGMENT
??_C@_07LPOMPHGP@_Atomic@ DB '_Atomic', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PLEDNCDB@_Complex@
CONST	SEGMENT
??_C@_08PLEDNCDB@_Complex@ DB '_Complex', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HIFAKALE@_Bool@
CONST	SEGMENT
??_C@_05HIFAKALE@_Bool@ DB '_Bool', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKJNKENE@void@
CONST	SEGMENT
??_C@_04GKJNKENE@void@ DB 'void', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ENMBGAPA@char@
CONST	SEGMENT
??_C@_04ENMBGAPA@char@ DB 'char', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFKKPKCG@short@
CONST	SEGMENT
??_C@_05BFKKPKCG@short@ DB 'short', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03JBIPMCLC@int@
CONST	SEGMENT
??_C@_03JBIPMCLC@int@ DB 'int', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GOKPGOLB@long@
CONST	SEGMENT
??_C@_04GOKPGOLB@long@ DB 'long', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05KNFBNCOH@float@
CONST	SEGMENT
??_C@_05KNFBNCOH@float@ DB 'float', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BNJCAIGJ@double@
CONST	SEGMENT
??_C@_06BNJCAIGJ@double@ DB 'double', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFCOJCAC@__int64@
CONST	SEGMENT
??_C@_07LFCOJCAC@__int64@ DB '__int64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OFLPPHGP@__int32@
CONST	SEGMENT
??_C@_07OFLPPHGP@__int32@ DB '__int32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICFHOGAF@__int16@
CONST	SEGMENT
??_C@_07ICFHOGAF@__int16@ DB '__int16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBGKOKIG@__int8@
CONST	SEGMENT
??_C@_06EBGKOKIG@__int8@ DB '__int8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CLLOMHGD@unsigned@
CONST	SEGMENT
??_C@_08CLLOMHGD@unsigned@ DB 'unsigned', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CPIODIKA@signed@
CONST	SEGMENT
??_C@_06CPIODIKA@signed@ DB 'signed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JEIHJDJD@_Noreturn@
CONST	SEGMENT
??_C@_09JEIHJDJD@_Noreturn@ DB '_Noreturn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGMBMJA@inline@
CONST	SEGMENT
??_C@_06OGMBMJA@inline@ DB 'inline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PABEKFH@volatile@
CONST	SEGMENT
??_C@_08PABEKFH@volatile@ DB 'volatile', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NGGFOJBB@restrict@
CONST	SEGMENT
??_C@_08NGGFOJBB@restrict@ DB 'restrict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BNCCCJPP@const@
CONST	SEGMENT
??_C@_05BNCCCJPP@const@ DB 'const', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08IPCLHPMJ@_Alignas@
CONST	SEGMENT
??_C@_08IPCLHPMJ@_Alignas@ DB '_Alignas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LCAALENH@_Alignof@
CONST	SEGMENT
??_C@_08LCAALENH@_Alignof@ DB '_Alignof', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FJBNGECK@__vectorcal@
CONST	SEGMENT
??_C@_0M@FJBNGECK@__vectorcal@ DB '__vectorcal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NPHFGOKO@__thiscall@
CONST	SEGMENT
??_C@_0L@NPHFGOKO@__thiscall@ DB '__thiscall', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IFJBGAPI@__stdcall@
CONST	SEGMENT
??_C@_09IFJBGAPI@__stdcall@ DB '__stdcall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FEOELIIN@__inline@
CONST	SEGMENT
??_C@_08FEOELIIN@__inline@ DB '__inline', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMKHOMEK@__fastcall@
CONST	SEGMENT
??_C@_0L@JMKHOMEK@__fastcall@ DB '__fastcall', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HIJEGCPM@__clrcall@
CONST	SEGMENT
??_C@_09HIJEGCPM@__clrcall@ DB '__clrcall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KOLFKCDI@__cdecl@
CONST	SEGMENT
??_C@_07KOLFKCDI@__cdecl@ DB '__cdecl', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BECPAABE@__based@
CONST	SEGMENT
??_C@_07BECPAABE@__based@ DB '__based', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNIOPOB@__asm@
CONST	SEGMENT
??_C@_05MNIOPOB@__asm@ DB '__asm', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GMJDDHPH@?$CFs?3?5?$CFs?$FL?$CFi?$FN?5?$CFs?$CI?$CJ?5?$CFs?6@
CONST	SEGMENT
??_C@_0BE@GMJDDHPH@?$CFs?3?5?$CFs?$FL?$CFi?$FN?5?$CFs?$CI?$CJ?5?$CFs?6@ DB '%'
	DB	's: %s[%i] %s() %s', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02PCIJFNDE@?$AN?6@
CONST	SEGMENT
??_C@_02PCIJFNDE@?$AN?6@ DB 0dH, 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EJEJBNFP@Inf@
CONST	SEGMENT
??_C@_03EJEJBNFP@Inf@ DB 'Inf', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICJPMMHB@NaN@
CONST	SEGMENT
??_C@_03ICJPMMHB@NaN@ DB 'NaN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05JPHLCBNH@_kMGT@
CONST	SEGMENT
??_C@_05JPHLCBNH@_kMGT@ DB '_kMGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FOLKAOND@_KMGT@
CONST	SEGMENT
??_C@_05FOLKAOND@_KMGT@ DB '_KMGT', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null@
CONST	SEGMENT
??_C@_04MLLLIHIP@null@ DB 'null', 00H			; `string'
CONST	ENDS
;	COMDAT ?hexu@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hexu@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789ABCDEFXP', 00H ; `stbsp_vsprintfcb'::`2'::hexu
_DATA	ENDS
;	COMDAT ?hex@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hex@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789abcdefxp', 00H ; `stbsp_vsprintfcb'::`2'::hex
_DATA	ENDS
_DATA	SEGMENT
stbsp__period DB 02eH
stbsp__comma DB	02cH
	ORG $+14
stbsp__digitpair DW 00H
	DB	'00010203040506070809101112131415161718192021222324252627'
	DB	'2829303132333435363738394041424344454647484950515253545556575'
	DB	'8596061626364656667686970717273747576777879808182838485868788'
	DB	'8990919293949596979899', 00H
	ORG $+1
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	0c2f01H
	DD	014682fH
	DD	02b0121H
	DD	0e013f015H
	DD	0c00fd011H
	DD	0600c700dH
	DD	0500a300bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$emit_type DD 021H
	DD	imagerel $LN29
	DD	imagerel $LN29+26
	DD	imagerel $unwind$emit_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$emit_type DD 021H
	DD	imagerel $LN29+26
	DD	imagerel $LN29+43
	DD	imagerel $chain$0$emit_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$emit_type DD 040a21H
	DD	08740aH
	DD	076405H
	DD	imagerel $LN29+26
	DD	imagerel $LN29+43
	DD	imagerel $chain$0$emit_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$emit_type DD 020521H
	DD	065405H
	DD	imagerel $LN29
	DD	imagerel $LN29+26
	DD	imagerel $unwind$emit_type
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_type DD 040b01H
	DD	09340bH
	DD	0e007320bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_vectype DD 0c1e01H
	DD	0d741eH
	DD	0c641eH
	DD	0b541eH
	DD	0a341eH
	DD	0f01a521eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$emit_vecoprari DD 021H
	DD	imagerel $LN62
	DD	imagerel $LN62+323
	DD	imagerel $unwind$emit_vecoprari
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$emit_vecoprari DD 020521H
	DD	086405H
	DD	imagerel $LN62
	DD	imagerel $LN62+323
	DD	imagerel $unwind$emit_vecoprari
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_vecoprari DD 081501H
	DD	0b7415H
	DD	0a5415H
	DD	093415H
	DD	0e0115215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$genmake DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$emit_fundecl DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+149
	DD	imagerel $unwind$emit_fundecl
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$emit_fundecl DD 020521H
	DD	06e405H
	DD	imagerel $LN18
	DD	imagerel $LN18+149
	DD	imagerel $unwind$emit_fundecl
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_fundecl DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_vardecl DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_vardecl_ex DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$emit_typename DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_typename DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_typename_ex DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_fixtype DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_vartype DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_ptrtype DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_vectype DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_type DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_translation_unit DD 061601H
	DD	066816H
	DD	07004d208H
	DD	030026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$fib DD	021H
	DD	imagerel $LN5
	DD	imagerel $LN5+16
	DD	imagerel $unwind$fib
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$fib DD	020521H
	DD	063405H
	DD	imagerel $LN5
	DD	imagerel $LN5+16
	DD	imagerel $unwind$fib
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fib DD	020601H
	DD	070023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccexec_edict DD 021H
	DD	imagerel ccexec_edict
	DD	imagerel ccexec_edict+559
	DD	imagerel $unwind$ccexec_edict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccexec_edict DD 041321H
	DD	01dc413H
	DD	014f408H
	DD	imagerel ccexec_edict
	DD	imagerel ccexec_edict+559
	DD	imagerel $unwind$ccexec_edict
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_edict DD 081e01H
	DD	015011eH
	DD	0d010e012H
	DD	0600d700eH
	DD	0500b300cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$ccexec_invoke DD 040021H
	DD	0a7400H
	DD	0b6400H
	DD	imagerel ccexec_invoke
	DD	imagerel ccexec_invoke+20
	DD	imagerel $unwind$ccexec_invoke
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ccexec_invoke DD 0a4221H
	DD	0a7442H
	DD	0b6428H
	DD	08f413H
	DD	09e40bH
	DD	0135404H
	DD	imagerel ccexec_invoke
	DD	imagerel ccexec_invoke+20
	DD	imagerel $unwind$ccexec_invoke
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_invoke DD 041401H
	DD	0d010b214H
	DD	0300cc00eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccexec_edict_arith DD 0c2301H
	DD	017c423H
	DD	0167423H
	DD	0156423H
	DD	0143423H
	DD	0f019f223H
	DD	05015e017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_local_alloc DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_yield_lvalue DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_yield_rvalue DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_yield DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstack_mingle DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_translation_unit DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_external_decl DD 0c2e01H
	DD	0ae42eH
	DD	096426H
	DD	08341eH
	DD	0b540eH
	DD	0f00a320eH
	DD	07006c008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_function DD 0c2101H
	DD	0d6421H
	DD	0c5421H
	DD	0b3421H
	DD	0f01d3221H
	DD	0d019e01bH
	DD	07015c017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_param DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_decl DD 0c2a01H
	DD	0c742aH
	DD	0b5422H
	DD	0a341aH
	DD	0f00a320eH
	DD	0d006e008H
	DD	06002c004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_decl_name DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_treelist DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_tree DD 0c1c01H
	DD	0c641cH
	DD	0b541cH
	DD	0a341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_invoke_easy DD 0a8901H
	DD	0e5489H
	DD	0f0103214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	030066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_rvalue DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_lvalue DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_resolve DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_jumpF DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_invoke DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_return DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_enter DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_arith DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_fetch DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_store DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_const_i32 DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccemit_constant DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_translation_unit DD 0d4201H
	DD	04f442H
	DD	0ce42dH
	DD	0b6428H
	DD	0a3420H
	DD	0d007420bH
	DD	07003c005H
	DD	05002H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_external_declaration DD 083f01H
	DD	06343fH
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_block_or_single_stmt DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_statement DD 021H
	DD	imagerel ccread_statement
	DD	imagerel ccread_statement+588
	DD	imagerel $unwind$ccread_statement
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_statement DD 020521H
	DD	08c405H
	DD	imagerel ccread_statement
	DD	imagerel ccread_statement+588
	DD	imagerel $unwind$ccread_statement
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_statement DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_statement_list DD 021H
	DD	imagerel ccread_statement_list
	DD	imagerel ccread_statement_list+48
	DD	imagerel $unwind$ccread_statement_list
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_statement_list DD 040a21H
	DD	0b540aH
	DD	0a3405H
	DD	imagerel ccread_statement_list
	DD	imagerel ccread_statement_list+48
	DD	imagerel $unwind$ccread_statement_list
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_statement_list DD 081201H
	DD	0c6412H
	DD	0f00e3212H
	DD	0d00ae00cH
	DD	07006c008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_block DD 021H
	DD	imagerel ccread_block
	DD	imagerel ccread_block+96
	DD	imagerel $unwind$ccread_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_block DD 020521H
	DD	067405H
	DD	imagerel ccread_block
	DD	imagerel ccread_block+96
	DD	imagerel $unwind$ccread_block
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_block DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_param_decl_list DD 0c1f01H
	DD	0ce41fH
	DD	0bd418H
	DD	0a3411H
	DD	0f008320cH
	DD	07004c006H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_param_decl DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_type_specifier DD 021H
	DD	imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+58
	DD	imagerel $unwind$ccread_type_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_type_specifier DD 020521H
	DD	043405H
	DD	imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+58
	DD	imagerel $unwind$ccread_type_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_type_specifier DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$ccread_struct_or_union_specifier DD 021H
	DD	imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+102
	DD	imagerel $unwind$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$ccread_struct_or_union_specifier DD 021H
	DD	imagerel ccread_struct_or_union_specifier+102
	DD	imagerel ccread_struct_or_union_specifier+118
	DD	imagerel $chain$1$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ccread_struct_or_union_specifier DD 020021H
	DD	04e400H
	DD	imagerel ccread_struct_or_union_specifier+102
	DD	imagerel ccread_struct_or_union_specifier+118
	DD	imagerel $chain$1$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccread_struct_or_union_specifier DD 040a21H
	DD	04e40aH
	DD	057405H
	DD	imagerel ccread_struct_or_union_specifier+102
	DD	imagerel ccread_struct_or_union_specifier+118
	DD	imagerel $chain$1$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_struct_or_union_specifier DD 040d21H
	DD	06640dH
	DD	0e5405H
	DD	imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+102
	DD	imagerel $unwind$ccread_struct_or_union_specifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_struct_or_union_specifier DD 051001H
	DD	0f00c6210H
	DD	0c008d00aH
	DD	03006H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_struct_decl DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_init_decl DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_struct_decl_name_list DD 0a1e01H
	DD	0e341eH
	DD	0f01a521eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_init_decl_name_list DD 0a1e01H
	DD	0e341eH
	DD	0f01a521eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_struct_decl_name DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_init_decl_name DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_decl_name_modifier_maybe DD 021H
	DD	imagerel ccread_decl_name_modifier_maybe
	DD	imagerel ccread_decl_name_modifier_maybe+72
	DD	imagerel $unwind$ccread_decl_name_modifier_maybe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_decl_name_modifier_maybe DD 020521H
	DD	067405H
	DD	imagerel ccread_decl_name_modifier_maybe
	DD	imagerel ccread_decl_name_modifier_maybe+72
	DD	imagerel $unwind$ccread_decl_name_modifier_maybe
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_decl_name_modifier_maybe DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_direct_decl_name DD 021H
	DD	imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+124
	DD	imagerel $unwind$ccread_direct_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_direct_decl_name DD 020521H
	DD	08c405H
	DD	imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+124
	DD	imagerel $unwind$ccread_direct_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_direct_decl_name DD 0a1801H
	DD	0b6418H
	DD	0a5418H
	DD	093418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ccread_direct_decl_name_modifier DD 021H
	DD	imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+106
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccread_direct_decl_name_modifier DD 020021H
	DD	076400H
	DD	imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+106
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_direct_decl_name_modifier DD 061321H
	DD	06e413H
	DD	07640cH
	DD	0f5405H
	DD	imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+106
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_direct_decl_name_modifier DD 061101H
	DD	0f00d7211H
	DD	0c009d00bH
	DD	030067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_specifier_qualifier_list DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_declaration_specifiers DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_decl_name DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_param_type_list DD 0c1f01H
	DD	0ce41fH
	DD	0bd418H
	DD	0a3411H
	DD	0f008320cH
	DD	07004c006H
	DD	050026003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_assignment_expr DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_conditional_expr DD 021H
	DD	imagerel ccread_conditional_expr
	DD	imagerel ccread_conditional_expr+110
	DD	imagerel $unwind$ccread_conditional_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_conditional_expr DD 041021H
	DD	09f410H
	DD	085405H
	DD	imagerel ccread_conditional_expr
	DD	imagerel ccread_conditional_expr+110
	DD	imagerel $unwind$ccread_conditional_expr
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_conditional_expr DD 081301H
	DD	0b6413H
	DD	0a3413H
	DD	0e00f3213H
	DD	0700bc00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_logical_or_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_logical_and_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_bitwise_or_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_bitwise_xor_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_bitwise_and_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_equality_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_relational_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_shift_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_additive_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_multiplicative_expr DD 0c3301H
	DD	087433H
	DD	0b6419H
	DD	0a5419H
	DD	093419H
	DD	0f0153219H
	DD	0c011e013H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_unary_expr DD 0a1a01H
	DD	013741aH
	DD	012641aH
	DD	011541aH
	DD	010341aH
	DD	0e016d21aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_postfix DD 0a1401H
	DD	0d3414H
	DD	0f0103214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccread_primary DD 021H
	DD	imagerel ccread_primary
	DD	imagerel ccread_primary+58
	DD	imagerel $unwind$ccread_primary
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_primary DD 020021H
	DD	063400H
	DD	imagerel ccread_primary
	DD	imagerel ccread_primary+58
	DD	imagerel $unwind$ccread_primary
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_primary DD 021H
	DD	imagerel ccread_primary
	DD	imagerel ccread_primary+58
	DD	imagerel $unwind$ccread_primary
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_primary DD 020521H
	DD	063405H
	DD	imagerel ccread_primary
	DD	imagerel ccread_primary+58
	DD	imagerel $unwind$ccread_primary
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_primary DD 081501H
	DD	097415H
	DD	086415H
	DD	075415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_identifier DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_expression DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_arglist_expr DD 0c1f01H
	DD	0be41fH
	DD	0a3418H
	DD	0c5411H
	DD	0f00d3211H
	DD	0c009d00bH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccread_include DD 021H
	DD	imagerel ccread_include
	DD	imagerel ccread_include+77
	DD	imagerel $unwind$ccread_include
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccread_include DD 021H
	DD	imagerel ccread_include+77
	DD	imagerel ccread_include+101
	DD	imagerel $chain$0$ccread_include
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccread_include DD 020521H
	DD	0c3405H
	DD	imagerel ccread_include+77
	DD	imagerel ccread_include+101
	DD	imagerel $chain$0$ccread_include
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccread_include DD 020521H
	DD	0d5405H
	DD	imagerel ccread_include
	DD	imagerel ccread_include+77
	DD	imagerel $unwind$ccread_include
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_include DD 040901H
	DD	0e0057209H
	DD	060027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ccreader_move DD 021H
	DD	imagerel ccreader_move
	DD	imagerel ccreader_move+9
	DD	imagerel $unwind$ccreader_move
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccreader_move DD 081921H
	DD	0cf419H
	DD	012e413H
	DD	011740cH
	DD	0106404H
	DD	imagerel ccreader_move
	DD	imagerel ccreader_move+9
	DD	imagerel $unwind$ccreader_move
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccreader_move DD 030901H
	DD	05005c209H
	DD	03004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_all_tokens DD 0b2001H
	DD	0ce420H
	DD	012741cH
	DD	0116415H
	DD	010540eH
	DD	0f006c20aH
	DD	03004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccread_init DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_readstr DD 0c2101H
	DD	0d6421H
	DD	0c5421H
	DD	0b3421H
	DD	0f01d3221H
	DD	0d019e01bH
	DD	07015c017H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_identifier DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_next_token DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$cclex_next_token_internal DD 021H
	DD	imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+48
	DD	imagerel $unwind$cclex_next_token_internal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cclex_next_token_internal DD 020021H
	DD	0df400H
	DD	imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+48
	DD	imagerel $unwind$cclex_next_token_internal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cclex_next_token_internal DD 021H
	DD	imagerel cclex_next_token_internal+48
	DD	imagerel cclex_next_token_internal+211
	DD	imagerel $chain$1$cclex_next_token_internal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cclex_next_token_internal DD 020521H
	DD	0b5405H
	DD	imagerel cclex_next_token_internal+48
	DD	imagerel cclex_next_token_internal+211
	DD	imagerel $chain$1$cclex_next_token_internal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cclex_next_token_internal DD 040a21H
	DD	0df40aH
	DD	0c6405H
	DD	imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+48
	DD	imagerel $unwind$cclex_next_token_internal
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_next_token_internal DD 040901H
	DD	0e0055209H
	DD	030027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_token DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_init DD 020601H
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_hash_init DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_hashonly DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cclex_hash DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccfunc_include_local DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccfunc_local DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_add_edict DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock_add DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccblock DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_return DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_call DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_jumpF DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_enter DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_arith DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_fetch DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_store DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_param DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccedict_local DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$cctree_solve_decl_name DD 021H
	DD	imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+129
	DD	imagerel $unwind$cctree_solve_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$cctree_solve_decl_name DD 040021H
	DD	077400H
	DD	063400H
	DD	imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+129
	DD	imagerel $unwind$cctree_solve_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$cctree_solve_decl_name DD 021H
	DD	imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+129
	DD	imagerel $unwind$cctree_solve_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cctree_solve_decl_name DD 040a21H
	DD	07740aH
	DD	063405H
	DD	imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+129
	DD	imagerel $unwind$cctree_solve_decl_name
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_decl_name DD 020601H
	DD	060023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_block DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_call DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_rvalue DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_binary DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cctree_resolve_symbol_allusion DD 021H
	DD	imagerel cctree_resolve_symbol_allusion
	DD	imagerel cctree_resolve_symbol_allusion+116
	DD	imagerel $unwind$cctree_resolve_symbol_allusion
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cctree_resolve_symbol_allusion DD 020521H
	DD	063405H
	DD	imagerel cctree_resolve_symbol_allusion
	DD	imagerel cctree_resolve_symbol_allusion+116
	DD	imagerel $unwind$cctree_resolve_symbol_allusion
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_resolve_symbol_allusion DD 060f01H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cctree_resolve_call_symbol_allusion DD 021H
	DD	imagerel cctree_resolve_call_symbol_allusion
	DD	imagerel cctree_resolve_call_symbol_allusion+116
	DD	imagerel $unwind$cctree_resolve_call_symbol_allusion
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cctree_resolve_call_symbol_allusion DD 020521H
	DD	063405H
	DD	imagerel cctree_resolve_call_symbol_allusion
	DD	imagerel cctree_resolve_call_symbol_allusion+116
	DD	imagerel $unwind$cctree_resolve_call_symbol_allusion
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_resolve_call_symbol_allusion DD 060f01H
	DD	08640fH
	DD	07540fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_resolve_symbol DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_include_invokeable_symbol DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_statement DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_solve_decl DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_constant DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_ternary DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_binary DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_unary DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_identifier DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_decl DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_decl_name DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_return DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_goto DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_label DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_while DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_block DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_call DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_group DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_translation_unit DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_struct DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctype_new_fun DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctype_new_arr DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctype_new_ptr DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_clone DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_void@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint8@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint16@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int8@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int16@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_flo64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_flo32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctree_new DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstr_catf DD 061901H
	DD	0e0153219H
	DD	060127013H
	DD	030105011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccstr_vcatf DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblcat DD 0a1801H
	DD	0a6418H
	DD	095418H
	DD	083418H
	DD	0f0143218H
	DD	07010e012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblent_ DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$ccdlb_tblini DD 021H
	DD	imagerel ccdlb_tblini
	DD	imagerel ccdlb_tblini+25
	DD	imagerel $unwind$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$ccdlb_tblini DD 020021H
	DD	08e400H
	DD	imagerel ccdlb_tblini+25
	DD	imagerel ccdlb_tblini+32
	DD	imagerel $chain$0$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$ccdlb_tblini DD 041221H
	DD	08e412H
	DD	075405H
	DD	imagerel ccdlb_tblini+25
	DD	imagerel ccdlb_tblini+32
	DD	imagerel $chain$0$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccdlb_tblini DD 020521H
	DD	063405H
	DD	imagerel ccdlb_tblini
	DD	imagerel ccdlb_tblini+25
	DD	imagerel $unwind$ccdlb_tblini
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblini DD 040a01H
	DD	09640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_stradd DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_arradd DD 0c1e01H
	DD	0b741eH
	DD	0a641eH
	DD	09541eH
	DD	08341eH
	DD	0f01a321eH
	DD	0c016e018H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_arradd_ DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$ccdlb_tblput DD 021H
	DD	imagerel ccdlb_tblput
	DD	imagerel ccdlb_tblput+242
	DD	imagerel $unwind$ccdlb_tblput
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$ccdlb_tblput DD 020521H
	DD	0fc405H
	DD	imagerel ccdlb_tblput
	DD	imagerel ccdlb_tblput+242
	DD	imagerel $unwind$ccdlb_tblput
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblput DD 081801H
	DD	0f0145218H
	DD	0d010e012H
	DD	0600d700eH
	DD	0300b500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccdlb_tblget DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccformat DD 021901H
	DD	030153219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccformatex DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccformatv DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stbsp__raise_to_power10 DD 021H
	DD	imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+432
	DD	imagerel $unwind$stbsp__raise_to_power10
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stbsp__raise_to_power10 DD 040d21H
	DD	02780dH
	DD	036805H
	DD	imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+432
	DD	imagerel $unwind$stbsp__raise_to_power10
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp__raise_to_power10 DD 061c01H
	DD	0981cH
	DD	018814H
	DD	05007720eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$stbsp__real_to_str DD 021H
	DD	imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel $unwind$stbsp__real_to_str
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$stbsp__real_to_str DD 021H
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel stbsp__real_to_str+293
	DD	imagerel $chain$0$stbsp__real_to_str
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$stbsp__real_to_str DD 020521H
	DD	0bc405H
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel stbsp__real_to_str+293
	DD	imagerel $chain$0$stbsp__real_to_str
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$stbsp__real_to_str DD 020521H
	DD	0a7405H
	DD	imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+288
	DD	imagerel $unwind$stbsp__real_to_str
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp__real_to_str DD 081301H
	DD	0d5413H
	DD	0c3413H
	DD	0f00f5213H
	DD	0600be00dH
xdata	ENDS
;	COMDAT voltbl
voltbl	SEGMENT
_volmd	DW	01780H
	DW	01786H
voltbl	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_vsprintfcb DD 0103b19H
	DD	02d882aH
	DD	02e7825H
	DD	02f6821H
	DD	061011dH
	DD	0e00df00fH
	DD	0c009d00bH
	DD	060067007H
	DD	050043005H
	DD	imagerel __GSHandlerCheck
	DD	02c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_snprintf DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_sprintf DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_vsnprintf DD 051d19H
	DD	04a010bH
	DD	060037004H
	DD	03002H
	DD	imagerel __GSHandlerCheck
	DD	0240H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$stbsp_vsprintf DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccclocksecs DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccclocktick DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccpushfile DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccpullfile DD 081401H
	DD	0b6414H
	DD	0a5414H
	DD	093414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ccopenfile DD 020601H
	DD	030027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cctrace_ DD 060d01H
	DD	0e009720dH
	DD	060067007H
	DD	030045005H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 041b01H
	DD	07017521bH
	DD	030156016H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
CRT$XCU	SEGMENT
?ctype_flo64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_flo64@@YAXXZ ; ctype_flo64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int64@@YAXXZ ; ctype_int64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int32@@YAXXZ ; ctype_int32$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int16$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int16@@YAXXZ ; ctype_int16$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int8$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int8@@YAXXZ ; ctype_int8$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint64@@YAXXZ ; ctype_uint64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint32@@YAXXZ ; ctype_uint32$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint16$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint16@@YAXXZ ; ctype_uint16$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint8$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint8@@YAXXZ ; ctype_uint8$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_void$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_void@@YAXXZ ; ctype_void$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
emit$ = 64
l$1 = 88
l$2 = 96
l$3 = 104
read$ = 112
ret$4 = 256
$T5 = 256
size$6 = 416
argc$ = 416
tree$1$ = 424
l$7 = 424
l$8 = 424
out$9 = 424
argv$ = 424
exec$ = 432
l$10 = 440
main	PROC						; COMDAT
; File W:\cpp\void\ktt-c\test.c
; Line 5
$LN258:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-88]
	sub	rsp, 344				; 00000158H
; Line 9
	mov	r8d, 9
	movaps	XMMWORD PTR [rsp+320], xmm6
	lea	rax, OFFSET FLAT:??_C@_0L@MLAPBNHN@log?5test?51@
	mov	QWORD PTR [rsp+40], rax
	lea	rdi, OFFSET FLAT:??_C@_04GHJNJNPO@main@
	lea	rbx, OFFSET FLAT:??_C@_03MGHMBJCF@log@
	mov	r9, rdi
	lea	ecx, QWORD PTR [r8-7]
	mov	QWORD PTR [rsp+32], rbx
	lea	rdx, OFFSET FLAT:??_C@_06EKBLEAK@test?4c@
	call	cctrace_
; Line 10
	mov	r8d, 10
	lea	rax, OFFSET FLAT:??_C@_0L@OACCEOLO@log?5test?52@
	mov	QWORD PTR [rsp+40], rax
	lea	rdx, OFFSET FLAT:??_C@_06EKBLEAK@test?4c@
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	lea	ecx, QWORD PTR [r8-7]
	call	cctrace_
; Line 11
	mov	r8d, 11
	lea	rax, OFFSET FLAT:??_C@_0L@PJDJHPPP@log?5test?53@
	mov	QWORD PTR [rsp+40], rax
	lea	rdx, OFFSET FLAT:??_C@_06EKBLEAK@test?4c@
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	lea	ecx, QWORD PTR [r8-7]
	call	cctrace_
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	movups	XMMWORD PTR read$[rbp-192], xmm0
; File W:\cpp\void\ktt-c\cclex.c
; Line 173
	xor	eax, eax
; Line 177
	mov	ecx, 24576				; 00006000H
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	movups	XMMWORD PTR read$[rbp-176], xmm0
; File W:\cpp\void\ktt-c\cclex.c
; Line 173
	mov	QWORD PTR $T5[rbp-208], rax
; Line 176
	xor	r14d, r14d
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	movups	XMMWORD PTR read$[rbp-160], xmm0
	movups	XMMWORD PTR read$[rbp-224], xmm0
; File W:\cpp\void\ktt-c\cclex.c
; Line 175
	mov	QWORD PTR read$[rbp-224], 1024		; 00000400H
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	movups	XMMWORD PTR read$[rbp-208], xmm0
	movups	XMMWORD PTR read$[rsp], xmm0
	movups	XMMWORD PTR read$[rbp-240], xmm0
	movups	XMMWORD PTR read$[rbp-144], xmm0
	movups	XMMWORD PTR read$[rbp-128], xmm0
; File W:\cpp\void\ktt-c\cclex.c
; Line 173
	movsd	xmm0, QWORD PTR $T5[rbp-208]
	movsd	QWORD PTR read$[rbp-152], xmm0
	movups	XMMWORD PTR read$[rbp-200], xmm1
	movups	XMMWORD PTR read$[rbp-184], xmm1
	movups	XMMWORD PTR read$[rbp-168], xmm1
; Line 177
	call	malloc
; Line 178
	mov	ecx, DWORD PTR read$[rbp-224]
	xor	edx, edx
	mov	QWORD PTR read$[rbp-216], rax
	lea	r8, QWORD PTR [rcx+rcx*2]
	mov	rcx, rax
	shl	r8, 3
	call	memset
; Line 180
	lea	rcx, QWORD PTR read$[rsp]
	call	cclex_hash_init
; File W:\cpp\void\ktt-c\ccfio.c
; Line 36
	mov	QWORD PTR [rsp+48], r14
	lea	r8d, QWORD PTR [r14+3]
	mov	DWORD PTR [rsp+40], r14d
	lea	rcx, OFFSET FLAT:??_C@_0L@NNJAJELN@test?4svm?4c@
	xor	r9d, r9d
	mov	DWORD PTR [rsp+32], 4
	mov	edx, -1073741824			; c0000000H
; File W:\cpp\void\ktt-c\ccread.c
; Line 11
	mov	QWORD PTR read$[rbp-120], r14
; Line 12
	mov	QWORD PTR read$[rbp-128], r14
; Line 13
	mov	QWORD PTR read$[rbp-136], r14
; File W:\cpp\void\ktt-c\ccfio.c
; Line 36
	call	QWORD PTR __imp_CreateFileA
; Line 37
	mov	esi, r14d
; File W:\cpp\void\ktt-c\ccread.c
; Line 42
	mov	DWORD PTR size$6[rbp-256], r14d
; File W:\cpp\void\ktt-c\ccfio.c
; Line 21
	cmp	rax, -1
; Line 37
	cmovne	rsi, rax
; Line 21
	cmp	rsi, -1
; Line 42
	jne	SHORT $LN56@main
	mov	edi, r14d
	jmp	SHORT $LN60@main
$LN56@main:
; Line 26
	xor	edx, edx
	mov	rcx, rsi
	call	QWORD PTR __imp_GetFileSize
; Line 46
	mov	ebx, DWORD PTR size$6[rbp-256]
	cmp	eax, ebx
	jae	SHORT $LN57@main
	mov	rdi, r14
	jmp	SHORT $LN60@main
$LN57@main:
; Line 47
	test	ebx, ebx
	cmove	ebx, eax
; Line 48
	mov	ecx, ebx
	call	malloc
; Line 50
	lea	r9, QWORD PTR size$6[rbp-256]
	mov	QWORD PTR [rsp+32], r14
	mov	r8d, ebx
	mov	rdx, rax
	mov	rcx, rsi
	mov	rdi, rax
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	cmove	rdi, r14
$LN60@main:
; Line 31
	mov	rcx, rsi
	call	QWORD PTR __imp_CloseHandle
; File W:\cpp\void\ktt-c\ccread.c
; Line 45
	mov	edx, DWORD PTR size$6[rbp-256]
	lea	rcx, QWORD PTR read$[rsp]
	mov	r8, rdi
	call	ccreader_move
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\ccemit.c
; Line 415
	xor	eax, eax
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	mov	ecx, 176				; 000000b0H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 415
	mov	QWORD PTR emit$[rsp+16], rax
	movups	XMMWORD PTR emit$[rsp], xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	call	malloc
	mov	r12, rax
	mov	QWORD PTR tree$1$[rbp-256], rax
	xorps	xmm0, xmm0
; File W:\cpp\void\ktt-c\ccread.c
; Line 1240
	lea	r13, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; File W:\cpp\void\ktt-c\cctree.h
; Line 128
	mov	QWORD PTR [rax], 22
	xor	eax, eax
	movups	XMMWORD PTR [r12+20], xmm0
	movups	XMMWORD PTR [r12+36], xmm0
	movups	XMMWORD PTR [r12+52], xmm0
	movups	XMMWORD PTR [r12+68], xmm0
	movups	XMMWORD PTR [r12+84], xmm0
	movups	XMMWORD PTR [r12+100], xmm0
	movups	XMMWORD PTR [r12+116], xmm0
	movups	XMMWORD PTR [r12+132], xmm0
	movups	XMMWORD PTR [r12+148], xmm0
	mov	QWORD PTR [r12+164], rax
	mov	DWORD PTR [r12+172], eax
; Line 129
	mov	QWORD PTR [r12+8], r14
; Line 130
	mov	DWORD PTR [r12+16], r14d
	npad	6
$LL73@main:
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rcx, QWORD PTR read$[rbp-128]
	mov	rax, r13
	mov	rdx, QWORD PTR read$[rbp-136]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 129
	mov	eax, DWORD PTR [rax]
	sub	eax, 63					; 0000003fH
	cmp	eax, 7
	ja	SHORT $LN103@main
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN103@main
	mov	QWORD PTR read$[rbp-120], rcx
	add	rcx, 56					; 00000038H
	mov	QWORD PTR read$[rbp-128], rcx
$LN103@main:
; Line 1029
	mov	r8d, 20
	lea	rcx, QWORD PTR read$[rsp]
	mov	rdx, r12
	call	ccread_specifier_qualifier_list
; Line 62
	mov	rdx, QWORD PTR read$[rbp-128]
; Line 1029
	mov	rbx, rax
; Line 62
	mov	rax, QWORD PTR read$[rbp-136]
	mov	rcx, r13
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 142
	mov	ecx, DWORD PTR [rcx]
	sub	ecx, 40					; 00000028H
	cmp	ecx, 1
	ja	SHORT $LN122@main
; Line 152
	cmp	rdx, rax
	jae	SHORT $LN122@main
	mov	QWORD PTR read$[rbp-120], rdx
	add	rdx, 56					; 00000038H
	mov	QWORD PTR read$[rbp-128], rdx
$LN122@main:
; Line 834
	test	rbx, rbx
	je	$LN86@main
; Line 836
	mov	r9, rbx
	lea	rcx, QWORD PTR read$[rsp]
	mov	r8d, 20
	mov	rdx, r12
	call	ccread_init_decl_name_list
	mov	rdi, rax
	test	rax, rax
	je	$LN86@main
; File W:\cpp\void\ktt-c\cctree.h
; Line 249
	mov	r8d, 20
	mov	rdx, r12
	lea	ecx, QWORD PTR [r8-4]
	call	cctree_new
	mov	r15, rax
; Line 250
	mov	QWORD PTR [rax+48], rbx
; Line 251
	mov	QWORD PTR [rax+32], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 1258
	mov	rbx, QWORD PTR [rdi]
; Line 1264
	mov	rcx, QWORD PTR [rbx+48]
	cmp	DWORD PTR [rcx], 3
	jne	SHORT $LN78@main
; Line 1269
	xor	r8d, r8d
	lea	rcx, QWORD PTR read$[rsp]
	mov	rdx, rbx
	call	ccread_block
	mov	QWORD PTR [rbx+88], rax
$LN78@main:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 283
	mov	rax, QWORD PTR [r12+32]
; Line 241
	mov	edi, r14d
; Line 284
	test	rax, rax
	lea	rbx, QWORD PTR [rax-24]
	cmove	rbx, r14
; Line 246
	test	rbx, rbx
	je	SHORT $LN145@main
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	r14d, DWORD PTR [rbx+20]
$LN145@main:
; Line 256
	lea	esi, DWORD PTR [r14+8]
	mov	rax, rbx
	cmp	edi, esi
	jae	SHORT $LN148@main
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, esi
	cmp	ecx, esi
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN148@main
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN148@main:
; Line 273
	mov	DWORD PTR [rax+16], edi
; Line 285
	lea	rcx, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], esi
; Line 286
	mov	eax, r14d
	shr	rax, 3
	mov	QWORD PTR [r12+32], rcx
; File W:\cpp\void\ktt-c\ccread.c
; Line 1243
	xor	r14d, r14d
	mov	QWORD PTR [rcx+rax*8], r15
	jmp	$LL73@main
$LN86@main:
; File W:\cpp\void\ktt-c\cctree.h
; Line 574
	mov	rbx, QWORD PTR [r12+32]
	npad	1
$LL174@main:
	mov	r13, QWORD PTR [r12+32]
	test	r13, r13
	je	SHORT $LN176@main
	mov	eax, DWORD PTR [r13-4]
	jmp	SHORT $LN177@main
$LN176@main:
	mov	eax, r14d
$LN177@main:
	and	rax, -8
	add	rax, r13
	cmp	rbx, rax
	jae	SHORT $LL173@main
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_decl
	add	rbx, 8
	jmp	SHORT $LL174@main
	npad	3
$LL173@main:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 410
	mov	rcx, QWORD PTR [r12+32]
	test	rcx, rcx
	je	SHORT $LN159@main
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN160@main
$LN159@main:
	mov	eax, r14d
$LN160@main:
	and	rax, -8
	add	rax, rcx
	cmp	r13, rax
	jae	$LN156@main
	mov	r12, QWORD PTR [r13]
; Line 379
	mov	rsi, QWORD PTR [r12+32]
	npad	5
$LL164@main:
	mov	rcx, QWORD PTR [r12+32]
	test	rcx, rcx
	je	SHORT $LN169@main
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN170@main
$LN169@main:
	mov	eax, r14d
$LN170@main:
	and	rax, -8
	add	rax, rcx
	cmp	rsi, rax
	jae	$LN155@main
; Line 380
	mov	rdi, QWORD PTR [rsi]
; Line 382
	mov	rax, QWORD PTR [rdi+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN162@main
; Line 384
	mov	edx, 8
	lea	rcx, QWORD PTR emit$[rsp]
	mov	r9, rdi
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	r15, QWORD PTR emit$[rsp]
; Line 386
	mov	ecx, 48					; 00000030H
	mov	r14d, eax
	call	malloc
	xorps	xmm0, xmm0
; Line 388
	mov	ecx, 24
	mov	rbx, rax
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	call	malloc
	mov	QWORD PTR [r15+r14*8], rax
; Line 392
	mov	r8, rdi
	mov	rdx, rbx
	mov	DWORD PTR [rax], 4
	mov	rcx, QWORD PTR [r15+r14*8]
	mov	QWORD PTR [rcx+8], rbx
	lea	rcx, QWORD PTR emit$[rsp]
	call	ccemit_function
; Line 394
	mov	rdx, QWORD PTR [rdi+24]
	lea	r8, OFFSET FLAT:??_C@_04GHJNJNPO@main@
	xor	ecx, ecx
	npad	12
$LL249@main:
	movzx	eax, BYTE PTR [rdx+rcx]
	inc	rcx
	cmp	al, BYTE PTR [r8+rcx-1]
	jne	SHORT $LN250@main
	cmp	rcx, 5
	jne	SHORT $LL249@main
; Line 395
	mov	rax, QWORD PTR [r15+r14*8]
	mov	QWORD PTR emit$[rsp+8], rax
$LN250@main:
; Line 379
	xor	r14d, r14d
$LN162@main:
	add	rsi, 8
	jmp	$LL164@main
$LN155@main:
; Line 410
	mov	r12, QWORD PTR tree$1$[rbp-256]
	add	r13, 8
	jmp	$LL173@main
$LN156@main:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 415
	lea	rax, QWORD PTR emit$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 265
	mov	edx, 56					; 00000038H
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 415
	mov	QWORD PTR exec$[rbp-256], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 265
	call	realloc
; File W:\cpp\void\ktt-c\ccfio.c
; Line 9
	lea	rcx, QWORD PTR l$10[rbp-256]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 269
	mov	QWORD PTR [rax], r14
; Line 285
	lea	rbx, QWORD PTR [rax+24]
; Line 269
	mov	QWORD PTR [rax+8], r14
; Line 273
	mov	DWORD PTR [rax+16], 32			; 00000020H
; Line 274
	mov	DWORD PTR [rax+20], 32			; 00000020H
; File W:\cpp\void\ktt-c\ccexec.c
; Line 419
	mov	DWORD PTR [rbx+8], 1
; Line 420
	mov	DWORD PTR [rbx+24], 22
; File W:\cpp\void\ktt-c\ccfio.c
; Line 9
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\ktt-c\ccexec.c
; Line 424
	mov	rdx, QWORD PTR emit$[rsp+8]
	lea	r8, QWORD PTR ret$4[rbp-256]
	mov	r9, rbx
	lea	rcx, QWORD PTR exec$[rbp-256]
	call	ccexec_invoke
; File W:\cpp\void\ktt-c\ccfio.c
; Line 9
	lea	rcx, QWORD PTR l$8[rbp-256]
	call	QWORD PTR __imp_QueryPerformanceCounter
	lea	rcx, QWORD PTR l$3[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\ktt-c\ccexec.c
; Line 428
	mov	edi, DWORD PTR [rbx+24]
; Line 402
	cmp	edi, 2
	jl	SHORT $LN199@main
; Line 403
	lea	ecx, DWORD PTR [rdi-2]
	call	fib
; Line 404
	lea	ecx, DWORD PTR [rdi-1]
	mov	ebx, eax
	call	fib
; Line 405
	add	ebx, eax
	jmp	SHORT $LN198@main
$LN199@main:
; Line 407
	mov	ebx, edi
$LN198@main:
; File W:\cpp\void\ktt-c\ccfio.c
; Line 9
	lea	rcx, QWORD PTR l$2[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 15
	lea	rcx, QWORD PTR l$1[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	mov	rcx, QWORD PTR l$8[rbp-256]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	xorps	xmm6, xmm6
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	sub	rcx, QWORD PTR l$10[rbp-256]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	js	SHORT $LN247@main
	cvtsi2sd xmm6, rcx
	jmp	SHORT $LN248@main
$LN247@main:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	cvtsi2sd xmm6, rax
	addsd	xmm6, xmm6
$LN248@main:
	xorps	xmm0, xmm0
; Line 15
	lea	rcx, QWORD PTR l$7[rbp-256]
; Line 16
	cvtsi2sd xmm0, QWORD PTR l$1[rsp]
	divsd	xmm6, xmm0
; Line 15
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	mov	rcx, QWORD PTR l$2[rsp]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	xorps	xmm2, xmm2
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	sub	rcx, QWORD PTR l$3[rsp]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	js	SHORT $LN245@main
	cvtsi2sd xmm2, rcx
	jmp	SHORT $LN246@main
$LN245@main:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	cvtsi2sd xmm2, rax
	addsd	xmm2, xmm2
$LN246@main:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	mov	r9d, DWORD PTR ret$4[rbp-232]
	lea	rcx, OFFSET FLAT:??_C@_0BO@DFPLCIIJ@fib?5c?3?$CFi?5?$CFf?$CIs?$CJ?5?9?5cc?3?$CFi?5?$CFf?$CIs?$CJ?6@
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rsp+32], xmm6
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	cvtsi2sd xmm0, QWORD PTR l$7[rbp-256]
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	mov	edx, ebx
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	divsd	xmm2, xmm0
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	movq	r8, xmm2
	call	printf
; File W:\cpp\void\ktt-c\ccread.c
; Line 19
	mov	rcx, QWORD PTR read$[rbp-144]
	test	rcx, rcx
	je	SHORT $LN209@main
	add	rcx, -24
	jmp	SHORT $LN210@main
$LN209@main:
	mov	rcx, r14
$LN210@main:
	call	free
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 265
	mov	edx, 615				; 00000267H
	xor	ecx, ecx
	call	realloc
; Line 297
	lea	rdx, OFFSET FLAT:??_C@_0CEP@GDNJNAFF@?$CDdefine?5f64?5double?$AN?6?$CDdefine?5f32@
; Line 269
	mov	QWORD PTR [rax], r14
; Line 285
	lea	r8, QWORD PTR [rax+24]
; Line 269
	mov	QWORD PTR [rax+8], r14
; Line 297
	mov	rcx, r8
; Line 273
	mov	DWORD PTR [rax+16], 591			; 0000024fH
; Line 274
	mov	DWORD PTR [rax+20], 590			; 0000024eH
; Line 297
	mov	eax, 4
; Line 285
	mov	QWORD PTR out$9[rbp-256], r8
	npad	1
$LL244@main:
; Line 297
	lea	rcx, QWORD PTR [rcx+128]
	movups	xmm0, XMMWORD PTR [rdx]
	lea	rdx, QWORD PTR [rdx+128]
	movups	XMMWORD PTR [rcx-128], xmm0
	movups	xmm1, XMMWORD PTR [rdx-112]
	movups	XMMWORD PTR [rcx-112], xmm1
	movups	xmm0, XMMWORD PTR [rdx-96]
	movups	XMMWORD PTR [rcx-96], xmm0
	movups	xmm1, XMMWORD PTR [rdx-80]
	movups	XMMWORD PTR [rcx-80], xmm1
	movups	xmm0, XMMWORD PTR [rdx-64]
	movups	XMMWORD PTR [rcx-64], xmm0
	movups	xmm1, XMMWORD PTR [rdx-48]
	movups	XMMWORD PTR [rcx-48], xmm1
	movups	xmm0, XMMWORD PTR [rdx-32]
	movups	XMMWORD PTR [rcx-32], xmm0
	movups	xmm1, XMMWORD PTR [rdx-16]
	movups	XMMWORD PTR [rcx-16], xmm1
	sub	rax, 1
	jne	SHORT $LL244@main
	movups	xmm0, XMMWORD PTR [rdx]
; Line 273
	mov	r15d, r14d
; File W:\cpp\void\ktt-c\ccread.c
; Line 19
	lea	r14, OFFSET FLAT:?ts@?2??main@@9@4QBUkttcc_type@@B+8
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 297
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1
	mov	rax, QWORD PTR [rdx+64]
	mov	QWORD PTR [rcx+64], rax
	mov	eax, DWORD PTR [rdx+72]
	mov	DWORD PTR [rcx+72], eax
	movzx	eax, WORD PTR [rdx+76]
	mov	WORD PTR [rcx+76], ax
; Line 298
	mov	BYTE PTR [r8+590], 0
	npad	7
$LL4@main:
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 325
	cmp	DWORD PTR [r14-8], 2
	jne	$LN2@main
; Line 327
	mov	esi, DWORD PTR [r14+4]
	cmp	esi, DWORD PTR [r14]
	jg	$LN2@main
	npad	8
$LL11@main:
; Line 329
	mov	ebx, DWORD PTR [r14-4]
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
	mov	ecx, 32					; 00000020H
	mov	rdi, rax
; Line 35
	mov	DWORD PTR [rax], 3
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 75
	mov	DWORD PTR [rax+4], ebx
; Line 76
	mov	DWORD PTR [rax+16], esi
; Line 33
	call	malloc
; Line 331
	mov	rdx, rax
	lea	rcx, QWORD PTR out$9[rbp-256]
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rdi
; Line 46
	mov	DWORD PTR [rax+20], 2
; Line 331
	call	emit_vectype
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
; Line 332
	mov	rdx, rax
	lea	rcx, QWORD PTR out$9[rbp-256]
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rdi
; Line 46
	mov	DWORD PTR [rax+20], 3
; Line 332
	call	emit_vectype
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
; Line 333
	mov	rdx, rax
	lea	rcx, QWORD PTR out$9[rbp-256]
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rdi
; Line 46
	mov	DWORD PTR [rax+20], 4
; Line 333
	call	emit_vectype
	add	esi, esi
	cmp	esi, DWORD PTR [r14]
	jle	$LL11@main
$LN2@main:
; File W:\cpp\void\ktt-c\test.c
; Line 67
	inc	r15d
	add	r14, 32					; 00000020H
	cmp	r15d, 4
	jb	$LL4@main
; File W:\cpp\void\ktt-c\ccfio.c
; Line 36
	xor	r14d, r14d
	lea	rcx, OFFSET FLAT:??_C@_09JFGGGBPA@gen?4ktt?4c@
	mov	QWORD PTR [rsp+48], r14
	xor	r9d, r9d
	mov	DWORD PTR [rsp+40], r14d
	mov	edx, -1073741824			; c0000000H
	mov	DWORD PTR [rsp+32], 4
	lea	r8d, QWORD PTR [r14+3]
	call	QWORD PTR __imp_CreateFileA
; File W:\cpp\void\ktt-c\test.c
; Line 72
	mov	rdi, QWORD PTR out$9[rbp-256]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 37
	mov	ebx, r14d
; Line 21
	cmp	rax, -1
; Line 37
	cmovne	rbx, rax
; File W:\cpp\void\ktt-c\test.c
; Line 72
	test	rdi, rdi
	je	SHORT $LN6@main
	mov	esi, DWORD PTR [rdi-4]
	jmp	SHORT $LN7@main
$LN6@main:
	mov	esi, r14d
$LN7@main:
; File W:\cpp\void\ktt-c\ccfio.c
; Line 21
	cmp	rbx, -1
; Line 56
	je	SHORT $LN37@main
; Line 26
	xor	edx, edx
	mov	rcx, rbx
	call	QWORD PTR __imp_GetFileSize
; Line 60
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], r14
	mov	r8d, esi
	mov	rdx, rdi
	mov	rcx, rbx
	call	QWORD PTR __imp_WriteFile
$LN37@main:
; Line 31
	mov	rcx, rbx
	call	QWORD PTR __imp_CloseHandle
; File W:\cpp\void\ktt-c\test.c
; Line 76
	movaps	xmm6, XMMWORD PTR [rsp+320]
	xor	eax, eax
	add	rsp, 344				; 00000158H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_type
_TEXT	SEGMENT
out$ = 48
t$ = 56
emit_type PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 324
$LN29:
	mov	QWORD PTR [rsp+32], rbx
	push	r14
	sub	rsp, 32					; 00000020H
; Line 325
	cmp	DWORD PTR [rdx], 2
	mov	rbx, rdx
	mov	r14, rcx
	jne	$LN3@emit_type
; Line 327
	mov	QWORD PTR [rsp+48], rbp
	mov	ebp, DWORD PTR [rdx+12]
	cmp	ebp, DWORD PTR [rdx+8]
	jg	$LN27@emit_type
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+64], rdi
	npad	11
$LL4@emit_type:
; Line 329
	mov	edi, DWORD PTR [rbx+4]
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
	mov	ecx, 32					; 00000020H
	mov	rsi, rax
; Line 35
	mov	DWORD PTR [rax], 3
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 75
	mov	DWORD PTR [rax+4], edi
; Line 76
	mov	DWORD PTR [rax+16], ebp
; Line 33
	call	malloc
; Line 331
	mov	rdx, rax
	mov	rcx, r14
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rsi
; Line 46
	mov	DWORD PTR [rax+20], 2
; Line 331
	call	emit_vectype
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
; Line 332
	mov	rdx, rax
	mov	rcx, r14
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rsi
; Line 46
	mov	DWORD PTR [rax+20], 3
; Line 332
	call	emit_vectype
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
; Line 333
	mov	rdx, rax
	mov	rcx, r14
; Line 35
	mov	DWORD PTR [rax], 4
; Line 45
	mov	QWORD PTR [rax+24], rsi
; Line 46
	mov	DWORD PTR [rax+20], 4
; Line 333
	call	emit_vectype
	add	ebp, ebp
	cmp	ebp, DWORD PTR [rbx+8]
	jle	$LL4@emit_type
; Line 327
	mov	rdi, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+56]
$LN27@emit_type:
	mov	rbp, QWORD PTR [rsp+48]
$LN3@emit_type:
; Line 337
	mov	rbx, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
emit_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_vectype
_TEXT	SEGMENT
out$ = 80
t$ = 88
emit_vectype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 291
$LN273:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
; Line 292
	xor	r15d, r15d
	lea	r14, OFFSET FLAT:fn
	cmp	DWORD PTR [rdx], 4
	mov	rbp, rdx
	mov	rbx, rcx
	jne	$LN270@emit_vecty
; Line 293
	lea	rdx, OFFSET FLAT:??_C@_0BA@GHJONKJL@typedef?5struct?5@
	call	ccstr_catf
; Line 109
	lea	r8d, QWORD PTR [r15+32]
	mov	rcx, rbp
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 295
	lea	rdx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 296
	lea	rdx, OFFSET FLAT:??_C@_01HCONENDN@?$HL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 297
	lea	r12, QWORD PTR [rbp+24]
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN271@emit_vecty
	mov	rdi, r14
	npad	6
$LL4@emit_vecty:
; Line 298
	lea	rdx, OFFSET FLAT:??_C@_04DDJEOHF@?$AN?6?5?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 299
	movzx	r8d, BYTE PTR [rdi]
	mov	rcx, rbx
	mov	rdx, QWORD PTR [r12]
	call	emit_vardecl
; Line 300
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL4@emit_vecty
$LN271@emit_vecty:
; Line 302
	lea	rdx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 303
	lea	rdx, OFFSET FLAT:??_C@_02MJBDPJEM@?$HN?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 305
	lea	rdx, OFFSET FLAT:??_C@_03LKGCEJK@?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
	jmp	SHORT $LN5@emit_vecty
$LN270@emit_vecty:
	lea	r12, QWORD PTR [rdx+24]
$LN5@emit_vecty:
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 184
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rcx, OFFSET FLAT:??_C@_03MPLDLMAM@?$CFsm@
	call	ccformat
	movsxd	rsi, DWORD PTR [rbp+20]
; Line 164
	lea	rdx, OFFSET FLAT:??_C@_07PGOEDBHP@static?5@
; Line 184
	mov	r12, QWORD PTR [r12]
; Line 164
	mov	rcx, rbx
; Line 184
	mov	rdi, rax
; Line 164
	call	ccstr_catf
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 170
	mov	r8, rdi
	lea	rdx, OFFSET FLAT:??_C@_04JEGEICAJ@?$AN?6?$CFs@
	mov	rcx, rbx
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI@
	mov	rcx, rbx
	call	ccstr_catf
; Line 173
	test	rsi, rsi
	jle	SHORT $LN16@emit_vecty
	mov	rdi, r15
	npad	3
$LL17@emit_vecty:
; Line 174
	test	rdi, rdi
	je	SHORT $LN20@emit_vecty
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
$LN20@emit_vecty:
; Line 175
	movzx	r8d, BYTE PTR [rdi+r14]
	mov	rdx, r12
	mov	rcx, rbx
	call	emit_vardecl
	inc	rdi
	cmp	rdi, rsi
	jl	SHORT $LL17@emit_vecty
$LN16@emit_vecty:
; Line 177
	lea	rdx, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ@
	mov	rcx, rbx
	call	ccstr_catf
; Line 187
	lea	rdx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 188
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 190
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 191
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 193
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN9@emit_vecty
	mov	rdi, r14
$LL10@emit_vecty:
; Line 194
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@
	mov	r9d, r8d
	mov	rcx, rbx
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL10@emit_vecty
$LN9@emit_vecty:
; Line 197
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 198
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 203
	lea	r9, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
	mov	rcx, rbx
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	call	ccstr_catf
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN28@emit_vecty
	mov	rdi, r14
	npad	11
$LL29@emit_vecty:
; Line 223
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	mov	DWORD PTR [rsp+40], r8d
	mov	r9d, r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 42			; 0000002aH
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL29@emit_vecty
$LN28@emit_vecty:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 309
	lea	r8, OFFSET FLAT:??_C@_02FPIMKNGF@?$CK?$DN@
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vecoprari
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 203
	lea	r9, OFFSET FLAT:??_C@_01KMDKNFGN@?1@
	mov	rcx, rbx
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	call	ccstr_catf
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN77@emit_vecty
	mov	rdi, r14
	npad	14
$LL78@emit_vecty:
; Line 223
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	mov	DWORD PTR [rsp+40], r8d
	mov	r9d, r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 47			; 0000002fH
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL78@emit_vecty
$LN77@emit_vecty:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 310
	lea	r8, OFFSET FLAT:??_C@_02FJEHGPIO@?1?$DN@
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vecoprari
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 203
	lea	r9, OFFSET FLAT:??_C@_01MIFGBAGJ@?$CL@
	mov	rcx, rbx
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	call	ccstr_catf
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	mov	esi, r15d
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN126@emit_vecty
	mov	rdi, r14
	npad	14
$LL127@emit_vecty:
; Line 223
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	mov	DWORD PTR [rsp+40], r8d
	mov	r9d, r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 43			; 0000002bH
	call	ccstr_catf
	inc	esi
	lea	rdi, QWORD PTR [rdi+1]
	cmp	esi, DWORD PTR [rbp+20]
	jl	SHORT $LL127@emit_vecty
$LN126@emit_vecty:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 311
	lea	r8, OFFSET FLAT:??_C@_02FOEOMHFC@?$CL?$DN@
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vecoprari
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbp
	call	gen_typename_ex
; Line 203
	lea	r9, OFFSET FLAT:??_C@_01JOAMLHOP@?9@
	mov	rcx, rbx
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	call	ccstr_catf
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rbp
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	cmp	DWORD PTR [rbp+20], r15d
	jle	SHORT $LN175@emit_vecty
	npad	4
$LL176@emit_vecty:
; Line 223
	movsx	r8d, BYTE PTR [r14]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	mov	DWORD PTR [rsp+40], r8d
	mov	r9d, r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], 45			; 0000002dH
	call	ccstr_catf
	inc	r15d
	lea	r14, QWORD PTR [r14+1]
	cmp	r15d, DWORD PTR [rbp+20]
	jl	SHORT $LL176@emit_vecty
$LN175@emit_vecty:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 312
	lea	r8, OFFSET FLAT:??_C@_02FKMDLLOA@?9?$DN@
	mov	rdx, rbp
	mov	rcx, rbx
; Line 321
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r12
; Line 312
	jmp	emit_vecoprari
emit_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_vecoprari
_TEXT	SEGMENT
out$ = 64
t$ = 72
opr$ = 80
emit_vecoprari PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 202
$LN62:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	r14, r8
	mov	rbx, rcx
; Line 109
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rdi
	mov	r8d, 32					; 00000020H
	call	gen_typename_ex
; Line 203
	mov	r9, r14
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rdx, OFFSET FLAT:??_C@_0BI@KJIMFLAO@static?5?$CFs?5operator?5?$CFs?5?$CI@
	mov	rcx, rbx
	call	ccstr_catf
; Line 205
	mov	rax, -1
$LL60@emit_vecop:
	inc	rax
	cmp	BYTE PTR [r14+rax], 0
	jne	SHORT $LL60@emit_vecop
	cmp	rax, 2
	jne	SHORT $LN5@emit_vecop
	cmp	BYTE PTR [r14+1], 61			; 0000003dH
	jne	SHORT $LN5@emit_vecop
; Line 109
	lea	r8d, QWORD PTR [rax+30]
	mov	rcx, rdi
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	call	gen_typename_ex
; Line 127
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_03IKGEINEE@?$CFs?5@
	call	ccstr_catf
; Line 121
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
	mov	rcx, rbx
	call	ccstr_catf
; Line 142
	mov	r8d, 97					; 00000061H
	lea	rdx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	jne	SHORT $LN6@emit_vecop
	npad	4
$LL57@emit_vecop:
; Line 122
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	je	SHORT $LL57@emit_vecop
; Line 208
	jmp	SHORT $LN6@emit_vecop
$LN5@emit_vecop:
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, rdi
	mov	rcx, rbx
	call	emit_vardecl
$LN6@emit_vecop:
; Line 213
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rbx
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, rdi
	mov	rcx, rbx
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:??_C@_03PBLGLLIO@?$CJ?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rbx
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, rdi
	mov	rcx, rbx
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rbx
	call	ccstr_catf
; Line 222
	xor	ebp, ebp
	cmp	DWORD PTR [rdi+20], ebp
	jle	SHORT $LN3@emit_vecop
	mov	QWORD PTR [rsp+64], rsi
	lea	rsi, OFFSET FLAT:fn
	npad	1
$LL4@emit_vecop:
; Line 223
	movsx	r8d, BYTE PTR [rsi]
	lea	rdx, OFFSET FLAT:??_C@_0BF@MMCOJPJJ@?$AN?6?5?5r?4?$CFc?$DNa?4?$CFc?$CFcb?4?$CFc?$DL@
	movsx	eax, BYTE PTR [r14]
	mov	r9d, r8d
	mov	DWORD PTR [rsp+40], r8d
	mov	rcx, rbx
	mov	DWORD PTR [rsp+32], eax
	call	ccstr_catf
	inc	ebp
	lea	rsi, QWORD PTR [rsi+1]
	cmp	ebp, DWORD PTR [rdi+20]
	jl	SHORT $LL4@emit_vecop
; Line 222
	mov	rsi, QWORD PTR [rsp+64]
$LN3@emit_vecop:
; Line 225
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rbx
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rbx
; Line 227
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
; Line 226
	jmp	ccstr_catf
emit_vecoprari ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT genmake
_TEXT	SEGMENT
out$ = 64
t$ = 72
genmake	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 183
$LN29:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14, rdx
	mov	rsi, rcx
; Line 109
	mov	rcx, r14
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	r8d, 32					; 00000020H
	call	gen_typename_ex
; Line 184
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	lea	rcx, OFFSET FLAT:??_C@_03MPLDLMAM@?$CFsm@
	call	ccformat
	movsxd	r15, DWORD PTR [r14+20]
; Line 164
	lea	rdx, OFFSET FLAT:??_C@_07PGOEDBHP@static?5@
; Line 184
	mov	r12, QWORD PTR [r14+24]
; Line 164
	mov	rcx, rsi
; Line 184
	mov	rbx, rax
; Line 164
	call	ccstr_catf
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, r14
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rsi
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 170
	mov	r8, rbx
	lea	rdx, OFFSET FLAT:??_C@_04JEGEICAJ@?$AN?6?$CFs@
	mov	rcx, rsi
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI@
	mov	rcx, rsi
	call	ccstr_catf
; Line 173
	xor	ebp, ebp
	lea	rdi, OFFSET FLAT:fn
	test	r15, r15
	jle	SHORT $LN10@genmake
	mov	ebx, ebp
$LL11@genmake:
; Line 174
	test	rbx, rbx
	je	SHORT $LN14@genmake
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rsi
	call	ccstr_catf
$LN14@genmake:
; Line 175
	movzx	r8d, BYTE PTR [rbx+rdi]
	mov	rdx, r12
	mov	rcx, rsi
	call	emit_vardecl
	inc	rbx
	cmp	rbx, r15
	jl	SHORT $LL11@genmake
$LN10@genmake:
; Line 177
	lea	rdx, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ@
	mov	rcx, rsi
	call	ccstr_catf
; Line 187
	lea	rdx, OFFSET FLAT:??_C@_02PCIJFNDE@?$AN?6@
	mov	rcx, rsi
	call	ccstr_catf
; Line 188
	lea	rdx, OFFSET FLAT:??_C@_02MNJOIFPO@?$HL?5@
	mov	rcx, rsi
	call	ccstr_catf
; Line 190
	mov	r8b, 114				; 00000072H
	mov	rdx, r14
	mov	rcx, rsi
	call	emit_vardecl
; Line 191
	lea	rdx, OFFSET FLAT:??_C@_01ICJEACDI@?$DL@
	mov	rcx, rsi
	call	ccstr_catf
; Line 193
	cmp	DWORD PTR [r14+20], ebp
	jle	SHORT $LN3@genmake
	npad	2
$LL4@genmake:
; Line 194
	movsx	r8d, BYTE PTR [rdi]
	lea	rdx, OFFSET FLAT:??_C@_0N@NGDPEOH@?$AN?6?5?5r?4?$CFc?$DN?$CFc?$DL@
	mov	r9d, r8d
	mov	rcx, rsi
	call	ccstr_catf
	inc	ebp
	lea	rdi, QWORD PTR [rdi+1]
	cmp	ebp, DWORD PTR [r14+20]
	jl	SHORT $LL4@genmake
$LN3@genmake:
; Line 197
	lea	rdx, OFFSET FLAT:??_C@_0BA@MLCACNBE@?$AN?6?5?5return?5r?$DL?$AN?6@
	mov	rcx, rsi
	call	ccstr_catf
; Line 198
	lea	rdx, OFFSET FLAT:??_C@_03LFNJCDHL@?$HN?$AN?6@
	mov	rcx, rsi
; Line 199
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
; Line 198
	jmp	ccstr_catf
genmake	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_fundecl
_TEXT	SEGMENT
out$ = 48
t$ = 56
l$ = 64
r$ = 72
n$ = 80
emit_fundecl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 163
$LN18:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
	movsxd	rsi, r8d
; Line 164
	lea	rdx, OFFSET FLAT:??_C@_07PGOEDBHP@static?5@
	mov	rbx, r9
	mov	rdi, rcx
	call	ccstr_catf
; Line 165
	test	rbx, rbx
	je	SHORT $LN5@emit_funde
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rdi
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
	call	ccstr_catf
; Line 167
	jmp	SHORT $LN6@emit_funde
$LN5@emit_funde:
; Line 168
	lea	rdx, OFFSET FLAT:??_C@_04GKJNKENE@void@
	mov	rcx, rdi
	call	ccstr_catf
$LN6@emit_funde:
; Line 170
	mov	r8, QWORD PTR n$[rsp]
	lea	rdx, OFFSET FLAT:??_C@_04JEGEICAJ@?$AN?6?$CFs@
	mov	rcx, rdi
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI@
	mov	rcx, rdi
	call	ccstr_catf
; Line 173
	test	rsi, rsi
	jle	SHORT $LN3@emit_funde
	mov	QWORD PTR [rsp+48], r14
	xor	ebx, ebx
	lea	r14, OFFSET FLAT:fn
$LL4@emit_funde:
; Line 174
	test	rbx, rbx
	je	SHORT $LN7@emit_funde
	lea	rdx, OFFSET FLAT:??_C@_01IHBHIGKO@?0@
	mov	rcx, rdi
	call	ccstr_catf
$LN7@emit_funde:
; Line 175
	movzx	r8d, BYTE PTR [rbx+r14]
	mov	rdx, rbp
	mov	rcx, rdi
	call	emit_vardecl
	inc	rbx
	cmp	rbx, rsi
	jl	SHORT $LL4@emit_funde
; Line 173
	mov	r14, QWORD PTR [rsp+48]
$LN3@emit_funde:
; Line 177
	lea	rdx, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ@
	mov	rcx, rdi
; Line 179
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 177
	jmp	ccstr_catf
emit_fundecl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_vardecl
_TEXT	SEGMENT
out$ = 48
t$ = 56
name$ = 64
emit_vardecl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 158
$LN55:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	movsx	esi, r8b
	mov	rbx, rcx
; Line 109
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rdi
	mov	r8d, 32					; 00000020H
	call	gen_typename_ex
; Line 127
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_03IKGEINEE@?$CFs?5@
	call	ccstr_catf
$LL4@emit_varde:
; Line 135
	mov	eax, DWORD PTR [rdi]
	lea	ecx, DWORD PTR [rax-5]
	cmp	ecx, 1
	ja	SHORT $LN13@emit_varde
; Line 120
	cmp	eax, 5
	jne	SHORT $LN27@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
	mov	rcx, rbx
	call	ccstr_catf
; Line 121
	jmp	SHORT $LL4@emit_varde
$LN27@emit_varde:
	cmp	eax, 6
	jne	SHORT $LN28@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
	mov	rcx, rbx
	call	ccstr_catf
; Line 122
	jmp	SHORT $LL4@emit_varde
$LN28@emit_varde:
	cmp	eax, 7
	jne	SHORT $LL4@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 140
	jmp	SHORT $LL4@emit_varde
$LN13@emit_varde:
; Line 142
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	jne	SHORT $LN18@emit_varde
	npad	9
$LL50@emit_varde:
; Line 122
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	je	SHORT $LL50@emit_varde
$LN18@emit_varde:
; Line 160
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
emit_vardecl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_vardecl_ex
_TEXT	SEGMENT
out$ = 48
t$ = 56
override_modifier$ = 64
name$ = 72
emit_vardecl_ex PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 126
$LN55:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	movsx	esi, r9b
	mov	ebp, r8d
; Line 109
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
; Line 126
	mov	rbx, rcx
; Line 109
	mov	r8d, 32					; 00000020H
	mov	rcx, rdi
	call	gen_typename_ex
; Line 127
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_03IKGEINEE@?$CFs?5@
	call	ccstr_catf
; Line 129
	cmp	ebp, 5
	je	$LN47@emit_varde
	cmp	ebp, 6
	je	SHORT $LN48@emit_varde
	npad	6
$LL2@emit_varde:
; Line 135
	mov	ecx, DWORD PTR [rdi]
	lea	eax, DWORD PTR [rcx-5]
	cmp	eax, 1
	ja	SHORT $LN34@emit_varde
; Line 120
	cmp	ecx, 5
	jne	SHORT $LN25@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
	mov	rcx, rbx
	call	ccstr_catf
; Line 121
	jmp	SHORT $LL2@emit_varde
$LN25@emit_varde:
	cmp	ecx, 6
	jne	SHORT $LN26@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
	mov	rcx, rbx
	call	ccstr_catf
; Line 122
	jmp	SHORT $LL2@emit_varde
$LN26@emit_varde:
	cmp	ecx, 7
	jne	SHORT $LL2@emit_varde
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 140
	jmp	SHORT $LL2@emit_varde
$LN34@emit_varde:
; Line 142
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	mov	rcx, rbx
	call	ccstr_catf
; Line 144
	cmp	ebp, 7
	jne	SHORT $LN14@emit_varde
; Line 122
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 147
	jmp	SHORT $LN16@emit_varde
$LN48@emit_varde:
; Line 121
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
; Line 122
	jmp	SHORT $LN53@emit_varde
$LN47@emit_varde:
; Line 120
	lea	rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
$LN53@emit_varde:
; Line 150
	mov	rcx, rbx
	call	ccstr_catf
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_02HAOIJKIC@?$CFc@
	mov	rcx, rbx
	call	ccstr_catf
$LN14@emit_varde:
	cmp	DWORD PTR [rdi], 7
	jne	SHORT $LN16@emit_varde
	npad	13
$LL50@emit_varde:
; Line 122
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
	mov	rcx, rbx
	call	ccstr_catf
; Line 150
	cmp	DWORD PTR [rdi], 7
	je	SHORT $LL50@emit_varde
$LN16@emit_varde:
; Line 155
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
emit_vardecl_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_modifier
_TEXT	SEGMENT
out$ = 8
modifier$ = 16
emit_modifier PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 120
	cmp	edx, 5
	jne	SHORT $LN2@emit_modif
	lea	rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK@
; Line 123
	jmp	ccstr_catf
$LN2@emit_modif:
; Line 121
	cmp	edx, 6
	jne	SHORT $LN3@emit_modif
	lea	rdx, OFFSET FLAT:??_C@_01HNPIGOCE@?$CG@
; Line 123
	jmp	ccstr_catf
$LN3@emit_modif:
; Line 122
	cmp	edx, 7
	jne	SHORT $LN4@emit_modif
	lea	rdx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN@
; Line 123
	jmp	ccstr_catf
$LN4@emit_modif:
	ret	0
emit_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT emit_typename
_TEXT	SEGMENT
out$ = 48
t$ = 56
emit_typename PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 114
$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rax, rdx
	mov	rbx, rcx
; Line 109
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	r8d, 32					; 00000020H
	call	gen_typename_ex
; Line 115
	lea	r8, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:??_C@_02DKCKIIND@?$CFs@
; Line 116
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 115
	jmp	ccstr_catf
emit_typename ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_typename
_TEXT	SEGMENT
t$ = 48
gen_typename PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 107
$LN4:
	sub	rsp, 40					; 00000028H
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	call	gen_typename_ex
; Line 110
	lea	rax, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
; Line 111
	add	rsp, 40					; 00000028H
	ret	0
gen_typename ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_typename_ex
_TEXT	SEGMENT
t$ = 64
buf$ = 72
len$ = 80
gen_typename_ex PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 87
$LN10:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
; Line 88
	mov	eax, DWORD PTR [rcx]
	mov	edi, r8d
	mov	rsi, rdx
	mov	rbx, rcx
	cmp	eax, 3
	jne	SHORT $LN2@gen_typena
; Line 90
	movsxd	rax, DWORD PTR [rcx+4]
	lea	r8, OFFSET FLAT:??_C@_04JDNGKEJO@?$CFc?$CFi@
	lea	rcx, OFFSET FLAT:pf
	mov	edx, edi
	movsx	r9d, BYTE PTR [rax+rcx]
	mov	rcx, rsi
	mov	eax, DWORD PTR [rbx+16]
	mov	DWORD PTR [rsp+32], eax
	call	ccformatex
; Line 104
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN2@gen_typena:
; Line 92
	cmp	eax, 1
	jne	SHORT $LN4@gen_typena
; Line 94
	movsxd	rax, DWORD PTR [rcx+4]
	lea	r8, OFFSET FLAT:??_C@_07ELIBNAHE@?$CFc?$CFi_?$CFi@
	lea	rcx, OFFSET FLAT:pf
	mov	edx, edi
	movsx	r9d, BYTE PTR [rax+rcx]
	mov	rcx, rsi
	mov	eax, DWORD PTR [rbx+12]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR [rbx+8]
	mov	DWORD PTR [rsp+32], eax
	call	ccformatex
; Line 104
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN4@gen_typena:
; Line 96
	cmp	eax, 4
	jne	SHORT $LN6@gen_typena
; Line 98
	mov	rcx, QWORD PTR [rcx+24]
	call	gen_typename_ex
; Line 99
	mov	r9d, DWORD PTR [rbx+20]
	lea	r8, OFFSET FLAT:??_C@_03PKIJPMHF@x?$CFi@
	sub	edi, eax
	movsxd	rcx, eax
	add	rcx, rsi
	mov	edx, edi
; Line 104
	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
; Line 99
	jmp	ccformatex
$LN6@gen_typena:
; Line 104
	mov	rbx, QWORD PTR [rsp+64]
	xor	eax, eax
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
gen_typename_ex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_fixtype
_TEXT	SEGMENT
d$ = 48
b$ = 56
gen_fixtype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 72
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	edi, edx
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
; Line 75
	mov	DWORD PTR [rax+4], ebx
; Line 79
	mov	rbx, QWORD PTR [rsp+48]
; Line 35
	mov	DWORD PTR [rax], 3
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 76
	mov	DWORD PTR [rax+16], edi
; Line 79
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
gen_fixtype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_vartype
_TEXT	SEGMENT
d$ = 48
i$ = 56
a$ = 64
gen_vartype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 61
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	esi, r8d
; Line 33
	mov	ecx, 32					; 00000020H
; Line 61
	mov	edi, edx
; Line 33
	call	malloc
; Line 64
	mov	DWORD PTR [rax+4], ebx
; Line 69
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax+8], esi
	mov	rsi, QWORD PTR [rsp+56]
; Line 35
	mov	DWORD PTR [rax], 2
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 65
	mov	DWORD PTR [rax+12], edi
; Line 69
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
gen_vartype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_ptrtype
_TEXT	SEGMENT
t$ = 48
gen_ptrtype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 52
$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
; Line 35
	mov	DWORD PTR [rax], 5
; Line 55
	mov	QWORD PTR [rax+24], rbx
; Line 58
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
gen_ptrtype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_vectype
_TEXT	SEGMENT
t$ = 48
length$ = 56
gen_vectype PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 42
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	edi, edx
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
; Line 45
	mov	QWORD PTR [rax+24], rbx
; Line 49
	mov	rbx, QWORD PTR [rsp+48]
; Line 35
	mov	DWORD PTR [rax], 4
; Line 46
	mov	DWORD PTR [rax+20], edi
; Line 49
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
gen_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT gen_type
_TEXT	SEGMENT
k$ = 48
gen_type PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 32
$LN4:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
; Line 33
	mov	ecx, 32					; 00000020H
	call	malloc
; Line 35
	mov	DWORD PTR [rax], ebx
; Line 36
	mov	QWORD PTR [rax+24], rax
; Line 39
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
gen_type ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_translation_unit
_TEXT	SEGMENT
l$1 = 48
ret$ = 56
l$2 = 144
l$3 = 144
exec$ = 144
l$4 = 152
emit$ = 152
l$5 = 160
l$6 = 168
ccexec_translation_unit PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 414
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 112				; 00000070H
; Line 415
	mov	QWORD PTR [rcx], rdx
	mov	rdi, rdx
	mov	rsi, rcx
	movaps	XMMWORD PTR [rsp+96], xmm6
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 265
	mov	edx, 56					; 00000038H
	xor	ecx, ecx
	call	realloc
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
; Line 285
	lea	rbx, QWORD PTR [rax+24]
; Line 269
	mov	QWORD PTR [rax+8], rcx
; File W:\cpp\void\ktt-c\ccfio.c
; Line 9
	lea	rcx, QWORD PTR l$4[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 273
	mov	DWORD PTR [rax+16], 32			; 00000020H
; Line 274
	mov	DWORD PTR [rax+20], 32			; 00000020H
; File W:\cpp\void\ktt-c\ccexec.c
; Line 419
	mov	DWORD PTR [rbx+8], 1
; Line 420
	mov	DWORD PTR [rbx+24], 22
; File W:\cpp\void\ktt-c\ccfio.c
; Line 9
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\ktt-c\ccexec.c
; Line 424
	mov	rdx, QWORD PTR [rdi+8]
	lea	r8, QWORD PTR ret$[rsp]
	mov	r9, rbx
	mov	rcx, rsi
	call	ccexec_invoke
; File W:\cpp\void\ktt-c\ccfio.c
; Line 9
	lea	rcx, QWORD PTR l$3[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
	lea	rcx, QWORD PTR l$1[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\ktt-c\ccexec.c
; Line 428
	mov	edi, DWORD PTR [rbx+24]
; Line 402
	cmp	edi, 2
	jl	SHORT $LN20@ccexec_tra
; Line 403
	lea	ecx, DWORD PTR [rdi-2]
	call	fib
; Line 404
	lea	ecx, DWORD PTR [rdi-1]
	mov	ebx, eax
	call	fib
; Line 405
	add	ebx, eax
	jmp	SHORT $LN19@ccexec_tra
$LN20@ccexec_tra:
; Line 407
	mov	ebx, edi
$LN19@ccexec_tra:
; File W:\cpp\void\ktt-c\ccfio.c
; Line 9
	lea	rcx, QWORD PTR l$6[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 15
	lea	rcx, QWORD PTR l$5[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	mov	rcx, QWORD PTR l$3[rsp]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	xorps	xmm6, xmm6
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	sub	rcx, QWORD PTR l$4[rsp]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	js	SHORT $LN30@ccexec_tra
	cvtsi2sd xmm6, rcx
	jmp	SHORT $LN31@ccexec_tra
$LN30@ccexec_tra:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	cvtsi2sd xmm6, rax
	addsd	xmm6, xmm6
$LN31@ccexec_tra:
	xorps	xmm0, xmm0
; Line 15
	lea	rcx, QWORD PTR l$2[rsp]
; Line 16
	cvtsi2sd xmm0, QWORD PTR l$5[rsp]
	divsd	xmm6, xmm0
; Line 15
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	mov	rcx, QWORD PTR l$6[rsp]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	xorps	xmm2, xmm2
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	sub	rcx, QWORD PTR l$1[rsp]
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	js	SHORT $LN28@ccexec_tra
	cvtsi2sd xmm2, rcx
	jmp	SHORT $LN29@ccexec_tra
$LN28@ccexec_tra:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	cvtsi2sd xmm2, rax
	addsd	xmm2, xmm2
$LN29@ccexec_tra:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	mov	r9d, DWORD PTR ret$[rsp+24]
	lea	rcx, OFFSET FLAT:??_C@_0BO@DFPLCIIJ@fib?5c?3?$CFi?5?$CFf?$CIs?$CJ?5?9?5cc?3?$CFi?5?$CFf?$CIs?$CJ?6@
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rsp+32], xmm6
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	cvtsi2sd xmm0, QWORD PTR l$2[rsp]
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	mov	edx, ebx
; File W:\cpp\void\ktt-c\ccfio.c
; Line 16
	divsd	xmm2, xmm0
; File W:\cpp\void\ktt-c\ccexec.c
; Line 432
	movq	r8, xmm2
	call	printf
; Line 435
	movaps	xmm6, XMMWORD PTR [rsp+96]
	mov	eax, 1
	add	rsp, 112				; 00000070H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
ccexec_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT fib
_TEXT	SEGMENT
x$ = 48
fib	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 402
$LN5:
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	edi, ecx
	cmp	ecx, 2
	jl	SHORT $LN2@fib
; Line 403
	add	ecx, -2
	mov	QWORD PTR [rsp+48], rbx
	call	fib
; Line 404
	lea	ecx, DWORD PTR [rdi-1]
	mov	ebx, eax
	call	fib
; Line 405
	add	eax, ebx
	mov	rbx, QWORD PTR [rsp+48]
; Line 408
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@fib:
; Line 407
	mov	eax, edi
; Line 408
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
fib	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_init
_TEXT	SEGMENT
exec$ = 8
ccexec_init PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 396
	xor	eax, eax
	mov	QWORD PTR [rcx], rax
; Line 397
	mov	eax, 1
; Line 398
	ret	0
ccexec_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_edict
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 32
rval$4$ = 64
$T4 = 64
$T5 = 64
$T6 = 64
$T7 = 64
$T8 = 96
$T9 = 128
$T10 = 128
$T11 = 128
$T12 = 128
$T13 = 128
$T14 = 128
exec$ = 224
stack$ = 232
value$ = 240
list$1$ = 248
ccexec_edict PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 202
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r13
	push	r14
	lea	rbp, QWORD PTR [rsp-47]
	sub	rsp, 168				; 000000a8H
; Line 208
	mov	r14, QWORD PTR [r8+8]
	mov	r13, r8
	mov	rdi, rdx
; Line 210
	movsxd	rax, DWORD PTR [r14]
	cmp	eax, 11
	ja	$LN25@ccexec_edi
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	r9d, DWORD PTR $LN119@ccexec_edi[rcx+rax*4]
	add	r9, rcx
	jmp	r9
$LN7@ccexec_edi:
; Line 214
	lea	rcx, QWORD PTR $T7[rbp-121]
	call	ccstack_yield
; Line 215
	jmp	$LN25@ccexec_edi
$LN8@ccexec_edi:
; Line 218
	mov	rdx, r13
	mov	rcx, rdi
	call	ccstack_local_alloc
; Line 219
	jmp	$LN25@ccexec_edi
$LN9@ccexec_edi:
; Line 224
	mov	r8, QWORD PTR [r14+16]
	xorps	xmm0, xmm0
; Line 70
	movups	XMMWORD PTR $T6[rbp-121], xmm0
	movups	XMMWORD PTR $T6[rbp-105], xmm0
; Line 72
	cmp	DWORD PTR [r8], 5
	jne	SHORT $LN97@ccexec_edi
; Line 73
	mov	rcx, QWORD PTR [r8+8]
	mov	edx, DWORD PTR [rcx]
	test	edx, edx
	je	SHORT $LN100@ccexec_edi
	cmp	edx, 1
	jne	SHORT $LN97@ccexec_edi
$LN100@ccexec_edi:
; Line 76
	mov	rdx, rdi
	lea	rcx, QWORD PTR $T2[rbp-121]
	call	ccstack_yield
	movups	xmm0, XMMWORD PTR [rax]
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR $T6[rbp-121], xmm0
	movups	XMMWORD PTR $T6[rbp-105], xmm1
$LN97@ccexec_edi:
; Line 226
	mov	rdx, r13
	mov	rcx, rdi
	call	ccstack_mingle
; Line 231
	mov	r8, QWORD PTR $T6[rbp-121]
	lea	rdx, OFFSET FLAT:??_C@_09NBKMMCFH@fetch?3?5?$CFs@
	mov	r9, rax
	xor	esi, esi
	mov	DWORD PTR [rax+8], 1
	mov	rax, QWORD PTR $T6[rbp-105]
	mov	QWORD PTR [r9+16], rax
	mov	rax, QWORD PTR $T6[rbp-97]
	movsxd	rcx, DWORD PTR [rax]
	mov	QWORD PTR [r9+24], rcx
	mov	rcx, r9
	mov	QWORD PTR [r9], rsi
	call	ccstr_catf
; Line 232
	jmp	$LN25@ccexec_edi
$LN10@ccexec_edi:
; Line 236
	mov	r8, QWORD PTR [r14+16]
	xorps	xmm0, xmm0
; Line 70
	movups	XMMWORD PTR $T3[rbp-105], xmm0
; Line 72
	cmp	DWORD PTR [r8], 5
	jne	SHORT $LN104@ccexec_edi
; Line 73
	mov	rcx, QWORD PTR [r8+8]
	mov	edx, DWORD PTR [rcx]
	test	edx, edx
	je	SHORT $LN107@ccexec_edi
	cmp	edx, 1
	jne	SHORT $LN104@ccexec_edi
$LN107@ccexec_edi:
; Line 76
	mov	rdx, rdi
	lea	rcx, QWORD PTR $T8[rbp-121]
	call	ccstack_yield
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR $T3[rbp-105], xmm1
$LN104@ccexec_edi:
; Line 237
	mov	r8, QWORD PTR [r14+24]
	lea	rcx, QWORD PTR $T14[rbp-121]
	mov	rdx, rdi
	call	ccstack_yield_rvalue
; Line 242
	mov	rdx, r13
	mov	rcx, rdi
	movups	xmm0, XMMWORD PTR [rax]
	mov	rbx, QWORD PTR [rax+24]
	mov	rax, QWORD PTR $T3[rbp-97]
	movups	XMMWORD PTR rval$4$[rbp-121], xmm0
	mov	DWORD PTR [rax], ebx
	call	ccstack_mingle
; Line 246
	movups	xmm0, XMMWORD PTR rval$4$[rbp-121]
	mov	rcx, rax
	mov	DWORD PTR [rax+8], 1
	mov	rax, QWORD PTR $T3[rbp-105]
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rbx
	movq	QWORD PTR [rcx], xmm0
; Line 247
	jmp	$LN25@ccexec_edi
$LN11@ccexec_edi:
; Line 255
	mov	rax, QWORD PTR [r14+16]
	mov	QWORD PTR [rdx+8], rax
; Line 256
	mov	eax, DWORD PTR [r14+24]
	mov	DWORD PTR [rdx+16], eax
; Line 257
	jmp	$LN25@ccexec_edi
$LN12@ccexec_edi:
; Line 266
	mov	r8, QWORD PTR [r14+32]
	lea	rcx, QWORD PTR $T13[rbp-121]
	call	ccstack_yield_rvalue
; Line 267
	mov	eax, DWORD PTR [rax+24]
	test	eax, eax
	jne	$LN25@ccexec_edi
; Line 268
	mov	rax, QWORD PTR [r14+16]
	mov	QWORD PTR [rdi+8], rax
; Line 269
	mov	eax, DWORD PTR [r14+24]
	mov	DWORD PTR [rdi+16], eax
; Line 271
	jmp	$LN25@ccexec_edi
$LN14@ccexec_edi:
; Line 280
	mov	r8, QWORD PTR [r14+32]
	lea	rcx, QWORD PTR $T12[rbp-121]
	call	ccstack_yield_rvalue
; Line 281
	mov	eax, DWORD PTR [rax+24]
	test	eax, eax
	je	$LN25@ccexec_edi
; Line 282
	mov	rax, QWORD PTR [r14+16]
	mov	QWORD PTR [rdi+8], rax
; Line 283
	mov	eax, DWORD PTR [r14+24]
	mov	DWORD PTR [rdi+16], eax
; Line 285
	jmp	$LN25@ccexec_edi
$LN16@ccexec_edi:
; Line 288
	mov	rdx, r13
	mov	rcx, rdi
	call	ccexec_edict_arith
; Line 289
	jmp	$LN25@ccexec_edi
$LN17@ccexec_edi:
; Line 293
	mov	rdx, r13
	mov	rcx, rdi
	call	ccstack_mingle
; Line 294
	mov	r8, QWORD PTR [r14+16]
	lea	rcx, QWORD PTR $T11[rbp-121]
	mov	rdx, rdi
	mov	rbx, rax
	call	ccstack_yield_rvalue
	movups	xmm0, XMMWORD PTR [rax]
	movups	xmm1, XMMWORD PTR [rax+16]
; Line 295
	xor	eax, eax
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
; Line 343
	add	rsp, 168				; 000000a8H
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
$LN18@ccexec_edi:
; Line 305
	mov	rdx, QWORD PTR [r14+24]
	xor	esi, esi
	mov	QWORD PTR [rsp+160], r15
	mov	r15d, esi
	mov	QWORD PTR [rsp+232], r12
$LN122@ccexec_edi:
	mov	rcx, QWORD PTR [r14+24]
	lea	r9, OFFSET FLAT:??_C@_0P@CGIBHDEL@constant?9value@
	mov	QWORD PTR list$1$[rbp-121], rdx
	test	rcx, rcx
	je	SHORT $LN28@ccexec_edi
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN29@ccexec_edi
$LN28@ccexec_edi:
	mov	eax, esi
$LN29@ccexec_edi:
	and	rax, -8
	add	rax, rcx
	cmp	rdx, rax
	jae	$LN5@ccexec_edi
; Line 306
	mov	r8, QWORD PTR [rdx]
	xorps	xmm0, xmm0
; Line 43
	movups	XMMWORD PTR $T1[rbp-121], xmm0
	movups	XMMWORD PTR $T4[rbp-121], xmm0
; Line 45
	mov	eax, DWORD PTR [r8]
	cmp	eax, 2
	je	$LN41@ccexec_edi
	cmp	eax, 5
	jne	SHORT $LN33@ccexec_edi
; Line 47
	mov	rcx, QWORD PTR [r8+8]
	mov	edx, DWORD PTR [rcx]
	sub	edx, 3
	je	SHORT $LN38@ccexec_edi
	sub	edx, 1
	je	SHORT $LN38@ccexec_edi
	cmp	edx, 6
	jne	SHORT $LN121@ccexec_edi
$LN38@ccexec_edi:
; Line 51
	mov	rdx, rdi
	lea	rcx, QWORD PTR $T9[rbp-121]
	call	ccstack_yield
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR $T1[rbp-121], xmm0
	movups	xmm0, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR $T4[rbp-121], xmm0
$LN121@ccexec_edi:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	mov	rdx, QWORD PTR list$1$[rbp-121]
$LN33@ccexec_edi:
	test	r15, r15
	lea	rbx, QWORD PTR [r15-24]
; Line 241
	mov	r15d, esi
; Line 242
	mov	r13d, esi
; Line 284
	cmove	rbx, rsi
; Line 246
	test	rbx, rbx
	je	SHORT $LN50@ccexec_edi
; Line 247
	mov	r15d, DWORD PTR [rbx+16]
; Line 248
	mov	r13d, DWORD PTR [rbx+20]
$LN50@ccexec_edi:
; Line 256
	lea	r12d, DWORD PTR [r13+32]
	mov	rax, rbx
	cmp	r15d, r12d
	jae	SHORT $LN53@ccexec_edi
; Line 260
	lea	ecx, DWORD PTR [r15+r15]
; Line 265
	mov	eax, r12d
	cmp	ecx, r12d
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	r15d, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	mov	rdx, QWORD PTR list$1$[rbp-121]
	test	rbx, rbx
	jne	SHORT $LN53@ccexec_edi
; Line 269
	mov	QWORD PTR [rax], rsi
	mov	QWORD PTR [rax+8], rsi
$LN53@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 306
	movups	xmm0, XMMWORD PTR $T1[rbp-121]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 273
	mov	DWORD PTR [rax+16], r15d
; Line 285
	lea	r15, QWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\ccexec.c
; Line 306
	movups	xmm1, XMMWORD PTR $T4[rbp-121]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 274
	mov	DWORD PTR [rax+20], r12d
; Line 286
	mov	eax, r13d
; File W:\cpp\void\ktt-c\ccexec.c
; Line 306
	and	rax, -32				; ffffffffffffffe0H
	add	rdx, 8
	movups	XMMWORD PTR [rax+r15], xmm0
	movups	XMMWORD PTR [rax+r15+16], xmm1
	jmp	$LN122@ccexec_edi
$LN41@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 77
	mov	rax, QWORD PTR [r8+8]
	mov	DWORD PTR $T5[rbp-113], 1
; Line 79
	mov	QWORD PTR $T5[rbp-121], r9
; File W:\cpp\void\ktt-c\ccexec.c
; Line 58
	movups	xmm0, XMMWORD PTR $T5[rbp-121]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 77
	mov	QWORD PTR $T5[rbp-105], rax
; Line 78
	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR $T5[rbp-97], rax
; File W:\cpp\void\ktt-c\ccexec.c
; Line 58
	movups	XMMWORD PTR $T1[rbp-121], xmm0
	movups	xmm0, XMMWORD PTR $T5[rbp-105]
	movups	XMMWORD PTR $T4[rbp-121], xmm0
	jmp	$LN33@ccexec_edi
$LN5@ccexec_edi:
; Line 16
	mov	r9, QWORD PTR value$[rbp-121]
	lea	rcx, QWORD PTR [rdi+24]
	mov	edx, 32					; 00000020H
	lea	r8d, QWORD PTR [rdx-40]
	call	ccdlb_tblput
; Line 310
	mov	rdx, QWORD PTR [r14+16]
	mov	r9, r15
	mov	rcx, QWORD PTR exec$[rbp-121]
; Line 16
	mov	r8d, eax
	shl	r8, 5
	add	r8, QWORD PTR [rdi+24]
; Line 310
	call	ccexec_invoke
; Line 315
	test	r15, r15
	lea	rcx, QWORD PTR [r15-24]
	cmove	rcx, rsi
	call	free
	mov	r15, QWORD PTR [rsp+160]
	mov	r12, QWORD PTR [rsp+232]
; Line 316
	jmp	SHORT $LN25@ccexec_edi
$LN20@ccexec_edi:
; Line 121
	mov	rax, QWORD PTR [r14+16]
; Line 122
	xor	esi, esi
	mov	QWORD PTR [rdx+8], rax
	mov	DWORD PTR [rdx+16], esi
; Line 325
	jmp	SHORT $LN25@ccexec_edi
$LN21@ccexec_edi:
; Line 330
	mov	r8, QWORD PTR [r14+16]
	lea	rcx, QWORD PTR $T10[rbp-121]
	call	ccstack_yield_rvalue
; Line 333
	mov	eax, DWORD PTR [rax+24]
	test	eax, eax
	je	SHORT $LN22@ccexec_edi
; Line 334
	mov	rax, QWORD PTR [r14+24]
	test	rax, rax
	je	SHORT $LN25@ccexec_edi
; Line 121
	mov	QWORD PTR [rdi+8], rax
; Line 335
	jmp	SHORT $LN123@ccexec_edi
$LN22@ccexec_edi:
; Line 337
	mov	rcx, QWORD PTR [r14+32]
	test	rcx, rcx
	je	SHORT $LN25@ccexec_edi
; Line 121
	mov	QWORD PTR [rdi+8], rcx
$LN123@ccexec_edi:
; Line 342
	xor	esi, esi
	mov	DWORD PTR [rdi+16], esi
$LN25@ccexec_edi:
	mov	eax, 1
; Line 343
	add	rsp, 168				; 000000a8H
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
	npad	3
$LN119@ccexec_edi:
	DD	$LN8@ccexec_edi
	DD	$LN7@ccexec_edi
	DD	$LN10@ccexec_edi
	DD	$LN9@ccexec_edi
	DD	$LN16@ccexec_edi
	DD	$LN11@ccexec_edi
	DD	$LN14@ccexec_edi
	DD	$LN12@ccexec_edi
	DD	$LN21@ccexec_edi
	DD	$LN20@ccexec_edi
	DD	$LN18@ccexec_edi
	DD	$LN17@ccexec_edi
ccexec_edict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_invoke
_TEXT	SEGMENT
stack$ = 32
exec$ = 128
tv604 = 136
value$ = 136
ret$ = 144
arguments$ = 152
ccexec_invoke PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 348
	mov	rax, rsp
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+8], rcx
	push	rbx
	push	r12
	push	r13
	sub	rsp, 96					; 00000060H
	mov	QWORD PTR [rax+32], rbp
	xorps	xmm0, xmm0
	mov	QWORD PTR [rax-48], r14
; Line 352
	add	r9, 24
	mov	QWORD PTR [rax-56], r15
	xor	ebx, ebx
; Line 354
	mov	r15, QWORD PTR [rdx+8]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 391
	mov	edx, DWORD PTR _tls_index
; File W:\cpp\void\ktt-c\ccexec.c
; Line 352
	movups	XMMWORD PTR [rax-88], xmm0
	mov	QWORD PTR [rsp+88], rsi
	movups	XMMWORD PTR [rax-72], xmm0
; Line 355
	mov	rax, QWORD PTR [r15]
	mov	QWORD PTR tv604[rsp], r9
	mov	r13d, OFFSET FLAT:ccerr
	mov	QWORD PTR [rsp+80], rdi
	mov	rbp, QWORD PTR [rax+48]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 391
	mov	rax, QWORD PTR gs:88
; File W:\cpp\void\ktt-c\ccexec.c
; Line 360
	mov	r14, QWORD PTR [rbp+32]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 391
	lea	r12, QWORD PTR [rax+rdx*8]
	npad	5
$LL4@ccexec_inv:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 360
	mov	rcx, QWORD PTR [rbp+32]
	test	rcx, rcx
	je	SHORT $LN10@ccexec_inv
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN11@ccexec_inv
$LN10@ccexec_inv:
	mov	eax, ebx
$LN11@ccexec_inv:
	and	rax, -8
	add	rax, rcx
	cmp	r14, rax
	jae	$LN3@ccexec_inv
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	rax, QWORD PTR [r15+8]
; Line 389
	test	rax, rax
; Line 391
	mov	edi, r13d
	lea	rcx, QWORD PTR [rax-24]
	cmove	rcx, rbx
	add	rdi, QWORD PTR [r12]
	mov	DWORD PTR [rdi], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN17@ccexec_inv
; Line 393
	mov	r8, QWORD PTR [r14]
	mov	edx, -8
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rdi], ebx
	jne	SHORT $LN17@ccexec_inv
; Line 396
	mov	ecx, DWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 57
	mov	rax, QWORD PTR [r15+8]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 396
	shr	rcx, 3
; File W:\cpp\void\ktt-c\ccexec.h
; Line 57
	mov	r9, QWORD PTR [rax+rcx*8]
	jmp	SHORT $LN16@ccexec_inv
$LN17@ccexec_inv:
; Line 58
	mov	r9, rbx
$LN16@ccexec_inv:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 94
	mov	rsi, QWORD PTR [r9+8]
; Line 16
	lea	rcx, QWORD PTR stack$[rsp+24]
	mov	edx, 32					; 00000020H
	lea	r8d, QWORD PTR [rdx-40]
	call	ccdlb_tblput
	mov	edi, eax
; Line 102
	mov	ecx, 8
; Line 16
	shl	rdi, 5
	add	rdi, QWORD PTR stack$[rsp+24]
; Line 102
	call	malloc
	mov	QWORD PTR [rdi+24], rax
; Line 108
	lea	rdx, OFFSET FLAT:??_C@_0O@EBBNFLMJ@?8?$CFs?8?3localloc@
	mov	DWORD PTR [rdi+8], 2
	mov	rcx, rdi
	mov	rax, QWORD PTR [rsi+16]
	mov	QWORD PTR [rdi+16], rax
	mov	QWORD PTR [rdi], rbx
	mov	r8, QWORD PTR [rsi+8]
	call	ccstr_catf
; Line 366
	mov	rdx, QWORD PTR tv604[rsp]
	mov	rcx, QWORD PTR [rdi+24]
	mov	eax, DWORD PTR [rdx]
; Line 367
	add	rdx, 32					; 00000020H
	mov	QWORD PTR tv604[rsp], rdx
	add	r14, 8
	mov	DWORD PTR [rcx], eax
	jmp	$LL4@ccexec_inv
$LN3@ccexec_inv:
; Line 121
	mov	rdx, QWORD PTR [r15+24]
; Line 122
	mov	ecx, ebx
	mov	r13, QWORD PTR exec$[rsp]
	mov	r15, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+152]
	mov	QWORD PTR stack$[rsp+8], rdx
$LL5@ccexec_inv:
; Line 372
	mov	rdx, QWORD PTR [rdx+8]
	test	rdx, rdx
	je	SHORT $LN12@ccexec_inv
	mov	eax, DWORD PTR [rdx-4]
	jmp	SHORT $LN13@ccexec_inv
$LN12@ccexec_inv:
	mov	eax, ebx
$LN13@ccexec_inv:
	movsxd	r8, ecx
	shr	rax, 3
	cmp	r8, rax
	jae	$LN6@ccexec_inv
; Line 374
	lea	rdi, QWORD PTR [rdx+r8*8]
; Line 375
	inc	ecx
; Line 377
	mov	r8, QWORD PTR [rdi]
	lea	rdx, QWORD PTR stack$[rsp]
	mov	DWORD PTR stack$[rsp+16], ecx
	mov	rcx, r13
	call	ccexec_edict
	test	eax, eax
	je	SHORT $LN51@ccexec_inv
	mov	ecx, DWORD PTR stack$[rsp+16]
	mov	rdx, QWORD PTR stack$[rsp+8]
	jmp	SHORT $LL5@ccexec_inv
$LN51@ccexec_inv:
; Line 380
	mov	r8, QWORD PTR [rdi]
; Line 382
	mov	rax, QWORD PTR [r8+8]
	cmp	DWORD PTR [rax], 11
	jne	SHORT $LN8@ccexec_inv
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	rdi, QWORD PTR stack$[rsp+24]
	test	rdi, rdi
	je	SHORT $LN38@ccexec_inv
; Line 391
	mov	esi, OFFSET FLAT:ccerr
	lea	rcx, QWORD PTR [rdi-24]
	add	rsi, QWORD PTR [r12]
	mov	DWORD PTR [rsi], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN36@ccexec_inv
; Line 393
	mov	edx, -8
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rsi], ebx
	jne	SHORT $LN36@ccexec_inv
	mov	ebx, DWORD PTR [rax+24]
	jmp	SHORT $LN36@ccexec_inv
$LN38@ccexec_inv:
; Line 388
	mov	rax, QWORD PTR [r12]
	mov	ecx, OFFSET FLAT:ccerr
	mov	DWORD PTR [rcx+rax], 1
$LN36@ccexec_inv:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 383
	mov	rax, QWORD PTR ret$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 396
	mov	ecx, ebx
; File W:\cpp\void\ktt-c\ccexec.c
; Line 28
	and	rcx, -32				; ffffffffffffffe0H
; Line 36
	movups	xmm0, XMMWORD PTR [rcx+rdi]
	movups	xmm1, XMMWORD PTR [rcx+rdi+16]
; Line 383
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm1
$LN8@ccexec_inv:
; Line 384
	mov	eax, 1
	jmp	SHORT $LN1@ccexec_inv
$LN6@ccexec_inv:
; Line 389
	mov	rax, QWORD PTR stack$[rsp+24]
	test	rax, rax
	je	SHORT $LN14@ccexec_inv
	lea	rbx, QWORD PTR [rax-24]
$LN14@ccexec_inv:
	mov	rcx, rbx
	call	free
; Line 391
	xor	eax, eax
$LN1@ccexec_inv:
; Line 392
	mov	rdi, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 96					; 00000060H
	pop	r13
	pop	r12
	pop	rbx
	ret	0
ccexec_invoke ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_edict_arith
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 64
$T4 = 96
$T5 = 96
$T6 = 96
stack$ = 160
val$ = 168
ccexec_edict_arith PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 128
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r12
	push	rbp
	push	r14
	push	r15
	mov	rbp, rsp
	sub	rsp, 128				; 00000080H
; Line 134
	mov	rax, QWORD PTR [rdx+8]
	xor	edi, edi
	xorps	xmm0, xmm0
	mov	r15, rdx
	mov	r14, rcx
; Line 43
	movups	XMMWORD PTR $T3[rbp-112], xmm0
; Line 135
	mov	r8, QWORD PTR [rax+24]
	mov	ebx, DWORD PTR [rax+16]
; Line 136
	mov	rsi, QWORD PTR [rax+32]
; Line 45
	mov	eax, DWORD PTR [r8]
	cmp	eax, 2
	je	SHORT $LN28@ccexec_edi
	cmp	eax, 5
	jne	SHORT $LN20@ccexec_edi
; Line 47
	mov	rcx, QWORD PTR [r8+8]
	mov	edx, DWORD PTR [rcx]
	sub	edx, 3
	je	SHORT $LN25@ccexec_edi
	sub	edx, 1
	je	SHORT $LN25@ccexec_edi
	cmp	edx, 6
	jne	SHORT $LN20@ccexec_edi
$LN25@ccexec_edi:
; Line 51
	mov	rdx, r14
	lea	rcx, QWORD PTR $T6[rbp-128]
	call	ccstack_yield
	movups	xmm1, XMMWORD PTR [rax+16]
; Line 54
	jmp	SHORT $LN52@ccexec_edi
$LN28@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 77
	mov	rax, QWORD PTR [r8+8]
	mov	QWORD PTR $T1[rbp-112], rax
; Line 78
	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR $T1[rbp-104], rax
; File W:\cpp\void\ktt-c\ccexec.c
; Line 58
	movups	xmm1, XMMWORD PTR $T1[rbp-112]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 76
	mov	DWORD PTR $T1[rbp-120], 1
$LN52@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 43
	movups	XMMWORD PTR $T3[rbp-112], xmm1
$LN20@ccexec_edi:
; Line 45
	mov	eax, DWORD PTR [rsi]
	xorps	xmm0, xmm0
; Line 43
	movups	XMMWORD PTR $T2[rbp-112], xmm0
; Line 45
	cmp	eax, 2
	je	SHORT $LN41@ccexec_edi
	cmp	eax, 5
	jne	SHORT $LN33@ccexec_edi
; Line 47
	mov	rcx, QWORD PTR [rsi+8]
	mov	edx, DWORD PTR [rcx]
	sub	edx, 3
	je	SHORT $LN38@ccexec_edi
	sub	edx, 1
	je	SHORT $LN38@ccexec_edi
	cmp	edx, 6
	jne	SHORT $LN33@ccexec_edi
$LN38@ccexec_edi:
; Line 51
	mov	r8, rsi
	lea	rcx, QWORD PTR $T5[rbp-128]
	mov	rdx, r14
	call	ccstack_yield
	movups	xmm1, XMMWORD PTR [rax+16]
; Line 54
	jmp	SHORT $LN53@ccexec_edi
$LN41@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 77
	mov	rax, QWORD PTR [rsi+8]
	mov	QWORD PTR $T4[rbp-112], rax
; Line 78
	mov	rax, QWORD PTR [rsi+16]
	mov	QWORD PTR $T4[rbp-104], rax
; File W:\cpp\void\ktt-c\ccexec.c
; Line 58
	movups	xmm1, XMMWORD PTR $T4[rbp-112]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 76
	mov	DWORD PTR $T4[rbp-120], 1
$LN53@ccexec_edi:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 146
	movups	XMMWORD PTR $T2[rbp-112], xmm1
$LN33@ccexec_edi:
	lea	eax, DWORD PTR [rbx-101]
	test	eax, -9					; fffffff7H
	je	$LN51@ccexec_edi
; Line 153
	cmp	ebx, 99					; 00000063H
	jne	SHORT $LN6@ccexec_edi
; Line 16
	mov	r9, r15
	lea	edx, QWORD PTR [rbx-67]
	lea	r8d, QWORD PTR [rbx-107]
	lea	rcx, QWORD PTR [r14+24]
	call	ccdlb_tblput
	mov	edx, eax
; Line 156
	lea	rax, OFFSET FLAT:??_C@_0N@OBPGLKBF@greater?9than@
; Line 16
	shl	rdx, 5
	add	rdx, QWORD PTR [r14+24]
; Line 156
	mov	QWORD PTR [rdx], rax
; Line 157
	mov	eax, DWORD PTR $T2[rbp-104]
	cmp	DWORD PTR $T3[rbp-104], eax
; Line 192
	mov	rax, rdx
	mov	DWORD PTR [rdx+8], 1
	seta	dil
	mov	DWORD PTR [rdx+24], edi
	jmp	$LN16@ccexec_edi
$LN6@ccexec_edi:
; Line 159
	cmp	ebx, 117				; 00000075H
	jne	SHORT $LN8@ccexec_edi
; Line 160
	mov	rdx, r15
	mov	rcx, r14
	call	ccstack_mingle
	mov	rcx, rax
; Line 161
	mov	DWORD PTR [rax+8], 1
; Line 162
	lea	rax, OFFSET FLAT:??_C@_0BB@JDDHICPG@greater?9than?9eql@
	mov	QWORD PTR [rcx], rax
; Line 163
	mov	eax, DWORD PTR $T2[rbp-104]
	cmp	DWORD PTR $T3[rbp-104], eax
; Line 192
	mov	rax, rcx
	setae	dil
	mov	DWORD PTR [rcx+24], edi
	jmp	SHORT $LN16@ccexec_edi
$LN8@ccexec_edi:
; Line 165
	cmp	ebx, 100				; 00000064H
	je	SHORT $LN51@ccexec_edi
; Line 168
	cmp	ebx, 118				; 00000076H
	je	SHORT $LN51@ccexec_edi
; Line 171
	cmp	ebx, 96					; 00000060H
	jne	SHORT $LN14@ccexec_edi
; Line 172
	mov	rdx, r15
	mov	rcx, r14
	call	ccstack_mingle
	mov	rcx, rax
; Line 173
	mov	DWORD PTR [rax+8], 1
; Line 174
	lea	rax, OFFSET FLAT:??_C@_03KCMAIMAP@sub@
	mov	QWORD PTR [rcx], rax
; Line 175
	mov	eax, DWORD PTR $T3[rbp-104]
	sub	eax, DWORD PTR $T2[rbp-104]
	mov	DWORD PTR [rcx+24], eax
; Line 192
	mov	rax, rcx
	jmp	SHORT $LN16@ccexec_edi
$LN14@ccexec_edi:
; Line 177
	cmp	ebx, 95					; 0000005fH
	jne	SHORT $LN51@ccexec_edi
; Line 178
	mov	rdx, r15
	mov	rcx, r14
	call	ccstack_mingle
; Line 181
	mov	ecx, DWORD PTR $T2[rbp-104]
	mov	rdx, rax
	add	ecx, DWORD PTR $T3[rbp-104]
	mov	DWORD PTR [rax+8], 1
	lea	rax, OFFSET FLAT:??_C@_03BDGOHNNK@add@
	mov	QWORD PTR [rdx], rax
; Line 192
	mov	rax, rdx
	mov	DWORD PTR [rdx+24], ecx
	jmp	SHORT $LN16@ccexec_edi
$LN51@ccexec_edi:
; Line 193
	mov	rax, rdi
$LN16@ccexec_edi:
	lea	r11, QWORD PTR [rsp+128]
	mov	rbx, QWORD PTR [r11+32]
	mov	rsi, QWORD PTR [r11+40]
	mov	rdi, QWORD PTR [r11+48]
	mov	r12, QWORD PTR [r11+56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	rbp
	ret	0
ccexec_edict_arith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_enter
_TEXT	SEGMENT
stack$ = 8
block$ = 16
ccexec_enter PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 121
	mov	QWORD PTR [rcx+8], rdx
; Line 122
	mov	DWORD PTR [rcx+16], 0
; Line 123
	ret	0
ccexec_enter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_load
_TEXT	SEGMENT
stack$ = 8
type$ = 16
address$ = 24
ccexec_load PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 115
	mov	eax, DWORD PTR [r8]
; Line 116
	ret	0
ccexec_load ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_local_alloc
_TEXT	SEGMENT
stack$ = 48
value$ = 56
ccstack_local_alloc PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 89
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 94
	mov	rdi, QWORD PTR [rdx+8]
; Line 16
	lea	rbx, QWORD PTR [rcx+24]
	mov	r9, rdx
	mov	rcx, rbx
	mov	edx, 32					; 00000020H
	lea	r8d, QWORD PTR [rdx-40]
	call	ccdlb_tblput
	mov	rbx, QWORD PTR [rbx]
	mov	ecx, eax
	shl	rcx, 5
	add	rbx, rcx
; Line 102
	mov	ecx, 8
	call	malloc
	mov	QWORD PTR [rbx+24], rax
; Line 108
	lea	rdx, OFFSET FLAT:??_C@_0O@EBBNFLMJ@?8?$CFs?8?3localloc@
	mov	DWORD PTR [rbx+8], 2
	mov	rcx, QWORD PTR [rdi+16]
	mov	QWORD PTR [rbx+16], rcx
	mov	rcx, rbx
	mov	QWORD PTR [rbx], 0
	mov	r8, QWORD PTR [rdi+8]
	call	ccstr_catf
; Line 109
	mov	rax, rbx
; Line 110
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccstack_local_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_yield_lvalue
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
stack$ = 88
couple$ = 96
ccstack_yield_lvalue PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 69
	push	rbx
	sub	rsp, 64					; 00000040H
; Line 72
	cmp	DWORD PTR [r8], 5
	xorps	xmm0, xmm0
	movups	XMMWORD PTR [rcx], xmm0
	mov	rbx, rcx
	movups	XMMWORD PTR [rcx+16], xmm0
	jne	SHORT $LN8@ccstack_yi
; Line 73
	mov	r9, QWORD PTR [r8+8]
	mov	ecx, DWORD PTR [r9]
	test	ecx, ecx
	je	SHORT $LN5@ccstack_yi
	cmp	ecx, 1
	jne	SHORT $LN8@ccstack_yi
$LN5@ccstack_yi:
; Line 76
	lea	rcx, QWORD PTR $T1[rsp]
	call	ccstack_yield
	movups	xmm0, XMMWORD PTR [rax]
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
$LN8@ccstack_yi:
; Line 83
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
ccstack_yield_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_yield_rvalue
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
__$ReturnAddress$ = 80
stack$ = 88
couple$ = 96
ccstack_yield_rvalue PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 42
	push	rbx
	sub	rsp, 64					; 00000040H
; Line 45
	mov	eax, DWORD PTR [r8]
	xorps	xmm0, xmm0
	mov	r9, r8
	mov	rbx, rcx
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm0
	cmp	eax, 2
	je	SHORT $LN10@ccstack_yi
	cmp	eax, 5
	jne	SHORT $LN16@ccstack_yi
; Line 47
	mov	r8, QWORD PTR [r8+8]
	mov	ecx, DWORD PTR [r8]
	sub	ecx, 3
	je	SHORT $LN7@ccstack_yi
	sub	ecx, 1
	je	SHORT $LN7@ccstack_yi
	cmp	ecx, 6
	jne	SHORT $LN16@ccstack_yi
$LN7@ccstack_yi:
; Line 51
	mov	r8, r9
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccstack_yield
	movups	xmm0, XMMWORD PTR [rax]
	movups	xmm1, XMMWORD PTR [rax+16]
; Line 65
	mov	rax, rbx
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
$LN10@ccstack_yi:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 77
	mov	rax, QWORD PTR [r8+8]
	mov	QWORD PTR $T1[rsp+16], rax
; Line 78
	mov	rax, QWORD PTR [r8+16]
	mov	QWORD PTR $T1[rsp+24], rax
; Line 79
	lea	rax, OFFSET FLAT:??_C@_0P@CGIBHDEL@constant?9value@
; File W:\cpp\void\ktt-c\ccexec.c
; Line 58
	movups	xmm1, XMMWORD PTR $T1[rsp+16]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 79
	mov	QWORD PTR $T1[rsp], rax
	mov	DWORD PTR $T1[rsp+8], 1
; File W:\cpp\void\ktt-c\ccexec.c
; Line 58
	movups	xmm0, XMMWORD PTR $T1[rsp]
	movups	XMMWORD PTR [rcx], xmm0
	movups	XMMWORD PTR [rcx+16], xmm1
$LN16@ccstack_yi:
; Line 65
	mov	rax, rbx
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
ccstack_yield_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_yield
_TEXT	SEGMENT
__$ReturnAddress$ = 48
stack$ = 56
value$ = 64
ccstack_yield PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 25
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	rax, QWORD PTR [rdx+24]
; Line 389
	xor	edi, edi
	test	rax, rax
; File W:\cpp\void\ktt-c\ccexec.c
; Line 25
	mov	rbx, rcx
	mov	r9, r8
	mov	rbp, rdx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 391
	mov	r8d, DWORD PTR _tls_index
	lea	rcx, QWORD PTR [rax-24]
	mov	edx, OFFSET FLAT:ccerr
	mov	rax, QWORD PTR gs:88
	cmove	rcx, rdi
	mov	rsi, QWORD PTR [rax+r8*8]
	add	rsi, rdx
	mov	DWORD PTR [rsi], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN6@ccstack_yi
; Line 393
	mov	r8, r9
	lea	edx, QWORD PTR [rdi-8]
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rsi], edi
	jne	SHORT $LN6@ccstack_yi
	mov	edi, DWORD PTR [rax+24]
$LN6@ccstack_yi:
; File W:\cpp\void\ktt-c\ccexec.c
; Line 36
	mov	rax, QWORD PTR [rbp+24]
; Line 37
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 396
	mov	ecx, edi
; File W:\cpp\void\ktt-c\ccexec.c
; Line 28
	and	rcx, -32				; ffffffffffffffe0H
; Line 36
	movups	xmm0, XMMWORD PTR [rcx+rax]
	movups	xmm1, XMMWORD PTR [rcx+rax+16]
	mov	rax, rbx
	movups	XMMWORD PTR [rbx], xmm0
	movups	XMMWORD PTR [rbx+16], xmm1
; Line 37
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccstack_yield ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstack_mingle
_TEXT	SEGMENT
stack$ = 48
value$ = 56
ccstack_mingle PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.c
; Line 12
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 16
	mov	r9, rdx
	lea	rbx, QWORD PTR [rcx+24]
	mov	edx, 32					; 00000020H
	mov	rcx, rbx
	lea	r8d, QWORD PTR [rdx-40]
	call	ccdlb_tblput
	mov	ecx, eax
	mov	rax, QWORD PTR [rbx]
	shl	rcx, 5
	add	rax, rcx
; Line 20
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccstack_mingle ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_init
_TEXT	SEGMENT
emit$ = 8
ccemit_init PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 415
	xorps	xmm0, xmm0
	xor	eax, eax
	movups	XMMWORD PTR [rcx], xmm0
	mov	QWORD PTR [rcx+16], rax
; Line 416
	ret	0
ccemit_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_translation_unit
_TEXT	SEGMENT
emit$ = 80
tree$ = 88
ccemit_translation_unit PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 406
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\cctree.h
; Line 574
	mov	rbx, QWORD PTR [rdx+32]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 406
	mov	r12, rdx
	mov	rbp, rcx
$LL21@ccemit_tra:
; File W:\cpp\void\ktt-c\cctree.h
; Line 574
	mov	r14, QWORD PTR [r12+32]
	test	r14, r14
	je	SHORT $LN23@ccemit_tra
	mov	eax, DWORD PTR [r14-4]
	jmp	SHORT $LN24@ccemit_tra
$LN23@ccemit_tra:
	xor	eax, eax
$LN24@ccemit_tra:
	and	rax, -8
	add	rax, r14
	cmp	rbx, rax
	jae	SHORT $LL20@ccemit_tra
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_decl
	add	rbx, 8
	jmp	SHORT $LL21@ccemit_tra
$LL20@ccemit_tra:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 410
	mov	rcx, QWORD PTR [r12+32]
	test	rcx, rcx
	je	SHORT $LN6@ccemit_tra
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN7@ccemit_tra
$LN6@ccemit_tra:
	xor	eax, eax
$LN7@ccemit_tra:
	and	rax, -8
	add	rax, rcx
	cmp	r14, rax
	jae	$LN3@ccemit_tra
	mov	r13, QWORD PTR [r14]
; Line 379
	mov	rdi, QWORD PTR [r13+32]
	npad	6
$LL11@ccemit_tra:
	mov	rcx, QWORD PTR [r13+32]
	test	rcx, rcx
	je	SHORT $LN16@ccemit_tra
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN17@ccemit_tra
$LN16@ccemit_tra:
	xor	eax, eax
$LN17@ccemit_tra:
	and	rax, -8
	add	rax, rcx
	cmp	rdi, rax
	jae	$LN2@ccemit_tra
; Line 380
	mov	rsi, QWORD PTR [rdi]
; Line 382
	mov	rax, QWORD PTR [rsi+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN9@ccemit_tra
; Line 384
	mov	edx, 8
	mov	r9, rsi
	mov	rcx, rbp
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	r15d, eax
; Line 386
	mov	ecx, 48					; 00000030H
	shl	r15, 3
	add	r15, QWORD PTR [rbp]
	call	malloc
	xorps	xmm0, xmm0
; Line 388
	mov	ecx, 24
	mov	rbx, rax
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	call	malloc
	mov	QWORD PTR [r15], rax
; Line 392
	mov	r8, rsi
	mov	rdx, rbx
	mov	DWORD PTR [rax], 4
	mov	rcx, QWORD PTR [r15]
	mov	QWORD PTR [rcx+8], rbx
	mov	rcx, rbp
	call	ccemit_function
; Line 394
	mov	rdx, QWORD PTR [rsi+24]
	lea	r8, OFFSET FLAT:??_C@_04GHJNJNPO@main@
	xor	eax, eax
	npad	1
$LL34@ccemit_tra:
	movzx	ecx, BYTE PTR [rdx+rax]
	inc	rax
	cmp	cl, BYTE PTR [r8+rax-1]
	jne	SHORT $LN9@ccemit_tra
	cmp	rax, 5
	jne	SHORT $LL34@ccemit_tra
; Line 395
	mov	rax, QWORD PTR [r15]
	mov	QWORD PTR [rbp+8], rax
$LN9@ccemit_tra:
; Line 379
	add	rdi, 8
	jmp	$LL11@ccemit_tra
$LN2@ccemit_tra:
; Line 410
	add	r14, 8
	jmp	$LL20@ccemit_tra
$LN3@ccemit_tra:
; Line 411
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
ccemit_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_external_decl
_TEXT	SEGMENT
emit$ = 64
tree$ = 72
ccemit_external_decl PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 376
	mov	QWORD PTR [rsp+32], rbp
	push	rdi
	push	r12
	push	r15
	sub	rsp, 32					; 00000020H
; Line 379
	mov	rdi, QWORD PTR [rdx+32]
	lea	r12, OFFSET FLAT:??_C@_04GHJNJNPO@main@
	mov	QWORD PTR [rsp+64], rbx
	mov	rbp, rdx
	mov	QWORD PTR [rsp+72], rsi
	mov	r15, rcx
	mov	QWORD PTR [rsp+80], r14
	npad	2
$LL4@ccemit_ext:
	mov	rcx, QWORD PTR [rbp+32]
	test	rcx, rcx
	je	SHORT $LN9@ccemit_ext
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN10@ccemit_ext
$LN9@ccemit_ext:
	xor	eax, eax
$LN10@ccemit_ext:
	and	rax, -8
	add	rax, rcx
	cmp	rdi, rax
	jae	$LN3@ccemit_ext
; Line 380
	mov	rsi, QWORD PTR [rdi]
; Line 382
	mov	rax, QWORD PTR [rsi+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN2@ccemit_ext
; Line 384
	mov	edx, 8
	mov	r9, rsi
	mov	rcx, r15
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	r14d, eax
; Line 386
	mov	ecx, 48					; 00000030H
	shl	r14, 3
	add	r14, QWORD PTR [r15]
	call	malloc
	xorps	xmm0, xmm0
; Line 388
	mov	ecx, 24
	mov	rbx, rax
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	movups	XMMWORD PTR [rax+32], xmm0
	call	malloc
	mov	QWORD PTR [r14], rax
; Line 392
	mov	r8, rsi
	mov	rdx, rbx
	mov	DWORD PTR [rax], 4
	mov	rcx, QWORD PTR [r14]
	mov	QWORD PTR [rcx+8], rbx
	mov	rcx, r15
	call	ccemit_function
; Line 394
	mov	rdx, QWORD PTR [rsi+24]
	xor	eax, eax
	npad	9
$LL14@ccemit_ext:
	movzx	ecx, BYTE PTR [rdx+rax]
	inc	rax
	cmp	cl, BYTE PTR [r12+rax-1]
	jne	SHORT $LN2@ccemit_ext
	cmp	rax, 5
	jne	SHORT $LL14@ccemit_ext
; Line 395
	mov	rax, QWORD PTR [r14]
	mov	QWORD PTR [r15+8], rax
$LN2@ccemit_ext:
; Line 379
	add	rdi, 8
	jmp	$LL4@ccemit_ext
$LN3@ccemit_ext:
	mov	r14, QWORD PTR [rsp+80]
; Line 402
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r12
	pop	rdi
	ret	0
ccemit_external_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_function
_TEXT	SEGMENT
emit$ = 80
func$ = 88
tree$ = 96
ccemit_function PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 340
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 347
	xor	esi, esi
	mov	QWORD PTR [rdx], r8
	mov	rbp, r8
	mov	QWORD PTR [rdx+16], rsi
	mov	r14, rdx
; File W:\cpp\void\ktt-c\ccemit.h
; Line 55
	lea	ecx, QWORD PTR [rsi+16]
	call	malloc
	mov	r12, rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 241
	mov	edi, esi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 56
	lea	rax, OFFSET FLAT:??_C@_06PHJKMIOD@$decls@
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 242
	mov	r15d, esi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 56
	mov	QWORD PTR [r12], rax
; Line 57
	mov	QWORD PTR [r12+8], rsi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 350
	mov	QWORD PTR [r14+24], r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 283
	mov	rcx, QWORD PTR [r14+16]
; Line 284
	test	rcx, rcx
	lea	rbx, QWORD PTR [rcx-24]
	cmove	rbx, rsi
; Line 246
	test	rbx, rbx
	je	SHORT $LN34@ccemit_fun
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	r15d, DWORD PTR [rbx+20]
$LN34@ccemit_fun:
; Line 256
	lea	esi, DWORD PTR [r15+8]
	mov	rax, rbx
	cmp	edi, esi
	jae	SHORT $LN37@ccemit_fun
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, esi
	cmp	ecx, esi
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN37@ccemit_fun
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN37@ccemit_fun:
; Line 285
	lea	rcx, QWORD PTR [rax+24]
; Line 273
	mov	DWORD PTR [rax+16], edi
; Line 274
	mov	DWORD PTR [rax+20], esi
; Line 285
	mov	QWORD PTR [r14+16], rcx
; Line 286
	mov	eax, r15d
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccemit.c
; Line 350
	mov	QWORD PTR [rcx+rax*8], r12
; File W:\cpp\void\ktt-c\ccemit.h
; Line 55
	mov	ecx, 16
	call	malloc
	mov	r12, rax
; Line 56
	lea	rax, OFFSET FLAT:??_C@_06JABCEPLP@$enter@
	mov	QWORD PTR [r12], rax
; Line 57
	xor	eax, eax
	mov	QWORD PTR [r12+8], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 241
	mov	ebx, eax
; File W:\cpp\void\ktt-c\ccemit.c
; Line 351
	mov	QWORD PTR [r14+32], r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 242
	mov	r15d, eax
; Line 283
	mov	rcx, QWORD PTR [r14+16]
; Line 284
	test	rcx, rcx
	lea	rdi, QWORD PTR [rcx-24]
	cmove	rdi, rax
; Line 246
	test	rdi, rdi
	je	SHORT $LN46@ccemit_fun
; Line 247
	mov	ebx, DWORD PTR [rdi+16]
; Line 248
	mov	r15d, DWORD PTR [rdi+20]
$LN46@ccemit_fun:
; Line 256
	lea	esi, DWORD PTR [r15+8]
	mov	rax, rdi
	cmp	ebx, esi
	jae	SHORT $LN49@ccemit_fun
; Line 260
	lea	ecx, DWORD PTR [rbx+rbx]
; Line 265
	mov	eax, esi
	cmp	ecx, esi
	cmovae	eax, ecx
	mov	rcx, rdi
	mov	ebx, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rdi, rdi
	jne	SHORT $LN49@ccemit_fun
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN49@ccemit_fun:
; Line 273
	mov	DWORD PTR [rax+16], ebx
; Line 285
	lea	rdx, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], esi
; File W:\cpp\void\ktt-c\ccemit.h
; Line 55
	mov	ecx, 16
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 285
	mov	QWORD PTR [r14+16], rdx
; Line 286
	mov	eax, r15d
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccemit.c
; Line 351
	mov	QWORD PTR [rdx+rax*8], r12
; File W:\cpp\void\ktt-c\ccemit.h
; Line 55
	call	malloc
	mov	r12, rax
; Line 56
	lea	rax, OFFSET FLAT:??_C@_06LMOJBBHE@$leave@
	mov	QWORD PTR [r12], rax
; Line 57
	xor	eax, eax
	mov	QWORD PTR [r12+8], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 241
	mov	ebx, eax
; File W:\cpp\void\ktt-c\ccemit.c
; Line 352
	mov	QWORD PTR [r14+40], r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 242
	mov	r15d, eax
; Line 283
	mov	rcx, QWORD PTR [r14+16]
; Line 284
	test	rcx, rcx
	lea	rdi, QWORD PTR [rcx-24]
	cmove	rdi, rax
; Line 246
	test	rdi, rdi
	je	SHORT $LN58@ccemit_fun
; Line 247
	mov	ebx, DWORD PTR [rdi+16]
; Line 248
	mov	r15d, DWORD PTR [rdi+20]
$LN58@ccemit_fun:
; Line 256
	lea	esi, DWORD PTR [r15+8]
	mov	rax, rdi
	cmp	ebx, esi
	jae	SHORT $LN61@ccemit_fun
; Line 260
	lea	ecx, DWORD PTR [rbx+rbx]
; Line 265
	mov	eax, esi
	cmp	ecx, esi
	cmovae	eax, ecx
	mov	rcx, rdi
	mov	ebx, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rdi, rdi
	jne	SHORT $LN61@ccemit_fun
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN61@ccemit_fun:
; Line 273
	mov	DWORD PTR [rax+16], ebx
; Line 285
	lea	rcx, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], esi
; Line 285
	mov	QWORD PTR [r14+16], rcx
; Line 286
	mov	eax, r15d
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccemit.c
; Line 362
	xor	r13d, r13d
	mov	QWORD PTR [rcx+rax*8], r12
	mov	rax, QWORD PTR [rbp+48]
	mov	r15, QWORD PTR [rax+32]
	npad	2
$LL4@ccemit_fun:
	mov	rax, QWORD PTR [rbp+48]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN9@ccemit_fun
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN10@ccemit_fun
$LN9@ccemit_fun:
	mov	eax, r13d
$LN10@ccemit_fun:
	and	rax, -8
	add	rax, rcx
	cmp	r15, rax
	jae	SHORT $LN3@ccemit_fun
; Line 363
	mov	rsi, QWORD PTR [r15]
; File W:\cpp\void\ktt-c\ccedict.h
; Line 97
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 98
	mov	DWORD PTR [rax], 1
; Line 99
	mov	rcx, QWORD PTR [rsi+24]
	mov	QWORD PTR [rax+8], rcx
; Line 101
	mov	rcx, QWORD PTR [rsi+48]
	mov	QWORD PTR [rax+16], rcx
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rcx, QWORD PTR [r14+24]
	call	ccblock_add_edict
; Line 66
	mov	edx, 8
	lea	rcx, QWORD PTR [r14+8]
	mov	r9, rsi
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 68
	mov	rcx, QWORD PTR [r14+8]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 362
	add	r15, 8
; File W:\cpp\void\ktt-c\ccexec.h
; Line 66
	mov	edx, eax
; Line 68
	mov	QWORD PTR [rcx+rdx*8], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 362
	jmp	SHORT $LL4@ccemit_fun
$LN3@ccemit_fun:
; Line 366
	mov	rax, QWORD PTR [r14+32]
	mov	r13, QWORD PTR emit$[rsp]
	mov	QWORD PTR [r13+16], rax
; Line 367
	mov	rax, QWORD PTR [rbp+88]
	mov	rbx, QWORD PTR [rax+32]
	npad	3
$LL7@ccemit_fun:
	mov	rax, QWORD PTR [rbp+88]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN11@ccemit_fun
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN12@ccemit_fun
$LN11@ccemit_fun:
	xor	eax, eax
$LN12@ccemit_fun:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN6@ccemit_fun
; Line 368
	mov	r9, QWORD PTR [rbx]
	mov	rdx, r14
	mov	r8, QWORD PTR [r13+16]
	mov	rcx, r13
	call	ccemit_tree
	add	rbx, 8
	jmp	SHORT $LL7@ccemit_fun
$LN6@ccemit_fun:
; Line 370
	mov	rbx, QWORD PTR [r14+32]
; File W:\cpp\void\ktt-c\ccedict.h
; Line 138
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 370
	mov	rdi, QWORD PTR [r14+24]
; File W:\cpp\void\ktt-c\ccedict.h
; Line 138
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 98
	mov	rdx, rax
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 139
	mov	DWORD PTR [rax], 9
; Line 140
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 371
	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
; Line 98
	jmp	ccblock_add_edict
ccemit_function ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_param
_TEXT	SEGMENT
emit$ = 48
func$ = 56
tree$ = 64
ccemit_param PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 248
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\ccedict.h
; Line 97
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 248
	mov	rsi, r8
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 97
	call	malloc
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 98
	mov	DWORD PTR [rax], 1
; Line 99
	mov	rcx, QWORD PTR [rsi+24]
	mov	QWORD PTR [rax+8], rcx
; Line 101
	mov	rcx, QWORD PTR [rsi+48]
	mov	QWORD PTR [rax+16], rcx
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rcx, QWORD PTR [rbx+24]
	call	ccblock_add_edict
; Line 66
	mov	edx, 8
	lea	rcx, QWORD PTR [rbx+8]
	mov	r9, rsi
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 68
	mov	rcx, QWORD PTR [rbx+8]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 250
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 66
	mov	edx, eax
; File W:\cpp\void\ktt-c\ccemit.c
; Line 249
	mov	rax, rdi
; File W:\cpp\void\ktt-c\ccexec.h
; Line 68
	mov	QWORD PTR [rcx+rdx*8], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 250
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccemit_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_decl
_TEXT	SEGMENT
emit$ = 80
func$ = 88
block$ = 96
decl$ = 104
ccemit_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 242
	push	rsi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 243
	mov	rsi, QWORD PTR [r9+32]
	mov	r14, r9
	mov	QWORD PTR [rsp+80], rbx
	mov	r12, r8
	mov	QWORD PTR [rsp+88], rbp
	mov	r15, rdx
	mov	QWORD PTR [rsp+96], rdi
	mov	r13, rcx
	npad	3
$LL4@ccemit_dec:
	mov	rax, QWORD PTR [r14+32]
	test	rax, rax
	je	SHORT $LN6@ccemit_dec
	mov	ecx, DWORD PTR [rax-4]
	jmp	SHORT $LN7@ccemit_dec
$LN6@ccemit_dec:
	xor	ecx, ecx
$LN7@ccemit_dec:
	and	rcx, -8
	add	rcx, rax
	cmp	rsi, rcx
	jae	$LN3@ccemit_dec
	mov	rdi, QWORD PTR [rsi]
; File W:\cpp\void\ktt-c\ccedict.h
; Line 84
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 85
	mov	DWORD PTR [rax], 0
; Line 86
	mov	rcx, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+8], rcx
; Line 88
	mov	rcx, QWORD PTR [rdi+48]
	mov	QWORD PTR [rax+16], rcx
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rcx, QWORD PTR [r15+24]
	call	ccblock_add_edict
; Line 66
	mov	edx, 8
	lea	rcx, QWORD PTR [r15+8]
	mov	r9, rdi
	mov	rbp, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 68
	mov	rcx, QWORD PTR [r15+8]
	mov	edx, eax
	mov	QWORD PTR [rcx+rdx*8], rbp
; File W:\cpp\void\ktt-c\ccemit.c
; Line 233
	mov	r9, QWORD PTR [rdi+64]
	test	r9, r9
	je	SHORT $LN2@ccemit_dec
; Line 234
	mov	r8, r12
	mov	rdx, r15
	mov	rcx, r13
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\ccedict.h
; Line 108
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 234
	mov	rbx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 108
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 80
	mov	rdx, rax
	mov	rcx, r12
; File W:\cpp\void\ktt-c\ccedict.h
; Line 109
	mov	DWORD PTR [rax], 2
; Line 110
	mov	QWORD PTR [rax+16], rbp
; Line 111
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 80
	call	ccblock_add_edict
$LN2@ccemit_dec:
; Line 243
	add	rsi, 8
	jmp	$LL4@ccemit_dec
$LN3@ccemit_dec:
	mov	rdi, QWORD PTR [rsp+96]
; Line 244
	mov	rbp, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rsi
	ret	0
ccemit_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_decl_name
_TEXT	SEGMENT
emit$ = 64
func$ = 72
block$ = 80
tree$ = 88
ccemit_decl_name PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 231
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r15, rcx
	mov	rdi, r9
; File W:\cpp\void\ktt-c\ccedict.h
; Line 84
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 231
	mov	rbp, r8
	mov	r14, rdx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 84
	call	malloc
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 85
	mov	DWORD PTR [rax], 0
; Line 86
	mov	r10, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+8], r10
; Line 88
	mov	r10, QWORD PTR [rdi+48]
	mov	QWORD PTR [rax+16], r10
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rcx, QWORD PTR [r14+24]
	call	ccblock_add_edict
; Line 66
	mov	edx, 8
	lea	rcx, QWORD PTR [r14+8]
	mov	r9, rdi
	mov	rsi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 68
	mov	rdx, QWORD PTR [r14+8]
	mov	r8d, eax
	mov	QWORD PTR [rdx+r8*8], rsi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 233
	mov	r9, QWORD PTR [rdi+64]
	test	r9, r9
	je	SHORT $LN16@ccemit_dec
; Line 234
	mov	r8, rbp
	mov	rdx, r14
	mov	rcx, r15
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\ccedict.h
; Line 108
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 234
	mov	rbx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 108
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 80
	mov	rdx, rax
	mov	rcx, rbp
; File W:\cpp\void\ktt-c\ccedict.h
; Line 109
	mov	DWORD PTR [rax], 2
; Line 110
	mov	QWORD PTR [rax+16], rsi
; Line 111
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 80
	call	ccblock_add_edict
$LN16@ccemit_dec:
; Line 238
	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
ccemit_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_treelist
_TEXT	SEGMENT
emit$ = 48
func$ = 56
irset$ = 64
list$ = 72
ccemit_treelist PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 223
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rbx, r9
	mov	rsi, r8
	mov	rbp, rdx
	mov	r14, rcx
; Line 225
	mov	rdi, r9
	npad	7
$LL4@ccemit_tre:
	test	rbx, rbx
	je	SHORT $LN6@ccemit_tre
	mov	eax, DWORD PTR [rbx-4]
	jmp	SHORT $LN7@ccemit_tre
$LN6@ccemit_tre:
	xor	eax, eax
$LN7@ccemit_tre:
	and	rax, -8
	add	rax, rbx
	cmp	rdi, rax
	jae	SHORT $LN3@ccemit_tre
	mov	r9, QWORD PTR [rdi]
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, r14
	call	ccemit_tree
	add	rdi, 8
	jmp	SHORT $LL4@ccemit_tre
$LN3@ccemit_tre:
; Line 226
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccemit_treelist ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_tree
_TEXT	SEGMENT
emit$ = 80
func$ = 88
irset$ = 96
i$1$ = 104
tree$ = 104
ccemit_tree PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 255
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 256
	mov	eax, DWORD PTR [r9]
	mov	r15, r9
	mov	rbp, r8
	mov	r14, rdx
	mov	r12, rcx
	cmp	eax, 16
	jne	$LN2@ccemit_tre
; Line 243
	mov	r13, QWORD PTR [r9+32]
	xor	esi, esi
	npad	6
$LL29@ccemit_tre:
	mov	rcx, QWORD PTR [r15+32]
	test	rcx, rcx
	je	SHORT $LN31@ccemit_tre
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN32@ccemit_tre
$LN31@ccemit_tre:
	mov	eax, esi
$LN32@ccemit_tre:
	and	rax, -8
	add	rax, rcx
	cmp	r13, rax
	jae	$LN18@ccemit_tre
	mov	rdi, QWORD PTR [r13]
; File W:\cpp\void\ktt-c\ccedict.h
; Line 84
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 85
	mov	DWORD PTR [rax], esi
; Line 86
	mov	rcx, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+8], rcx
; Line 88
	mov	rcx, QWORD PTR [rdi+48]
	mov	QWORD PTR [rax+16], rcx
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rcx, QWORD PTR [r14+24]
	call	ccblock_add_edict
; Line 66
	mov	edx, 8
	mov	QWORD PTR i$1$[rsp], rax
	mov	r9, rdi
	lea	rcx, QWORD PTR [r14+8]
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 68
	mov	rcx, QWORD PTR [r14+8]
	mov	edx, eax
	mov	rax, QWORD PTR i$1$[rsp]
	mov	QWORD PTR [rcx+rdx*8], rax
; File W:\cpp\void\ktt-c\ccemit.c
; Line 233
	mov	r9, QWORD PTR [rdi+64]
	test	r9, r9
	je	SHORT $LN27@ccemit_tre
; Line 234
	mov	r8, rbp
	mov	rdx, r14
	mov	rcx, r12
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\ccedict.h
; Line 108
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 234
	mov	rbx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 108
	call	malloc
; Line 110
	mov	rcx, QWORD PTR i$1$[rsp]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 80
	mov	rdx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 110
	mov	QWORD PTR [rax+16], rcx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 80
	mov	rcx, rbp
; File W:\cpp\void\ktt-c\ccedict.h
; Line 109
	mov	DWORD PTR [rax], 2
; Line 111
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 80
	call	ccblock_add_edict
$LN27@ccemit_tre:
; Line 243
	add	r13, 8
	jmp	$LL29@ccemit_tre
$LN2@ccemit_tre:
; Line 262
	cmp	eax, 10
	jne	SHORT $LN4@ccemit_tre
; Line 264
	mov	rdi, QWORD PTR [r9+32]
; Line 225
	xor	esi, esi
	mov	rbx, rdi
	npad	2
$LL51@ccemit_tre:
	test	rdi, rdi
	je	SHORT $LN53@ccemit_tre
	mov	eax, DWORD PTR [rdi-4]
	jmp	SHORT $LN54@ccemit_tre
$LN53@ccemit_tre:
	mov	eax, esi
$LN54@ccemit_tre:
	and	rax, -8
	add	rax, rdi
	cmp	rbx, rax
	jae	$LN18@ccemit_tre
	mov	r9, QWORD PTR [rbx]
	mov	r8, rbp
	mov	rdx, r14
	mov	rcx, r12
	call	ccemit_tree
	add	rbx, 8
	jmp	SHORT $LL51@ccemit_tre
$LN4@ccemit_tre:
; Line 267
	cmp	eax, 11
	jne	SHORT $LN6@ccemit_tre
; Line 269
	mov	rdi, QWORD PTR [r9+32]
; Line 225
	xor	esi, esi
	mov	rbx, rdi
$LL58@ccemit_tre:
	test	rdi, rdi
	je	SHORT $LN60@ccemit_tre
	mov	eax, DWORD PTR [rdi-4]
	jmp	SHORT $LN61@ccemit_tre
$LN60@ccemit_tre:
	mov	eax, esi
$LN61@ccemit_tre:
	and	rax, -8
	add	rax, rdi
	cmp	rbx, rax
	jae	SHORT $LN57@ccemit_tre
	mov	r9, QWORD PTR [rbx]
	xor	r8d, r8d
	mov	rdx, r14
	mov	rcx, r12
	call	ccemit_tree
	add	rbx, 8
	jmp	SHORT $LL58@ccemit_tre
$LN57@ccemit_tre:
; File W:\cpp\void\ktt-c\ccedict.h
; Line 138
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 98
	mov	rdx, rax
	xor	ecx, ecx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 139
	mov	DWORD PTR [rax], 9
; Line 140
	mov	QWORD PTR [rax+16], rsi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 98
	call	ccblock_add_edict
; Line 270
	jmp	$LN1@ccemit_tre
$LN6@ccemit_tre:
; Line 272
	cmp	eax, 12
	jne	SHORT $LN8@ccemit_tre
; Line 274
	mov	r9, QWORD PTR [r9+80]
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\ccedict.h
; Line 193
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 274
	mov	rbx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 193
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 104
	mov	rdx, rax
	mov	rcx, rbp
; File W:\cpp\void\ktt-c\ccedict.h
; Line 194
	mov	DWORD PTR [rax], 11
; Line 195
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 104
	call	ccblock_add_edict
; Line 276
	jmp	$LN1@ccemit_tre
$LN8@ccemit_tre:
; Line 278
	cmp	eax, 13
	je	$LN18@ccemit_tre
; Line 282
	cmp	eax, 21
	jne	SHORT $LN12@ccemit_tre
; Line 284
	call	ccemit_invoke_easy
	jmp	$LN1@ccemit_tre
$LN12@ccemit_tre:
; Line 286
	cmp	eax, 18
	jne	$LN14@ccemit_tre
; Line 289
	mov	rcx, QWORD PTR [r9+72]
; Line 182
	xor	esi, esi
; Line 183
	cmp	DWORD PTR [rcx], 6
	jne	SHORT $LN74@ccemit_tre
; Line 143
	call	cctree_resolve_symbol
; Line 146
	mov	rdx, rax
	mov	rcx, r14
	call	ccfunc_local
	mov	rsi, rax
$LN74@ccemit_tre:
; Line 290
	mov	r9, QWORD PTR [r15+80]
	mov	r8, rbp
	mov	rdx, r14
	mov	rcx, r12
	call	ccemit_rvalue
; Line 292
	cmp	DWORD PTR [r15+40], 109			; 0000006dH
	mov	rbx, rax
	jne	SHORT $LN16@ccemit_tre
; Line 294
	mov	r8, rax
	mov	rdx, rsi
	mov	rcx, rbp
	call	ccemit_store
	jmp	$LN1@ccemit_tre
$LN16@ccemit_tre:
; File W:\cpp\void\ktt-c\ccedict.h
; Line 118
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 86
	mov	rdx, rax
	mov	rcx, rbp
; File W:\cpp\void\ktt-c\ccedict.h
; Line 119
	mov	DWORD PTR [rax], 3
; Line 120
	mov	QWORD PTR [rax+16], rsi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 86
	call	ccblock_add_edict
; Line 299
	mov	edx, DWORD PTR [r15+40]
	mov	r9, rbx
	mov	r8, rax
	mov	rcx, rbp
	call	ccemit_arith
	jmp	$LN1@ccemit_tre
$LN14@ccemit_tre:
; Line 303
	cmp	eax, 17
	jne	SHORT $LN18@ccemit_tre
; Line 304
	mov	r9, QWORD PTR [r9+64]
	call	ccemit_tree
; File W:\cpp\void\ktt-c\ccedict.h
; Line 169
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 304
	mov	rbx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 169
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 128
	mov	rdx, rax
	mov	rcx, rbp
; File W:\cpp\void\ktt-c\ccedict.h
; Line 170
	mov	DWORD PTR [rax], 7
; Line 171
	mov	QWORD PTR [rax+16], rbp
; Line 172
	mov	DWORD PTR [rax+24], 65535		; 0000ffffH
; Line 173
	mov	QWORD PTR [rax+32], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 128
	call	ccblock_add_edict
; Line 309
	mov	r9, QWORD PTR [r15+72]
; Line 128
	mov	rbx, rax
; Line 309
	test	r9, r9
	je	SHORT $LN20@ccemit_tre
	mov	r8, rbp
	mov	rdx, r14
	mov	rcx, r12
	call	ccemit_tree
$LN20@ccemit_tre:
; Line 310
	mov	rsi, QWORD PTR [rbp+8]
	test	rsi, rsi
	je	SHORT $LN25@ccemit_tre
	mov	esi, DWORD PTR [rsi-4]
$LN25@ccemit_tre:
	mov	rax, QWORD PTR [rbx+8]
	shr	esi, 3
	mov	DWORD PTR [rax+24], esi
; Line 311
	mov	r9, QWORD PTR [r15+80]
	test	r9, r9
	je	SHORT $LN18@ccemit_tre
	mov	r8, rbp
	mov	rdx, r14
	mov	rcx, r12
	call	ccemit_tree
$LN18@ccemit_tre:
; Line 333
	xor	eax, eax
$LN1@ccemit_tre:
; Line 334
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
ccemit_tree ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_invoke_easy
_TEXT	SEGMENT
call$1$ = 96
emit$ = 96
func$ = 104
block$ = 112
tree$ = 120
ccemit_invoke_easy PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 159
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 161
	mov	r14, QWORD PTR [r9+80]
	mov	r12, rcx
; Line 165
	mov	rcx, QWORD PTR [r9+72]
	mov	r13, r8
	call	cctree_resolve_symbol
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	r9, QWORD PTR [r12]
; Line 389
	xor	esi, esi
; Line 391
	mov	r8d, DWORD PTR _tls_index
	test	r9, r9
	mov	rdx, QWORD PTR gs:88
	mov	ebx, esi
	lea	rcx, QWORD PTR [r9-24]
	mov	r9d, OFFSET FLAT:ccerr
	cmove	rcx, rsi
	mov	rdi, QWORD PTR [rdx+r8*8]
	add	rdi, r9
	mov	DWORD PTR [rdi], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN60@ccemit_inv
; Line 393
	mov	r8, rax
	lea	edx, QWORD PTR [rsi-8]
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rdi], ebx
	jne	SHORT $LN60@ccemit_inv
	mov	ebx, DWORD PTR [rax+24]
$LN60@ccemit_inv:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 168
	mov	rax, QWORD PTR [r12]
; Line 171
	mov	rdi, rsi
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 396
	mov	ecx, ebx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 174
	mov	r15, r14
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 396
	shr	rcx, 3
; File W:\cpp\void\ktt-c\ccemit.c
; Line 174
	mov	QWORD PTR [rsp+112], rbp
	lea	r8, QWORD PTR [rax+rcx*8]
	mov	QWORD PTR call$1$[rsp], r8
$LN67@ccemit_inv:
	mov	rdx, 3353953467947191203		; 2e8ba2e8ba2e8ba3H
	test	r14, r14
	je	SHORT $LN6@ccemit_inv
	mov	eax, DWORD PTR [r14-4]
	jmp	SHORT $LN7@ccemit_inv
$LN6@ccemit_inv:
	mov	eax, esi
$LN7@ccemit_inv:
	mov	ecx, eax
	mov	rax, rdx
	mul	rcx
	shr	rdx, 5
	imul	rax, rdx, 176				; 000000b0H
	add	rax, r14
	cmp	r15, rax
	jae	SHORT $LN3@ccemit_inv
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-24]
; Line 241
	mov	edi, esi
; Line 284
	cmove	rbx, rsi
; Line 246
	test	rbx, rbx
	je	SHORT $LN49@ccemit_inv
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	esi, DWORD PTR [rbx+20]
$LN49@ccemit_inv:
; Line 256
	lea	ebp, DWORD PTR [rsi+8]
	mov	rax, rbx
	cmp	edi, ebp
	jae	SHORT $LN52@ccemit_inv
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, ebp
	cmp	ecx, ebp
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN52@ccemit_inv
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN52@ccemit_inv:
; File W:\cpp\void\ktt-c\ccemit.c
; Line 175
	mov	rdx, QWORD PTR func$[rsp]
	mov	r9, r15
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 273
	mov	DWORD PTR [rax+16], edi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 175
	mov	r8, r13
	mov	rcx, r12
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 274
	mov	DWORD PTR [rax+20], ebp
; Line 285
	lea	rdi, QWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\ccemit.c
; Line 175
	call	ccemit_rvalue
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 286
	mov	ecx, esi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 174
	add	r15, 176				; 000000b0H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 286
	shr	rcx, 3
; File W:\cpp\void\ktt-c\ccemit.c
; Line 174
	xor	esi, esi
; Line 175
	mov	QWORD PTR [rdi+rcx*8], rax
	jmp	$LN67@ccemit_inv
$LN3@ccemit_inv:
; Line 177
	mov	rbx, QWORD PTR call$1$[rsp]
; File W:\cpp\void\ktt-c\ccedict.h
; Line 182
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 177
	mov	rbx, QWORD PTR [rbx]
; File W:\cpp\void\ktt-c\ccedict.h
; Line 182
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 116
	mov	rdx, rax
	mov	rcx, r13
; File W:\cpp\void\ktt-c\ccedict.h
; Line 183
	mov	DWORD PTR [rax], 10
; Line 184
	mov	QWORD PTR [rax+16], rbx
; Line 185
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 177
	mov	rbp, QWORD PTR [rsp+112]
; Line 178
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
; Line 116
	jmp	ccblock_add_edict
ccemit_invoke_easy ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_rvalue
_TEXT	SEGMENT
emit$ = 48
func$ = 56
block$ = 64
tree$ = 72
ccemit_rvalue PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 194
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 195
	mov	r10d, DWORD PTR [r9]
	mov	rdi, r9
	mov	rsi, r8
	mov	rbp, rdx
	mov	r14, rcx
	sub	r10d, 6
	je	SHORT $LN6@ccemit_rva
	sub	r10d, 1
	je	SHORT $LN4@ccemit_rva
	sub	r10d, 11
	je	SHORT $LN5@ccemit_rva
	cmp	r10d, 3
	jne	SHORT $LN20@ccemit_rva
; Line 209
	call	ccemit_invoke_easy
; Line 210
	jmp	$LN8@ccemit_rva
$LN20@ccemit_rva:
; Line 213
	xor	eax, eax
	jmp	$LN8@ccemit_rva
$LN5@ccemit_rva:
; Line 200
	mov	r9, QWORD PTR [r9+80]
	call	ccemit_rvalue
	mov	r9, QWORD PTR [rdi+72]
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, r14
	mov	rbx, rax
	call	ccemit_rvalue
	mov	edx, DWORD PTR [rdi+40]
	mov	r8, rax
	mov	r9, rbx
	mov	rcx, rsi
	call	ccemit_arith
; Line 204
	jmp	SHORT $LN8@ccemit_rva
$LN4@ccemit_rva:
; Line 197
	movsxd	rbx, DWORD PTR [r9+96]
; Line 43
	mov	ecx, 24
; Line 57
	mov	rdi, QWORD PTR ctype_int32
; Line 43
	call	malloc
; Line 46
	mov	QWORD PTR [rax], 2
; Line 47
	mov	QWORD PTR [rax+8], rdi
; Line 48
	mov	QWORD PTR [rax+16], rbx
; Line 198
	jmp	SHORT $LN8@ccemit_rva
$LN6@ccemit_rva:
; Line 143
	mov	rcx, rdi
	call	cctree_resolve_symbol
; Line 146
	mov	rdx, rax
	mov	rcx, rbp
	call	ccfunc_local
; File W:\cpp\void\ktt-c\ccedict.h
; Line 118
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 146
	mov	rbx, rax
; File W:\cpp\void\ktt-c\ccedict.h
; Line 118
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 86
	mov	rdx, rax
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 119
	mov	DWORD PTR [rax], 3
; Line 120
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 86
	call	ccblock_add_edict
$LN8@ccemit_rva:
; Line 214
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccemit_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_lvalue
_TEXT	SEGMENT
emit$ = 48
func$ = 56
block$ = 64
tree$ = 72
ccemit_lvalue PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 182
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 183
	cmp	DWORD PTR [r9], 6
	mov	rbx, rdx
	jne	SHORT $LN9@ccemit_lva
; Line 143
	mov	rcx, r9
	call	cctree_resolve_symbol
; Line 146
	mov	rdx, rax
	mov	rcx, rbx
; Line 190
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 146
	jmp	ccfunc_local
$LN9@ccemit_lva:
; Line 189
	xor	eax, eax
; Line 190
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccemit_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_resolve
_TEXT	SEGMENT
emit$ = 48
func$ = 56
tree$ = 64
ccemit_resolve PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 140
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 143
	mov	rcx, r8
	mov	rbx, rdx
	call	cctree_resolve_symbol
; Line 146
	mov	rdx, rax
	mov	rcx, rbx
; Line 149
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 146
	jmp	ccfunc_local
ccemit_resolve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_jumpF
_TEXT	SEGMENT
block$ = 48
blc$ = 56
tar$ = 64
cnd$ = 72
ccemit_jumpF PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 127
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\ccedict.h
; Line 169
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 127
	mov	edi, r8d
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 169
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 128
	mov	rdx, rax
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 170
	mov	DWORD PTR [rax], 7
; Line 171
	mov	QWORD PTR [rax+16], rbx
; Line 172
	mov	DWORD PTR [rax+24], edi
; Line 173
	mov	QWORD PTR [rax+32], rbp
; File W:\cpp\void\ktt-c\ccemit.c
; Line 129
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 128
	jmp	ccblock_add_edict
ccemit_jumpF ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_invoke
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccemit_invoke PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 115
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rdi, r8
; File W:\cpp\void\ktt-c\ccedict.h
; Line 182
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 115
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 182
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 116
	mov	rdx, rax
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 183
	mov	DWORD PTR [rax], 10
; Line 184
	mov	QWORD PTR [rax+16], rbx
; Line 185
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 117
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 116
	jmp	ccblock_add_edict
ccemit_invoke ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_return
_TEXT	SEGMENT
block$ = 48
value$ = 56
ccemit_return PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 103
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 193
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 104
	mov	rdx, rax
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 194
	mov	DWORD PTR [rax], 11
; Line 195
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 105
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 104
	jmp	ccblock_add_edict
ccemit_return ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_enter
_TEXT	SEGMENT
block$ = 48
blc$ = 56
ccemit_enter PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 97
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 138
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 98
	mov	rdx, rax
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 139
	mov	DWORD PTR [rax], 9
; Line 140
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 99
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 98
	jmp	ccblock_add_edict
ccemit_enter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_arith
_TEXT	SEGMENT
block$ = 48
opr$ = 56
lhs$ = 64
rhs$ = 72
ccemit_arith PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 91
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rbp, r9
; File W:\cpp\void\ktt-c\ccedict.h
; Line 127
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 91
	mov	rdi, r8
	mov	ebx, edx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 127
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 92
	mov	rdx, rax
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 128
	mov	DWORD PTR [rax], 4
; Line 129
	mov	DWORD PTR [rax+16], ebx
; Line 130
	mov	QWORD PTR [rax+24], rdi
; Line 131
	mov	QWORD PTR [rax+32], rbp
; File W:\cpp\void\ktt-c\ccemit.c
; Line 93
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 92
	jmp	ccblock_add_edict
ccemit_arith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_fetch
_TEXT	SEGMENT
block$ = 48
lval$ = 56
ccemit_fetch PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 85
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 118
	mov	ecx, 40					; 00000028H
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 86
	mov	rdx, rax
	mov	rcx, rdi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 119
	mov	DWORD PTR [rax], 3
; Line 120
	mov	QWORD PTR [rax+16], rbx
; File W:\cpp\void\ktt-c\ccemit.c
; Line 87
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 86
	jmp	ccblock_add_edict
ccemit_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_store
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccemit_store PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 79
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx
	mov	rdi, r8
; File W:\cpp\void\ktt-c\ccedict.h
; Line 108
	mov	ecx, 40					; 00000028H
; File W:\cpp\void\ktt-c\ccemit.c
; Line 79
	mov	rbx, rdx
; File W:\cpp\void\ktt-c\ccedict.h
; Line 108
	call	malloc
; File W:\cpp\void\ktt-c\ccemit.c
; Line 80
	mov	rdx, rax
	mov	rcx, rsi
; File W:\cpp\void\ktt-c\ccedict.h
; Line 109
	mov	DWORD PTR [rax], 2
; Line 110
	mov	QWORD PTR [rax+16], rbx
; Line 111
	mov	QWORD PTR [rax+24], rdi
; File W:\cpp\void\ktt-c\ccemit.c
; Line 81
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 80
	jmp	ccblock_add_edict
ccemit_store ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_label
_TEXT	SEGMENT
irset$ = 8
name$ = 16
ccemit_label PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 74
	xor	eax, eax
; Line 75
	ret	0
ccemit_label ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_const_i32
_TEXT	SEGMENT
emit$ = 48
value$ = 56
ccemit_const_i32 PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 55
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 57
	mov	rbx, QWORD PTR ctype_int32
; Line 43
	mov	ecx, 24
; Line 55
	mov	rdi, rdx
; Line 43
	call	malloc
; Line 47
	mov	QWORD PTR [rax+8], rbx
; Line 58
	mov	rbx, QWORD PTR [rsp+48]
; Line 46
	mov	QWORD PTR [rax], 2
; Line 48
	mov	QWORD PTR [rax+16], rdi
; Line 58
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccemit_const_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccemit_constant
_TEXT	SEGMENT
emit$ = 48
type$ = 56
clsc$ = 64
ccemit_constant PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.c
; Line 41
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 43
	mov	ecx, 24
	mov	rbx, r8
	mov	rdi, rdx
	call	malloc
; Line 48
	mov	QWORD PTR [rax+16], rbx
; Line 50
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax], 2
	mov	QWORD PTR [rax+8], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccemit_constant ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_translation_unit
_TEXT	SEGMENT
reader$ = 80
ccread_translation_unit PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1239
	push	rbp
	push	rdi
	push	r12
	push	r13
	sub	rsp, 40					; 00000028H
	mov	r12, rcx
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	mov	rdi, rax
; Line 130
	mov	QWORD PTR [rsp+80], rbx
	xorps	xmm0, xmm0
	mov	QWORD PTR [rsp+88], rsi
	mov	QWORD PTR [rsp+96], r14
	mov	QWORD PTR [rax], 22
	xor	eax, eax
	movups	XMMWORD PTR [rdi+20], xmm0
	xor	r13d, r13d
	mov	QWORD PTR [rsp+32], r15
	movups	XMMWORD PTR [rdi+36], xmm0
	movups	XMMWORD PTR [rdi+52], xmm0
	movups	XMMWORD PTR [rdi+68], xmm0
	movups	XMMWORD PTR [rdi+84], xmm0
	movups	XMMWORD PTR [rdi+100], xmm0
	movups	XMMWORD PTR [rdi+116], xmm0
	movups	XMMWORD PTR [rdi+132], xmm0
	movups	XMMWORD PTR [rdi+148], xmm0
	mov	QWORD PTR [rdi+164], rax
	mov	DWORD PTR [rdi+172], eax
	mov	QWORD PTR [rdi+8], r13
	mov	DWORD PTR [rdi+16], r13d
	npad	3
$LL2@ccread_tra:
; File W:\cpp\void\ktt-c\ccread.c
; Line 1251
	mov	r8d, 20
	mov	rdx, rdi
	mov	rcx, r12
	call	ccread_init_decl
	mov	rbp, rax
; Line 1253
	test	rax, rax
	je	$LN40@ccread_tra
; Line 1258
	mov	rax, QWORD PTR [rax+32]
	mov	rbx, QWORD PTR [rax]
; Line 1264
	mov	rax, QWORD PTR [rbx+48]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN7@ccread_tra
; Line 1269
	xor	r8d, r8d
	mov	rdx, rbx
	mov	rcx, r12
	call	ccread_block
	mov	QWORD PTR [rbx+88], rax
$LN7@ccread_tra:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 283
	mov	rax, QWORD PTR [rdi+32]
; Line 241
	mov	esi, r13d
; Line 284
	test	rax, rax
; Line 242
	mov	r14d, r13d
; Line 284
	lea	rbx, QWORD PTR [rax-24]
	cmove	rbx, r13
; Line 246
	test	rbx, rbx
	je	SHORT $LN27@ccread_tra
; Line 247
	mov	esi, DWORD PTR [rbx+16]
; Line 248
	mov	r14d, DWORD PTR [rbx+20]
$LN27@ccread_tra:
; Line 256
	lea	r15d, DWORD PTR [r14+8]
	mov	rax, rbx
	cmp	esi, r15d
	jae	SHORT $LN30@ccread_tra
; Line 260
	lea	ecx, DWORD PTR [rsi+rsi]
; Line 265
	mov	eax, r15d
	cmp	ecx, r15d
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	esi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN30@ccread_tra
; Line 269
	mov	QWORD PTR [rax], r13
	mov	QWORD PTR [rax+8], r13
$LN30@ccread_tra:
; Line 273
	mov	DWORD PTR [rax+16], esi
; Line 285
	lea	rcx, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], r15d
; Line 286
	mov	eax, r14d
	shr	rax, 3
	mov	QWORD PTR [rdi+32], rcx
; File W:\cpp\void\ktt-c\ccread.c
; Line 1243
	mov	QWORD PTR [rcx+rax*8], rbp
	jmp	$LL2@ccread_tra
$LN40@ccread_tra:
; Line 1245
	mov	r15, QWORD PTR [rsp+32]
	mov	rax, rdi
	mov	r14, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
; Line 1246
	add	rsp, 40					; 00000028H
	pop	r13
	pop	r12
	pop	rdi
	pop	rbp
	ret	0
ccread_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_external_declaration
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_external_declaration PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1250
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	esi, r8d
	mov	rbp, rcx
; Line 1251
	or	r8d, 20
	call	ccread_init_decl
	mov	rdi, rax
; Line 1253
	test	rax, rax
	jne	SHORT $LN2@ccread_ext
; Line 1280
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@ccread_ext:
; Line 1258
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+48], rbx
	mov	rbx, QWORD PTR [rax]
; Line 1264
	mov	rax, QWORD PTR [rbx+48]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN3@ccread_ext
; Line 1269
	mov	r8d, esi
	mov	rdx, rbx
	mov	rcx, rbp
	call	ccread_block
	mov	QWORD PTR [rbx+88], rax
$LN3@ccread_ext:
; Line 1279
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdi
; Line 1280
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_external_declaration ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_block_or_single_stmt
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_block_or_single_stmt PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1093
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rsi, rcx
	call	ccread_block
; Line 1094
	test	rax, rax
	jne	SHORT $LN603@ccread_blo
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rsi
	call	ccread_statement
$LN603@ccread_blo:
; Line 1096
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_block_or_single_stmt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_statement
_TEXT	SEGMENT
reader$ = 64
root$ = 72
mark$ = 80
ccread_statement PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1101
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 1102
	xor	r15d, r15d
; Line 62
	lea	r14, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 1101
	mov	rbx, rcx
	mov	rbp, rdx
; Line 62
	mov	rcx, QWORD PTR [rcx+128]
	mov	rax, r14
; Line 1101
	mov	esi, r8d
; Line 1102
	mov	edi, r15d
; Line 62
	mov	rdx, QWORD PTR [rbx+120]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 6
; Line 1104
	je	$LN36@ccread_sta
; Line 62
	cmp	rcx, rdx
	mov	rax, r14
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 5
; Line 160
	jne	SHORT $LN214@ccread_sta
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN67@ccread_sta
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+136], rcx
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN61@ccread_sta
$LN67@ccread_sta:
; Line 153
	mov	rcx, r14
$LN61@ccread_sta:
; Line 1108
	test	rcx, rcx
	je	SHORT $LN214@ccread_sta
; Line 1109
	mov	rdx, rbp
	mov	rcx, rbx
	call	ccread_block
; Line 62
	mov	rcx, QWORD PTR [rbx+120]
; Line 1109
	mov	rdx, rax
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	cmp	rax, rcx
	cmovb	r14, rax
; Line 77
	cmp	DWORD PTR [r14], 6
; Line 160
	jne	SHORT $LN122@ccread_sta
; Line 152
	cmp	rax, rcx
	jae	SHORT $LN122@ccread_sta
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN122@ccread_sta:
; Line 1111
	mov	rax, rdx
	jmp	$LN1@ccread_sta
$LN214@ccread_sta:
; Line 1113
	mov	rdx, rbp
	mov	rcx, rbx
	call	ccread_init_decl
	mov	rdi, rax
	test	rax, rax
	jne	$LN1@ccread_sta
; Line 62
	mov	rcx, QWORD PTR [rbx+128]
	mov	rax, r14
	mov	rdx, QWORD PTR [rbx+120]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 81			; 00000051H
; Line 160
	jne	SHORT $LN130@ccread_sta
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN145@ccread_sta
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+136], rcx
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN139@ccread_sta
$LN145@ccread_sta:
; Line 153
	mov	rcx, r14
$LN139@ccread_sta:
; Line 1117
	test	rcx, rcx
	je	SHORT $LN130@ccread_sta
; Line 1119
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rbx
	call	ccread_expression
; File W:\cpp\void\ktt-c\cctree.h
; Line 232
	mov	r8d, esi
	mov	rdx, rbp
	mov	ecx, 12
; File W:\cpp\void\ktt-c\ccread.c
; Line 1119
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 232
	call	cctree_new
; Line 233
	mov	QWORD PTR [rax+80], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 1125
	jmp	$LN215@ccread_sta
$LN130@ccread_sta:
; Line 1126
	mov	edx, 78					; 0000004eH
	mov	rcx, rbx
	call	cceat
	test	rax, rax
	je	SHORT $LN14@ccread_sta
; Line 1130
	mov	edx, 3
	call	cceat
; Line 1131
	mov	r8d, esi
	mov	rdx, rbp
	call	ccread_expression
; Line 1132
	mov	edx, 4
	mov	rcx, rbx
	mov	r14, rax
	call	cceat
; Line 1136
	mov	rcx, QWORD PTR [rbx+136]
	test	BYTE PTR [rcx+48], 2
	jne	SHORT $LN20@ccread_sta
; Line 1138
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rbx
	call	ccread_block_or_single_stmt
	mov	r15, rax
$LN20@ccread_sta:
; File W:\cpp\void\ktt-c\cctree.h
; Line 209
	mov	r8d, esi
	mov	rdx, rbp
	mov	ecx, 14
	call	cctree_new
; Line 210
	mov	QWORD PTR [rax+64], r14
; Line 211
	mov	QWORD PTR [rax+72], r15
; File W:\cpp\void\ktt-c\ccread.c
; Line 1142
	jmp	$LN215@ccread_sta
$LN14@ccread_sta:
; Line 1143
	mov	edx, 80					; 00000050H
	call	cceat
	test	rax, rax
	je	SHORT $LN21@ccread_sta
; Line 1145
	mov	r8d, esi
	mov	rdx, rbp
	call	ccread_identifier
; File W:\cpp\void\ktt-c\cctree.h
; Line 225
	mov	r8d, esi
	mov	rdx, rbp
	mov	ecx, 13
; File W:\cpp\void\ktt-c\ccread.c
; Line 1145
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 225
	call	cctree_new
	mov	rdi, rax
; Line 144
	test	rbx, rbx
	je	SHORT $LN155@ccread_sta
	mov	r15, QWORD PTR [rbx+24]
$LN155@ccread_sta:
; Line 226
	mov	QWORD PTR [rax+24], r15
; File W:\cpp\void\ktt-c\ccread.c
; Line 1151
	jmp	$LN36@ccread_sta
$LN21@ccread_sta:
; Line 62
	mov	rcx, QWORD PTR [rbx+128]
	mov	rax, r14
	mov	rdx, QWORD PTR [rbx+120]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 74			; 0000004aH
; Line 1152
	je	$LN36@ccread_sta
; Line 62
	cmp	rcx, rdx
	mov	rax, r14
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 72			; 00000048H
; Line 160
	jne	$LN27@ccread_sta
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN180@ccread_sta
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+136], rcx
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN174@ccread_sta
$LN180@ccread_sta:
; Line 153
	mov	rcx, r14
$LN174@ccread_sta:
; Line 1156
	test	rcx, rcx
	je	$LN27@ccread_sta
; Line 1162
	mov	edx, 3
	mov	QWORD PTR [rsp+64], r12
	mov	rcx, rbx
	mov	r14, r15
	call	cceat
; Line 1163
	mov	r8d, esi
	mov	rdx, rbp
	call	ccread_expression
; Line 1164
	mov	edx, 4
	mov	rcx, rbx
	mov	r12, rax
	call	cceat
; Line 1168
	mov	rcx, QWORD PTR [rbx+136]
	test	BYTE PTR [rcx+48], 2
	jne	SHORT $LN33@ccread_sta
; Line 1169
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rbx
	call	ccread_block_or_single_stmt
	mov	r15, rax
$LN33@ccread_sta:
; Line 1172
	mov	edx, 74					; 0000004aH
	mov	rcx, rbx
	call	cceat
	test	rax, rax
	je	SHORT $LN35@ccread_sta
	mov	rax, QWORD PTR [rbx+136]
	test	BYTE PTR [rax+48], 2
	jne	SHORT $LN35@ccread_sta
; Line 1173
	mov	r8d, esi
	mov	rdx, rbp
	call	ccread_block_or_single_stmt
	mov	r14, rax
$LN35@ccread_sta:
; File W:\cpp\void\ktt-c\cctree.h
; Line 281
	mov	r8d, esi
	mov	rdx, rbp
	mov	ecx, 17
	call	cctree_new
; Line 282
	mov	QWORD PTR [rax+64], r12
; Line 284
	mov	r12, QWORD PTR [rsp+64]
	mov	QWORD PTR [rax+72], r15
	mov	QWORD PTR [rax+80], r14
; File W:\cpp\void\ktt-c\ccread.c
; Line 1179
	jmp	SHORT $LN215@ccread_sta
$LN27@ccread_sta:
; Line 1181
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rbx
	call	ccread_expression
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN36@ccread_sta
; Line 1184
	mov	rax, QWORD PTR [rbx+136]
	test	BYTE PTR [rax+48], 2
	jne	SHORT $LN36@ccread_sta
; Line 1186
	cmp	DWORD PTR [rdi], 6
	jne	SHORT $LN36@ccread_sta
; Line 1188
	mov	edx, 10
	mov	rcx, rbx
	call	cceat
	test	rax, rax
	je	SHORT $LN36@ccread_sta
; Line 1192
	mov	rax, QWORD PTR [rbx+136]
	test	BYTE PTR [rax+48], 2
	jne	SHORT $LN42@ccread_sta
; Line 1193
	mov	r8d, esi
	mov	rdx, rbp
	call	ccread_statement_list
	mov	r15, rax
$LN42@ccread_sta:
; File W:\cpp\void\ktt-c\cctree.h
; Line 217
	mov	r8d, esi
	mov	rdx, rbp
	mov	ecx, 11
	call	cctree_new
; Line 218
	mov	rcx, QWORD PTR [rdi+24]
	mov	QWORD PTR [rax+24], rcx
; Line 219
	mov	QWORD PTR [rax+32], r15
$LN215@ccread_sta:
; File W:\cpp\void\ktt-c\ccread.c
; Line 1205
	mov	rdi, rax
$LN36@ccread_sta:
	mov	rax, rdi
$LN1@ccread_sta:
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
ccread_statement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_statement_list
_TEXT	SEGMENT
reader$ = 80
root$ = 88
mark$ = 96
ccread_statement_list PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1209
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	xor	esi, esi
	mov	r12d, r8d
	mov	edi, esi
	mov	r13, rdx
	mov	r15, rcx
; Line 1210
	call	ccread_statement
	mov	r14, rax
	test	rax, rax
	je	$LN30@ccread_sta
	mov	QWORD PTR [rsp+80], rbx
	mov	QWORD PTR [rsp+88], rbp
	npad	6
$LL2@ccread_sta:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-24]
; Line 241
	mov	edi, esi
; Line 284
	cmove	rbx, rsi
; Line 246
	test	rbx, rbx
	je	SHORT $LN11@ccread_sta
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	esi, DWORD PTR [rbx+20]
$LN11@ccread_sta:
; Line 256
	lea	ebp, DWORD PTR [rsi+8]
	mov	rax, rbx
	cmp	edi, ebp
	jae	SHORT $LN14@ccread_sta
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, ebp
	cmp	ecx, ebp
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN14@ccread_sta
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN14@ccread_sta:
; Line 273
	mov	DWORD PTR [rax+16], edi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	lea	rdx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 274
	mov	DWORD PTR [rax+20], ebp
; Line 285
	lea	rdi, QWORD PTR [rax+24]
; Line 286
	mov	eax, esi
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 1211
	mov	QWORD PTR [rdi+rax*8], r14
; Line 62
	mov	rcx, QWORD PTR [r15+128]
	cmp	rcx, QWORD PTR [r15+120]
	cmovb	rdx, rcx
; Line 77
	cmp	DWORD PTR [rdx], 0
; Line 1212
	je	SHORT $LN29@ccread_sta
; Line 1210
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, r15
	call	ccread_statement
	mov	r14, rax
	mov	esi, 0
	test	rax, rax
	jne	$LL2@ccread_sta
$LN29@ccread_sta:
	mov	rbx, QWORD PTR [rsp+80]
; Line 1214
	mov	rax, rdi
	mov	rbp, QWORD PTR [rsp+88]
; Line 1215
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
$LN30@ccread_sta:
; Line 1214
	mov	rax, rsi
; Line 1215
	mov	rsi, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
ccread_statement_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_block
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_block PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1219
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	sub	rsp, 32					; 00000020H
; Line 62
	mov	r9, QWORD PTR [rcx+128]
	lea	rsi, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 1219
	mov	rbx, rcx
; Line 62
	mov	rax, rsi
	mov	rcx, QWORD PTR [rcx+120]
; Line 1219
	mov	ebp, r8d
; Line 62
	cmp	r9, rcx
	cmovb	rax, r9
; Line 77
	cmp	DWORD PTR [rax], 5
; Line 160
	jne	$LN45@ccread_blo
; Line 152
	cmp	r9, rcx
	jae	SHORT $LN21@ccread_blo
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [rbx+136], r9
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN15@ccread_blo
$LN21@ccread_blo:
; Line 153
	mov	r9, rsi
$LN15@ccread_blo:
; Line 1220
	test	r9, r9
	je	SHORT $LN45@ccread_blo
; File W:\cpp\void\ktt-c\cctree.h
; Line 201
	mov	ecx, 10
	mov	QWORD PTR [rsp+48], rdi
	call	cctree_new
; File W:\cpp\void\ktt-c\ccread.c
; Line 1222
	mov	r8d, ebp
	mov	rdx, rax
	mov	rcx, rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 201
	mov	rdi, rax
; Line 202
	mov	QWORD PTR [rax+32], 0
; File W:\cpp\void\ktt-c\ccread.c
; Line 1222
	call	ccread_statement_list
	mov	QWORD PTR [rdi+32], rax
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	mov	rcx, QWORD PTR [rbx+120]
	cmp	rax, rcx
	cmovb	rsi, rax
; Line 77
	cmp	DWORD PTR [rsi], 6
; Line 160
	jne	SHORT $LN44@ccread_blo
; Line 152
	cmp	rax, rcx
	jae	SHORT $LN44@ccread_blo
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN44@ccread_blo:
; Line 1226
	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+48]
; Line 1227
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN45@ccread_blo:
	mov	rbx, QWORD PTR [rsp+56]
	xor	eax, eax
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
ccread_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_param_decl_list
_TEXT	SEGMENT
reader$ = 80
root$ = 88
mark$ = 96
ccread_param_decl_list PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1067
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r15
	sub	rsp, 32					; 00000020H
	mov	QWORD PTR [rsp+80], rbx
	xor	ebp, ebp
	mov	QWORD PTR [rsp+88], r13
	mov	edi, ebp
	mov	QWORD PTR [rsp+96], r14
	mov	r15d, r8d
	mov	r12, rdx
	mov	rsi, rcx
	npad	8
$LL2@ccread_par:
; Line 1059
	mov	r8d, r15d
	mov	rdx, r12
	mov	rcx, rsi
	call	ccread_declaration_specifiers
; Line 1060
	test	rax, rax
	je	$LN243@ccread_par
; Line 776
	mov	r9, rax
	mov	r8d, r15d
	mov	rdx, r12
	mov	rcx, rsi
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, r15d
	mov	rdx, r12
	mov	rcx, rsi
	call	ccread_direct_decl_name
	mov	r13, rax
; Line 1068
	test	rax, rax
	je	$LN243@ccread_par
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-24]
; Line 241
	mov	edi, ebp
; Line 284
	cmove	rbx, rbp
; Line 246
	test	rbx, rbx
	je	SHORT $LN213@ccread_par
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	ebp, DWORD PTR [rbx+20]
$LN213@ccread_par:
; Line 256
	lea	r14d, DWORD PTR [rbp+8]
	mov	rax, rbx
	cmp	edi, r14d
	jae	SHORT $LN216@ccread_par
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, r14d
	cmp	ecx, r14d
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN216@ccread_par
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN216@ccread_par:
; Line 273
	mov	DWORD PTR [rax+16], edi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	lea	rcx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 274
	mov	DWORD PTR [rax+20], r14d
; Line 285
	lea	rdi, QWORD PTR [rax+24]
; Line 286
	mov	eax, ebp
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 1069
	mov	QWORD PTR [rdi+rax*8], r13
; Line 62
	mov	rdx, QWORD PTR [rsi+128]
	mov	rax, QWORD PTR [rsi+120]
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 77
	cmp	DWORD PTR [rcx], 9
; Line 160
	jne	SHORT $LN243@ccread_par
; Line 152
	mov	ebp, 0
	cmp	rdx, rax
	jae	$LL2@ccread_par
	mov	QWORD PTR [rsi+136], rdx
	lea	rcx, QWORD PTR [rdx+56]
	mov	QWORD PTR [rsi+128], rcx
; Line 1070
	test	rdx, rdx
	jne	$LL2@ccread_par
$LN243@ccread_par:
	mov	r14, QWORD PTR [rsp+96]
; Line 1073
	mov	rax, rdi
	mov	r13, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_param_decl_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_param_decl
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_param_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1052
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rsi, rcx
; Line 1059
	call	ccread_declaration_specifiers
; Line 1060
	test	rax, rax
	je	SHORT $LN455@ccread_par
	mov	r9, rax
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rsi
; Line 1063
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 1060
	jmp	ccread_decl_name
$LN455@ccread_par:
; Line 1063
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_param_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_alignment_specifier
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_alignment_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+128]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r8, QWORD PTR [rcx+120]
	cmp	rdx, r8
	cmovb	rax, rdx
; Line 90
	mov	eax, DWORD PTR [rax]
	sub	eax, 31
	cmp	eax, 1
	ja	SHORT $LN2@ccread_ali
; Line 152
	cmp	rdx, r8
	jae	SHORT $LN13@ccread_ali
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [rcx+136], rdx
	mov	QWORD PTR [rcx+128], rax
$LN13@ccread_ali:
; Line 985
	mov	eax, 1
; Line 988
	ret	0
$LN2@ccread_ali:
; Line 987
	xor	eax, eax
; Line 988
	ret	0
ccread_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_function_specifier
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_function_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+128]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r8, QWORD PTR [rcx+120]
	cmp	rdx, r8
	cmovb	rax, rdx
; Line 142
	mov	eax, DWORD PTR [rax]
	sub	eax, 40					; 00000028H
	cmp	eax, 1
	ja	SHORT $LN2@ccread_fun
; Line 152
	cmp	rdx, r8
	jae	SHORT $LN13@ccread_fun
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [rcx+136], rdx
	mov	QWORD PTR [rcx+128], rax
$LN13@ccread_fun:
; Line 971
	mov	eax, 1
; Line 974
	ret	0
$LN2@ccread_fun:
; Line 973
	xor	eax, eax
; Line 974
	ret	0
ccread_function_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_type_qualifier
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_type_qualifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+128]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r8, QWORD PTR [rcx+120]
	cmp	rdx, r8
	cmovb	rax, rdx
; Line 103
	mov	eax, DWORD PTR [rax]
	sub	eax, 35					; 00000023H
	cmp	eax, 2
	ja	SHORT $LN2@ccread_typ
; Line 152
	cmp	rdx, r8
	jae	SHORT $LN13@ccread_typ
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [rcx+136], rdx
	mov	QWORD PTR [rcx+128], rax
$LN13@ccread_typ:
; Line 957
	mov	eax, 1
; Line 960
	ret	0
$LN2@ccread_typ:
; Line 959
	xor	eax, eax
; Line 960
	ret	0
ccread_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_storage_class_specifier
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_storage_class_specifier PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+128]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r8, QWORD PTR [rcx+120]
	cmp	rdx, r8
	cmovb	rax, rdx
; Line 129
	mov	eax, DWORD PTR [rax]
	sub	eax, 63					; 0000003fH
	cmp	eax, 7
	ja	SHORT $LN2@ccread_sto
; Line 152
	cmp	rdx, r8
	jae	SHORT $LN13@ccread_sto
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [rcx+136], rdx
	mov	QWORD PTR [rcx+128], rax
$LN13@ccread_sto:
; Line 941
	mov	eax, 1
; Line 944
	ret	0
$LN2@ccread_sto:
; Line 943
	xor	eax, eax
; Line 944
	ret	0
ccread_storage_class_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_type_specifier
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_type_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 903
	sub	rsp, 40					; 00000028H
; Line 62
	mov	r9, QWORD PTR [rcx+128]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r11, QWORD PTR [rcx+120]
; Line 903
	mov	r10, rcx
; Line 62
	cmp	r9, r11
	cmovb	rax, r9
; Line 116
	mov	ecx, DWORD PTR [rax]
	lea	eax, DWORD PTR [rcx-44]
	cmp	eax, 19
	ja	$LN2@ccread_typ
; Line 905
	lea	eax, DWORD PTR [rcx-46]
	cmp	eax, 15
	ja	$LN2@ccread_typ
	mov	QWORD PTR [rsp+32], rbx
	lea	rbx, OFFSET FLAT:__ImageBase
	cdqe
	mov	ecx, DWORD PTR $LN115@ccread_typ[rbx+rax*4]
	add	rcx, rbx
	mov	rbx, QWORD PTR [rsp+32]
	jmp	rcx
$LN5@ccread_typ:
; Line 907
	mov	rcx, r10
; Line 922
	add	rsp, 40					; 00000028H
; Line 907
	jmp	ccread_struct_or_union_specifier
$LN10@ccread_typ:
; Line 152
	cmp	r9, r11
	jae	SHORT $LN52@ccread_typ
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [r10+136], r9
	mov	QWORD PTR [r10+128], rax
$LN52@ccread_typ:
; Line 911
	mov	rax, QWORD PTR ctype_int64
; Line 922
	add	rsp, 40					; 00000028H
	ret	0
$LN12@ccread_typ:
; Line 152
	cmp	r9, r11
	jae	SHORT $LN68@ccread_typ
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [r10+136], r9
	mov	QWORD PTR [r10+128], rax
$LN68@ccread_typ:
; Line 913
	mov	rax, QWORD PTR ctype_void
; Line 922
	add	rsp, 40					; 00000028H
	ret	0
$LN13@ccread_typ:
; Line 914
	cmp	r9, r11
	jae	SHORT $LN76@ccread_typ
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [r10+136], r9
	mov	QWORD PTR [r10+128], rax
$LN76@ccread_typ:
	mov	rax, QWORD PTR ctype_int8
; Line 922
	add	rsp, 40					; 00000028H
	ret	0
$LN14@ccread_typ:
; Line 915
	cmp	r9, r11
	jae	SHORT $LN84@ccread_typ
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [r10+136], r9
	mov	QWORD PTR [r10+128], rax
$LN84@ccread_typ:
	mov	rax, QWORD PTR ctype_int16
; Line 922
	add	rsp, 40					; 00000028H
	ret	0
$LN15@ccread_typ:
; Line 916
	cmp	r9, r11
	jae	SHORT $LN92@ccread_typ
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [r10+136], r9
	mov	QWORD PTR [r10+128], rax
$LN92@ccread_typ:
	mov	rax, QWORD PTR ctype_int32
; Line 922
	add	rsp, 40					; 00000028H
	ret	0
$LN16@ccread_typ:
; Line 152
	cmp	r9, r11
	jae	SHORT $LN100@ccread_typ
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [r10+136], r9
	mov	QWORD PTR [r10+128], rax
$LN100@ccread_typ:
; Line 917
	mov	rax, QWORD PTR ctype_flo32
; Line 922
	add	rsp, 40					; 00000028H
	ret	0
$LN17@ccread_typ:
; Line 152
	cmp	r9, r11
	jae	SHORT $LN108@ccread_typ
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [r10+136], r9
	mov	QWORD PTR [r10+128], rax
$LN108@ccread_typ:
; Line 918
	mov	rax, QWORD PTR ctype_flo64
; Line 922
	add	rsp, 40					; 00000028H
	ret	0
$LN2@ccread_typ:
; Line 921
	xor	eax, eax
; Line 922
	add	rsp, 40					; 00000028H
	ret	0
	npad	3
$LN115@ccread_typ:
	DD	$LN13@ccread_typ
	DD	$LN14@ccread_typ
	DD	$LN15@ccread_typ
	DD	$LN10@ccread_typ
	DD	$LN17@ccread_typ
	DD	$LN16@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN15@ccread_typ
	DD	$LN14@ccread_typ
	DD	$LN13@ccread_typ
	DD	$LN12@ccread_typ
	DD	$LN13@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN5@ccread_typ
	DD	$LN5@ccread_typ
ccread_type_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_struct_or_union_specifier
_TEXT	SEGMENT
tree$1$ = 96
reader$ = 96
root$ = 104
mark$ = 112
name$1$ = 120
ccread_struct_or_union_specifier PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 856
	mov	QWORD PTR [rsp+16], rdx
	push	rbx
	push	r12
	push	r13
	push	r15
	sub	rsp, 56					; 00000038H
	mov	rbx, rcx
; Line 62
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [rcx+128]
; Line 856
	mov	r15, rdx
; Line 62
	mov	rax, r12
; Line 856
	mov	r13d, r8d
; Line 62
	mov	rdx, QWORD PTR [rbx+120]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 61			; 0000003dH
; Line 160
	jne	$LN69@ccread_str
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN84@ccread_str
	mov	QWORD PTR [rbx+136], rcx
	mov	rax, rcx
	add	rcx, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rcx
	jmp	SHORT $LN78@ccread_str
$LN84@ccread_str:
; Line 153
	mov	rax, r12
$LN78@ccread_str:
; Line 856
	test	rax, rax
	je	$LN69@ccread_str
; Line 859
	mov	QWORD PTR [rsp+112], rbp
	mov	rdx, r15
	mov	QWORD PTR [rsp+48], rsi
	mov	rcx, rbx
	mov	QWORD PTR [rsp+40], rdi
	mov	QWORD PTR [rsp+32], r14
	call	ccread_identifier
; Line 62
	mov	rdx, QWORD PTR [rbx+120]
	mov	rcx, r12
; Line 859
	mov	QWORD PTR name$1$[rsp], rax
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	cmp	rax, rdx
	cmovb	rcx, rax
; Line 77
	cmp	DWORD PTR [rcx], 5
; Line 160
	jne	SHORT $LN97@ccread_str
; Line 152
	cmp	rax, rdx
	jae	SHORT $LN97@ccread_str
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN97@ccread_str:
; Line 863
	xor	esi, esi
	mov	r14d, esi
$LL2@ccread_str:
; Line 846
	mov	r8d, r13d
	mov	rdx, r15
	mov	rcx, rbx
	call	ccread_specifier_qualifier_list
	mov	rdi, rax
	test	rax, rax
	je	$LN13@ccread_str
; Line 847
	mov	r9, rax
	mov	r8d, r13d
	mov	rdx, r15
	mov	rcx, rbx
	call	ccread_struct_decl_name_list
	mov	rbp, rax
	test	rax, rax
	je	$LN13@ccread_str
; File W:\cpp\void\ktt-c\cctree.h
; Line 249
	mov	r8d, r13d
	mov	rdx, r15
	mov	ecx, 16
	call	cctree_new
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	r14, r14
; File W:\cpp\void\ktt-c\cctree.h
; Line 249
	mov	QWORD PTR tree$1$[rsp], rax
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	lea	r12, QWORD PTR [r14-24]
; Line 242
	mov	r15d, esi
; Line 284
	cmove	r12, rsi
; File W:\cpp\void\ktt-c\cctree.h
; Line 250
	mov	QWORD PTR [rax+48], rdi
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 241
	mov	edi, esi
; File W:\cpp\void\ktt-c\cctree.h
; Line 251
	mov	QWORD PTR [rax+32], rbp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 236
	mov	rax, r12
; Line 246
	test	r12, r12
	je	SHORT $LN63@ccread_str
; Line 247
	mov	edi, DWORD PTR [r12+16]
; Line 248
	mov	r15d, DWORD PTR [r12+20]
$LN63@ccread_str:
; Line 256
	lea	ebp, DWORD PTR [r15+8]
	cmp	edi, ebp
	jae	SHORT $LN66@ccread_str
; Line 260
	lea	edx, DWORD PTR [rdi+rdi]
; Line 265
	mov	ecx, ebp
	cmp	edx, ebp
	cmovae	ecx, edx
	mov	edi, ecx
	lea	rdx, QWORD PTR [rcx+24]
	mov	rcx, rax
	call	realloc
; Line 267
	test	r12, r12
	jne	SHORT $LN66@ccread_str
; Line 269
	mov	QWORD PTR [rax], rsi
	mov	QWORD PTR [rax+8], rsi
$LN66@ccread_str:
; File W:\cpp\void\ktt-c\ccread.c
; Line 865
	mov	rcx, QWORD PTR tree$1$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 285
	lea	r14, QWORD PTR [rax+24]
; Line 273
	mov	DWORD PTR [rax+16], edi
; Line 274
	mov	DWORD PTR [rax+20], ebp
; Line 286
	mov	eax, r15d
; File W:\cpp\void\ktt-c\ccread.c
; Line 867
	mov	r15, QWORD PTR root$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 286
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 865
	mov	QWORD PTR [r14+rax*8], rcx
; Line 867
	jmp	$LL2@ccread_str
$LN13@ccread_str:
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [rbx+120]
	mov	rdi, QWORD PTR [rsp+40]
	cmp	rax, rcx
	cmovb	r12, rax
; Line 77
	cmp	DWORD PTR [r12], 6
; Line 160
	jne	SHORT $LN115@ccread_str
; Line 152
	cmp	rax, rcx
	jae	SHORT $LN115@ccread_str
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN115@ccread_str:
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
; Line 127
	xor	edx, edx
	mov	r8d, 176				; 000000b0H
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; Line 144
	mov	rbp, QWORD PTR name$1$[rsp]
; Line 173
	mov	QWORD PTR [rbx+32], r14
; Line 144
	mov	r14, QWORD PTR [rsp+32]
; Line 128
	mov	DWORD PTR [rbx], 1
; Line 144
	test	rbp, rbp
	je	SHORT $LN128@ccread_str
	mov	rsi, QWORD PTR [rbp+24]
$LN128@ccread_str:
; File W:\cpp\void\ktt-c\ccread.c
; Line 871
	mov	rbp, QWORD PTR [rsp+112]
	mov	rax, rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 174
	mov	QWORD PTR [rbx+24], rsi
; File W:\cpp\void\ktt-c\ccread.c
; Line 871
	mov	rsi, QWORD PTR [rsp+48]
; Line 878
	add	rsp, 56					; 00000038H
	pop	r15
	pop	r13
	pop	r12
	pop	rbx
	ret	0
$LN69@ccread_str:
; Line 62
	cmp	rcx, rdx
	cmovb	r12, rcx
; Line 77
	cmp	DWORD PTR [r12], 60			; 0000003cH
; Line 160
	jne	SHORT $LN141@ccread_str
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN141@ccread_str
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+136], rcx
	mov	QWORD PTR [rbx+128], rax
$LN141@ccread_str:
; Line 877
	xor	eax, eax
; Line 878
	add	rsp, 56					; 00000038H
	pop	r15
	pop	r13
	pop	r12
	pop	rbx
	ret	0
ccread_struct_or_union_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_struct_decl
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_struct_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 845
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rbp, rcx
; Line 846
	call	ccread_specifier_qualifier_list
	mov	rsi, rax
	test	rax, rax
	je	SHORT $LN3@ccread_str
; Line 847
	mov	r9, rax
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rbp
	call	ccread_struct_decl_name_list
	mov	rbp, rax
	test	rax, rax
	je	SHORT $LN3@ccread_str
; File W:\cpp\void\ktt-c\cctree.h
; Line 249
	mov	r8d, ebx
	mov	rdx, rdi
	mov	ecx, 16
	call	cctree_new
; Line 250
	mov	QWORD PTR [rax+48], rsi
; Line 251
	mov	QWORD PTR [rax+32], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 848
	jmp	SHORT $LN1@ccread_str
$LN3@ccread_str:
; Line 851
	xor	eax, eax
$LN1@ccread_str:
; Line 852
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_struct_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_init_decl
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_init_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 833
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rbp, rcx
; Line 834
	call	ccread_declaration_specifiers
	mov	rsi, rax
	test	rax, rax
	je	SHORT $LN3@ccread_ini
; Line 836
	mov	r9, rax
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rbp
	call	ccread_init_decl_name_list
	mov	rbp, rax
	test	rax, rax
	je	SHORT $LN3@ccread_ini
; File W:\cpp\void\ktt-c\cctree.h
; Line 249
	mov	r8d, ebx
	mov	rdx, rdi
	mov	ecx, 16
	call	cctree_new
; Line 250
	mov	QWORD PTR [rax+48], rsi
; Line 251
	mov	QWORD PTR [rax+32], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 837
	jmp	SHORT $LN1@ccread_ini
$LN3@ccread_ini:
; Line 840
	xor	eax, eax
$LN1@ccread_ini:
; Line 841
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_init_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_struct_decl_name_list
_TEXT	SEGMENT
tv484 = 32
tv483 = 40
reader$ = 112
root$ = 120
mark$ = 128
type$ = 136
ccread_struct_decl_name_list PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 823
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	rsi, rcx
	mov	rax, r9
	xor	ecx, ecx
	mov	r12d, r8d
	mov	rbp, rdx
	mov	edi, ecx
	lea	rbx, QWORD PTR [rsi+128]
	lea	r14, QWORD PTR [rsi+120]
	npad	7
$LL4@ccread_str:
; Line 776
	mov	r9, rax
	mov	QWORD PTR tv484[rsp], r14
	mov	r8d, r12d
	mov	rdx, rbp
	mov	rcx, rsi
	mov	r15, rbx
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, rbp
	mov	rcx, rsi
	call	ccread_direct_decl_name
	mov	r13, rax
; Line 800
	test	rax, rax
	je	$LN92@ccread_str
; Line 62
	mov	rax, QWORD PTR [rbx]
	lea	r8, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rdx, QWORD PTR [r14]
	mov	rcx, r8
	cmp	rax, rdx
	cmovb	rcx, rax
; Line 77
	cmp	DWORD PTR [rcx], 10
; Line 160
	jne	SHORT $LN90@ccread_str
; Line 152
	cmp	rax, rdx
	jae	SHORT $LN54@ccread_str
	lea	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rsi+136], rax
	mov	QWORD PTR [rbx], rcx
	jmp	SHORT $LN48@ccread_str
$LN54@ccread_str:
; Line 153
	mov	rax, r8
$LN48@ccread_str:
; Line 801
	test	rax, rax
	je	SHORT $LN90@ccread_str
; Line 585
	mov	r8d, r12d
	mov	rdx, rbp
	mov	rcx, rsi
	call	ccread_conditional_expr
; Line 802
	mov	QWORD PTR [r13+56], rax
$LN90@ccread_str:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-24]
	mov	r8d, 0
	cmove	rbx, r8
; Line 241
	mov	edi, r8d
; Line 242
	mov	ebp, r8d
; Line 246
	test	rbx, rbx
	je	SHORT $LN81@ccread_str
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	ebp, DWORD PTR [rbx+20]
$LN81@ccread_str:
; Line 256
	lea	r14d, DWORD PTR [rbp+8]
	mov	rax, rbx
	cmp	edi, r14d
	jae	SHORT $LN84@ccread_str
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, r14d
	cmp	ecx, r14d
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN84@ccread_str
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN84@ccread_str:
; Line 273
	mov	DWORD PTR [rax+16], edi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rbx, r15
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 274
	mov	DWORD PTR [rax+20], r14d
; Line 285
	lea	rdi, QWORD PTR [rax+24]
; Line 286
	mov	eax, ebp
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 826
	mov	QWORD PTR [rdi+rax*8], r13
; Line 62
	mov	rax, QWORD PTR tv484[rsp]
	mov	rcx, QWORD PTR [r15]
	mov	r14, rax
	mov	rdx, QWORD PTR [rax]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 9
; Line 160
	jne	SHORT $LN92@ccread_str
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN89@ccread_str
	mov	QWORD PTR [rsi+136], rcx
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [r15], rax
; Line 827
	test	rcx, rcx
	je	SHORT $LN92@ccread_str
$LN89@ccread_str:
	mov	rbp, QWORD PTR root$[rsp]
	mov	rax, QWORD PTR type$[rsp]
	jmp	$LL4@ccread_str
$LN92@ccread_str:
; Line 829
	mov	rbx, QWORD PTR [rsp+112]
	mov	rax, rdi
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_struct_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_init_decl_name_list
_TEXT	SEGMENT
tv449 = 32
tv448 = 40
reader$ = 112
root$ = 120
mark$ = 128
type$ = 136
ccread_init_decl_name_list PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 811
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+16], rdx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	mov	rsi, rcx
	mov	rax, r9
; Line 812
	xor	ecx, ecx
	mov	r12d, r8d
	mov	rbp, rdx
	mov	edi, ecx
	lea	rbx, QWORD PTR [rsi+128]
	lea	r14, QWORD PTR [rsi+120]
	npad	7
$LL4@ccread_ini:
; Line 776
	mov	r9, rax
	mov	QWORD PTR tv449[rsp], r14
	mov	r8d, r12d
	mov	rdx, rbp
	mov	rcx, rsi
	mov	r15, rbx
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, rbp
	mov	rcx, rsi
	call	ccread_direct_decl_name
	mov	r13, rax
; Line 787
	test	rax, rax
	je	$LN69@ccread_ini
; Line 62
	mov	rax, QWORD PTR [rbx]
	lea	r8, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rdx, QWORD PTR [r14]
	mov	rcx, r8
	cmp	rax, rdx
	cmovb	rcx, rax
; Line 77
	cmp	DWORD PTR [rcx], 109			; 0000006dH
; Line 160
	jne	SHORT $LN67@ccread_ini
; Line 152
	cmp	rax, rdx
	jae	SHORT $LN30@ccread_ini
	lea	rcx, QWORD PTR [rax+56]
	mov	QWORD PTR [rsi+136], rax
	mov	QWORD PTR [rbx], rcx
	jmp	SHORT $LN24@ccread_ini
$LN30@ccread_ini:
; Line 153
	mov	rax, r8
$LN24@ccread_ini:
; Line 788
	test	rax, rax
	je	SHORT $LN67@ccread_ini
; Line 714
	mov	r8d, r12d
	mov	rdx, rbp
	mov	rcx, rsi
	call	ccread_assignment_expr
; Line 789
	mov	QWORD PTR [r13+64], rax
$LN67@ccread_ini:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-24]
	mov	r8d, 0
	cmove	rbx, r8
; Line 241
	mov	edi, r8d
; Line 242
	mov	ebp, r8d
; Line 246
	test	rbx, rbx
	je	SHORT $LN39@ccread_ini
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	ebp, DWORD PTR [rbx+20]
$LN39@ccread_ini:
; Line 256
	lea	r14d, DWORD PTR [rbp+8]
	mov	rax, rbx
	cmp	edi, r14d
	jae	SHORT $LN42@ccread_ini
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, r14d
	cmp	ecx, r14d
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN42@ccread_ini
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN42@ccread_ini:
; Line 273
	mov	DWORD PTR [rax+16], edi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rbx, r15
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 274
	mov	DWORD PTR [rax+20], r14d
; Line 285
	lea	rdi, QWORD PTR [rax+24]
; Line 286
	mov	eax, ebp
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 816
	mov	QWORD PTR [rdi+rax*8], r13
; Line 62
	mov	rax, QWORD PTR tv449[rsp]
	mov	rcx, QWORD PTR [r15]
	mov	r14, rax
	mov	rdx, QWORD PTR [rax]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 9
; Line 160
	jne	SHORT $LN69@ccread_ini
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN66@ccread_ini
	mov	QWORD PTR [rsi+136], rcx
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [r15], rax
; Line 817
	test	rcx, rcx
	je	SHORT $LN69@ccread_ini
$LN66@ccread_ini:
	mov	rbp, QWORD PTR root$[rsp]
	mov	rax, QWORD PTR type$[rsp]
	jmp	$LL4@ccread_ini
$LN69@ccread_ini:
; Line 819
	mov	rbx, QWORD PTR [rsp+112]
	mov	rax, rdi
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_init_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_struct_decl_name
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_struct_decl_name PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 798
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	esi, r8d
	mov	rbp, rdx
	mov	rdi, rcx
; Line 776
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_direct_decl_name
	mov	rbx, rax
; Line 800
	test	rax, rax
	je	SHORT $LN4@ccread_str
; Line 62
	mov	rdx, QWORD PTR [rdi+128]
	lea	r8, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rax, QWORD PTR [rdi+120]
	mov	rcx, r8
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 77
	cmp	DWORD PTR [rcx], 10
; Line 160
	jne	SHORT $LN219@ccread_str
; Line 152
	cmp	rdx, rax
	jae	SHORT $LN213@ccread_str
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [rdi+136], rdx
	mov	QWORD PTR [rdi+128], rax
	jmp	SHORT $LN207@ccread_str
$LN213@ccread_str:
; Line 153
	mov	rdx, r8
$LN207@ccread_str:
; Line 801
	test	rdx, rdx
	je	SHORT $LN219@ccread_str
; Line 585
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_conditional_expr
; Line 802
	mov	QWORD PTR [rbx+56], rax
$LN219@ccread_str:
; Line 807
	mov	rax, rbx
$LN4@ccread_str:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_struct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_init_decl_name
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_init_decl_name PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 783
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	esi, r8d
	mov	rbp, rdx
	mov	rdi, rcx
; Line 776
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_direct_decl_name
	mov	rbx, rax
; Line 787
	test	rax, rax
	je	SHORT $LN4@ccread_ini
; Line 62
	mov	rdx, QWORD PTR [rdi+128]
	lea	r8, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rax, QWORD PTR [rdi+120]
	mov	rcx, r8
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 77
	cmp	DWORD PTR [rcx], 109			; 0000006dH
; Line 160
	jne	SHORT $LN30@ccread_ini
; Line 152
	cmp	rdx, rax
	jae	SHORT $LN24@ccread_ini
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [rdi+136], rdx
	mov	QWORD PTR [rdi+128], rax
	jmp	SHORT $LN18@ccread_ini
$LN24@ccread_ini:
; Line 153
	mov	rdx, r8
$LN18@ccread_ini:
; Line 788
	test	rdx, rdx
	je	SHORT $LN30@ccread_ini
; Line 714
	mov	r8d, esi
	mov	rdx, rbp
	mov	rcx, rdi
	call	ccread_assignment_expr
; Line 789
	mov	QWORD PTR [rbx+64], rax
$LN30@ccread_ini:
; Line 794
	mov	rax, rbx
$LN4@ccread_ini:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_init_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_decl_name_modifier_maybe
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_decl_name_modifier_maybe PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 767
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 62
	mov	r10, QWORD PTR [rcx+128]
	lea	rbx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r11, QWORD PTR [rcx+120]
	mov	rax, rbx
	cmp	r10, r11
	cmovb	rax, r10
; Line 77
	cmp	DWORD PTR [rax], 92			; 0000005cH
; Line 160
	jne	SHORT $LN2@ccread_dec
; Line 152
	cmp	r10, r11
	jae	SHORT $LN20@ccread_dec
	lea	rax, QWORD PTR [r10+56]
	mov	QWORD PTR [rcx+136], r10
	mov	QWORD PTR [rcx+128], rax
	jmp	SHORT $LN14@ccread_dec
$LN20@ccread_dec:
; Line 153
	mov	r10, rbx
$LN14@ccread_dec:
; Line 767
	test	r10, r10
	je	SHORT $LN2@ccread_dec
; Line 768
	mov	QWORD PTR [rsp+48], rdi
	call	ccread_decl_name_modifier_maybe
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	mov	ecx, 176				; 000000b0H
; File W:\cpp\void\ktt-c\ccread.c
; Line 768
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	call	malloc
; Line 127
	xor	edx, edx
	mov	r8d, 176				; 000000b0H
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; Line 150
	mov	QWORD PTR [rbx+48], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 768
	mov	rax, rbx
	mov	rdi, QWORD PTR [rsp+48]
; File W:\cpp\void\ktt-c\cctree.h
; Line 128
	mov	DWORD PTR [rbx], 5
; File W:\cpp\void\ktt-c\ccread.c
; Line 770
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@ccread_dec:
; Line 769
	mov	rax, r9
; Line 770
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccread_decl_name_modifier_maybe ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_direct_decl_name
_TEXT	SEGMENT
reader$ = 64
root$ = 72
mark$ = 80
type$ = 88
ccread_direct_decl_name PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 744
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 62
	mov	r10, QWORD PTR [rcx+128]
	lea	rsi, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 744
	mov	rbx, rcx
; Line 62
	mov	rax, rsi
	mov	rcx, QWORD PTR [rcx+120]
; Line 744
	mov	r15, r9
; Line 62
	cmp	r10, rcx
; Line 744
	mov	ebp, r8d
	mov	r14, rdx
; Line 62
	cmovb	rax, r10
; Line 77
	cmp	DWORD PTR [rax], 3
; Line 160
	jne	$LN9@ccread_dir
; Line 152
	cmp	r10, rcx
	jae	SHORT $LN24@ccread_dir
	mov	QWORD PTR [rbx+136], r10
	mov	rax, r10
	add	r10, 56					; 00000038H
	mov	QWORD PTR [rbx+128], r10
	jmp	SHORT $LN18@ccread_dir
$LN24@ccread_dir:
; Line 153
	mov	rax, rsi
$LN18@ccread_dir:
; Line 744
	test	rax, rax
	je	$LN9@ccread_dir
; File W:\cpp\void\ktt-c\cctree.h
; Line 136
	mov	r8d, DWORD PTR [r9+16]
	mov	rdx, QWORD PTR [r9+8]
	mov	ecx, DWORD PTR [r9]
	mov	QWORD PTR [rsp+64], r12
	call	cctree_new
; Line 137
	movups	xmm0, XMMWORD PTR [r15]
; File W:\cpp\void\ktt-c\ccread.c
; Line 776
	mov	r9, rax
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 137
	movups	XMMWORD PTR [rax], xmm0
	mov	rdi, rax
	movups	xmm1, XMMWORD PTR [r15+16]
	movups	XMMWORD PTR [rax+16], xmm1
	movups	xmm0, XMMWORD PTR [r15+32]
	movups	XMMWORD PTR [rax+32], xmm0
	movups	xmm1, XMMWORD PTR [r15+48]
	movups	XMMWORD PTR [rax+48], xmm1
	movups	xmm0, XMMWORD PTR [r15+64]
	movups	XMMWORD PTR [rax+64], xmm0
	movups	xmm1, XMMWORD PTR [r15+80]
	movups	XMMWORD PTR [rax+80], xmm1
	movups	xmm0, XMMWORD PTR [r15+96]
	movups	XMMWORD PTR [rax+96], xmm0
	movups	xmm0, XMMWORD PTR [r15+112]
	movups	XMMWORD PTR [rax+112], xmm0
	movups	xmm1, XMMWORD PTR [r15+128]
	movups	XMMWORD PTR [rax+128], xmm1
	movups	xmm0, XMMWORD PTR [r15+144]
	movups	XMMWORD PTR [rax+144], xmm0
	movups	xmm1, XMMWORD PTR [r15+160]
	movups	XMMWORD PTR [rax+160], xmm1
; File W:\cpp\void\ktt-c\ccread.c
; Line 776
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
	call	ccread_direct_decl_name
; Line 62
	mov	rcx, QWORD PTR [rbx+120]
; Line 776
	mov	r12, rax
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	cmp	rax, rcx
	cmovb	rsi, rax
; Line 77
	cmp	DWORD PTR [rsi], 4
; Line 160
	jne	SHORT $LN66@ccread_dir
; Line 152
	cmp	rax, rcx
	jae	SHORT $LN66@ccread_dir
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN66@ccread_dir:
; Line 750
	mov	r9, r15
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
	call	ccread_direct_decl_name_modifier
; File W:\cpp\void\ktt-c\cctree.h
; Line 121
	mov	rcx, rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 751
	movups	xmm0, XMMWORD PTR [rax]
	movups	XMMWORD PTR [rdi], xmm0
	movups	xmm1, XMMWORD PTR [rax+16]
	movups	XMMWORD PTR [rdi+16], xmm1
	movups	xmm0, XMMWORD PTR [rax+32]
	movups	XMMWORD PTR [rdi+32], xmm0
	movups	xmm1, XMMWORD PTR [rax+48]
	movups	XMMWORD PTR [rdi+48], xmm1
	movups	xmm0, XMMWORD PTR [rax+64]
	movups	XMMWORD PTR [rdi+64], xmm0
	movups	xmm1, XMMWORD PTR [rax+80]
	movups	XMMWORD PTR [rdi+80], xmm1
	movups	xmm0, XMMWORD PTR [rax+96]
	movups	XMMWORD PTR [rdi+96], xmm0
	movups	xmm1, XMMWORD PTR [rax+112]
	movups	XMMWORD PTR [rdi+112], xmm1
	movups	xmm0, XMMWORD PTR [rax+128]
	movups	XMMWORD PTR [rdi+128], xmm0
	movups	xmm1, XMMWORD PTR [rax+144]
	movups	XMMWORD PTR [rdi+144], xmm1
	movups	xmm0, XMMWORD PTR [rax+160]
	movups	XMMWORD PTR [rdi+160], xmm0
; File W:\cpp\void\ktt-c\cctree.h
; Line 121
	call	free
; File W:\cpp\void\ktt-c\ccread.c
; Line 753
	mov	rax, r12
	mov	r12, QWORD PTR [rsp+64]
	jmp	$LN6@ccread_dir
$LN9@ccread_dir:
; Line 62
	cmp	r10, rcx
; Line 755
	mov	rcx, rbx
; Line 62
	cmovb	rsi, r10
; Line 77
	cmp	DWORD PTR [rsi], 18
; Line 755
	jne	SHORT $LN5@ccread_dir
; Line 756
	call	ccread_identifier
; Line 757
	mov	r9, r15
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
	mov	rdi, rax
	call	ccread_direct_decl_name_modifier
; File W:\cpp\void\ktt-c\cctree.h
; Line 239
	mov	r8d, ebp
	mov	rdx, r14
	mov	ecx, 15
; File W:\cpp\void\ktt-c\ccread.c
; Line 757
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 239
	call	cctree_new
; Line 144
	xor	ecx, ecx
; Line 240
	mov	QWORD PTR [rax+48], rbx
; Line 144
	test	rdi, rdi
	je	SHORT $LN86@ccread_dir
	mov	rdx, QWORD PTR [rdi+24]
; Line 241
	mov	QWORD PTR [rax+24], rdx
; File W:\cpp\void\ktt-c\ccread.c
; Line 758
	jmp	SHORT $LN94@ccread_dir
$LN86@ccread_dir:
; File W:\cpp\void\ktt-c\cctree.h
; Line 144
	mov	rdx, rcx
; Line 241
	mov	QWORD PTR [rax+24], rcx
; File W:\cpp\void\ktt-c\ccread.c
; Line 758
	jmp	SHORT $LN94@ccread_dir
$LN5@ccread_dir:
; Line 760
	call	ccread_direct_decl_name_modifier
; File W:\cpp\void\ktt-c\cctree.h
; Line 239
	mov	r8d, ebp
	mov	rdx, r14
	mov	ecx, 15
; File W:\cpp\void\ktt-c\ccread.c
; Line 760
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 239
	call	cctree_new
; Line 241
	xor	ecx, ecx
	mov	QWORD PTR [rax+48], rbx
	mov	QWORD PTR [rax+24], rcx
$LN94@ccread_dir:
; File W:\cpp\void\ktt-c\ccread.c
; Line 763
	mov	QWORD PTR [rax+64], rcx
	mov	QWORD PTR [rax+56], rcx
$LN6@ccread_dir:
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
ccread_direct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_direct_decl_name_modifier
_TEXT	SEGMENT
decl$1$ = 112
reader$ = 112
root$ = 120
mark$ = 128
type$ = 136
ccread_direct_decl_name_modifier PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 719
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rdi
	push	r12
	push	r13
	push	r15
	sub	rsp, 64					; 00000040H
	mov	rbx, rcx
; Line 62
	lea	r15, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [rcx+128]
; Line 719
	mov	r13, rdx
; Line 62
	mov	rax, r15
; Line 719
	mov	rdi, r9
	mov	r12d, r8d
; Line 62
	mov	rdx, QWORD PTR [rbx+120]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 3
; Line 160
	jne	$LN11@ccread_dir
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN26@ccread_dir
	mov	QWORD PTR [rbx+136], rcx
	mov	rax, rcx
	add	rcx, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rcx
	jmp	SHORT $LN20@ccread_dir
$LN26@ccread_dir:
; Line 153
	mov	rax, r15
$LN20@ccread_dir:
; Line 719
	test	rax, rax
	je	$LN11@ccread_dir
; Line 1067
	mov	QWORD PTR [rsp+120], rbp
	xor	ebp, ebp
	mov	QWORD PTR [rsp+56], rsi
	mov	esi, ebp
	mov	QWORD PTR [rsp+48], r14
	npad	3
$LL31@ccread_dir:
; Line 1059
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_declaration_specifiers
; Line 1060
	test	rax, rax
	je	$LN82@ccread_dir
; Line 776
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_direct_decl_name
	mov	QWORD PTR decl$1$[rsp], rax
; Line 1068
	test	rax, rax
	je	$LN82@ccread_dir
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rsi, rsi
	lea	rdi, QWORD PTR [rsi-24]
; Line 241
	mov	esi, ebp
; Line 284
	cmove	rdi, rbp
; Line 246
	test	rdi, rdi
	je	SHORT $LN76@ccread_dir
; Line 247
	mov	esi, DWORD PTR [rdi+16]
; Line 248
	mov	ebp, DWORD PTR [rdi+20]
$LN76@ccread_dir:
; Line 256
	lea	r14d, DWORD PTR [rbp+8]
	mov	rax, rdi
	cmp	esi, r14d
	jae	SHORT $LN79@ccread_dir
; Line 260
	lea	ecx, DWORD PTR [rsi+rsi]
; Line 265
	mov	eax, r14d
	cmp	ecx, r14d
	cmovae	eax, ecx
	mov	rcx, rdi
	mov	esi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rdi, rdi
	jne	SHORT $LN79@ccread_dir
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN79@ccread_dir:
; File W:\cpp\void\ktt-c\ccread.c
; Line 1069
	mov	rcx, QWORD PTR decl$1$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 273
	mov	DWORD PTR [rax+16], esi
; Line 285
	lea	rsi, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], r14d
; Line 286
	mov	eax, ebp
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 1069
	mov	QWORD PTR [rsi+rax*8], rcx
; Line 62
	mov	rax, r15
	mov	rcx, QWORD PTR [rbx+128]
	mov	rdx, QWORD PTR [rbx+120]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 9
; Line 160
	jne	SHORT $LN82@ccread_dir
; Line 152
	mov	ebp, 0
	cmp	rcx, rdx
	jae	$LL31@ccread_dir
	mov	QWORD PTR [rbx+136], rcx
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+128], rax
; Line 1070
	test	rcx, rcx
	jne	$LL31@ccread_dir
$LN82@ccread_dir:
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	mov	rcx, QWORD PTR [rbx+120]
	mov	r14, QWORD PTR [rsp+48]
	cmp	rax, rcx
	mov	rbp, QWORD PTR [rsp+120]
	cmovb	r15, rax
; Line 77
	cmp	DWORD PTR [r15], 4
; Line 160
	jne	SHORT $LN110@ccread_dir
; Line 152
	cmp	rax, rcx
	jae	SHORT $LN110@ccread_dir
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN110@ccread_dir:
; Line 722
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_direct_decl_name_modifier
	mov	rdi, rax
; Line 723
	lea	rbx, OFFSET FLAT:??_C@_03HMEPACKF@war@
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN5@ccread_dir
	lea	rax, OFFSET FLAT:??_C@_0BP@IKEJFDCA@function?5that?5returns?5function@
	mov	r8d, 723				; 000002d3H
	mov	QWORD PTR [rsp+40], rax
	lea	r9, OFFSET FLAT:??_C@_0CB@OMCDEOEM@ccread_direct_decl_name_modifie@
	lea	rdx, OFFSET FLAT:??_C@_0BL@OBLHEIFP@W?3?2cpp?2void?2ktt?9c?2ccread?4c@
	mov	QWORD PTR [rsp+32], rbx
	xor	ecx, ecx
	call	cctrace_
$LN5@ccread_dir:
; Line 724
	cmp	DWORD PTR [rdi], 4
	jne	SHORT $LN6@ccread_dir
	lea	rax, OFFSET FLAT:??_C@_0BM@MNHMNFH@function?5that?5returns?5array@
	mov	r8d, 724				; 000002d4H
	mov	QWORD PTR [rsp+40], rax
	lea	r9, OFFSET FLAT:??_C@_0CB@OMCDEOEM@ccread_direct_decl_name_modifie@
	lea	rdx, OFFSET FLAT:??_C@_0BL@OBLHEIFP@W?3?2cpp?2void?2ktt?9c?2ccread?4c@
	mov	QWORD PTR [rsp+32], rbx
	mov	ecx, 1
	call	cctrace_
$LN6@ccread_dir:
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
; Line 127
	xor	edx, edx
	mov	r8d, 176				; 000000b0H
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; Line 165
	mov	QWORD PTR [rbx+32], rsi
; File W:\cpp\void\ktt-c\ccread.c
; Line 725
	mov	rax, rbx
	mov	rsi, QWORD PTR [rsp+56]
; File W:\cpp\void\ktt-c\cctree.h
; Line 128
	mov	DWORD PTR [rbx], 3
; Line 164
	mov	QWORD PTR [rbx+48], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 740
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rbx
	ret	0
$LN11@ccread_dir:
; Line 62
	cmp	rcx, rdx
	mov	rax, r15
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 7
; Line 160
	jne	$LN7@ccread_dir
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN137@ccread_dir
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+136], rcx
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN131@ccread_dir
$LN137@ccread_dir:
; Line 153
	mov	rcx, r15
$LN131@ccread_dir:
; Line 727
	test	rcx, rcx
	je	$LN7@ccread_dir
; Line 729
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_expression
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	mov	rcx, QWORD PTR [rbx+120]
	cmp	rax, rcx
	cmovb	r15, rax
; Line 77
	cmp	DWORD PTR [r15], 8
; Line 160
	jne	SHORT $LN150@ccread_dir
; Line 152
	cmp	rax, rcx
	jae	SHORT $LN150@ccread_dir
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN150@ccread_dir:
; Line 736
	mov	r9, rdi
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_direct_decl_name_modifier
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	mov	ecx, 176				; 000000b0H
; File W:\cpp\void\ktt-c\ccread.c
; Line 736
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	call	malloc
; Line 127
	xor	edx, edx
	mov	r8d, 176				; 000000b0H
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\ktt-c\ccread.c
; Line 737
	mov	rax, rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 128
	mov	DWORD PTR [rbx], 4
; Line 157
	mov	QWORD PTR [rbx+48], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 740
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rbx
	ret	0
$LN7@ccread_dir:
; Line 739
	mov	rax, rdi
; Line 740
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rbx
	ret	0
ccread_direct_decl_name_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_specifier_qualifier_list
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_specifier_qualifier_list PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 997
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 62
	mov	r9, QWORD PTR [rcx+128]
	lea	rdi, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r10, QWORD PTR [rcx+120]
	mov	rax, rdi
	cmp	r9, r10
; Line 997
	mov	rbx, rcx
; Line 62
	cmovb	rax, r9
; Line 116
	mov	ecx, DWORD PTR [rax]
	lea	eax, DWORD PTR [rcx-44]
	cmp	eax, 19
	ja	$LN4@ccread_spe
; Line 905
	lea	eax, DWORD PTR [rcx-46]
	cmp	eax, 15
	ja	$LN4@ccread_spe
	lea	r11, OFFSET FLAT:__ImageBase
	cdqe
	mov	ecx, DWORD PTR $LN155@ccread_spe[r11+rax*4]
	add	rcx, r11
	jmp	rcx
$LN7@ccread_spe:
; Line 907
	mov	rcx, rbx
	call	ccread_struct_or_union_specifier
	mov	rcx, rax
	jmp	$LN3@ccread_spe
$LN9@ccread_spe:
; Line 62
	cmp	r9, r10
	jae	SHORT $LN30@ccread_spe
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [rbx+136], r9
	mov	QWORD PTR [rbx+128], rax
$LN30@ccread_spe:
	mov	rcx, QWORD PTR ctype_int8
	jmp	$LN3@ccread_spe
$LN10@ccread_spe:
	cmp	r9, r10
	jae	SHORT $LN38@ccread_spe
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [rbx+136], r9
	mov	QWORD PTR [rbx+128], rax
$LN38@ccread_spe:
	mov	rcx, QWORD PTR ctype_int16
	jmp	$LN3@ccread_spe
$LN11@ccread_spe:
	cmp	r9, r10
	jae	SHORT $LN46@ccread_spe
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [rbx+136], r9
	mov	QWORD PTR [rbx+128], rax
$LN46@ccread_spe:
	mov	rcx, QWORD PTR ctype_int32
	jmp	$LN3@ccread_spe
$LN12@ccread_spe:
; Line 152
	cmp	r9, r10
	jae	SHORT $LN54@ccread_spe
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [rbx+136], r9
	mov	QWORD PTR [rbx+128], rax
$LN54@ccread_spe:
; Line 911
	mov	rcx, QWORD PTR ctype_int64
	jmp	SHORT $LN3@ccread_spe
$LN14@ccread_spe:
; Line 152
	cmp	r9, r10
	jae	SHORT $LN70@ccread_spe
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [rbx+136], r9
	mov	QWORD PTR [rbx+128], rax
$LN70@ccread_spe:
; Line 913
	mov	rcx, QWORD PTR ctype_void
	jmp	SHORT $LN3@ccread_spe
$LN18@ccread_spe:
; Line 152
	cmp	r9, r10
	jae	SHORT $LN102@ccread_spe
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [rbx+136], r9
	mov	QWORD PTR [rbx+128], rax
$LN102@ccread_spe:
; Line 917
	mov	rcx, QWORD PTR ctype_flo32
	jmp	SHORT $LN3@ccread_spe
$LN19@ccread_spe:
; Line 152
	cmp	r9, r10
	jae	SHORT $LN110@ccread_spe
	lea	rax, QWORD PTR [r9+56]
	mov	QWORD PTR [rbx+136], r9
	mov	QWORD PTR [rbx+128], rax
$LN110@ccread_spe:
; Line 918
	mov	rcx, QWORD PTR ctype_flo64
	jmp	SHORT $LN3@ccread_spe
$LN4@ccread_spe:
; Line 921
	xor	ecx, ecx
$LN3@ccread_spe:
; Line 62
	mov	r8, QWORD PTR [rbx+128]
	mov	r10, rdi
	mov	r9, QWORD PTR [rbx+120]
; Line 103
	mov	rdx, r8
; Line 62
	cmp	r8, r9
	cmovb	r10, r8
; Line 103
	mov	eax, DWORD PTR [r10]
	sub	eax, 35					; 00000023H
	cmp	eax, 2
	ja	SHORT $LN129@ccread_spe
; Line 954
	test	r10, r10
	je	SHORT $LN129@ccread_spe
; Line 152
	cmp	r8, r9
	jae	SHORT $LN129@ccread_spe
	lea	rdx, QWORD PTR [r8+56]
	mov	QWORD PTR [rbx+136], r8
	mov	QWORD PTR [rbx+128], rdx
$LN129@ccread_spe:
; Line 62
	cmp	rdx, r9
	cmovb	rdi, rdx
; Line 90
	mov	eax, DWORD PTR [rdi]
	sub	eax, 31
	cmp	eax, 1
	ja	SHORT $LN157@ccread_spe
; Line 152
	cmp	rdx, r9
	jae	SHORT $LN157@ccread_spe
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [rbx+136], rdx
	mov	QWORD PTR [rbx+128], rax
$LN157@ccread_spe:
; Line 1003
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
	npad	3
$LN155@ccread_spe:
	DD	$LN9@ccread_spe
	DD	$LN10@ccread_spe
	DD	$LN11@ccread_spe
	DD	$LN12@ccread_spe
	DD	$LN19@ccread_spe
	DD	$LN18@ccread_spe
	DD	$LN4@ccread_spe
	DD	$LN11@ccread_spe
	DD	$LN10@ccread_spe
	DD	$LN9@ccread_spe
	DD	$LN14@ccread_spe
	DD	$LN9@ccread_spe
	DD	$LN4@ccread_spe
	DD	$LN4@ccread_spe
	DD	$LN7@ccread_spe
	DD	$LN7@ccread_spe
ccread_specifier_qualifier_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_attribute_seq
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_attribute_seq PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1014
	xor	eax, eax
; Line 1015
	ret	0
ccread_attribute_seq ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_declaration_specifiers
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_declaration_specifiers PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1026
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 62
	lea	rdi, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [rcx+128]
	mov	rax, rdi
	mov	r9, QWORD PTR [rbx+120]
	cmp	rcx, r9
	cmovb	rax, rcx
; Line 129
	mov	eax, DWORD PTR [rax]
	sub	eax, 63					; 0000003fH
	cmp	eax, 7
	ja	SHORT $LN15@ccread_dec
; Line 152
	cmp	rcx, r9
	jae	SHORT $LN15@ccread_dec
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+136], rcx
	mov	QWORD PTR [rbx+128], rax
$LN15@ccread_dec:
; Line 1029
	mov	rcx, rbx
	call	ccread_specifier_qualifier_list
; Line 62
	mov	r8, QWORD PTR [rbx+120]
; Line 1029
	mov	rdx, rax
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	cmp	rax, r8
	cmovb	rdi, rax
; Line 142
	mov	ecx, DWORD PTR [rdi]
	sub	ecx, 40					; 00000028H
	cmp	ecx, 1
	ja	SHORT $LN42@ccread_dec
; Line 152
	cmp	rax, r8
	jae	SHORT $LN42@ccread_dec
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN42@ccread_dec:
; Line 1034
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, rdx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccread_declaration_specifiers ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_decl_name
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_decl_name PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 774
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, r8d
	mov	rdi, rdx
	mov	rsi, rcx
; Line 776
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, ebx
	mov	rdx, rdi
	mov	rcx, rsi
; Line 779
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
; Line 776
	jmp	ccread_direct_decl_name
ccread_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_initializer
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_initializer PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 714
	jmp	ccread_assignment_expr
ccread_initializer ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_param_type_list
_TEXT	SEGMENT
reader$ = 80
root$ = 88
mark$ = 96
ccread_param_type_list PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 1077
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r15
	sub	rsp, 32					; 00000020H
; Line 1067
	mov	QWORD PTR [rsp+80], rbx
	xor	ebp, ebp
	mov	QWORD PTR [rsp+88], r13
	mov	edi, ebp
	mov	QWORD PTR [rsp+96], r14
; Line 1077
	mov	r15d, r8d
	mov	r12, rdx
	mov	rsi, rcx
	npad	8
$LL4@ccread_par:
; Line 1059
	mov	r8d, r15d
	mov	rdx, r12
	mov	rcx, rsi
	call	ccread_declaration_specifiers
; Line 1060
	test	rax, rax
	je	$LN170@ccread_par
; Line 776
	mov	r9, rax
	mov	r8d, r15d
	mov	rdx, r12
	mov	rcx, rsi
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, r15d
	mov	rdx, r12
	mov	rcx, rsi
	call	ccread_direct_decl_name
	mov	r13, rax
; Line 1068
	test	rax, rax
	je	$LN170@ccread_par
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-24]
; Line 241
	mov	edi, ebp
; Line 284
	cmove	rbx, rbp
; Line 246
	test	rbx, rbx
	je	SHORT $LN140@ccread_par
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	ebp, DWORD PTR [rbx+20]
$LN140@ccread_par:
; Line 256
	lea	r14d, DWORD PTR [rbp+8]
	mov	rax, rbx
	cmp	edi, r14d
	jae	SHORT $LN143@ccread_par
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, r14d
	cmp	ecx, r14d
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN143@ccread_par
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN143@ccread_par:
; Line 273
	mov	DWORD PTR [rax+16], edi
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	lea	rcx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 274
	mov	DWORD PTR [rax+20], r14d
; Line 285
	lea	rdi, QWORD PTR [rax+24]
; Line 286
	mov	eax, ebp
	shr	rax, 3
; File W:\cpp\void\ktt-c\ccread.c
; Line 1069
	mov	QWORD PTR [rdi+rax*8], r13
; Line 62
	mov	rdx, QWORD PTR [rsi+128]
	mov	rax, QWORD PTR [rsi+120]
	cmp	rdx, rax
	cmovb	rcx, rdx
; Line 77
	cmp	DWORD PTR [rcx], 9
; Line 160
	jne	SHORT $LN170@ccread_par
; Line 152
	mov	ebp, 0
	cmp	rdx, rax
	jae	$LL4@ccread_par
	mov	QWORD PTR [rsi+136], rdx
	lea	rcx, QWORD PTR [rdx+56]
	mov	QWORD PTR [rsi+128], rcx
; Line 1070
	test	rdx, rdx
	jne	$LL4@ccread_par
$LN170@ccread_par:
	mov	r14, QWORD PTR [rsp+96]
; Line 1084
	mov	rax, rdi
	mov	r13, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_param_type_list ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_constant_expression
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_constant_expression PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 585
	jmp	ccread_conditional_expr
ccread_constant_expression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_assignment_expr
_TEXT	SEGMENT
parser$ = 48
root$ = 56
mark$ = 64
ccread_assignment_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 571
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	ebp, r8d
	mov	r14, rdx
	mov	rbx, rcx
	call	ccread_conditional_expr
; Line 62
	mov	rdi, QWORD PTR [rbx+128]
	lea	rcx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 571
	mov	rsi, rax
; Line 62
	mov	r9, rcx
	mov	rax, QWORD PTR [rbx+120]
	cmp	rdi, rax
	cmovb	r9, rdi
; Line 77
	cmp	DWORD PTR [r9], 109			; 0000006dH
; Line 160
	jne	SHORT $LN25@ccread_ass
; Line 152
	cmp	rdi, rax
	jae	SHORT $LN20@ccread_ass
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rbx+136], rdi
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN14@ccread_ass
$LN20@ccread_ass:
; Line 153
	mov	rdi, rcx
$LN14@ccread_ass:
; Line 572
	test	rdi, rdi
	je	SHORT $LN25@ccread_ass
; Line 573
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
	call	ccread_assignment_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, ebp
	mov	rdx, r14
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 573
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rdi]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rsi
; Line 275
	mov	QWORD PTR [rax+80], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 572
	jmp	SHORT $LN2@ccread_ass
$LN25@ccread_ass:
; Line 577
	mov	rax, rsi
$LN2@ccread_ass:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccread_assignment_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_conditional_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_conditional_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 542
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r14
	sub	rsp, 32					; 00000020H
	mov	edi, r8d
	mov	rsi, rdx
	mov	rbx, rcx
; Line 543
	call	ccread_logical_or_expr
; Line 62
	mov	rcx, QWORD PTR [rbx+128]
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 543
	mov	r14, rax
; Line 62
	mov	rdx, r12
	mov	rax, QWORD PTR [rbx+120]
	cmp	rcx, rax
	cmovb	rdx, rcx
; Line 77
	cmp	DWORD PTR [rdx], 108			; 0000006cH
; Line 160
	jne	$LN2@ccread_con
; Line 152
	cmp	rcx, rax
	jae	SHORT $LN22@ccread_con
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+136], rcx
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN16@ccread_con
$LN22@ccread_con:
; Line 153
	mov	rcx, r12
$LN16@ccread_con:
; Line 545
	test	rcx, rcx
	je	$LN2@ccread_con
; Line 547
	mov	QWORD PTR [rsp+64], rbp
; Line 548
	mov	r8d, edi
	mov	rdx, rsi
	mov	QWORD PTR [rsp+72], r15
	mov	rcx, rbx
	xor	ebp, ebp
	call	ccread_logical_or_expr
; Line 62
	mov	rdx, QWORD PTR [rbx+128]
	mov	rcx, r12
	mov	r8, QWORD PTR [rbx+120]
; Line 548
	mov	r15, rax
; Line 62
	cmp	rdx, r8
	cmovb	rcx, rdx
; Line 77
	cmp	DWORD PTR [rcx], 10
; Line 160
	jne	SHORT $LN3@ccread_con
; Line 152
	cmp	rdx, r8
	jae	SHORT $LN40@ccread_con
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [rbx+136], rdx
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN34@ccread_con
$LN40@ccread_con:
; Line 153
	mov	rdx, r12
$LN34@ccread_con:
; Line 550
	test	rdx, rdx
	je	SHORT $LN3@ccread_con
; Line 551
	mov	r8d, edi
	mov	rdx, rsi
	mov	rcx, rbx
	call	ccread_conditional_expr
	mov	rbp, rax
$LN3@ccread_con:
; File W:\cpp\void\ktt-c\cctree.h
; Line 281
	mov	r8d, edi
	mov	rdx, rsi
	mov	ecx, 17
	call	cctree_new
; Line 283
	mov	QWORD PTR [rax+72], r15
; File W:\cpp\void\ktt-c\ccread.c
; Line 556
	mov	r15, QWORD PTR [rsp+72]
; File W:\cpp\void\ktt-c\cctree.h
; Line 284
	mov	QWORD PTR [rax+80], rbp
; File W:\cpp\void\ktt-c\ccread.c
; Line 556
	mov	rbp, QWORD PTR [rsp+64]
; File W:\cpp\void\ktt-c\cctree.h
; Line 282
	mov	QWORD PTR [rax+64], r14
; File W:\cpp\void\ktt-c\ccread.c
; Line 556
	jmp	SHORT $LN1@ccread_con
$LN2@ccread_con:
; Line 559
	mov	rax, r14
$LN1@ccread_con:
; Line 560
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r14
	pop	r12
	pop	rdi
	ret	0
ccread_conditional_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_logical_or_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_logical_or_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 527
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_logical_and_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN26@ccread_log:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 107			; 0000006bH
; Line 528
	jne	SHORT $LN25@ccread_log
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_log
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN12@ccread_log
$LN18@ccread_log:
; Line 153
	mov	rbx, r12
$LN12@ccread_log:
; Line 530
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_logical_and_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 530
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 532
	jmp	SHORT $LN26@ccread_log
$LN25@ccread_log:
; Line 533
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 534
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_logical_or_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_logical_and_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_logical_and_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 512
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_bitwise_or_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN26@ccread_log:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 106			; 0000006aH
; Line 513
	jne	SHORT $LN25@ccread_log
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_log
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN12@ccread_log
$LN18@ccread_log:
; Line 153
	mov	rbx, r12
$LN12@ccread_log:
; Line 515
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_bitwise_or_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 515
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 517
	jmp	SHORT $LN26@ccread_log
$LN25@ccread_log:
; Line 518
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 519
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_logical_and_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_bitwise_or_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_bitwise_or_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 497
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_bitwise_xor_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN26@ccread_bit:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 105			; 00000069H
; Line 498
	jne	SHORT $LN25@ccread_bit
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_bit
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN12@ccread_bit
$LN18@ccread_bit:
; Line 153
	mov	rbx, r12
$LN12@ccread_bit:
; Line 500
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_bitwise_xor_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 500
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 502
	jmp	SHORT $LN26@ccread_bit
$LN25@ccread_bit:
; Line 503
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 504
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_bitwise_or_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_bitwise_xor_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_bitwise_xor_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 482
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_bitwise_and_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN26@ccread_bit:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 103			; 00000067H
; Line 483
	jne	SHORT $LN25@ccread_bit
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_bit
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN12@ccread_bit
$LN18@ccread_bit:
; Line 153
	mov	rbx, r12
$LN12@ccread_bit:
; Line 485
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_bitwise_and_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 485
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 487
	jmp	SHORT $LN26@ccread_bit
$LN25@ccread_bit:
; Line 488
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 489
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_bitwise_xor_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_bitwise_and_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_bitwise_and_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 467
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_equality_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN26@ccread_bit:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 103			; 00000067H
; Line 468
	jne	SHORT $LN25@ccread_bit
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN18@ccread_bit
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN12@ccread_bit
$LN18@ccread_bit:
; Line 153
	mov	rbx, r12
$LN12@ccread_bit:
; Line 470
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_equality_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 470
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 472
	jmp	SHORT $LN26@ccread_bit
$LN25@ccread_bit:
; Line 473
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 474
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_bitwise_and_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_equality_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_equality_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 450
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	ebp, r8d
	mov	r14, rdx
	mov	rsi, rcx
; Line 431
	call	ccread_shift_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN80@ccread_equ:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	r15, rax
	mov	rdx, QWORD PTR [rsi+120]
	mov	rax, r12
	cmp	rbx, rdx
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 100			; 00000064H
; Line 434
	je	SHORT $LN8@ccread_equ
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 118			; 00000076H
; Line 434
	je	SHORT $LN8@ccread_equ
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 99			; 00000063H
; Line 434
	je	SHORT $LN8@ccread_equ
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 117			; 00000075H
; Line 434
	jne	SHORT $LN7@ccread_equ
$LN8@ccread_equ:
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN23@ccread_equ
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN17@ccread_equ
$LN23@ccread_equ:
; Line 153
	mov	rbx, r12
$LN17@ccread_equ:
; Line 437
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_shift_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, ebp
	mov	rdx, r14
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 437
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], r15
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 439
	jmp	$LN80@ccread_equ
$LN7@ccread_equ:
; Line 62
	cmp	rbx, rdx
	mov	rcx, r12
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 101			; 00000065H
; Line 451
	je	SHORT $LN3@ccread_equ
; Line 62
	cmp	rbx, rdx
	mov	rcx, r12
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 102			; 00000066H
; Line 451
	je	SHORT $LN3@ccread_equ
; Line 457
	mov	rax, r15
	jmp	SHORT $LN2@ccread_equ
$LN3@ccread_equ:
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN61@ccread_equ
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN55@ccread_equ
$LN61@ccread_equ:
; Line 153
	mov	rbx, r12
$LN55@ccread_equ:
; Line 454
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_equality_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, ebp
	mov	rdx, r14
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 454
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], r15
; Line 275
	mov	QWORD PTR [rax+80], rdi
$LN2@ccread_equ:
	mov	rdi, QWORD PTR [rsp+64]
; File W:\cpp\void\ktt-c\ccread.c
; Line 458
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_equality_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_relational_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_relational_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 431
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_shift_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN52@ccread_rel:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 100			; 00000064H
; Line 434
	je	SHORT $LN4@ccread_rel
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 118			; 00000076H
; Line 434
	je	SHORT $LN4@ccread_rel
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 99			; 00000063H
; Line 434
	je	SHORT $LN4@ccread_rel
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 117			; 00000075H
; Line 434
	jne	SHORT $LN51@ccread_rel
$LN4@ccread_rel:
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN19@ccread_rel
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN13@ccread_rel
$LN19@ccread_rel:
; Line 153
	mov	rbx, r12
$LN13@ccread_rel:
; Line 437
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_shift_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 437
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 439
	jmp	$LN52@ccread_rel
$LN51@ccread_rel:
; Line 440
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 441
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_relational_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_shift_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_shift_expr PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 411
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_additive_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN38@ccread_shi:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 97			; 00000061H
; Line 412
	je	SHORT $LN4@ccread_shi
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 98			; 00000062H
; Line 412
	jne	SHORT $LN37@ccread_shi
$LN4@ccread_shi:
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN19@ccread_shi
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN13@ccread_shi
$LN19@ccread_shi:
; Line 153
	mov	rbx, r12
$LN13@ccread_shi:
; Line 415
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_additive_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 415
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 417
	jmp	SHORT $LN38@ccread_shi
$LN37@ccread_shi:
; Line 418
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 419
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_shift_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_additive_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_additive_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 393
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_multiplicative_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN38@ccread_add:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 95			; 0000005fH
; Line 394
	je	SHORT $LN4@ccread_add
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 96			; 00000060H
; Line 394
	jne	SHORT $LN37@ccread_add
$LN4@ccread_add:
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN19@ccread_add
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN13@ccread_add
$LN19@ccread_add:
; Line 153
	mov	rbx, r12
$LN13@ccread_add:
; Line 398
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_multiplicative_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 398
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 400
	jmp	SHORT $LN38@ccread_add
$LN37@ccread_add:
; Line 401
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 402
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_additive_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_multiplicative_expr
_TEXT	SEGMENT
parser$ = 64
root$ = 72
mark$ = 80
ccread_multiplicative_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 374
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	mov	r14d, r8d
	mov	r15, rdx
	mov	rsi, rcx
	call	ccread_unary_expr
	lea	r12, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	QWORD PTR [rsp+64], rdi
$LN45@ccread_mul:
; Line 62
	mov	rbx, QWORD PTR [rsi+128]
	mov	rcx, r12
	mov	rdx, QWORD PTR [rsi+120]
	mov	rbp, rax
	cmp	rbx, rdx
	cmovb	rcx, rbx
; Line 77
	cmp	DWORD PTR [rcx], 92			; 0000005cH
; Line 376
	je	SHORT $LN4@ccread_mul
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 93			; 0000005dH
; Line 376
	je	SHORT $LN4@ccread_mul
; Line 62
	cmp	rbx, rdx
	mov	rax, r12
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 94			; 0000005eH
; Line 376
	jne	SHORT $LN44@ccread_mul
$LN4@ccread_mul:
; Line 152
	cmp	rbx, rdx
	jae	SHORT $LN19@ccread_mul
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rsi+136], rbx
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN13@ccread_mul
$LN19@ccread_mul:
; Line 153
	mov	rbx, r12
$LN13@ccread_mul:
; Line 380
	mov	r8d, r14d
	mov	rdx, r15
	mov	rcx, rsi
	call	ccread_unary_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, r14d
	mov	rdx, r15
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 380
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rbp
; Line 275
	mov	QWORD PTR [rax+80], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 382
	jmp	$LN45@ccread_mul
$LN44@ccread_mul:
; Line 383
	mov	rdi, QWORD PTR [rsp+64]
	mov	rax, rbp
; Line 384
	mov	rbp, QWORD PTR [rsp+80]
	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccread_multiplicative_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_unary_expr
_TEXT	SEGMENT
clo$2$ = 32
reader$ = 128
root$ = 136
mark$ = 144
ccread_unary_expr PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 304
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 112				; 00000070H
; Line 62
	mov	rdi, QWORD PTR [rcx+128]
	lea	r10, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r9, QWORD PTR [rcx+120]
	mov	rax, r10
	cmp	rdi, r9
; Line 304
	mov	esi, r8d
	mov	rbp, rdx
; Line 62
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 95			; 0000005fH
; Line 306
	jne	$LN2@ccread_una
; Line 152
	lea	r8, QWORD PTR [rcx+136]
	cmp	rdi, r9
	jae	SHORT $LN29@ccread_una
	lea	rdx, QWORD PTR [rdi+56]
	mov	QWORD PTR [r8], rdi
	mov	QWORD PTR [rcx+128], rdx
; Line 62
	mov	r14, rdi
	cmp	rdx, r9
	jae	SHORT $LN39@ccread_una
; Line 63
	mov	rax, rdx
	jmp	SHORT $LN38@ccread_una
$LN29@ccread_una:
; Line 153
	mov	r14, r10
	mov	rdx, rdi
$LN39@ccread_una:
; Line 67
	mov	rax, r10
$LN38@ccread_una:
; Line 77
	cmp	DWORD PTR [rax], 95			; 0000005fH
$LN134@ccread_una:
; Line 344
	jne	SHORT $LN4@ccread_una
	cmp	rdx, r9
	jae	SHORT $LN47@ccread_una
	lea	rax, QWORD PTR [rdx+56]
	mov	QWORD PTR [r8], rdx
	mov	QWORD PTR [rcx+128], rax
	jmp	SHORT $LN41@ccread_una
$LN47@ccread_una:
	mov	rdx, r10
$LN41@ccread_una:
	test	rdx, rdx
	je	SHORT $LN4@ccread_una
	movups	xmm0, XMMWORD PTR [r14]
	mov	r8d, esi
	mov	rdx, rbp
$LN135@ccread_una:
	movups	XMMWORD PTR clo$2$[rsp], xmm0
	call	ccread_cast_expr
	mov	r8d, esi
	mov	rdx, rbp
	mov	ecx, 19
	mov	rbx, rax
	call	cctree_new
	movups	xmm0, XMMWORD PTR clo$2$[rsp]
	movd	DWORD PTR [rax+40], xmm0
	jmp	$LN131@ccread_una
$LN4@ccread_una:
	mov	r8d, esi
	mov	rdx, rbp
	call	ccread_cast_expr
	mov	r8d, esi
	mov	rdx, rbp
	mov	ecx, 19
	mov	rbx, rax
	call	cctree_new
	mov	ecx, DWORD PTR [r14]
	jmp	$LN132@ccread_una
$LN2@ccread_una:
; Line 62
	cmp	rdi, r9
	mov	rax, r10
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 96			; 00000060H
; Line 317
	jne	SHORT $LN6@ccread_una
; Line 152
	lea	r8, QWORD PTR [rcx+136]
	cmp	rdi, r9
	jae	SHORT $LN66@ccread_una
	lea	rdx, QWORD PTR [rdi+56]
	mov	QWORD PTR [r8], rdi
	mov	QWORD PTR [rcx+128], rdx
; Line 62
	mov	r14, rdi
	cmp	rdx, r9
	jae	SHORT $LN76@ccread_una
; Line 63
	mov	rax, rdx
; Line 77
	cmp	DWORD PTR [rax], 96			; 00000060H
; Line 152
	jmp	$LN134@ccread_una
$LN66@ccread_una:
; Line 153
	mov	r14, r10
	mov	rdx, rdi
$LN76@ccread_una:
; Line 67
	mov	rax, r10
; Line 77
	cmp	DWORD PTR [rax], 96			; 00000060H
; Line 152
	jmp	$LN134@ccread_una
$LN6@ccread_una:
; Line 62
	cmp	rdi, r9
	mov	rax, r10
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 92			; 0000005cH
; Line 328
	jne	SHORT $LN10@ccread_una
; Line 152
	cmp	rdi, r9
	jae	SHORT $LN103@ccread_una
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rcx+136], rdi
	mov	QWORD PTR [rcx+128], rax
; Line 332
	movups	xmm0, XMMWORD PTR [rdi]
; Line 336
	jmp	$LN135@ccread_una
$LN103@ccread_una:
; Line 332
	movups	xmm0, XMMWORD PTR [r10]
; Line 153
	mov	rdi, r10
; Line 336
	jmp	$LN135@ccread_una
$LN10@ccread_una:
; Line 62
	cmp	rdi, r9
	mov	rax, r10
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 86			; 00000056H
; Line 337
	je	SHORT $LN14@ccread_una
; Line 62
	cmp	rdi, r9
	mov	rax, r10
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 89			; 00000059H
; Line 337
	je	SHORT $LN14@ccread_una
; Line 341
	call	ccread_postfix
	jmp	SHORT $LN13@ccread_una
$LN14@ccread_una:
; Line 152
	cmp	rdi, r9
	jae	SHORT $LN120@ccread_una
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rcx+136], rdi
	mov	QWORD PTR [rcx+128], rax
	jmp	SHORT $LN114@ccread_una
$LN120@ccread_una:
; Line 153
	mov	rdi, r10
$LN114@ccread_una:
; Line 339
	call	ccread_cast_expr
; File W:\cpp\void\ktt-c\cctree.h
; Line 264
	mov	r8d, esi
	mov	rdx, rbp
	mov	ecx, 19
; File W:\cpp\void\ktt-c\ccread.c
; Line 339
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 264
	call	cctree_new
; Line 265
	mov	ecx, DWORD PTR [rdi]
$LN132@ccread_una:
; File W:\cpp\void\ktt-c\ccread.c
; Line 344
	mov	DWORD PTR [rax+40], ecx
$LN131@ccread_una:
	mov	QWORD PTR [rax+80], rbx
$LN13@ccread_una:
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+16]
	mov	rbp, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	r14
	ret	0
ccread_unary_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_postfix
_TEXT	SEGMENT
sze_min$1$ = 96
reader$ = 96
root$ = 104
mark$ = 112
next$1$ = 120
ccread_postfix PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 262
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 62
	mov	rsi, QWORD PTR [rcx+128]
	lea	r14, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 262
	mov	r13, rdx
; Line 62
	xor	r15d, r15d
	mov	rdx, QWORD PTR [rcx+120]
; Line 262
	mov	r12d, r8d
	mov	rbx, rcx
; Line 62
	cmp	rsi, rdx
	jae	SHORT $LN29@ccread_pos
; Line 227
	mov	rcx, rsi
	test	rsi, rsi
	jne	SHORT $LN18@ccread_pos
	mov	ebp, r15d
	jmp	$LN15@ccread_pos
$LN29@ccread_pos:
; Line 67
	mov	rcx, r14
$LN18@ccread_pos:
; Line 228
	mov	ecx, DWORD PTR [rcx]
	sub	ecx, 3
	je	$LN23@ccread_pos
	sub	ecx, 12
	je	$LN22@ccread_pos
	sub	ecx, 3
	je	$LN19@ccread_pos
	sub	ecx, 1
	je	SHORT $LN20@ccread_pos
	cmp	ecx, 1
	je	SHORT $LN21@ccread_pos
; Line 243
	mov	rbp, r15
	jmp	$LN15@ccread_pos
$LN21@ccread_pos:
; Line 152
	cmp	rsi, rdx
	jae	SHORT $LN47@ccread_pos
	lea	rax, QWORD PTR [rsi+56]
	mov	QWORD PTR [rbx+136], rsi
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN41@ccread_pos
$LN47@ccread_pos:
; Line 153
	mov	rsi, r14
$LN41@ccread_pos:
; Line 234
	mov	rdi, QWORD PTR ctype_flo64
; File W:\cpp\void\ktt-c\cctree.h
; Line 300
	mov	rdx, r13
	mov	ecx, 7
	call	cctree_new
	mov	rbp, rax
; Line 301
	mov	QWORD PTR [rax+48], rdi
; Line 302
	mov	rax, QWORD PTR [rsi+8]
	mov	QWORD PTR [rbp+96], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 234
	jmp	$LN15@ccread_pos
$LN20@ccread_pos:
; Line 152
	cmp	rsi, rdx
	jae	SHORT $LN37@ccread_pos
	lea	rax, QWORD PTR [rsi+56]
	mov	QWORD PTR [rbx+136], rsi
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN31@ccread_pos
$LN37@ccread_pos:
; Line 153
	mov	rsi, r14
$LN31@ccread_pos:
; Line 232
	mov	rdi, QWORD PTR ctype_int64
; File W:\cpp\void\ktt-c\cctree.h
; Line 300
	mov	rdx, r13
	mov	ecx, 7
	call	cctree_new
	mov	rbp, rax
; Line 301
	mov	QWORD PTR [rax+48], rdi
; Line 302
	mov	rax, QWORD PTR [rsi+8]
	mov	QWORD PTR [rbp+96], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 232
	jmp	$LN15@ccread_pos
$LN19@ccread_pos:
; Line 230
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_identifier
	jmp	SHORT $LN253@ccread_pos
$LN22@ccread_pos:
; Line 152
	cmp	rsi, rdx
	jae	SHORT $LN57@ccread_pos
	lea	rax, QWORD PTR [rsi+56]
	mov	QWORD PTR [rbx+136], rsi
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN51@ccread_pos
$LN57@ccread_pos:
; Line 153
	mov	rsi, r14
$LN51@ccread_pos:
; Line 236
	mov	rcx, QWORD PTR ctype_int8
	call	cctype_new_arr
; File W:\cpp\void\ktt-c\cctree.h
; Line 300
	mov	r8d, r12d
	mov	rdx, r13
	mov	ecx, 7
; File W:\cpp\void\ktt-c\ccread.c
; Line 236
	mov	rdi, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 300
	call	cctree_new
	mov	rbp, rax
; Line 301
	mov	QWORD PTR [rax+48], rdi
; Line 302
	mov	rax, QWORD PTR [rsi+8]
	mov	QWORD PTR [rbp+96], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 236
	jmp	SHORT $LN15@ccread_pos
$LN23@ccread_pos:
; Line 238
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_expression
; Line 239
	mov	edx, 4
	mov	rcx, rbx
	mov	rdi, rax
	call	cceat
; File W:\cpp\void\ktt-c\cctree.h
; Line 186
	mov	r8d, r12d
	mov	rdx, r13
	mov	ecx, 20
	call	cctree_new
; Line 187
	mov	QWORD PTR [rax+64], rdi
$LN253@ccread_pos:
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rbp, rax
$LN15@ccread_pos:
	mov	rdi, QWORD PTR [rbx+128]
	mov	rax, r14
	mov	rcx, QWORD PTR [rbx+120]
	cmp	rdi, rcx
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 3
; Line 160
	jne	$LN82@ccread_pos
; Line 152
	cmp	rdi, rcx
	jae	SHORT $LN97@ccread_pos
	mov	QWORD PTR [rbx+136], rdi
	mov	rax, rdi
	add	rdi, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rdi
	jmp	SHORT $LN91@ccread_pos
$LN97@ccread_pos:
; Line 153
	mov	rax, r14
$LN91@ccread_pos:
; Line 265
	test	rax, rax
	je	$LN82@ccread_pos
; Line 607
	mov	rsi, r15
	npad	11
$LL102@ccread_pos:
; Line 609
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_assignment_expr
	mov	QWORD PTR next$1$[rsp], rax
; Line 610
	test	rax, rax
	je	$LN103@ccread_pos
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rsi, rsi
	lea	rdi, QWORD PTR [rsi-24]
; Line 242
	mov	eax, r15d
	mov	esi, r15d
; Line 284
	cmove	rdi, r15
; Line 242
	mov	DWORD PTR sze_min$1$[rsp], eax
; Line 246
	test	rdi, rdi
	je	SHORT $LN131@ccread_pos
; Line 248
	mov	eax, DWORD PTR [rdi+20]
	mov	esi, DWORD PTR [rdi+16]
	mov	DWORD PTR sze_min$1$[rsp], eax
$LN131@ccread_pos:
; Line 256
	lea	r15d, DWORD PTR [rax+176]
	mov	rax, rdi
	cmp	esi, r15d
	jae	SHORT $LN134@ccread_pos
; Line 260
	lea	ecx, DWORD PTR [rsi+rsi]
; Line 265
	mov	eax, r15d
	cmp	ecx, r15d
	cmovae	eax, ecx
	mov	rcx, rdi
	mov	esi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rdi, rdi
	jne	SHORT $LN134@ccread_pos
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN134@ccread_pos:
; File W:\cpp\void\ktt-c\ccread.c
; Line 610
	mov	rcx, QWORD PTR next$1$[rsp]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 273
	mov	DWORD PTR [rax+16], esi
; Line 285
	lea	rsi, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], r15d
; Line 286
	mov	eax, -1171354717			; ba2e8ba3H
	mul	DWORD PTR sze_min$1$[rsp]
; File W:\cpp\void\ktt-c\ccread.c
; Line 610
	movups	xmm0, XMMWORD PTR [rcx]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 286
	shr	edx, 7
; File W:\cpp\void\ktt-c\ccread.c
; Line 610
	mov	eax, edx
	imul	rdx, rax, 176				; 000000b0H
	add	rdx, rsi
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [rcx+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [rcx+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [rcx+80]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm0, XMMWORD PTR [rcx+96]
	movups	XMMWORD PTR [rdx+96], xmm0
	movups	xmm1, XMMWORD PTR [rcx+112]
	movups	XMMWORD PTR [rdx+112], xmm1
	movups	xmm0, XMMWORD PTR [rcx+128]
	movups	XMMWORD PTR [rdx+128], xmm0
	movups	xmm1, XMMWORD PTR [rcx+144]
	movups	XMMWORD PTR [rdx+144], xmm1
	movups	xmm0, XMMWORD PTR [rcx+160]
	movups	XMMWORD PTR [rdx+160], xmm0
	call	free
; Line 62
	mov	rcx, QWORD PTR [rbx+128]
	mov	rax, r14
	mov	rdx, QWORD PTR [rbx+120]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 9
; Line 160
	jne	SHORT $LN104@ccread_pos
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN251@ccread_pos
	mov	QWORD PTR [rbx+136], rcx
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbx+128], rax
; Line 612
	test	rcx, rcx
	je	SHORT $LN104@ccread_pos
$LN251@ccread_pos:
	xor	r15d, r15d
	jmp	$LL102@ccread_pos
$LN103@ccread_pos:
; File W:\cpp\void\ktt-c\cctree.h
; Line 121
	mov	rcx, rax
	call	free
$LN104@ccread_pos:
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	mov	rcx, QWORD PTR [rbx+120]
	cmp	rax, rcx
	cmovb	r14, rax
; Line 77
	cmp	DWORD PTR [r14], 4
; Line 160
	jne	SHORT $LN147@ccread_pos
; Line 152
	cmp	rax, rcx
	jae	SHORT $LN147@ccread_pos
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
$LN147@ccread_pos:
; File W:\cpp\void\ktt-c\cctree.h
; Line 193
	mov	r8d, r12d
	mov	rdx, r13
	mov	ecx, 21
	call	cctree_new
; Line 194
	mov	QWORD PTR [rax+72], rbp
; Line 195
	mov	QWORD PTR [rax+80], rsi
; File W:\cpp\void\ktt-c\ccread.c
; Line 268
	jmp	$LN1@ccread_pos
$LN82@ccread_pos:
; Line 62
	cmp	rdi, rcx
	mov	rax, r14
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 7
; Line 270
	jne	SHORT $LN5@ccread_pos
; Line 271
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbx
	call	ccread_expression
; Line 62
	mov	rax, QWORD PTR [rbx+128]
	mov	rcx, QWORD PTR [rbx+120]
	cmp	rax, rcx
	cmovb	r14, rax
; Line 77
	cmp	DWORD PTR [r14], 8
; Line 160
	jne	$LN13@ccread_pos
; Line 152
	cmp	rax, rcx
	jae	$LN13@ccread_pos
	mov	QWORD PTR [rbx+136], rax
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rbx+128], rax
; Line 276
	jmp	$LN13@ccread_pos
$LN5@ccread_pos:
; Line 62
	cmp	rdi, rcx
	mov	rax, r14
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 90			; 0000005aH
; Line 277
	je	SHORT $LN10@ccread_pos
; Line 62
	cmp	rdi, rcx
	mov	rax, r14
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 91			; 0000005bH
; Line 277
	je	SHORT $LN10@ccread_pos
; Line 62
	cmp	rdi, rcx
	mov	rax, r14
	cmovb	rax, rdi
; Line 77
	cmp	DWORD PTR [rax], 125			; 0000007dH
; Line 160
	jne	SHORT $LN226@ccread_pos
; Line 152
	cmp	rdi, rcx
	jae	SHORT $LN241@ccread_pos
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rbx+136], rdi
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN235@ccread_pos
$LN241@ccread_pos:
; Line 153
	mov	rdi, r14
$LN235@ccread_pos:
; Line 281
	test	rdi, rdi
	je	SHORT $LN11@ccread_pos
; Line 283
	jmp	SHORT $LN208@ccread_pos
$LN226@ccread_pos:
; Line 161
	mov	rdi, r15
$LN11@ccread_pos:
; Line 284
	mov	edx, 124				; 0000007cH
	mov	rcx, rbx
	call	cceat
	test	rax, rax
	je	SHORT $LN13@ccread_pos
; Line 285
	jmp	SHORT $LN208@ccread_pos
$LN10@ccread_pos:
; Line 152
	cmp	rdi, rcx
	jae	SHORT $LN214@ccread_pos
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rbx+136], rdi
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN208@ccread_pos
$LN214@ccread_pos:
; Line 153
	mov	rdi, r14
$LN208@ccread_pos:
; Line 287
	mov	r8d, r12d
	mov	rdx, r13
	mov	ecx, 19
	call	cctree_new
	mov	ecx, DWORD PTR [rdi]
	mov	QWORD PTR [rax+80], rbp
	mov	rbp, rax
	mov	DWORD PTR [rax+40], ecx
$LN13@ccread_pos:
	mov	rax, rbp
$LN1@ccread_pos:
; Line 288
	mov	rbx, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ccread_postfix ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_primary
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_primary PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 226
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 62
	mov	rdi, QWORD PTR [rcx+128]
; Line 226
	mov	r14, rdx
; Line 62
	mov	r9, QWORD PTR [rcx+120]
	lea	rdx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 226
	mov	ebp, r8d
	mov	rsi, rcx
; Line 62
	cmp	rdi, r9
	jb	SHORT $LN14@ccread_pri
; Line 67
	mov	rcx, rdx
$LN4@ccread_pri:
; Line 228
	mov	ecx, DWORD PTR [rcx]
	mov	QWORD PTR [rsp+48], rbx
	sub	ecx, 3
	je	$LN9@ccread_pri
	sub	ecx, 12
	je	$LN8@ccread_pri
	sub	ecx, 3
	je	SHORT $LN5@ccread_pri
	sub	ecx, 1
	je	SHORT $LN6@ccread_pri
	cmp	ecx, 1
	je	SHORT $LN7@ccread_pri
; Line 243
	xor	eax, eax
	jmp	$LN92@ccread_pri
$LN14@ccread_pri:
; Line 227
	mov	rcx, rdi
	test	rdi, rdi
	jne	SHORT $LN4@ccread_pri
	xor	eax, eax
	jmp	$LN1@ccread_pri
$LN7@ccread_pri:
; Line 152
	cmp	rdi, r9
	jae	SHORT $LN33@ccread_pri
; Line 234
	mov	rbx, QWORD PTR ctype_flo64
; Line 152
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rsi+128], rax
	mov	QWORD PTR [rsi+136], rdi
; Line 234
	jmp	SHORT $LN93@ccread_pri
$LN33@ccread_pri:
	mov	rbx, QWORD PTR ctype_flo64
; Line 153
	mov	rdi, rdx
; Line 234
	jmp	SHORT $LN93@ccread_pri
$LN6@ccread_pri:
; Line 152
	cmp	rdi, r9
	jae	SHORT $LN23@ccread_pri
; Line 232
	mov	rbx, QWORD PTR ctype_int64
; Line 152
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rsi+128], rax
	mov	QWORD PTR [rsi+136], rdi
; Line 232
	jmp	SHORT $LN93@ccread_pri
$LN23@ccread_pri:
	mov	rbx, QWORD PTR ctype_int64
; Line 153
	mov	rdi, rdx
; Line 232
	jmp	SHORT $LN93@ccread_pri
$LN5@ccread_pri:
; Line 230
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_identifier
	jmp	SHORT $LN92@ccread_pri
$LN8@ccread_pri:
; Line 152
	cmp	rdi, r9
	jae	SHORT $LN43@ccread_pri
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rsi+136], rdi
	mov	QWORD PTR [rsi+128], rax
	jmp	SHORT $LN37@ccread_pri
$LN43@ccread_pri:
; Line 153
	mov	rdi, rdx
$LN37@ccread_pri:
; Line 236
	mov	rcx, QWORD PTR ctype_int8
	call	cctype_new_arr
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 300
	mov	r8d, ebp
$LN93@ccread_pri:
	mov	rdx, r14
	mov	ecx, 7
	call	cctree_new
; Line 302
	mov	rcx, QWORD PTR [rdi+8]
	mov	QWORD PTR [rax+48], rbx
	mov	QWORD PTR [rax+96], rcx
; File W:\cpp\void\ktt-c\ccread.c
; Line 236
	jmp	SHORT $LN92@ccread_pri
$LN9@ccread_pri:
; Line 238
	mov	rdx, r14
	mov	rcx, rsi
	call	ccread_expression
; Line 239
	mov	edx, 4
	mov	rcx, rsi
	mov	rbx, rax
	call	cceat
; File W:\cpp\void\ktt-c\cctree.h
; Line 186
	mov	r8d, ebp
	mov	rdx, r14
	mov	ecx, 20
	call	cctree_new
; Line 187
	mov	QWORD PTR [rax+64], rbx
$LN92@ccread_pri:
	mov	rbx, QWORD PTR [rsp+48]
$LN1@ccread_pri:
; File W:\cpp\void\ktt-c\ccread.c
; Line 244
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccread_primary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_identifier
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_identifier PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 216
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 62
	mov	rbx, QWORD PTR [rcx+128]
	lea	r10, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r9, QWORD PTR [rcx+120]
	mov	rax, r10
	cmp	rbx, r9
	cmovb	rax, rbx
; Line 77
	cmp	DWORD PTR [rax], 18
; Line 160
	jne	SHORT $LN5@ccread_ide
; Line 152
	cmp	rbx, r9
	jae	SHORT $LN20@ccread_ide
	lea	rax, QWORD PTR [rbx+56]
	mov	QWORD PTR [rcx+136], rbx
	mov	QWORD PTR [rcx+128], rax
	jmp	SHORT $LN14@ccread_ide
$LN20@ccread_ide:
; Line 153
	mov	rbx, r10
$LN14@ccread_ide:
; Line 218
	test	rbx, rbx
	je	SHORT $LN5@ccread_ide
	mov	rbx, QWORD PTR [rbx+8]
; File W:\cpp\void\ktt-c\cctree.h
; Line 257
	mov	ecx, 6
	call	cctree_new
; Line 258
	mov	QWORD PTR [rax+24], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 220
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN5@ccread_ide:
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccread_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_cast_expr
_TEXT	SEGMENT
parser$ = 8
root$ = 16
mark$ = 24
ccread_cast_expr PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 352
	mov	r9, rcx
; Line 62
	lea	r10, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rcx, QWORD PTR [rcx+128]
	mov	rax, r10
	mov	r11, QWORD PTR [r9+120]
	cmp	rcx, r11
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 3
; Line 160
	jne	SHORT $LN2@ccread_cas
; Line 152
	cmp	rcx, r11
	jae	SHORT $LN22@ccread_cas
	mov	QWORD PTR [r9+136], rcx
	mov	rax, rcx
	add	rcx, 56					; 00000038H
	mov	QWORD PTR [r9+128], rcx
	jmp	SHORT $LN16@ccread_cas
$LN22@ccread_cas:
; Line 153
	mov	rax, r10
$LN16@ccread_cas:
; Line 353
	test	rax, rax
	je	SHORT $LN2@ccread_cas
; Line 62
	cmp	rcx, r11
	cmovb	r10, rcx
; Line 77
	cmp	DWORD PTR [r10], 4
; Line 160
	jne	SHORT $LN429@ccread_cas
; Line 152
	cmp	rcx, r11
	jae	SHORT $LN429@ccread_cas
	mov	QWORD PTR [r9+136], rcx
	add	rcx, 56					; 00000038H
	mov	QWORD PTR [r9+128], rcx
$LN429@ccread_cas:
; Line 364
	xor	eax, eax
	ret	0
$LN2@ccread_cas:
; Line 361
	mov	rcx, r9
	jmp	ccread_unary_expr
ccread_cast_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_expression
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_expression PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 594
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	ebp, r8d
	mov	r14, rdx
	mov	rbx, rcx
	call	ccread_assignment_expr
; Line 62
	mov	rdi, QWORD PTR [rbx+128]
	lea	rcx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 594
	mov	rsi, rax
; Line 62
	mov	r9, rcx
	mov	rax, QWORD PTR [rbx+120]
	cmp	rdi, rax
	cmovb	r9, rdi
; Line 77
	cmp	DWORD PTR [r9], 9
; Line 595
	jne	SHORT $LN21@ccread_exp
; Line 152
	cmp	rdi, rax
	jae	SHORT $LN17@ccread_exp
	lea	rax, QWORD PTR [rdi+56]
	mov	QWORD PTR [rbx+136], rdi
	mov	QWORD PTR [rbx+128], rax
	jmp	SHORT $LN11@ccread_exp
$LN17@ccread_exp:
; Line 153
	mov	rdi, rcx
$LN11@ccread_exp:
; Line 596
	mov	r8d, ebp
	mov	rdx, r14
	mov	rcx, rbx
	call	ccread_expression
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	r8d, ebp
	mov	rdx, r14
	mov	ecx, 18
; File W:\cpp\void\ktt-c\ccread.c
; Line 596
	mov	rbx, rax
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rdi]
	mov	DWORD PTR [rax+40], ecx
; Line 274
	mov	QWORD PTR [rax+72], rsi
; Line 275
	mov	QWORD PTR [rax+80], rbx
; File W:\cpp\void\ktt-c\ccread.c
; Line 595
	jmp	SHORT $LN2@ccread_exp
$LN21@ccread_exp:
; Line 598
	mov	rax, rsi
$LN2@ccread_exp:
; Line 599
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccread_expression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_arglist_expr
_TEXT	SEGMENT
reader$ = 80
root$ = 88
mark$ = 96
ccread_arglist_expr PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 607
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r15
	sub	rsp, 32					; 00000020H
	xor	esi, esi
	mov	QWORD PTR [rsp+80], rbx
	mov	edi, esi
	mov	QWORD PTR [rsp+88], r14
	mov	r12d, r8d
	mov	r13, rdx
	mov	rbp, rcx
	npad	8
$LL4@ccread_arg:
; Line 609
	mov	r8d, r12d
	mov	rdx, r13
	mov	rcx, rbp
	call	ccread_assignment_expr
	mov	r15, rax
; Line 610
	test	rax, rax
	je	$LN5@ccread_arg
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rdi, rdi
	lea	rbx, QWORD PTR [rdi-24]
; Line 241
	mov	edi, esi
; Line 242
	mov	r14d, esi
; Line 284
	cmove	rbx, rsi
; Line 246
	test	rbx, rbx
	je	SHORT $LN101@ccread_arg
; Line 247
	mov	edi, DWORD PTR [rbx+16]
; Line 248
	mov	r14d, DWORD PTR [rbx+20]
$LN101@ccread_arg:
; Line 256
	lea	esi, DWORD PTR [r14+176]
	mov	rax, rbx
	cmp	edi, esi
	jae	SHORT $LN104@ccread_arg
; Line 260
	lea	ecx, DWORD PTR [rdi+rdi]
; Line 265
	mov	eax, esi
	cmp	ecx, esi
	cmovae	eax, ecx
	mov	rcx, rbx
	mov	edi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rbx, rbx
	jne	SHORT $LN104@ccread_arg
; Line 269
	xor	ecx, ecx
	mov	QWORD PTR [rax], rcx
	mov	QWORD PTR [rax+8], rcx
$LN104@ccread_arg:
; Line 273
	mov	DWORD PTR [rax+16], edi
; File W:\cpp\void\ktt-c\ccread.c
; Line 610
	mov	rcx, r15
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 274
	mov	DWORD PTR [rax+20], esi
; Line 285
	lea	rdi, QWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\ccread.c
; Line 610
	movups	xmm0, XMMWORD PTR [r15]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 286
	mov	eax, -1171354717			; ba2e8ba3H
	mul	r14d
	shr	edx, 7
; File W:\cpp\void\ktt-c\ccread.c
; Line 610
	mov	eax, edx
	imul	rdx, rax, 176				; 000000b0H
	add	rdx, rdi
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r15+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r15+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r15+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r15+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r15+80]
	movups	XMMWORD PTR [rdx+80], xmm1
	movups	xmm0, XMMWORD PTR [r15+96]
	movups	XMMWORD PTR [rdx+96], xmm0
	movups	xmm1, XMMWORD PTR [r15+112]
	movups	XMMWORD PTR [rdx+112], xmm1
	movups	xmm0, XMMWORD PTR [r15+128]
	movups	XMMWORD PTR [rdx+128], xmm0
	movups	xmm1, XMMWORD PTR [r15+144]
	movups	XMMWORD PTR [rdx+144], xmm1
	movups	xmm0, XMMWORD PTR [r15+160]
	movups	XMMWORD PTR [rdx+160], xmm0
	call	free
; Line 62
	mov	rcx, QWORD PTR [rbp+128]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	rdx, QWORD PTR [rbp+120]
	cmp	rcx, rdx
	cmovb	rax, rcx
; Line 77
	cmp	DWORD PTR [rax], 9
; Line 160
	jne	SHORT $LN111@ccread_arg
; Line 152
	cmp	rcx, rdx
	jae	SHORT $LN109@ccread_arg
	mov	QWORD PTR [rbp+136], rcx
	lea	rax, QWORD PTR [rcx+56]
	mov	QWORD PTR [rbp+128], rax
; Line 612
	test	rcx, rcx
	je	SHORT $LN111@ccread_arg
$LN109@ccread_arg:
	xor	esi, esi
	jmp	$LL4@ccread_arg
$LN5@ccread_arg:
; File W:\cpp\void\ktt-c\cctree.h
; Line 121
	mov	rcx, r15
	call	free
$LN111@ccread_arg:
	mov	r14, QWORD PTR [rsp+88]
; File W:\cpp\void\ktt-c\ccread.c
; Line 614
	mov	rax, rdi
	mov	rbx, QWORD PTR [rsp+80]
	mov	rbp, QWORD PTR [rsp+96]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	ret	0
ccread_arglist_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cceat
_TEXT	SEGMENT
parser$ = 8
kind$ = 16
cceat	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	r8, QWORD PTR [rcx+128]
	lea	r10, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	mov	r9, QWORD PTR [rcx+120]
	mov	rax, r10
	cmp	r8, r9
	cmovb	rax, r8
; Line 77
	cmp	DWORD PTR [rax], edx
; Line 160
	jne	SHORT $LN2@cceat
; Line 152
	cmp	r8, r9
	jae	SHORT $LN17@cceat
	lea	rax, QWORD PTR [r8+56]
	mov	QWORD PTR [rcx+136], r8
	mov	QWORD PTR [rcx+128], rax
; Line 160
	mov	rax, r8
; Line 162
	ret	0
$LN17@cceat:
; Line 153
	mov	r8, r10
; Line 160
	mov	rax, r10
; Line 162
	ret	0
$LN2@cceat:
; Line 161
	xor	eax, eax
; Line 162
	ret	0
cceat	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccgobble
_TEXT	SEGMENT
reader$ = 8
ccgobble PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 152
	mov	rax, QWORD PTR [rcx+128]
	cmp	rax, QWORD PTR [rcx+120]
	jae	SHORT $LN7@ccgobble
	lea	rdx, QWORD PTR [rax+56]
	mov	QWORD PTR [rcx+136], rax
	mov	QWORD PTR [rcx+128], rdx
; Line 154
	ret	0
$LN7@ccgobble:
; Line 153
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
; Line 154
	ret	0
ccgobble ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_func_specifier
_TEXT	SEGMENT
parser$ = 8
kttc__peek_func_specifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+128]
	lea	rdx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+120]
	cmovb	rdx, rax
; Line 142
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 40					; 00000028H
	cmp	ecx, 1
	cmovbe	rax, rdx
; Line 148
	ret	0
kttc__peek_func_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_storage_class
_TEXT	SEGMENT
parser$ = 8
kttc__peek_storage_class PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+128]
	lea	rdx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+120]
	cmovb	rdx, rax
; Line 129
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 63					; 0000003fH
	cmp	ecx, 7
	cmovbe	rax, rdx
; Line 135
	ret	0
kttc__peek_storage_class ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccsee_typespec
_TEXT	SEGMENT
parser$ = 8
ccsee_typespec PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+128]
	lea	rdx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+120]
	cmovb	rdx, rax
; Line 116
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 44					; 0000002cH
	cmp	ecx, 19
	cmovbe	rax, rdx
; Line 122
	ret	0
ccsee_typespec ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_type_qualifier
_TEXT	SEGMENT
parser$ = 8
kttc__peek_type_qualifier PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+128]
	lea	rdx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+120]
	cmovb	rdx, rax
; Line 103
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 35					; 00000023H
	cmp	ecx, 2
	cmovbe	rax, rdx
; Line 109
	ret	0
kttc__peek_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_alignment_specifier
_TEXT	SEGMENT
parser$ = 8
kttc__peek_alignment_specifier PROC			; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+128]
	lea	rdx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+120]
	cmovb	rdx, rax
; Line 90
	xor	eax, eax
	mov	ecx, DWORD PTR [rdx]
	sub	ecx, 31
	cmp	ecx, 1
	cmovbe	rax, rdx
; Line 96
	ret	0
kttc__peek_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccsee_end
_TEXT	SEGMENT
parser$ = 8
ccsee_end PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+128]
	lea	rdx, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+120]
	cmovb	rdx, rax
; Line 77
	xor	eax, eax
	cmp	DWORD PTR [rdx], eax
	sete	al
; Line 83
	ret	0
ccsee_end ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccsee
_TEXT	SEGMENT
parser$ = 8
kind$ = 16
ccsee	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rax, QWORD PTR [rcx+128]
	lea	r8, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rax, QWORD PTR [rcx+120]
	cmovb	r8, rax
; Line 77
	xor	eax, eax
	cmp	DWORD PTR [r8], edx
	sete	al
; Line 78
	ret	0
ccsee	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccpeep
_TEXT	SEGMENT
parser$ = 8
ccpeep	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	mov	rdx, QWORD PTR [rcx+128]
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	cmp	rdx, QWORD PTR [rcx+120]
	cmovb	rax, rdx
; Line 73
	ret	0
ccpeep	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT kttc__peek_ahead
_TEXT	SEGMENT
parser$ = 8
offset$ = 16
kttc__peek_ahead PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 62
	movsxd	rax, edx
	imul	r8, rax, 56				; 00000038H
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
	add	r8, QWORD PTR [rcx+128]
	cmp	r8, QWORD PTR [rcx+120]
	cmovb	rax, r8
; Line 68
	ret	0
kttc__peek_ahead ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_include
_TEXT	SEGMENT
reader$ = 96
name$ = 104
size$ = 112
ccread_include PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 39
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 64					; 00000040H
; File W:\cpp\void\ktt-c\ccfio.c
; Line 36
	xor	edi, edi
; File W:\cpp\void\ktt-c\ccread.c
; Line 39
	mov	rax, rdx
	mov	r14, rcx
; File W:\cpp\void\ktt-c\ccfio.c
; Line 36
	mov	QWORD PTR [rsp+48], rdi
	mov	DWORD PTR [rsp+40], edi
	xor	r9d, r9d
	mov	edx, -1073741824			; c0000000H
	mov	DWORD PTR [rsp+32], 4
	lea	r8d, QWORD PTR [rdi+3]
	mov	rcx, rax
	call	QWORD PTR __imp_CreateFileA
; Line 37
	mov	esi, edi
; File W:\cpp\void\ktt-c\ccread.c
; Line 42
	mov	DWORD PTR size$[rsp], edi
; File W:\cpp\void\ktt-c\ccfio.c
; Line 21
	cmp	rax, -1
; Line 37
	cmovne	rsi, rax
; Line 21
	cmp	rsi, -1
; Line 42
	je	SHORT $LN12@ccread_inc
; Line 26
	xor	edx, edx
	mov	QWORD PTR [rsp+104], rbp
	mov	rcx, rsi
	call	QWORD PTR __imp_GetFileSize
; Line 46
	mov	ebp, DWORD PTR size$[rsp]
	cmp	eax, ebp
	jb	SHORT $LN22@ccread_inc
; Line 47
	test	ebp, ebp
	mov	QWORD PTR [rsp+96], rbx
	cmove	ebp, eax
; Line 48
	mov	ecx, ebp
	call	malloc
; Line 50
	lea	r9, QWORD PTR size$[rsp]
	mov	QWORD PTR [rsp+32], rdi
	mov	r8d, ebp
	mov	rdx, rax
	mov	rcx, rsi
	mov	rbx, rax
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	cmove	rbx, rdi
	mov	rdi, rbx
	mov	rbx, QWORD PTR [rsp+96]
$LN22@ccread_inc:
	mov	rbp, QWORD PTR [rsp+104]
$LN12@ccread_inc:
; Line 31
	mov	rcx, rsi
	call	QWORD PTR __imp_CloseHandle
; File W:\cpp\void\ktt-c\ccread.c
; Line 45
	mov	edx, DWORD PTR size$[rsp]
	mov	r8, rdi
	mov	rcx, r14
	call	ccreader_move
; Line 49
	add	rsp, 64					; 00000040H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
ccread_include ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccreader_move
_TEXT	SEGMENT
$T1 = 32
parser$ = 128
len$ = 136
min$ = 144
ccreader_move PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 28
	mov	r11, rsp
	push	rbx
	push	rbp
	sub	rsp, 104				; 00000068H
; File W:\cpp\void\ktt-c\cclex.c
; Line 167
	mov	QWORD PTR [r11+8], rsi
	lea	rax, QWORD PTR [rdx+r8]
	mov	QWORD PTR [r11+16], rdi
; File W:\cpp\void\ktt-c\ccread.c
; Line 28
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\cclex.c
; Line 167
	mov	QWORD PTR [r11+24], r14
	xor	ebp, ebp
	mov	QWORD PTR [r11-24], r15
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+24], r8
	mov	QWORD PTR [rcx+8], r8
$LL14@ccreader_m:
; Line 214
	mov	rcx, rbx
	call	cclex_next_token_internal
; Line 217
	mov	eax, DWORD PTR [rbx+56]
	cmp	eax, 13
	je	SHORT $LL14@ccreader_m
	cmp	eax, 11
	je	SHORT $LL14@ccreader_m
	cmp	eax, 1
	je	SHORT $LL14@ccreader_m
	cmp	eax, 2
	je	SHORT $LL14@ccreader_m
; Line 220
	test	eax, eax
; File W:\cpp\void\ktt-c\ccread.c
; Line 53
	jle	$LN9@ccreader_m
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 283
	mov	rax, QWORD PTR [rbx+112]
; Line 241
	mov	esi, ebp
; Line 284
	test	rax, rax
; Line 242
	mov	r14d, ebp
; Line 284
	lea	rdi, QWORD PTR [rax-24]
	cmove	rdi, rbp
; Line 246
	test	rdi, rdi
	je	SHORT $LN21@ccreader_m
; Line 247
	mov	esi, DWORD PTR [rdi+16]
; Line 248
	mov	r14d, DWORD PTR [rdi+20]
$LN21@ccreader_m:
; Line 256
	lea	r15d, DWORD PTR [r14+56]
	mov	rax, rdi
	cmp	esi, r15d
	jae	SHORT $LN24@ccreader_m
; Line 260
	lea	ecx, DWORD PTR [rsi+rsi]
; Line 265
	mov	eax, r15d
	cmp	ecx, r15d
	cmovae	eax, ecx
	mov	rcx, rdi
	mov	esi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rdi, rdi
	jne	SHORT $LN24@ccreader_m
; Line 269
	mov	QWORD PTR [rax], rbp
	mov	QWORD PTR [rax+8], rbp
$LN24@ccreader_m:
; Line 273
	mov	DWORD PTR [rax+16], esi
; Line 285
	lea	r8, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], r15d
; Line 286
	mov	eax, 613566757				; 24924925H
	mov	QWORD PTR [rbx+112], r8
; File W:\cpp\void\ktt-c\cclex.c
; Line 204
	movups	xmm0, XMMWORD PTR [rbx+56]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 286
	mul	r14d
	sub	r14d, edx
	shr	r14d, 1
	lea	eax, DWORD PTR [rdx+r14]
	shr	eax, 5
; File W:\cpp\void\ktt-c\ccread.c
; Line 55
	imul	rcx, rax, 56				; 00000038H
; File W:\cpp\void\ktt-c\cclex.c
; Line 205
	xor	eax, eax
	mov	QWORD PTR $T1[rsp+48], rax
	movups	XMMWORD PTR [rcx+r8], xmm0
	movups	xmm1, XMMWORD PTR [rbx+72]
	movups	XMMWORD PTR [rcx+r8+16], xmm1
	movups	xmm0, XMMWORD PTR [rbx+88]
	movups	XMMWORD PTR [rcx+r8+32], xmm0
	movsd	xmm1, QWORD PTR [rbx+104]
	xorps	xmm0, xmm0
; Line 204
	movsd	QWORD PTR [rcx+r8+48], xmm1
; Line 205
	movups	XMMWORD PTR [rbx+56], xmm0
	movups	XMMWORD PTR [rbx+72], xmm0
	movups	XMMWORD PTR [rbx+88], xmm0
	movsd	xmm0, QWORD PTR $T1[rsp+48]
	movsd	QWORD PTR [rbx+104], xmm0
; File W:\cpp\void\ktt-c\ccread.c
; Line 57
	jmp	$LL14@ccreader_m
$LN9@ccreader_m:
; Line 33
	mov	r8, QWORD PTR [rbx+112]
	mov	r15, QWORD PTR [rsp+96]
	mov	r14, QWORD PTR [rsp+144]
	mov	rdi, QWORD PTR [rsp+136]
	mov	rsi, QWORD PTR [rsp+128]
	mov	QWORD PTR [rbx+136], rbp
	mov	QWORD PTR [rbx+128], r8
; Line 34
	test	r8, r8
	je	SHORT $LN3@ccreader_m
	mov	ebp, DWORD PTR [r8-4]
$LN3@ccreader_m:
	mov	ecx, ebp
	mov	rax, 2635249153387078803		; 2492492492492493H
	mul	rcx
	sub	rcx, rdx
	shr	rcx, 1
	add	rcx, rdx
	shr	rcx, 5
	imul	rax, rcx, 56				; 00000038H
	add	rax, r8
	mov	QWORD PTR [rbx+120], rax
; Line 35
	add	rsp, 104				; 00000068H
	pop	rbp
	pop	rbx
	ret	0
ccreader_move ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_all_tokens
_TEXT	SEGMENT
$T1 = 32
parser$ = 128
ccread_all_tokens PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 53
	mov	rax, rsp
	push	rbx
	push	r15
	sub	rsp, 104				; 00000068H
	mov	QWORD PTR [rax+8], rbp
	mov	rbx, rcx
	mov	QWORD PTR [rax+16], rsi
	xor	r15d, r15d
	mov	QWORD PTR [rax+24], rdi
	mov	QWORD PTR [rax-24], r14
$LL8@ccread_all:
; File W:\cpp\void\ktt-c\cclex.c
; Line 214
	mov	rcx, rbx
	call	cclex_next_token_internal
; Line 217
	mov	eax, DWORD PTR [rbx+56]
	cmp	eax, 13
	je	SHORT $LL8@ccread_all
	cmp	eax, 11
	je	SHORT $LL8@ccread_all
	cmp	eax, 1
	je	SHORT $LL8@ccread_all
	cmp	eax, 2
	je	SHORT $LL8@ccread_all
; Line 220
	test	eax, eax
; File W:\cpp\void\ktt-c\ccread.c
; Line 53
	jle	$LN3@ccread_all
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 283
	mov	rax, QWORD PTR [rbx+112]
; Line 241
	mov	esi, r15d
; Line 284
	test	rax, rax
; Line 242
	mov	ebp, r15d
; Line 284
	lea	rdi, QWORD PTR [rax-24]
	cmove	rdi, r15
; Line 246
	test	rdi, rdi
	je	SHORT $LN15@ccread_all
; Line 247
	mov	esi, DWORD PTR [rdi+16]
; Line 248
	mov	ebp, DWORD PTR [rdi+20]
$LN15@ccread_all:
; Line 256
	lea	r14d, DWORD PTR [rbp+56]
	mov	rax, rdi
	cmp	esi, r14d
	jae	SHORT $LN18@ccread_all
; Line 260
	lea	ecx, DWORD PTR [rsi+rsi]
; Line 265
	mov	eax, r14d
	cmp	ecx, r14d
	cmovae	eax, ecx
	mov	rcx, rdi
	mov	esi, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
; Line 267
	test	rdi, rdi
	jne	SHORT $LN18@ccread_all
; Line 269
	mov	QWORD PTR [rax], r15
	mov	QWORD PTR [rax+8], r15
$LN18@ccread_all:
; Line 273
	mov	DWORD PTR [rax+16], esi
; Line 285
	lea	r8, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], r14d
; Line 286
	mov	eax, 613566757				; 24924925H
	mov	QWORD PTR [rbx+112], r8
; File W:\cpp\void\ktt-c\cclex.c
; Line 204
	movups	xmm0, XMMWORD PTR [rbx+56]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 286
	mul	ebp
	sub	ebp, edx
	shr	ebp, 1
	lea	eax, DWORD PTR [rdx+rbp]
	shr	eax, 5
; File W:\cpp\void\ktt-c\ccread.c
; Line 55
	imul	rcx, rax, 56				; 00000038H
; File W:\cpp\void\ktt-c\cclex.c
; Line 205
	xor	eax, eax
	mov	QWORD PTR $T1[rsp+48], rax
	movups	XMMWORD PTR [rcx+r8], xmm0
	movups	xmm1, XMMWORD PTR [rbx+72]
	movups	XMMWORD PTR [rcx+r8+16], xmm1
	movups	xmm0, XMMWORD PTR [rbx+88]
	movups	XMMWORD PTR [rcx+r8+32], xmm0
	movsd	xmm1, QWORD PTR [rbx+104]
	xorps	xmm0, xmm0
; Line 204
	movsd	QWORD PTR [rcx+r8+48], xmm1
; Line 205
	movups	XMMWORD PTR [rbx+56], xmm0
	movups	XMMWORD PTR [rbx+72], xmm0
	movups	XMMWORD PTR [rbx+88], xmm0
	movsd	xmm0, QWORD PTR $T1[rsp+48]
	movsd	QWORD PTR [rbx+104], xmm0
; File W:\cpp\void\ktt-c\ccread.c
; Line 57
	jmp	$LL8@ccread_all
$LN3@ccread_all:
	mov	r14, QWORD PTR [rsp+96]
; Line 58
	mov	rdi, QWORD PTR [rsp+144]
	mov	rsi, QWORD PTR [rsp+136]
	mov	rbp, QWORD PTR [rsp+128]
	add	rsp, 104				; 00000068H
	pop	r15
	pop	rbx
	ret	0
ccread_all_tokens ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_uninit
_TEXT	SEGMENT
parser$ = 8
ccread_uninit PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 19
	mov	rax, QWORD PTR [rcx+112]
	xor	edx, edx
	test	rax, rax
	lea	rcx, QWORD PTR [rax-24]
	cmove	rcx, rdx
	jmp	free
ccread_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccread_init
_TEXT	SEGMENT
$T1 = 32
parser$ = 112
ccread_init PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	push	rbx
	sub	rsp, 96					; 00000060H
	xorps	xmm0, xmm0
	xorps	xmm1, xmm1
	movups	XMMWORD PTR [rcx], xmm0
; File W:\cpp\void\ktt-c\cclex.c
; Line 173
	xor	eax, eax
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	mov	rbx, rcx
	movups	XMMWORD PTR [rcx+16], xmm0
; File W:\cpp\void\ktt-c\cclex.c
; Line 173
	mov	QWORD PTR $T1[rsp+48], rax
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	XMMWORD PTR [rcx+48], xmm0
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	XMMWORD PTR [rcx+80], xmm0
	movups	XMMWORD PTR [rcx+96], xmm0
	movups	XMMWORD PTR [rcx+112], xmm0
	movups	XMMWORD PTR [rcx+128], xmm0
; File W:\cpp\void\ktt-c\cclex.c
; Line 175
	mov	DWORD PTR [rcx+32], 1024		; 00000400H
	movsd	xmm0, QWORD PTR $T1[rsp+48]
	movups	XMMWORD PTR [rcx+56], xmm1
	movups	XMMWORD PTR [rcx+72], xmm1
	movups	XMMWORD PTR [rcx+88], xmm1
	movsd	QWORD PTR [rcx+104], xmm0
; Line 177
	mov	ecx, 24576				; 00006000H
	call	malloc
; Line 178
	mov	ecx, DWORD PTR [rbx+32]
	xor	edx, edx
	mov	QWORD PTR [rbx+40], rax
	lea	r8, QWORD PTR [rcx+rcx*2]
	mov	rcx, rax
	shl	r8, 3
	call	memset
; Line 180
	mov	rcx, rbx
	call	cclex_hash_init
; File W:\cpp\void\ktt-c\ccread.c
; Line 11
	xor	eax, eax
	mov	QWORD PTR [rbx+136], rax
; Line 12
	mov	QWORD PTR [rbx+128], rax
; Line 13
	mov	QWORD PTR [rbx+120], rax
; Line 14
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
ccread_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_readstr
_TEXT	SEGMENT
l$ = 80
str$ = 88
cclex_readstr PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 234
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 238
	xor	r9d, r9d
	mov	DWORD PTR [rcx+56], 17
	lea	r13, QWORD PTR [rcx+64]
; Line 244
	mov	esi, r9d
	mov	QWORD PTR [r13], r9
	lea	rbx, QWORD PTR [rdx+1]
	movzx	r12d, BYTE PTR [rdx]
	lea	r8, OFFSET FLAT:__ImageBase
	lea	r14d, QWORD PTR [r9+32]
	mov	edx, r9d
	npad	4
$LL4@cclex_read:
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 284
	test	rdx, rdx
	lea	rdi, QWORD PTR [rdx-24]
; Line 241
	mov	ebp, r9d
; Line 242
	mov	r15d, r9d
; Line 284
	cmove	rdi, r9
; Line 246
	test	rdi, rdi
	je	SHORT $LN32@cclex_read
; Line 247
	mov	ebp, DWORD PTR [rdi+16]
; Line 248
	mov	r15d, DWORD PTR [rdi+20]
$LN32@cclex_read:
; Line 256
	lea	ecx, DWORD PTR [r15+r14]
	mov	rax, rdi
	cmp	ebp, ecx
	jae	SHORT $LN35@cclex_read
; Line 260
	lea	eax, DWORD PTR [rbp*2]
; Line 265
	cmp	eax, ecx
	cmovae	ecx, eax
	mov	ebp, ecx
	lea	rdx, QWORD PTR [rcx+24]
	mov	rcx, rdi
	call	realloc
; Line 267
	xor	r9d, r9d
	lea	r8, OFFSET FLAT:__ImageBase
	test	rdi, rdi
	jne	SHORT $LN35@cclex_read
; Line 269
	mov	QWORD PTR [rax], r9
	mov	QWORD PTR [rax+8], r9
$LN35@cclex_read:
; Line 273
	mov	DWORD PTR [rax+16], ebp
; Line 285
	lea	rdx, QWORD PTR [rax+24]
; Line 274
	mov	DWORD PTR [rax+20], r15d
; File W:\cpp\void\ktt-c\cclex.c
; Line 244
	mov	eax, r15d
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 285
	mov	QWORD PTR [r13], rdx
; File W:\cpp\void\ktt-c\cclex.c
; Line 244
	add	rax, rdx
	je	$LN3@cclex_read
; Line 246
	cmp	esi, r14d
	jae	$LN2@cclex_read
	npad	4
$LL7@cclex_read:
; Line 248
	movzx	ecx, BYTE PTR [rbx]
	cmp	cl, r12b
	je	$LN39@cclex_read
; Line 257
	cmp	cl, 92					; 0000005cH
	jne	SHORT $LN12@cclex_read
; Line 258
	movsx	ecx, BYTE PTR [rbx+1]
	add	ecx, -34				; ffffffffffffffdeH
	cmp	ecx, 86					; 00000056H
	ja	SHORT $LN25@cclex_read
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR $LN45@cclex_read[r8+rcx]
	mov	edx, DWORD PTR $LN46@cclex_read[r8+rcx*4]
	add	rdx, r8
	jmp	rdx
$LN14@cclex_read:
; Line 259
	mov	BYTE PTR [rax], 92			; 0000005cH
; Line 280
	add	rbx, 2
	jmp	SHORT $LN49@cclex_read
$LN15@cclex_read:
; Line 260
	mov	BYTE PTR [rax], 39			; 00000027H
; Line 280
	add	rbx, 2
	jmp	SHORT $LN49@cclex_read
$LN16@cclex_read:
; Line 261
	mov	BYTE PTR [rax], 34			; 00000022H
; Line 280
	add	rbx, 2
	jmp	SHORT $LN49@cclex_read
$LN17@cclex_read:
; Line 262
	mov	BYTE PTR [rax], 9
; Line 280
	add	rbx, 2
	jmp	SHORT $LN49@cclex_read
$LN18@cclex_read:
; Line 263
	mov	BYTE PTR [rax], 12
; Line 280
	add	rbx, 2
	jmp	SHORT $LN49@cclex_read
$LN19@cclex_read:
; Line 264
	mov	BYTE PTR [rax], 10
; Line 280
	add	rbx, 2
	jmp	SHORT $LN49@cclex_read
$LN20@cclex_read:
; Line 265
	mov	BYTE PTR [rax], 13
; Line 280
	add	rbx, 2
	jmp	SHORT $LN49@cclex_read
$LN25@cclex_read:
	mov	BYTE PTR [rax], 0
	add	rbx, 2
	jmp	SHORT $LN49@cclex_read
$LN12@cclex_read:
; Line 281
	mov	BYTE PTR [rax], cl
	inc	rbx
$LN49@cclex_read:
; Line 246
	mov	ecx, 1
	inc	esi
	add	rax, rcx
	cmp	esi, r14d
	jb	$LL7@cclex_read
	mov	rdx, QWORD PTR [r13]
$LN2@cclex_read:
; Line 244
	add	r14d, 32				; 00000020H
	jmp	$LL4@cclex_read
$LN39@cclex_read:
; Line 249
	mov	BYTE PTR [rax], 0
; Line 251
	lea	r9d, DWORD PTR [rsi+1]
; Line 253
	mov	rax, QWORD PTR l$[rsp]
; Line 254
	xor	r8d, r8d
	mov	rcx, r13
	lea	edx, QWORD PTR [r8+1]
	mov	DWORD PTR [rax+56], 15
	call	ccdlb_arradd
; Line 255
	lea	rax, QWORD PTR [rbx+1]
	jmp	SHORT $LN1@cclex_read
$LN3@cclex_read:
; Line 284
	mov	rax, rbx
$LN1@cclex_read:
; Line 285
	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
	npad	1
$LN46@cclex_read:
	DD	$LN16@cclex_read
	DD	$LN15@cclex_read
	DD	$LN25@cclex_read
	DD	$LN14@cclex_read
	DD	$LN18@cclex_read
	DD	$LN19@cclex_read
	DD	$LN20@cclex_read
	DD	$LN17@cclex_read
	DD	$LN25@cclex_read
$LN45@cclex_read:
	DB	0
	DB	8
	DB	8
	DB	8
	DB	8
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	5
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	7
	DB	2
	DB	8
	DB	8
	DB	2
cclex_readstr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_identifier
_TEXT	SEGMENT
l$ = 64
str$ = 72
cclex_identifier PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 226
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
; Line 196
	mov	r9, rdx
	mov	rdx, 149533581247487			; 000087fffffe03ffH
; Line 226
	mov	rsi, rcx
; Line 196
	xor	ebx, ebx
	npad	12
$LL6@cclex_iden:
; Line 198
	movzx	eax, BYTE PTR [r9]
	lea	r8d, DWORD PTR [rax-97]
	cmp	r8b, 25
	jbe	SHORT $LN4@cclex_iden
	sub	al, 48					; 00000030H
	cmp	al, 47					; 0000002fH
	ja	SHORT $LN5@cclex_iden
	bt	rdx, rax
	jae	SHORT $LN5@cclex_iden
$LN4@cclex_iden:
	inc	ebx
	inc	r9
	jmp	SHORT $LL6@cclex_iden
$LN5@cclex_iden:
; Line 227
	lea	rax, QWORD PTR [rsi+56]
; Line 228
	mov	QWORD PTR [rsp+40], 0
	mov	r9d, 1
	mov	DWORD PTR [rax], 18
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], rax
	mov	edx, ebx
	mov	rcx, rsi
	call	cclex_hash
	mov	QWORD PTR [rsi+64], rax
; Line 230
	mov	rsi, QWORD PTR [rsp+72]
	movsxd	rax, ebx
	mov	rbx, QWORD PTR [rsp+64]
	add	rax, rdi
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
cclex_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_next_token
_TEXT	SEGMENT
l$ = 48
cclex_next_token PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 212
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	npad	7
$LL4@cclex_next:
; Line 214
	mov	rcx, rbx
	call	cclex_next_token_internal
; Line 217
	mov	edx, DWORD PTR [rbx+56]
	cmp	edx, 13
	je	SHORT $LL4@cclex_next
	cmp	edx, 11
	je	SHORT $LL4@cclex_next
	cmp	edx, 1
	je	SHORT $LL4@cclex_next
	cmp	edx, 2
	je	SHORT $LL4@cclex_next
; Line 220
	xor	eax, eax
	test	edx, edx
	setg	al
; Line 221
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cclex_next_token ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_next_token_internal
_TEXT	SEGMENT
l$ = 80
cclex_next_token_internal PROC				; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 290
	push	rbx
	push	rdi
	push	r14
	sub	rsp, 48					; 00000030H
; Line 291
	mov	rdi, QWORD PTR [rcx+16]
	mov	rbx, rcx
; Line 298
	mov	r14, QWORD PTR [rcx]
	mov	QWORD PTR [rcx+24], rdi
	cmp	rdi, r14
	jb	SHORT $LN15@cclex_next
; Line 299
	xor	r9d, r9d
	mov	DWORD PTR [rcx+56], r9d
; Line 645
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rbx
	ret	0
$LN15@cclex_next:
; Line 302
	movsx	rdx, BYTE PTR [rdi]
	mov	QWORD PTR [rsp+96], rsi
	mov	QWORD PTR [rsp+104], r15
	lea	r15, OFFSET FLAT:__ImageBase
	cmp	edx, 126				; 0000007eH
	ja	$LN16@cclex_next
	movzx	eax, BYTE PTR $LN219@cclex_next[r15+rdx]
	mov	ecx, DWORD PTR $LN220@cclex_next[r15+rax*4]
	add	rcx, r15
	jmp	rcx
$LN17@cclex_next:
; Line 312
	cmp	dl, 48					; 00000030H
	jne	SHORT $LN27@cclex_next
; Line 313
	movzx	eax, BYTE PTR [rdi+1]
	cmp	al, 98					; 00000062H
	je	SHORT $LN33@cclex_next
	cmp	al, 100					; 00000064H
	je	SHORT $LN31@cclex_next
	cmp	al, 104					; 00000068H
	je	SHORT $LN29@cclex_next
	cmp	al, 111					; 0000006fH
	je	SHORT $LN32@cclex_next
	cmp	al, 120					; 00000078H
	je	SHORT $LN29@cclex_next
; Line 332
	mov	r11d, 10
	jmp	SHORT $LN4@cclex_next
$LN32@cclex_next:
; Line 324
	mov	r11d, 8
; Line 325
	add	rdi, 2
; Line 326
	jmp	SHORT $LN226@cclex_next
$LN29@cclex_next:
; Line 316
	mov	r11d, 16
; Line 317
	add	rdi, 2
; Line 318
	jmp	SHORT $LN226@cclex_next
$LN31@cclex_next:
; Line 320
	mov	r11d, 10
; Line 321
	add	rdi, 2
; Line 322
	jmp	SHORT $LN226@cclex_next
$LN33@cclex_next:
; Line 328
	mov	r11d, 2
; Line 329
	add	rdi, r11
$LN226@cclex_next:
; Line 338
	mov	QWORD PTR [rbx+16], rdi
$LN4@cclex_next:
	xor	r9d, r9d
	mov	esi, r9d
; Line 339
	cmp	rdi, r14
	jae	$LN221@cclex_next
	jmp	SHORT $LN211@cclex_next
$LN27@cclex_next:
; Line 336
	xor	r9d, r9d
	mov	r11d, 10
	mov	esi, r9d
$LN211@cclex_next:
	mov	QWORD PTR [rsp+88], rbp
	mov	r8, rdi
	mov	ebp, r11d
	mov	r10d, r11d
$LL6@cclex_next:
; Line 340
	movsx	rdx, BYTE PTR [r8]
	cmp	dl, 48					; 00000030H
	jl	SHORT $LN35@cclex_next
	cmp	dl, 57					; 00000039H
	jg	SHORT $LN35@cclex_next
; Line 341
	imul	rsi, r10
	mov	r10, rbp
	add	rsi, -48				; ffffffffffffffd0H
	add	rsi, rdx
; Line 342
	jmp	SHORT $LN227@cclex_next
$LN35@cclex_next:
; Line 343
	lea	eax, DWORD PTR [rdx-97]
	cmp	al, 5
	ja	SHORT $LN37@cclex_next
; Line 344
	mov	rcx, r10
	imul	rcx, rsi
	lea	rsi, QWORD PTR [rdx-87]
; Line 345
	jmp	SHORT $LN228@cclex_next
$LN37@cclex_next:
; Line 346
	mov	rdi, r8
	cmp	dl, 65					; 00000041H
	jl	SHORT $LN225@cclex_next
	cmp	dl, 70					; 00000046H
	jg	SHORT $LN225@cclex_next
; Line 347
	mov	rcx, r10
	imul	rcx, rsi
	lea	rsi, QWORD PTR [rdx-55]
$LN228@cclex_next:
; Line 339
	add	rsi, rcx
$LN227@cclex_next:
	mov	eax, 1
	lea	rdi, QWORD PTR [rax+r8]
	mov	QWORD PTR [rbx+16], rdi
	mov	r8, rdi
	cmp	rdi, r14
	jb	SHORT $LL6@cclex_next
$LN225@cclex_next:
	mov	rbp, QWORD PTR [rsp+88]
$LN221@cclex_next:
; Line 352
	cmp	BYTE PTR [rdi], 46			; 0000002eH
	jne	$LN41@cclex_next
; Line 356
	movsd	xmm1, QWORD PTR __real@3ff0000000000000
	inc	rdi
	mov	QWORD PTR [rbx+16], rdi
; Line 359
	cmp	rdi, r14
	jae	SHORT $LN222@cclex_next
	mov	r10d, r11d
	mov	r8d, r11d
	npad	5
$LL10@cclex_next:
; Line 360
	movsx	rdx, BYTE PTR [rdi]
	lea	eax, DWORD PTR [rdx-48]
	cmp	al, 9
	ja	SHORT $LN43@cclex_next
; Line 361
	imul	r9, r8
	mov	r8, r10
	add	r9, -48					; ffffffffffffffd0H
	add	r9, rdx
; Line 362
	jmp	SHORT $LN229@cclex_next
$LN43@cclex_next:
; Line 363
	lea	eax, DWORD PTR [rdx-97]
	cmp	al, 5
	ja	SHORT $LN45@cclex_next
; Line 364
	mov	rcx, r8
	imul	rcx, r9
	lea	r9, QWORD PTR [rdx-87]
; Line 365
	jmp	SHORT $LN230@cclex_next
$LN45@cclex_next:
; Line 366
	lea	eax, DWORD PTR [rdx-65]
	cmp	al, 5
	ja	SHORT $LN222@cclex_next
; Line 367
	mov	rcx, r8
	imul	rcx, r9
	lea	r9, QWORD PTR [rdx-55]
$LN230@cclex_next:
; Line 359
	add	r9, rcx
$LN229@cclex_next:
	movd	xmm0, r11d
	mov	eax, 1
	add	rdi, rax
	mov	QWORD PTR [rbx+16], rdi
	cvtdq2pd xmm0, xmm0
	mulsd	xmm1, xmm0
	cmp	rdi, r14
	jb	SHORT $LL10@cclex_next
$LN222@cclex_next:
; Line 373
	xorps	xmm0, xmm0
	test	r9, r9
	js	SHORT $LN217@cclex_next
	cvtsi2sd xmm0, r9
	jmp	SHORT $LN218@cclex_next
$LN217@cclex_next:
	mov	rax, r9
	and	r9d, 1
	shr	rax, 1
	or	rax, r9
	cvtsi2sd xmm0, rax
	addsd	xmm0, xmm0
$LN218@cclex_next:
	divsd	xmm0, xmm1
	xorps	xmm1, xmm1
	test	rsi, rsi
	js	SHORT $LN215@cclex_next
	cvtsi2sd xmm1, rsi
	mov	eax, 20
	addsd	xmm0, xmm1
	movsd	QWORD PTR [rbx+64], xmm0
; Line 378
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN215@cclex_next:
; Line 373
	mov	rax, rsi
	and	esi, 1
	shr	rax, 1
	or	rax, rsi
	cvtsi2sd xmm1, rax
	mov	eax, 20
	addsd	xmm1, xmm1
	addsd	xmm0, xmm1
	movsd	QWORD PTR [rbx+64], xmm0
; Line 378
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN41@cclex_next:
; Line 376
	mov	eax, 19
	mov	QWORD PTR [rbx+64], rsi
; Line 378
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN49@cclex_next:
; Line 196
	xor	r9d, r9d
; Line 391
	mov	rdx, rdi
; Line 196
	mov	esi, r9d
; Line 391
	mov	r8, 149533581247487			; 000087fffffe03ffH
	npad	3
$LL188@cclex_next:
; Line 198
	movzx	ecx, BYTE PTR [rdx]
	lea	eax, DWORD PTR [rcx-97]
	cmp	al, 25
	jbe	SHORT $LN186@cclex_next
	sub	cl, 48					; 00000030H
	cmp	cl, 47					; 0000002fH
	ja	SHORT $LN187@cclex_next
	bt	r8, rcx
	jae	SHORT $LN187@cclex_next
$LN186@cclex_next:
	inc	esi
	inc	rdx
	jmp	SHORT $LL188@cclex_next
$LN187@cclex_next:
; Line 227
	lea	rax, QWORD PTR [rbx+56]
; Line 228
	mov	QWORD PTR [rsp+40], r9
	mov	r9d, 1
	mov	DWORD PTR [rax], 18
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], rax
	mov	edx, esi
	mov	rcx, rbx
	call	cclex_hash
	mov	QWORD PTR [rbx+64], rax
; Line 229
	movsxd	rax, esi
	add	rax, rdi
; Line 392
	jmp	$LN231@cclex_next
$LN102@cclex_next:
; Line 394
	mov	rdx, rdi
	mov	rcx, rbx
	call	cclex_readstr
; Line 395
	jmp	$LN231@cclex_next
$LN103@cclex_next:
; Line 397
	mov	r11d, 10
	mov	DWORD PTR [rbx+56], r11d
; Line 398
	jmp	$LN232@cclex_next
$LN104@cclex_next:
; Line 400
	mov	DWORD PTR [rbx+56], 9
; Line 401
	jmp	$LN232@cclex_next
$LN105@cclex_next:
; Line 406
	mov	DWORD PTR [rbx+56], 3
; Line 407
	jmp	$LN232@cclex_next
$LN106@cclex_next:
; Line 409
	mov	DWORD PTR [rbx+56], 4
; Line 410
	jmp	$LN232@cclex_next
$LN107@cclex_next:
; Line 412
	mov	DWORD PTR [rbx+56], 7
; Line 413
	jmp	$LN232@cclex_next
$LN108@cclex_next:
; Line 415
	mov	r11d, 8
	mov	DWORD PTR [rbx+56], r11d
; Line 416
	jmp	$LN232@cclex_next
$LN109@cclex_next:
; Line 418
	mov	DWORD PTR [rbx+56], 5
; Line 419
	jmp	$LN232@cclex_next
$LN110@cclex_next:
; Line 421
	mov	DWORD PTR [rbx+56], 6
; Line 422
	jmp	$LN232@cclex_next
$LN111@cclex_next:
; Line 425
	mov	DWORD PTR [rbx+56], 86			; 00000056H
; Line 426
	jmp	$LN232@cclex_next
$LN112@cclex_next:
; Line 430
	cmp	BYTE PTR [rdi+1], 46			; 0000002eH
	lea	rax, QWORD PTR [rdi+1]
	jne	SHORT $LN113@cclex_next
	cmp	BYTE PTR [rdi+2], 46			; 0000002eH
	jne	SHORT $LN113@cclex_next
; Line 431
	lea	rax, QWORD PTR [rdi+3]
	mov	ecx, 12
; Line 435
	mov	QWORD PTR [rbx+16], rax
	mov	DWORD PTR [rbx+56], ecx
	jmp	$LN2@cclex_next
$LN113@cclex_next:
; Line 433
	mov	ecx, 90					; 0000005aH
; Line 435
	mov	QWORD PTR [rbx+16], rax
	mov	DWORD PTR [rbx+56], ecx
	jmp	$LN2@cclex_next
$LN115@cclex_next:
; Line 440
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rdi+1]
	jne	SHORT $LN116@cclex_next
; Line 441
	lea	rcx, QWORD PTR [rdi+2]
$LN116@cclex_next:
; Line 445
	mov	eax, 120				; 00000078H
	mov	QWORD PTR [rbx+16], rcx
	mov	r8d, 104				; 00000068H
	cmovne	eax, r8d
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN118@cclex_next:
; Line 451
	movzx	ecx, BYTE PTR [rdi+1]
	lea	rax, QWORD PTR [rdi+1]
	cmp	cl, 124					; 0000007cH
	jne	SHORT $LN119@cclex_next
; Line 452
	mov	DWORD PTR [rbx+56], 107			; 0000006bH
	lea	rax, QWORD PTR [rdi+2]
; Line 453
	jmp	$LN231@cclex_next
$LN119@cclex_next:
; Line 454
	cmp	cl, 61					; 0000003dH
	jne	SHORT $LN121@cclex_next
; Line 455
	mov	DWORD PTR [rbx+56], 121			; 00000079H
	lea	rax, QWORD PTR [rdi+2]
; Line 456
	jmp	$LN231@cclex_next
$LN121@cclex_next:
; Line 457
	mov	DWORD PTR [rbx+56], 105			; 00000069H
; Line 459
	jmp	$LN231@cclex_next
$LN123@cclex_next:
; Line 465
	movzx	ecx, BYTE PTR [rdi+1]
	lea	rax, QWORD PTR [rdi+1]
	cmp	cl, 38					; 00000026H
	jne	SHORT $LN124@cclex_next
; Line 466
	mov	DWORD PTR [rbx+56], 106			; 0000006aH
	lea	rax, QWORD PTR [rdi+2]
; Line 467
	jmp	$LN231@cclex_next
$LN124@cclex_next:
; Line 468
	cmp	cl, 61					; 0000003dH
	jne	SHORT $LN126@cclex_next
; Line 469
	mov	DWORD PTR [rbx+56], 119			; 00000077H
	lea	rax, QWORD PTR [rdi+2]
; Line 470
	jmp	$LN231@cclex_next
$LN126@cclex_next:
; Line 471
	mov	DWORD PTR [rbx+56], 103			; 00000067H
; Line 473
	jmp	$LN231@cclex_next
$LN128@cclex_next:
; Line 478
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rdi+1]
	jne	SHORT $LN129@cclex_next
; Line 479
	lea	rcx, QWORD PTR [rdi+2]
$LN129@cclex_next:
; Line 483
	mov	eax, 111				; 0000006fH
	mov	QWORD PTR [rbx+16], rcx
	mov	r8d, 93					; 0000005dH
	cmovne	eax, r8d
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN131@cclex_next:
; Line 488
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rdi+1]
	jne	SHORT $LN132@cclex_next
; Line 489
	lea	rcx, QWORD PTR [rdi+2]
$LN132@cclex_next:
; Line 493
	mov	eax, 110				; 0000006eH
	mov	QWORD PTR [rbx+16], rcx
	mov	r8d, 92					; 0000005cH
	cmovne	eax, r8d
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN134@cclex_next:
; Line 506
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rdi+1]
	jne	SHORT $LN135@cclex_next
; Line 507
	lea	rcx, QWORD PTR [rdi+2]
$LN135@cclex_next:
; Line 511
	mov	eax, 113				; 00000071H
	mov	QWORD PTR [rbx+16], rcx
	mov	r8d, 95					; 0000005fH
	cmovne	eax, r8d
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN137@cclex_next:
; Line 524
	movzx	ecx, BYTE PTR [rdi+1]
	lea	rax, QWORD PTR [rdi+1]
	cmp	cl, 62					; 0000003eH
	jne	SHORT $LN138@cclex_next
; Line 525
	mov	DWORD PTR [rbx+56], 91			; 0000005bH
	lea	rax, QWORD PTR [rdi+2]
; Line 526
	jmp	$LN231@cclex_next
$LN138@cclex_next:
; Line 527
	cmp	cl, 61					; 0000003dH
	jne	SHORT $LN140@cclex_next
; Line 528
	mov	DWORD PTR [rbx+56], 114			; 00000072H
	lea	rax, QWORD PTR [rdi+2]
; Line 529
	jmp	$LN231@cclex_next
$LN140@cclex_next:
; Line 530
	mov	DWORD PTR [rbx+56], 96			; 00000060H
; Line 532
	jmp	$LN231@cclex_next
$LN142@cclex_next:
; Line 537
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rdi+1]
	jne	SHORT $LN143@cclex_next
; Line 538
	lea	rcx, QWORD PTR [rdi+2]
$LN143@cclex_next:
; Line 542
	mov	eax, 101				; 00000065H
	mov	QWORD PTR [rbx+16], rcx
	mov	r8d, 109				; 0000006dH
	cmovne	eax, r8d
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN145@cclex_next:
; Line 552
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	mov	eax, 89					; 00000059H
	mov	ecx, 102				; 00000066H
	cmovne	ecx, eax
	lea	rax, QWORD PTR [rdi+2]
	mov	QWORD PTR [rbx+16], rax
	mov	DWORD PTR [rbx+56], ecx
	jmp	$LN2@cclex_next
$LN148@cclex_next:
; Line 557
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rdi+1]
	jne	SHORT $LN149@cclex_next
; Line 558
	lea	rcx, QWORD PTR [rdi+2]
$LN149@cclex_next:
; Line 562
	mov	eax, 117				; 00000075H
	mov	QWORD PTR [rbx+16], rcx
	mov	r8d, 99					; 00000063H
	cmovne	eax, r8d
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN151@cclex_next:
; Line 567
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rdi+1]
	jne	SHORT $LN152@cclex_next
; Line 568
	lea	rcx, QWORD PTR [rdi+2]
$LN152@cclex_next:
; Line 572
	mov	eax, 118				; 00000076H
	mov	QWORD PTR [rbx+16], rcx
	mov	r8d, 100				; 00000064H
	cmovne	eax, r8d
	mov	DWORD PTR [rbx+56], eax
	jmp	$LN2@cclex_next
$LN154@cclex_next:
; Line 577
	cmp	BYTE PTR [rdi+1], 61			; 0000003dH
	lea	rcx, QWORD PTR [rdi+1]
	jne	SHORT $LN155@cclex_next
; Line 578
	lea	rcx, QWORD PTR [rdi+2]
$LN155@cclex_next:
; Line 582
	mov	eax, 112				; 00000070H
	mov	QWORD PTR [rbx+16], rcx
	mov	r8d, 94					; 0000005eH
	cmovne	eax, r8d
	mov	DWORD PTR [rbx+56], eax
	jmp	SHORT $LN2@cclex_next
$LN157@cclex_next:
; Line 585
	lea	rax, QWORD PTR [rdi+2]
; Line 590
	mov	QWORD PTR [rbx+16], rax
	mov	DWORD PTR [rbx+56], -1
	jmp	SHORT $LN2@cclex_next
$LN160@cclex_next:
; Line 593
	xor	r9d, r9d
	mov	DWORD PTR [rbx+56], r9d
; Line 594
	jmp	SHORT $LN232@cclex_next
$LN161@cclex_next:
; Line 599
	mov	DWORD PTR [rbx+56], 11
; Line 600
	jmp	SHORT $LN232@cclex_next
$LN166@cclex_next:
; Line 602
	cmp	BYTE PTR [rdi+1], 10
	lea	rax, QWORD PTR [rdi+1]
	jne	SHORT $LN167@cclex_next
; Line 603
	lea	rax, QWORD PTR [rdi+2]
$LN167@cclex_next:
; Line 607
	mov	QWORD PTR [rbx+16], rax
	mov	DWORD PTR [rbx+56], 1
	jmp	SHORT $LN2@cclex_next
$LN169@cclex_next:
; Line 609
	mov	DWORD PTR [rbx+56], 1
; Line 610
	jmp	SHORT $LN232@cclex_next
$LN170@cclex_next:
; Line 612
	mov	r11d, 2
	mov	DWORD PTR [rbx+56], r11d
	jmp	SHORT $LN232@cclex_next
$LN16@cclex_next:
; Line 304
	mov	DWORD PTR [rbx+56], -1
$LN232@cclex_next:
; Line 616
	lea	rax, QWORD PTR [rdi+1]
$LN231@cclex_next:
	mov	QWORD PTR [rbx+16], rax
$LN2@cclex_next:
	and	DWORD PTR [rbx+104], -3			; fffffffdH
; Line 619
	mov	rdx, QWORD PTR [rbx+16]
	mov	r8, QWORD PTR [rbx]
	mov	rsi, QWORD PTR [rsp+96]
	cmp	rdx, r8
	jae	$LN224@cclex_next
	npad	8
$LL11@cclex_next:
; Line 620
	movsx	eax, BYTE PTR [rdx]
	add	eax, -8
	cmp	eax, 51					; 00000033H
	ja	SHORT $LN224@cclex_next
	cdqe
	movzx	eax, BYTE PTR $LN213@cclex_next[r15+rax]
	mov	ecx, DWORD PTR $LN214@cclex_next[r15+rax*4]
	add	rcx, r15
	jmp	rcx
$LN171@cclex_next:
; Line 622
	inc	rdx
; Line 623
	jmp	SHORT $LN233@cclex_next
$LN176@cclex_next:
; Line 625
	cmp	BYTE PTR [rdx+1], 10
	jne	SHORT $LN177@cclex_next
; Line 626
	add	rdx, 2
; Line 627
	jmp	SHORT $LN178@cclex_next
$LN177@cclex_next:
; Line 628
	inc	rdx
$LN178@cclex_next:
; Line 630
	mov	QWORD PTR [rbx+16], rdx
	mov	eax, DWORD PTR [rbx+104]
	lea	ecx, DWORD PTR [rax-1]
	xor	ecx, eax
	and	ecx, 1
	xor	ecx, eax
	mov	DWORD PTR [rbx+104], ecx
; Line 631
	jmp	SHORT $LN202@cclex_next
$LN179@cclex_next:
; Line 634
	mov	eax, DWORD PTR [rbx+104]
	inc	rdx
	lea	ecx, DWORD PTR [rax-1]
	xor	ecx, eax
	and	ecx, 1
	xor	ecx, eax
	mov	DWORD PTR [rbx+104], ecx
; Line 635
	jmp	SHORT $LN233@cclex_next
$LN180@cclex_next:
; Line 638
	mov	ecx, DWORD PTR [rbx+104]
	inc	rdx
	mov	eax, ecx
	shr	eax, 1
	lea	eax, DWORD PTR [rax*2-2]
	xor	eax, ecx
	and	eax, 2
	xor	eax, ecx
	mov	DWORD PTR [rbx+104], eax
$LN233@cclex_next:
; Line 619
	mov	QWORD PTR [rbx+16], rdx
$LN202@cclex_next:
	cmp	rdx, r8
	jb	$LL11@cclex_next
$LN224@cclex_next:
	mov	r15, QWORD PTR [rsp+104]
; Line 645
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rbx
	ret	0
$LN220@cclex_next:
	DD	$LN160@cclex_next
	DD	$LN161@cclex_next
	DD	$LN169@cclex_next
	DD	$LN166@cclex_next
	DD	$LN145@cclex_next
	DD	$LN102@cclex_next
	DD	$LN154@cclex_next
	DD	$LN123@cclex_next
	DD	$LN105@cclex_next
	DD	$LN106@cclex_next
	DD	$LN131@cclex_next
	DD	$LN134@cclex_next
	DD	$LN104@cclex_next
	DD	$LN137@cclex_next
	DD	$LN112@cclex_next
	DD	$LN128@cclex_next
	DD	$LN17@cclex_next
	DD	$LN103@cclex_next
	DD	$LN170@cclex_next
	DD	$LN151@cclex_next
	DD	$LN142@cclex_next
	DD	$LN148@cclex_next
	DD	$LN157@cclex_next
	DD	$LN49@cclex_next
	DD	$LN107@cclex_next
	DD	$LN108@cclex_next
	DD	$LN115@cclex_next
	DD	$LN109@cclex_next
	DD	$LN118@cclex_next
	DD	$LN110@cclex_next
	DD	$LN111@cclex_next
	DD	$LN16@cclex_next
$LN219@cclex_next:
	DB	0
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	1
	DB	1
	DB	2
	DB	1
	DB	1
	DB	3
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	31
	DB	1
	DB	4
	DB	5
	DB	31
	DB	31
	DB	6
	DB	7
	DB	31
	DB	8
	DB	9
	DB	10
	DB	11
	DB	12
	DB	13
	DB	14
	DB	15
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	16
	DB	17
	DB	18
	DB	19
	DB	20
	DB	21
	DB	22
	DB	31
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	24
	DB	31
	DB	25
	DB	26
	DB	23
	DB	31
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	23
	DB	27
	DB	28
	DB	29
	DB	30
	npad	1
$LN214@cclex_next:
	DD	$LN171@cclex_next
	DD	$LN179@cclex_next
	DD	$LN176@cclex_next
	DD	$LN180@cclex_next
	DD	$LN224@cclex_next
$LN213@cclex_next:
	DB	0
	DB	0
	DB	1
	DB	0
	DB	0
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
cclex_next_token_internal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_token
_TEXT	SEGMENT
$T1 = 0
l$ = 80
token$ = 88
cclex_token PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 204
	sub	rsp, 72					; 00000048H
	movups	xmm0, XMMWORD PTR [rcx+56]
; Line 205
	xor	eax, eax
	mov	QWORD PTR $T1[rsp+48], rax
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [rcx+72]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [rcx+88]
	movups	XMMWORD PTR [rdx+32], xmm0
	movsd	xmm1, QWORD PTR [rcx+104]
	xorps	xmm0, xmm0
	movsd	QWORD PTR [rdx+48], xmm1
	movups	XMMWORD PTR [rcx+56], xmm0
	movups	XMMWORD PTR [rcx+72], xmm0
	movups	XMMWORD PTR [rcx+88], xmm0
	movsd	xmm0, QWORD PTR $T1[rsp+48]
	movsd	QWORD PTR [rcx+104], xmm0
; Line 206
	add	rsp, 72					; 00000048H
	ret	0
cclex_token ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_idenlen
_TEXT	SEGMENT
s$ = 8
cclex_idenlen PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 195
	mov	r8, rcx
; Line 196
	xor	r9d, r9d
	mov	r10, 149533581247487			; 000087fffffe03ffH
$LL4@cclex_iden:
; Line 198
	movzx	eax, BYTE PTR [r8]
	lea	edx, DWORD PTR [rax-97]
	cmp	dl, 25
	jbe	SHORT $LN2@cclex_iden
	sub	al, 48					; 00000030H
	cmp	al, 47					; 0000002fH
	ja	SHORT $LN17@cclex_iden
	bt	r10, rax
	jae	SHORT $LN17@cclex_iden
$LN2@cclex_iden:
	inc	r9d
	inc	r8
	jmp	SHORT $LL4@cclex_iden
$LN17@cclex_iden:
; Line 200
	mov	eax, r9d
	ret	0
cclex_idenlen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_uninit
_TEXT	SEGMENT
l$ = 8
cclex_uninit PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 188
	ret	0
cclex_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_init
_TEXT	SEGMENT
$T1 = 32
l$ = 112
cclex_init PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 172
	push	rbx
	sub	rsp, 96					; 00000060H
	xorps	xmm0, xmm0
; Line 175
	mov	QWORD PTR [rcx+32], 1024		; 00000400H
	movups	XMMWORD PTR [rcx+56], xmm0
	xor	eax, eax
	mov	rbx, rcx
	movups	XMMWORD PTR [rcx+72], xmm0
	mov	QWORD PTR $T1[rsp+48], rax
	movups	XMMWORD PTR [rcx+88], xmm0
	movsd	xmm0, QWORD PTR $T1[rsp+48]
	movsd	QWORD PTR [rcx+104], xmm0
; Line 177
	mov	ecx, 24576				; 00006000H
	call	malloc
; Line 178
	mov	ecx, DWORD PTR [rbx+32]
	xor	edx, edx
	mov	QWORD PTR [rbx+40], rax
	lea	r8, QWORD PTR [rcx+rcx*2]
	mov	rcx, rax
	shl	r8, 3
	call	memset
; Line 180
	mov	rcx, rbx
; Line 181
	add	rsp, 96					; 00000060H
	pop	rbx
; Line 180
	jmp	cclex_hash_init
cclex_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_move
_TEXT	SEGMENT
l$ = 8
len$ = 16
bed$ = 24
cclex_move PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 166
	lea	rax, QWORD PTR [rdx+r8]
; Line 167
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+24], r8
	mov	QWORD PTR [rcx+8], r8
; Line 168
	ret	0
cclex_move ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_hash_init
_TEXT	SEGMENT
lexer$ = 48
cclex_hash_init PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 71
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 77
	mov	r9d, 21
	lea	r8, OFFSET FLAT:??_C@_05MNIOPOB@__asm@
	mov	rbx, rcx
	lea	edx, QWORD PTR [r9-16]
	call	cclex_hashonly
; Line 78
	mov	r9d, 22
	lea	r8, OFFSET FLAT:??_C@_07BECPAABE@__based@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-15]
	call	cclex_hashonly
; Line 79
	mov	r9d, 23
	lea	r8, OFFSET FLAT:??_C@_07KOLFKCDI@__cdecl@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-16]
	call	cclex_hashonly
; Line 80
	mov	r9d, 24
	lea	r8, OFFSET FLAT:??_C@_09HIJEGCPM@__clrcall@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-15]
	call	cclex_hashonly
; Line 81
	mov	r9d, 25
	lea	r8, OFFSET FLAT:??_C@_0L@JMKHOMEK@__fastcall@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-15]
	call	cclex_hashonly
; Line 82
	mov	r9d, 26
	lea	r8, OFFSET FLAT:??_C@_08FEOELIIN@__inline@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-18]
	call	cclex_hashonly
; Line 83
	mov	r9d, 27
	lea	r8, OFFSET FLAT:??_C@_09IFJBGAPI@__stdcall@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-18]
	call	cclex_hashonly
; Line 84
	mov	r9d, 28
	lea	r8, OFFSET FLAT:??_C@_0L@NPHFGOKO@__thiscall@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-18]
	call	cclex_hashonly
; Line 85
	mov	r9d, 29
	lea	r8, OFFSET FLAT:??_C@_0M@FJBNGECK@__vectorcal@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-18]
	call	cclex_hashonly
; Line 91
	mov	r9d, 31
	lea	r8, OFFSET FLAT:??_C@_08LCAALENH@_Alignof@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-23]
	call	cclex_hashonly
; Line 92
	mov	r9d, 32					; 00000020H
	lea	r8, OFFSET FLAT:??_C@_08IPCLHPMJ@_Alignas@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-24]
	call	cclex_hashonly
; Line 98
	mov	r9d, 35					; 00000023H
	lea	r8, OFFSET FLAT:??_C@_05BNCCCJPP@const@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-30]
	call	cclex_hashonly
; Line 99
	mov	r9d, 36					; 00000024H
	lea	r8, OFFSET FLAT:??_C@_08NGGFOJBB@restrict@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-28]
	call	cclex_hashonly
; Line 100
	mov	r9d, 37					; 00000025H
	lea	r8, OFFSET FLAT:??_C@_08PABEKFH@volatile@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-29]
	call	cclex_hashonly
; Line 106
	mov	r9d, 40					; 00000028H
	lea	r8, OFFSET FLAT:??_C@_06OGMBMJA@inline@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-34]
	call	cclex_hashonly
; Line 107
	mov	r9d, 41					; 00000029H
	lea	r8, OFFSET FLAT:??_C@_09JEIHJDJD@_Noreturn@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-32]
	call	cclex_hashonly
; Line 113
	mov	r9d, 44					; 0000002cH
	lea	r8, OFFSET FLAT:??_C@_06CPIODIKA@signed@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-38]
	call	cclex_hashonly
; Line 114
	mov	r9d, 45					; 0000002dH
	lea	r8, OFFSET FLAT:??_C@_08CLLOMHGD@unsigned@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-37]
	call	cclex_hashonly
; Line 115
	mov	r9d, 46					; 0000002eH
	lea	r8, OFFSET FLAT:??_C@_06EBGKOKIG@__int8@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-40]
	call	cclex_hashonly
; Line 116
	mov	r9d, 47					; 0000002fH
	lea	r8, OFFSET FLAT:??_C@_07ICFHOGAF@__int16@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-40]
	call	cclex_hashonly
; Line 117
	mov	r9d, 48					; 00000030H
	lea	r8, OFFSET FLAT:??_C@_07OFLPPHGP@__int32@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-41]
	call	cclex_hashonly
; Line 118
	mov	r9d, 49					; 00000031H
	lea	r8, OFFSET FLAT:??_C@_07LFCOJCAC@__int64@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-42]
	call	cclex_hashonly
; Line 119
	mov	r9d, 50					; 00000032H
	lea	r8, OFFSET FLAT:??_C@_06BNJCAIGJ@double@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-44]
	call	cclex_hashonly
; Line 120
	mov	r9d, 51					; 00000033H
	lea	r8, OFFSET FLAT:??_C@_05KNFBNCOH@float@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-46]
	call	cclex_hashonly
; Line 121
	mov	r9d, 52					; 00000034H
	lea	r8, OFFSET FLAT:??_C@_04GOKPGOLB@long@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-48]
	call	cclex_hashonly
; Line 122
	mov	r9d, 53					; 00000035H
	lea	r8, OFFSET FLAT:??_C@_03JBIPMCLC@int@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-50]
	call	cclex_hashonly
; Line 123
	mov	r9d, 54					; 00000036H
	lea	r8, OFFSET FLAT:??_C@_05BFKKPKCG@short@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-49]
	call	cclex_hashonly
; Line 124
	mov	r9d, 55					; 00000037H
	lea	r8, OFFSET FLAT:??_C@_04ENMBGAPA@char@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-51]
	call	cclex_hashonly
; Line 125
	mov	r9d, 56					; 00000038H
	lea	r8, OFFSET FLAT:??_C@_04GKJNKENE@void@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-52]
	call	cclex_hashonly
; Line 126
	mov	r9d, 57					; 00000039H
	lea	r8, OFFSET FLAT:??_C@_05HIFAKALE@_Bool@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-52]
	call	cclex_hashonly
; Line 127
	mov	r9d, 58					; 0000003aH
	lea	r8, OFFSET FLAT:??_C@_08PLEDNCDB@_Complex@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-50]
	call	cclex_hashonly
; Line 128
	mov	r9d, 59					; 0000003bH
	lea	r8, OFFSET FLAT:??_C@_07LPOMPHGP@_Atomic@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-52]
	call	cclex_hashonly
; Line 129
	mov	r9d, 60					; 0000003cH
	lea	r8, OFFSET FLAT:??_C@_04DBJPMPLO@enum@
	lea	edx, QWORD PTR [r9-56]
	mov	rcx, rbx
	call	cclex_hashonly
; Line 130
	mov	r9d, 61					; 0000003dH
	lea	r8, OFFSET FLAT:??_C@_06PBJBIPGK@struct@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-55]
	call	cclex_hashonly
; Line 134
	mov	r9d, 63					; 0000003fH
	lea	r8, OFFSET FLAT:??_C@_07FIDIHKEG@typedef@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-56]
	call	cclex_hashonly
; Line 139
	mov	r9d, 65					; 00000041H
	lea	r8, OFFSET FLAT:??_C@_04HAPDLBFF@auto@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-61]
	call	cclex_hashonly
; Line 140
	mov	r9d, 66					; 00000042H
	lea	r8, OFFSET FLAT:??_C@_06PAMNHHEG@extern@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-60]
	call	cclex_hashonly
; Line 141
	mov	r9d, 67					; 00000043H
	lea	r8, OFFSET FLAT:??_C@_08DHHIDNEP@register@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-59]
	call	cclex_hashonly
; Line 142
	mov	r9d, 68					; 00000044H
	lea	r8, OFFSET FLAT:??_C@_06GGHJAEBN@static@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-62]
	call	cclex_hashonly
; Line 143
	mov	r9d, 69					; 00000045H
	lea	r8, OFFSET FLAT:??_C@_0O@COIIMKFA@_Thread_local@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-56]
	call	cclex_hashonly
; Line 144
	mov	r9d, 70					; 00000046H
	lea	r8, OFFSET FLAT:??_C@_0L@LOEMFGDG@__declspec@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-60]
	call	cclex_hashonly
; Line 149
	mov	r9d, 72					; 00000048H
	lea	r8, OFFSET FLAT:??_C@_02HEBPBKGD@if@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-70]
	call	cclex_hashonly
; Line 150
	mov	r9d, 73					; 00000049H
	lea	r8, OFFSET FLAT:??_C@_06DOPOGBGP@switch@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-67]
	call	cclex_hashonly
; Line 151
	mov	r9d, 74					; 0000004aH
	lea	r8, OFFSET FLAT:??_C@_04FHMCPBIP@else@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-70]
	call	cclex_hashonly
; Line 152
	mov	r9d, 75					; 0000004bH
	lea	r8, OFFSET FLAT:??_C@_04CKOINMPC@case@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-71]
	call	cclex_hashonly
; Line 153
	mov	r9d, 76					; 0000004cH
	lea	r8, OFFSET FLAT:??_C@_07DLHCIBDH@default@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-69]
	call	cclex_hashonly
; Line 154
	mov	r9d, 77					; 0000004dH
	lea	r8, OFFSET FLAT:??_C@_03JOHEBPFF@for@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-74]
	call	cclex_hashonly
; Line 155
	mov	r9d, 78					; 0000004eH
	lea	r8, OFFSET FLAT:??_C@_05OODBEKIG@while@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-73]
	call	cclex_hashonly
; Line 156
	mov	r9d, 79					; 0000004fH
	lea	r8, OFFSET FLAT:??_C@_02KNAFDCHJ@do@
	lea	edx, QWORD PTR [r9-77]
	mov	rcx, rbx
	call	cclex_hashonly
; Line 157
	mov	r9d, 80					; 00000050H
	lea	r8, OFFSET FLAT:??_C@_04MABHPDAO@goto@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-76]
	call	cclex_hashonly
; Line 158
	mov	r9d, 81					; 00000051H
	lea	r8, OFFSET FLAT:??_C@_06LNOFJDNM@return@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-75]
	call	cclex_hashonly
; Line 159
	mov	r9d, 82					; 00000052H
	lea	r8, OFFSET FLAT:??_C@_05ELPHFHOI@break@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-77]
	call	cclex_hashonly
; Line 160
	mov	r9d, 83					; 00000053H
	lea	r8, OFFSET FLAT:??_C@_08DLICDMBN@continue@
	mov	rcx, rbx
	lea	edx, QWORD PTR [r9-75]
; Line 161
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 160
	jmp	cclex_hashonly
cclex_hash_init ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_hashonly
_TEXT	SEGMENT
l$ = 64
len$ = 72
key$ = 80
bit$ = 88
cclex_hashonly PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 59
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	movsxd	rsi, edx
	mov	r15d, r9d
; Line 9
	mov	r10, rsi
; Line 59
	mov	rdi, r8
	mov	rbp, rcx
; Line 9
	mov	r11d, 5381				; 00001505H
; Line 10
	test	edx, edx
	je	SHORT $LN24@cclex_hash
	npad	15
$LL30@cclex_hash:
	movsx	r9d, BYTE PTR [r10+r8-1]
	dec	r10
	imul	r11d, r11d, 33				; 00000021H
	add	r11d, r9d
	test	r10, r10
	jne	SHORT $LL30@cclex_hash
$LN24@cclex_hash:
; Line 21
	mov	ecx, DWORD PTR [rcx+32]
	dec	ecx
	mov	eax, r11d
	and	rcx, rax
	mov	rax, QWORD PTR [rbp+40]
	lea	rcx, QWORD PTR [rcx+rcx*2]
	lea	r8, QWORD PTR [rax+rcx*8]
	npad	4
$LL7@cclex_hash:
; Line 26
	xor	ecx, ecx
	mov	rbx, r8
	cmp	DWORD PTR [r8+16], esi
	sete	cl
	jne	SHORT $LN5@cclex_hash
; Line 29
	mov	r9, QWORD PTR [r8+8]
	lea	r10, QWORD PTR [rsi+rdi]
	sub	r9, rdi
	mov	rax, rdi
	npad	4
$LL8@cclex_hash:
; Line 30
	cmp	rax, r10
	jae	SHORT $LN5@cclex_hash
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [r9+rax]
	inc	rax
	cmp	dl, cl
	jne	SHORT $LN38@cclex_hash
	mov	ecx, 1
	jmp	SHORT $LL8@cclex_hash
$LN5@cclex_hash:
; Line 32
	test	ecx, ecx
	jne	SHORT $LN13@cclex_hash
$LN38@cclex_hash:
	mov	r8, QWORD PTR [r8]
	test	r8, r8
	jne	SHORT $LL7@cclex_hash
; Line 38
	cmp	QWORD PTR [rbx+8], r8
	je	SHORT $LN15@cclex_hash
	lea	ecx, QWORD PTR [r8+24]
	call	malloc
	mov	QWORD PTR [rbx], rax
	mov	rbx, rax
$LN15@cclex_hash:
; Line 40
	mov	QWORD PTR [rbx], 0
; Line 42
	mov	DWORD PTR [rbx+16], esi
; Line 43
	mov	DWORD PTR [rbx+20], r15d
; Line 47
	mov	QWORD PTR [rbx+8], rdi
; Line 49
	inc	DWORD PTR [rbp+36]
$LN13@cclex_hash:
; Line 66
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
cclex_hashonly ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_hash
_TEXT	SEGMENT
l$ = 64
len$ = 72
key$ = 80
cpy$ = 88
bit$ = 96
fnd$ = 104
cclex_hash PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 16
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
	movsxd	rsi, edx
	mov	r15d, r9d
; Line 9
	mov	r10, rsi
; Line 16
	mov	rdi, r8
	mov	rbp, rcx
; Line 9
	mov	r11d, 5381				; 00001505H
; Line 10
	test	edx, edx
	je	SHORT $LN21@cclex_hash
	npad	15
$LL27@cclex_hash:
	movsx	r9d, BYTE PTR [r10+r8-1]
	dec	r10
	imul	r11d, r11d, 33				; 00000021H
	add	r11d, r9d
	test	r10, r10
	jne	SHORT $LL27@cclex_hash
$LN21@cclex_hash:
; Line 21
	mov	ecx, DWORD PTR [rcx+32]
	dec	ecx
	mov	eax, r11d
	and	rcx, rax
	mov	rax, QWORD PTR [rbp+40]
	lea	rcx, QWORD PTR [rcx+rcx*2]
	lea	rbx, QWORD PTR [rax+rcx*8]
	npad	4
$LL4@cclex_hash:
; Line 26
	xor	ecx, ecx
	cmp	DWORD PTR [rbx+16], esi
	sete	cl
	jne	SHORT $LN2@cclex_hash
; Line 29
	mov	r8, QWORD PTR [rbx+8]
	lea	r9, QWORD PTR [rsi+rdi]
	sub	r8, rdi
	mov	rax, rdi
$LL5@cclex_hash:
; Line 30
	cmp	rax, r9
	jae	SHORT $LN2@cclex_hash
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [r8+rax]
	inc	rax
	cmp	dl, cl
	jne	SHORT $LN17@cclex_hash
	mov	ecx, 1
	jmp	SHORT $LL5@cclex_hash
$LN17@cclex_hash:
	xor	ecx, ecx
	jmp	SHORT $LN34@cclex_hash
$LN2@cclex_hash:
; Line 32
	test	ecx, ecx
	jne	SHORT $LN8@cclex_hash
$LN34@cclex_hash:
	mov	rax, QWORD PTR [rbx]
	test	rax, rax
	je	SHORT $LN8@cclex_hash
	mov	rbx, rax
	jmp	SHORT $LL4@cclex_hash
$LN8@cclex_hash:
; Line 34
	mov	rax, QWORD PTR fnd$[rsp]
	test	rax, rax
	je	SHORT $LN9@cclex_hash
	mov	DWORD PTR [rax], ecx
$LN9@cclex_hash:
; Line 36
	test	ecx, ecx
	jne	SHORT $LN10@cclex_hash
; Line 38
	cmp	QWORD PTR [rbx+8], 0
	je	SHORT $LN12@cclex_hash
	mov	ecx, 24
	call	malloc
	mov	QWORD PTR [rbx], rax
	mov	rbx, rax
$LN12@cclex_hash:
; Line 43
	mov	rax, QWORD PTR bit$[rsp]
	lea	rcx, QWORD PTR [rbx+8]
	mov	QWORD PTR [rbx], 0
	mov	QWORD PTR [rcx], 0
	mov	DWORD PTR [rbx+16], esi
	mov	edx, DWORD PTR [rax]
	mov	DWORD PTR [rbx+20], edx
; Line 46
	test	r15d, r15d
	je	SHORT $LN13@cclex_hash
	lea	edx, DWORD PTR [rsi+1]
	mov	r9, rdi
	mov	r8d, edx
	call	ccdlb_stradd
; Line 49
	inc	DWORD PTR [rbp+36]
; Line 50
	jmp	SHORT $LN35@cclex_hash
$LN13@cclex_hash:
; Line 47
	mov	QWORD PTR [rcx], rdi
; Line 49
	inc	DWORD PTR [rbp+36]
; Line 50
	jmp	SHORT $LN35@cclex_hash
$LN10@cclex_hash:
; Line 52
	mov	rcx, QWORD PTR bit$[rsp]
	test	rcx, rcx
	je	SHORT $LN35@cclex_hash
	mov	eax, DWORD PTR [rbx+20]
	mov	DWORD PTR [rcx], eax
$LN35@cclex_hash:
; Line 55
	mov	rax, QWORD PTR [rbx+8]
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
cclex_hash ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cclex_hashfunc
_TEXT	SEGMENT
len$ = 8
str$ = 16
cclex_hashfunc PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclex.c
; Line 9
	mov	eax, 5381				; 00001505H
; Line 10
	test	ecx, ecx
	je	SHORT $LN10@cclex_hash
	movsxd	r9, ecx
	add	r9, rdx
	npad	1
$LL7@cclex_hash:
	movsx	edx, BYTE PTR [r9-1]
	lea	r9, QWORD PTR [r9-1]
	imul	eax, eax, 33				; 00000021H
	add	eax, edx
	sub	ecx, 1
	jne	SHORT $LL7@cclex_hash
$LN10@cclex_hash:
; Line 12
	ret	0
cclex_hashfunc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccexec_value_I
_TEXT	SEGMENT
__$ReturnAddress$ = 8
kind$ = 16
type$ = 24
value$ = 32
label$ = 40
ccexec_value_I PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.h
; Line 79
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 80
	mov	rax, rcx
	mov	DWORD PTR [rcx+8], edx
	mov	QWORD PTR [rcx+16], r8
	mov	QWORD PTR [rcx+24], r9
; Line 81
	ret	0
ccexec_value_I ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccfunc_include_local
_TEXT	SEGMENT
func$ = 48
tree$ = 56
is_param$ = 64
ccfunc_include_local PROC				; COMDAT
; File W:\cpp\void\ktt-c\ccexec.h
; Line 63
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 64
	mov	ecx, 40					; 00000028H
	mov	rsi, rdx
	test	r8d, r8d
	je	SHORT $LN3@ccfunc_inc
; File W:\cpp\void\ktt-c\ccedict.h
; Line 97
	call	malloc
; Line 98
	mov	DWORD PTR [rax], 1
; File W:\cpp\void\ktt-c\ccexec.h
; Line 64
	jmp	SHORT $LN9@ccfunc_inc
$LN3@ccfunc_inc:
; File W:\cpp\void\ktt-c\ccedict.h
; Line 84
	call	malloc
; Line 85
	mov	DWORD PTR [rax], 0
$LN9@ccfunc_inc:
; File W:\cpp\void\ktt-c\ccexec.h
; Line 65
	mov	rdx, rax
	mov	rax, QWORD PTR [rsi+24]
	mov	QWORD PTR [rdx+8], rax
	mov	rax, QWORD PTR [rsi+48]
	mov	QWORD PTR [rdx+16], rax
	mov	rcx, QWORD PTR [rbx+24]
	call	ccblock_add_edict
; Line 66
	mov	edx, 8
	lea	rcx, QWORD PTR [rbx+8]
	mov	r9, rsi
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
; Line 68
	mov	rcx, QWORD PTR [rbx+8]
; Line 70
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	edx, eax
	mov	rax, rdi
	mov	QWORD PTR [rcx+rdx*8], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccfunc_include_local ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccfunc_local
_TEXT	SEGMENT
func$ = 48
tree$ = 56
ccfunc_local PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccexec.h
; Line 55
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	rax, QWORD PTR [rcx+8]
; Line 389
	xor	r8d, r8d
	test	rax, rax
; Line 391
	mov	r9d, OFFSET FLAT:ccerr
; File W:\cpp\void\ktt-c\ccexec.h
; Line 55
	mov	rbx, rcx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 389
	lea	rcx, QWORD PTR [rax-24]
; Line 391
	mov	rax, QWORD PTR gs:88
	cmove	rcx, r8
	mov	r8d, DWORD PTR _tls_index
	mov	rdi, QWORD PTR [rax+r8*8]
	add	rdi, r9
	mov	DWORD PTR [rdi], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN2@ccfunc_loc
; Line 393
	mov	r8, rdx
	mov	edx, -8
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rdi], 0
	jne	SHORT $LN2@ccfunc_loc
; Line 396
	mov	ecx, DWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\ccexec.h
; Line 57
	mov	rax, QWORD PTR [rbx+8]
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 396
	shr	rcx, 3
; File W:\cpp\void\ktt-c\ccexec.h
; Line 57
	mov	rax, QWORD PTR [rax+rcx*8]
; Line 59
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@ccfunc_loc:
	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccfunc_local ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_add_edict
_TEXT	SEGMENT
block$ = 48
edict$ = 56
ccblock_add_edict PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 72
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, rdx
; Line 63
	mov	ecx, 24
	call	malloc
; Line 64
	mov	r9d, 1
	lea	rcx, QWORD PTR [rbx+8]
	mov	r8d, r9d
	mov	edx, 8
	mov	rdi, rax
	call	ccdlb_arradd
	mov	rcx, QWORD PTR [rbx+8]
	mov	edx, eax
; Line 65
	xor	eax, eax
	mov	DWORD PTR [rdi+4], eax
	mov	QWORD PTR [rdi+16], rax
; Line 75
	mov	rax, rdi
; Line 76
	mov	rbx, QWORD PTR [rsp+48]
; Line 66
	mov	QWORD PTR [rcx+rdx*8], rdi
; Line 74
	mov	QWORD PTR [rdi+8], rsi
; Line 76
	mov	rsi, QWORD PTR [rsp+56]
	mov	DWORD PTR [rdi], 5
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccblock_add_edict ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock_add
_TEXT	SEGMENT
block$ = 48
ccblock_add PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 63
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	ecx, 24
	call	malloc
; Line 64
	mov	r9d, 1
	lea	rcx, QWORD PTR [rbx+8]
	mov	r8d, r9d
	mov	edx, 8
	mov	rdi, rax
	call	ccdlb_arradd
	mov	rcx, QWORD PTR [rbx+8]
	xorps	xmm0, xmm0
; Line 68
	mov	rbx, QWORD PTR [rsp+48]
	mov	edx, eax
	xor	eax, eax
	movups	XMMWORD PTR [rdi], xmm0
	mov	QWORD PTR [rdi+16], rax
	mov	rax, rdi
	mov	QWORD PTR [rcx+rdx*8], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccblock_add ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccblock
_TEXT	SEGMENT
label$ = 48
ccblock	PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccemit.h
; Line 54
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 55
	mov	ecx, 16
	call	malloc
; Line 56
	mov	QWORD PTR [rax], rbx
; Line 57
	mov	QWORD PTR [rax+8], 0
; Line 59
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccblock	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_return
_TEXT	SEGMENT
rval$ = 48
ccedict_return PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 192
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 193
	mov	ecx, 40					; 00000028H
	call	malloc
; Line 194
	mov	DWORD PTR [rax], 11
; Line 195
	mov	QWORD PTR [rax+16], rbx
; Line 197
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccedict_return ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_call
_TEXT	SEGMENT
lval$ = 48
rval$ = 56
ccedict_call PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 179
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; Line 182
	mov	ecx, 40					; 00000028H
	call	malloc
; Line 184
	mov	QWORD PTR [rax+16], rbx
; Line 188
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax], 10
	mov	QWORD PTR [rax+24], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_call ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_jumpF
_TEXT	SEGMENT
blc$ = 48
tar$ = 56
cnd$ = 64
ccedict_jumpF PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 168
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, r8
; Line 169
	mov	ecx, 40					; 00000028H
	mov	edi, edx
	call	malloc
; Line 171
	mov	QWORD PTR [rax+16], rbx
; Line 175
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+32], rsi
	mov	rsi, QWORD PTR [rsp+56]
	mov	DWORD PTR [rax], 7
	mov	DWORD PTR [rax+24], edi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_jumpF ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_enter
_TEXT	SEGMENT
blc$ = 48
ccedict_enter PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 137
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 138
	mov	ecx, 40					; 00000028H
	call	malloc
; Line 139
	mov	DWORD PTR [rax], 9
; Line 140
	mov	QWORD PTR [rax+16], rbx
; Line 143
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccedict_enter ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_arith
_TEXT	SEGMENT
opr$ = 48
lhs$ = 56
rhs$ = 64
ccedict_arith PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 126
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	rsi, r8
; Line 127
	mov	ecx, 40					; 00000028H
	mov	rdi, rdx
	call	malloc
; Line 129
	mov	DWORD PTR [rax+16], ebx
; Line 133
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+32], rsi
	mov	rsi, QWORD PTR [rsp+56]
	mov	DWORD PTR [rax], 4
	mov	QWORD PTR [rax+24], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_arith ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_fetch
_TEXT	SEGMENT
lval$ = 48
ccedict_fetch PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 117
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 118
	mov	ecx, 40					; 00000028H
	call	malloc
; Line 119
	mov	DWORD PTR [rax], 3
; Line 120
	mov	QWORD PTR [rax+16], rbx
; Line 122
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccedict_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_store
_TEXT	SEGMENT
lval$ = 48
rval$ = 56
ccedict_store PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 107
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rdi, rdx
; Line 108
	mov	ecx, 40					; 00000028H
	call	malloc
; Line 110
	mov	QWORD PTR [rax+16], rbx
; Line 113
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax], 2
	mov	QWORD PTR [rax+24], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccedict_store ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_param
_TEXT	SEGMENT
tree$ = 48
ccedict_param PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 94
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 97
	mov	ecx, 40					; 00000028H
	call	malloc
; Line 99
	mov	rdx, QWORD PTR [rbx+24]
; Line 101
	mov	rcx, QWORD PTR [rbx+48]
	mov	DWORD PTR [rax], 1
	mov	QWORD PTR [rax+8], rdx
	mov	QWORD PTR [rax+16], rcx
; Line 103
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccedict_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccedict_local
_TEXT	SEGMENT
tree$ = 48
ccedict_local PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccedict.h
; Line 81
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 84
	mov	ecx, 40					; 00000028H
	call	malloc
; Line 86
	mov	rdx, QWORD PTR [rbx+24]
; Line 88
	mov	rcx, QWORD PTR [rbx+48]
	mov	DWORD PTR [rax], 0
	mov	QWORD PTR [rax+8], rdx
	mov	QWORD PTR [rax+16], rcx
; Line 90
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccedict_local ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve
_TEXT	SEGMENT
tree$ = 48
cctree_solve PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 571
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 574
	mov	rsi, QWORD PTR [rcx+32]
	mov	rbp, rcx
	npad	5
$LL4@cctree_sol:
	mov	rdx, QWORD PTR [rbp+32]
	test	rdx, rdx
	je	SHORT $LN6@cctree_sol
	mov	eax, DWORD PTR [rdx-4]
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	xor	eax, eax
$LN7@cctree_sol:
	and	rax, -8
	add	rax, rdx
	cmp	rsi, rax
	jae	SHORT $LN3@cctree_sol
	mov	rdi, QWORD PTR [rsi]
; Line 566
	mov	rbx, QWORD PTR [rdi+32]
$LL11@cctree_sol:
	mov	rcx, QWORD PTR [rdi+32]
	test	rcx, rcx
	je	SHORT $LN13@cctree_sol
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN14@cctree_sol
$LN13@cctree_sol:
	xor	eax, eax
$LN14@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN2@cctree_sol
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_decl_name
	add	rbx, 8
	jmp	SHORT $LL11@cctree_sol
$LN2@cctree_sol:
; Line 574
	add	rsi, 8
	jmp	SHORT $LL4@cctree_sol
$LN3@cctree_sol:
; Line 575
	mov	rbx, QWORD PTR [rsp+48]
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_solve ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_decl_name
_TEXT	SEGMENT
tree$ = 48
cctree_solve_decl_name PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 523
	push	rsi
	sub	rsp, 32					; 00000020H
; Line 532
	mov	rax, QWORD PTR [rcx+48]
	mov	rsi, rcx
	cmp	DWORD PTR [rax], 3
	jne	$LN10@cctree_sol
; Line 534
	test	BYTE PTR [rcx+16], 16
	je	$LN18@cctree_sol
; Line 360
	mov	r9, QWORD PTR [rcx+24]
	mov	r8, -1
	npad	5
$LL55@cctree_sol:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL55@cctree_sol
	mov	edx, 8
	lea	rcx, OFFSET FLAT:func_decls
	call	ccdlb_tblput
; Line 361
	mov	edx, DWORD PTR _tls_index
	mov	ecx, eax
	mov	rax, QWORD PTR func_decls
	lea	r8, QWORD PTR [rax+rcx*8]
	mov	rax, QWORD PTR gs:88
	mov	ecx, OFFSET FLAT:ccerr
	mov	rax, QWORD PTR [rax+rdx*8]
	cmp	DWORD PTR [rcx+rax], 0
	jne	$LN18@cctree_sol
	mov	QWORD PTR [r8], rsi
; Line 539
	mov	rax, QWORD PTR [rsi+48]
; Line 361
	mov	QWORD PTR [rsp+48], rbx
	mov	QWORD PTR [rsp+56], rdi
; Line 539
	mov	rbx, QWORD PTR [rax+32]
	npad	1
$LL4@cctree_sol:
	mov	rax, QWORD PTR [rsi+48]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN20@cctree_sol
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN21@cctree_sol
$LN20@cctree_sol:
	xor	eax, eax
$LN21@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN3@cctree_sol
; Line 540
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_decl_name
	add	rbx, 8
	jmp	SHORT $LL4@cctree_sol
$LN3@cctree_sol:
; Line 542
	mov	rax, QWORD PTR [rsi+88]
	mov	rdi, QWORD PTR [rax+32]
	npad	10
$LL7@cctree_sol:
	mov	rax, QWORD PTR [rsi+88]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN22@cctree_sol
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN23@cctree_sol
$LN22@cctree_sol:
	xor	eax, eax
$LN23@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rdi, rax
	jae	$LN57@cctree_sol
; Line 543
	mov	rbx, QWORD PTR [rdi]
; Line 490
	mov	eax, DWORD PTR [rbx]
	cmp	eax, 16
	jne	SHORT $LN25@cctree_sol
; Line 492
	mov	rcx, rbx
	call	cctree_solve_decl
; Line 542
	add	rdi, 8
	jmp	SHORT $LL7@cctree_sol
$LN25@cctree_sol:
; Line 494
	cmp	eax, 21
	jne	SHORT $LN27@cctree_sol
; Line 496
	mov	rcx, rbx
	call	cctree_solve_call
; Line 542
	add	rdi, 8
	jmp	SHORT $LL7@cctree_sol
$LN27@cctree_sol:
; Line 499
	cmp	eax, 12
	jne	SHORT $LN29@cctree_sol
; Line 502
	mov	rcx, QWORD PTR [rbx+80]
	call	cctree_solve_rvalue
; Line 542
	add	rdi, 8
	jmp	SHORT $LL7@cctree_sol
$LN29@cctree_sol:
; Line 504
	cmp	eax, 18
	jne	SHORT $LN31@cctree_sol
; Line 506
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	ecx, DWORD PTR [rbx+40]
	call	cctree_solve_binary
; Line 542
	add	rdi, 8
	jmp	SHORT $LL7@cctree_sol
$LN31@cctree_sol:
; Line 508
	cmp	eax, 17
	jne	SHORT $LN5@cctree_sol
; Line 510
	mov	rcx, QWORD PTR [rbx+64]
	call	cctree_solve_rvalue
; Line 511
	mov	rcx, QWORD PTR [rbx+72]
	test	rcx, rcx
	je	SHORT $LN35@cctree_sol
	call	cctree_solve_block
$LN35@cctree_sol:
; Line 512
	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN5@cctree_sol
	call	cctree_solve_block
$LN5@cctree_sol:
; Line 542
	add	rdi, 8
	jmp	$LL7@cctree_sol
$LN10@cctree_sol:
; Line 550
	mov	r9, QWORD PTR [rcx+24]
	mov	r8, -1
	npad	4
$LL54@cctree_sol:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL54@cctree_sol
	mov	edx, 8
	lea	rcx, OFFSET FLAT:vari_decls
	call	ccdlb_tblput
; Line 551
	mov	edx, DWORD PTR _tls_index
	mov	ecx, eax
	mov	rax, QWORD PTR vari_decls
	lea	r8, QWORD PTR [rax+rcx*8]
	mov	rax, QWORD PTR gs:88
	mov	ecx, OFFSET FLAT:ccerr
	mov	rax, QWORD PTR [rax+rdx*8]
	cmp	DWORD PTR [rcx+rax], 0
	jne	SHORT $LN16@cctree_sol
; Line 552
	mov	QWORD PTR [r8], rsi
$LN16@cctree_sol:
; Line 556
	mov	rcx, QWORD PTR [rsi+64]
	test	rcx, rcx
	je	SHORT $LN18@cctree_sol
; Line 561
	add	rsp, 32					; 00000020H
	pop	rsi
; Line 558
	jmp	cctree_solve_rvalue
$LN57@cctree_sol:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+56]
$LN18@cctree_sol:
; Line 561
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
cctree_solve_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_block
_TEXT	SEGMENT
block$ = 48
cctree_solve_block PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 482
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 484
	mov	rbx, QWORD PTR [rcx+32]
	mov	rdi, rcx
$LL4@cctree_sol:
	mov	rdx, QWORD PTR [rdi+32]
	test	rdx, rdx
	je	SHORT $LN6@cctree_sol
	mov	eax, DWORD PTR [rdx-4]
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	xor	eax, eax
$LN7@cctree_sol:
	and	rax, -8
	add	rax, rdx
	cmp	rbx, rax
	jae	SHORT $LN3@cctree_sol
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_statement
	add	rbx, 8
	jmp	SHORT $LL4@cctree_sol
$LN3@cctree_sol:
; Line 485
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_solve_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_call
_TEXT	SEGMENT
tree$ = 48
cctree_solve_call PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 419
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 423
	mov	rsi, QWORD PTR [rcx+72]
	mov	rdi, rcx
; Line 382
	mov	rdx, -1
	mov	r8, QWORD PTR [rsi+24]
$LL107@cctree_sol:
	inc	rdx
	cmp	BYTE PTR [r8+rdx], 0
	jne	SHORT $LL107@cctree_sol
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	rcx, QWORD PTR func_decls
	test	rcx, rcx
	je	SHORT $LN102@cctree_sol
	add	rcx, -24
$LN102@cctree_sol:
; Line 391
	mov	r9d, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
	mov	r10d, OFFSET FLAT:ccerr
	mov	rbx, QWORD PTR [rax+r9*8]
	add	rbx, r10
	mov	DWORD PTR [rbx], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN95@cctree_sol
; Line 393
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rbx], 0
	jne	SHORT $LN95@cctree_sol
	mov	ebx, DWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\cctree.h
; Line 388
	lea	rcx, OFFSET FLAT:symbols
	mov	edx, 8
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 394
	and	rbx, -8
	add	rbx, QWORD PTR func_decls
; File W:\cpp\void\ktt-c\cctree.h
; Line 388
	mov	r9, rsi
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	ecx, eax
	mov	rax, QWORD PTR symbols
	lea	rdx, QWORD PTR [rax+rcx*8]
; Line 390
	mov	rax, QWORD PTR [rbx]
	mov	QWORD PTR [rdx], rax
$LN95@cctree_sol:
; Line 427
	mov	rbx, QWORD PTR [rdi+80]
	mov	rsi, 3353953467947191203		; 2e8ba2e8ba2e8ba3H
$LL4@cctree_sol:
	mov	r8, QWORD PTR [rdi+80]
	test	r8, r8
	je	SHORT $LN7@cctree_sol
	mov	eax, DWORD PTR [r8-4]
	jmp	SHORT $LN8@cctree_sol
$LN7@cctree_sol:
	xor	eax, eax
$LN8@cctree_sol:
	mov	ecx, eax
	mov	rax, rsi
	mul	rcx
	shr	rdx, 5
	imul	rax, rdx, 176				; 000000b0H
	add	rax, r8
	cmp	rbx, rax
	jae	SHORT $LN3@cctree_sol
	mov	rcx, rbx
	call	cctree_solve_rvalue
	add	rbx, 176				; 000000b0H
	jmp	SHORT $LL4@cctree_sol
$LN3@cctree_sol:
; Line 428
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_solve_call ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_lvalue
_TEXT	SEGMENT
tree$ = 8
cctree_solve_lvalue PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 432
	cmp	DWORD PTR [rcx], 6
	je	cctree_resolve_symbol_allusion
$LN5@cctree_sol:
; Line 441
	ret	0
cctree_solve_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_rvalue
_TEXT	SEGMENT
tree$ = 48
cctree_solve_rvalue PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 445
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	eax, DWORD PTR [rcx]
	cmp	eax, 6
	je	SHORT $LN5@cctree_sol
	npad	3
$LL22@cctree_sol:
	cmp	eax, 18
	jne	SHORT $LN24@cctree_sol
; Line 469
	cmp	DWORD PTR [rcx+40], 109			; 0000006dH
; Line 456
	mov	rbx, QWORD PTR [rcx+80]
	mov	rax, QWORD PTR [rcx+72]
; Line 469
	jne	SHORT $LN12@cctree_sol
; Line 432
	cmp	DWORD PTR [rax], 6
	jne	SHORT $LN13@cctree_sol
; Line 436
	mov	rcx, rax
	call	cctree_resolve_symbol_allusion
; Line 470
	jmp	SHORT $LN13@cctree_sol
$LN12@cctree_sol:
; Line 472
	mov	rcx, rax
	call	cctree_solve_rvalue
$LN13@cctree_sol:
; Line 445
	mov	eax, DWORD PTR [rbx]
; Line 474
	mov	rcx, rbx
; Line 445
	cmp	eax, 6
	jne	SHORT $LL22@cctree_sol
$LN5@cctree_sol:
; Line 464
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 450
	jmp	cctree_resolve_symbol_allusion
$LN6@cctree_sol:
; Line 464
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN24@cctree_sol:
; Line 445
	cmp	eax, 21
	jne	SHORT $LN6@cctree_sol
; Line 464
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 460
	jmp	cctree_solve_call
cctree_solve_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_binary
_TEXT	SEGMENT
oper$ = 48
lvalue$ = 56
rvalue$ = 64
cctree_solve_binary PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 468
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
; Line 469
	cmp	ecx, 109				; 0000006dH
	jne	SHORT $LN2@cctree_sol
; Line 432
	cmp	DWORD PTR [rdx], 6
	jne	SHORT $LN3@cctree_sol
; Line 436
	mov	rcx, rdx
	call	cctree_resolve_symbol_allusion
; Line 474
	mov	rcx, rbx
; Line 475
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 474
	jmp	cctree_solve_rvalue
$LN2@cctree_sol:
; Line 472
	mov	rcx, rdx
	call	cctree_solve_rvalue
$LN3@cctree_sol:
; Line 474
	mov	rcx, rbx
; Line 475
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 474
	jmp	cctree_solve_rvalue
cctree_solve_binary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_resolve_symbol_allusion
_TEXT	SEGMENT
tree$ = 48
cctree_resolve_symbol_allusion PROC			; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 397
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 398
	mov	r8, QWORD PTR [rcx+24]
	mov	rbp, rcx
	mov	rax, -1
	npad	3
$LL11@cctree_res:
	inc	rax
	cmp	BYTE PTR [r8+rax], 0
	jne	SHORT $LL11@cctree_res
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	rcx, QWORD PTR vari_decls
	xor	edi, edi
	test	rcx, rcx
	je	SHORT $LN8@cctree_res
	add	rcx, -24
	jmp	SHORT $LN9@cctree_res
$LN8@cctree_res:
	mov	rcx, rdi
$LN9@cctree_res:
; Line 391
	mov	r9d, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r10d, OFFSET FLAT:ccerr
	mov	rsi, QWORD PTR [rdx+r9*8]
	add	rsi, r10
	mov	DWORD PTR [rsi], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN2@cctree_res
; Line 393
	mov	edx, eax
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rsi], edi
	jne	SHORT $LN12@cctree_res
	mov	QWORD PTR [rsp+48], rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 402
	lea	rcx, OFFSET FLAT:symbols
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 394
	mov	ebx, DWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\cctree.h
; Line 402
	mov	edx, 8
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 394
	and	rbx, -8
; File W:\cpp\void\ktt-c\cctree.h
; Line 402
	mov	r9, rbp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 394
	add	rbx, QWORD PTR vari_decls
; File W:\cpp\void\ktt-c\cctree.h
; Line 402
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR symbols
	mov	edx, eax
	lea	r8, QWORD PTR [rcx+rdx*8]
; Line 404
	mov	rcx, QWORD PTR [rbx]
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [r8], rcx
$LN2@cctree_res:
; Line 407
	cmp	DWORD PTR [rsi], edi
$LN12@cctree_res:
; Line 408
	mov	rbp, QWORD PTR [rsp+56]
	sete	dil
	mov	rsi, QWORD PTR [rsp+64]
	mov	eax, edi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_resolve_symbol_allusion ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_resolve_call_symbol_allusion
_TEXT	SEGMENT
tree$ = 48
cctree_resolve_call_symbol_allusion PROC		; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 379
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 382
	mov	r8, QWORD PTR [rcx+24]
	mov	rbp, rcx
	mov	rax, -1
	npad	3
$LL11@cctree_res:
	inc	rax
	cmp	BYTE PTR [r8+rax], 0
	jne	SHORT $LL11@cctree_res
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	rcx, QWORD PTR func_decls
	xor	edi, edi
	test	rcx, rcx
	je	SHORT $LN8@cctree_res
	add	rcx, -24
	jmp	SHORT $LN9@cctree_res
$LN8@cctree_res:
	mov	rcx, rdi
$LN9@cctree_res:
; Line 391
	mov	r9d, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r10d, OFFSET FLAT:ccerr
	mov	rsi, QWORD PTR [rdx+r9*8]
	add	rsi, r10
	mov	DWORD PTR [rsi], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN2@cctree_res
; Line 393
	mov	edx, eax
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rsi], edi
	jne	SHORT $LN12@cctree_res
	mov	QWORD PTR [rsp+48], rbx
; File W:\cpp\void\ktt-c\cctree.h
; Line 388
	lea	rcx, OFFSET FLAT:symbols
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 394
	mov	ebx, DWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\cctree.h
; Line 388
	mov	edx, 8
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 394
	and	rbx, -8
; File W:\cpp\void\ktt-c\cctree.h
; Line 388
	mov	r9, rbp
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 394
	add	rbx, QWORD PTR func_decls
; File W:\cpp\void\ktt-c\cctree.h
; Line 388
	lea	r8d, QWORD PTR [rdx-16]
	call	ccdlb_tblput
	mov	rcx, QWORD PTR symbols
	mov	edx, eax
	lea	r8, QWORD PTR [rcx+rdx*8]
; Line 390
	mov	rcx, QWORD PTR [rbx]
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [r8], rcx
$LN2@cctree_res:
; Line 392
	cmp	DWORD PTR [rsi], edi
$LN12@cctree_res:
; Line 393
	mov	rbp, QWORD PTR [rsp+56]
	sete	dil
	mov	rsi, QWORD PTR [rsp+64]
	mov	eax, edi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_resolve_call_symbol_allusion ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_resolve_symbol
_TEXT	SEGMENT
tree$ = 48
cctree_resolve_symbol PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 368
	push	rbx
	sub	rsp, 32					; 00000020H
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	rax, QWORD PTR symbols
; File W:\cpp\void\ktt-c\cctree.h
; Line 368
	mov	r8, rcx
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	test	rax, rax
	je	SHORT $LN9@cctree_res
	lea	rcx, QWORD PTR [rax-24]
	jmp	SHORT $LN10@cctree_res
$LN9@cctree_res:
	xor	ecx, ecx
$LN10@cctree_res:
; Line 391
	mov	edx, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
	mov	r9d, OFFSET FLAT:ccerr
	mov	rbx, QWORD PTR [rax+rdx*8]
	add	rbx, r9
	mov	DWORD PTR [rbx], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN3@cctree_res
; Line 393
	mov	edx, -8
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rbx], 0
	jne	SHORT $LN3@cctree_res
; Line 396
	mov	ecx, DWORD PTR [rax+24]
; File W:\cpp\void\ktt-c\cctree.h
; Line 374
	mov	rax, QWORD PTR symbols
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 396
	shr	rcx, 3
; File W:\cpp\void\ktt-c\cctree.h
; Line 374
	mov	rax, QWORD PTR [rax+rcx*8]
; Line 375
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN3@cctree_res:
; Line 374
	xor	eax, eax
; Line 375
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_resolve_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_include_invokeable_symbol
_TEXT	SEGMENT
tree$ = 48
name$ = 56
cctree_include_invokeable_symbol PROC			; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 356
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 360
	mov	r9, QWORD PTR [rcx+24]
	mov	rbx, rcx
	mov	r8, -1
$LL4@cctree_inc:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL4@cctree_inc
	mov	edx, 8
	lea	rcx, OFFSET FLAT:func_decls
	call	ccdlb_tblput
	mov	ecx, eax
	mov	rax, QWORD PTR func_decls
; Line 361
	mov	r8d, OFFSET FLAT:ccerr
	lea	rdx, QWORD PTR [rax+rcx*8]
	mov	ecx, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
	mov	rax, QWORD PTR [rax+rcx*8]
	mov	ecx, DWORD PTR [r8+rax]
	test	ecx, ecx
	jne	SHORT $LN2@cctree_inc
	mov	QWORD PTR [rdx], rbx
$LN2@cctree_inc:
; Line 363
	xor	eax, eax
	test	ecx, ecx
	sete	al
; Line 364
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_include_invokeable_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_statement
_TEXT	SEGMENT
tree$ = 48
cctree_solve_statement PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 489
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 490
	mov	eax, DWORD PTR [rcx]
	mov	rbx, rcx
	cmp	eax, 16
	jne	SHORT $LN2@cctree_sol
; Line 517
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 492
	jmp	cctree_solve_decl
$LN2@cctree_sol:
; Line 494
	cmp	eax, 21
	jne	SHORT $LN4@cctree_sol
; Line 517
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 496
	jmp	cctree_solve_call
$LN4@cctree_sol:
; Line 499
	cmp	eax, 12
	jne	SHORT $LN6@cctree_sol
; Line 502
	mov	rcx, QWORD PTR [rcx+80]
; Line 517
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 502
	jmp	cctree_solve_rvalue
$LN6@cctree_sol:
; Line 504
	cmp	eax, 18
	jne	SHORT $LN8@cctree_sol
; Line 506
	mov	r8, QWORD PTR [rcx+80]
	mov	rdx, QWORD PTR [rcx+72]
	mov	ecx, DWORD PTR [rcx+40]
; Line 517
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 506
	jmp	cctree_solve_binary
$LN8@cctree_sol:
; Line 508
	cmp	eax, 17
	jne	SHORT $LN13@cctree_sol
; Line 510
	mov	rcx, QWORD PTR [rcx+64]
	call	cctree_solve_rvalue
; Line 511
	mov	rcx, QWORD PTR [rbx+72]
	test	rcx, rcx
	je	SHORT $LN12@cctree_sol
	call	cctree_solve_block
$LN12@cctree_sol:
; Line 512
	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN13@cctree_sol
; Line 517
	add	rsp, 32					; 00000020H
	pop	rbx
; Line 512
	jmp	cctree_solve_block
$LN13@cctree_sol:
; Line 517
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_solve_statement ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_solve_decl
_TEXT	SEGMENT
decl$ = 64
cctree_solve_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 565
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 361
	mov	edx, DWORD PTR _tls_index
; Line 565
	mov	rbp, rcx
; Line 361
	mov	rax, QWORD PTR gs:88
; Line 566
	mov	r14, QWORD PTR [rcx+32]
; Line 361
	mov	r12d, OFFSET FLAT:ccerr
	lea	r15, QWORD PTR [rax+rdx*8]
	npad	2
$LL4@cctree_sol:
; Line 566
	mov	rcx, QWORD PTR [rbp+32]
	test	rcx, rcx
	je	SHORT $LN6@cctree_sol
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	xor	eax, eax
$LN7@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	r14, rax
	jae	$LN3@cctree_sol
	mov	rsi, QWORD PTR [r14]
; Line 532
	mov	rax, QWORD PTR [rsi+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN17@cctree_sol
; Line 534
	test	BYTE PTR [rsi+16], 16
	je	$LN2@cctree_sol
; Line 360
	mov	r9, QWORD PTR [rsi+24]
	mov	r8, -1
$LL58@cctree_sol:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL58@cctree_sol
	mov	edx, 8
	lea	rcx, OFFSET FLAT:func_decls
	call	ccdlb_tblput
	mov	ecx, eax
	mov	rax, QWORD PTR func_decls
	lea	rdx, QWORD PTR [rax+rcx*8]
; Line 361
	mov	rax, QWORD PTR [r15]
	cmp	DWORD PTR [r12+rax], 0
	jne	$LN2@cctree_sol
	mov	QWORD PTR [rdx], rsi
; Line 539
	mov	rax, QWORD PTR [rsi+48]
	mov	rbx, QWORD PTR [rax+32]
	npad	10
$LL11@cctree_sol:
	mov	rax, QWORD PTR [rsi+48]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN27@cctree_sol
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN28@cctree_sol
$LN27@cctree_sol:
	xor	eax, eax
$LN28@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rbx, rax
	jae	SHORT $LN10@cctree_sol
; Line 540
	mov	rcx, QWORD PTR [rbx]
	call	cctree_solve_decl_name
	add	rbx, 8
	jmp	SHORT $LL11@cctree_sol
$LN10@cctree_sol:
; Line 542
	mov	rax, QWORD PTR [rsi+88]
	mov	rdi, QWORD PTR [rax+32]
	npad	10
$LL14@cctree_sol:
	mov	rax, QWORD PTR [rsi+88]
	mov	rcx, QWORD PTR [rax+32]
	test	rcx, rcx
	je	SHORT $LN29@cctree_sol
	mov	eax, DWORD PTR [rcx-4]
	jmp	SHORT $LN30@cctree_sol
$LN29@cctree_sol:
	xor	eax, eax
$LN30@cctree_sol:
	and	rax, -8
	add	rax, rcx
	cmp	rdi, rax
	jae	$LN2@cctree_sol
; Line 543
	mov	rbx, QWORD PTR [rdi]
; Line 490
	mov	eax, DWORD PTR [rbx]
	cmp	eax, 16
	jne	SHORT $LN32@cctree_sol
; Line 492
	mov	rcx, rbx
	call	cctree_solve_decl
; Line 542
	add	rdi, 8
	jmp	SHORT $LL14@cctree_sol
$LN32@cctree_sol:
; Line 494
	cmp	eax, 21
	jne	SHORT $LN34@cctree_sol
; Line 496
	mov	rcx, rbx
	call	cctree_solve_call
; Line 542
	add	rdi, 8
	jmp	SHORT $LL14@cctree_sol
$LN34@cctree_sol:
; Line 499
	cmp	eax, 12
	jne	SHORT $LN36@cctree_sol
; Line 502
	mov	rcx, QWORD PTR [rbx+80]
	call	cctree_solve_rvalue
; Line 542
	add	rdi, 8
	jmp	SHORT $LL14@cctree_sol
$LN36@cctree_sol:
; Line 504
	cmp	eax, 18
	jne	SHORT $LN38@cctree_sol
; Line 506
	mov	r8, QWORD PTR [rbx+80]
	mov	rdx, QWORD PTR [rbx+72]
	mov	ecx, DWORD PTR [rbx+40]
	call	cctree_solve_binary
; Line 542
	add	rdi, 8
	jmp	SHORT $LL14@cctree_sol
$LN38@cctree_sol:
; Line 508
	cmp	eax, 17
	jne	SHORT $LN12@cctree_sol
; Line 510
	mov	rcx, QWORD PTR [rbx+64]
	call	cctree_solve_rvalue
; Line 511
	mov	rcx, QWORD PTR [rbx+72]
	test	rcx, rcx
	je	SHORT $LN42@cctree_sol
	call	cctree_solve_block
$LN42@cctree_sol:
; Line 512
	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN12@cctree_sol
	call	cctree_solve_block
$LN12@cctree_sol:
; Line 542
	add	rdi, 8
	jmp	$LL14@cctree_sol
$LN17@cctree_sol:
; Line 550
	mov	r9, QWORD PTR [rsi+24]
	mov	r8, -1
	npad	4
$LL57@cctree_sol:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL57@cctree_sol
	mov	edx, 8
	lea	rcx, OFFSET FLAT:vari_decls
	call	ccdlb_tblput
	mov	ecx, eax
	mov	rax, QWORD PTR vari_decls
	lea	rdx, QWORD PTR [rax+rcx*8]
; Line 551
	mov	rax, QWORD PTR [r15]
	cmp	DWORD PTR [r12+rax], 0
	jne	SHORT $LN23@cctree_sol
; Line 552
	mov	QWORD PTR [rdx], rsi
$LN23@cctree_sol:
; Line 556
	mov	rcx, QWORD PTR [rsi+64]
	test	rcx, rcx
	je	SHORT $LN2@cctree_sol
; Line 558
	call	cctree_solve_rvalue
$LN2@cctree_sol:
; Line 566
	add	r14, 8
	jmp	$LL4@cctree_sol
$LN3@cctree_sol:
; Line 567
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
cctree_solve_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_constant
_TEXT	SEGMENT
root$ = 48
mark$ = 56
type$ = 64
token$ = 72
cctree_constant PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 300
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 7
	call	cctree_new
; Line 302
	mov	rcx, QWORD PTR [rdi+8]
	mov	QWORD PTR [rax+48], rbx
; Line 304
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+96], rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_constant ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_ternary
_TEXT	SEGMENT
root$ = 48
mark$ = 56
cond_tree$ = 64
then_tree$ = 72
else_tree$ = 80
cctree_ternary PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 281
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 17
	call	cctree_new
; Line 284
	mov	rcx, QWORD PTR else_tree$[rsp]
	mov	QWORD PTR [rax+64], rbx
; Line 286
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+72], rdi
	mov	QWORD PTR [rax+80], rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_ternary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_binary
_TEXT	SEGMENT
root$ = 48
mark$ = 56
token$ = 64
lhs$ = 72
rhs$ = 80
cctree_binary PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 272
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 18
	call	cctree_new
; Line 273
	mov	ecx, DWORD PTR [rbx]
; Line 277
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax+40], ecx
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rax+80], rcx
	mov	QWORD PTR [rax+72], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_binary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_unary
_TEXT	SEGMENT
root$ = 48
mark$ = 56
token$ = 64
rval$ = 72
cctree_unary PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 264
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 19
	call	cctree_new
; Line 265
	mov	ecx, DWORD PTR [rbx]
; Line 268
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax+40], ecx
	mov	QWORD PTR [rax+80], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_unary ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_identifier
_TEXT	SEGMENT
root$ = 48
mark$ = 56
name$ = 64
cctree_identifier PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 257
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 6
	call	cctree_new
; Line 258
	mov	QWORD PTR [rax+24], rbx
; Line 260
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_decl
_TEXT	SEGMENT
root$ = 48
mark$ = 56
type$ = 64
list$ = 72
cctree_decl PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 249
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 16
	call	cctree_new
; Line 250
	mov	QWORD PTR [rax+48], rbx
; Line 253
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+32], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_decl ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_decl_name
_TEXT	SEGMENT
root$ = 48
mark$ = 56
type$ = 64
name$ = 72
size$ = 80
init$ = 88
cctree_decl_name PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 239
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 15
	call	cctree_new
	mov	rcx, rax
; Line 240
	mov	QWORD PTR [rax+48], rbx
; Line 144
	test	rdi, rdi
	je	SHORT $LN5@cctree_dec
	mov	rax, QWORD PTR [rdi+24]
	jmp	SHORT $LN6@cctree_dec
$LN5@cctree_dec:
	xor	eax, eax
$LN6@cctree_dec:
; Line 245
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rcx+24], rax
	mov	rax, QWORD PTR size$[rsp]
	mov	QWORD PTR [rcx+56], rax
	mov	rax, QWORD PTR init$[rsp]
	mov	QWORD PTR [rcx+64], rax
	mov	rax, rcx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_return
_TEXT	SEGMENT
root$ = 48
mark$ = 56
rval$ = 64
cctree_return PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 232
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 12
	call	cctree_new
; Line 233
	mov	QWORD PTR [rax+80], rbx
; Line 235
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_return ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_goto
_TEXT	SEGMENT
root$ = 48
mark$ = 56
name$ = 64
cctree_goto PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 225
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 13
	call	cctree_new
; Line 144
	test	rbx, rbx
	je	SHORT $LN5@cctree_got
	mov	rcx, QWORD PTR [rbx+24]
; Line 226
	mov	QWORD PTR [rax+24], rcx
; Line 228
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN5@cctree_got:
; Line 226
	mov	QWORD PTR [rax+24], 0
; Line 228
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_goto ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_label
_TEXT	SEGMENT
root$ = 48
mark$ = 56
name$ = 64
list$ = 72
cctree_label PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 217
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 11
	call	cctree_new
; Line 144
	test	rbx, rbx
	je	SHORT $LN5@cctree_lab
	mov	rcx, QWORD PTR [rbx+24]
; Line 218
	mov	QWORD PTR [rax+24], rcx
; Line 219
	mov	QWORD PTR [rax+32], rdi
; Line 221
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN5@cctree_lab:
	mov	rbx, QWORD PTR [rsp+48]
; Line 144
	xor	ecx, ecx
; Line 218
	mov	QWORD PTR [rax+24], rcx
; Line 219
	mov	QWORD PTR [rax+32], rdi
; Line 221
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_label ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_while
_TEXT	SEGMENT
root$ = 48
mark$ = 56
cond_tree$ = 64
then_tree$ = 72
cctree_while PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 208
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
; Line 209
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 14
	call	cctree_new
; Line 210
	mov	QWORD PTR [rax+64], rbx
; Line 213
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+72], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_while ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_block
_TEXT	SEGMENT
root$ = 48
mark$ = 56
list$ = 64
cctree_block PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 201
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 10
	call	cctree_new
; Line 202
	mov	QWORD PTR [rax+32], rbx
; Line 204
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_block ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_call
_TEXT	SEGMENT
root$ = 48
mark$ = 56
lval$ = 64
rval$ = 72
cctree_call PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 193
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	rdi, r9
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 21
	call	cctree_new
; Line 194
	mov	QWORD PTR [rax+72], rbx
; Line 197
	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rax+80], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_call ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_group
_TEXT	SEGMENT
root$ = 48
mark$ = 56
init$ = 64
cctree_group PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 186
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8
	mov	r8d, edx
	mov	rdx, rcx
	mov	ecx, 20
	call	cctree_new
; Line 187
	mov	QWORD PTR [rax+64], rbx
; Line 189
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_group ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_translation_unit
_TEXT	SEGMENT
cctree_translation_unit PROC				; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 180
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], 22
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 182
	add	rsp, 40					; 00000028H
	ret	0
cctree_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_struct
_TEXT	SEGMENT
list$ = 48
name$ = 56
cctree_struct PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 171
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
	mov	rsi, rdx
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
; Line 127
	xor	edx, edx
	mov	r8d, 176				; 000000b0H
	mov	rcx, rax
	mov	rdi, rax
	call	memset
; Line 128
	mov	DWORD PTR [rdi], 1
; Line 144
	mov	rax, rdi
; Line 173
	mov	QWORD PTR [rdi+32], rbx
; Line 144
	test	rsi, rsi
	je	SHORT $LN7@cctree_str
	mov	rcx, QWORD PTR [rsi+24]
; Line 174
	mov	QWORD PTR [rdi+24], rcx
; Line 176
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@cctree_str:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rdi+24], 0
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_struct ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctype_new_fun
_TEXT	SEGMENT
type$ = 48
list$ = 56
cctype_new_fun PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 163
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rsi, rdx
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
; Line 127
	xor	edx, edx
	mov	r8d, 176				; 000000b0H
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; Line 165
	mov	QWORD PTR [rbx+32], rsi
; Line 166
	mov	rax, rbx
; Line 167
	mov	rsi, QWORD PTR [rsp+56]
; Line 128
	mov	DWORD PTR [rbx], 3
; Line 164
	mov	QWORD PTR [rbx+48], rdi
; Line 167
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctype_new_fun ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctype_new_arr
_TEXT	SEGMENT
type$ = 48
cctype_new_arr PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 156
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
; Line 127
	xor	edx, edx
	mov	r8d, 176				; 000000b0H
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; Line 158
	mov	rax, rbx
; Line 128
	mov	DWORD PTR [rbx], 4
; Line 157
	mov	QWORD PTR [rbx+48], rdi
; Line 159
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctype_new_arr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctype_new_ptr
_TEXT	SEGMENT
type$ = 48
cctype_new_ptr PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 149
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
; Line 127
	xor	edx, edx
	mov	r8d, 176				; 000000b0H
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; Line 151
	mov	rax, rbx
; Line 128
	mov	DWORD PTR [rbx], 5
; Line 150
	mov	QWORD PTR [rbx+48], rdi
; Line 152
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctype_new_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_name
_TEXT	SEGMENT
name$ = 8
cctree_name PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 144
	test	rcx, rcx
	je	SHORT $LN3@cctree_nam
	mov	rax, QWORD PTR [rcx+24]
; Line 145
	ret	0
$LN3@cctree_nam:
; Line 144
	xor	eax, eax
; Line 145
	ret	0
cctree_name ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_clone
_TEXT	SEGMENT
tree$ = 48
cctree_clone PROC					; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 136
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	r8d, DWORD PTR [rcx+16]
	mov	rbx, rcx
	mov	rdx, QWORD PTR [rcx+8]
	mov	ecx, DWORD PTR [rcx]
	call	cctree_new
; Line 137
	movups	xmm0, XMMWORD PTR [rbx]
	movups	xmm1, XMMWORD PTR [rbx+16]
	movups	XMMWORD PTR [rax], xmm0
	movups	xmm0, XMMWORD PTR [rbx+32]
	movups	XMMWORD PTR [rax+16], xmm1
	movups	xmm1, XMMWORD PTR [rbx+48]
	movups	XMMWORD PTR [rax+32], xmm0
	movups	xmm0, XMMWORD PTR [rbx+64]
	movups	XMMWORD PTR [rax+48], xmm1
	movups	xmm1, XMMWORD PTR [rbx+80]
	movups	XMMWORD PTR [rax+64], xmm0
	movups	xmm0, XMMWORD PTR [rbx+96]
	movups	XMMWORD PTR [rax+80], xmm1
	movups	xmm1, XMMWORD PTR [rbx+128]
	movups	XMMWORD PTR [rax+96], xmm0
	movups	xmm0, XMMWORD PTR [rbx+112]
	movups	XMMWORD PTR [rax+112], xmm0
	movups	xmm0, XMMWORD PTR [rbx+144]
	movups	XMMWORD PTR [rax+128], xmm1
	movups	xmm1, XMMWORD PTR [rbx+160]
	movups	XMMWORD PTR [rax+144], xmm0
	movups	XMMWORD PTR [rax+160], xmm1
; Line 139
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
cctree_clone ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_void@@YAXXZ
text$di	SEGMENT
??__Ectype_void@@YAXXZ PROC				; `dynamic initializer for 'ctype_void'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 70
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 70
	mov	QWORD PTR ctype_void, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 70
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_void@@YAXXZ ENDP				; `dynamic initializer for 'ctype_void''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_uint8@@YAXXZ
text$di	SEGMENT
??__Ectype_uint8@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint8'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 69
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 69
	mov	QWORD PTR ctype_uint8, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 69
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint8@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint8''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_uint16@@YAXXZ
text$di	SEGMENT
??__Ectype_uint16@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint16'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 68
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 68
	mov	QWORD PTR ctype_uint16, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 68
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint16@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint16''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_uint32@@YAXXZ
text$di	SEGMENT
??__Ectype_uint32@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint32'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 67
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 67
	mov	QWORD PTR ctype_uint32, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 67
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint32''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_uint64@@YAXXZ
text$di	SEGMENT
??__Ectype_uint64@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint64'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 66
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 66
	mov	QWORD PTR ctype_uint64, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 66
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint64''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_int8@@YAXXZ
text$di	SEGMENT
??__Ectype_int8@@YAXXZ PROC				; `dynamic initializer for 'ctype_int8'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 65
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 65
	mov	QWORD PTR ctype_int8, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 65
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int8@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int8''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_int16@@YAXXZ
text$di	SEGMENT
??__Ectype_int16@@YAXXZ PROC				; `dynamic initializer for 'ctype_int16'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 64
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 64
	mov	QWORD PTR ctype_int16, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 64
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int16@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int16''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_int32@@YAXXZ
text$di	SEGMENT
??__Ectype_int32@@YAXXZ PROC				; `dynamic initializer for 'ctype_int32'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 63
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 63
	mov	QWORD PTR ctype_int32, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 63
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int32''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_int64@@YAXXZ
text$di	SEGMENT
??__Ectype_int64@@YAXXZ PROC				; `dynamic initializer for 'ctype_int64'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 62
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 62
	mov	QWORD PTR ctype_int64, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 62
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int64''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_flo64@@YAXXZ
text$di	SEGMENT
??__Ectype_flo64@@YAXXZ PROC				; `dynamic initializer for 'ctype_flo64'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 61
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 61
	mov	QWORD PTR ctype_flo64, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 61
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_flo64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_flo64''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??__Ectype_flo32@@YAXXZ
text$di	SEGMENT
??__Ectype_flo32@@YAXXZ PROC				; `dynamic initializer for 'ctype_flo32'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 60
	sub	rsp, 40					; 00000028H
; Line 126
	mov	ecx, 176				; 000000b0H
	call	malloc
	xorps	xmm0, xmm0
; Line 60
	mov	QWORD PTR ctype_flo32, rax
; Line 127
	xor	ecx, ecx
; Line 128
	mov	QWORD PTR [rax], rcx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 129
	mov	QWORD PTR [rax+8], rcx
; Line 130
	mov	DWORD PTR [rax+16], ecx
; Line 60
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_flo32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_flo32''
text$di	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_new
_TEXT	SEGMENT
kind$ = 48
root$ = 56
mark$ = 64
cctree_new PROC						; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 126
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	ebx, ecx
	mov	esi, r8d
	mov	ecx, 176				; 000000b0H
	mov	rdi, rdx
	call	malloc
	xorps	xmm0, xmm0
; Line 127
	xor	ecx, ecx
	mov	DWORD PTR [rax+4], ecx
	movups	XMMWORD PTR [rax+20], xmm0
	movups	XMMWORD PTR [rax+36], xmm0
	movups	XMMWORD PTR [rax+52], xmm0
	movups	XMMWORD PTR [rax+68], xmm0
	movups	XMMWORD PTR [rax+84], xmm0
	movups	XMMWORD PTR [rax+100], xmm0
	movups	XMMWORD PTR [rax+116], xmm0
	movups	XMMWORD PTR [rax+132], xmm0
	movups	XMMWORD PTR [rax+148], xmm0
	mov	QWORD PTR [rax+164], rcx
	mov	DWORD PTR [rax+172], ecx
; Line 128
	mov	DWORD PTR [rax], ebx
; Line 132
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [rax+16], esi
	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rax+8], rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cctree_new ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctree_del
_TEXT	SEGMENT
tree$ = 8
cctree_del PROC						; COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 121
	jmp	free
cctree_del ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_test
_TEXT	SEGMENT
ccdlb_test PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 600
	ret	0
ccdlb_test ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstr_catf
_TEXT	SEGMENT
ccm$ = 80
fmt$ = 88
ccstr_catf PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 461
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rbp, rdx
; Line 463
	lea	r14, QWORD PTR fmt$[rsp+8]
	mov	rsi, rcx
; Line 453
	mov	r8, rdx
	mov	r9, r14
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsnprintf
; Line 454
	mov	r9d, eax
	mov	edx, 1
	mov	rcx, rsi
	lea	edi, DWORD PTR [rax+1]
	mov	r8d, edi
	call	ccdlb_arradd
; Line 455
	mov	ecx, eax
	mov	r9, r14
	add	rcx, QWORD PTR [rsi]
	mov	r8, rbp
	mov	edx, edi
	mov	ebx, eax
	call	stbsp_vsnprintf
; Line 470
	mov	eax, ebx
; Line 471
	add	rsp, 32					; 00000020H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
ccstr_catf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccstr_vcatf
_TEXT	SEGMENT
ccm$ = 48
fmt$ = 56
vli$ = 64
ccstr_vcatf PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 452
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rbp, r8
; Line 453
	mov	r9, r8
	mov	r8, rdx
	mov	r14, rdx
	mov	rsi, rcx
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsnprintf
; Line 454
	mov	r9d, eax
	mov	edx, 1
	mov	rcx, rsi
	lea	edi, DWORD PTR [rax+1]
	mov	r8d, edi
	call	ccdlb_arradd
; Line 455
	mov	ecx, eax
	mov	r9, rbp
	add	rcx, QWORD PTR [rsi]
	mov	r8, r14
	mov	edx, edi
	mov	ebx, eax
	call	stbsp_vsnprintf
; Line 457
	mov	rbp, QWORD PTR [rsp+56]
	mov	eax, ebx
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccstr_vcatf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblcat
_TEXT	SEGMENT
tbl$ = 64
isze$ = 72
len$ = 80
key$ = 88
ent$ = 96
ccdlb_tblcat PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 355
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 359
	mov	rbx, QWORD PTR ent$[rsp]
	mov	rbp, r9
	mov	esi, r8d
	mov	r15d, edx
	mov	r14, rcx
	cmp	QWORD PTR [rbx+16], 0
	je	SHORT $LN2@ccdlb_tblc
; Line 360
	mov	ecx, 32					; 00000020H
	call	malloc
	mov	QWORD PTR [rbx], rax
	xorps	xmm0, xmm0
; Line 363
	mov	r9d, 1
	mov	edx, 32					; 00000020H
	mov	r8d, r9d
	mov	rbx, rax
	movups	XMMWORD PTR [rax], xmm0
	movups	XMMWORD PTR [rax+16], xmm0
	mov	rcx, QWORD PTR [r14]
	add	rcx, 8
	call	ccdlb_arradd
$LN2@ccdlb_tblc:
; Line 371
	mov	r8d, r15d
	mov	edx, r15d
	mov	rcx, r14
	call	ccdlb_arradd_
; Line 372
	mov	rcx, QWORD PTR [r14]
	mov	r8, r15
	add	rcx, 24
	mov	edi, eax
	add	rcx, rdi
	xor	edx, edx
	call	memset
; Line 375
	test	esi, esi
	jle	SHORT $LN3@ccdlb_tblc
; Line 376
	lea	edx, DWORD PTR [rsi+1]
	mov	r9, rbp
	mov	r8d, edx
	lea	rcx, QWORD PTR [rbx+16]
	call	ccdlb_stradd
	jmp	SHORT $LN4@ccdlb_tblc
$LN3@ccdlb_tblc:
; Line 378
	mov	QWORD PTR [rbx+16], rbp
$LN4@ccdlb_tblc:
; Line 383
	mov	rbp, QWORD PTR [rsp+72]
	mov	eax, edi
	mov	DWORD PTR [rbx+8], esi
	mov	rsi, QWORD PTR [rsp+80]
	mov	DWORD PTR [rbx+24], edi
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
ccdlb_tblcat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblent_
_TEXT	SEGMENT
tbl$ = 48
len$ = 56
key$ = 64
ccdlb_tblent_ PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 336
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	movsxd	rsi, edx
	mov	rdi, r8
; Line 306
	test	edx, edx
	jle	SHORT $LN14@ccdlb_tble
; Line 307
	mov	eax, 5381				; 00001505H
	mov	r9, rsi
	npad	9
$LL22@ccdlb_tble:
	movsx	rdx, BYTE PTR [r9+r8-1]
	dec	r9
	imul	rax, rax, 33				; 00000021H
	add	rax, rdx
	test	r9, r9
	jne	SHORT $LL22@ccdlb_tble
	jmp	SHORT $LN15@ccdlb_tble
$LN14@ccdlb_tble:
; Line 309
	mov	rax, rdi
$LN15@ccdlb_tble:
; Line 338
	mov	r8, QWORD PTR [rcx+8]
	test	r8, r8
	je	SHORT $LN8@ccdlb_tble
	mov	ecx, DWORD PTR [r8-8]
	jmp	SHORT $LN9@ccdlb_tble
$LN8@ccdlb_tble:
	xor	ecx, ecx
$LN9@ccdlb_tble:
	shr	rcx, 5
	xor	edx, edx
	div	rcx
; Line 341
	mov	rax, QWORD PTR gs:88
	mov	ecx, DWORD PTR _tls_index
	mov	ebx, edx
	shl	rbx, 5
	add	rbx, r8
	mov	edx, OFFSET FLAT:ccerr
	mov	r14, QWORD PTR [rax+rcx*8]
	add	r14, rdx
; Line 342
	mov	rax, QWORD PTR [rbx+16]
	mov	DWORD PTR [r14], 0
	test	rax, rax
	je	SHORT $LN27@ccdlb_tble
$LL2@ccdlb_tble:
; Line 343
	cmp	DWORD PTR [rbx+8], esi
	jne	SHORT $LN4@ccdlb_tble
	cmp	rax, rdi
	je	SHORT $LN5@ccdlb_tble
	mov	r8, rsi
	mov	rdx, rdi
	mov	rcx, rax
	call	memcmp
	test	eax, eax
	je	SHORT $LN5@ccdlb_tble
$LN4@ccdlb_tble:
; Line 345
	mov	rax, QWORD PTR [rbx]
	test	rax, rax
	je	SHORT $LN27@ccdlb_tble
; Line 347
	mov	rbx, rax
	mov	rax, QWORD PTR [rax+16]
	test	rax, rax
	jne	SHORT $LL2@ccdlb_tble
$LN27@ccdlb_tble:
; Line 349
	mov	DWORD PTR [r14], 1
$LN5@ccdlb_tble:
; Line 351
	mov	rsi, QWORD PTR [rsp+56]
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccdlb_tblent_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblini
_TEXT	SEGMENT
dlb_$ = 48
isze$ = 56
ccdlb_tblini PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 315
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
; Line 316
	mov	rdi, QWORD PTR [rcx]
	mov	rsi, rcx
; Line 318
	test	rdi, rdi
	jne	$LN2@ccdlb_tbli
; Line 321
	mov	QWORD PTR [rsp+48], rbx
; Line 241
	xor	ebx, ebx
; Line 321
	mov	QWORD PTR [rsp+56], rbp
; Line 256
	mov	ebp, ebx
; Line 321
	imul	eax, edx, 255				; 000000ffH
	mov	QWORD PTR [rsp+64], r14
; Line 256
	cmp	ebx, eax
	jae	SHORT $LN14@ccdlb_tbli
; Line 265
	test	eax, eax
	cmove	eax, ebx
	xor	ecx, ecx
	mov	ebp, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
	mov	rdi, rax
; Line 269
	mov	QWORD PTR [rax], rbx
	mov	QWORD PTR [rax+8], rbx
$LN14@ccdlb_tbli:
; Line 322
	lea	rcx, QWORD PTR [rdi+24]
; Line 273
	mov	DWORD PTR [rdi+16], ebp
; Line 322
	test	rcx, rcx
; Line 274
	mov	DWORD PTR [rdi+20], ebx
; Line 322
	cmove	ebp, ebx
	xor	edx, edx
	mov	r8d, ebp
	call	memset
; Line 325
	xor	r9d, r9d
	lea	rcx, QWORD PTR [rdi+8]
	mov	r8d, 255				; 000000ffH
	lea	edx, QWORD PTR [r9+32]
	call	ccdlb_arradd
; Line 326
	mov	rcx, QWORD PTR [rdi+8]
	mov	rbp, QWORD PTR [rsp+56]
	test	rcx, rcx
	je	SHORT $LN6@ccdlb_tbli
	mov	ebx, DWORD PTR [rcx-8]
$LN6@ccdlb_tbli:
	mov	r8d, ebx
	xor	edx, edx
	call	memset
; Line 327
	mov	rax, QWORD PTR [rdi+8]
	mov	r14, QWORD PTR [rsp+64]
	mov	rbx, QWORD PTR [rsp+48]
	test	rax, rax
	je	SHORT $LN8@ccdlb_tbli
	or	DWORD PTR [rax-24], 2
$LN8@ccdlb_tbli:
; Line 330
	mov	QWORD PTR [rsi], rdi
$LN2@ccdlb_tbli:
; Line 332
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccdlb_tblini ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cchsh_abc
_TEXT	SEGMENT
len$ = 8
key$ = 16
cchsh_abc PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 305
	mov	r8, rdx
; Line 306
	test	ecx, ecx
	jle	SHORT $LN5@cchsh_abc
; Line 307
	movsxd	rdx, ecx
	mov	eax, 5381				; 00001505H
	add	r8, rdx
	npad	14
$LL10@cchsh_abc:
	movsx	rdx, BYTE PTR [r8-1]
	lea	r8, QWORD PTR [r8-1]
	imul	rax, rax, 33				; 00000021H
	add	rax, rdx
	sub	ecx, 1
	jne	SHORT $LL10@cchsh_abc
; Line 311
	ret	0
$LN5@cchsh_abc:
; Line 310
	mov	rax, r8
; Line 311
	ret	0
cchsh_abc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_stradd
_TEXT	SEGMENT
ccm$ = 48
cres$ = 56
ccom$ = 64
cpy$ = 72
ccdlb_stradd PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 291
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	r14, r9
	mov	ebp, edx
; Line 295
	mov	r9d, r8d
	mov	rbx, rcx
	mov	r8d, edx
	mov	edx, 1
	call	ccdlb_arradd
; Line 297
	lea	ecx, DWORD PTR [rbp-1]
	mov	edi, eax
	add	rdi, QWORD PTR [rbx]
	mov	rdx, r14
	mov	ebx, ecx
	mov	r8d, ecx
	mov	rcx, rdi
	mov	esi, eax
	call	memcpy
; Line 300
	mov	rbp, QWORD PTR [rsp+56]
	mov	eax, esi
	mov	rsi, QWORD PTR [rsp+64]
	mov	BYTE PTR [rbx+rdi], 0
	mov	rbx, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccdlb_stradd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_arradd
_TEXT	SEGMENT
ccm$ = 64
isze$ = 72
cres$ = 80
ccom$ = 88
ccdlb_arradd PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 280
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r12
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 283
	mov	rax, QWORD PTR [rcx]
; Line 284
	xor	r12d, r12d
	test	rax, rax
	mov	r15d, r9d
	mov	ebp, edx
	mov	r14, rcx
; Line 241
	mov	ebx, r12d
; Line 242
	mov	esi, r12d
; Line 284
	lea	rdi, QWORD PTR [rax-24]
	mov	eax, edx
	cmove	rdi, r12
	imul	eax, r8d
; Line 246
	test	rdi, rdi
	je	SHORT $LN6@ccdlb_arra
; Line 247
	mov	ebx, DWORD PTR [rdi+16]
; Line 248
	mov	esi, DWORD PTR [rdi+20]
$LN6@ccdlb_arra:
; Line 256
	lea	ecx, DWORD PTR [rsi+rax]
	mov	rax, rdi
	cmp	ebx, ecx
	jae	SHORT $LN9@ccdlb_arra
; Line 260
	lea	eax, DWORD PTR [rbx+rbx]
; Line 265
	cmp	eax, ecx
	cmovae	ecx, eax
	mov	ebx, ecx
	lea	rdx, QWORD PTR [rcx+24]
	mov	rcx, rdi
	call	realloc
; Line 267
	test	rdi, rdi
	jne	SHORT $LN9@ccdlb_arra
; Line 269
	mov	QWORD PTR [rax], r12
	mov	QWORD PTR [rax+8], r12
$LN9@ccdlb_arra:
; Line 287
	mov	rdi, QWORD PTR [rsp+88]
	mov	ecx, ebp
; Line 273
	mov	DWORD PTR [rax+16], ebx
; Line 286
	xor	edx, edx
; Line 287
	mov	rbx, QWORD PTR [rsp+64]
	imul	ecx, r15d
; Line 274
	add	ecx, esi
	mov	DWORD PTR [rax+20], ecx
; Line 285
	lea	rcx, QWORD PTR [rax+24]
; Line 286
	mov	eax, esi
	mov	QWORD PTR [r14], rcx
; Line 287
	mov	rsi, QWORD PTR [rsp+80]
	div	ebp
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r12
	ret	0
ccdlb_arradd ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_arradd_
_TEXT	SEGMENT
dlb_$ = 48
rsze$ = 56
csze$ = 64
ccdlb_arradd_ PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 225
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 236
	mov	rsi, QWORD PTR [rcx]
; Line 241
	xor	ebx, ebx
; Line 242
	xor	edi, edi
	mov	ebp, r8d
	mov	r14, rcx
	mov	r9, rsi
; Line 246
	test	rsi, rsi
	je	SHORT $LN2@ccdlb_arra
; Line 247
	mov	ebx, DWORD PTR [rsi+16]
; Line 248
	mov	edi, DWORD PTR [rsi+20]
$LN2@ccdlb_arra:
; Line 256
	lea	ecx, DWORD PTR [rdi+rdx]
	cmp	ebx, ecx
	jae	SHORT $LN5@ccdlb_arra
; Line 260
	lea	eax, DWORD PTR [rbx+rbx]
; Line 265
	cmp	eax, ecx
	cmovae	ecx, eax
	mov	ebx, ecx
	lea	rdx, QWORD PTR [rcx+24]
	mov	rcx, rsi
	call	realloc
	mov	QWORD PTR [r14], rax
	mov	r9, rax
; Line 267
	test	rsi, rsi
	jne	SHORT $LN5@ccdlb_arra
; Line 269
	mov	QWORD PTR [rax], rsi
	mov	QWORD PTR [rax+8], rsi
$LN5@ccdlb_arra:
; Line 276
	mov	rsi, QWORD PTR [rsp+64]
	lea	ecx, DWORD PTR [rdi+rbp]
	mov	rbp, QWORD PTR [rsp+56]
	mov	eax, edi
	mov	rdi, QWORD PTR [rsp+72]
	mov	DWORD PTR [r9+16], ebx
	mov	rbx, QWORD PTR [rsp+48]
	mov	DWORD PTR [r9+20], ecx
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
ccdlb_arradd_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblput
_TEXT	SEGMENT
tv676 = 32
tv678 = 40
ccm$ = 112
isze$ = 120
len$ = 128
key$ = 136
ccdlb_tblput PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 401
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
; Line 406
	mov	rax, QWORD PTR [rcx]
; Line 407
	xor	edi, edi
	test	rax, rax
	mov	r15d, edx
	mov	rbp, r9
	mov	r13d, r8d
	lea	rbx, QWORD PTR [rax-24]
	cmove	rbx, rdi
	test	rbx, rbx
	jne	SHORT $LN15@ccdlb_tblp
; Line 321
	imul	eax, r15d, 255				; 000000ffH
; Line 241
	mov	esi, edi
; Line 256
	test	eax, eax
	je	SHORT $LN21@ccdlb_tblp
; Line 265
	lea	rdx, QWORD PTR [rax+24]
	mov	esi, eax
	xor	ecx, ecx
	call	realloc
	mov	rbx, rax
; Line 269
	mov	QWORD PTR [rax], rdi
	mov	QWORD PTR [rax+8], rdi
$LN21@ccdlb_tblp:
; Line 322
	lea	rcx, QWORD PTR [rbx+24]
; Line 273
	mov	DWORD PTR [rbx+16], esi
; Line 322
	test	rcx, rcx
; Line 274
	mov	DWORD PTR [rbx+20], edi
; Line 322
	cmove	esi, edi
	xor	edx, edx
	mov	r8d, esi
	call	memset
; Line 325
	xor	r9d, r9d
	lea	rcx, QWORD PTR [rbx+8]
	mov	r8d, 255				; 000000ffH
	lea	edx, QWORD PTR [r9+32]
	call	ccdlb_arradd
; Line 326
	mov	rcx, QWORD PTR [rbx+8]
	test	rcx, rcx
	je	SHORT $LN13@ccdlb_tblp
	mov	eax, DWORD PTR [rcx-8]
	jmp	SHORT $LN14@ccdlb_tblp
$LN13@ccdlb_tblp:
	mov	eax, edi
$LN14@ccdlb_tblp:
	mov	r8d, eax
	xor	edx, edx
	call	memset
; Line 327
	mov	rax, QWORD PTR [rbx+8]
	test	rax, rax
	je	SHORT $LN15@ccdlb_tblp
	or	DWORD PTR [rax-24], 2
$LN15@ccdlb_tblp:
; Line 410
	mov	r8, rbp
	mov	QWORD PTR tv676[rsp], rbx
	mov	edx, r13d
	mov	rcx, rbx
	mov	esi, edi
	call	ccdlb_tblent_
; Line 411
	mov	ecx, DWORD PTR _tls_index
	mov	r14, rax
	mov	rax, QWORD PTR gs:88
	mov	edx, OFFSET FLAT:ccerr
	mov	rax, QWORD PTR [rax+rcx*8]
	add	rax, rdx
	mov	QWORD PTR tv678[rsp], rax
	cmp	DWORD PTR [rax], 1
	jne	$LN3@ccdlb_tblp
; Line 359
	mov	QWORD PTR [rsp+120], r12
	cmp	QWORD PTR [r14+16], rsi
	je	SHORT $LN24@ccdlb_tblp
; Line 360
	mov	ecx, 32					; 00000020H
	call	malloc
	mov	QWORD PTR [r14], rax
; Line 363
	lea	rcx, QWORD PTR [rbx+8]
	xorps	xmm0, xmm0
	mov	r9d, 1
	mov	edx, 32					; 00000020H
	mov	r8d, r9d
	movups	XMMWORD PTR [rax], xmm0
	mov	r14, rax
	movups	XMMWORD PTR [rax+16], xmm0
	call	ccdlb_arradd
$LN24@ccdlb_tblp:
; Line 241
	mov	ebp, edi
; Line 246
	test	rbx, rbx
	je	SHORT $LN29@ccdlb_tblp
; Line 247
	mov	ebp, DWORD PTR [rbx+16]
; Line 248
	mov	esi, DWORD PTR [rbx+20]
$LN29@ccdlb_tblp:
; Line 256
	lea	r12d, DWORD PTR [rsi+r15]
	cmp	ebp, r12d
	jae	SHORT $LN32@ccdlb_tblp
; Line 260
	lea	edx, DWORD PTR [rbp*2]
; Line 265
	mov	eax, r12d
	cmp	edx, r12d
	mov	rcx, rbx
	cmovae	eax, edx
	mov	ebp, eax
	lea	rdx, QWORD PTR [rax+24]
	call	realloc
	mov	rbx, rax
; Line 267
	cmp	QWORD PTR tv676[rsp], rdi
	jne	SHORT $LN32@ccdlb_tblp
; Line 269
	mov	QWORD PTR [rax], rdi
	mov	QWORD PTR [rax+8], rdi
$LN32@ccdlb_tblp:
; Line 372
	mov	ecx, esi
	mov	r8, r15
	add	rcx, 24
; Line 273
	mov	DWORD PTR [rbx+16], ebp
; Line 372
	add	rcx, rbx
; Line 274
	mov	DWORD PTR [rbx+20], r12d
; Line 372
	xor	edx, edx
	call	memset
	mov	r12, QWORD PTR [rsp+120]
; Line 375
	test	r13d, r13d
	jle	SHORT $LN25@ccdlb_tblp
; Line 376
	mov	r9, QWORD PTR key$[rsp]
	lea	edx, DWORD PTR [r13+1]
	mov	r8d, edx
	lea	rcx, QWORD PTR [r14+16]
	call	ccdlb_stradd
	jmp	SHORT $LN26@ccdlb_tblp
$LN25@ccdlb_tblp:
; Line 378
	mov	rcx, QWORD PTR key$[rsp]
	mov	QWORD PTR [r14+16], rcx
$LN26@ccdlb_tblp:
; Line 414
	mov	rcx, QWORD PTR ccm$[rsp]
	lea	rax, QWORD PTR [rbx+24]
; Line 380
	mov	DWORD PTR [r14+8], r13d
; Line 381
	mov	DWORD PTR [r14+24], esi
; Line 414
	mov	QWORD PTR [rcx], rax
; Line 417
	mov	rax, QWORD PTR tv678[rsp]
	jmp	SHORT $LN4@ccdlb_tblp
$LN3@ccdlb_tblp:
; Line 419
	mov	edi, 2
$LN4@ccdlb_tblp:
; Line 421
	mov	DWORD PTR [rax], edi
	xor	edx, edx
	mov	eax, esi
	div	r15d
; Line 422
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
ccdlb_tblput ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccdlb_tblget
_TEXT	SEGMENT
ccm$ = 48
isze$ = 56
len$ = 64
key$ = 72
ccdlb_tblget PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR [rcx]
; Line 389
	xor	ebx, ebx
; Line 391
	mov	r10d, DWORD PTR _tls_index
	test	rax, rax
	mov	esi, edx
	mov	r11d, r8d
	mov	edx, OFFSET FLAT:ccerr
	lea	rcx, QWORD PTR [rax-24]
	mov	rax, QWORD PTR gs:88
	cmove	rcx, rbx
	mov	rdi, QWORD PTR [rax+r10*8]
	add	rdi, rdx
	mov	DWORD PTR [rdi], 1
; Line 392
	test	rcx, rcx
	je	SHORT $LN3@ccdlb_tblg
; Line 393
	mov	r8, r9
	mov	edx, r11d
	call	ccdlb_tblent_
; Line 394
	cmp	DWORD PTR [rdi], ebx
	jne	SHORT $LN3@ccdlb_tblg
	mov	ebx, DWORD PTR [rax+24]
$LN3@ccdlb_tblg:
; Line 396
	mov	eax, ebx
	xor	edx, edx
; Line 397
	mov	rbx, QWORD PTR [rsp+48]
	div	esi
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ccdlb_tblget ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccformat
_TEXT	SEGMENT
fmt$ = 48
ccformat PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclog.h
; Line 55
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 37
	mov	edx, DWORD PTR _tls_index
; Line 57
	lea	r9, QWORD PTR fmt$[rsp+8]
; Line 37
	mov	rax, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	rbx, QWORD PTR [rax+rdx*8]
; Line 28
	mov	edx, 255				; 000000ffH
; Line 37
	add	rbx, r8
; Line 28
	mov	r8, rcx
	mov	rcx, rbx
	call	stbsp_vsnprintf
; Line 61
	mov	rax, rbx
; Line 62
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccformat ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccformatex
_TEXT	SEGMENT
buf$ = 48
len$ = 56
fmt$ = 64
ccformatex PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclog.h
; Line 44
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 40					; 00000028H
; Line 46
	lea	r9, QWORD PTR fmt$[rsp+8]
; Line 28
	call	stbsp_vsnprintf
; Line 51
	add	rsp, 40					; 00000028H
	ret	0
ccformatex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccformatv
_TEXT	SEGMENT
fmt$ = 48
vli$ = 56
ccformatv PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclog.h
; Line 33
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 37
	mov	r8d, DWORD PTR _tls_index
	mov	rax, QWORD PTR gs:88
	mov	r9d, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	rbx, QWORD PTR [rax+r8*8]
; Line 28
	mov	r8, rcx
; Line 37
	add	rbx, r9
; Line 28
	mov	r9, rdx
	mov	edx, 255				; 000000ffH
	mov	rcx, rbx
	call	stbsp_vsnprintf
; Line 39
	mov	rax, rbx
; Line 40
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccformatv ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccformatvex
_TEXT	SEGMENT
buf$ = 8
len$ = 16
fmt$ = 24
vli$ = 32
ccformatvex PROC					; COMDAT
; File W:\cpp\void\ktt-c\cclog.h
; Line 28
	jmp	stbsp_vsnprintf
ccformatvex ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccout
_TEXT	SEGMENT
string$ = 8
ccout	PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclog.h
; Line 13
	jmp	printf
ccout	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__raise_to_power10
_TEXT	SEGMENT
bt$1 = 80
bt$2 = 80
bt$3 = 80
bt$4 = 80
bt$5 = 80
bt$6 = 80
ohi$ = 80
bhi$7 = 88
ahi$8 = 88
bhi$9 = 88
ahi$10 = 88
bhi$11 = 88
ahi$12 = 88
ahi$13 = 88
bhi$14 = 88
ahi$15 = 88
ph$ = 88
bhi$16 = 88
ahi$17 = 88
olo$ = 88
d$ = 96
power$ = 104
stbsp__raise_to_power10 PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1639
	movsd	QWORD PTR [rsp+24], xmm2
	push	rbp
	mov	rbp, rsp
	sub	rsp, 64					; 00000040H
	movaps	XMMWORD PTR [rsp+16], xmm8
	movaps	xmm5, xmm2
	movaps	XMMWORD PTR [rsp], xmm9
	mov	r10, rdx
	mov	r11, rcx
; Line 1641
	cmp	r9d, 22
	ja	$LN74@stbsp__rai
; Line 1642
	movzx	eax, BYTE PTR d$[rbp-64]
	mov	BYTE PTR bt$6[rbp-64], al
	movzx	eax, BYTE PTR d$[rbp-63]
	mov	BYTE PTR bt$6[rbp-63], al
	movzx	eax, BYTE PTR d$[rbp-62]
	mov	BYTE PTR bt$6[rbp-62], al
	movzx	eax, BYTE PTR d$[rbp-61]
	mov	BYTE PTR bt$6[rbp-61], al
	movzx	eax, BYTE PTR d$[rbp-60]
	mov	BYTE PTR bt$6[rbp-60], al
	movzx	eax, BYTE PTR d$[rbp-59]
	mov	BYTE PTR bt$6[rbp-59], al
	movzx	eax, BYTE PTR d$[rbp-58]
	mov	BYTE PTR bt$6[rbp-58], al
	movzx	eax, BYTE PTR d$[rbp-57]
	mov	BYTE PTR bt$6[rbp-57], al
	mov	rax, QWORD PTR bt$6[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	movsxd	r8, r9d
	mov	QWORD PTR bt$6[rbp-64], rax
	lea	r9, OFFSET FLAT:__ImageBase
	mov	BYTE PTR ahi$17[rbp-64], al
	movzx	eax, BYTE PTR bt$6[rbp-63]
	movsd	xmm3, QWORD PTR stbsp__bot[r9+r8*8]
	mov	BYTE PTR ahi$17[rbp-63], al
	movaps	xmm9, xmm3
	movzx	eax, BYTE PTR bt$6[rbp-62]
	mov	BYTE PTR ahi$17[rbp-62], al
	movzx	eax, BYTE PTR bt$6[rbp-61]
	mov	BYTE PTR ahi$17[rbp-61], al
	movzx	eax, BYTE PTR bt$6[rbp-60]
	mov	BYTE PTR ahi$17[rbp-60], al
	movzx	eax, BYTE PTR bt$6[rbp-59]
	mov	BYTE PTR ahi$17[rbp-59], al
	movzx	eax, BYTE PTR bt$6[rbp-58]
	mov	BYTE PTR ahi$17[rbp-58], al
	movzx	eax, BYTE PTR bt$6[rbp-57]
	mov	BYTE PTR ahi$17[rbp-57], al
	movsd	xmm1, QWORD PTR ahi$17[rbp-64]
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8]
	subsd	xmm5, xmm1
	mov	BYTE PTR bt$6[rbp-64], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+1]
	mov	BYTE PTR bt$6[rbp-63], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+2]
	mov	BYTE PTR bt$6[rbp-62], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+3]
	mov	BYTE PTR bt$6[rbp-61], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+4]
	mov	BYTE PTR bt$6[rbp-60], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+5]
	mov	BYTE PTR bt$6[rbp-59], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+6]
	mov	BYTE PTR bt$6[rbp-58], al
	movzx	eax, BYTE PTR stbsp__bot[r9+r8*8+7]
	mov	BYTE PTR bt$6[rbp-57], al
	mov	rax, QWORD PTR bt$6[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm2
	mov	BYTE PTR bhi$16[rbp-64], al
	mov	QWORD PTR bt$6[rbp-64], rax
	movzx	eax, BYTE PTR bt$6[rbp-63]
	mov	BYTE PTR bhi$16[rbp-63], al
	movzx	eax, BYTE PTR bt$6[rbp-62]
	mov	BYTE PTR bhi$16[rbp-62], al
	movzx	eax, BYTE PTR bt$6[rbp-61]
	mov	BYTE PTR bhi$16[rbp-61], al
	movzx	eax, BYTE PTR bt$6[rbp-60]
	mov	BYTE PTR bhi$16[rbp-60], al
	movzx	eax, BYTE PTR bt$6[rbp-59]
	mov	BYTE PTR bhi$16[rbp-59], al
	movzx	eax, BYTE PTR bt$6[rbp-58]
	mov	BYTE PTR bhi$16[rbp-58], al
	movzx	eax, BYTE PTR bt$6[rbp-57]
	mov	BYTE PTR bhi$16[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$16[rbp-64]
	movaps	xmm8, xmm2
	subsd	xmm3, xmm2
	mulsd	xmm8, xmm1
	movaps	xmm0, xmm3
	subsd	xmm8, xmm9
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm5
	mulsd	xmm1, xmm2
	mulsd	xmm3, xmm5
	addsd	xmm8, xmm0
	addsd	xmm8, xmm1
	addsd	xmm8, xmm3
; Line 1643
	jmp	$LN85@stbsp__rai
$LN74@stbsp__rai:
; Line 1651
	mov	eax, 13
	movaps	XMMWORD PTR [rsp+48], xmm6
	mov	edx, r9d
	movaps	XMMWORD PTR [rsp+32], xmm7
	neg	edx
; Line 1655
	movaps	xmm9, xmm5
	test	r9d, r9d
	xorps	xmm8, xmm8
	cmovns	edx, r9d
	imul	r8d, edx, 713				; 000002c9H
	sar	r8d, 14
	cmp	r8d, eax
	cmovg	r8d, eax
	imul	eax, r8d, 23
	sub	edx, eax
; Line 1657
	test	r9d, r9d
	lea	r9, OFFSET FLAT:__ImageBase
	jns	$LN78@stbsp__rai
; Line 1658
	test	edx, edx
	je	$LN80@stbsp__rai
; Line 1660
	movzx	eax, BYTE PTR d$[rbp-64]
	movaps	xmm3, xmm5
	mov	BYTE PTR bt$5[rbp-64], al
	movzx	eax, BYTE PTR d$[rbp-63]
	mov	BYTE PTR bt$5[rbp-63], al
	movzx	eax, BYTE PTR d$[rbp-62]
	mov	BYTE PTR bt$5[rbp-62], al
	movzx	eax, BYTE PTR d$[rbp-61]
	mov	BYTE PTR bt$5[rbp-61], al
	movzx	eax, BYTE PTR d$[rbp-60]
	mov	BYTE PTR bt$5[rbp-60], al
	movzx	eax, BYTE PTR d$[rbp-59]
	mov	BYTE PTR bt$5[rbp-59], al
	movzx	eax, BYTE PTR d$[rbp-58]
	mov	BYTE PTR bt$5[rbp-58], al
	movzx	eax, BYTE PTR d$[rbp-57]
	mov	BYTE PTR bt$5[rbp-57], al
	mov	rax, QWORD PTR bt$5[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	movsxd	rcx, edx
	mov	QWORD PTR bt$5[rbp-64], rax
	mov	BYTE PTR ahi$15[rbp-64], al
	movzx	eax, BYTE PTR bt$5[rbp-63]
	movsd	xmm4, QWORD PTR stbsp__negbot[r9+rcx*8-8]
	mov	BYTE PTR ahi$15[rbp-63], al
	movaps	xmm9, xmm4
	movzx	eax, BYTE PTR bt$5[rbp-62]
	mov	BYTE PTR ahi$15[rbp-62], al
	movzx	eax, BYTE PTR bt$5[rbp-61]
	mov	BYTE PTR ahi$15[rbp-61], al
	movzx	eax, BYTE PTR bt$5[rbp-60]
	mov	BYTE PTR ahi$15[rbp-60], al
	movzx	eax, BYTE PTR bt$5[rbp-59]
	mov	BYTE PTR ahi$15[rbp-59], al
	movzx	eax, BYTE PTR bt$5[rbp-58]
	mov	BYTE PTR ahi$15[rbp-58], al
	movzx	eax, BYTE PTR bt$5[rbp-57]
	mov	BYTE PTR ahi$15[rbp-57], al
	movsd	xmm1, QWORD PTR ahi$15[rbp-64]
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-8]
	subsd	xmm3, xmm1
	mov	BYTE PTR bt$5[rbp-64], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-7]
	mov	BYTE PTR bt$5[rbp-63], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-6]
	mov	BYTE PTR bt$5[rbp-62], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-5]
	mov	BYTE PTR bt$5[rbp-61], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-4]
	mov	BYTE PTR bt$5[rbp-60], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-3]
	mov	BYTE PTR bt$5[rbp-59], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-2]
	mov	BYTE PTR bt$5[rbp-58], al
	movzx	eax, BYTE PTR stbsp__negbot[r9+rcx*8-1]
	mov	BYTE PTR bt$5[rbp-57], al
	mov	rax, QWORD PTR bt$5[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm5
	mov	BYTE PTR bhi$14[rbp-64], al
	mov	QWORD PTR bt$5[rbp-64], rax
	movzx	eax, BYTE PTR bt$5[rbp-63]
	mov	BYTE PTR bhi$14[rbp-63], al
	movzx	eax, BYTE PTR bt$5[rbp-62]
	mov	BYTE PTR bhi$14[rbp-62], al
	movzx	eax, BYTE PTR bt$5[rbp-61]
	mov	BYTE PTR bhi$14[rbp-61], al
	movzx	eax, BYTE PTR bt$5[rbp-60]
	mov	BYTE PTR bhi$14[rbp-60], al
	movzx	eax, BYTE PTR bt$5[rbp-59]
	mov	BYTE PTR bhi$14[rbp-59], al
	movzx	eax, BYTE PTR bt$5[rbp-58]
	mov	BYTE PTR bhi$14[rbp-58], al
	movzx	eax, BYTE PTR bt$5[rbp-57]
	mov	BYTE PTR bhi$14[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$14[rbp-64]
	movaps	xmm8, xmm2
	subsd	xmm4, xmm2
	mulsd	xmm8, xmm1
	movaps	xmm0, xmm4
	subsd	xmm8, xmm9
; Line 1661
	mulsd	xmm5, QWORD PTR stbsp__negboterr[r9+rcx*8-8]
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm3
	mulsd	xmm1, xmm2
	mulsd	xmm4, xmm3
	addsd	xmm8, xmm0
	addsd	xmm8, xmm1
	addsd	xmm8, xmm4
	addsd	xmm8, xmm5
$LN80@stbsp__rai:
; Line 1663
	test	r8d, r8d
	je	$LN352@stbsp__rai
; Line 1666
	movsxd	rcx, r8d
	movaps	xmm7, xmm8
	addsd	xmm7, xmm9
	movsd	xmm6, QWORD PTR stbsp__negtop[r9+rcx*8-8]
	movsd	QWORD PTR ph$[rbp-64], xmm7
	movaps	xmm0, xmm7
	movzx	eax, BYTE PTR ph$[rbp-64]
	subsd	xmm0, xmm9
	mov	BYTE PTR bt$4[rbp-64], al
	movaps	xmm9, xmm6
	movzx	eax, BYTE PTR ph$[rbp-63]
	movaps	xmm5, xmm7
	mov	BYTE PTR bt$4[rbp-63], al
	movzx	eax, BYTE PTR ph$[rbp-62]
	mov	BYTE PTR bt$4[rbp-62], al
	subsd	xmm8, xmm0
	movzx	eax, BYTE PTR ph$[rbp-61]
	mov	BYTE PTR bt$4[rbp-61], al
	movzx	eax, BYTE PTR ph$[rbp-60]
	mov	BYTE PTR bt$4[rbp-60], al
	movzx	eax, BYTE PTR ph$[rbp-59]
	mov	BYTE PTR bt$4[rbp-59], al
	movzx	eax, BYTE PTR ph$[rbp-58]
	mov	BYTE PTR bt$4[rbp-58], al
	movzx	eax, BYTE PTR ph$[rbp-57]
	mov	BYTE PTR bt$4[rbp-57], al
	mov	rax, QWORD PTR bt$4[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm7
	mov	QWORD PTR bt$4[rbp-64], rax
; Line 1667
	mulsd	xmm7, QWORD PTR stbsp__negtoperr[r9+rcx*8-8]
	mov	BYTE PTR ahi$13[rbp-64], al
	movzx	eax, BYTE PTR bt$4[rbp-63]
	mov	BYTE PTR ahi$13[rbp-63], al
	movzx	eax, BYTE PTR bt$4[rbp-62]
	mov	BYTE PTR ahi$13[rbp-62], al
	movzx	eax, BYTE PTR bt$4[rbp-61]
	mov	BYTE PTR ahi$13[rbp-61], al
	movzx	eax, BYTE PTR bt$4[rbp-60]
	mov	BYTE PTR ahi$13[rbp-60], al
	movzx	eax, BYTE PTR bt$4[rbp-59]
	mov	BYTE PTR ahi$13[rbp-59], al
	movzx	eax, BYTE PTR bt$4[rbp-58]
	mov	BYTE PTR ahi$13[rbp-58], al
	movzx	eax, BYTE PTR bt$4[rbp-57]
	mov	BYTE PTR ahi$13[rbp-57], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-8]
	mov	BYTE PTR bt$4[rbp-64], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-7]
	mov	BYTE PTR bt$4[rbp-63], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-6]
	mov	BYTE PTR bt$4[rbp-62], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-5]
	mov	BYTE PTR bt$4[rbp-61], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-4]
	mov	BYTE PTR bt$4[rbp-60], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-3]
	mov	BYTE PTR bt$4[rbp-59], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-2]
	mov	BYTE PTR bt$4[rbp-58], al
	movzx	eax, BYTE PTR stbsp__negtop[r9+rcx*8-1]
; Line 1671
	jmp	$LN354@stbsp__rai
$LN78@stbsp__rai:
; Line 1672
	test	edx, edx
	je	$LN84@stbsp__rai
; Line 1674
	mov	ecx, 22
	mov	eax, edx
	cmp	edx, ecx
	cmovg	eax, ecx
; Line 1677
	movsxd	rcx, eax
	sub	edx, eax
	movzx	eax, BYTE PTR d$[rbp-64]
	mov	BYTE PTR bt$3[rbp-64], al
	movzx	eax, BYTE PTR d$[rbp-63]
	mov	BYTE PTR bt$3[rbp-63], al
	movzx	eax, BYTE PTR d$[rbp-62]
	mov	BYTE PTR bt$3[rbp-62], al
	movzx	eax, BYTE PTR d$[rbp-61]
	movsd	xmm3, QWORD PTR stbsp__bot[r9+rcx*8]
	mov	BYTE PTR bt$3[rbp-61], al
	movaps	xmm9, xmm3
	movzx	eax, BYTE PTR d$[rbp-60]
	mov	BYTE PTR bt$3[rbp-60], al
	movzx	eax, BYTE PTR d$[rbp-59]
	mov	BYTE PTR bt$3[rbp-59], al
	movzx	eax, BYTE PTR d$[rbp-58]
	mov	BYTE PTR bt$3[rbp-58], al
	movzx	eax, BYTE PTR d$[rbp-57]
	mov	BYTE PTR bt$3[rbp-57], al
	mov	rax, QWORD PTR bt$3[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm5
	mov	QWORD PTR bt$3[rbp-64], rax
	mov	BYTE PTR ahi$12[rbp-64], al
	movzx	eax, BYTE PTR bt$3[rbp-63]
	mov	BYTE PTR ahi$12[rbp-63], al
	movzx	eax, BYTE PTR bt$3[rbp-62]
	mov	BYTE PTR ahi$12[rbp-62], al
	movzx	eax, BYTE PTR bt$3[rbp-61]
	mov	BYTE PTR ahi$12[rbp-61], al
	movzx	eax, BYTE PTR bt$3[rbp-60]
	mov	BYTE PTR ahi$12[rbp-60], al
	movzx	eax, BYTE PTR bt$3[rbp-59]
	mov	BYTE PTR ahi$12[rbp-59], al
	movzx	eax, BYTE PTR bt$3[rbp-58]
	mov	BYTE PTR ahi$12[rbp-58], al
	movzx	eax, BYTE PTR bt$3[rbp-57]
	mov	BYTE PTR ahi$12[rbp-57], al
	movsd	xmm1, QWORD PTR ahi$12[rbp-64]
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8]
	subsd	xmm5, xmm1
	mov	BYTE PTR bt$3[rbp-64], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+1]
	mov	BYTE PTR bt$3[rbp-63], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+2]
	mov	BYTE PTR bt$3[rbp-62], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+3]
	mov	BYTE PTR bt$3[rbp-61], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+4]
	mov	BYTE PTR bt$3[rbp-60], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+5]
	mov	BYTE PTR bt$3[rbp-59], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+6]
	mov	BYTE PTR bt$3[rbp-58], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+7]
	mov	BYTE PTR bt$3[rbp-57], al
	mov	rax, QWORD PTR bt$3[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mov	BYTE PTR bhi$11[rbp-64], al
	mov	QWORD PTR bt$3[rbp-64], rax
	movzx	eax, BYTE PTR bt$3[rbp-63]
	mov	BYTE PTR bhi$11[rbp-63], al
	movzx	eax, BYTE PTR bt$3[rbp-62]
	mov	BYTE PTR bhi$11[rbp-62], al
	movzx	eax, BYTE PTR bt$3[rbp-61]
	mov	BYTE PTR bhi$11[rbp-61], al
	movzx	eax, BYTE PTR bt$3[rbp-60]
	mov	BYTE PTR bhi$11[rbp-60], al
	movzx	eax, BYTE PTR bt$3[rbp-59]
	mov	BYTE PTR bhi$11[rbp-59], al
	movzx	eax, BYTE PTR bt$3[rbp-58]
	mov	BYTE PTR bhi$11[rbp-58], al
	movzx	eax, BYTE PTR bt$3[rbp-57]
	mov	BYTE PTR bhi$11[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$11[rbp-64]
	subsd	xmm3, xmm2
	movaps	xmm0, xmm3
	movaps	xmm8, xmm2
	mulsd	xmm8, xmm1
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm5
	mulsd	xmm1, xmm2
	mulsd	xmm3, xmm5
	subsd	xmm8, xmm9
	addsd	xmm8, xmm0
	addsd	xmm8, xmm1
	addsd	xmm8, xmm3
; Line 1678
	test	edx, edx
	je	$LN84@stbsp__rai
; Line 1680
	movsxd	rcx, edx
	movaps	xmm6, xmm8
	addsd	xmm6, xmm9
	movsd	xmm5, QWORD PTR stbsp__bot[r9+rcx*8]
	movaps	xmm4, xmm5
	movsd	QWORD PTR ph$[rbp-64], xmm6
	movaps	xmm0, xmm6
	movzx	eax, BYTE PTR ph$[rbp-64]
	subsd	xmm0, xmm9
	mov	BYTE PTR bt$2[rbp-64], al
	movaps	xmm9, xmm5
	movzx	eax, BYTE PTR ph$[rbp-63]
	mov	BYTE PTR bt$2[rbp-63], al
	movzx	eax, BYTE PTR ph$[rbp-62]
	mov	BYTE PTR bt$2[rbp-62], al
	subsd	xmm8, xmm0
	movzx	eax, BYTE PTR ph$[rbp-61]
	mov	BYTE PTR bt$2[rbp-61], al
	movzx	eax, BYTE PTR ph$[rbp-60]
	mov	BYTE PTR bt$2[rbp-60], al
	movzx	eax, BYTE PTR ph$[rbp-59]
	mov	BYTE PTR bt$2[rbp-59], al
	movzx	eax, BYTE PTR ph$[rbp-58]
	mov	BYTE PTR bt$2[rbp-58], al
	movzx	eax, BYTE PTR ph$[rbp-57]
	mov	BYTE PTR bt$2[rbp-57], al
	mov	rax, QWORD PTR bt$2[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm6
	mov	QWORD PTR bt$2[rbp-64], rax
	mov	BYTE PTR ahi$10[rbp-64], al
	movzx	eax, BYTE PTR bt$2[rbp-63]
	mov	BYTE PTR ahi$10[rbp-63], al
	movzx	eax, BYTE PTR bt$2[rbp-62]
	mov	BYTE PTR ahi$10[rbp-62], al
	movzx	eax, BYTE PTR bt$2[rbp-61]
	mov	BYTE PTR ahi$10[rbp-61], al
	movzx	eax, BYTE PTR bt$2[rbp-60]
	mov	BYTE PTR ahi$10[rbp-60], al
	movzx	eax, BYTE PTR bt$2[rbp-59]
	mov	BYTE PTR ahi$10[rbp-59], al
	movzx	eax, BYTE PTR bt$2[rbp-58]
	mov	BYTE PTR ahi$10[rbp-58], al
	movzx	eax, BYTE PTR bt$2[rbp-57]
	mov	BYTE PTR ahi$10[rbp-57], al
	movsd	xmm1, QWORD PTR ahi$10[rbp-64]
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8]
	subsd	xmm6, xmm1
	mov	BYTE PTR bt$2[rbp-64], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+1]
	mov	BYTE PTR bt$2[rbp-63], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+2]
	mov	BYTE PTR bt$2[rbp-62], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+3]
	mov	BYTE PTR bt$2[rbp-61], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+4]
	mov	BYTE PTR bt$2[rbp-60], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+5]
	mov	BYTE PTR bt$2[rbp-59], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+6]
	mov	BYTE PTR bt$2[rbp-58], al
	movzx	eax, BYTE PTR stbsp__bot[r9+rcx*8+7]
	mov	BYTE PTR bt$2[rbp-57], al
	mov	rax, QWORD PTR bt$2[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$2[rbp-64], rax
	mov	BYTE PTR bhi$9[rbp-64], al
	movzx	eax, BYTE PTR bt$2[rbp-63]
	mov	BYTE PTR bhi$9[rbp-63], al
	movzx	eax, BYTE PTR bt$2[rbp-62]
	mov	BYTE PTR bhi$9[rbp-62], al
	movzx	eax, BYTE PTR bt$2[rbp-61]
	mov	BYTE PTR bhi$9[rbp-61], al
	movzx	eax, BYTE PTR bt$2[rbp-60]
	mov	BYTE PTR bhi$9[rbp-60], al
	movzx	eax, BYTE PTR bt$2[rbp-59]
	mov	BYTE PTR bhi$9[rbp-59], al
	movzx	eax, BYTE PTR bt$2[rbp-58]
	mov	BYTE PTR bhi$9[rbp-58], al
	movzx	eax, BYTE PTR bt$2[rbp-57]
	mov	BYTE PTR bhi$9[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$9[rbp-64]
	subsd	xmm4, xmm2
; Line 1681
	mulsd	xmm5, xmm8
	movaps	xmm3, xmm2
	mulsd	xmm3, xmm1
	movaps	xmm0, xmm4
	mulsd	xmm4, xmm6
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm6
	subsd	xmm3, xmm9
	mulsd	xmm1, xmm2
	addsd	xmm3, xmm0
	addsd	xmm3, xmm1
	addsd	xmm3, xmm4
	movaps	xmm8, xmm3
	addsd	xmm8, xmm5
$LN84@stbsp__rai:
; Line 1686
	test	r8d, r8d
	je	$LN352@stbsp__rai
; Line 1689
	movsxd	rcx, r8d
	movaps	xmm7, xmm8
	addsd	xmm7, xmm9
	movsd	xmm6, QWORD PTR stbsp__top[r9+rcx*8-8]
	movsd	QWORD PTR ph$[rbp-64], xmm7
	movaps	xmm0, xmm7
	movzx	eax, BYTE PTR ph$[rbp-64]
	subsd	xmm0, xmm9
	mov	BYTE PTR bt$1[rbp-64], al
	movaps	xmm9, xmm7
	movzx	eax, BYTE PTR ph$[rbp-63]
	movaps	xmm5, xmm7
; Line 1690
	mulsd	xmm7, QWORD PTR stbsp__toperr[r9+rcx*8-8]
	mov	BYTE PTR bt$1[rbp-63], al
	movzx	eax, BYTE PTR ph$[rbp-62]
	subsd	xmm8, xmm0
	mov	BYTE PTR bt$1[rbp-62], al
	movzx	eax, BYTE PTR ph$[rbp-61]
	mov	BYTE PTR bt$1[rbp-61], al
	movzx	eax, BYTE PTR ph$[rbp-60]
	mov	BYTE PTR bt$1[rbp-60], al
	movzx	eax, BYTE PTR ph$[rbp-59]
	mov	BYTE PTR bt$1[rbp-59], al
	movzx	eax, BYTE PTR ph$[rbp-58]
	mov	BYTE PTR bt$1[rbp-58], al
	movzx	eax, BYTE PTR ph$[rbp-57]
	mov	BYTE PTR bt$1[rbp-57], al
	mov	rax, QWORD PTR bt$1[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
	mulsd	xmm9, xmm6
	mov	QWORD PTR bt$1[rbp-64], rax
	mov	BYTE PTR ahi$8[rbp-64], al
	movzx	eax, BYTE PTR bt$1[rbp-63]
	mov	BYTE PTR ahi$8[rbp-63], al
	movzx	eax, BYTE PTR bt$1[rbp-62]
	mov	BYTE PTR ahi$8[rbp-62], al
	movzx	eax, BYTE PTR bt$1[rbp-61]
	mov	BYTE PTR ahi$8[rbp-61], al
	movzx	eax, BYTE PTR bt$1[rbp-60]
	mov	BYTE PTR ahi$8[rbp-60], al
	movzx	eax, BYTE PTR bt$1[rbp-59]
	mov	BYTE PTR ahi$8[rbp-59], al
	movzx	eax, BYTE PTR bt$1[rbp-58]
	mov	BYTE PTR ahi$8[rbp-58], al
	movzx	eax, BYTE PTR bt$1[rbp-57]
	mov	BYTE PTR ahi$8[rbp-57], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-8]
	mov	BYTE PTR bt$1[rbp-64], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-7]
	mov	BYTE PTR bt$1[rbp-63], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-6]
	mov	BYTE PTR bt$1[rbp-62], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-5]
	mov	BYTE PTR bt$1[rbp-61], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-4]
	mov	BYTE PTR bt$1[rbp-60], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-3]
	mov	BYTE PTR bt$1[rbp-59], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-2]
	mov	BYTE PTR bt$1[rbp-58], al
	movzx	eax, BYTE PTR stbsp__top[r9+rcx*8-1]
$LN354@stbsp__rai:
; Line 1689
	movsd	xmm1, QWORD PTR ahi$8[rbp-64]
	movaps	xmm3, xmm6
	mov	BYTE PTR bt$1[rbp-57], al
	subsd	xmm5, xmm1
	mov	rax, QWORD PTR bt$1[rbp-64]
	and	rax, -134217728				; fffffffff8000000H
; Line 1690
	mulsd	xmm6, xmm8
	mov	BYTE PTR bhi$7[rbp-64], al
	mov	QWORD PTR bt$1[rbp-64], rax
	movzx	eax, BYTE PTR bt$1[rbp-63]
	mov	BYTE PTR bhi$7[rbp-63], al
	movzx	eax, BYTE PTR bt$1[rbp-62]
	addsd	xmm7, xmm6
	mov	BYTE PTR bhi$7[rbp-62], al
	movzx	eax, BYTE PTR bt$1[rbp-61]
	mov	BYTE PTR bhi$7[rbp-61], al
	movzx	eax, BYTE PTR bt$1[rbp-60]
	mov	BYTE PTR bhi$7[rbp-60], al
	movzx	eax, BYTE PTR bt$1[rbp-59]
	mov	BYTE PTR bhi$7[rbp-59], al
	movzx	eax, BYTE PTR bt$1[rbp-58]
	mov	BYTE PTR bhi$7[rbp-58], al
	movzx	eax, BYTE PTR bt$1[rbp-57]
	mov	BYTE PTR bhi$7[rbp-57], al
	movsd	xmm2, QWORD PTR bhi$7[rbp-64]
	subsd	xmm3, xmm2
	movaps	xmm4, xmm2
	mulsd	xmm4, xmm1
	movaps	xmm0, xmm3
	mulsd	xmm3, xmm5
	subsd	xmm4, xmm9
	mulsd	xmm0, xmm1
	movaps	xmm1, xmm5
	mulsd	xmm1, xmm2
	addsd	xmm4, xmm0
	addsd	xmm4, xmm1
	addsd	xmm4, xmm3
	movaps	xmm8, xmm4
	addsd	xmm8, xmm7
$LN352@stbsp__rai:
	movaps	xmm6, XMMWORD PTR [rsp+48]
	movaps	xmm7, XMMWORD PTR [rsp+32]
$LN85@stbsp__rai:
; Line 1696
	movaps	xmm0, xmm8
	addsd	xmm0, xmm9
; Line 1697
	movsd	QWORD PTR [r11], xmm0
	subsd	xmm0, xmm9
; Line 1699
	movaps	xmm9, XMMWORD PTR [rsp]
	subsd	xmm8, xmm0
	movsd	QWORD PTR [r10], xmm8
	movaps	xmm8, XMMWORD PTR [rsp+16]
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
stbsp__raise_to_power10 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__count_clamp_callback
_TEXT	SEGMENT
buf$ = 8
user$ = 16
len$ = 24
stbsp__count_clamp_callback PROC			; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1426
	add	DWORD PTR [rdx+12], r8d
; Line 1427
	lea	rax, QWORD PTR [rdx+16]
; Line 1428
	ret	0
stbsp__count_clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__clamp_callback
_TEXT	SEGMENT
buf$ = 8
user$ = 16
len$ = 24
stbsp__clamp_callback PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1396
	add	DWORD PTR [rdx+12], r8d
	mov	r10d, r8d
; Line 1398
	mov	eax, DWORD PTR [rdx+8]
	mov	r9, rdx
	cmp	r8d, eax
	cmovg	r10d, eax
; Line 1401
	test	r10d, r10d
	je	SHORT $LN17@stbsp__cla
; Line 1402
	mov	rdx, QWORD PTR [rdx]
	movsxd	r11, r10d
	cmp	rcx, rdx
	je	SHORT $LN3@stbsp__cla
; Line 1407
	lea	r8, QWORD PTR [r11+rcx]
	npad	8
$LL4@stbsp__cla:
; Line 1409
	movzx	eax, BYTE PTR [rcx]
	inc	rcx
	mov	BYTE PTR [rdx], al
	lea	rdx, QWORD PTR [rdx+1]
; Line 1410
	cmp	rcx, r8
	jb	SHORT $LL4@stbsp__cla
$LN3@stbsp__cla:
; Line 1412
	add	QWORD PTR [r9], r11
; Line 1413
	sub	DWORD PTR [r9+8], r10d
	mov	eax, DWORD PTR [r9+8]
$LN17@stbsp__cla:
; Line 1416
	test	eax, eax
	jle	SHORT $LN10@stbsp__cla
; Line 1418
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN10@stbsp__cla
	mov	rax, QWORD PTR [r9]
; Line 1419
	ret	0
$LN10@stbsp__cla:
	lea	rax, QWORD PTR [r9+16]
	ret	0
stbsp__clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__strlen_limited
_TEXT	SEGMENT
s$ = 8
limit$ = 16
stbsp__strlen_limited PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 310
	mov	r8d, edx
	mov	r9, rcx
; Line 311
	mov	rax, rcx
; Line 315
	test	cl, 3
	je	SHORT $LN17@stbsp__str
	npad	2
$LL2@stbsp__str:
; Line 318
	test	r8d, r8d
	je	SHORT $LN8@stbsp__str
	cmp	BYTE PTR [rax], 0
	je	SHORT $LN8@stbsp__str
; Line 321
	inc	rax
; Line 322
	dec	r8d
	test	al, 3
	jne	SHORT $LL2@stbsp__str
$LN17@stbsp__str:
; Line 330
	cmp	r8d, 4
	jb	SHORT $LN19@stbsp__str
	npad	6
$LL5@stbsp__str:
; Line 331
	mov	ecx, DWORD PTR [rax]
; Line 333
	lea	edx, DWORD PTR [rcx-16843009]
	not	ecx
	and	edx, ecx
	test	edx, -2139062144			; 80808080H
	jne	SHORT $LL7@stbsp__str
; Line 336
	add	rax, 4
; Line 337
	add	r8d, -4					; fffffffcH
	cmp	r8d, 4
	jae	SHORT $LL5@stbsp__str
$LN19@stbsp__str:
; Line 341
	test	r8d, r8d
	je	SHORT $LN8@stbsp__str
$LL7@stbsp__str:
	cmp	BYTE PTR [rax], 0
	je	SHORT $LN8@stbsp__str
; Line 342
	inc	rax
; Line 343
	add	r8d, -1					; ffffffffH
	jne	SHORT $LL7@stbsp__str
$LN8@stbsp__str:
; Line 347
	sub	eax, r9d
	ret	0
stbsp__strlen_limited ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__lead_sign
_TEXT	SEGMENT
fl$ = 8
sign$ = 16
stbsp__lead_sign PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 296
	mov	BYTE PTR [rdx], 0
; Line 297
	test	cl, cl
	jns	SHORT $LN2@stbsp__lea
; Line 298
	mov	WORD PTR [rdx], 11521			; 00002d01H
; Line 307
	ret	0
$LN2@stbsp__lea:
; Line 300
	test	cl, 4
	je	SHORT $LN4@stbsp__lea
; Line 301
	mov	WORD PTR [rdx], 8193			; 00002001H
; Line 307
	ret	0
$LN4@stbsp__lea:
; Line 303
	test	cl, 2
	je	SHORT $LN6@stbsp__lea
; Line 304
	mov	WORD PTR [rdx], 11009			; 00002b01H
$LN6@stbsp__lea:
; Line 307
	ret	0
stbsp__lead_sign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__real_to_parts
_TEXT	SEGMENT
d$ = 8
bits$ = 8
b$ = 16
expo$ = 16
value$ = 24
stbsp__real_to_parts PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1497
	movsd	QWORD PTR d$[rsp], xmm2
	mov	r8, rcx
; Line 1499
	movzx	eax, BYTE PTR d$[rsp]
; Line 1501
	mov	r9, 4503599627370495			; 000fffffffffffffH
	mov	BYTE PTR b$[rsp], al
	movzx	eax, BYTE PTR d$[rsp+1]
	mov	BYTE PTR b$[rsp+1], al
	movzx	eax, BYTE PTR d$[rsp+2]
	mov	BYTE PTR b$[rsp+2], al
	movzx	eax, BYTE PTR d$[rsp+3]
	mov	BYTE PTR b$[rsp+3], al
	movzx	eax, BYTE PTR d$[rsp+4]
	mov	BYTE PTR b$[rsp+4], al
	movzx	eax, BYTE PTR d$[rsp+5]
	mov	BYTE PTR b$[rsp+5], al
	movzx	eax, BYTE PTR d$[rsp+6]
	mov	BYTE PTR b$[rsp+6], al
	movzx	eax, BYTE PTR d$[rsp+7]
	mov	BYTE PTR b$[rsp+7], al
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, rax
	and	rcx, r9
	mov	QWORD PTR [r8], rcx
; Line 1502
	mov	rcx, rax
	sar	rcx, 52					; 00000034H
	and	ecx, 2047				; 000007ffH
; Line 1504
	shr	rax, 63					; 0000003fH
	sub	ecx, 1023				; 000003ffH
	mov	DWORD PTR [rdx], ecx
; Line 1505
	ret	0
stbsp__real_to_parts ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp__real_to_str
_TEXT	SEGMENT
pl$1 = 32
d$ = 32
start$ = 80
len$ = 88
out$ = 96
decimal_pos$ = 104
ph$2 = 112
bits$ = 112
value$ = 112
frac_digits$ = 120
stbsp__real_to_str PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1706
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rsi
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
; Line 1711
	movsd	xmm2, QWORD PTR value$[rsp]
	mov	rbp, rcx
	movsd	QWORD PTR d$[rsp], xmm2
	mov	r15, rdx
; Line 1712
	movzx	eax, BYTE PTR d$[rsp]
	mov	r14, r9
	mov	BYTE PTR bits$[rsp], al
	mov	rbx, r8
	movzx	eax, BYTE PTR d$[rsp+1]
	mov	BYTE PTR bits$[rsp+1], al
	movzx	eax, BYTE PTR d$[rsp+2]
	mov	BYTE PTR bits$[rsp+2], al
	movzx	eax, BYTE PTR d$[rsp+3]
	mov	BYTE PTR bits$[rsp+3], al
	movzx	eax, BYTE PTR d$[rsp+4]
	mov	BYTE PTR bits$[rsp+4], al
	movzx	eax, BYTE PTR d$[rsp+5]
	mov	BYTE PTR bits$[rsp+5], al
	movzx	eax, BYTE PTR d$[rsp+6]
	mov	BYTE PTR bits$[rsp+6], al
	movzx	eax, BYTE PTR d$[rsp+7]
	mov	BYTE PTR bits$[rsp+7], al
; Line 1713
	mov	rdx, QWORD PTR bits$[rsp]
	mov	rcx, rdx
; Line 1714
	mov	rsi, rdx
	sar	rcx, 52					; 00000034H
	and	ecx, 2047				; 000007ffH
	shr	rsi, 63					; 0000003fH
; Line 1715
	test	esi, esi
	je	SHORT $LN21@stbsp__rea
; Line 1716
	xorps	xmm2, QWORD PTR __xmm@80000000000000008000000000000000
$LN21@stbsp__rea:
; Line 1718
	cmp	ecx, 2047				; 000007ffH
	jne	SHORT $LN22@stbsp__rea
; Line 1720
	mov	rax, 4503599627370495			; 000fffffffffffffH
	lea	rcx, OFFSET FLAT:??_C@_03EJEJBNFP@Inf@
	test	rdx, rax
	lea	rax, OFFSET FLAT:??_C@_03ICJPMMHB@NaN@
	cmovne	rcx, rax
	mov	QWORD PTR [rbp], rcx
; Line 1721
	mov	DWORD PTR [r9], 28672			; 00007000H
; Line 1722
	mov	DWORD PTR [r15], 3
; Line 1723
	jmp	$LN90@stbsp__rea
$LN22@stbsp__rea:
; Line 1726
	test	ecx, ecx
	jne	SHORT $LN6@stbsp__rea
; Line 1728
	mov	rax, 9223372036854775807		; 7fffffffffffffffH
	test	rdx, rax
	jne	SHORT $LN24@stbsp__rea
; Line 1730
	mov	edx, 1
	mov	DWORD PTR [r9], edx
; Line 1731
	mov	QWORD PTR [rbp], rbx
; Line 1732
	mov	BYTE PTR [r8], 48			; 00000030H
; Line 1733
	mov	DWORD PTR [r15], edx
; Line 1734
	jmp	$LN90@stbsp__rea
$LN24@stbsp__rea:
; Line 1738
	mov	rax, 2251799813685248			; 0008000000000000H
; Line 1739
	test	rdx, rax
	jne	SHORT $LN6@stbsp__rea
	npad	1
$LL5@stbsp__rea:
; Line 1740
	dec	ecx
; Line 1741
	sar	rax, 1
	test	rax, rdx
	je	SHORT $LL5@stbsp__rea
$LN6@stbsp__rea:
; Line 1751
	lea	eax, DWORD PTR [rcx-1023]
	mov	QWORD PTR [rsp+80], rdi
	mov	QWORD PTR [rsp+88], r12
; Line 1752
	test	eax, eax
	jns	SHORT $LN43@stbsp__rea
	imul	eax, eax, 617				; 00000269H
	cdq
	and	edx, 2047				; 000007ffH
	lea	edi, DWORD PTR [rdx+rax]
	sar	edi, 11
	jmp	SHORT $LN44@stbsp__rea
$LN43@stbsp__rea:
	imul	eax, eax, 1233				; 000004d1H
	cdq
	and	edx, 4095				; 00000fffH
	lea	edi, DWORD PTR [rdx+rax]
	sar	edi, 12
	inc	edi
$LN44@stbsp__rea:
; Line 1755
	mov	r9d, 18
	lea	rdx, QWORD PTR pl$1[rsp]
	sub	r9d, edi
	lea	rcx, QWORD PTR ph$2[rsp]
	call	stbsp__raise_to_power10
; Line 1758
	movsd	xmm4, QWORD PTR ph$2[rsp]
; Line 1766
	lea	r11d, DWORD PTR [rdi+1]
	cvttsd2si rcx, xmm4
	mov	rax, 1000000000000000000		; 0de0b6b3a7640000H
	movaps	xmm3, xmm4
	xorps	xmm2, xmm2
	cvtsi2sd xmm2, rcx
	subsd	xmm3, xmm2
	movaps	xmm1, xmm3
	movaps	xmm0, xmm3
	subsd	xmm1, xmm4
	subsd	xmm0, xmm1
	addsd	xmm1, xmm2
	subsd	xmm4, xmm0
	subsd	xmm4, xmm1
	addsd	xmm4, xmm3
	addsd	xmm4, QWORD PTR pl$1[rsp]
	cvttsd2si r9, xmm4
	add	r9, rcx
	mov	ecx, DWORD PTR frac_digits$[rsp]
	cmp	r9, rax
	mov	QWORD PTR bits$[rsp], r9
	cmovb	r11d, edi
	test	ecx, ecx
	jns	SHORT $LN45@stbsp__rea
	and	ecx, 134217727				; 07ffffffH
	inc	ecx
	jmp	SHORT $LN46@stbsp__rea
$LN45@stbsp__rea:
	add	ecx, r11d
$LN46@stbsp__rea:
; Line 1767
	lea	r12, OFFSET FLAT:__ImageBase
	mov	edi, r11d
	cmp	ecx, 24
	jae	SHORT $noround$92
; Line 1771
	cmp	r9, 1000000000				; 3b9aca00H
	mov	eax, 10
	mov	edx, 1
	cmovb	eax, edx
	mov	r10d, eax
	cmp	r9, QWORD PTR stbsp__powten[r12+rax*8]
	jb	SHORT $LN8@stbsp__rea
$LL7@stbsp__rea:
; Line 1772
	inc	r10d
; Line 1773
	cmp	r10d, 20
	je	SHORT $noround$92
; Line 1771
	cmp	r9, QWORD PTR stbsp__powten[r12+r10*8]
	jae	SHORT $LL7@stbsp__rea
$LN8@stbsp__rea:
; Line 1776
	cmp	ecx, r10d
	jae	SHORT $noround$92
; Line 1779
	mov	eax, r10d
	sub	eax, ecx
; Line 1780
	cmp	eax, 24
	jae	SHORT $noround$92
; Line 1782
	cdqe
; Line 1786
	lea	edi, DWORD PTR [r11+1]
	xor	edx, edx
	mov	rcx, QWORD PTR stbsp__powten[r12+rax*8]
	mov	r8, rcx
	shr	r8, 1
	add	r8, r9
	mov	rax, r8
	div	rcx
	cmp	r8, QWORD PTR stbsp__powten[r12+r10*8]
	mov	r9, rax
	mov	QWORD PTR bits$[rsp], rax
	cmovb	edi, r11d
$noround$92:
; Line 1792
	test	r9, r9
	je	$donez$93
; Line 1795
	mov	eax, -1
	cmp	r9, rax
	jle	SHORT $LN57@stbsp__rea
	mov	r11, 2361183241434822607		; 20c49ba5e353f7cfH
	mov	r10, 4294967296000			; 000003e800000000H
	npad	15
$LL9@stbsp__rea:
; Line 1797
	mov	rax, r11
	mov	r8, r9
	imul	r9
	sar	rdx, 7
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	imul	rcx, rdx, 1000				; 000003e8H
	cmp	r9, rcx
	jne	SHORT $donez$93
; Line 1799
	mov	QWORD PTR bits$[rsp], rdx
	mov	r9, rdx
	cmp	r8, r10
	jge	SHORT $LL9@stbsp__rea
$LN57@stbsp__rea:
; Line 1801
	mov	r8d, DWORD PTR bits$[rsp]
	mov	eax, 274877907				; 10624dd3H
	mul	r8d
	shr	edx, 6
; Line 1802
	imul	ecx, edx, 1000				; 000003e8H
	cmp	r8d, ecx
	jne	SHORT $LN13@stbsp__rea
	npad	5
$LL12@stbsp__rea:
; Line 1803
	mov	r8d, edx
	mov	eax, 274877907				; 10624dd3H
	mul	edx
	shr	edx, 6
	imul	ecx, edx, 1000				; 000003e8H
	cmp	r8d, ecx
	je	SHORT $LL12@stbsp__rea
$LN13@stbsp__rea:
; Line 1804
	mov	r9d, r8d
	mov	QWORD PTR bits$[rsp], r9
$donez$93:
; Line 1809
	add	rbx, 64					; 00000040H
; Line 1810
	mov	r11, 6189700196426901375		; 55e63b88c230e77fH
	xor	r8d, r8d
$LL14@stbsp__rea:
; Line 1813
	lea	r10, QWORD PTR [rbx-8]
; Line 1815
	cmp	r9, 100000000				; 05f5e100H
	jl	SHORT $LN38@stbsp__rea
; Line 1816
	mov	rax, r11
	imul	r9
	sar	rdx, 25
	mov	rax, rdx
	shr	rax, 63					; 0000003fH
	add	rdx, rax
	imul	eax, edx, 100000000			; 05f5e100H
; Line 1817
	mov	QWORD PTR bits$[rsp], rdx
	sub	r9d, eax
	mov	ecx, r9d
	mov	r9, rdx
; Line 1818
	jmp	SHORT $LN54@stbsp__rea
$LN38@stbsp__rea:
; Line 1819
	mov	ecx, DWORD PTR bits$[rsp]
; Line 1820
	xor	r9d, r9d
	mov	QWORD PTR bits$[rsp], r9
$LN54@stbsp__rea:
; Line 1822
	test	ecx, ecx
	je	SHORT $LN18@stbsp__rea
	npad	8
$LL17@stbsp__rea:
; Line 1823
	sub	rbx, 2
; Line 1824
	mov	eax, 1374389535				; 51eb851fH
	mul	ecx
; Line 1826
	add	r8d, 2
	shr	edx, 5
	imul	eax, edx, 100				; 00000064H
	sub	ecx, eax
	add	ecx, ecx
	movzx	eax, WORD PTR stbsp__digitpair[rcx+r12+2]
	mov	ecx, edx
	mov	WORD PTR [rbx], ax
	test	edx, edx
	jne	SHORT $LL17@stbsp__rea
$LN18@stbsp__rea:
; Line 1828
	test	r9, r9
	je	SHORT $LN59@stbsp__rea
; Line 1835
	cmp	rbx, r10
	je	$LL14@stbsp__rea
	mov	eax, ebx
	sub	eax, r10d
	add	r8d, eax
$LL73@stbsp__rea:
; Line 1836
	dec	rbx
	mov	BYTE PTR [rbx], 48			; 00000030H
	cmp	rbx, r10
	jne	SHORT $LL73@stbsp__rea
; Line 1839
	jmp	$LL14@stbsp__rea
$LN59@stbsp__rea:
	mov	r12, QWORD PTR [rsp+88]
; Line 1829
	test	r8d, r8d
	je	SHORT $LN41@stbsp__rea
	cmp	BYTE PTR [rbx], 48			; 00000030H
	jne	SHORT $LN41@stbsp__rea
; Line 1830
	inc	rbx
; Line 1831
	dec	r8d
$LN41@stbsp__rea:
; Line 1841
	mov	DWORD PTR [r14], edi
; Line 1844
	mov	rdi, QWORD PTR [rsp+80]
	mov	QWORD PTR [rbp], rbx
	mov	DWORD PTR [r15], r8d
$LN90@stbsp__rea:
; Line 1845
	mov	rbx, QWORD PTR [rsp+96]
	mov	eax, esi
	mov	rbp, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
stbsp__real_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_set_separators
_TEXT	SEGMENT
pcomma$ = 8
pperiod$ = 16
stbsp_set_separators PROC				; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 276
	mov	BYTE PTR stbsp__period, dl
; Line 277
	mov	BYTE PTR stbsp__comma, cl
; Line 278
	ret	0
stbsp_set_separators ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_vsprintfcb
_TEXT	SEGMENT
stbsp__comma$1$ = 48
fl$1$ = 52
pr$3$ = 56
tlen$1$ = 60
lead$2$ = 64
l$1 = 68
dp$2 = 72
buf$GSCopy$1$ = 80
va$GSCopy$1$ = 88
sn$1$ = 96
fw$2$ = 104
f$1$ = 112
cs$2$ = 120
c$1$ = 120
sn$3 = 120
tz$1$ = 128
user$GSCopy$1$ = 136
callback$GSCopy$1$ = 144
d$4 = 152
b$5 = 160
lead$6 = 168
tail$7 = 176
num$8 = 192
__$ArrayPad$ = 704
callback$ = 848
user$ = 856
buf$ = 864
fmt$ = 872
va$ = 880
stbsp_vsprintfcb PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 350
$LN1222:
	mov	rax, rsp
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rax-584]
	sub	rsp, 776				; 00000308H
	movaps	XMMWORD PTR [rax-88], xmm6
	movaps	XMMWORD PTR [rax-104], xmm7
	movaps	XMMWORD PTR [rax-120], xmm8
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rbp-256], rax
	mov	r10, QWORD PTR va$[rbp-256]
; Line 355
	xor	esi, esi
; Line 358
	movsd	xmm6, QWORD PTR __xmm@80000000000000008000000000000000
	mov	r15, r9
	movsd	xmm8, QWORD PTR __real@408f400000000000
	mov	r14d, esi
	movsd	xmm7, QWORD PTR __real@4090000000000000
	mov	r11, r8
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	mov	r9, rdx
	mov	DWORD PTR tlen$1$[rsp], esi
	mov	r12, rcx
	mov	QWORD PTR buf$GSCopy$1$[rsp], r8
	mov	rdi, r8
	mov	QWORD PTR user$GSCopy$1$[rbp-256], rdx
	mov	QWORD PTR callback$GSCopy$1$[rbp-256], rcx
$LL2@stbsp_vspr:
; Line 395
	lea	rbx, QWORD PTR [r10]
$LL8@stbsp_vspr:
; Line 393
	test	r15b, 3
	jne	SHORT $schk1$1223
; Line 409
	mov	edx, DWORD PTR [r15]
; Line 410
	mov	ecx, edx
; Line 411
	mov	eax, edx
	not	ecx
	xor	eax, 623191333				; 25252525H
	and	ecx, -2139062144			; 80808080H
	sub	eax, 16843009				; 01010101H
	test	eax, ecx
	jne	SHORT $schk1$1223
	npad	5
$LL10@stbsp_vspr:
; Line 413
	lea	eax, DWORD PTR [rdx-16843009]
	test	eax, ecx
	jne	$LN539@stbsp_vspr
; Line 415
	test	r12, r12
	je	SHORT $LN137@stbsp_vspr
; Line 416
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	eax, 4
	jl	SHORT $schk1$1223
$LN137@stbsp_vspr:
; Line 430
	add	r15, 4
	mov	DWORD PTR [rdi], edx
	add	rdi, 4
	mov	edx, DWORD PTR [r15]
	mov	ecx, edx
	mov	eax, edx
	not	ecx
	xor	eax, 623191333				; 25252525H
	and	ecx, -2139062144			; 80808080H
	sub	eax, 16843009				; 01010101H
	test	eax, ecx
	je	SHORT $LL10@stbsp_vspr
$schk1$1223:
; Line 395
	movzx	eax, BYTE PTR [r15]
	cmp	al, 37					; 00000025H
	je	SHORT $scandd$1224
$schk2$1225:
; Line 398
	test	al, al
	je	$endfmt$1226
; Line 400
	test	r12, r12
	je	SHORT $LN132@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN132@stbsp_vspr
	add	r14d, r8d
	mov	rdx, r9
	mov	rcx, r11
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
	mov	r9, QWORD PTR user$GSCopy$1$[rbp-256]
$LN132@stbsp_vspr:
; Line 401
	movzx	eax, BYTE PTR [r15]
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 402
	inc	r15
	jmp	$LL8@stbsp_vspr
$LN539@stbsp_vspr:
; Line 414
	movzx	eax, BYTE PTR [r15]
	jmp	SHORT $schk2$1225
$scandd$1224:
; Line 445
	movsx	eax, BYTE PTR [r15+1]
	inc	r15
	sub	eax, 32					; 00000020H
	mov	QWORD PTR f$1$[rsp], r15
	mov	DWORD PTR fw$2$[rsp], esi
	mov	r14d, -1
	mov	DWORD PTR pr$3$[rsp], r14d
	mov	r8d, esi
	mov	DWORD PTR fl$1$[rsp], esi
	mov	r13d, esi
	mov	DWORD PTR tz$1$[rbp-256], esi
	cmp	eax, 63					; 0000003fH
	ja	$flags_done$1228
	lea	rdx, OFFSET FLAT:__ImageBase
	npad	5
$LL13@stbsp_vspr:
	cdqe
	movzx	eax, BYTE PTR $LN1022@stbsp_vspr[rdx+rax]
	mov	ecx, DWORD PTR $LN1023@stbsp_vspr[rdx+rax*4]
	add	rcx, rdx
	jmp	rcx
$LN138@stbsp_vspr:
; Line 448
	or	r13d, 1
; Line 450
	jmp	SHORT $LN1206@stbsp_vspr
$LN139@stbsp_vspr:
; Line 453
	or	r13d, 2
; Line 455
	jmp	SHORT $LN1206@stbsp_vspr
$LN140@stbsp_vspr:
; Line 458
	or	r13d, 4
; Line 460
	jmp	SHORT $LN1206@stbsp_vspr
$LN141@stbsp_vspr:
; Line 463
	or	r13d, 8
; Line 465
	jmp	SHORT $LN1206@stbsp_vspr
$LN142@stbsp_vspr:
; Line 468
	or	r13d, 64				; 00000040H
; Line 470
	jmp	SHORT $LN1206@stbsp_vspr
$LN143@stbsp_vspr:
; Line 473
	bt	r13d, 8
	jae	SHORT $LN144@stbsp_vspr
; Line 474
	mov	ecx, 2048				; 00000800H
; Line 479
	mov	eax, 4096				; 00001000H
	test	r13d, ecx
	cmove	eax, ecx
	or	r13d, eax
	jmp	SHORT $LN1206@stbsp_vspr
$LN144@stbsp_vspr:
; Line 480
	bts	r13d, 8
; Line 483
	jmp	SHORT $LN1206@stbsp_vspr
$LN148@stbsp_vspr:
; Line 486
	bts	r13d, 10
$LN1206@stbsp_vspr:
; Line 445
	movsx	eax, BYTE PTR [r15+1]
	inc	r15
	sub	eax, 32					; 00000020H
	mov	DWORD PTR fl$1$[rsp], r13d
	mov	QWORD PTR f$1$[rsp], r15
	cmp	eax, 63					; 0000003fH
	jbe	SHORT $LL13@stbsp_vspr
; Line 1327
	jmp	SHORT $LN1207@stbsp_vspr
$LN149@stbsp_vspr:
; Line 491
	or	r13d, 16
	mov	DWORD PTR fl$1$[rsp], r13d
; Line 492
	inc	r15
$LN1207@stbsp_vspr:
; Line 500
	mov	QWORD PTR f$1$[rsp], r15
$flags_done$1228:
	movzx	eax, BYTE PTR [r15]
	cmp	al, 42					; 0000002aH
	jne	SHORT $LN484@stbsp_vspr
; Line 501
	mov	r10, QWORD PTR va$GSCopy$1$[rsp]
	mov	r8d, DWORD PTR [rbx]
	add	r10, 8
; Line 502
	movzx	eax, BYTE PTR [r15+1]
	inc	r15
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	mov	DWORD PTR fw$2$[rsp], r8d
	mov	QWORD PTR f$1$[rsp], r15
; Line 503
	jmp	SHORT $LN19@stbsp_vspr
$LN484@stbsp_vspr:
; Line 504
	cmp	al, 48					; 00000030H
	jl	SHORT $LN1166@stbsp_vspr
	npad	6
$LL18@stbsp_vspr:
	movzx	edx, al
	cmp	dl, 57					; 00000039H
	ja	SHORT $LN1141@stbsp_vspr
	movzx	eax, BYTE PTR [r15+1]
; Line 505
	lea	r8d, DWORD PTR [r8+r8*4]
; Line 506
	inc	r15
	lea	r8d, DWORD PTR [r8-24]
	lea	r8d, DWORD PTR [rdx+r8*2]
	cmp	al, 48					; 00000030H
	jge	SHORT $LL18@stbsp_vspr
$LN1141@stbsp_vspr:
	mov	DWORD PTR fw$2$[rsp], r8d
	mov	QWORD PTR f$1$[rsp], r15
$LN1166@stbsp_vspr:
; Line 510
	mov	r10, QWORD PTR va$GSCopy$1$[rsp]
$LN19@stbsp_vspr:
	mov	rcx, r10
	cmp	al, 46					; 0000002eH
	jne	SHORT $LN21@stbsp_vspr
; Line 512
	movzx	eax, BYTE PTR [r15+1]
	inc	r15
	mov	QWORD PTR f$1$[rsp], r15
	cmp	al, 42					; 0000002aH
	jne	SHORT $LN156@stbsp_vspr
; Line 514
	movzx	eax, BYTE PTR [r15+1]
	add	r10, 8
	mov	r14d, DWORD PTR [rcx]
	inc	r15
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
; Line 515
	jmp	SHORT $LN1142@stbsp_vspr
$LN156@stbsp_vspr:
; Line 516
	mov	DWORD PTR pr$3$[rsp], esi
	mov	r14d, esi
; Line 517
	cmp	al, 48					; 00000030H
	jl	SHORT $LN21@stbsp_vspr
$LL20@stbsp_vspr:
	movzx	edx, al
	cmp	dl, 57					; 00000039H
	ja	SHORT $LN1142@stbsp_vspr
	movzx	eax, BYTE PTR [r15+1]
; Line 518
	lea	r14d, DWORD PTR [r14+r14*4]
; Line 519
	inc	r15
	lea	r14d, DWORD PTR [r14-24]
	lea	r14d, DWORD PTR [rdx+r14*2]
	cmp	al, 48					; 00000030H
	jge	SHORT $LL20@stbsp_vspr
$LN1142@stbsp_vspr:
; Line 525
	mov	DWORD PTR pr$3$[rsp], r14d
	mov	QWORD PTR f$1$[rsp], r15
$LN21@stbsp_vspr:
	movsx	eax, al
	lea	r8, OFFSET FLAT:__ImageBase
	add	eax, -73				; ffffffffffffffb7H
	mov	r9, r10
	cmp	eax, 49					; 00000031H
	ja	$LN169@stbsp_vspr
	cdqe
	movzx	eax, BYTE PTR $LN1020@stbsp_vspr[r8+rax]
	mov	ecx, DWORD PTR $LN1021@stbsp_vspr[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN158@stbsp_vspr:
; Line 529
	inc	r15
	bts	r13d, 9
	mov	DWORD PTR fl$1$[rsp], r13d
	mov	QWORD PTR f$1$[rsp], r15
; Line 530
	cmp	BYTE PTR [r15], 104			; 00000068H
	jne	SHORT $LN169@stbsp_vspr
; Line 531
	inc	r15
	mov	QWORD PTR f$1$[rsp], r15
; Line 532
	jmp	SHORT $LN169@stbsp_vspr
$LN160@stbsp_vspr:
; Line 536
	inc	r15
	mov	QWORD PTR f$1$[rsp], r15
; Line 537
	cmp	BYTE PTR [r15], 108			; 0000006cH
	jne	SHORT $LN169@stbsp_vspr
$LN162@stbsp_vspr:
; Line 572
	or	r13d, 32				; 00000020H
	inc	r15
	mov	QWORD PTR f$1$[rsp], r15
	jmp	SHORT $LN1220@stbsp_vspr
$LN165@stbsp_vspr:
; Line 558
	movzx	eax, BYTE PTR [r15+1]
	lea	rcx, QWORD PTR [r15+1]
	cmp	al, 54					; 00000036H
	jne	SHORT $LN935@stbsp_vspr
	cmp	BYTE PTR [r15+2], 52			; 00000034H
	jne	SHORT $LN935@stbsp_vspr
; Line 559
	or	r13d, 32				; 00000020H
; Line 560
	add	r15, 3
	mov	QWORD PTR f$1$[rsp], r15
	jmp	SHORT $LN1220@stbsp_vspr
$LN935@stbsp_vspr:
; Line 561
	cmp	al, 51					; 00000033H
	jne	SHORT $LN168@stbsp_vspr
	cmp	BYTE PTR [r15+2], 50			; 00000032H
	jne	SHORT $LN168@stbsp_vspr
; Line 562
	add	r15, 3
	mov	QWORD PTR f$1$[rsp], r15
; Line 563
	jmp	SHORT $LN169@stbsp_vspr
$LN168@stbsp_vspr:
; Line 564
	or	r13d, 32				; 00000020H
; Line 565
	mov	QWORD PTR f$1$[rsp], rcx
	mov	r15, rcx
$LN1220@stbsp_vspr:
; Line 572
	mov	DWORD PTR fl$1$[rsp], r13d
$LN169@stbsp_vspr:
	movsx	edx, BYTE PTR [r15]
	movzx	r15d, BYTE PTR stbsp__comma
	mov	BYTE PTR stbsp__comma$1$[rsp], r15b
	lea	eax, DWORD PTR [rdx-65]
	cmp	eax, 55					; 00000037H
	ja	$LN362@stbsp_vspr
	cdqe
	movzx	eax, BYTE PTR $LN1018@stbsp_vspr[r8+rax]
	mov	ecx, DWORD PTR $LN1019@stbsp_vspr[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN171@stbsp_vspr:
; Line 589
	mov	rax, QWORD PTR [r9]
; Line 590
	lea	rsi, OFFSET FLAT:??_C@_04MLLLIHIP@null@
	add	r10, 8
; Line 594
	mov	edx, -1					; ffffffffH
	test	rax, rax
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	cmovne	rsi, rax
	test	r14d, r14d
; Line 311
	mov	r13, rsi
; Line 594
	cmovns	edx, r14d
; Line 311
	test	sil, 3
; Line 315
	je	SHORT $LN544@stbsp_vspr
	npad	1
$LL434@stbsp_vspr:
; Line 318
	test	edx, edx
	je	SHORT $LN1143@stbsp_vspr
	cmp	BYTE PTR [r13], 0
	je	SHORT $LN1143@stbsp_vspr
; Line 321
	inc	r13
; Line 322
	dec	edx
	test	r13b, 3
	jne	SHORT $LL434@stbsp_vspr
$LN544@stbsp_vspr:
; Line 330
	cmp	edx, 4
	jb	SHORT $LN546@stbsp_vspr
	npad	5
$LL437@stbsp_vspr:
; Line 331
	mov	eax, DWORD PTR [r13]
; Line 333
	lea	ecx, DWORD PTR [rax-16843009]
	not	eax
	and	ecx, eax
	test	ecx, -2139062144			; 80808080H
	jne	SHORT $LL439@stbsp_vspr
; Line 336
	add	r13, 4
; Line 337
	add	edx, -4					; fffffffcH
	cmp	edx, 4
	jae	SHORT $LL437@stbsp_vspr
$LN546@stbsp_vspr:
; Line 341
	test	edx, edx
	je	SHORT $LN1143@stbsp_vspr
$LL439@stbsp_vspr:
	cmp	BYTE PTR [r13], 0
	je	SHORT $LN1143@stbsp_vspr
; Line 342
	inc	r13
; Line 343
	add	edx, -1					; ffffffffH
	jne	SHORT $LL439@stbsp_vspr
$LN1143@stbsp_vspr:
; Line 594
	sub	r13d, esi
; Line 595
	xor	r12b, r12b
; Line 597
	xor	r10d, r10d
	mov	QWORD PTR sn$1$[rsp], r13
	mov	r14d, r10d
; Line 598
	mov	DWORD PTR dp$2[rsp], r10d
; Line 599
	mov	r15d, r10d
	mov	DWORD PTR l$1[rsp], r13d
	mov	BYTE PTR lead$6[rbp-256], r12b
	mov	BYTE PTR tail$7[rbp-256], r12b
; Line 1146
	jmp	$scopy$1229
$LN174@stbsp_vspr:
; Line 606
	movzx	eax, BYTE PTR [r9]
	add	r10, 8
; Line 608
	xor	r12b, r12b
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
; Line 611
	xor	r10d, r10d
	mov	BYTE PTR num$8[rbp+255], al
	mov	BYTE PTR tail$7[rbp-256], r12b
; Line 1146
	jmp	$LN1208@stbsp_vspr
$LN176@stbsp_vspr:
; Line 617
	mov	rax, QWORD PTR [r9]
	add	r10, 8
; Line 618
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	ecx, edi
; Line 1344
	mov	r15, QWORD PTR f$1$[rsp]
	sub	ecx, r11d
	mov	r9, QWORD PTR user$GSCopy$1$[rbp-256]
	add	ecx, r14d
	mov	DWORD PTR [rax], ecx
	inc	r15
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	jmp	$LL2@stbsp_vspr
$LN177@stbsp_vspr:
; Line 642
	movsd	xmm0, QWORD PTR [r9]
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
; Line 1497
	movsd	QWORD PTR d$4[rbp-256], xmm0
; Line 641
	lea	r8, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	cmp	dl, 65					; 00000041H
; Line 1501
	mov	rcx, 4503599627370495			; 000fffffffffffffH
; Line 641
	cmove	r8, rax
; Line 1499
	movzx	eax, BYTE PTR d$4[rbp-256]
	mov	BYTE PTR b$5[rbp-256], al
; Line 642
	add	r10, 8
; Line 1499
	movzx	eax, BYTE PTR d$4[rbp-255]
; Line 643
	cmp	r14d, -1
; Line 1499
	mov	BYTE PTR b$5[rbp-255], al
	movzx	eax, BYTE PTR d$4[rbp-254]
	mov	BYTE PTR b$5[rbp-254], al
	movzx	eax, BYTE PTR d$4[rbp-253]
	mov	BYTE PTR b$5[rbp-253], al
	movzx	eax, BYTE PTR d$4[rbp-252]
	mov	BYTE PTR b$5[rbp-252], al
	movzx	eax, BYTE PTR d$4[rbp-251]
	mov	BYTE PTR b$5[rbp-251], al
	movzx	eax, BYTE PTR d$4[rbp-250]
	mov	BYTE PTR b$5[rbp-250], al
	movzx	eax, BYTE PTR d$4[rbp-249]
	mov	BYTE PTR b$5[rbp-249], al
; Line 1501
	mov	rax, QWORD PTR b$5[rbp-256]
; Line 1502
	mov	r11, rax
; Line 642
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
; Line 1501
	mov	rdx, rax
; Line 643
	mov	r10d, 6
	cmove	r14d, r10d
; Line 1502
	sar	r11, 52					; 00000034H
	and	r11d, 2047				; 000007ffH
; Line 1504
	shr	rax, 63					; 0000003fH
	sub	r11d, 1023				; 000003ffH
	and	rdx, rcx
; Line 646
	test	al, al
	je	SHORT $LN180@stbsp_vspr
; Line 647
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN180@stbsp_vspr:
; Line 296
	xor	r9b, r9b
	mov	BYTE PTR lead$6[rbp-256], r9b
; Line 297
	test	r13b, r13b
	jns	SHORT $LN452@stbsp_vspr
; Line 298
	mov	WORD PTR lead$6[rbp-256], 11521		; 00002d01H
; Line 299
	jmp	SHORT $LN1209@stbsp_vspr
$LN452@stbsp_vspr:
; Line 300
	test	r13b, 4
	je	SHORT $LN454@stbsp_vspr
; Line 301
	mov	WORD PTR lead$6[rbp-256], 8193		; 00002001H
; Line 302
	jmp	SHORT $LN1209@stbsp_vspr
$LN454@stbsp_vspr:
; Line 303
	test	r13b, 2
	je	SHORT $LN456@stbsp_vspr
; Line 304
	mov	WORD PTR lead$6[rbp-256], 11009		; 00002b01H
$LN1209@stbsp_vspr:
; Line 653
	mov	r9b, 1
$LN456@stbsp_vspr:
	cmp	r11d, -1023				; fffffffffffffc01H
	jne	SHORT $LN181@stbsp_vspr
; Line 654
	mov	rax, rdx
	neg	rax
	sbb	ecx, ecx
	and	ecx, -1022				; fffffffffffffc02H
	mov	r11d, ecx
	jmp	SHORT $LN182@stbsp_vspr
$LN181@stbsp_vspr:
; Line 656
	mov	rax, 4503599627370496			; 0010000000000000H
	or	rdx, rax
$LN182@stbsp_vspr:
; Line 657
	shl	rdx, 8
; Line 658
	cmp	r14d, 15
	jge	SHORT $LN183@stbsp_vspr
; Line 659
	lea	ecx, DWORD PTR [r14*4]
	mov	rax, 576460752303423488			; 0800000000000000H
	shr	rax, cl
	add	rdx, rax
$LN183@stbsp_vspr:
; Line 666
	movsx	rax, r9b
; Line 670
	lea	r9, QWORD PTR num$8[rbp-191]
	mov	BYTE PTR lead$6[rbp+rax-255], 48	; 00000030H
	movsx	rax, BYTE PTR lead$6[rbp-256]
	mov	BYTE PTR lead$6[rbp+rax-254], 120	; 00000078H
	mov	rax, rdx
	movzx	r12d, BYTE PTR lead$6[rbp-256]
	shr	rax, 60					; 0000003cH
	add	r12b, 2
; Line 671
	shl	rdx, 4
	mov	BYTE PTR lead$6[rbp-256], r12b
	movzx	eax, BYTE PTR [rax+r8]
	mov	BYTE PTR num$8[rbp-192], al
; Line 672
	test	r14d, r14d
	je	SHORT $LN184@stbsp_vspr
; Line 673
	movzx	eax, BYTE PTR stbsp__period
	lea	r9, QWORD PTR num$8[rbp-190]
	mov	BYTE PTR num$8[rbp-191], al
$LN184@stbsp_vspr:
; Line 674
	test	r14d, r14d
	lea	rbx, QWORD PTR num$8[rbp-191]
	lea	rax, QWORD PTR num$8[rbp-190]
; Line 677
	mov	ecx, r14d
	cmovne	rbx, rax
; Line 678
	cmp	r14d, 13
	jbe	SHORT $LN186@stbsp_vspr
; Line 679
	mov	ecx, 13
; Line 680
	jle	SHORT $LN186@stbsp_vspr
; Line 681
	lea	eax, DWORD PTR [r14-13]
	mov	r14d, esi
	mov	DWORD PTR tz$1$[rbp-256], eax
; Line 864
	jmp	SHORT $LN938@stbsp_vspr
$LN186@stbsp_vspr:
; Line 682
	mov	r14d, esi
; Line 683
	test	ecx, ecx
	je	SHORT $LN576@stbsp_vspr
$LN938@stbsp_vspr:
; Line 864
	mov	r9, rbx
	npad	14
$LL26@stbsp_vspr:
; Line 684
	mov	rax, rdx
; Line 685
	shl	rdx, 4
	shr	rax, 60					; 0000003cH
	movzx	eax, BYTE PTR [rax+r8]
	mov	BYTE PTR [r9], al
	inc	r9
	add	ecx, -1					; ffffffffH
	jne	SHORT $LL26@stbsp_vspr
$LN576@stbsp_vspr:
; Line 689
	movzx	eax, BYTE PTR [r8+17]
	mov	BYTE PTR tail$7[rbp-255], al
; Line 690
	test	r11d, r11d
	jns	SHORT $LN187@stbsp_vspr
; Line 691
	mov	BYTE PTR tail$7[rbp-254], 45		; 0000002dH
; Line 692
	neg	r11d
; Line 693
	jmp	SHORT $LN188@stbsp_vspr
$LN187@stbsp_vspr:
; Line 694
	mov	BYTE PTR tail$7[rbp-254], 43		; 0000002bH
$LN188@stbsp_vspr:
; Line 695
	cmp	r11d, 1000				; 000003e8H
	jl	SHORT $LN391@stbsp_vspr
	mov	r8d, r10d
	jmp	SHORT $LN390@stbsp_vspr
$LN391@stbsp_vspr:
	cmp	r11d, 100				; 00000064H
	jl	SHORT $LN389@stbsp_vspr
	mov	r8d, 5
	jmp	SHORT $LN390@stbsp_vspr
$LN389@stbsp_vspr:
	cmp	r11d, 10
	mov	r8d, esi
	setge	r8b
	add	r8d, 3
$LN390@stbsp_vspr:
; Line 698
	mov	eax, 1717986919				; 66666667H
	mov	BYTE PTR tail$7[rbp-256], r8b
	imul	r11d
	lea	r10, QWORD PTR tail$7[rbp-256]
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	mov	eax, r8d
	add	r10, rax
	movzx	eax, dl
	shl	al, 2
	lea	ecx, DWORD PTR [rax+rdx]
	add	cl, cl
	sub	r11b, cl
	add	r11b, 48				; 00000030H
	mov	BYTE PTR [r10], r11b
; Line 699
	cmp	r8d, 3
	jbe	SHORT $LN547@stbsp_vspr
; Line 696
	lea	r11d, DWORD PTR [r8-3]
	npad	1
$LL28@stbsp_vspr:
; Line 702
	mov	r8d, edx
	lea	r10, QWORD PTR [r10-1]
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	movzx	eax, dl
	shl	al, 2
	lea	ecx, DWORD PTR [rax+rdx]
	add	cl, cl
	sub	r8b, cl
	add	r8b, 48					; 00000030H
	mov	BYTE PTR [r10], r8b
	sub	r11, 1
	jne	SHORT $LL28@stbsp_vspr
$LN547@stbsp_vspr:
; Line 705
	mov	eax, r9d
; Line 707
	lea	rsi, QWORD PTR num$8[rbp-192]
	sub	eax, ebx
; Line 708
	mov	r15d, 50331649				; 03000001H
	mov	DWORD PTR dp$2[rsp], eax
	lea	rax, QWORD PTR num$8[rbp-256]
	sub	r9d, eax
; Line 1146
	xor	r10d, r10d
	lea	r13d, DWORD PTR [r9-64]
	mov	QWORD PTR sn$1$[rsp], r13
	mov	DWORD PTR l$1[rsp], r13d
	jmp	$LN1210@stbsp_vspr
$LN191@stbsp_vspr:
; Line 714
	movsd	xmm0, QWORD PTR [r9]
	lea	rbx, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	cmp	dl, 71					; 00000047H
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	cmove	rbx, rax
	add	r10, 8
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
; Line 715
	cmp	r14d, -1
	jne	SHORT $LN193@stbsp_vspr
; Line 716
	mov	r14d, 6
	jmp	SHORT $LN1211@stbsp_vspr
$LN193@stbsp_vspr:
; Line 717
	test	r14d, r14d
	mov	eax, 1
	cmove	r14d, eax
$LN1211@stbsp_vspr:
; Line 720
	lea	eax, DWORD PTR [r14-1]
	mov	DWORD PTR pr$3$[rsp], r14d
	bts	eax, 31
	lea	r9, QWORD PTR dp$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	lea	r8, QWORD PTR num$8[rbp-256]
	lea	rdx, QWORD PTR l$1[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	rcx, QWORD PTR sn$3[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN196@stbsp_vspr
; Line 721
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN196@stbsp_vspr:
; Line 725
	mov	eax, DWORD PTR l$1[rsp]
	mov	edx, r14d
; Line 727
	mov	rsi, QWORD PTR sn$3[rsp]
	cmp	eax, r14d
	cmova	eax, r14d
	mov	DWORD PTR l$1[rsp], eax
	mov	r13d, eax
	mov	QWORD PTR sn$1$[rsp], r13
	cmp	eax, 1
	jbe	SHORT $LN32@stbsp_vspr
$LL31@stbsp_vspr:
	test	r14d, r14d
	je	SHORT $LN1144@stbsp_vspr
	lea	ecx, DWORD PTR [r13-1]
	cmp	BYTE PTR [rcx+rsi], 48			; 00000030H
	jne	SHORT $LN1144@stbsp_vspr
; Line 728
	dec	r14d
; Line 729
	mov	DWORD PTR l$1[rsp], ecx
	mov	r13d, ecx
	cmp	ecx, 1
	ja	SHORT $LL31@stbsp_vspr
$LN1144@stbsp_vspr:
	mov	DWORD PTR pr$3$[rsp], r14d
	mov	QWORD PTR sn$1$[rsp], r13
$LN32@stbsp_vspr:
; Line 733
	mov	r15d, DWORD PTR dp$2[rsp]
	cmp	r15d, -4
	jle	SHORT $LN199@stbsp_vspr
	cmp	r15d, edx
	jg	SHORT $LN199@stbsp_vspr
; Line 741
	test	r15d, r15d
	jle	SHORT $LN204@stbsp_vspr
; Line 742
	cmp	r15d, r13d
	jge	SHORT $LN395@stbsp_vspr
	mov	r9d, r13d
	sub	r9d, r15d
	mov	DWORD PTR pr$3$[rsp], r9d
	jmp	$LN1212@stbsp_vspr
$LN395@stbsp_vspr:
	xor	r10d, r10d
	mov	r9d, r10d
	mov	DWORD PTR pr$3$[rsp], r10d
; Line 743
	jmp	$dofloatfromg$1230
$LN204@stbsp_vspr:
; Line 744
	cmp	r14d, r13d
	cmovg	r14d, r13d
	sub	r14d, r15d
	mov	DWORD PTR pr$3$[rsp], r14d
; Line 746
	jmp	$LN1213@stbsp_vspr
$LN199@stbsp_vspr:
; Line 734
	cmp	r14d, r13d
	jle	SHORT $LN200@stbsp_vspr
; Line 735
	lea	edx, DWORD PTR [r13-1]
	jmp	$doexpfromg$1231
$LN200@stbsp_vspr:
; Line 736
	test	r14d, r14d
	je	$LN1155@stbsp_vspr
; Line 737
	lea	edx, DWORD PTR [r14-1]
; Line 738
	jmp	$doexpfromg$1231
$LN207@stbsp_vspr:
; Line 751
	movsd	xmm0, QWORD PTR [r9]
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	cmp	dl, 69					; 00000045H
	lea	rbx, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
; Line 755
	lea	r9, QWORD PTR dp$2[rsp]
	cmove	rbx, rax
	lea	r8, QWORD PTR num$8[rbp-256]
	add	r10, 8
	lea	rdx, QWORD PTR l$1[rsp]
	mov	eax, 6
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	cmp	r14d, -1
	lea	rcx, QWORD PTR sn$3[rsp]
	cmove	r14d, eax
	mov	eax, r14d
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	QWORD PTR [rsp+32], xmm0
	call	stbsp__real_to_str
	mov	r15d, DWORD PTR dp$2[rsp]
	mov	edx, r14d
	mov	rsi, QWORD PTR sn$3[rsp]
	test	eax, eax
	je	SHORT $LN1101@stbsp_vspr
; Line 756
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN1101@stbsp_vspr:
; Line 758
	mov	r13d, DWORD PTR l$1[rsp]
	mov	QWORD PTR sn$1$[rsp], r13
	jmp	SHORT $doexpfromg$1231
$LN1155@stbsp_vspr:
; Line 736
	mov	edx, DWORD PTR pr$3$[rsp]
$doexpfromg$1231:
; Line 297
	mov	eax, DWORD PTR fl$1$[rsp]
	xor	r12b, r12b
; Line 758
	mov	BYTE PTR tail$7[rbp-256], 0
; Line 296
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 297
	test	al, al
	jns	SHORT $LN459@stbsp_vspr
; Line 298
	mov	WORD PTR lead$6[rbp-256], 11521		; 00002d01H
; Line 299
	jmp	SHORT $LN1214@stbsp_vspr
$LN459@stbsp_vspr:
; Line 300
	test	al, 4
	je	SHORT $LN461@stbsp_vspr
; Line 301
	mov	WORD PTR lead$6[rbp-256], 8193		; 00002001H
; Line 302
	jmp	SHORT $LN1214@stbsp_vspr
$LN461@stbsp_vspr:
; Line 303
	test	al, 2
	je	SHORT $LN463@stbsp_vspr
; Line 304
	mov	WORD PTR lead$6[rbp-256], 11009		; 00002b01H
$LN1214@stbsp_vspr:
; Line 760
	mov	r12b, 1
$LN463@stbsp_vspr:
	cmp	r15d, 28672				; 00007000H
	jne	SHORT $LN211@stbsp_vspr
; Line 762
	xor	r10d, r10d
	mov	r15d, r10d
; Line 763
	mov	r14d, r10d
; Line 1146
	jmp	$LN1210@stbsp_vspr
$LN211@stbsp_vspr:
; Line 768
	movzx	eax, BYTE PTR [rsi]
	lea	r14, QWORD PTR num$8[rbp-191]
	mov	BYTE PTR num$8[rbp-192], al
; Line 770
	test	edx, edx
	je	SHORT $LN213@stbsp_vspr
; Line 771
	movzx	eax, BYTE PTR stbsp__period
	lea	r14, QWORD PTR num$8[rbp-190]
	mov	BYTE PTR num$8[rbp-191], al
$LN213@stbsp_vspr:
; Line 774
	test	edx, edx
	lea	rax, QWORD PTR num$8[rbp-190]
	lea	rcx, QWORD PTR num$8[rbp-191]
	cmovne	rcx, rax
	lea	eax, DWORD PTR [r13-1]
	cmp	eax, edx
	jbe	SHORT $LN214@stbsp_vspr
; Line 775
	lea	r13d, DWORD PTR [rdx+1]
$LN214@stbsp_vspr:
; Line 776
	cmp	r13d, 1
	jbe	SHORT $LN34@stbsp_vspr
; Line 864
	mov	r14, rcx
	inc	rsi
	lea	ecx, DWORD PTR [r13-1]
	npad	4
$LL35@stbsp_vspr:
; Line 776
	movzx	eax, BYTE PTR [rsi]
	lea	rsi, QWORD PTR [rsi+1]
; Line 777
	mov	BYTE PTR [r14], al
	inc	r14
	sub	rcx, 1
	jne	SHORT $LL35@stbsp_vspr
$LN34@stbsp_vspr:
; Line 782
	movzx	eax, BYTE PTR [rbx+14]
	mov	r10d, edx
	sub	r10d, r13d
	mov	BYTE PTR tail$7[rbp-255], al
	inc	r10d
	mov	DWORD PTR tz$1$[rbp-256], r10d
	xor	r10d, r10d
; Line 783
	sub	r15d, 1
	mov	DWORD PTR pr$3$[rsp], r10d
; Line 784
	jns	SHORT $LN215@stbsp_vspr
; Line 785
	mov	BYTE PTR tail$7[rbp-254], 45		; 0000002dH
; Line 786
	neg	r15d
; Line 787
	jmp	SHORT $LN216@stbsp_vspr
$LN215@stbsp_vspr:
; Line 788
	mov	BYTE PTR tail$7[rbp-254], 43		; 0000002bH
$LN216@stbsp_vspr:
; Line 792
	cmp	r15d, 100				; 00000064H
	mov	r9d, r10d
; Line 796
	mov	eax, 1717986919				; 66666667H
	setge	r9b
	imul	r15d
	add	r9d, 4
	sar	edx, 2
	mov	eax, edx
	mov	BYTE PTR tail$7[rbp-256], r9b
	shr	eax, 31
	add	edx, eax
	movzx	eax, dl
	shl	al, 2
	lea	ecx, DWORD PTR [rax+rdx]
	add	cl, cl
	sub	r15b, cl
	add	r15b, 48				; 00000030H
	mov	BYTE PTR tail$7[rbp+r9-256], r15b
	npad	2
$LL36@stbsp_vspr:
; Line 800
	mov	r8d, edx
	mov	DWORD PTR dp$2[rsp], edx
	dec	r9d
	mov	eax, 1717986919				; 66666667H
	imul	edx
	sar	edx, 2
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	movzx	eax, dl
	shl	al, 2
	lea	ecx, DWORD PTR [rax+rdx]
	add	cl, cl
	sub	r8b, cl
	add	r8b, 48					; 00000030H
	mov	BYTE PTR tail$7[rbp+r9-256], r8b
	cmp	r9d, 3
	ja	SHORT $LL36@stbsp_vspr
; Line 802
	mov	r15d, 50331649				; 03000001H
; Line 803
	jmp	$flt_lead$1232
$LN219@stbsp_vspr:
; Line 806
	movsd	xmm1, QWORD PTR [r9]
	add	r10, 8
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	jmp	$doafloat$1233
$LN256@stbsp_vspr:
; Line 980
	cmp	dl, 66					; 00000042H
	lea	r10, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	cmove	r10, rax
; Line 981
	xor	r12b, r12b
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 982
	test	r13b, 8
	je	SHORT $LN258@stbsp_vspr
; Line 985
	movzx	eax, BYTE PTR [r10+11]
	mov	r12b, 2
	mov	BYTE PTR lead$6[rbp-254], al
	mov	WORD PTR lead$6[rbp-256], 12290		; 00003002H
$LN258@stbsp_vspr:
; Line 987
	mov	r8d, 384				; 00000180H
; Line 1016
	jmp	SHORT $radixnum$1234
$LN260@stbsp_vspr:
; Line 992
	xor	r12b, r12b
	lea	r10, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 993
	test	r13b, 8
	je	SHORT $LN261@stbsp_vspr
; Line 994
	mov	r12b, 1
	mov	WORD PTR lead$6[rbp-256], 12289		; 00003001H
$LN261@stbsp_vspr:
; Line 997
	mov	r8d, 816				; 00000330H
; Line 998
	jmp	SHORT $radixnum$1234
$LN263@stbsp_vspr:
; Line 1001
	and	r13d, -17				; ffffffefH
; Line 1002
	mov	r14d, 16
; Line 1003
	or	r13d, 32				; 00000020H
	mov	DWORD PTR fl$1$[rsp], r13d
$LN264@stbsp_vspr:
; Line 1008
	cmp	dl, 88					; 00000058H
	lea	r10, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
; Line 1009
	mov	r8d, 1088				; 00000440H
	cmove	r10, rax
; Line 1010
	xor	r12b, r12b
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 1011
	test	r13b, 8
	je	SHORT $radixnum$1234
; Line 1014
	movzx	eax, BYTE PTR [r10+16]
	mov	r12b, 2
	mov	BYTE PTR lead$6[rbp-254], al
	mov	WORD PTR lead$6[rbp-256], 12290		; 00003002H
$radixnum$1234:
; Line 1018
	mov	rbx, QWORD PTR va$GSCopy$1$[rsp]
	add	rbx, 8
	mov	QWORD PTR va$GSCopy$1$[rsp], rbx
	test	r13b, 32				; 00000020H
	je	SHORT $LN267@stbsp_vspr
; Line 1019
	mov	r9, QWORD PTR [r9]
	jmp	SHORT $LN268@stbsp_vspr
$LN267@stbsp_vspr:
; Line 1021
	mov	r9d, DWORD PTR [r9]
$LN268@stbsp_vspr:
; Line 1024
	xor	eax, eax
	lea	rsi, QWORD PTR num$8[rbp+256]
	mov	DWORD PTR dp$2[rsp], eax
; Line 1026
	mov	BYTE PTR tail$7[rbp-256], al
; Line 1027
	test	r9, r9
	jne	SHORT $LN1109@stbsp_vspr
; Line 1028
	xor	r12b, r12b
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 1029
	test	r14d, r14d
	jne	SHORT $LN1109@stbsp_vspr
; Line 1030
	xor	r10d, r10d
	mov	r13d, r10d
	mov	DWORD PTR l$1[rsp], r10d
	mov	QWORD PTR sn$1$[rsp], r13
; Line 1031
	mov	r15d, r10d
; Line 1146
	jmp	$LN298@stbsp_vspr
$LN1109@stbsp_vspr:
	mov	r11d, 1
	npad	3
$LL63@stbsp_vspr:
; Line 1037
	mov	ecx, r8d
	mov	eax, r11d
	shr	ecx, 8
	dec	rsi
	shl	eax, cl
; Line 1038
	mov	ecx, r8d
	cdqe
	dec	rax
	shr	rcx, 8
	and	rax, r9
	shr	r9, cl
	movzx	eax, BYTE PTR [rax+r10]
	mov	BYTE PTR [rsi], al
; Line 1039
	test	r9, r9
	jne	SHORT $LN272@stbsp_vspr
	lea	rcx, QWORD PTR num$8[rbp+256]
	lea	rax, QWORD PTR num$8[rbp+256]
	sub	ecx, esi
	sub	eax, esi
	cmp	eax, r14d
	jge	SHORT $LN549@stbsp_vspr
$LN272@stbsp_vspr:
; Line 1041
	test	r13b, 64				; 00000040H
	je	SHORT $LL63@stbsp_vspr
; Line 1042
	inc	r8d
	mov	eax, r8d
	shr	eax, 4
; Line 1043
	xor	eax, r8d
	test	al, 15
	jne	SHORT $LL63@stbsp_vspr
; Line 1044
	and	r8d, -16				; fffffff0H
; Line 1045
	mov	BYTE PTR [rsi-1], r15b
	dec	rsi
; Line 1048
	jmp	SHORT $LL63@stbsp_vspr
$LN549@stbsp_vspr:
; Line 1050
	and	r8d, 240				; 000000f0H
; Line 1052
	mov	DWORD PTR l$1[rsp], ecx
	shl	r8d, 20
	lea	r15d, QWORD PTR num$8[rbp+256]
	sub	r8d, esi
	mov	r13d, ecx
	add	r15d, r8d
	mov	QWORD PTR sn$1$[rsp], r13
; Line 1054
	xor	r10d, r10d
	jmp	$LN1215@stbsp_vspr
$LN276@stbsp_vspr:
; Line 1060
	add	r10, 8
	mov	QWORD PTR va$GSCopy$1$[rsp], r10
	test	r13b, 32				; 00000020H
	je	SHORT $LN279@stbsp_vspr
; Line 1061
	mov	rbx, QWORD PTR [r9]
; Line 1063
	cmp	dl, 117					; 00000075H
	je	SHORT $LN282@stbsp_vspr
	test	rbx, rbx
	jns	SHORT $LN282@stbsp_vspr
; Line 1064
	neg	rbx
; Line 1067
	jmp	SHORT $LN1216@stbsp_vspr
$LN279@stbsp_vspr:
; Line 1068
	mov	eax, DWORD PTR [r9]
; Line 1069
	mov	ebx, eax
; Line 1070
	cmp	dl, 117					; 00000075H
	je	SHORT $LN282@stbsp_vspr
	test	eax, eax
	jns	SHORT $LN282@stbsp_vspr
; Line 1071
	neg	eax
	mov	ebx, eax
$LN1216@stbsp_vspr:
; Line 1077
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN282@stbsp_vspr:
	bt	r13d, 8
	jae	$LN283@stbsp_vspr
; Line 1078
	cmp	rbx, 1024				; 00000400H
	jae	SHORT $LN284@stbsp_vspr
; Line 1079
	mov	r14d, esi
	jmp	SHORT $LN286@stbsp_vspr
$LN284@stbsp_vspr:
; Line 1080
	cmp	r14d, -1
	mov	eax, 1
	cmove	r14d, eax
$LN286@stbsp_vspr:
; Line 1082
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, rbx
$doafloat$1233:
; Line 809
	bt	r13d, 8
	jae	SHORT $LN550@stbsp_vspr
; Line 812
	bt	r13d, 11
	movaps	xmm2, xmm8
	jae	SHORT $LN496@stbsp_vspr
; Line 813
	movaps	xmm2, xmm7
$LN496@stbsp_vspr:
; Line 814
	cmp	r13d, 67108864				; 04000000H
	jae	SHORT $LN550@stbsp_vspr
	npad	5
$LL39@stbsp_vspr:
; Line 815
	comisd	xmm2, xmm1
	jbe	SHORT $LN222@stbsp_vspr
	movaps	xmm0, xmm2
	xorps	xmm0, xmm6
	comisd	xmm1, xmm0
	ja	SHORT $LN1145@stbsp_vspr
$LN222@stbsp_vspr:
; Line 818
	add	r13d, 16777216				; 01000000H
	divsd	xmm1, xmm2
	cmp	r13d, 67108864				; 04000000H
	jb	SHORT $LL39@stbsp_vspr
$LN1145@stbsp_vspr:
	mov	DWORD PTR fl$1$[rsp], r13d
$LN550@stbsp_vspr:
; Line 821
	mov	eax, 6
; Line 824
	lea	r9, QWORD PTR dp$2[rsp]
	cmp	r14d, -1
	lea	r8, QWORD PTR num$8[rbp-256]
	lea	rdx, QWORD PTR l$1[rsp]
	cmove	r14d, eax
	lea	rcx, QWORD PTR sn$3[rsp]
	mov	DWORD PTR [rsp+40], r14d
	movsd	QWORD PTR [rsp+32], xmm1
	mov	DWORD PTR pr$3$[rsp], r14d
	call	stbsp__real_to_str
	mov	r15d, DWORD PTR dp$2[rsp]
	mov	rsi, QWORD PTR sn$3[rsp]
	test	eax, eax
	je	SHORT $LN1102@stbsp_vspr
; Line 825
	bts	r13d, 7
	mov	DWORD PTR fl$1$[rsp], r13d
$LN1102@stbsp_vspr:
; Line 827
	mov	r13d, DWORD PTR l$1[rsp]
	mov	QWORD PTR sn$1$[rsp], r13
$LN1213@stbsp_vspr:
	mov	r9d, r14d
$LN1212@stbsp_vspr:
	xor	r10d, r10d
$dofloatfromg$1230:
; Line 297
	mov	eax, DWORD PTR fl$1$[rsp]
	xor	r12b, r12b
; Line 827
	mov	BYTE PTR tail$7[rbp-256], 0
; Line 296
	mov	BYTE PTR lead$2$[rsp], r12b
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 297
	test	al, al
	jns	SHORT $LN466@stbsp_vspr
; Line 298
	mov	WORD PTR lead$6[rbp-256], 11521		; 00002d01H
; Line 299
	jmp	SHORT $LN1217@stbsp_vspr
$LN466@stbsp_vspr:
; Line 300
	test	al, 4
	je	SHORT $LN468@stbsp_vspr
; Line 301
	mov	WORD PTR lead$6[rbp-256], 8193		; 00002001H
; Line 302
	jmp	SHORT $LN1217@stbsp_vspr
$LN468@stbsp_vspr:
; Line 303
	test	al, 2
	je	SHORT $LN470@stbsp_vspr
; Line 304
	mov	WORD PTR lead$6[rbp-256], 11009		; 00002b01H
$LN1217@stbsp_vspr:
; Line 829
	mov	r12b, 1
	mov	BYTE PTR lead$2$[rsp], r12b
$LN470@stbsp_vspr:
	cmp	r15d, 28672				; 00007000H
	jne	SHORT $LN225@stbsp_vspr
; Line 831
	mov	r15d, r10d
; Line 832
	mov	r14d, r10d
; Line 1146
	jmp	$LN1210@stbsp_vspr
$LN225@stbsp_vspr:
; Line 835
	lea	r14, QWORD PTR num$8[rbp-192]
; Line 838
	test	r15d, r15d
	jg	$LN227@stbsp_vspr
; Line 842
	movzx	ecx, BYTE PTR num$8[rbp-191]
; Line 844
	lea	r14, QWORD PTR num$8[rbp-191]
	movzx	eax, BYTE PTR stbsp__period
	test	r9d, r9d
	mov	BYTE PTR num$8[rbp-192], 48		; 00000030H
	cmovne	ecx, eax
	lea	rax, QWORD PTR num$8[rbp-190]
	cmovne	r14, rax
	mov	BYTE PTR num$8[rbp-191], cl
	neg	r15d
; Line 845
	cmp	r15d, r9d
	cmovg	r15d, r9d
; Line 847
	mov	r13d, r15d
; Line 848
	test	r15d, r15d
	je	SHORT $LN1146@stbsp_vspr
	npad	3
$LL41@stbsp_vspr:
; Line 849
	test	r14b, 3
	je	SHORT $LN1146@stbsp_vspr
; Line 851
	mov	BYTE PTR [r14], 48			; 00000030H
	inc	r14
; Line 852
	sub	r13d, 1
	jne	SHORT $LL41@stbsp_vspr
$LN1146@stbsp_vspr:
; Line 854
	cmp	r13d, 4
	jl	SHORT $LN43@stbsp_vspr
	mov	ebx, r13d
	mov	edx, 808464432				; 30303030H
	shr	rbx, 2
	mov	rcx, r14
	mov	r8, rbx
	shl	r8, 2
	call	memset
	lea	r14, QWORD PTR [r14+rbx*4]
	neg	ebx
	lea	r13d, DWORD PTR [r13+rbx*4]
$LN43@stbsp_vspr:
; Line 859
	test	r13d, r13d
	je	SHORT $LN45@stbsp_vspr
	mov	r8d, r13d
	mov	dl, 48					; 00000030H
	mov	rcx, r14
	mov	ebx, r13d
	call	memset
	add	r14, rbx
$LN45@stbsp_vspr:
; Line 863
	mov	edx, DWORD PTR pr$3$[rsp]
	mov	r10d, edx
	mov	r8, QWORD PTR sn$1$[rsp]
	sub	r10d, r15d
	lea	eax, DWORD PTR [r15+r8]
	cmp	eax, edx
	jle	SHORT $LN795@stbsp_vspr
; Line 864
	mov	r8d, r10d
$LN795@stbsp_vspr:
; Line 865
	mov	ecx, r8d
	test	r8d, r8d
; Line 866
	je	SHORT $LN48@stbsp_vspr
	sub	rsi, r14
	npad	4
$LL47@stbsp_vspr:
; Line 867
	movzx	eax, BYTE PTR [rsi+r14]
	mov	BYTE PTR [r14], al
	inc	r14
; Line 868
	sub	ecx, 1
	jne	SHORT $LL47@stbsp_vspr
; Line 864
	mov	r10d, edx
	sub	r10d, r15d
$LN48@stbsp_vspr:
; Line 870
	sub	r10d, r8d
; Line 871
	mov	r15d, 50331649				; 03000001H
	mov	DWORD PTR tz$1$[rbp-256], r10d
; Line 872
	xor	r10d, r10d
	jmp	$LN234@stbsp_vspr
$LN227@stbsp_vspr:
; Line 873
	mov	r13d, eax
	and	r13d, 64				; 00000040H
	je	SHORT $LN405@stbsp_vspr
	mov	ebx, 600				; 00000258H
	mov	eax, -1431655765			; aaaaaaabH
	sub	ebx, r15d
	mul	ebx
	shr	edx, 1
	lea	eax, DWORD PTR [rdx+rdx*2]
	sub	ebx, eax
	jmp	SHORT $LN406@stbsp_vspr
$LN405@stbsp_vspr:
	mov	ebx, r10d
$LN406@stbsp_vspr:
; Line 874
	mov	r8, QWORD PTR sn$1$[rsp]
	mov	edx, r10d
	cmp	r15d, r8d
	jb	$LN233@stbsp_vspr
	movzx	r9d, BYTE PTR stbsp__comma$1$[rsp]
$LL49@stbsp_vspr:
; Line 878
	test	r13d, r13d
	je	SHORT $LN235@stbsp_vspr
	inc	ebx
	cmp	ebx, 4
	jne	SHORT $LN235@stbsp_vspr
; Line 880
	mov	BYTE PTR [r14], r9b
	mov	ebx, r10d
	inc	r14
; Line 881
	jmp	SHORT $LL49@stbsp_vspr
$LN235@stbsp_vspr:
; Line 882
	mov	eax, edx
; Line 883
	inc	edx
	movzx	ecx, BYTE PTR [rax+rsi]
	mov	BYTE PTR [r14], cl
	inc	r14
; Line 884
	cmp	edx, r8d
	jb	SHORT $LL49@stbsp_vspr
; Line 888
	cmp	edx, r15d
	jae	$LN57@stbsp_vspr
; Line 889
	sub	r15d, edx
; Line 890
	test	r13d, r13d
	jne	SHORT $LN504@stbsp_vspr
; Line 891
	test	r15d, r15d
	je	SHORT $LN1147@stbsp_vspr
$LL52@stbsp_vspr:
; Line 892
	test	r14b, 3
	je	SHORT $LN1147@stbsp_vspr
; Line 894
	mov	BYTE PTR [r14], 48			; 00000030H
	inc	r14
; Line 895
	add	r15d, -1				; ffffffffH
	jne	SHORT $LL52@stbsp_vspr
$LN1147@stbsp_vspr:
; Line 897
	cmp	r15d, 4
	jb	SHORT $LN504@stbsp_vspr
	mov	esi, r15d
	mov	edx, 808464432				; 30303030H
	shr	rsi, 2
	mov	rcx, r14
	mov	r8, rsi
	shl	r8, 2
	call	memset
	lea	r14, QWORD PTR [r14+rsi*4]
	npad	2
$LL54@stbsp_vspr:
; Line 900
	add	r15d, -4				; fffffffcH
	sub	rsi, 1
	jne	SHORT $LL54@stbsp_vspr
	xor	r10d, r10d
$LN504@stbsp_vspr:
; Line 903
	test	r15d, r15d
	je	SHORT $LN57@stbsp_vspr
	movzx	r12d, BYTE PTR stbsp__comma$1$[rsp]
$LL56@stbsp_vspr:
; Line 904
	test	r13d, r13d
	je	SHORT $LN241@stbsp_vspr
	inc	ebx
	cmp	ebx, 4
	jne	SHORT $LN241@stbsp_vspr
; Line 905
	mov	ebx, r10d
; Line 906
	mov	BYTE PTR [r14], r12b
; Line 907
	jmp	SHORT $LN242@stbsp_vspr
$LN241@stbsp_vspr:
; Line 908
	mov	BYTE PTR [r14], 48			; 00000030H
; Line 909
	dec	r15d
$LN242@stbsp_vspr:
; Line 903
	inc	r14
	test	r15d, r15d
	jne	SHORT $LL56@stbsp_vspr
	movzx	r12d, BYTE PTR lead$2$[rsp]
$LN57@stbsp_vspr:
; Line 914
	mov	edx, DWORD PTR pr$3$[rsp]
	lea	rax, QWORD PTR num$8[rbp-256]
	mov	r15d, r14d
	sub	r15d, eax
	add	r15d, 50331584				; 02ffffc0H
	test	edx, edx
	je	$LN234@stbsp_vspr
; Line 915
	movzx	eax, BYTE PTR stbsp__period
	mov	BYTE PTR [r14], al
	inc	r14
; Line 916
	mov	DWORD PTR tz$1$[rbp-256], edx
; Line 918
	jmp	$LN234@stbsp_vspr
$LN233@stbsp_vspr:
	movzx	r8d, BYTE PTR stbsp__comma$1$[rsp]
	npad	7
$LL58@stbsp_vspr:
; Line 922
	test	r13d, r13d
	je	SHORT $LN244@stbsp_vspr
	inc	ebx
	cmp	ebx, 4
	jne	SHORT $LN244@stbsp_vspr
; Line 924
	mov	BYTE PTR [r14], r8b
	mov	ebx, r10d
	inc	r14
; Line 925
	jmp	SHORT $LL58@stbsp_vspr
$LN244@stbsp_vspr:
; Line 926
	mov	eax, edx
; Line 927
	inc	edx
	movzx	ecx, BYTE PTR [rax+rsi]
	mov	BYTE PTR [r14], cl
	inc	r14
	mov	eax, r14d
; Line 928
	cmp	edx, r15d
	jb	SHORT $LL58@stbsp_vspr
; Line 932
	mov	r8, QWORD PTR sn$1$[rsp]
	lea	rcx, QWORD PTR num$8[rbp-256]
	sub	eax, ecx
	add	eax, 50331584				; 02ffffc0H
	mov	DWORD PTR cs$2$[rsp], eax
; Line 933
	test	r9d, r9d
	je	SHORT $LN247@stbsp_vspr
; Line 934
	movzx	eax, BYTE PTR stbsp__period
	mov	BYTE PTR [r14], al
	inc	r14
$LN247@stbsp_vspr:
; Line 935
	mov	eax, r8d
	sub	eax, r15d
	cmp	eax, r9d
	jbe	SHORT $LN506@stbsp_vspr
; Line 936
	lea	r8d, DWORD PTR [r15+r9]
$LN506@stbsp_vspr:
; Line 937
	cmp	edx, r8d
	jae	SHORT $LN62@stbsp_vspr
	mov	ecx, edx
	mov	eax, r8d
	add	rcx, rsi
	sub	eax, edx
	mov	edx, eax
$LL61@stbsp_vspr:
; Line 938
	movzx	eax, BYTE PTR [rcx]
; Line 939
	lea	rcx, QWORD PTR [rcx+1]
	mov	BYTE PTR [r14], al
	inc	r14
	sub	rdx, 1
	jne	SHORT $LL61@stbsp_vspr
$LN62@stbsp_vspr:
; Line 941
	mov	eax, r15d
	mov	r15d, DWORD PTR cs$2$[rsp]
	sub	eax, r8d
	add	eax, r9d
	mov	DWORD PTR tz$1$[rbp-256], eax
$LN234@stbsp_vspr:
; Line 947
	mov	r9d, DWORD PTR fl$1$[rsp]
	mov	DWORD PTR pr$3$[rsp], r10d
	bt	r9d, 8
	jae	SHORT $flt_lead$1232
; Line 950
	mov	r8d, r9d
; Line 953
	mov	BYTE PTR tail$7[rbp-255], 32		; 00000020H
	shr	r8d, 10
	not	r8b
	and	r8b, 1
	mov	BYTE PTR tail$7[rbp-256], r8b
; Line 955
	cmp	r9d, 16777216				; 01000000H
	jb	SHORT $flt_lead$1232
; Line 956
	mov	r11d, 2048				; 00000800H
	movzx	edx, r8b
	test	r9d, r11d
; Line 960
	lea	rax, OFFSET FLAT:??_C@_05JPHLCBNH@_kMGT@
	lea	rcx, OFFSET FLAT:??_C@_05FOLKAOND@_KMGT@
	cmove	rcx, rax
	mov	eax, r9d
	shr	rax, 24
	inc	r8b
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$7[rbp+rdx-255], al
	mov	eax, r9d
	and	eax, 6144				; 00001800H
	cmp	eax, r11d
; Line 962
	jne	SHORT $LN254@stbsp_vspr
; Line 963
	movzx	eax, r8b
; Line 964
	inc	r8b
	mov	BYTE PTR tail$7[rbp+rax-255], 105	; 00000069H
$LN254@stbsp_vspr:
; Line 966
	mov	BYTE PTR tail$7[rbp-256], r8b
$flt_lead$1232:
; Line 973
	lea	rax, QWORD PTR num$8[rbp-256]
	sub	r14d, eax
; Line 974
	lea	rsi, QWORD PTR num$8[rbp-192]
	lea	r13d, DWORD PTR [r14-64]
; Line 1146
	mov	r14d, DWORD PTR pr$3$[rsp]
	mov	QWORD PTR sn$1$[rsp], r13
	mov	DWORD PTR l$1[rsp], r13d
	jmp	$LN1210@stbsp_vspr
$LN283@stbsp_vspr:
; Line 1089
	xor	r12d, r12d
	lea	rsi, QWORD PTR num$8[rbp+256]
	mov	r14d, r13d
	mov	r10d, r12d
	and	r14d, 64				; 00000040H
	mov	r13, -6067343680855748867		; abcc77118461cefdH
	npad	10
$LL66@stbsp_vspr:
; Line 1093
	lea	r11, QWORD PTR [rsi-8]
; Line 1094
	mov	r8d, ebx
	cmp	rbx, 100000000				; 05f5e100H
	jb	SHORT $LN287@stbsp_vspr
; Line 1095
	mov	rax, r13
	mul	rbx
	mov	rbx, rdx
	shr	rbx, 26
	imul	eax, ebx, 100000000			; 05f5e100H
	sub	r8d, eax
; Line 1097
	jmp	SHORT $LN288@stbsp_vspr
$LN287@stbsp_vspr:
; Line 1099
	mov	rbx, r12
$LN288@stbsp_vspr:
; Line 1101
	test	r14d, r14d
	jne	SHORT $LN70@stbsp_vspr
	lea	rcx, OFFSET FLAT:__ImageBase
	npad	9
$LL71@stbsp_vspr:
; Line 1103
	sub	rsi, 2
; Line 1104
	mov	eax, 1374389535				; 51eb851fH
	mul	r8d
	shr	edx, 5
	imul	eax, edx, 100				; 00000064H
	sub	r8d, eax
	add	r8d, r8d
	movzx	eax, WORD PTR stbsp__digitpair[r8+rcx+2]
; Line 1105
	mov	r8d, edx
	mov	WORD PTR [rsi], ax
; Line 1106
	test	edx, edx
	jne	SHORT $LL71@stbsp_vspr
; Line 864
	jmp	SHORT $LN73@stbsp_vspr
$LN70@stbsp_vspr:
; Line 1108
	test	r8d, r8d
	je	SHORT $LN73@stbsp_vspr
	npad	14
$LL72@stbsp_vspr:
; Line 1109
	mov	eax, r10d
	dec	rsi
	inc	r10d
	mov	r9d, r8d
	cmp	eax, 3
	jne	SHORT $LN290@stbsp_vspr
; Line 1110
	mov	r10d, r12d
; Line 1111
	mov	BYTE PTR [rsi], r15b
; Line 1112
	dec	r11
; Line 1113
	jmp	SHORT $LN291@stbsp_vspr
$LN290@stbsp_vspr:
; Line 1114
	mov	eax, -858993459				; cccccccdH
	mul	r9d
	mov	r8d, edx
	shr	r8d, 3
	movzx	eax, r8b
	shl	al, 2
	lea	ecx, DWORD PTR [rax+r8]
	add	cl, cl
	sub	r9b, cl
	add	r9b, 48					; 00000030H
	mov	BYTE PTR [rsi], r9b
$LN291@stbsp_vspr:
; Line 1108
	test	r8d, r8d
	jne	SHORT $LL72@stbsp_vspr
$LN73@stbsp_vspr:
; Line 1118
	test	rbx, rbx
	je	SHORT $LN555@stbsp_vspr
; Line 1123
	cmp	rsi, r11
	je	$LL66@stbsp_vspr
$LL74@stbsp_vspr:
; Line 1124
	test	r14d, r14d
	je	SHORT $LN294@stbsp_vspr
	mov	eax, r10d
	inc	r10d
	cmp	eax, 3
	jne	SHORT $LN294@stbsp_vspr
; Line 1126
	dec	rsi
	mov	r10d, r12d
; Line 1127
	dec	r11
	mov	BYTE PTR [rsi], r15b
; Line 1128
	jmp	SHORT $LN295@stbsp_vspr
$LN294@stbsp_vspr:
; Line 1129
	dec	rsi
	mov	BYTE PTR [rsi], 48			; 00000030H
$LN295@stbsp_vspr:
; Line 1123
	cmp	rsi, r11
	jne	SHORT $LL74@stbsp_vspr
; Line 1131
	jmp	$LL66@stbsp_vspr
$LN555@stbsp_vspr:
; Line 1119
	cmp	BYTE PTR [rsi], 48			; 00000030H
	mov	r13d, DWORD PTR fl$1$[rsp]
	jne	SHORT $LN293@stbsp_vspr
	lea	rax, QWORD PTR num$8[rbp+256]
	cmp	rsi, rax
	je	SHORT $LN293@stbsp_vspr
; Line 1120
	inc	rsi
$LN293@stbsp_vspr:
; Line 1133
	mov	BYTE PTR tail$7[rbp-256], r12b
; Line 296
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 297
	test	r13b, r13b
	jns	SHORT $LN473@stbsp_vspr
; Line 298
	mov	WORD PTR lead$6[rbp-256], 11521		; 00002d01H
; Line 299
	jmp	SHORT $LN1218@stbsp_vspr
$LN473@stbsp_vspr:
; Line 300
	test	r13b, 4
	je	SHORT $LN475@stbsp_vspr
; Line 301
	mov	WORD PTR lead$6[rbp-256], 8193		; 00002001H
; Line 302
	jmp	SHORT $LN1218@stbsp_vspr
$LN475@stbsp_vspr:
; Line 303
	test	r13b, 2
	je	SHORT $LN477@stbsp_vspr
; Line 304
	mov	WORD PTR lead$6[rbp-256], 11009		; 00002b01H
$LN1218@stbsp_vspr:
; Line 1137
	mov	r12b, 1
$LN477@stbsp_vspr:
	lea	rax, QWORD PTR num$8[rbp+256]
	sub	eax, esi
	mov	r13d, eax
	mov	DWORD PTR l$1[rsp], eax
	mov	QWORD PTR sn$1$[rsp], r13
; Line 1138
	jne	SHORT $LN296@stbsp_vspr
; Line 1140
	mov	eax, 1
	mov	BYTE PTR [rsi-1], 48			; 00000030H
	dec	rsi
	mov	DWORD PTR l$1[rsp], eax
	mov	r13d, eax
	mov	QWORD PTR sn$1$[rsp], r13
$LN296@stbsp_vspr:
; Line 1143
	mov	r14d, DWORD PTR pr$3$[rsp]
	lea	r15d, DWORD PTR [rax+50331648]
; Line 1146
	mov	rbx, QWORD PTR va$GSCopy$1$[rsp]
	test	r14d, r14d
	mov	r10d, 0
	cmovs	r14d, r10d
$LN1215@stbsp_vspr:
; Line 1148
	mov	QWORD PTR va$GSCopy$1$[rsp], rbx
$LN1210@stbsp_vspr:
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
$scopy$1229:
	cmp	r14d, r13d
	jge	SHORT $LN298@stbsp_vspr
	jmp	SHORT $LN893@stbsp_vspr
$LN362@stbsp_vspr:
; Line 1336
	xor	r10d, r10d
	mov	BYTE PTR num$8[rbp+255], dl
	mov	DWORD PTR fl$1$[rsp], r10d
; Line 1337
	xor	r12b, r12b
	mov	DWORD PTR fw$2$[rsp], r10d
; Line 1338
	mov	BYTE PTR tail$7[rbp-256], r10b
$LN1208@stbsp_vspr:
; Line 1149
	mov	r13d, 1
	mov	DWORD PTR dp$2[rsp], r10d
	mov	DWORD PTR l$1[rsp], r13d
	lea	rsi, QWORD PTR num$8[rbp+255]
	mov	QWORD PTR sn$1$[rsp], r13
	mov	r15d, r10d
	mov	BYTE PTR lead$6[rbp-256], r12b
$LN893@stbsp_vspr:
	mov	r14d, r13d
$LN298@stbsp_vspr:
; Line 1151
	mov	edx, DWORD PTR fw$2$[rsp]
	movsx	eax, BYTE PTR tail$7[rbp-256]
	add	eax, DWORD PTR tz$1$[rbp-256]
	movsx	ecx, r12b
	add	ecx, eax
	add	ecx, r14d
	cmp	edx, ecx
	cmovl	edx, ecx
; Line 1154
	sub	r14d, r13d
	sub	edx, ecx
	mov	DWORD PTR pr$3$[rsp], r14d
; Line 1157
	mov	ecx, DWORD PTR fl$1$[rsp]
	mov	DWORD PTR fw$2$[rsp], edx
	test	cl, 1
	jne	SHORT $LN302@stbsp_vspr
; Line 1158
	test	cl, 16
	je	SHORT $LN301@stbsp_vspr
; Line 1160
	cmp	edx, r14d
	cmovg	r14d, edx
; Line 1161
	mov	edx, r10d
	mov	DWORD PTR fw$2$[rsp], edx
	mov	DWORD PTR pr$3$[rsp], r14d
; Line 1162
	jmp	SHORT $LN302@stbsp_vspr
$LN301@stbsp_vspr:
; Line 1163
	and	ecx, -65				; ffffffbfH
	mov	DWORD PTR fl$1$[rsp], ecx
$LN302@stbsp_vspr:
; Line 1168
	lea	eax, DWORD PTR [r14+rdx]
	test	eax, eax
	je	$LN89@stbsp_vspr
; Line 1173
	mov	r13, QWORD PTR callback$GSCopy$1$[rbp-256]
	test	cl, 1
	jne	$LN1154@stbsp_vspr
; Line 1174
	test	edx, edx
	jle	$LN1154@stbsp_vspr
	mov	r12, QWORD PTR user$GSCopy$1$[rbp-256]
$LL76@stbsp_vspr:
; Line 1175
	mov	r14d, edx
	test	r13, r13
	je	SHORT $LN306@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	edx, eax
	cmovg	r14d, eax
$LN306@stbsp_vspr:
; Line 1176
	sub	edx, r14d
	mov	DWORD PTR fw$2$[rsp], edx
; Line 1177
	test	r14d, r14d
	je	SHORT $LN1148@stbsp_vspr
$LL78@stbsp_vspr:
; Line 1178
	test	dil, 3
	je	SHORT $LN1148@stbsp_vspr
; Line 1180
	mov	BYTE PTR [rdi], 32			; 00000020H
	inc	rdi
; Line 1181
	sub	r14d, 1
	jne	SHORT $LL78@stbsp_vspr
$LN1148@stbsp_vspr:
; Line 1183
	cmp	r14d, 4
	jl	SHORT $LN80@stbsp_vspr
	mov	ebx, r14d
	mov	edx, 538976288				; 20202020H
	shr	rbx, 2
	mov	rcx, rdi
	mov	r8, rbx
	shl	r8, 2
	call	memset
	lea	rdi, QWORD PTR [rdi+rbx*4]
	neg	ebx
	lea	r14d, DWORD PTR [r14+rbx*4]
$LN80@stbsp_vspr:
; Line 1188
	test	r14d, r14d
	je	SHORT $LN82@stbsp_vspr
	mov	r8d, r14d
	mov	dl, 32					; 00000020H
	mov	rcx, rdi
	mov	ebx, r14d
	call	memset
	add	rdi, rbx
$LN82@stbsp_vspr:
; Line 1192
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
	test	r13, r13
	je	SHORT $LN310@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN310@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rdx, r12
	add	r14d, r8d
	mov	rcx, r11
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r13
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
$LN310@stbsp_vspr:
; Line 1174
	mov	edx, DWORD PTR fw$2$[rsp]
	test	edx, edx
	jg	$LL76@stbsp_vspr
; Line 1173
	movzx	r9d, BYTE PTR stbsp__comma
	movzx	r12d, BYTE PTR lead$6[rbp-256]
	mov	r14d, DWORD PTR pr$3$[rsp]
	mov	ecx, DWORD PTR fl$1$[rsp]
	mov	BYTE PTR stbsp__comma$1$[rsp], r9b
	jmp	SHORT $LN77@stbsp_vspr
$LN1154@stbsp_vspr:
; Line 1196
	movzx	r9d, BYTE PTR stbsp__comma$1$[rsp]
$LN77@stbsp_vspr:
	lea	rbx, QWORD PTR lead$6[rbp-255]
; Line 1197
	test	r12b, r12b
	je	$LN85@stbsp_vspr
	npad	4
$LL84@stbsp_vspr:
; Line 1198
	movsx	ecx, r12b
	test	r13, r13
	je	SHORT $LN313@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	ecx, eax
	cmovg	ecx, eax
$LN313@stbsp_vspr:
; Line 1199
	sub	r12b, cl
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 1200
	test	ecx, ecx
	je	SHORT $LN87@stbsp_vspr
	npad	13
$LL86@stbsp_vspr:
; Line 1201
	movzx	eax, BYTE PTR [rbx]
	inc	rbx
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 1202
	sub	ecx, 1
	jne	SHORT $LL86@stbsp_vspr
	movzx	r12d, BYTE PTR lead$6[rbp-256]
$LN87@stbsp_vspr:
; Line 1204
	test	r13, r13
	je	SHORT $LN316@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN316@stbsp_vspr
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	mov	rcx, r11
	add	DWORD PTR tlen$1$[rsp], r8d
	call	r13
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$LN1163@stbsp_vspr
	movzx	r12d, BYTE PTR lead$6[rbp-256]
$LN316@stbsp_vspr:
; Line 1197
	test	r12b, r12b
	jne	$LL84@stbsp_vspr
	movzx	r9d, BYTE PTR stbsp__comma
	mov	ecx, DWORD PTR fl$1$[rsp]
	mov	BYTE PTR stbsp__comma$1$[rsp], r9b
$LN85@stbsp_vspr:
; Line 1208
	mov	r8d, r15d
; Line 1210
	mov	r13d, ecx
	shr	r8d, 24
	mov	DWORD PTR c$1$[rsp], r8d
	and	r13d, 64				; 00000040H
	je	SHORT $LN427@stbsp_vspr
	and	r15d, 16777215				; 00ffffffH
	lea	ecx, DWORD PTR [r8+1]
	xor	edx, edx
	lea	eax, DWORD PTR [r14+r15]
	mov	r15d, r8d
	div	ecx
	sub	r15d, edx
	jmp	SHORT $LN428@stbsp_vspr
$LN427@stbsp_vspr:
	xor	eax, eax
	mov	r15d, eax
$LN428@stbsp_vspr:
; Line 1211
	test	r14d, r14d
	jle	$LN1152@stbsp_vspr
	mov	r12, QWORD PTR callback$GSCopy$1$[rbp-256]
	npad	1
$LL88@stbsp_vspr:
; Line 1212
	test	r12, r12
	je	SHORT $LN319@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	DWORD PTR pr$3$[rsp], eax
	cmovg	r14d, eax
$LN319@stbsp_vspr:
; Line 1213
	sub	DWORD PTR pr$3$[rsp], r14d
; Line 1214
	test	r13d, r13d
	jne	SHORT $LN92@stbsp_vspr
; Line 1215
	test	r14d, r14d
	je	SHORT $LN1149@stbsp_vspr
$LL90@stbsp_vspr:
; Line 1216
	test	dil, 3
	je	SHORT $LN1149@stbsp_vspr
; Line 1218
	mov	BYTE PTR [rdi], 48			; 00000030H
	inc	rdi
; Line 1219
	sub	r14d, 1
	jne	SHORT $LL90@stbsp_vspr
$LN1149@stbsp_vspr:
; Line 1221
	cmp	r14d, 4
	jl	SHORT $LN92@stbsp_vspr
	mov	ebx, r14d
	mov	edx, 808464432				; 30303030H
	shr	rbx, 2
	mov	rcx, rdi
	mov	r8, rbx
	shl	r8, 2
	call	memset
	mov	r8d, DWORD PTR c$1$[rsp]
	lea	rdi, QWORD PTR [rdi+rbx*4]
	movzx	r9d, BYTE PTR stbsp__comma$1$[rsp]
	neg	ebx
	lea	r14d, DWORD PTR [r14+rbx*4]
$LN92@stbsp_vspr:
; Line 1227
	test	r14d, r14d
	je	SHORT $LN95@stbsp_vspr
	xor	r12d, r12d
$LL94@stbsp_vspr:
; Line 1228
	test	r13d, r13d
	je	SHORT $LN322@stbsp_vspr
	mov	eax, r15d
	inc	r15d
	cmp	eax, r8d
	jne	SHORT $LN322@stbsp_vspr
; Line 1229
	mov	r15d, r12d
; Line 1230
	mov	BYTE PTR [rdi], r9b
; Line 1231
	jmp	SHORT $LN323@stbsp_vspr
$LN322@stbsp_vspr:
; Line 1232
	mov	BYTE PTR [rdi], 48			; 00000030H
$LN323@stbsp_vspr:
; Line 1227
	inc	rdi
; Line 1233
	sub	r14d, 1
	jne	SHORT $LL94@stbsp_vspr
	mov	r12, QWORD PTR callback$GSCopy$1$[rbp-256]
$LN95@stbsp_vspr:
; Line 1235
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
	test	r12, r12
	je	SHORT $LN326@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN326@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rcx, r11
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	add	r14d, r8d
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
	movzx	r9d, BYTE PTR stbsp__comma
	mov	BYTE PTR stbsp__comma$1$[rsp], r9b
$LN326@stbsp_vspr:
; Line 1211
	mov	r14d, DWORD PTR pr$3$[rsp]
	mov	r8d, DWORD PTR c$1$[rsp]
	test	r14d, r14d
	jg	$LL88@stbsp_vspr
	movzx	r12d, BYTE PTR lead$6[rbp-256]
$LN1152@stbsp_vspr:
; Line 1240
	mov	r13, QWORD PTR sn$1$[rsp]
$LN89@stbsp_vspr:
	lea	rbx, QWORD PTR lead$6[rbp-255]
	mov	QWORD PTR sn$3[rsp], rbx
; Line 1241
	test	r12b, r12b
	je	$LN97@stbsp_vspr
	mov	r9, QWORD PTR callback$GSCopy$1$[rbp-256]
$LL96@stbsp_vspr:
; Line 1243
	movsx	ecx, r12b
	test	r9, r9
	je	SHORT $LN329@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	ecx, eax
	cmovg	ecx, eax
$LN329@stbsp_vspr:
; Line 1244
	sub	r12b, cl
	mov	BYTE PTR lead$6[rbp-256], r12b
; Line 1245
	test	ecx, ecx
	je	SHORT $LN99@stbsp_vspr
	npad	9
$LL98@stbsp_vspr:
; Line 1246
	movzx	eax, BYTE PTR [rbx]
	inc	rbx
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 1247
	sub	ecx, 1
	jne	SHORT $LL98@stbsp_vspr
; Line 1246
	movzx	r12d, BYTE PTR lead$6[rbp-256]
	mov	QWORD PTR sn$3[rsp], rbx
$LN99@stbsp_vspr:
; Line 1249
	test	r9, r9
	je	SHORT $LN332@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN332@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rcx, r11
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	add	r14d, r8d
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r9
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
	movzx	r12d, BYTE PTR lead$6[rbp-256]
	mov	r9, QWORD PTR callback$GSCopy$1$[rbp-256]
$LN332@stbsp_vspr:
; Line 1241
	test	r12b, r12b
	jne	$LL96@stbsp_vspr
$LN97@stbsp_vspr:
; Line 1254
	mov	r12, QWORD PTR callback$GSCopy$1$[rbp-256]
	test	r13d, r13d
	je	$LN526@stbsp_vspr
	npad	6
$LL100@stbsp_vspr:
; Line 1256
	mov	ecx, r13d
	test	r12, r12
	je	SHORT $LN335@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	r13d, eax
	cmovg	ecx, eax
$LN335@stbsp_vspr:
; Line 1257
	sub	r13d, ecx
; Line 1258
	cmp	ecx, 4
	jl	SHORT $LN525@stbsp_vspr
; Line 1257
	mov	edx, ecx
	shr	rdx, 2
	mov	eax, edx
	neg	eax
	lea	ecx, DWORD PTR [rcx+rax*4]
	npad	3
$LL102@stbsp_vspr:
; Line 1258
	mov	eax, DWORD PTR [rsi]
	add	rsi, 4
	mov	DWORD PTR [rdi], eax
	add	rdi, 4
	sub	rdx, 1
	jne	SHORT $LL102@stbsp_vspr
$LN525@stbsp_vspr:
; Line 1264
	test	ecx, ecx
	je	SHORT $LN105@stbsp_vspr
	npad	10
$LL104@stbsp_vspr:
; Line 1265
	movzx	eax, BYTE PTR [rsi]
	inc	rsi
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 1266
	sub	ecx, 1
	jne	SHORT $LL104@stbsp_vspr
$LN105@stbsp_vspr:
; Line 1268
	test	r12, r12
	je	SHORT $LN338@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN338@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rcx, r11
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	add	r14d, r8d
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
$LN338@stbsp_vspr:
; Line 1254
	test	r13d, r13d
	jne	$LL100@stbsp_vspr
$LN526@stbsp_vspr:
; Line 1272
	mov	r14d, DWORD PTR tz$1$[rbp-256]
	test	r14d, r14d
	je	$LN107@stbsp_vspr
$LL106@stbsp_vspr:
; Line 1274
	mov	esi, r14d
	test	r12, r12
	je	SHORT $LN341@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	r14d, eax
	cmovg	esi, eax
$LN341@stbsp_vspr:
; Line 1275
	sub	r14d, esi
; Line 1276
	test	esi, esi
	je	SHORT $LN1150@stbsp_vspr
$LL108@stbsp_vspr:
; Line 1277
	test	dil, 3
	je	SHORT $LN1150@stbsp_vspr
; Line 1279
	mov	BYTE PTR [rdi], 48			; 00000030H
	inc	rdi
; Line 1280
	sub	esi, 1
	jne	SHORT $LL108@stbsp_vspr
$LN1150@stbsp_vspr:
; Line 1282
	cmp	esi, 4
	jl	SHORT $LN110@stbsp_vspr
	mov	ebx, esi
	mov	edx, 808464432				; 30303030H
	shr	rbx, 2
	mov	rcx, rdi
	mov	r8, rbx
	shl	r8, 2
	call	memset
	lea	rdi, QWORD PTR [rdi+rbx*4]
	neg	ebx
	lea	esi, DWORD PTR [rsi+rbx*4]
$LN110@stbsp_vspr:
; Line 1287
	test	esi, esi
	je	SHORT $LN112@stbsp_vspr
	mov	r8d, esi
	mov	dl, 48					; 00000030H
	mov	rcx, rdi
	mov	ebx, esi
	call	memset
	add	rdi, rbx
$LN112@stbsp_vspr:
; Line 1291
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
	test	r12, r12
	je	SHORT $LN345@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN345@stbsp_vspr
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	mov	rcx, r11
	add	DWORD PTR tlen$1$[rsp], r8d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$LN1163@stbsp_vspr
$LN345@stbsp_vspr:
; Line 1272
	test	r14d, r14d
	jne	$LL106@stbsp_vspr
$LN107@stbsp_vspr:
; Line 1296
	cmp	BYTE PTR tail$7[rbp-256], 0
	lea	rbx, QWORD PTR tail$7[rbp-255]
	mov	QWORD PTR sn$3[rsp], rbx
	je	$LN115@stbsp_vspr
	npad	1
$LL114@stbsp_vspr:
; Line 1298
	movsx	ecx, BYTE PTR tail$7[rbp-256]
	test	r12, r12
	je	SHORT $LN348@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	ecx, eax
	cmovg	ecx, eax
$LN348@stbsp_vspr:
; Line 1299
	sub	BYTE PTR tail$7[rbp-256], cl
; Line 1300
	test	ecx, ecx
	je	SHORT $LN117@stbsp_vspr
	npad	1
$LL116@stbsp_vspr:
; Line 1301
	movzx	eax, BYTE PTR [rbx]
	inc	rbx
	mov	BYTE PTR [rdi], al
	inc	rdi
; Line 1302
	sub	ecx, 1
	jne	SHORT $LL116@stbsp_vspr
; Line 1301
	mov	QWORD PTR sn$3[rsp], rbx
$LN117@stbsp_vspr:
; Line 1304
	test	r12, r12
	je	SHORT $LN351@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN351@stbsp_vspr
	mov	r14d, DWORD PTR tlen$1$[rsp]
	mov	rcx, r11
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	add	r14d, r8d
	mov	DWORD PTR tlen$1$[rsp], r14d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	$done$1227
$LN351@stbsp_vspr:
; Line 1296
	cmp	BYTE PTR tail$7[rbp-256], 0
	jne	SHORT $LL114@stbsp_vspr
$LN115@stbsp_vspr:
; Line 1308
	mov	eax, DWORD PTR fl$1$[rsp]
	test	al, 1
	je	$LN1165@stbsp_vspr
; Line 1309
	mov	r14d, DWORD PTR fw$2$[rsp]
	test	r14d, r14d
	jle	$LN1165@stbsp_vspr
$LL118@stbsp_vspr:
; Line 1312
	mov	esi, r14d
	test	r12, r12
	je	SHORT $LN356@stbsp_vspr
	mov	eax, r11d
	sub	eax, edi
	add	eax, 512				; 00000200H
	cmp	r14d, eax
	cmovg	esi, eax
$LN356@stbsp_vspr:
; Line 1313
	sub	r14d, esi
; Line 1314
	test	esi, esi
	je	SHORT $LN1151@stbsp_vspr
$LL120@stbsp_vspr:
; Line 1315
	test	dil, 3
	je	SHORT $LN1151@stbsp_vspr
; Line 1317
	mov	BYTE PTR [rdi], 32			; 00000020H
	inc	rdi
; Line 1318
	sub	esi, 1
	jne	SHORT $LL120@stbsp_vspr
$LN1151@stbsp_vspr:
; Line 1320
	cmp	esi, 4
	jl	SHORT $LN122@stbsp_vspr
	mov	ebx, esi
	mov	edx, 538976288				; 20202020H
	shr	rbx, 2
	mov	rcx, rdi
	mov	r8, rbx
	shl	r8, 2
	call	memset
	lea	rdi, QWORD PTR [rdi+rbx*4]
	neg	ebx
	lea	esi, DWORD PTR [rsi+rbx*4]
$LN122@stbsp_vspr:
; Line 1325
	test	esi, esi
	je	SHORT $LN124@stbsp_vspr
	mov	r8d, esi
	mov	dl, 32					; 00000020H
	mov	rcx, rdi
	mov	ebx, esi
	call	memset
	add	rdi, rbx
$LN124@stbsp_vspr:
; Line 1327
	mov	r11, QWORD PTR buf$GSCopy$1$[rsp]
	test	r12, r12
	je	SHORT $LN360@stbsp_vspr
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+1]
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN360@stbsp_vspr
	mov	rdx, QWORD PTR user$GSCopy$1$[rbp-256]
	mov	rcx, r11
	add	DWORD PTR tlen$1$[rsp], r8d
	call	r12
	mov	QWORD PTR buf$GSCopy$1$[rsp], rax
	mov	r11, rax
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN1163@stbsp_vspr
$LN360@stbsp_vspr:
; Line 1310
	test	r14d, r14d
	jne	$LL118@stbsp_vspr
$LN1165@stbsp_vspr:
; Line 1344
	mov	r15, QWORD PTR f$1$[rsp]
	xor	esi, esi
	mov	r14d, DWORD PTR tlen$1$[rsp]
	inc	r15
	mov	r10, QWORD PTR va$GSCopy$1$[rsp]
	mov	r9, QWORD PTR user$GSCopy$1$[rbp-256]
	jmp	$LL2@stbsp_vspr
$endfmt$1226:
; Line 1348
	test	r12, r12
	jne	SHORT $LN363@stbsp_vspr
; Line 1349
	mov	BYTE PTR [rdi], r12b
	jmp	SHORT $done$1227
$LN363@stbsp_vspr:
; Line 1351
	mov	r8d, edi
	sub	r8d, r11d
	lea	eax, DWORD PTR [r8+511]
	cmp	eax, 512				; 00000200H
	jl	SHORT $done$1227
	add	r14d, r8d
	mov	rdx, r9
	mov	rcx, r11
	call	r12
	mov	r11, rax
	mov	rdi, rax
	jmp	SHORT $done$1227
$LN1163@stbsp_vspr:
; Line 1354
	mov	r14d, DWORD PTR tlen$1$[rsp]
$done$1227:
	sub	edi, r11d
	lea	eax, DWORD PTR [r14+rdi]
; Line 1355
	mov	rcx, QWORD PTR __$ArrayPad$[rbp-256]
	xor	rcx, rsp
	call	__security_check_cookie
	lea	r11, QWORD PTR [rsp+776]
	movaps	xmm6, XMMWORD PTR [r11-24]
	movaps	xmm7, XMMWORD PTR [r11-40]
	movaps	xmm8, XMMWORD PTR [r11-56]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
$LN1023@stbsp_vspr:
	DD	$LN140@stbsp_vspr
	DD	$LN141@stbsp_vspr
	DD	$LN143@stbsp_vspr
	DD	$LN142@stbsp_vspr
	DD	$LN139@stbsp_vspr
	DD	$LN138@stbsp_vspr
	DD	$LN149@stbsp_vspr
	DD	$LN148@stbsp_vspr
	DD	$flags_done$1228
$LN1022@stbsp_vspr:
	DB	0
	DB	8
	DB	8
	DB	1
	DB	2
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	5
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
$LN1021@stbsp_vspr:
	DD	$LN165@stbsp_vspr
	DD	$LN158@stbsp_vspr
	DD	$LN162@stbsp_vspr
	DD	$LN160@stbsp_vspr
	DD	$LN169@stbsp_vspr
$LN1020@stbsp_vspr:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	2
	DB	4
	DB	3
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	npad	2
$LN1019@stbsp_vspr:
	DD	$LN177@stbsp_vspr
	DD	$LN256@stbsp_vspr
	DD	$LN207@stbsp_vspr
	DD	$LN191@stbsp_vspr
	DD	$LN264@stbsp_vspr
	DD	$LN174@stbsp_vspr
	DD	$LN276@stbsp_vspr
	DD	$LN219@stbsp_vspr
	DD	$LN176@stbsp_vspr
	DD	$LN260@stbsp_vspr
	DD	$LN263@stbsp_vspr
	DD	$LN171@stbsp_vspr
	DD	$LN362@stbsp_vspr
$LN1018@stbsp_vspr:
	DB	0
	DB	1
	DB	12
	DB	12
	DB	2
	DB	12
	DB	3
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	4
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	12
	DB	0
	DB	1
	DB	5
	DB	6
	DB	2
	DB	7
	DB	3
	DB	12
	DB	6
	DB	12
	DB	12
	DB	12
	DB	12
	DB	8
	DB	9
	DB	10
	DB	12
	DB	12
	DB	11
	DB	12
	DB	6
	DB	12
	DB	12
	DB	4
stbsp_vsprintfcb ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_snprintf
_TEXT	SEGMENT
buf$ = 48
count$ = 56
fmt$ = 64
stbsp_snprintf PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1461
$LN4:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 40					; 00000028H
; Line 1464
	lea	r9, QWORD PTR fmt$[rsp+8]
; Line 1466
	call	stbsp_vsnprintf
; Line 1470
	add	rsp, 40					; 00000028H
	ret	0
stbsp_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_sprintf
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
stbsp_sprintf PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1377
$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1380
	lea	rax, QWORD PTR fmt$[rsp+8]
; Line 1381
	mov	r9, rdx
	mov	r8, rcx
	mov	QWORD PTR [rsp+32], rax
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1384
	add	rsp, 56					; 00000038H
	ret	0
stbsp_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_vsnprintf
_TEXT	SEGMENT
c$ = 48
__$ArrayPad$ = 576
buf$ = 624
count$ = 632
fmt$ = 640
va$ = 648
stbsp_vsnprintf PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1431
$LN23:
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 592				; 00000250H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rsi, r9
	mov	r11, r8
	mov	edi, edx
	mov	rbx, rcx
; Line 1434
	test	edx, edx
	jne	SHORT $LN2@stbsp_vsnp
	test	rcx, rcx
	jne	SHORT $LN2@stbsp_vsnp
; Line 1438
	mov	QWORD PTR [rsp+32], r9
	lea	rdx, QWORD PTR c$[rsp]
	mov	r9, r8
	lea	rcx, OFFSET FLAT:stbsp__count_clamp_callback
	xor	eax, eax
	lea	r8, QWORD PTR c$[rsp+16]
	mov	DWORD PTR c$[rsp+12], eax
	call	stbsp_vsprintfcb
; Line 1439
	jmp	$LN21@stbsp_vsnp
$LN2@stbsp_vsnp:
; Line 1396
	xor	eax, eax
; Line 1444
	mov	QWORD PTR c$[rsp], rbx
; Line 1401
	test	edi, edi
	mov	DWORD PTR c$[rsp+12], eax
	mov	r8d, edi
; Line 1445
	mov	ecx, edi
; Line 1401
	cmovns	r8d, eax
; Line 1445
	mov	DWORD PTR c$[rsp+8], ecx
	mov	r10, rbx
; Line 1401
	mov	r9, rbx
	test	r8d, r8d
	je	SHORT $LN11@stbsp_vsnp
; Line 1402
	movsxd	rdx, r8d
	test	rbx, rbx
	je	SHORT $LN8@stbsp_vsnp
	npad	9
$LL9@stbsp_vsnp:
; Line 1409
	movzx	ecx, BYTE PTR [rax]
	mov	BYTE PTR [rax+rbx], cl
	inc	rax
; Line 1410
	cmp	rax, rdx
	jb	SHORT $LL9@stbsp_vsnp
	mov	ecx, DWORD PTR c$[rsp+8]
	mov	r10, QWORD PTR c$[rsp]
$LN8@stbsp_vsnp:
; Line 1412
	lea	r9, QWORD PTR [rdx+r10]
; Line 1413
	sub	ecx, r8d
	mov	QWORD PTR c$[rsp], r9
	mov	edx, ecx
	mov	DWORD PTR c$[rsp+8], ecx
$LN11@stbsp_vsnp:
; Line 1416
	lea	r8, QWORD PTR c$[rsp+16]
	test	edx, edx
	jle	SHORT $LN15@stbsp_vsnp
; Line 1418
	cmp	edx, 512				; 00000200H
	cmovge	r8, r9
$LN15@stbsp_vsnp:
; Line 1448
	mov	r9, r11
	mov	QWORD PTR [rsp+32], rsi
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__clamp_callback
	call	stbsp_vsprintfcb
; Line 1451
	mov	ecx, DWORD PTR c$[rsp]
; Line 1454
	lea	eax, DWORD PTR [rdi-1]
	sub	ecx, ebx
	cmp	ecx, edi
	cmovl	eax, ecx
	cdqe
	mov	BYTE PTR [rax+rbx], 0
$LN21@stbsp_vsnp:
; Line 1458
	mov	eax, DWORD PTR c$[rsp+12]
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 592				; 00000250H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
stbsp_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT stbsp_vsprintf
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
va$ = 80
stbsp_vsprintf PROC					; COMDAT
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1473
$LN4:
	sub	rsp, 56					; 00000038H
; Line 1474
	mov	QWORD PTR [rsp+32], r8
	mov	r9, rdx
	mov	r8, rcx
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1475
	add	rsp, 56					; 00000038H
	ret	0
stbsp_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccclocksecs
_TEXT	SEGMENT
l$ = 48
t$ = 48
ccclocksecs PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 14
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx
; Line 15
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 16
	xorps	xmm0, xmm0
	test	rbx, rbx
	js	SHORT $LN3@ccclocksec
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, QWORD PTR l$[rsp]
	cvtsi2sd xmm0, rbx
	divsd	xmm0, xmm1
; Line 17
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN3@ccclocksec:
; Line 16
	mov	rax, rbx
	xorps	xmm1, xmm1
	cvtsi2sd xmm1, QWORD PTR l$[rsp]
	shr	rax, 1
	and	ebx, 1
	or	rax, rbx
	cvtsi2sd xmm0, rax
	addsd	xmm0, xmm0
	divsd	xmm0, xmm1
; Line 17
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ccclocksecs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccclocktick
_TEXT	SEGMENT
l$ = 48
ccclocktick PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 8
	sub	rsp, 40					; 00000028H
; Line 9
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 10
	mov	rax, QWORD PTR l$[rsp]
; Line 11
	add	rsp, 40					; 00000028H
	ret	0
ccclocktick ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccfilesize
_TEXT	SEGMENT
file$ = 8
ccfilesize PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 26
	xor	edx, edx
	rex_jmp	QWORD PTR __imp_GetFileSize
ccfilesize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccpushfile
_TEXT	SEGMENT
file$ = 64
offset$ = 72
length$ = 80
file_data$ = 88
ccpushfile PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 56
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbp, r9
	mov	edi, r8d
	mov	esi, edx
	mov	rbx, rcx
; Line 21
	cmp	rcx, -1
; Line 56
	je	SHORT $LN10@ccpushfile
; Line 26
	xor	edx, edx
	call	QWORD PTR __imp_GetFileSize
; Line 59
	cmp	eax, esi
	jb	SHORT $LN10@ccpushfile
; Line 60
	xor	esi, esi
	xor	r9d, r9d
	mov	r8d, edi
	mov	QWORD PTR [rsp+32], rsi
	mov	rdx, rbp
	mov	rcx, rbx
	call	QWORD PTR __imp_WriteFile
	test	eax, eax
	cmove	edi, esi
	mov	eax, edi
	jmp	SHORT $LN1@ccpushfile
$LN10@ccpushfile:
	xor	eax, eax
$LN1@ccpushfile:
; Line 62
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ccpushfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccpullfile
_TEXT	SEGMENT
length$ = 64
file$ = 64
offset$ = 72
lplength$ = 80
ccpullfile PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 42
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, r8
	mov	ebx, edx
	mov	rsi, rcx
; Line 21
	cmp	rcx, -1
; Line 42
	je	SHORT $LN14@ccpullfile
; Line 26
	xor	edx, edx
	call	QWORD PTR __imp_GetFileSize
; Line 45
	xor	ebp, ebp
; Line 26
	mov	r9d, eax
; Line 45
	test	rdi, rdi
	je	SHORT $LN8@ccpullfile
	mov	ecx, DWORD PTR [rdi]
	jmp	SHORT $LN9@ccpullfile
$LN8@ccpullfile:
	mov	ecx, ebp
$LN9@ccpullfile:
; Line 46
	lea	eax, DWORD PTR [rcx+rbx]
	mov	DWORD PTR length$[rsp], ecx
	cmp	r9d, eax
	jb	SHORT $LN14@ccpullfile
; Line 47
	test	ecx, ecx
	jne	SHORT $LN4@ccpullfile
	mov	DWORD PTR length$[rsp], r9d
	mov	rcx, r9
$LN4@ccpullfile:
; Line 48
	call	malloc
; Line 50
	mov	r8d, DWORD PTR length$[rsp]
	lea	r9, QWORD PTR length$[rsp]
	test	rdi, rdi
	mov	QWORD PTR [rsp+32], rbp
	mov	rdx, rax
	mov	rcx, rsi
	cmovne	r9, rdi
	mov	rbx, rax
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	cmove	rbx, rbp
	mov	rax, rbx
	jmp	SHORT $LN1@ccpullfile
$LN14@ccpullfile:
	xor	eax, eax
$LN1@ccpullfile:
; Line 52
	mov	rbx, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ccpullfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccopenfile
_TEXT	SEGMENT
name$ = 80
ccopenfile PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 36
	push	rbx
	sub	rsp, 64					; 00000040H
	xor	ebx, ebx
	xor	r9d, r9d
	mov	QWORD PTR [rsp+48], rbx
	mov	edx, -1073741824			; c0000000H
	mov	DWORD PTR [rsp+40], ebx
	mov	DWORD PTR [rsp+32], 4
	lea	r8d, QWORD PTR [rbx+3]
	call	QWORD PTR __imp_CreateFileA
; Line 21
	cmp	rax, -1
; Line 37
	cmovne	rbx, rax
	mov	rax, rbx
; Line 38
	add	rsp, 64					; 00000040H
	pop	rbx
	ret	0
ccopenfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccclosefile
_TEXT	SEGMENT
file$ = 8
ccclosefile PROC					; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 31
	rex_jmp	QWORD PTR __imp_CloseHandle
ccclosefile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ccrealfile
_TEXT	SEGMENT
file$ = 8
ccrealfile PROC						; COMDAT
; File W:\cpp\void\ktt-c\ccfio.c
; Line 21
	xor	eax, eax
	cmp	rcx, -1
	setne	al
; Line 22
	ret	0
ccrealfile ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT cctrace_
_TEXT	SEGMENT
guid$ = 112
file$ = 120
line$ = 128
func$ = 136
tag$ = 144
fmt$ = 152
cctrace_ PROC						; COMDAT
; File W:\cpp\void\ktt-c\cclog.h
; Line 66
	mov	rax, rsp
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 64					; 00000040H
	mov	rdi, r9
; Line 28
	lea	r14, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
; Line 66
	mov	esi, r8d
; Line 70
	lea	r9, QWORD PTR [rax+56]
; Line 28
	mov	r8, QWORD PTR [rax+48]
; Line 66
	mov	rbp, rdx
; Line 28
	mov	rcx, r14
	mov	edx, 255				; 000000ffH
	call	stbsp_vsnprintf
; Line 75
	mov	r9, QWORD PTR tag$[rsp]
	lea	r8, OFFSET FLAT:??_C@_0BE@GMJDDHPH@?$CFs?3?5?$CFs?$FL?$CFi?$FN?5?$CFs?$CI?$CJ?5?$CFs?6@
	inc	eax
	mov	QWORD PTR [rsp+56], r14
	movsxd	rbx, eax
	mov	edx, 4095				; 00000fffH
	mov	QWORD PTR [rsp+48], rdi
	add	rbx, r14
	mov	rcx, rbx
	mov	DWORD PTR [rsp+40], esi
	sub	edx, eax
	mov	QWORD PTR [rsp+32], rbp
	call	ccformatex
; Line 13
	mov	rcx, rbx
	call	printf
; Line 79
	add	rsp, 64					; 00000040H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
cctrace_ ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rcx
; Line 959
	lea	rsi, QWORD PTR _Format$[rsp+8]
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	xor	r9d, r9d
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	mov	rdx, rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 963
	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 645
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END

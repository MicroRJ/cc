; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG49204 DB	'expected ''}''', 00H
	ORG $+3
$SG49205 DB	'err', 00H
$SG49212 DB	'err', 00H
$SG49206 DB	'ccread_statement', 00H
	ORG $+3
$SG49219 DB	'err', 00H
$SG49207 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49224 DB	'err', 00H
$SG49211 DB	'expected '';''', 00H
	ORG $+3
$SG49213 DB	'ccread_statement', 00H
	ORG $+3
$SG49231 DB	'err', 00H
$SG49214 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49236 DB	'err', 00H
$SG49218 DB	'expected expression', 00H
$SG49241 DB	'err', 00H
$SG49220 DB	'ccread_statement', 00H
	ORG $+3
$SG49247 DB	'err', 00H
$SG49221 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49254 DB	'err', 00H
$SG49223 DB	'expected '';''', 00H
	ORG $+3
$SG49225 DB	'ccread_statement', 00H
	ORG $+3
$SG49259 DB	'err', 00H
$SG49226 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49268 DB	'err', 00H
$SG49230 DB	'expected ''(''', 00H
	ORG $+3
$SG49232 DB	'ccread_statement', 00H
	ORG $+3
$SG49273 DB	'err', 00H
$SG49233 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49278 DB	'err', 00H
$SG49235 DB	'expected '')''', 00H
	ORG $+3
$SG49237 DB	'ccread_statement', 00H
	ORG $+3
$SG49284 DB	'err', 00H
$SG49238 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49290 DB	'err', 00H
$SG49240 DB	'expected expression', 00H
$SG49301 DB	'err', 00H
$SG49242 DB	'ccread_statement', 00H
	ORG $+3
$SG49305 DB	'err', 00H
$SG49243 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49328 DB	'err', 00H
$SG49246 DB	'expected statement', 00H
	ORG $+1
$SG49356 DB	'err', 00H
$SG49248 DB	'ccread_statement', 00H
	ORG $+3
$SG49361 DB	'err', 00H
$SG49249 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49366 DB	'err', 00H
$SG49253 DB	'missing goto label identifier', 00H
	ORG $+2
$SG49255 DB	'ccread_statement', 00H
	ORG $+3
$SG49525 DB	'error', 00H
	ORG $+2
$SG49591 DB	'err', 00H
$SG49256 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49670 DB	'>', 00H
	ORG $+2
$SG49258 DB	'expected '';''', 00H
	ORG $+3
$SG49260 DB	'ccread_statement', 00H
	ORG $+3
$SG49555 DB	'error', 00H
	ORG $+2
$SG49672 DB	'>=', 00H
	ORG $+1
$SG49261 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49674 DB	'<', 00H
	ORG $+2
$SG49267 DB	'expected ''(''', 00H
	ORG $+3
$SG49269 DB	'ccread_statement', 00H
	ORG $+3
$SG49676 DB	'<=', 00H
	ORG $+1
$SG49270 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49678 DB	'*', 00H
	ORG $+2
$SG49272 DB	'expected '')''', 00H
	ORG $+3
$SG49274 DB	'ccread_statement', 00H
	ORG $+3
$SG49680 DB	'/', 00H
	ORG $+2
$SG49275 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49682 DB	'-', 00H
	ORG $+2
$SG49277 DB	'expected expression', 00H
$SG49684 DB	'+', 00H
	ORG $+2
$SG49279 DB	'ccread_statement', 00H
	ORG $+3
$SG49686 DB	'error', 00H
	ORG $+2
pf	DB	069H
	DB	075H
	DB	063H
	DB	066H
$SG49280 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
fn	DB	078H
	DB	079H
	DB	07aH
	DB	077H
$SG49283 DB	'expected statement', 00H
	ORG $+1
$SG49902 DB	'i', 00H
	ORG $+2
$SG49285 DB	'ccread_statement', 00H
	ORG $+3
$SG49764 DB	'error', 00H
	ORG $+2
$SG49903 DB	'lli', 00H
$SG49286 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49904 DB	'c', 00H
	ORG $+2
$SG49289 DB	'expected statement', 00H
	ORG $+1
$SG49905 DB	'f', 00H
	ORG $+2
$SG49291 DB	'ccread_statement', 00H
	ORG $+3
$SG49776 DB	'error', 00H
	ORG $+2
$SG49920 DB	'x%i', 00H
$SG49292 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49930 DB	'%s', 00H
	ORG $+1
$SG49300 DB	'invalid statement, missing '':'' for label statement?', 00H
$SG49936 DB	'*', 00H
	ORG $+2
$SG49302 DB	'ccread_statement', 00H
	ORG $+3
$SG49834 DB	'arg-0', 00H
	ORG $+2
$SG49938 DB	'&', 00H
	ORG $+2
$SG49303 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49940 DB	'[]', 00H
	ORG $+1
$SG49304 DB	'invalid statement', 00H
	ORG $+2
$SG49953 DB	'%s ', 00H
$SG49306 DB	'ccread_statement', 00H
	ORG $+3
$SG49960 DB	'%c', 00H
	ORG $+1
$SG49307 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49986 DB	'(', 00H
	ORG $+2
$SG49327 DB	'expected ''}''', 00H
	ORG $+3
$SG49329 DB	'ccread_block', 00H
	ORG $+3
$SG49330 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49988 DB	',', 00H
	ORG $+2
$SG49355 DB	'expected '';''', 00H
	ORG $+3
$SG49357 DB	'ccread_external_declaration', 00H
$SG49989 DB	')', 00H
	ORG $+2
$SG49358 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49998 DB	'%sm', 00H
$SG49360 DB	'expected '';''', 00H
	ORG $+3
$SG49362 DB	'ccread_external_declaration', 00H
$SG49999 DB	0dH, 0aH, 00H
	ORG $+1
$SG49363 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG50000 DB	'{ ', 00H
	ORG $+1
$SG49365 DB	'invalid external declaration', 00H
	ORG $+3
$SG49367 DB	'ccread_external_declaration', 00H
$SG50001 DB	';', 00H
	ORG $+2
$SG49368 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG50004 DB	'}', 0dH, 0aH, 00H
$SG49379 DB	'ccemit_constant', 00H
$SG49380 DB	'W:\cpp\void\ktt-c\ccemit.c', 00H
	ORG $+1
$SG50017 DB	',', 00H
	ORG $+2
$SG49432 DB	'internal', 00H
	ORG $+3
$SG50018 DB	')', 0dH, 0aH, 00H
$SG49447 DB	'internal', 00H
	ORG $+3
$SG49554 DB	'main', 00H
	ORG $+7
$SG49592 DB	'ccstack_yield', 00H
	ORG $+2
$SG49611 DB	'constant-value', 00H
	ORG $+1
$SG49632 DB	'ccstack_local_alloc', 00H
	ORG $+4
$SG49590 DB	'value kind is invalid, did you register this value and n'
	DB	'ot set its contents?', 00H
	ORG $+3
$SG49593 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG50019 DB	'{ ', 00H
	ORG $+1
$SG49631 DB	'local_alloc', 00H
$SG50020 DB	';', 00H
	ORG $+2
$SG49633 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG50023 DB	'}', 0dH, 0aH, 00H
$SG49687 DB	'internal-error', 00H
	ORG $+1
$SG49753 DB	'no-return value, error', 00H
	ORG $+1
$SG49754 DB	'ccexec_edict', 00H
	ORG $+3
$SG49755 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG50034 DB	0dH, 0aH, 00H
	ORG $+1
$SG49758 DB	'deprecated', 00H
	ORG $+1
$SG50035 DB	'{', 00H
	ORG $+2
$SG49808 DB	'ccexec_invoke', 00H
	ORG $+2
$SG49809 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG50037 DB	';', 00H
	ORG $+2
$SG49835 DB	'fib c:%i %f(s) - cc:%i %f(s)', 0aH, 00H
	ORG $+2
$SG49876 DB	'gen_type', 00H
	ORG $+3
$SG50038 DB	0dH, 0aH, 00H
	ORG $+1
$SG49877 DB	'W:\cpp\void\ktt-c\ccemit-c.c', 00H
	ORG $+3
$SG49914 DB	'%c%i', 00H
	ORG $+3
$SG49917 DB	'%c%i_%i', 00H
$SG49981 DB	'static ', 00H
$SG49984 DB	'void', 00H
	ORG $+3
$SG49985 DB	0dH, 0aH, '%s', 00H
	ORG $+3
$SG50002 DB	0dH, 0aH, '  r.%c=%c;', 00H
	ORG $+3
$SG50003 DB	0dH, 0aH, '  return r;', 0dH, 0aH, 00H
$SG50014 DB	'static %s operator %s (', 00H
$SG50021 DB	0dH, 0aH, '  r.%c=a.%c%cb.%c;', 00H
	ORG $+3
$SG50022 DB	0dH, 0aH, '  return r;', 0dH, 0aH, 00H
$SG50033 DB	'typedef struct ', 00H
$SG50036 DB	0dH, 0aH, '  ', 00H
	ORG $+3
$SG50039 DB	'} ', 00H
	ORG $+1
$SG50040 DB	';', 0dH, 0aH, 00H
$SG50041 DB	'*', 00H
	ORG $+2
$SG50042 DB	'*=', 00H
	ORG $+1
$SG50043 DB	'/', 00H
	ORG $+2
$SG50044 DB	'/=', 00H
	ORG $+1
$SG50045 DB	'+', 00H
	ORG $+2
$SG50046 DB	'+=', 00H
	ORG $+1
$SG50047 DB	'-', 00H
	ORG $+2
$SG50048 DB	'-=', 00H
	ORG $+1
$SG50082 DB	'log test 1', 00H
	ORG $+1
$SG50083 DB	'log', 00H
$SG50084 DB	'main', 00H
	ORG $+3
$SG50085 DB	'test.c', 00H
	ORG $+1
$SG50086 DB	'log test 2', 00H
	ORG $+1
$SG50087 DB	'log', 00H
$SG50088 DB	'main', 00H
	ORG $+3
$SG50089 DB	'test.c', 00H
	ORG $+1
$SG50090 DB	'log test 3', 00H
	ORG $+1
$SG50091 DB	'log', 00H
$SG50092 DB	'main', 00H
	ORG $+3
$SG50093 DB	'test.c', 00H
	ORG $+1
$SG50094 DB	'test.svm.c', 00H
	ORG $+5
$SG50095 DB	'#define f64 double', 0dH, 0aH, '#define f32 float', 0dH, 0aH
	DB	'#ifdef _MSC_VER', 0dH, 0aH, '# define i64 signed   __int64', 0dH
	DB	0aH, '# define u64 unsigned __int64', 0dH, 0aH, '# define i32 '
	DB	'signed   __int32', 0dH, 0aH, '# define u32 unsigned __int32', 0dH
	DB	0aH, '# define i16 signed   __int16', 0dH, 0aH, '# define u16 '
	DB	'unsigned __int16', 0dH, 0aH, '# define i8  signed   __int8', 0dH
	DB	0aH, '# define u8  unsigned __int8', 0dH, 0aH, '#else', 0dH, 0aH
	DB	'# define i64 signed   long long', 0dH, 0aH, '# define u64 uns'
	DB	'igned long long', 0dH, 0aH, '# define i32 signed   int', 0dH, 0aH
	DB	'# define u32 unsigned int', 0dH, 0aH, '# define i16 signed   '
	DB	'short', 0dH, 0aH, '# define u16 unsigned short', 0dH, 0aH, '#'
	DB	' define i8  signed   char', 0dH, 0aH, '# define u8  unsigned '
	DB	'char', 0dH, 0aH, '#endif', 0dH, 0aH, '#define c8  char', 0dH, 0aH
	DB	'#define c16 wchar_t', 0dH, 0aH, 00H
	ORG $+1
$SG50096 DB	'#define f64 double', 0dH, 0aH, '#define f32 float', 0dH, 0aH
	DB	'#ifdef _MSC_VER', 0dH, 0aH, '# define i64 signed   __int64', 0dH
	DB	0aH, '# define u64 unsigned __int64', 0dH, 0aH, '# define i32 '
	DB	'signed   __int32', 0dH, 0aH, '# define u32 unsigned __int32', 0dH
	DB	0aH, '# define i16 signed   __int16', 0dH, 0aH, '# define u16 '
	DB	'unsigned __int16', 0dH, 0aH, '# define i8  signed   __int8', 0dH
	DB	0aH, '# define u8  unsigned __int8', 0dH, 0aH, '#else', 0dH, 0aH
	DB	'# define i64 signed   long long', 0dH, 0aH, '# define u64 uns'
	DB	'igned long long', 0dH, 0aH, '# define i32 signed   int', 0dH, 0aH
	DB	'# define u32 unsigned int', 0dH, 0aH, '# define i16 signed   '
	DB	'short', 0dH, 0aH, '# define u16 unsigned short', 0dH, 0aH, '#'
	DB	' define i8  signed   char', 0dH, 0aH, '# define u8  unsigned '
	DB	'char', 0dH, 0aH, '#endif', 0dH, 0aH, '#define c8  char', 0dH, 0aH
	DB	'#define c16 wchar_t', 0dH, 0aH, 00H
	ORG $+1
$SG50097 DB	'#define f64 double', 0dH, 0aH, '#define f32 float', 0dH, 0aH
	DB	'#ifdef _MSC_VER', 0dH, 0aH, '# define i64 signed   __int64', 0dH
	DB	0aH, '# define u64 unsigned __int64', 0dH, 0aH, '# define i32 '
	DB	'signed   __int32', 0dH, 0aH, '# define u32 unsigned __int32', 0dH
	DB	0aH, '# define i16 signed   __int16', 0dH, 0aH, '# define u16 '
	DB	'unsigned __int16', 0dH, 0aH, '# define i8  signed   __int8', 0dH
	DB	0aH, '# define u8  unsigned __int8', 0dH, 0aH, '#else', 0dH, 0aH
	DB	'# define i64 signed   long long', 0dH, 0aH, '# define u64 uns'
	DB	'igned long long', 0dH, 0aH, '# define i32 signed   int', 0dH, 0aH
	DB	'# define u32 unsigned int', 0dH, 0aH, '# define i16 signed   '
	DB	'short', 0dH, 0aH, '# define u16 unsigned short', 0dH, 0aH, '#'
	DB	' define i8  signed   char', 0dH, 0aH, '# define u8  unsigned '
	DB	'char', 0dH, 0aH, '#endif', 0dH, 0aH, '#define c8  char', 0dH, 0aH
	DB	'#define c16 wchar_t', 0dH, 0aH, 00H
	ORG $+1
$SG50098 DB	'gen.ktt.c', 00H
	ORG $+2
$SG45592 DB	'null', 00H
	ORG $+3
$SG45674 DB	'_KMGT', 00H
	ORG $+2
$SG45675 DB	'_kMGT', 00H
	ORG $+2
$SG46207 DB	'NaN', 00H
$SG46208 DB	'Inf', 00H
	ORG $+4
stbsp__bot DQ	03ff0000000000000r		; 1
	DQ	04024000000000000r		; 10
	DQ	04059000000000000r		; 100
	DQ	0408f400000000000r		; 1000
	DQ	040c3880000000000r		; 10000
	DQ	040f86a0000000000r		; 100000
	DQ	0412e848000000000r		; 1e+06
	DQ	0416312d000000000r		; 1e+07
	DQ	04197d78400000000r		; 1e+08
	DQ	041cdcd6500000000r		; 1e+09
	DQ	04202a05f20000000r		; 1e+10
	DQ	042374876e8000000r		; 1e+11
	DQ	0426d1a94a2000000r		; 1e+12
	DQ	042a2309ce5400000r		; 1e+13
	DQ	042d6bcc41e900000r		; 1e+14
	DQ	0430c6bf526340000r		; 1e+15
	DQ	04341c37937e08000r		; 1e+16
	DQ	04376345785d8a000r		; 1e+17
	DQ	043abc16d674ec800r		; 1e+18
	DQ	043e158e460913d00r		; 1e+19
	DQ	04415af1d78b58c40r		; 1e+20
	DQ	0444b1ae4d6e2ef50r		; 1e+21
	DQ	04480f0cf064dd592r		; 1e+22
$SG46240 DB	0dH, 0aH, 00H
	ORG $+5
stbsp__negbot DQ 03fb999999999999ar		; 0.1
	DQ	03f847ae147ae147br		; 0.01
	DQ	03f50624dd2f1a9fcr		; 0.001
	DQ	03f1a36e2eb1c432dr		; 0.0001
	DQ	03ee4f8b588e368f1r		; 1e-05
	DQ	03eb0c6f7a0b5ed8dr		; 1e-06
	DQ	03e7ad7f29abcaf48r		; 1e-07
	DQ	03e45798ee2308c3ar		; 1e-08
	DQ	03e112e0be826d695r		; 1e-09
	DQ	03ddb7cdfd9d7bdbbr		; 1e-10
	DQ	03da5fd7fe1796495r		; 1e-11
	DQ	03d719799812dea11r		; 1e-12
	DQ	03d3c25c268497682r		; 1e-13
	DQ	03d06849b86a12b9br		; 1e-14
	DQ	03cd203af9ee75616r		; 1e-15
	DQ	03c9cd2b297d889bcr		; 1e-16
	DQ	03c670ef54646d497r		; 1e-17
	DQ	03c32725dd1d243acr		; 1e-18
	DQ	03bfd83c94fb6d2acr		; 1e-19
	DQ	03bc79ca10c924223r		; 1e-20
	DQ	03b92e3b40a0e9b4fr		; 1e-21
	DQ	03b5e392010175ee6r		; 1e-22
stbsp__negboterr DQ 0bc5999999999999ar		; -5.55112e-18
	DQ	0bc0eb851eb851eb8r		; -2.08167e-19
	DQ	0bbd89374bc6a7efar		; -2.08167e-20
	DQ	0bbb6a161e4f765fer		; -4.79217e-21
	DQ	0bb8ee78183f91e64r		; -8.18031e-22
	DQ	03b4b5a63f9a49c2cr		; 4.52519e-23
	DQ	03b15e1e99483b023r		; 4.52519e-24
	DQ	0bad03023df2d4c94r		; -2.09226e-25
	DQ	0bab34674bfabb83br		; -6.22816e-26
	DQ	0ba720a5465df8d2cr		; -3.64322e-27
	DQ	03a47f7bc7b4d28aar		; 6.0503e-28
	DQ	039f97f27f0f6e886r		; 2.01134e-29
	DQ	0b9cecd79a5a0df95r		; -3.03737e-30
	DQ	0394ea70909833de7r		; 1.18069e-32
	DQ	0b97937831647f5a0r		; -7.77054e-32
	DQ	03925b4c2ebe68799r		; 2.09022e-33
	DQ	0b90db7b2080a3029r		; -7.15424e-34
	DQ	0b8d7c628066e8ceer		; -7.15424e-35
	DQ	0388a52b31e9e3d07r		; 2.47541e-36
	DQ	038675447a5d8e536r		; 5.48467e-37
	DQ	0383f769fb7e0b75er		; 9.24625e-38
	DQ	0b7fa7566d9cba769r		; -4.85968e-39
stbsp__top DQ	044b52d02c7e14af6r		; 1e+23
	DQ	0497c06a5ec5433c6r		; 1e+46
	DQ	04e428bc8abe49f64r		; 1e+69
	DQ	053088ba3bf284e24r		; 1e+92
	DQ	057d03e29f5c2b18cr		; 1e+115
	DQ	05c957f48bb41db7cr		; 1e+138
	DQ	0615c73892ecbfbf4r		; 1e+161
	DQ	06622d3d6f88f0b3dr		; 1e+184
	DQ	06ae8eb0138858d0ar		; 1e+207
	DQ	06fb07d457124123dr		; 1e+230
	DQ	07475d2ce55747a18r		; 1e+253
	DQ	0793ce2137f743382r		; 1e+276
	DQ	07e031cfd3999f7b0r		; 1e+299
$SG46294 DB	'%s: %s[%i] %s() %s', 0aH, 00H
	ORG $+4
stbsp__negtop DQ 03b282db34012b251r		; 1e-23
	DQ	0366244ce242c5561r		; 1e-46
	DQ	0319b9b6364f30304r		; 1e-69
	DQ	02cd4dbf7b3f71cb7r		; 1e-92
	DQ	0280f8587e7083e30r		; 1e-115
	DQ	02347d12a4670c123r		; 1e-138
	DQ	01e81fee341fc585dr		; 1e-161
	DQ	019bb31bb5dc320d2r		; 1e-184
	DQ	014f48c22ca71a1bdr		; 1e-207
	DQ	0102f0ce4839198dbr		; 1e-230
	DQ	00b677603725064a8r		; 1e-253
	DQ	006a1ba03f5b21000r		; 1e-276
	DQ	001dac9a7b3b7302fr		; 1e-299
$SG46334 DB	'none', 00H
	ORG $+3
stbsp__toperr DQ 04160000000000000r		; 8.38861e+06
	DQ	045ebb542c80deb40r		; 6.86018e+28
	DQ	0cae83b80b9aab60ar		; -7.25314e+52
	DQ	0cfa32e22d17a166cr		; -4.33773e+75
	DQ	0d4523606902e180er		; -1.55594e+98
	DQ	0d9296fb782462e87r		; -3.28416e+121
	DQ	0ddf358952c0bd011r		; -3.77459e+144
	DQ	0e2a78c1376a34b6cr		; -1.73567e+167
	DQ	0e7817569fc243adfr		; -3.88936e+190
	DQ	0ec5d9365a897aaa6r		; -9.95664e+213
	DQ	07119050c256123a0r		; 6.36413e+236
	DQ	0f5db1799d76cc7a6r		; -5.20691e+259
	DQ	0faa213fe39571a38r		; -5.25048e+282
$SG46336 DB	'already in table', 00H
	ORG $+7
stbsp__negtoperr DQ 037c13badb829e079r		; 3.95653e-40
	DQ	0b2ee46a98d3d9f64r		; -2.2999e-63
	DQ	02e3227c7218a2b65r		; 3.65062e-86
	DQ	02951d96999aa01e9r		; 1.18752e-109
	DQ	0a4acc2229efc3962r		; -5.06449e-132
	DQ	09fecd04a2263407ar		; -6.71568e-155
	DQ	09b123b80f187a157r		; -2.81208e-178
	DQ	0965c4e22914ed912r		; -5.77789e-201
	DQ	0119bc296cdf42f82r		; 7.49971e-224
	DQ	08cc9f9e7f4e16fe1r		; -4.64397e-247
	DQ	0880aeb0a72a8902ar		; -6.36911e-270
	DQ	0834e228e12c13408r		; -9.43681e-293
	DQ	00000000000fa1259r		; 8.09709e-317
$SG46338 DB	'invalid user argument', 00H
	ORG $+2
stbsp__powten DQ 0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000064H
	DQ	00000000000003e8H
	DQ	0000000000002710H
	DQ	00000000000186a0H
	DQ	00000000000f4240H
	DQ	0000000000989680H
	DQ	0000000005f5e100H
	DQ	000000003b9aca00H
	DQ	00000002540be400H
	DQ	000000174876e800H
	DQ	000000e8d4a51000H
	DQ	000009184e72a000H
	DQ	00005af3107a4000H
	DQ	00038d7ea4c68000H
	DQ	002386f26fc10000H
	DQ	016345785d8a0000H
	DQ	0de0b6b3a7640000H
	DQ	8ac7230489e80000H
$SG46335 DB	'not in table', 00H
	ORG $+3
$SG46337 DB	'out of memory', 00H
	ORG $+2
$SG46370 DB	'ccdlb_arradd_', 00H
	ORG $+2
$SG46371 DB	'W:\cpp\void\ktt-c\ccdlb.h', 00H
	ORG $+2
$SG46947 DB	'kARRAY', 00H
	ORG $+1
$SG47306 DB	'err', 00H
$SG46444 DB	'ccdlb_tblcat', 00H
	ORG $+3
$SG46445 DB	'W:\cpp\void\ktt-c\ccdlb.h', 00H
	ORG $+2
$SG46591 DB	'%c%i', 00H
	ORG $+3
$SG46592 DB	'%c%i', 00H
	ORG $+3
$SG46593 DB	'%c%i', 00H
	ORG $+3
$SG46594 DB	'%c%i', 00H
	ORG $+3
$SG46595 DB	'%c%i', 00H
	ORG $+3
$SG46596 DB	'%c%i', 00H
	ORG $+3
$SG46597 DB	'%c%i', 00H
	ORG $+3
$SG46598 DB	'%c%i', 00H
	ORG $+3
$SG46945 DB	'kENUM', 00H
	ORG $+2
$SG46951 DB	'kFLOAT', 00H
	ORG $+1
$SG47327 DB	'err', 00H
$SG46639 DB	'ccpullfile', 00H
	ORG $+1
$SG47349 DB	'err', 00H
$SG46640 DB	'W:\cpp\void\ktt-c\ccfio.c', 00H
	ORG $+2
$SG46953 DB	'kBLOCK', 00H
	ORG $+1
$SG47360 DB	'err', 00H
$SG46943 DB	'kTYPENAME', 00H
	ORG $+2
$SG46954 DB	'kLABEL', 00H
	ORG $+1
$SG47374 DB	'err', 00H
$SG46944 DB	'kSTRUCT', 00H
$SG46946 DB	'kFUNC', 00H
	ORG $+2
$SG46948 DB	'kPOINTER', 00H
	ORG $+3
$SG46956 DB	'kGOTO', 00H
	ORG $+2
$SG46957 DB	'kWHILE', 00H
	ORG $+1
$SG47438 DB	'err', 00H
$SG46949 DB	'kIDENTIFIER', 00H
$SG47442 DB	'err', 00H
$SG46950 DB	'kINTEGER', 00H
	ORG $+3
$SG46959 DB	'kDECL', 00H
	ORG $+2
$SG46962 DB	'kUNARY', 00H
	ORG $+1
$SG47448 DB	'err', 00H
$SG46952 DB	'kSTRING', 00H
$SG46955 DB	'kRETURN', 00H
$SG46958 DB	'kDECLNAME', 00H
	ORG $+2
$SG46963 DB	'kGROUP', 00H
	ORG $+1
$SG48115 DB	'err', 00H
$SG46960 DB	'kTERNARY', 00H
	ORG $+3
$SG46964 DB	'kCALL', 00H
	ORG $+2
$SG46965 DB	'kINDEX', 00H
	ORG $+1
$SG48199 DB	'int', 00H
$SG46961 DB	'kBINARY', 00H
$SG46966 DB	'kTUNIT', 00H
	ORG $+1
$SG46967 DB	'designator', 00H
	ORG $+1
$SG48215 DB	'if', 00H
	ORG $+1
$SG46968 DB	'designation', 00H
$SG48220 DB	'for', 00H
$SG47129 DB	'cctree_del', 00H
	ORG $+1
$SG48222 DB	'do', 00H
	ORG $+1
$SG47130 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG48628 DB	'err', 00H
$SG47139 DB	'cctree_new', 00H
	ORG $+1
$SG48645 DB	'err', 00H
$SG47140 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG48652 DB	'err', 00H
$SG47305 DB	'''%s[0x%x]'': uncoupled tree', 00H
	ORG $+1
$SG48696 DB	'err', 00H
$SG47307 DB	'cctree_resolve_symbol', 00H
	ORG $+2
$SG47308 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG48815 DB	'err', 00H
$SG47326 DB	'''%s[0x%x]'': invalid mingling tree, expected CALL or ID'
	DB	'ENTIFIER', 00H
	ORG $+1
$SG47328 DB	'cctree_mingle', 00H
	ORG $+2
$SG47329 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG48896 DB	'err', 00H
$SG47348 DB	'%s: identifier not found', 00H
	ORG $+3
$SG47413 DB	'error', 00H
	ORG $+2
$SG47493 DB	'INVOKE', 00H
	ORG $+1
$SG48901 DB	'war', 00H
$SG47350 DB	'cctree_solve_call', 00H
	ORG $+2
$SG47494 DB	'RETURN', 00H
	ORG $+1
$SG48906 DB	'war', 00H
$SG47351 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG48912 DB	'err', 00H
$SG47359 DB	'''%s'': undeclared lvalue identifier', 00H
	ORG $+1
$SG48931 DB	'err', 00H
$SG47361 DB	'cctree_solve_lvalue', 00H
$SG48961 DB	'err', 00H
$SG47362 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG48975 DB	'err', 00H
$SG47364 DB	'internal', 00H
	ORG $+3
$SG47483 DB	'LOCAL', 00H
	ORG $+2
$SG47895 DB	'$decls', 00H
	ORG $+1
$SG49016 DB	'err', 00H
$SG47373 DB	'''%s'': undeclared rvalue identifier', 00H
	ORG $+1
$SG49030 DB	'err', 00H
$SG47375 DB	'cctree_solve_rvalue', 00H
$SG49049 DB	'err', 00H
$SG47376 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG49054 DB	'err', 00H
$SG47380 DB	'internal', 00H
	ORG $+3
$SG47484 DB	'PARAM', 00H
	ORG $+2
$SG47896 DB	'$enter', 00H
	ORG $+1
$SG49059 DB	'err', 00H
$SG47437 DB	'%s: already has a body', 00H
	ORG $+1
$SG47439 DB	'cctree_solve_decl_name', 00H
	ORG $+1
$SG47440 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG49145 DB	'err', 00H
$SG47441 DB	'''%s'': local function defintions are illegal', 00H
	ORG $+4
$SG47443 DB	'cctree_solve_decl_name', 00H
	ORG $+1
$SG47444 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+5
$SG47447 DB	'''%s'': variable redefinition', 00H
	ORG $+4
$SG47449 DB	'cctree_solve_decl_name', 00H
	ORG $+1
$SG47450 DB	'W:\cpp\void\ktt-c\cctree.h', 00H
	ORG $+1
$SG47485 DB	'STORE', 00H
	ORG $+2
$SG47486 DB	'FETCH', 00H
	ORG $+2
$SG47487 DB	'ARITH', 00H
	ORG $+2
$SG47488 DB	'JUMP', 00H
	ORG $+3
$SG47489 DB	'JUMPT', 00H
	ORG $+2
$SG47490 DB	'JUMPF', 00H
	ORG $+6
$SG47491 DB	'TERNARY', 00H
$SG47492 DB	'ENTER', 00H
	ORG $+2
$SG47651 DB	'ccedict_local', 00H
	ORG $+2
$SG47652 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47659 DB	'ccedict_param', 00H
	ORG $+2
$SG47660 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47668 DB	'ccedict_store', 00H
	ORG $+2
$SG47669 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47676 DB	'ccedict_fetch', 00H
	ORG $+2
$SG47677 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47686 DB	'ccedict_arith', 00H
	ORG $+2
$SG47687 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47694 DB	'ccedict_enter', 00H
	ORG $+2
$SG47695 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47703 DB	'ccedict_jump', 00H
	ORG $+3
$SG47704 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47713 DB	'ccedict_tjump', 00H
	ORG $+2
$SG47714 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47723 DB	'ccedict_fjump', 00H
	ORG $+2
$SG47724 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47732 DB	'ccedict_call', 00H
	ORG $+3
$SG47733 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47740 DB	'ccedict_return', 00H
	ORG $+1
$SG47741 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47750 DB	'ccedict_ternary', 00H
$SG47751 DB	'W:\cpp\void\ktt-c\ccedict.h', 00H
	ORG $+4
$SG47848 DB	'ccvalue', 00H
$SG47849 DB	'W:\cpp\void\ktt-c\ccemit.h', 00H
	ORG $+5
$SG47856 DB	'ccblock', 00H
$SG47857 DB	'W:\cpp\void\ktt-c\ccemit.h', 00H
	ORG $+5
$SG47864 DB	'ccprocd', 00H
$SG47865 DB	'W:\cpp\void\ktt-c\ccemit.h', 00H
	ORG $+1
$SG47897 DB	'$leave', 00H
	ORG $+5
$SG47906 DB	'ccblock_add', 00H
	ORG $+4
$SG47907 DB	'W:\cpp\void\ktt-c\ccemit.h', 00H
	ORG $+5
$SG48097 DB	'cclex_hash', 00H
	ORG $+5
$SG48098 DB	'W:\cpp\void\ktt-c\cclex.c', 00H
	ORG $+6
$SG48114 DB	'invalid key, already in hash table', 00H
	ORG $+5
$SG48116 DB	'cclex_hashonly', 00H
	ORG $+1
$SG48117 DB	'W:\cpp\void\ktt-c\cclex.c', 00H
	ORG $+2
$SG48174 DB	'__asm', 00H
	ORG $+6
$SG48175 DB	'__based', 00H
$SG48176 DB	'__cdecl', 00H
$SG48177 DB	'__clrcall', 00H
	ORG $+6
$SG48178 DB	'__fastcall', 00H
	ORG $+5
$SG48179 DB	'__inline', 00H
	ORG $+7
$SG48180 DB	'__stdcall', 00H
	ORG $+6
$SG48181 DB	'__thiscall', 00H
	ORG $+5
$SG48182 DB	'__vectorcal', 00H
	ORG $+4
$SG48183 DB	'_Alignof', 00H
	ORG $+7
$SG48184 DB	'_Alignas', 00H
	ORG $+3
$SG48185 DB	'const', 00H
	ORG $+6
$SG48186 DB	'restrict', 00H
	ORG $+7
$SG48187 DB	'volatile', 00H
	ORG $+3
$SG48188 DB	'inline', 00H
	ORG $+5
$SG48189 DB	'_Noreturn', 00H
	ORG $+2
$SG48190 DB	'signed', 00H
	ORG $+5
$SG48191 DB	'unsigned', 00H
	ORG $+3
$SG48192 DB	'__int8', 00H
	ORG $+5
$SG48193 DB	'__int16', 00H
$SG48194 DB	'__int32', 00H
$SG48195 DB	'__int64', 00H
$SG48196 DB	'double', 00H
	ORG $+1
$SG48197 DB	'float', 00H
	ORG $+2
$SG48198 DB	'long', 00H
	ORG $+3
$SG48200 DB	'short', 00H
	ORG $+2
$SG48201 DB	'char', 00H
	ORG $+3
$SG48202 DB	'void', 00H
	ORG $+3
$SG48203 DB	'_Bool', 00H
	ORG $+2
$SG48204 DB	'_Complex', 00H
	ORG $+7
$SG48205 DB	'_Atomic', 00H
$SG48206 DB	'enum', 00H
	ORG $+3
$SG48207 DB	'struct', 00H
	ORG $+1
$SG48208 DB	'typedef', 00H
$SG48209 DB	'auto', 00H
	ORG $+3
$SG48210 DB	'extern', 00H
	ORG $+1
$SG48211 DB	'register', 00H
	ORG $+3
$SG48212 DB	'static', 00H
	ORG $+5
$SG48213 DB	'_Thread_local', 00H
	ORG $+2
$SG48214 DB	'__declspec', 00H
	ORG $+1
$SG48216 DB	'switch', 00H
	ORG $+1
$SG48217 DB	'else', 00H
	ORG $+3
$SG48218 DB	'case', 00H
	ORG $+7
$SG48219 DB	'default', 00H
$SG48221 DB	'while', 00H
	ORG $+2
$SG48223 DB	'goto', 00H
	ORG $+3
$SG48224 DB	'return', 00H
	ORG $+1
$SG48225 DB	'break', 00H
	ORG $+2
$SG48226 DB	'continue', 00H
	ORG $+7
$SG48240 DB	'cclex_init', 00H
	ORG $+5
$SG48241 DB	'W:\cpp\void\ktt-c\cclex.c', 00H
	ORG $+6
$SG48514 DB	'ccread_uninit', 00H
	ORG $+2
$SG48515 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG48624 DB	'error', 00H
	ORG $+6
$SG48627 DB	'expected '')''', 00H
	ORG $+3
$SG48629 DB	'ccread_primary', 00H
	ORG $+1
$SG48630 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48644 DB	'expected '')''', 00H
	ORG $+3
$SG48646 DB	'ccread_postfix', 00H
	ORG $+1
$SG48647 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48651 DB	'expected '']''', 00H
	ORG $+3
$SG48653 DB	'ccread_postfix', 00H
	ORG $+1
$SG48654 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48695 DB	'expected '')''', 00H
	ORG $+3
$SG48697 DB	'ccread_cast_expr', 00H
	ORG $+7
$SG48698 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48814 DB	'expected '':'' invalid conditional expression', 00H
	ORG $+4
$SG48816 DB	'ccread_conditional_expr', 00H
$SG48817 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48895 DB	'expected '')''', 00H
	ORG $+3
$SG48897 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+7
$SG48898 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48900 DB	'function that returns function', 00H
	ORG $+1
$SG48902 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+7
$SG48903 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48905 DB	'function that returns array', 00H
	ORG $+4
$SG48907 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+7
$SG48908 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48911 DB	'expected '']''', 00H
	ORG $+3
$SG48913 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+7
$SG48914 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48930 DB	'expected '')''', 00H
	ORG $+3
$SG48932 DB	'ccread_direct_decl_name', 00H
$SG48933 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48960 DB	'expected initializer after ''=''', 00H
	ORG $+1
$SG48962 DB	'ccread_init_decl_name', 00H
	ORG $+2
$SG48963 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG48974 DB	'expected constant expression after '':''', 00H
	ORG $+1
$SG48976 DB	'ccread_struct_decl_name', 00H
$SG48977 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG49015 DB	'expected declarator', 00H
	ORG $+4
$SG49017 DB	'ccread_init_decl', 00H
	ORG $+7
$SG49018 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG49029 DB	'expected declarator', 00H
	ORG $+4
$SG49031 DB	'ccread_struct_decl', 00H
	ORG $+5
$SG49032 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG49048 DB	'expected ''{'' for struct specifier', 00H
	ORG $+6
$SG49050 DB	'ccread_struct_or_union_specifier', 00H
	ORG $+7
$SG49051 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG49053 DB	'expected '';''', 00H
	ORG $+3
$SG49055 DB	'ccread_struct_or_union_specifier', 00H
	ORG $+7
$SG49056 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+5
$SG49058 DB	'expected ''}'' for struct specifier', 00H
	ORG $+6
$SG49060 DB	'ccread_struct_or_union_specifier', 00H
	ORG $+7
$SG49061 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG49063 DB	'noimpl', 00H
	ORG $+5
$SG49144 DB	'unexpected ''...'', must be at end of function', 00H
	ORG $+3
$SG49146 DB	'ccread_param_decl', 00H
	ORG $+6
$SG49147 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	stbsp_vsprintf
PUBLIC	stbsp_vsnprintf
PUBLIC	stbsp_sprintf
PUBLIC	stbsp_snprintf
PUBLIC	stbsp_vsprintfcb
PUBLIC	stbsp_set_separators
PUBLIC	fib
PUBLIC	gen_type
PUBLIC	gen_vectype
PUBLIC	gen_ptrtype
PUBLIC	gen_vartype
PUBLIC	gen_fixtype
PUBLIC	gen_typename_ex
PUBLIC	gen_typename
PUBLIC	emit_typename
PUBLIC	emit_modifier
PUBLIC	emit_vardecl_ex
PUBLIC	emit_vardecl
PUBLIC	emit_fundecl
PUBLIC	genmake
PUBLIC	emit_vecoprari
PUBLIC	emit_vectype
PUBLIC	emit_type
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	_CrtIsValidHeapPointer:PROC
EXTRN	_free_dbg:PROC
EXTRN	_malloc_dbg:PROC
EXTRN	_realloc_dbg:PROC
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?buf@?1??ccformatv@@9@4PADA
_TLS	SEGMENT
?buf@?1??ccformatv@@9@4PADA DB 0ffH DUP (?)		; `ccformatv'::`2'::buf
_TLS	ENDS
;	COMDAT ?buf@?1??cctrace_@@9@4PADA
_BSS	SEGMENT
?buf@?1??cctrace_@@9@4PADA DB 0fffH DUP (?)		; `cctrace_'::`2'::buf
_BSS	ENDS
_TLS	SEGMENT
ccerr	DD	01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
ctype_flo32 DQ	01H DUP (?)
ctype_flo64 DQ	01H DUP (?)
ctype_int64 DQ	01H DUP (?)
ctype_int32 DQ	01H DUP (?)
ctype_int16 DQ	01H DUP (?)
ctype_int8 DQ	01H DUP (?)
ctype_uint64 DQ	01H DUP (?)
ctype_uint32 DQ	01H DUP (?)
ctype_uint16 DQ	01H DUP (?)
ctype_uint8 DQ	01H DUP (?)
ctype_void DQ	01H DUP (?)
func_decls DQ	01H DUP (?)
vari_decls DQ	01H DUP (?)
symbols	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
_BSS	SEGMENT
?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A DB 040H DUP (?)	; `ccpeek'::`2'::end_tok
_BSS	ENDS
;	COMDAT ?buf@?1??gen_typename@@9@4PADA
_BSS	SEGMENT
?buf@?1??gen_typename@@9@4PADA DB 020H DUP (?)		; `gen_typename'::`2'::buf
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+87
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$cctrace_ DD imagerel cctrace_
	DD	imagerel cctrace_+217
	DD	imagerel $unwind$cctrace_
$pdata$ccmalloc_ DD imagerel ccmalloc_
	DD	imagerel ccmalloc_+64
	DD	imagerel $unwind$ccmalloc_
$pdata$ccrealloc_ DD imagerel ccrealloc_
	DD	imagerel ccrealloc_+73
	DD	imagerel $unwind$ccrealloc_
$pdata$ccfree_ DD imagerel ccfree_
	DD	imagerel ccfree_+59
	DD	imagerel $unwind$ccfree_
$pdata$ccrealfile DD imagerel ccrealfile
	DD	imagerel ccrealfile+41
	DD	imagerel $unwind$ccrealfile
$pdata$ccclosefile DD imagerel ccclosefile
	DD	imagerel ccclosefile+25
	DD	imagerel $unwind$ccclosefile
$pdata$ccopenfile DD imagerel ccopenfile
	DD	imagerel ccopenfile+109
	DD	imagerel $unwind$ccopenfile
$pdata$ccpullfile DD imagerel ccpullfile
	DD	imagerel ccpullfile+234
	DD	imagerel $unwind$ccpullfile
$pdata$ccpushfile DD imagerel ccpushfile
	DD	imagerel ccpushfile+119
	DD	imagerel $unwind$ccpushfile
$pdata$ccfilesize DD imagerel ccfilesize
	DD	imagerel ccfilesize+27
	DD	imagerel $unwind$ccfilesize
$pdata$ccclocktick DD imagerel ccclocktick
	DD	imagerel ccclocktick+25
	DD	imagerel $unwind$ccclocktick
$pdata$ccclocksecs DD imagerel ccclocksecs
	DD	imagerel ccclocksecs+78
	DD	imagerel $unwind$ccclocksecs
$pdata$stbsp_vsprintf DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$stbsp_vsprintf
$pdata$stbsp_vsnprintf DD imagerel $LN6
	DD	imagerel $LN6+303
	DD	imagerel $unwind$stbsp_vsnprintf
$pdata$stbsp_sprintf DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$stbsp_sprintf
$pdata$stbsp_snprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$stbsp_snprintf
$pdata$stbsp_vsprintfcb DD imagerel $LN461
	DD	imagerel $LN461+14412
	DD	imagerel $unwind$stbsp_vsprintfcb
$pdata$stbsp__real_to_str DD imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+1622
	DD	imagerel $unwind$stbsp__real_to_str
$pdata$stbsp__real_to_parts DD imagerel stbsp__real_to_parts
	DD	imagerel stbsp__real_to_parts+154
	DD	imagerel $unwind$stbsp__real_to_parts
$pdata$stbsp__strlen_limited DD imagerel stbsp__strlen_limited
	DD	imagerel stbsp__strlen_limited+239
	DD	imagerel $unwind$stbsp__strlen_limited
$pdata$stbsp__clamp_callback DD imagerel stbsp__clamp_callback
	DD	imagerel stbsp__clamp_callback+300
	DD	imagerel $unwind$stbsp__clamp_callback
$pdata$stbsp__count_clamp_callback DD imagerel stbsp__count_clamp_callback
	DD	imagerel stbsp__count_clamp_callback+59
	DD	imagerel $unwind$stbsp__count_clamp_callback
$pdata$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+3868
	DD	imagerel $unwind$stbsp__raise_to_power10
$pdata$ccout DD	imagerel ccout
	DD	imagerel ccout+35
	DD	imagerel $unwind$ccout
$pdata$ccformatvex DD imagerel ccformatvex
	DD	imagerel ccformatvex+52
	DD	imagerel $unwind$ccformatvex
$pdata$ccformatv DD imagerel ccformatv
	DD	imagerel ccformatv+94
	DD	imagerel $unwind$ccformatv
$pdata$ccformatex DD imagerel ccformatex
	DD	imagerel ccformatex+79
	DD	imagerel $unwind$ccformatex
$pdata$ccformat DD imagerel ccformat
	DD	imagerel ccformat+73
	DD	imagerel $unwind$ccformat
$pdata$ccdlb_tblget DD imagerel ccdlb_tblget
	DD	imagerel ccdlb_tblget+204
	DD	imagerel $unwind$ccdlb_tblget
$pdata$ccdlb_tblput DD imagerel ccdlb_tblput
	DD	imagerel ccdlb_tblput+296
	DD	imagerel $unwind$ccdlb_tblput
$pdata$ccdlb_tblset DD imagerel ccdlb_tblset
	DD	imagerel ccdlb_tblset+275
	DD	imagerel $unwind$ccdlb_tblset
$pdata$ccdlb_arradd_ DD imagerel ccdlb_arradd_
	DD	imagerel ccdlb_arradd_+363
	DD	imagerel $unwind$ccdlb_arradd_
$pdata$ccdlb_arradd DD imagerel ccdlb_arradd
	DD	imagerel ccdlb_arradd+141
	DD	imagerel $unwind$ccdlb_arradd
$pdata$ccdlb_stradd DD imagerel ccdlb_stradd
	DD	imagerel ccdlb_stradd+137
	DD	imagerel $unwind$ccdlb_stradd
$pdata$cchsh_abc DD imagerel cchsh_abc
	DD	imagerel cchsh_abc+103
	DD	imagerel $unwind$cchsh_abc
$pdata$ccdlb_tblini DD imagerel ccdlb_tblini
	DD	imagerel ccdlb_tblini+306
	DD	imagerel $unwind$ccdlb_tblini
$pdata$ccdlb_tblent_ DD imagerel ccdlb_tblent_
	DD	imagerel ccdlb_tblent_+331
	DD	imagerel $unwind$ccdlb_tblent_
$pdata$ccdlb_tblcat DD imagerel ccdlb_tblcat
	DD	imagerel ccdlb_tblcat+358
	DD	imagerel $unwind$ccdlb_tblcat
$pdata$ccstr_vcatf DD imagerel ccstr_vcatf
	DD	imagerel ccstr_vcatf+123
	DD	imagerel $unwind$ccstr_vcatf
$pdata$ccstr_catf DD imagerel ccstr_catf
	DD	imagerel ccstr_catf+76
	DD	imagerel $unwind$ccstr_catf
$pdata$ccdlb_test DD imagerel ccdlb_test
	DD	imagerel ccdlb_test+2036
	DD	imagerel $unwind$ccdlb_test
$pdata$cctree_del DD imagerel cctree_del
	DD	imagerel cctree_del+44
	DD	imagerel $unwind$cctree_del
$pdata$cctree_new DD imagerel cctree_new
	DD	imagerel cctree_new+118
	DD	imagerel $unwind$cctree_new
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_flo32@@YAXXZ DD imagerel ??__Ectype_flo32@@YAXXZ
	DD	imagerel ??__Ectype_flo32@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_flo32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_flo64@@YAXXZ DD imagerel ??__Ectype_flo64@@YAXXZ
	DD	imagerel ??__Ectype_flo64@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_flo64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int64@@YAXXZ DD imagerel ??__Ectype_int64@@YAXXZ
	DD	imagerel ??__Ectype_int64@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_int64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int32@@YAXXZ DD imagerel ??__Ectype_int32@@YAXXZ
	DD	imagerel ??__Ectype_int32@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_int32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int16@@YAXXZ DD imagerel ??__Ectype_int16@@YAXXZ
	DD	imagerel ??__Ectype_int16@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_int16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int8@@YAXXZ DD imagerel ??__Ectype_int8@@YAXXZ
	DD	imagerel ??__Ectype_int8@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_int8@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint64@@YAXXZ DD imagerel ??__Ectype_uint64@@YAXXZ
	DD	imagerel ??__Ectype_uint64@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_uint64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint32@@YAXXZ DD imagerel ??__Ectype_uint32@@YAXXZ
	DD	imagerel ??__Ectype_uint32@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_uint32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint16@@YAXXZ DD imagerel ??__Ectype_uint16@@YAXXZ
	DD	imagerel ??__Ectype_uint16@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_uint16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint8@@YAXXZ DD imagerel ??__Ectype_uint8@@YAXXZ
	DD	imagerel ??__Ectype_uint8@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_uint8@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_void@@YAXXZ DD imagerel ??__Ectype_void@@YAXXZ
	DD	imagerel ??__Ectype_void@@YAXXZ+28
	DD	imagerel $unwind$??__Ectype_void@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$cctree_clone DD imagerel cctree_clone
	DD	imagerel cctree_clone+75
	DD	imagerel $unwind$cctree_clone
$pdata$cctree_name DD imagerel cctree_name
	DD	imagerel cctree_name+49
	DD	imagerel $unwind$cctree_name
$pdata$cctreee_pointer_modifier DD imagerel cctreee_pointer_modifier
	DD	imagerel cctreee_pointer_modifier+53
	DD	imagerel $unwind$cctreee_pointer_modifier
$pdata$cctreee_array_modifier DD imagerel cctreee_array_modifier
	DD	imagerel cctreee_array_modifier+72
	DD	imagerel $unwind$cctreee_array_modifier
$pdata$cctreee_function_modifier DD imagerel cctreee_function_modifier
	DD	imagerel cctreee_function_modifier+72
	DD	imagerel $unwind$cctreee_function_modifier
$pdata$cctreee_struct_specifier DD imagerel cctreee_struct_specifier
	DD	imagerel cctreee_struct_specifier+86
	DD	imagerel $unwind$cctreee_struct_specifier
$pdata$cctree_translation_unit DD imagerel cctree_translation_unit
	DD	imagerel cctree_translation_unit+34
	DD	imagerel $unwind$cctree_translation_unit
$pdata$cctree_group DD imagerel cctree_group
	DD	imagerel cctree_group+67
	DD	imagerel $unwind$cctree_group
$pdata$cctree_call DD imagerel cctree_call
	DD	imagerel cctree_call+86
	DD	imagerel $unwind$cctree_call
$pdata$cctree_index DD imagerel cctree_index
	DD	imagerel cctree_index+86
	DD	imagerel $unwind$cctree_index
$pdata$cctree_block DD imagerel cctree_block
	DD	imagerel cctree_block+67
	DD	imagerel $unwind$cctree_block
$pdata$cctree_while DD imagerel cctree_while
	DD	imagerel cctree_while+95
	DD	imagerel $unwind$cctree_while
$pdata$cctree_label DD imagerel cctree_label
	DD	imagerel cctree_label+91
	DD	imagerel $unwind$cctree_label
$pdata$cctree_goto DD imagerel cctree_goto
	DD	imagerel cctree_goto+72
	DD	imagerel $unwind$cctree_goto
$pdata$cctree_return DD imagerel cctree_return
	DD	imagerel cctree_return+67
	DD	imagerel $unwind$cctree_return
$pdata$cctree_decl_name DD imagerel cctree_decl_name
	DD	imagerel cctree_decl_name+119
	DD	imagerel $unwind$cctree_decl_name
$pdata$cctree_decl DD imagerel cctree_decl
	DD	imagerel cctree_decl+86
	DD	imagerel $unwind$cctree_decl
$pdata$cctree_identifier DD imagerel cctree_identifier
	DD	imagerel cctree_identifier+67
	DD	imagerel $unwind$cctree_identifier
$pdata$cctree_unary DD imagerel cctree_unary
	DD	imagerel cctree_unary+87
	DD	imagerel $unwind$cctree_unary
$pdata$cctree_binary DD imagerel cctree_binary
	DD	imagerel cctree_binary+101
	DD	imagerel $unwind$cctree_binary
$pdata$cctree_ternary DD imagerel cctree_ternary
	DD	imagerel cctree_ternary+100
	DD	imagerel $unwind$cctree_ternary
$pdata$cctree_constant DD imagerel cctree_constant
	DD	imagerel cctree_constant+90
	DD	imagerel $unwind$cctree_constant
$pdata$cctree_solve_decl DD imagerel cctree_solve_decl
	DD	imagerel cctree_solve_decl+140
	DD	imagerel $unwind$cctree_solve_decl
$pdata$cctree_solve_statement DD imagerel cctree_solve_statement
	DD	imagerel cctree_solve_statement+240
	DD	imagerel $unwind$cctree_solve_statement
$pdata$cctree_include_invokable DD imagerel cctree_include_invokable
	DD	imagerel cctree_include_invokable+197
	DD	imagerel $unwind$cctree_include_invokable
$pdata$cctree_resolve_symbol DD imagerel cctree_resolve_symbol
	DD	imagerel cctree_resolve_symbol+257
	DD	imagerel $unwind$cctree_resolve_symbol
$pdata$cctree_mingle DD imagerel cctree_mingle
	DD	imagerel cctree_mingle+464
	DD	imagerel $unwind$cctree_mingle
$pdata$cctree_solve_binary DD imagerel cctree_solve_binary
	DD	imagerel cctree_solve_binary+62
	DD	imagerel $unwind$cctree_solve_binary
$pdata$cctree_solve_rvalue DD imagerel cctree_solve_rvalue
	DD	imagerel cctree_solve_rvalue+219
	DD	imagerel $unwind$cctree_solve_rvalue
$pdata$cctree_solve_lvalue DD imagerel cctree_solve_lvalue
	DD	imagerel cctree_solve_lvalue+141
	DD	imagerel $unwind$cctree_solve_lvalue
$pdata$cctree_solve_call DD imagerel cctree_solve_call
	DD	imagerel cctree_solve_call+268
	DD	imagerel $unwind$cctree_solve_call
$pdata$cctree_solve_block DD imagerel cctree_solve_block
	DD	imagerel cctree_solve_block+140
	DD	imagerel $unwind$cctree_solve_block
$pdata$cctree_solve_decl_name DD imagerel cctree_solve_decl_name
	DD	imagerel cctree_solve_decl_name+874
	DD	imagerel $unwind$cctree_solve_decl_name
$pdata$cctree_solve DD imagerel cctree_solve
	DD	imagerel cctree_solve+151
	DD	imagerel $unwind$cctree_solve
$pdata$ccedict_local DD imagerel ccedict_local
	DD	imagerel ccedict_local+101
	DD	imagerel $unwind$ccedict_local
$pdata$ccedict_param DD imagerel ccedict_param
	DD	imagerel ccedict_param+101
	DD	imagerel $unwind$ccedict_param
$pdata$ccedict_store DD imagerel ccedict_store
	DD	imagerel ccedict_store+98
	DD	imagerel $unwind$ccedict_store
$pdata$ccedict_fetch DD imagerel ccedict_fetch
	DD	imagerel ccedict_fetch+79
	DD	imagerel $unwind$ccedict_fetch
$pdata$ccedict_arith DD imagerel ccedict_arith
	DD	imagerel ccedict_arith+123
	DD	imagerel $unwind$ccedict_arith
$pdata$ccedict_enter DD imagerel ccedict_enter
	DD	imagerel ccedict_enter+79
	DD	imagerel $unwind$ccedict_enter
$pdata$ccedict_fjump DD imagerel ccedict_fjump
	DD	imagerel ccedict_fjump+114
	DD	imagerel $unwind$ccedict_fjump
$pdata$ccedict_call DD imagerel ccedict_call
	DD	imagerel ccedict_call+107
	DD	imagerel $unwind$ccedict_call
$pdata$ccedict_return DD imagerel ccedict_return
	DD	imagerel ccedict_return+79
	DD	imagerel $unwind$ccedict_return
$pdata$ccvalue DD imagerel ccvalue
	DD	imagerel ccvalue+86
	DD	imagerel $unwind$ccvalue
$pdata$ccblock DD imagerel ccblock
	DD	imagerel ccblock+85
	DD	imagerel $unwind$ccblock
$pdata$ccprocd DD imagerel ccprocd
	DD	imagerel ccprocd+85
	DD	imagerel $unwind$ccprocd
$pdata$ccemit_global DD imagerel ccemit_global
	DD	imagerel ccemit_global+118
	DD	imagerel $unwind$ccemit_global
$pdata$ccemit_include_global DD imagerel ccemit_include_global
	DD	imagerel ccemit_include_global+138
	DD	imagerel $unwind$ccemit_include_global
$pdata$ccemit_global_procd DD imagerel ccemit_global_procd
	DD	imagerel ccemit_global_procd+376
	DD	imagerel $unwind$ccemit_global_procd
$pdata$ccblock_add DD imagerel ccblock_add
	DD	imagerel ccblock_add+139
	DD	imagerel $unwind$ccblock_add
$pdata$ccblock_add_edict DD imagerel ccblock_add_edict
	DD	imagerel ccblock_add_edict+64
	DD	imagerel $unwind$ccblock_add_edict
$pdata$ccblock_store DD imagerel ccblock_store
	DD	imagerel ccblock_store+52
	DD	imagerel $unwind$ccblock_store
$pdata$ccblock_fetch DD imagerel ccblock_fetch
	DD	imagerel ccblock_fetch+42
	DD	imagerel $unwind$ccblock_fetch
$pdata$ccblock_arith DD imagerel ccblock_arith
	DD	imagerel ccblock_arith+60
	DD	imagerel $unwind$ccblock_arith
$pdata$ccblock_enter DD imagerel ccblock_enter
	DD	imagerel ccblock_enter+42
	DD	imagerel $unwind$ccblock_enter
$pdata$ccblock_return DD imagerel ccblock_return
	DD	imagerel ccblock_return+42
	DD	imagerel $unwind$ccblock_return
$pdata$ccblock_invoke DD imagerel ccblock_invoke
	DD	imagerel ccblock_invoke+52
	DD	imagerel $unwind$ccblock_invoke
$pdata$ccblock_fjump DD imagerel ccblock_fjump
	DD	imagerel ccblock_fjump+61
	DD	imagerel $unwind$ccblock_fjump
$pdata$ccprocd_local DD imagerel ccprocd_local
	DD	imagerel ccprocd_local+116
	DD	imagerel $unwind$ccprocd_local
$pdata$ccprocd_include_local DD imagerel ccprocd_include_local
	DD	imagerel ccprocd_include_local+221
	DD	imagerel $unwind$ccprocd_include_local
$pdata$ccexec_rvalue DD imagerel ccexec_rvalue
	DD	imagerel ccexec_rvalue+79
	DD	imagerel $unwind$ccexec_rvalue
$pdata$ccexec_lvalue DD imagerel ccexec_lvalue
	DD	imagerel ccexec_lvalue+79
	DD	imagerel $unwind$ccexec_lvalue
$pdata$cclex_hashfunc DD imagerel cclex_hashfunc
	DD	imagerel cclex_hashfunc+75
	DD	imagerel $unwind$cclex_hashfunc
$pdata$cclex_hash DD imagerel cclex_hash
	DD	imagerel cclex_hash+698
	DD	imagerel $unwind$cclex_hash
$pdata$cclex_hashonly DD imagerel cclex_hashonly
	DD	imagerel cclex_hashonly+150
	DD	imagerel $unwind$cclex_hashonly
$pdata$cclex_hash_init DD imagerel cclex_hash_init
	DD	imagerel cclex_hash_init+1498
	DD	imagerel $unwind$cclex_hash_init
$pdata$cclex_init DD imagerel cclex_init
	DD	imagerel cclex_init+197
	DD	imagerel $unwind$cclex_init
$pdata$cclex_idenlen DD imagerel cclex_idenlen
	DD	imagerel cclex_idenlen+165
	DD	imagerel $unwind$cclex_idenlen
$pdata$cclex_token DD imagerel cclex_token
	DD	imagerel cclex_token+83
	DD	imagerel $unwind$cclex_token
$pdata$cclex_next_token_internal DD imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+4608
	DD	imagerel $unwind$cclex_next_token_internal
$pdata$cclex_next_token DD imagerel cclex_next_token
	DD	imagerel cclex_next_token+101
	DD	imagerel $unwind$cclex_next_token
$pdata$cclex_identifier DD imagerel cclex_identifier
	DD	imagerel cclex_identifier+118
	DD	imagerel $unwind$cclex_identifier
$pdata$cclex_readstr DD imagerel cclex_readstr
	DD	imagerel cclex_readstr+867
	DD	imagerel $unwind$cclex_readstr
$pdata$ccread_init DD imagerel ccread_init
	DD	imagerel ccread_init+45
	DD	imagerel $unwind$ccread_init
$pdata$ccread_uninit DD imagerel ccread_uninit
	DD	imagerel ccread_uninit+98
	DD	imagerel $unwind$ccread_uninit
$pdata$ccread_all_tokens DD imagerel ccread_all_tokens
	DD	imagerel ccread_all_tokens+105
	DD	imagerel $unwind$ccread_all_tokens
$pdata$ccreader_move DD imagerel ccreader_move
	DD	imagerel ccreader_move+180
	DD	imagerel $unwind$ccreader_move
$pdata$ccread_include DD imagerel ccread_include
	DD	imagerel ccread_include+95
	DD	imagerel $unwind$ccread_include
$pdata$ccpeep DD imagerel ccpeep
	DD	imagerel ccpeep+26
	DD	imagerel $unwind$ccpeep
$pdata$ccsee DD	imagerel ccsee
	DD	imagerel ccsee+58
	DD	imagerel $unwind$ccsee
$pdata$ccsee_end DD imagerel ccsee_end
	DD	imagerel ccsee_end+26
	DD	imagerel $unwind$ccsee_end
$pdata$ccgobble DD imagerel ccgobble
	DD	imagerel ccgobble+126
	DD	imagerel $unwind$ccgobble
$pdata$cceat DD	imagerel cceat
	DD	imagerel cceat+50
	DD	imagerel $unwind$cceat
$pdata$kttc__peek_alignment_specifier DD imagerel kttc__peek_alignment_specifier
	DD	imagerel kttc__peek_alignment_specifier+58
	DD	imagerel $unwind$kttc__peek_alignment_specifier
$pdata$kttc__peek_type_qualifier DD imagerel kttc__peek_type_qualifier
	DD	imagerel kttc__peek_type_qualifier+58
	DD	imagerel $unwind$kttc__peek_type_qualifier
$pdata$ccsee_typespec DD imagerel ccsee_typespec
	DD	imagerel ccsee_typespec+58
	DD	imagerel $unwind$ccsee_typespec
$pdata$kttc__peek_storage_class DD imagerel kttc__peek_storage_class
	DD	imagerel kttc__peek_storage_class+58
	DD	imagerel $unwind$kttc__peek_storage_class
$pdata$kttc__peek_func_specifier DD imagerel kttc__peek_func_specifier
	DD	imagerel kttc__peek_func_specifier+58
	DD	imagerel $unwind$kttc__peek_func_specifier
$pdata$ccread_arglist_expr DD imagerel ccread_arglist_expr
	DD	imagerel ccread_arglist_expr+170
	DD	imagerel $unwind$ccread_arglist_expr
$pdata$ccread_expression DD imagerel ccread_expression
	DD	imagerel ccread_expression+145
	DD	imagerel $unwind$ccread_expression
$pdata$ccread_cast_expr DD imagerel ccread_cast_expr
	DD	imagerel ccread_cast_expr+178
	DD	imagerel $unwind$ccread_cast_expr
$pdata$ccread_identifier DD imagerel ccread_identifier
	DD	imagerel ccread_identifier+94
	DD	imagerel $unwind$ccread_identifier
$pdata$ccread_primary DD imagerel ccread_primary
	DD	imagerel ccread_primary+352
	DD	imagerel $unwind$ccread_primary
$pdata$ccread_postfix DD imagerel ccread_postfix
	DD	imagerel ccread_postfix+569
	DD	imagerel $unwind$ccread_postfix
$pdata$ccread_unary_expr DD imagerel ccread_unary_expr
	DD	imagerel ccread_unary_expr+819
	DD	imagerel $unwind$ccread_unary_expr
$pdata$ccread_multiplicative_expr DD imagerel ccread_multiplicative_expr
	DD	imagerel ccread_multiplicative_expr+195
	DD	imagerel $unwind$ccread_multiplicative_expr
$pdata$ccread_additive_expr DD imagerel ccread_additive_expr
	DD	imagerel ccread_additive_expr+173
	DD	imagerel $unwind$ccread_additive_expr
$pdata$ccread_shift_expr DD imagerel ccread_shift_expr
	DD	imagerel ccread_shift_expr+173
	DD	imagerel $unwind$ccread_shift_expr
$pdata$ccread_relational_expr DD imagerel ccread_relational_expr
	DD	imagerel ccread_relational_expr+214
	DD	imagerel $unwind$ccread_relational_expr
$pdata$ccread_equality_expr DD imagerel ccread_equality_expr
	DD	imagerel ccread_equality_expr+171
	DD	imagerel $unwind$ccread_equality_expr
$pdata$ccread_bitwise_and_expr DD imagerel ccread_bitwise_and_expr
	DD	imagerel ccread_bitwise_and_expr+154
	DD	imagerel $unwind$ccread_bitwise_and_expr
$pdata$ccread_bitwise_xor_expr DD imagerel ccread_bitwise_xor_expr
	DD	imagerel ccread_bitwise_xor_expr+154
	DD	imagerel $unwind$ccread_bitwise_xor_expr
$pdata$ccread_bitwise_or_expr DD imagerel ccread_bitwise_or_expr
	DD	imagerel ccread_bitwise_or_expr+154
	DD	imagerel $unwind$ccread_bitwise_or_expr
$pdata$ccread_logical_and_expr DD imagerel ccread_logical_and_expr
	DD	imagerel ccread_logical_and_expr+154
	DD	imagerel $unwind$ccread_logical_and_expr
$pdata$ccread_logical_or_expr DD imagerel ccread_logical_or_expr
	DD	imagerel ccread_logical_or_expr+154
	DD	imagerel $unwind$ccread_logical_or_expr
$pdata$ccread_conditional_expr DD imagerel ccread_conditional_expr
	DD	imagerel ccread_conditional_expr+260
	DD	imagerel $unwind$ccread_conditional_expr
$pdata$ccread_assignment_expr DD imagerel ccread_assignment_expr
	DD	imagerel ccread_assignment_expr+146
	DD	imagerel $unwind$ccread_assignment_expr
$pdata$ccread_constant_expression DD imagerel ccread_constant_expression
	DD	imagerel ccread_constant_expression+44
	DD	imagerel $unwind$ccread_constant_expression
$pdata$ccread_param_type_list DD imagerel ccread_param_type_list
	DD	imagerel ccread_param_type_list+54
	DD	imagerel $unwind$ccread_param_type_list
$pdata$ccread_initializer DD imagerel ccread_initializer
	DD	imagerel ccread_initializer+44
	DD	imagerel $unwind$ccread_initializer
$pdata$ccread_decl_name DD imagerel ccread_decl_name
	DD	imagerel ccread_decl_name+96
	DD	imagerel $unwind$ccread_decl_name
$pdata$ccread_declaration_specifiers DD imagerel ccread_declaration_specifiers
	DD	imagerel ccread_declaration_specifiers+94
	DD	imagerel $unwind$ccread_declaration_specifiers
$pdata$ccread_specifier_qualifier_list DD imagerel ccread_specifier_qualifier_list
	DD	imagerel ccread_specifier_qualifier_list+94
	DD	imagerel $unwind$ccread_specifier_qualifier_list
$pdata$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+514
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
$pdata$ccread_direct_decl_name DD imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+522
	DD	imagerel $unwind$ccread_direct_decl_name
$pdata$ccread_decl_name_modifier_maybe DD imagerel ccread_decl_name_modifier_maybe
	DD	imagerel ccread_decl_name_modifier_maybe+89
	DD	imagerel $unwind$ccread_decl_name_modifier_maybe
$pdata$ccread_init_decl_name DD imagerel ccread_init_decl_name
	DD	imagerel ccread_init_decl_name+198
	DD	imagerel $unwind$ccread_init_decl_name
$pdata$ccread_struct_decl_name DD imagerel ccread_struct_decl_name
	DD	imagerel ccread_struct_decl_name+198
	DD	imagerel $unwind$ccread_struct_decl_name
$pdata$ccread_init_decl_name_list DD imagerel ccread_init_decl_name_list
	DD	imagerel ccread_init_decl_name_list+155
	DD	imagerel $unwind$ccread_init_decl_name_list
$pdata$ccread_struct_decl_name_list DD imagerel ccread_struct_decl_name_list
	DD	imagerel ccread_struct_decl_name_list+152
	DD	imagerel $unwind$ccread_struct_decl_name_list
$pdata$ccread_init_decl DD imagerel ccread_init_decl
	DD	imagerel ccread_init_decl+205
	DD	imagerel $unwind$ccread_init_decl
$pdata$ccread_struct_decl DD imagerel ccread_struct_decl
	DD	imagerel ccread_struct_decl+181
	DD	imagerel $unwind$ccread_struct_decl
$pdata$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+463
	DD	imagerel $unwind$ccread_struct_or_union_specifier
$pdata$ccread_type_specifier DD imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+420
	DD	imagerel $unwind$ccread_type_specifier
$pdata$ccread_storage_class_specifier DD imagerel ccread_storage_class_specifier
	DD	imagerel ccread_storage_class_specifier+63
	DD	imagerel $unwind$ccread_storage_class_specifier
$pdata$ccread_type_qualifier DD imagerel ccread_type_qualifier
	DD	imagerel ccread_type_qualifier+63
	DD	imagerel $unwind$ccread_type_qualifier
$pdata$ccread_function_specifier DD imagerel ccread_function_specifier
	DD	imagerel ccread_function_specifier+63
	DD	imagerel $unwind$ccread_function_specifier
$pdata$ccread_alignment_specifier DD imagerel ccread_alignment_specifier
	DD	imagerel ccread_alignment_specifier+63
	DD	imagerel $unwind$ccread_alignment_specifier
$pdata$ccread_param_decl DD imagerel ccread_param_decl
	DD	imagerel ccread_param_decl+185
	DD	imagerel $unwind$ccread_param_decl
$pdata$ccread_param_decl_list DD imagerel ccread_param_decl_list
	DD	imagerel ccread_param_decl_list+138
	DD	imagerel $unwind$ccread_param_decl_list
$pdata$ccread_block DD imagerel ccread_block
	DD	imagerel ccread_block+185
	DD	imagerel $unwind$ccread_block
$pdata$ccread_statement_list DD imagerel ccread_statement_list
	DD	imagerel ccread_statement_list+132
	DD	imagerel $unwind$ccread_statement_list
$pdata$ccread_statement DD imagerel ccread_statement
	DD	imagerel ccread_statement+2320
	DD	imagerel $unwind$ccread_statement
$pdata$ccread_block_or_single_stmt DD imagerel ccread_block_or_single_stmt
	DD	imagerel ccread_block_or_single_stmt+87
	DD	imagerel $unwind$ccread_block_or_single_stmt
$pdata$ccread_external_declaration DD imagerel ccread_external_declaration
	DD	imagerel ccread_external_declaration+522
	DD	imagerel $unwind$ccread_external_declaration
$pdata$ccread_translation_unit DD imagerel ccread_translation_unit
	DD	imagerel ccread_translation_unit+116
	DD	imagerel $unwind$ccread_translation_unit
$pdata$ccemit_constant DD imagerel ccemit_constant
	DD	imagerel ccemit_constant+121
	DD	imagerel $unwind$ccemit_constant
$pdata$ccemit_const_i32 DD imagerel ccemit_const_i32
	DD	imagerel ccemit_const_i32+51
	DD	imagerel $unwind$ccemit_const_i32
$pdata$ccemit_resolve DD imagerel ccemit_resolve
	DD	imagerel ccemit_resolve+127
	DD	imagerel $unwind$ccemit_resolve
$pdata$ccemit_lvalue DD imagerel ccemit_lvalue
	DD	imagerel ccemit_lvalue+103
	DD	imagerel $unwind$ccemit_lvalue
$pdata$ccemit_rvalue DD imagerel ccemit_rvalue
	DD	imagerel ccemit_rvalue+311
	DD	imagerel $unwind$ccemit_rvalue
$pdata$ccemit_invoke_easy DD imagerel ccemit_invoke_easy
	DD	imagerel ccemit_invoke_easy+344
	DD	imagerel $unwind$ccemit_invoke_easy
$pdata$ccemit_tree DD imagerel ccemit_tree
	DD	imagerel ccemit_tree+709
	DD	imagerel $unwind$ccemit_tree
$pdata$ccemit_treelist DD imagerel ccemit_treelist
	DD	imagerel ccemit_treelist+154
	DD	imagerel $unwind$ccemit_treelist
$pdata$ccemit_decl_name DD imagerel ccemit_decl_name
	DD	imagerel ccemit_decl_name+123
	DD	imagerel $unwind$ccemit_decl_name
$pdata$ccemit_decl DD imagerel ccemit_decl
	DD	imagerel ccemit_decl+170
	DD	imagerel $unwind$ccemit_decl
$pdata$ccemit_param DD imagerel ccemit_param
	DD	imagerel ccemit_param+55
	DD	imagerel $unwind$ccemit_param
$pdata$ccemit_function DD imagerel ccemit_function
	DD	imagerel ccemit_function+473
	DD	imagerel $unwind$ccemit_function
$pdata$ccemit_external_decl DD imagerel ccemit_external_decl
	DD	imagerel ccemit_external_decl+269
	DD	imagerel $unwind$ccemit_external_decl
$pdata$ccemit_translation_unit DD imagerel ccemit_translation_unit
	DD	imagerel ccemit_translation_unit+160
	DD	imagerel $unwind$ccemit_translation_unit
$pdata$ccemit_init DD imagerel ccemit_init
	DD	imagerel ccemit_init+32
	DD	imagerel $unwind$ccemit_init
$pdata$ccstack_mingle DD imagerel ccstack_mingle
	DD	imagerel ccstack_mingle+119
	DD	imagerel $unwind$ccstack_mingle
$pdata$ccstack_yield DD imagerel ccstack_yield
	DD	imagerel ccstack_yield+223
	DD	imagerel $unwind$ccstack_yield
$pdata$ccstack_yield_rvalue DD imagerel ccstack_yield_rvalue
	DD	imagerel ccstack_yield_rvalue+306
	DD	imagerel $unwind$ccstack_yield_rvalue
$pdata$ccstack_yield_lvalue DD imagerel ccstack_yield_lvalue
	DD	imagerel ccstack_yield_lvalue+198
	DD	imagerel $unwind$ccstack_yield_lvalue
$pdata$ccstack_local_alloc DD imagerel ccstack_local_alloc
	DD	imagerel ccstack_local_alloc+250
	DD	imagerel $unwind$ccstack_local_alloc
$pdata$ccexec_edict_arith DD imagerel ccexec_edict_arith
	DD	imagerel ccexec_edict_arith+1195
	DD	imagerel $unwind$ccexec_edict_arith
$pdata$ccexec_invoke DD imagerel ccexec_invoke
	DD	imagerel ccexec_invoke+800
	DD	imagerel $unwind$ccexec_invoke
$pdata$ccexec_edict DD imagerel ccexec_edict
	DD	imagerel ccexec_edict+2320
	DD	imagerel $unwind$ccexec_edict
$pdata$ccexec_init DD imagerel ccexec_init
	DD	imagerel ccexec_init+37
	DD	imagerel $unwind$ccexec_init
$pdata$fib DD	imagerel $LN4
	DD	imagerel $LN4+73
	DD	imagerel $unwind$fib
$pdata$ccexec_translation_unit DD imagerel ccexec_translation_unit
	DD	imagerel ccexec_translation_unit+355
	DD	imagerel $unwind$ccexec_translation_unit
$pdata$gen_type DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$gen_type
$pdata$gen_vectype DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$gen_vectype
$pdata$gen_ptrtype DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$gen_ptrtype
$pdata$gen_vartype DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$gen_vartype
$pdata$gen_fixtype DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$gen_fixtype
$pdata$gen_typename_ex DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$gen_typename_ex
$pdata$gen_typename DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$gen_typename
$pdata$emit_typename DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$emit_typename
$pdata$emit_modifier DD imagerel $LN6
	DD	imagerel $LN6+90
	DD	imagerel $unwind$emit_modifier
$pdata$emit_vardecl_ex DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$emit_vardecl_ex
$pdata$emit_vardecl DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$emit_vardecl
$pdata$emit_fundecl DD imagerel $LN9
	DD	imagerel $LN9+232
	DD	imagerel $unwind$emit_fundecl
$pdata$genmake DD imagerel $LN6
	DD	imagerel $LN6+276
	DD	imagerel $unwind$genmake
$pdata$emit_vecoprari DD imagerel $LN8
	DD	imagerel $LN8+412
	DD	imagerel $unwind$emit_vecoprari
$pdata$emit_vectype DD imagerel $LN7
	DD	imagerel $LN7+462
	DD	imagerel $unwind$emit_vectype
$pdata$emit_type DD imagerel $LN7
	DD	imagerel $LN7+182
	DD	imagerel $unwind$emit_type
$pdata$main DD	imagerel $LN8
	DD	imagerel $LN8+547
	DD	imagerel $unwind$main
pdata	ENDS
CRT$XCU	SEGMENT
?ctype_flo32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_flo32@@YAXXZ ; ctype_flo32$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ?ts@?2??main@@9@4QBUkttcc_type@@B
CONST	SEGMENT
?ts@?2??main@@9@4QBUkttcc_type@@B DD 02H		; `main'::`3'::ts
	DD	03H
	DD	040H
	DD	020H
	ORG $+16
	DD	02H
	DD	00H
	DD	040H
	DD	08H
	ORG $+16
	DD	02H
	DD	01H
	DD	040H
	DD	08H
	ORG $+16
	DD	02H
	DD	02H
	DD	08H
	DD	08H
	ORG $+16
CONST	ENDS
;	COMDAT ?hexu@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hexu@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789ABCDEFXP', 00H ; `stbsp_vsprintfcb'::`2'::hexu
_DATA	ENDS
;	COMDAT ?hex@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hex@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789abcdefxp', 00H ; `stbsp_vsprintfcb'::`2'::hex
_DATA	ENDS
_DATA	SEGMENT
stbsp__period DB 02eH
stbsp__comma DB	02cH
	ORG $+14
stbsp__digitpair DW 00H
	DB	'00010203040506070809101112131415161718192021222324252627'
	DB	'2829303132333435363738394041424344454647484950515253545556575'
	DB	'8596061626364656667686970717273747576777879808182838485868788'
	DB	'8990919293949596979899', 00H
	ORG $+1
	ORG $+4
cctree_s DQ	FLAT:$SG46943
	DQ	FLAT:$SG46944
	DQ	FLAT:$SG46945
	DQ	FLAT:$SG46946
	DQ	FLAT:$SG46947
	DQ	FLAT:$SG46948
	DQ	FLAT:$SG46949
	DQ	FLAT:$SG46950
	DQ	FLAT:$SG46951
	DQ	FLAT:$SG46952
	DQ	FLAT:$SG46953
	DQ	FLAT:$SG46954
	DQ	FLAT:$SG46955
	DQ	FLAT:$SG46956
	DQ	FLAT:$SG46957
	DQ	FLAT:$SG46958
	DQ	FLAT:$SG46959
	DQ	FLAT:$SG46960
	DQ	FLAT:$SG46961
	DQ	FLAT:$SG46962
	DQ	FLAT:$SG46963
	DQ	FLAT:$SG46964
	DQ	FLAT:$SG46965
	DQ	FLAT:$SG46966
	DQ	FLAT:$SG46967
	DQ	FLAT:$SG46968
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_void@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint8@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint16@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int8@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int16@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_flo64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_flo32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsnprintf
	DD	024H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsprintfcb
	DD	025H
	DD	02f34H
	DD	02f36H
	DD	036f8H
voltbl	ENDS
xdata	SEGMENT
$unwind$cctrace_ DD 011701H
	DD	0a217H
$unwind$ccmalloc_ DD 011801H
	DD	06218H
$unwind$ccrealloc_ DD 011801H
	DD	08218H
$unwind$ccfree_ DD 011801H
	DD	04218H
$unwind$ccrealfile DD 010901H
	DD	02209H
$unwind$ccclosefile DD 010901H
	DD	04209H
$unwind$ccopenfile DD 010901H
	DD	0a209H
$unwind$ccpullfile DD 011201H
	DD	0a212H
$unwind$ccpushfile DD 011701H
	DD	08217H
$unwind$ccfilesize DD 010901H
	DD	04209H
$unwind$ccclocktick DD 010401H
	DD	06204H
$unwind$ccclocksecs DD 010901H
	DD	06209H
$unwind$stbsp_vsprintf DD 011301H
	DD	06213H
$unwind$stbsp_vsnprintf DD 022c19H
	DD	04d011aH
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$stbsp_sprintf DD 011801H
	DD	08218H
$unwind$stbsp_snprintf DD 011701H
	DD	06217H
$unwind$stbsp_vsprintfcb DD 022d19H
	DD	097011bH
	DD	imagerel __GSHandlerCheck
	DD	04a0H
$unwind$stbsp__real_to_str DD 021b01H
	DD	017011bH
$unwind$stbsp__real_to_parts DD 011401H
	DD	04214H
$unwind$stbsp__strlen_limited DD 010d01H
	DD	0220dH
$unwind$stbsp__clamp_callback DD 011301H
	DD	06213H
$unwind$stbsp__count_clamp_callback DD 011301H
	DD	02213H
$unwind$stbsp__raise_to_power10 DD 021c01H
	DD	035011cH
$unwind$ccout DD 010901H
	DD	04209H
$unwind$ccformatvex DD 011701H
	DD	04217H
$unwind$ccformatv DD 010e01H
	DD	0420eH
$unwind$ccformatex DD 011701H
	DD	06217H
$unwind$ccformat DD 011801H
	DD	06218H
$unwind$ccdlb_tblget DD 011701H
	DD	08217H
$unwind$ccdlb_tblput DD 011701H
	DD	0a217H
$unwind$ccdlb_tblset DD 011701H
	DD	0a217H
$unwind$ccdlb_arradd_ DD 011201H
	DD	0a212H
$unwind$ccdlb_arradd DD 011701H
	DD	08217H
$unwind$ccdlb_stradd DD 011701H
	DD	06217H
$unwind$cchsh_abc DD 010d01H
	DD	0220dH
$unwind$ccdlb_tblini DD 010d01H
	DD	0820dH
$unwind$ccdlb_tblent_ DD 011201H
	DD	08212H
$unwind$ccdlb_tblcat DD 011701H
	DD	06217H
$unwind$ccstr_vcatf DD 011301H
	DD	06213H
$unwind$ccstr_catf DD 011801H
	DD	06218H
$unwind$ccdlb_test DD 020701H
	DD	01b0107H
$unwind$cctree_del DD 010901H
	DD	04209H
$unwind$cctree_new DD 011201H
	DD	06212H
$unwind$cctree_clone DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$cctree_name DD 010901H
	DD	02209H
$unwind$cctreee_pointer_modifier DD 010901H
	DD	06209H
$unwind$cctreee_array_modifier DD 010e01H
	DD	0620eH
$unwind$cctreee_function_modifier DD 010e01H
	DD	0620eH
$unwind$cctreee_struct_specifier DD 010e01H
	DD	0620eH
$unwind$cctree_translation_unit DD 010401H
	DD	06204H
$unwind$cctree_group DD 011201H
	DD	06212H
$unwind$cctree_call DD 011701H
	DD	06217H
$unwind$cctree_index DD 011701H
	DD	06217H
$unwind$cctree_block DD 011201H
	DD	06212H
$unwind$cctree_while DD 011701H
	DD	06217H
$unwind$cctree_label DD 011701H
	DD	06217H
$unwind$cctree_goto DD 011201H
	DD	06212H
$unwind$cctree_return DD 011201H
	DD	06212H
$unwind$cctree_decl_name DD 011701H
	DD	06217H
$unwind$cctree_decl DD 011701H
	DD	06217H
$unwind$cctree_identifier DD 011201H
	DD	06212H
$unwind$cctree_unary DD 011701H
	DD	06217H
$unwind$cctree_binary DD 011701H
	DD	06217H
$unwind$cctree_ternary DD 011701H
	DD	06217H
$unwind$cctree_constant DD 011701H
	DD	06217H
$unwind$cctree_solve_decl DD 010901H
	DD	06209H
$unwind$cctree_solve_statement DD 010901H
	DD	04209H
$unwind$cctree_include_invokable DD 010e01H
	DD	0620eH
$unwind$cctree_resolve_symbol DD 010901H
	DD	0a209H
$unwind$cctree_mingle DD 010e01H
	DD	0c20eH
$unwind$cctree_solve_binary DD 011201H
	DD	04212H
$unwind$cctree_solve_rvalue DD 010901H
	DD	0a209H
$unwind$cctree_solve_lvalue DD 010901H
	DD	0a209H
$unwind$cctree_solve_call DD 010901H
	DD	0a209H
$unwind$cctree_solve_block DD 010901H
	DD	06209H
$unwind$cctree_solve_decl_name DD 010901H
	DD	0e209H
$unwind$cctree_solve DD 010901H
	DD	06209H
$unwind$ccedict_local DD 010901H
	DD	06209H
$unwind$ccedict_param DD 010901H
	DD	06209H
$unwind$ccedict_store DD 010e01H
	DD	0620eH
$unwind$ccedict_fetch DD 010901H
	DD	06209H
$unwind$ccedict_arith DD 011201H
	DD	06212H
$unwind$ccedict_enter DD 010901H
	DD	06209H
$unwind$ccedict_fjump DD 011201H
	DD	06212H
$unwind$ccedict_call DD 010e01H
	DD	0620eH
$unwind$ccedict_return DD 010901H
	DD	06209H
$unwind$ccvalue DD 010901H
	DD	06209H
$unwind$ccblock DD 010901H
	DD	06209H
$unwind$ccprocd DD 010901H
	DD	06209H
$unwind$ccemit_global DD 010e01H
	DD	0620eH
$unwind$ccemit_include_global DD 011301H
	DD	06213H
$unwind$ccemit_global_procd DD 011301H
	DD	0a213H
$unwind$ccblock_add DD 010901H
	DD	06209H
$unwind$ccblock_add_edict DD 010e01H
	DD	0620eH
$unwind$ccblock_store DD 011301H
	DD	04213H
$unwind$ccblock_fetch DD 010e01H
	DD	0420eH
$unwind$ccblock_arith DD 011701H
	DD	04217H
$unwind$ccblock_enter DD 010e01H
	DD	0420eH
$unwind$ccblock_return DD 010e01H
	DD	0420eH
$unwind$ccblock_invoke DD 011301H
	DD	04213H
$unwind$ccblock_fjump DD 011801H
	DD	04218H
$unwind$ccprocd_local DD 010e01H
	DD	0620eH
$unwind$ccprocd_include_local DD 011301H
	DD	08213H
$unwind$ccexec_rvalue DD 031501H
	DD	070114215H
	DD	06010H
$unwind$ccexec_lvalue DD 031501H
	DD	070114215H
	DD	06010H
$unwind$cclex_hashfunc DD 010d01H
	DD	0220dH
$unwind$cclex_hash DD 011701H
	DD	0e217H
$unwind$cclex_hashonly DD 011701H
	DD	08217H
$unwind$cclex_hash_init DD 010901H
	DD	04209H
$unwind$cclex_init DD 030b01H
	DD	07007c20bH
	DD	06006H
$unwind$cclex_idenlen DD 010901H
	DD	02209H
$unwind$cclex_token DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$cclex_next_token_internal DD 010901H
	DD	0a209H
$unwind$cclex_next_token DD 010901H
	DD	06209H
$unwind$cclex_identifier DD 010e01H
	DD	0820eH
$unwind$cclex_readstr DD 010e01H
	DD	0820eH
$unwind$ccread_init DD 010901H
	DD	04209H
$unwind$ccread_uninit DD 010901H
	DD	06209H
$unwind$ccread_all_tokens DD 010901H
	DD	06209H
$unwind$ccreader_move DD 011301H
	DD	06213H
$unwind$ccread_include DD 010e01H
	DD	0820eH
$unwind$ccpeep DD 010901H
	DD	04209H
$unwind$ccsee DD 010d01H
	DD	0620dH
$unwind$ccsee_end DD 010901H
	DD	04209H
$unwind$ccgobble DD 010901H
	DD	06209H
$unwind$cceat DD 010d01H
	DD	0420dH
$unwind$kttc__peek_alignment_specifier DD 010901H
	DD	06209H
$unwind$kttc__peek_type_qualifier DD 010901H
	DD	06209H
$unwind$ccsee_typespec DD 010901H
	DD	06209H
$unwind$kttc__peek_storage_class DD 010901H
	DD	06209H
$unwind$kttc__peek_func_specifier DD 010901H
	DD	06209H
$unwind$ccread_arglist_expr DD 031501H
	DD	070116215H
	DD	06010H
$unwind$ccread_expression DD 011301H
	DD	08213H
$unwind$ccread_cast_expr DD 011301H
	DD	08213H
$unwind$ccread_identifier DD 011301H
	DD	06213H
$unwind$ccread_primary DD 011301H
	DD	0a213H
$unwind$ccread_postfix DD 011301H
	DD	0c213H
$unwind$ccread_unary_expr DD 041801H
	DD	0230118H
	DD	060107011H
$unwind$ccread_multiplicative_expr DD 011301H
	DD	0a213H
$unwind$ccread_additive_expr DD 011301H
	DD	0a213H
$unwind$ccread_shift_expr DD 011301H
	DD	0a213H
$unwind$ccread_relational_expr DD 011301H
	DD	0a213H
$unwind$ccread_equality_expr DD 011301H
	DD	0a213H
$unwind$ccread_bitwise_and_expr DD 011301H
	DD	0a213H
$unwind$ccread_bitwise_xor_expr DD 011301H
	DD	0a213H
$unwind$ccread_bitwise_or_expr DD 011301H
	DD	0a213H
$unwind$ccread_logical_and_expr DD 011301H
	DD	0a213H
$unwind$ccread_logical_or_expr DD 011301H
	DD	0a213H
$unwind$ccread_conditional_expr DD 011301H
	DD	0a213H
$unwind$ccread_assignment_expr DD 011301H
	DD	0a213H
$unwind$ccread_constant_expression DD 011301H
	DD	04213H
$unwind$ccread_param_type_list DD 011301H
	DD	06213H
$unwind$ccread_initializer DD 011301H
	DD	04213H
$unwind$ccread_decl_name DD 011801H
	DD	06218H
$unwind$ccread_declaration_specifiers DD 011301H
	DD	06213H
$unwind$ccread_specifier_qualifier_list DD 011301H
	DD	06213H
$unwind$ccread_direct_decl_name_modifier DD 011801H
	DD	0a218H
$unwind$ccread_direct_decl_name DD 031a01H
	DD	07016c21aH
	DD	06015H
$unwind$ccread_decl_name_modifier_maybe DD 011801H
	DD	04218H
$unwind$ccread_init_decl_name DD 011801H
	DD	08218H
$unwind$ccread_struct_decl_name DD 011801H
	DD	08218H
$unwind$ccread_init_decl_name_list DD 011801H
	DD	06218H
$unwind$ccread_struct_decl_name_list DD 011801H
	DD	06218H
$unwind$ccread_init_decl DD 011301H
	DD	08213H
$unwind$ccread_struct_decl DD 011301H
	DD	08213H
$unwind$ccread_struct_or_union_specifier DD 011301H
	DD	0a213H
$unwind$ccread_type_specifier DD 011301H
	DD	06213H
$unwind$ccread_storage_class_specifier DD 011301H
	DD	06213H
$unwind$ccread_type_qualifier DD 011301H
	DD	06213H
$unwind$ccread_function_specifier DD 011301H
	DD	06213H
$unwind$ccread_alignment_specifier DD 011301H
	DD	06213H
$unwind$ccread_param_decl DD 011301H
	DD	08213H
$unwind$ccread_param_decl_list DD 011301H
	DD	06213H
$unwind$ccread_block DD 011301H
	DD	08213H
$unwind$ccread_statement_list DD 011301H
	DD	06213H
$unwind$ccread_statement DD 021601H
	DD	0110116H
$unwind$ccread_block_or_single_stmt DD 011301H
	DD	06213H
$unwind$ccread_external_declaration DD 011301H
	DD	0a213H
$unwind$ccread_translation_unit DD 010901H
	DD	06209H
$unwind$ccemit_constant DD 011301H
	DD	06213H
$unwind$ccemit_const_i32 DD 010e01H
	DD	0620eH
$unwind$ccemit_resolve DD 011301H
	DD	08213H
$unwind$ccemit_lvalue DD 011801H
	DD	06218H
$unwind$ccemit_rvalue DD 011801H
	DD	08218H
$unwind$ccemit_invoke_easy DD 011801H
	DD	0c218H
$unwind$ccemit_tree DD 011801H
	DD	0a218H
$unwind$ccemit_treelist DD 011801H
	DD	06218H
$unwind$ccemit_decl_name DD 011801H
	DD	06218H
$unwind$ccemit_decl DD 011801H
	DD	06218H
$unwind$ccemit_param DD 011301H
	DD	06213H
$unwind$ccemit_function DD 011301H
	DD	08213H
$unwind$ccemit_external_decl DD 010e01H
	DD	0820eH
$unwind$ccemit_translation_unit DD 010e01H
	DD	0620eH
$unwind$ccemit_init DD 010901H
	DD	04209H
$unwind$ccstack_mingle DD 010e01H
	DD	0620eH
$unwind$ccstack_yield DD 031501H
	DD	070118215H
	DD	06010H
$unwind$ccstack_yield_rvalue DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$ccstack_yield_lvalue DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$ccstack_local_alloc DD 031001H
	DD	0700ce210H
	DD	0600bH
$unwind$ccexec_edict_arith DD 041c01H
	DD	041011cH
	DD	060147015H
$unwind$ccexec_invoke DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$ccexec_edict DD 041801H
	DD	0770118H
	DD	060107011H
$unwind$ccexec_init DD 010901H
	DD	04209H
$unwind$fib DD	010801H
	DD	06208H
$unwind$ccexec_translation_unit DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$gen_type DD 010801H
	DD	06208H
$unwind$gen_vectype DD 010d01H
	DD	0620dH
$unwind$gen_ptrtype DD 010901H
	DD	06209H
$unwind$gen_vartype DD 011101H
	DD	06211H
$unwind$gen_fixtype DD 010c01H
	DD	0620cH
$unwind$gen_typename_ex DD 011301H
	DD	08213H
$unwind$gen_typename DD 010901H
	DD	04209H
$unwind$emit_typename DD 010e01H
	DD	0420eH
$unwind$emit_modifier DD 010d01H
	DD	0420dH
$unwind$emit_vardecl_ex DD 011801H
	DD	04218H
$unwind$emit_vardecl DD 011301H
	DD	04213H
$unwind$emit_fundecl DD 011801H
	DD	06218H
$unwind$genmake DD 010e01H
	DD	0820eH
$unwind$emit_vecoprari DD 011301H
	DD	08213H
$unwind$emit_vectype DD 010e01H
	DD	0620eH
$unwind$emit_type DD 010e01H
	DD	0620eH
$unwind$main DD	021001H
	DD	0230110H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
CRT$XCU	SEGMENT
?ctype_flo64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_flo64@@YAXXZ ; ctype_flo64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int64@@YAXXZ ; ctype_int64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int32@@YAXXZ ; ctype_int32$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int16$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int16@@YAXXZ ; ctype_int16$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int8$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int8@@YAXXZ ; ctype_int8$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint64@@YAXXZ ; ctype_uint64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint32@@YAXXZ ; ctype_uint32$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint16$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint16@@YAXXZ ; ctype_uint16$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint8$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint8@@YAXXZ ; ctype_uint8$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_void$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_void@@YAXXZ ; ctype_void$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
tv154 = 52
out$2 = 56
file$3 = 64
exec$ = 72
tv130 = 80
emit$ = 88
read$ = 112
argc$ = 288
argv$ = 296
main	PROC
; File W:\cpp\void\ktt-c\test.c
; Line 5
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 280				; 00000118H
; Line 6
	mov	rax, QWORD PTR argv$[rsp]
	add	rax, 8
	mov	QWORD PTR argv$[rsp], rax
; Line 7
	mov	eax, DWORD PTR argc$[rsp]
	dec	eax
	mov	DWORD PTR argc$[rsp], eax
; Line 9
	lea	rax, OFFSET FLAT:$SG50082
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG50083
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG50084
	mov	r8d, 9
	lea	rdx, OFFSET FLAT:$SG50085
	mov	ecx, 49					; 00000031H
	call	cctrace_
; Line 10
	lea	rax, OFFSET FLAT:$SG50086
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG50087
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG50088
	mov	r8d, 10
	lea	rdx, OFFSET FLAT:$SG50089
	mov	ecx, 50					; 00000032H
	call	cctrace_
; Line 11
	lea	rax, OFFSET FLAT:$SG50090
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG50091
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG50092
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:$SG50093
	mov	ecx, 51					; 00000033H
	call	cctrace_
; Line 13
	call	ccdlb_test
; Line 16
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_init
; Line 17
	lea	rdx, OFFSET FLAT:$SG50094
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_include
; Line 20
	lea	rcx, QWORD PTR emit$[rsp]
	call	ccemit_init
; Line 21
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_translation_unit
	mov	rdx, rax
	lea	rcx, QWORD PTR emit$[rsp]
	call	ccemit_translation_unit
; Line 24
	lea	rcx, QWORD PTR exec$[rsp]
	call	ccexec_init
; Line 25
	lea	rdx, QWORD PTR emit$[rsp]
	lea	rcx, QWORD PTR exec$[rsp]
	call	ccexec_translation_unit
; Line 27
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_uninit
; Line 32
	mov	QWORD PTR out$2[rsp], 0
; Line 34
	lea	rcx, OFFSET FLAT:$SG50096
	call	strlen
	mov	QWORD PTR tv130[rsp], rax
	lea	rcx, OFFSET FLAT:$SG50097
	call	strlen
	inc	eax
	lea	r9, OFFSET FLAT:$SG50095
	mov	rcx, QWORD PTR tv130[rsp]
	mov	r8d, ecx
	mov	edx, eax
	lea	rcx, QWORD PTR out$2[rsp]
	call	ccdlb_stradd
; Line 67
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@main:
	movsxd	rax, DWORD PTR i$1[rsp]
	cmp	rax, 4
	jae	SHORT $LN3@main
; Line 68
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?ts@?2??main@@9@4QBUkttcc_type@@B
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR out$2[rsp]
	call	emit_type
; Line 69
	jmp	SHORT $LN2@main
$LN3@main:
; Line 71
	lea	rcx, OFFSET FLAT:$SG50098
	call	ccopenfile
	mov	QWORD PTR file$3[rsp], rax
; Line 72
	cmp	QWORD PTR out$2[rsp], 0
	je	SHORT $LN6@main
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv154[rsp], eax
	jmp	SHORT $LN7@main
$LN6@main:
	mov	DWORD PTR tv154[rsp], 0
$LN7@main:
	mov	r9, QWORD PTR out$2[rsp]
	mov	r8d, DWORD PTR tv154[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR file$3[rsp]
	call	ccpushfile
; Line 73
	mov	rcx, QWORD PTR file$3[rsp]
	call	ccclosefile
; Line 76
	xor	eax, eax
	add	rsp, 280				; 00000118H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
fix$2 = 40
out$ = 64
t$ = 72
emit_type PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 324
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 325
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 2
	jne	$LN5@emit_type
; Line 327
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR i$1[rsp], eax
	jmp	SHORT $LN4@emit_type
$LN2@emit_type:
	mov	eax, DWORD PTR i$1[rsp]
	shl	eax, 1
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_type:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN3@emit_type
; Line 329
	mov	edx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	gen_fixtype
	mov	QWORD PTR fix$2[rsp], rax
; Line 331
	mov	edx, 2
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 332
	mov	edx, 3
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 333
	mov	edx, 4
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 334
	jmp	$LN2@emit_type
$LN3@emit_type:
$LN5@emit_type:
; Line 337
	add	rsp, 56					; 00000038H
	ret	0
emit_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
out$ = 64
t$ = 72
emit_vectype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 291
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 292
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	$LN5@emit_vecty
; Line 293
	lea	rdx, OFFSET FLAT:$SG50033
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 294
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 295
	lea	rdx, OFFSET FLAT:$SG50034
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 296
	lea	rdx, OFFSET FLAT:$SG50035
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 297
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_vecty
$LN2@emit_vecty:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_vecty:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_vecty
; Line 298
	lea	rdx, OFFSET FLAT:$SG50036
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 299
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	rax, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 300
	lea	rdx, OFFSET FLAT:$SG50037
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 301
	jmp	SHORT $LN2@emit_vecty
$LN3@emit_vecty:
; Line 302
	lea	rdx, OFFSET FLAT:$SG50038
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 303
	lea	rdx, OFFSET FLAT:$SG50039
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 304
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 305
	lea	rdx, OFFSET FLAT:$SG50040
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN5@emit_vecty:
; Line 308
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	genmake
; Line 309
	lea	r8, OFFSET FLAT:$SG50041
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG50042
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 310
	lea	r8, OFFSET FLAT:$SG50043
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG50044
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 311
	lea	r8, OFFSET FLAT:$SG50045
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG50046
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 312
	lea	r8, OFFSET FLAT:$SG50047
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG50048
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 321
	add	rsp, 56					; 00000038H
	ret	0
emit_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$ = 80
t$ = 88
opr$ = 96
emit_vecoprari PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 202
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 203
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r9, QWORD PTR opr$[rsp]
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG50014
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 205
	mov	rcx, QWORD PTR opr$[rsp]
	call	strlen
	cmp	rax, 2
	jne	SHORT $LN5@emit_vecop
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR opr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN5@emit_vecop
; Line 207
	mov	r9b, 97					; 00000061H
	mov	r8d, 6
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl_ex
; Line 208
	jmp	SHORT $LN6@emit_vecop
$LN5@emit_vecop:
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
$LN6@emit_vecop:
; Line 213
	lea	rdx, OFFSET FLAT:$SG50017
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:$SG50018
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:$SG50019
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:$SG50020
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 222
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_vecop
$LN2@emit_vecop:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_vecop:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_vecop
; Line 223
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR opr$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR i$1[rsp]
	lea	r8, OFFSET FLAT:fn
	movsx	edx, BYTE PTR [r8+rdx]
	movsxd	r8, DWORD PTR i$1[rsp]
	lea	r9, OFFSET FLAT:fn
	movsx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	lea	rdx, OFFSET FLAT:$SG50021
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 224
	jmp	SHORT $LN2@emit_vecop
$LN3@emit_vecop:
; Line 225
	lea	rdx, OFFSET FLAT:$SG50022
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:$SG50023
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 227
	add	rsp, 72					; 00000048H
	ret	0
emit_vecoprari ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$ = 80
t$ = 88
genmake	PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 183
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 184
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG49998
	call	ccformat
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	r8d, DWORD PTR [rax+20]
	mov	rax, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_fundecl
; Line 187
	lea	rdx, OFFSET FLAT:$SG49999
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 188
	lea	rdx, OFFSET FLAT:$SG50000
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 190
	mov	r8b, 114				; 00000072H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 191
	lea	rdx, OFFSET FLAT:$SG50001
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 193
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@genmake
$LN2@genmake:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@genmake:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@genmake
; Line 194
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movsx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$1[rsp]
	lea	rdx, OFFSET FLAT:fn
	movsx	ecx, BYTE PTR [rdx+rcx]
	mov	r9d, eax
	mov	r8d, ecx
	lea	rdx, OFFSET FLAT:$SG50002
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 195
	jmp	SHORT $LN2@genmake
$LN3@genmake:
; Line 197
	lea	rdx, OFFSET FLAT:$SG50003
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 198
	lea	rdx, OFFSET FLAT:$SG50004
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 199
	add	rsp, 72					; 00000048H
	ret	0
genmake	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
out$ = 64
t$ = 72
l$ = 80
r$ = 88
n$ = 96
emit_fundecl PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 163
$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 164
	lea	rdx, OFFSET FLAT:$SG49981
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 165
	cmp	QWORD PTR r$[rsp], 0
	je	SHORT $LN5@emit_funde
; Line 166
	mov	rdx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 167
	jmp	SHORT $LN6@emit_funde
$LN5@emit_funde:
; Line 168
	lea	rdx, OFFSET FLAT:$SG49984
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN6@emit_funde:
; Line 170
	mov	r8, QWORD PTR n$[rsp]
	lea	rdx, OFFSET FLAT:$SG49985
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:$SG49986
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 173
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_funde
$LN2@emit_funde:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_funde:
	mov	eax, DWORD PTR l$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_funde
; Line 174
	cmp	DWORD PTR i$1[rsp], 0
	je	SHORT $LN7@emit_funde
	lea	rdx, OFFSET FLAT:$SG49988
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN7@emit_funde:
; Line 175
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 176
	jmp	SHORT $LN2@emit_funde
$LN3@emit_funde:
; Line 177
	lea	rdx, OFFSET FLAT:$SG49989
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 179
	add	rsp, 56					; 00000038H
	ret	0
emit_fundecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
name$ = 64
emit_vardecl PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 158
$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 159
	movzx	r9d, BYTE PTR name$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl_ex
; Line 160
	add	rsp, 40					; 00000028H
	ret	0
emit_vardecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
override_modifier$ = 64
name$ = 72
emit_vardecl_ex PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 126
$LN19:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 127
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG49953
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 129
	cmp	DWORD PTR override_modifier$[rsp], 5
	je	SHORT $LN10@emit_varde
	cmp	DWORD PTR override_modifier$[rsp], 6
	jne	SHORT $LN8@emit_varde
$LN10@emit_varde:
; Line 132
	mov	edx, DWORD PTR override_modifier$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 133
	jmp	SHORT $LN9@emit_varde
$LN8@emit_varde:
$LN2@emit_varde:
; Line 135
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 5
	je	SHORT $LN13@emit_varde
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 6
	jne	SHORT $LN11@emit_varde
$LN13@emit_varde:
; Line 138
	mov	rax, QWORD PTR t$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 139
	jmp	SHORT $LN12@emit_varde
$LN11@emit_varde:
	jmp	SHORT $LN3@emit_varde
$LN12@emit_varde:
; Line 140
	jmp	SHORT $LN2@emit_varde
$LN3@emit_varde:
$LN9@emit_varde:
; Line 142
	movsx	eax, BYTE PTR name$[rsp]
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:$SG49960
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 144
	cmp	DWORD PTR override_modifier$[rsp], 7
	jne	SHORT $LN14@emit_varde
; Line 146
	mov	edx, DWORD PTR override_modifier$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 147
	jmp	SHORT $LN15@emit_varde
$LN14@emit_varde:
$LN5@emit_varde:
; Line 150
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 7
	jne	SHORT $LN16@emit_varde
; Line 152
	mov	rax, QWORD PTR t$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 153
	jmp	SHORT $LN17@emit_varde
$LN16@emit_varde:
	jmp	SHORT $LN6@emit_varde
$LN17@emit_varde:
; Line 154
	jmp	SHORT $LN5@emit_varde
$LN6@emit_varde:
$LN15@emit_varde:
; Line 155
	add	rsp, 40					; 00000028H
	ret	0
emit_vardecl_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
modifier$ = 56
emit_modifier PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 119
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 120
	cmp	DWORD PTR modifier$[rsp], 5
	jne	SHORT $LN2@emit_modif
	lea	rdx, OFFSET FLAT:$SG49936
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN2@emit_modif:
; Line 121
	cmp	DWORD PTR modifier$[rsp], 6
	jne	SHORT $LN3@emit_modif
	lea	rdx, OFFSET FLAT:$SG49938
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN3@emit_modif:
; Line 122
	cmp	DWORD PTR modifier$[rsp], 7
	jne	SHORT $LN4@emit_modif
	lea	rdx, OFFSET FLAT:$SG49940
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN4@emit_modif:
; Line 123
	add	rsp, 40					; 00000028H
	ret	0
emit_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
emit_typename PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 114
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 115
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG49930
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 116
	add	rsp, 40					; 00000028H
	ret	0
emit_typename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 48
gen_typename PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 107
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename_ex
; Line 110
	lea	rax, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
; Line 111
	add	rsp, 40					; 00000028H
	ret	0
gen_typename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$1 = 48
t$ = 80
buf$ = 88
len$ = 96
gen_typename_ex PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 87
$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 88
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN2@gen_typena
; Line 90
	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:pf
	movsx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	lea	r8, OFFSET FLAT:$SG49914
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatex
	jmp	$LN1@gen_typena
; Line 91
	jmp	$LN3@gen_typena
$LN2@gen_typena:
; Line 92
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN4@gen_typena
; Line 94
	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:pf
	movsx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	lea	r8, OFFSET FLAT:$SG49917
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatex
	jmp	SHORT $LN1@gen_typena
; Line 95
	jmp	SHORT $LN5@gen_typena
$LN4@gen_typena:
; Line 96
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN6@gen_typena
; Line 98
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	gen_typename_ex
	mov	DWORD PTR p$1[rsp], eax
; Line 99
	mov	eax, DWORD PTR p$1[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$1[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR t$[rsp]
	mov	r9d, DWORD PTR [rdx+20]
	lea	r8, OFFSET FLAT:$SG49920
	mov	edx, eax
	call	ccformatex
	jmp	SHORT $LN1@gen_typena
; Line 100
	jmp	SHORT $LN7@gen_typena
$LN6@gen_typena:
; Line 102
	xor	eax, eax
$LN7@gen_typena:
$LN5@gen_typena:
$LN3@gen_typena:
$LN1@gen_typena:
; Line 104
	add	rsp, 72					; 00000048H
	ret	0
gen_typename_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
d$ = 64
b$ = 72
gen_fixtype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 72
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 73
	mov	ecx, 3
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 75
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 76
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 78
	mov	rax, QWORD PTR type$[rsp]
; Line 79
	add	rsp, 56					; 00000038H
	ret	0
gen_fixtype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
d$ = 64
i$ = 72
a$ = 80
gen_vartype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 61
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 62
	mov	ecx, 2
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 64
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 65
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 66
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 68
	mov	rax, QWORD PTR type$[rsp]
; Line 69
	add	rsp, 56					; 00000038H
	ret	0
gen_vartype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
t$ = 64
gen_ptrtype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 52
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 53
	mov	ecx, 5
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 55
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 57
	mov	rax, QWORD PTR type$[rsp]
; Line 58
	add	rsp, 56					; 00000038H
	ret	0
gen_ptrtype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
t$ = 64
length$ = 72
gen_vectype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 42
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 43
	mov	ecx, 4
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 45
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 46
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR length$[rsp]
	mov	DWORD PTR [rax+20], ecx
; Line 48
	mov	rax, QWORD PTR type$[rsp]
; Line 49
	add	rsp, 56					; 00000038H
	ret	0
gen_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
k$ = 64
gen_type PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 32
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 33
	mov	r9d, 33					; 00000021H
	lea	r8, OFFSET FLAT:$SG49876
	lea	rdx, OFFSET FLAT:$SG49877
	mov	ecx, 32					; 00000020H
	call	ccmalloc_
	mov	QWORD PTR type$[rsp], rax
; Line 35
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 36
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 38
	mov	rax, QWORD PTR type$[rsp]
; Line 39
	add	rsp, 56					; 00000038H
	ret	0
gen_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
args$ = 48
c$ = 56
cc_cs$ = 64
cc_ce$ = 72
c_cs$ = 80
c_ce$ = 88
tv91 = 96
$T1 = 104
ret$ = 128
$T2 = 152
exec$ = 208
emit$ = 216
ccexec_translation_unit PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 394
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
; Line 395
	mov	rax, QWORD PTR exec$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 397
	mov	QWORD PTR args$[rsp], 0
; Line 398
	lea	r8, OFFSET FLAT:$SG49834
	mov	edx, 22
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 24
	lea	rcx, QWORD PTR args$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 24
	mov	rcx, QWORD PTR args$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
; Line 400
	call	ccclocktick
	mov	QWORD PTR cc_cs$[rsp], rax
; Line 403
	mov	r9, QWORD PTR args$[rsp]
	lea	r8, QWORD PTR ret$[rsp]
	mov	rax, QWORD PTR emit$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccexec_invoke
; Line 405
	call	ccclocktick
	mov	QWORD PTR cc_ce$[rsp], rax
; Line 407
	call	ccclocktick
	mov	QWORD PTR c_cs$[rsp], rax
; Line 408
	mov	rax, QWORD PTR args$[rsp]
	mov	ecx, DWORD PTR [rax+16]
	call	fib
	mov	DWORD PTR c$[rsp], eax
; Line 409
	call	ccclocktick
	mov	QWORD PTR c_ce$[rsp], rax
; Line 411
	mov	rax, QWORD PTR cc_cs$[rsp]
	mov	rcx, QWORD PTR cc_ce$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ccclocksecs
	movsd	QWORD PTR tv91[rsp], xmm0
	mov	rax, QWORD PTR c_cs$[rsp]
	mov	rcx, QWORD PTR c_ce$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ccclocksecs
	movsd	xmm1, QWORD PTR tv91[rsp]
	movsd	QWORD PTR [rsp+32], xmm1
	mov	r9d, DWORD PTR ret$[rsp+16]
	movaps	xmm2, xmm0
	movq	r8, xmm2
	mov	edx, DWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:$SG49835
	call	printf
; Line 413
	mov	eax, 1
; Line 414
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
ccexec_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 32
l$2 = 36
x$ = 64
fib	PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 384
$LN4:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	cmp	DWORD PTR x$[rsp], 2
	jl	SHORT $LN2@fib
; Line 385
	mov	eax, DWORD PTR x$[rsp]
	sub	eax, 2
	mov	ecx, eax
	call	fib
	mov	DWORD PTR l$2[rsp], eax
; Line 386
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	ecx, eax
	call	fib
	mov	DWORD PTR r$1[rsp], eax
; Line 387
	mov	eax, DWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR l$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	jmp	SHORT $LN1@fib
$LN2@fib:
; Line 389
	mov	eax, DWORD PTR x$[rsp]
$LN1@fib:
; Line 390
	add	rsp, 56					; 00000038H
	ret	0
fib	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
exec$ = 48
ccexec_init PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 378
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR exec$[rsp]
	call	memset
; Line 379
	mov	eax, 1
; Line 380
	add	rsp, 40					; 00000028H
	ret	0
ccexec_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
edict$ = 32
tv70 = 40
tv315 = 44
list$1 = 48
rval$2 = 56
saved$3 = 64
saved$4 = 72
tv351 = 80
saved$5 = 88
saved$6 = 96
ret$7 = 104
rval$8 = 112
$T9 = 136
lval$10 = 160
$T11 = 184
$T12 = 208
lval$13 = 232
$T14 = 256
rval$15 = 280
$T16 = 304
rval$17 = 328
$T18 = 352
$T19 = 376
rval$20 = 400
lval$21 = 424
$T22 = 448
$T23 = 480
$T24 = 512
$T25 = 536
$T26 = 560
$T27 = 584
rval$28 = 608
$T29 = 632
$T30 = 656
$T31 = 680
$T32 = 704
$T33 = 728
$T34 = 752
$T35 = 776
$T36 = 800
$T37 = 824
$T38 = 848
$T39 = 872
$T40 = 896
$T41 = 920
exec$ = 976
stack$ = 984
value$ = 992
ccexec_edict PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 160
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 952				; 000003b8H
; Line 161
	cmp	QWORD PTR stack$[rsp], 0
	jne	SHORT $LN28@ccexec_edi
	int	3
$LN28@ccexec_edi:
; Line 163
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN30@ccexec_edi
	int	3
$LN30@ccexec_edi:
; Line 164
	mov	rax, QWORD PTR value$[rsp]
	cmp	DWORD PTR [rax], 5
	je	SHORT $LN32@ccexec_edi
	int	3
$LN32@ccexec_edi:
; Line 166
	mov	rax, QWORD PTR value$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR edict$[rsp], rax
; Line 168
	mov	rax, QWORD PTR edict$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 11
	ja	$LN26@ccexec_edi
	movsxd	rax, DWORD PTR tv70[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN84@ccexec_edi[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN7@ccexec_edi:
; Line 172
	mov	r8, QWORD PTR value$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	ccstack_yield
	lea	rcx, QWORD PTR $T30[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 173
	jmp	$LN2@ccexec_edi
$LN8@ccexec_edi:
; Line 176
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_local_alloc
; Line 177
	jmp	$LN2@ccexec_edi
$LN9@ccexec_edi:
; Line 182
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN34@ccexec_edi
	int	3
$LN34@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+48]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	ccstack_yield_lvalue
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR lval$10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 184
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$3[rsp], rax
; Line 185
	mov	rax, QWORD PTR saved$3[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 186
	mov	r8, QWORD PTR lval$10[rsp+16]
	xor	edx, edx
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_load
	cdqe
	mov	rcx, QWORD PTR saved$3[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 187
	mov	rax, QWORD PTR saved$3[rsp]
	mov	QWORD PTR [rax], 0
; Line 188
	jmp	$LN2@ccexec_edi
$LN10@ccexec_edi:
; Line 192
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN36@ccexec_edi
	int	3
$LN36@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+32]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	ccstack_yield_lvalue
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR lval$13[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 193
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN38@ccexec_edi
	int	3
$LN38@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+40]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$8[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 196
	mov	rax, QWORD PTR lval$13[rsp+16]
	mov	ecx, DWORD PTR rval$8[rsp+16]
	mov	DWORD PTR [rax], ecx
; Line 198
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$4[rsp], rax
; Line 199
	mov	rax, QWORD PTR saved$4[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 200
	mov	rax, QWORD PTR saved$4[rsp]
	mov	rcx, QWORD PTR rval$8[rsp+16]
	mov	QWORD PTR [rax+16], rcx
; Line 201
	mov	rax, QWORD PTR saved$4[rsp]
	mov	rcx, QWORD PTR rval$8[rsp]
	mov	QWORD PTR [rax], rcx
; Line 202
	jmp	$LN2@ccexec_edi
$LN11@ccexec_edi:
; Line 206
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN40@ccexec_edi
	int	3
$LN40@ccexec_edi:
; Line 207
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax+88], 0
	jne	SHORT $LN42@ccexec_edi
	int	3
$LN42@ccexec_edi:
; Line 208
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax+88], 0
	jne	SHORT $LN44@ccexec_edi
	int	3
$LN44@ccexec_edi:
; Line 210
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	QWORD PTR [rax+8], rcx
; Line 211
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	ecx, DWORD PTR [rcx+88]
	mov	DWORD PTR [rax+16], ecx
; Line 212
	jmp	$LN2@ccexec_edi
$LN12@ccexec_edi:
; Line 216
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN46@ccexec_edi
	int	3
$LN46@ccexec_edi:
; Line 217
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax+88], 0
	jne	SHORT $LN48@ccexec_edi
	int	3
$LN48@ccexec_edi:
; Line 218
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+96], 0
	jne	SHORT $LN50@ccexec_edi
	int	3
$LN50@ccexec_edi:
; Line 221
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+96], 0
	jne	SHORT $LN52@ccexec_edi
	int	3
$LN52@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+96]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$15[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 222
	cmp	DWORD PTR rval$15[rsp+16], 0
	jne	SHORT $LN13@ccexec_edi
; Line 223
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	QWORD PTR [rax+8], rcx
; Line 224
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	ecx, DWORD PTR [rcx+88]
	mov	DWORD PTR [rax+16], ecx
$LN13@ccexec_edi:
; Line 226
	jmp	$LN2@ccexec_edi
$LN14@ccexec_edi:
; Line 230
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN54@ccexec_edi
	int	3
$LN54@ccexec_edi:
; Line 231
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax+88], 0
	jne	SHORT $LN56@ccexec_edi
	int	3
$LN56@ccexec_edi:
; Line 232
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+96], 0
	jne	SHORT $LN58@ccexec_edi
	int	3
$LN58@ccexec_edi:
; Line 235
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+96], 0
	jne	SHORT $LN60@ccexec_edi
	int	3
$LN60@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+96]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$17[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 236
	cmp	DWORD PTR rval$17[rsp+16], 0
	je	SHORT $LN15@ccexec_edi
; Line 237
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	QWORD PTR [rax+8], rcx
; Line 238
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	ecx, DWORD PTR [rcx+88]
	mov	DWORD PTR [rax+16], ecx
$LN15@ccexec_edi:
; Line 240
	jmp	$LN2@ccexec_edi
$LN16@ccexec_edi:
; Line 244
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax+136], 0
	jne	SHORT $LN62@ccexec_edi
	int	3
$LN62@ccexec_edi:
; Line 245
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+144], 0
	jne	SHORT $LN64@ccexec_edi
	int	3
$LN64@ccexec_edi:
; Line 246
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+152], 0
	jne	SHORT $LN66@ccexec_edi
	int	3
$LN66@ccexec_edi:
; Line 249
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+144]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR lval$21[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 250
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+152]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$20[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 252
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$5[rsp], rax
; Line 253
	lea	rax, QWORD PTR $T22[rsp]
	lea	rcx, QWORD PTR rval$20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR lval$21[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, QWORD PTR $T22[rsp]
	lea	r8, QWORD PTR $T23[rsp]
	mov	rax, QWORD PTR edict$[rsp]
	mov	edx, DWORD PTR [rax+136]
	lea	rcx, QWORD PTR $T38[rsp]
	call	ccexec_edict_arith
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T24[rsp]
	mov	rdi, QWORD PTR saved$5[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 254
	jmp	$LN2@ccexec_edi
$LN17@ccexec_edi:
; Line 258
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR saved$6[rsp], rax
; Line 259
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+72]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T25[rsp]
	mov	rdi, QWORD PTR saved$6[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 260
	xor	eax, eax
	jmp	$LN1@ccexec_edi
$LN18@ccexec_edi:
; Line 265
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+56], 0
	jne	SHORT $LN68@ccexec_edi
	int	3
$LN68@ccexec_edi:
; Line 268
	mov	QWORD PTR rval$2[rsp], 0
; Line 269
	mov	QWORD PTR list$1[rsp], 0
; Line 270
	mov	rax, QWORD PTR edict$[rsp]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR list$1[rsp], rax
	jmp	SHORT $LN6@ccexec_edi
$LN4@ccexec_edi:
	mov	rax, QWORD PTR list$1[rsp]
	add	rax, 8
	mov	QWORD PTR list$1[rsp], rax
$LN6@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN70@ccexec_edi
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv315[rsp], eax
	jmp	SHORT $LN71@ccexec_edi
$LN70@ccexec_edi:
	mov	DWORD PTR tv315[rsp], 0
$LN71@ccexec_edi:
	mov	eax, DWORD PTR tv315[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR list$1[rsp], rax
	jae	SHORT $LN5@ccexec_edi
; Line 271
	mov	rax, QWORD PTR list$1[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 24
	lea	rcx, QWORD PTR rval$2[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rval$2[rsp]
	lea	rdx, QWORD PTR $T26[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 24
	rep movsb
	jmp	$LN4@ccexec_edi
$LN5@ccexec_edi:
; Line 274
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR ret$7[rsp], rax
; Line 275
	mov	r9, QWORD PTR rval$2[rsp]
	mov	r8, QWORD PTR ret$7[rsp]
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+56]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccexec_invoke
	test	eax, eax
	jne	SHORT $LN19@ccexec_edi
; Line 277
	lea	rax, OFFSET FLAT:$SG49753
	test	rax, rax
	je	SHORT $LN72@ccexec_edi
	int	3
$LN72@ccexec_edi:
$LN19@ccexec_edi:
; Line 280
	cmp	QWORD PTR rval$2[rsp], 0
	je	SHORT $LN74@ccexec_edi
	mov	rax, QWORD PTR rval$2[rsp]
	sub	rax, 24
	mov	QWORD PTR tv351[rsp], rax
	jmp	SHORT $LN75@ccexec_edi
$LN74@ccexec_edi:
	mov	QWORD PTR tv351[rsp], 0
$LN75@ccexec_edi:
	mov	r9d, 280				; 00000118H
	lea	r8, OFFSET FLAT:$SG49754
	lea	rdx, OFFSET FLAT:$SG49755
	mov	rcx, QWORD PTR tv351[rsp]
	call	ccfree_
; Line 281
	jmp	$LN2@ccexec_edi
$LN20@ccexec_edi:
; Line 287
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+104], 0
	jne	SHORT $LN76@ccexec_edi
	int	3
$LN76@ccexec_edi:
; Line 289
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+104]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_enter
; Line 290
	jmp	$LN2@ccexec_edi
$LN21@ccexec_edi:
; Line 292
	lea	rax, OFFSET FLAT:$SG49758
	test	rax, rax
	je	SHORT $LN78@ccexec_edi
	int	3
$LN78@ccexec_edi:
; Line 295
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+112], 0
	jne	SHORT $LN80@ccexec_edi
	int	3
$LN80@ccexec_edi:
	mov	rax, QWORD PTR edict$[rsp]
	mov	r8, QWORD PTR [rax+112]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	ccstack_yield_rvalue
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR rval$28[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 298
	cmp	DWORD PTR rval$28[rsp+16], 0
	je	SHORT $LN22@ccexec_edi
; Line 299
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+120], 0
	je	SHORT $LN24@ccexec_edi
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+120]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_enter
$LN24@ccexec_edi:
; Line 300
	jmp	SHORT $LN23@ccexec_edi
$LN22@ccexec_edi:
; Line 302
	mov	rax, QWORD PTR edict$[rsp]
	cmp	QWORD PTR [rax+128], 0
	je	SHORT $LN25@ccexec_edi
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+128]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_enter
$LN25@ccexec_edi:
$LN23@ccexec_edi:
; Line 304
	jmp	SHORT $LN2@ccexec_edi
$LN26@ccexec_edi:
; Line 305
	lea	rax, OFFSET FLAT:$SG49764
	test	rax, rax
	je	SHORT $LN82@ccexec_edi
	int	3
$LN82@ccexec_edi:
$LN2@ccexec_edi:
; Line 307
	mov	eax, 1
$LN1@ccexec_edi:
; Line 308
	add	rsp, 952				; 000003b8H
	pop	rdi
	pop	rsi
	ret	0
	npad	2
$LN84@ccexec_edi:
	DD	$LN8@ccexec_edi
	DD	$LN7@ccexec_edi
	DD	$LN10@ccexec_edi
	DD	$LN9@ccexec_edi
	DD	$LN16@ccexec_edi
	DD	$LN11@ccexec_edi
	DD	$LN14@ccexec_edi
	DD	$LN12@ccexec_edi
	DD	$LN21@ccexec_edi
	DD	$LN20@ccexec_edi
	DD	$LN18@ccexec_edi
	DD	$LN17@ccexec_edi
ccexec_edict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
tv75 = 40
tv81 = 44
tv93 = 48
tv150 = 52
lval$ = 56
int_value$1 = 64
it$2 = 72
stack$ = 80
tv177 = 112
tv77 = 120
local$3 = 128
rval$4 = 136
tv144 = 144
edict$5 = 152
$T6 = 160
$T7 = 184
_e$ = 240
_p$ = 248
_r$ = 256
_i$ = 264
ccexec_invoke PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 334
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 336
	lea	rax, QWORD PTR stack$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 32					; 00000020H
	rep stosb
; Line 338
	mov	rax, QWORD PTR _p$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR type$[rsp], rax
; Line 340
	mov	rax, QWORD PTR type$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN10@ccexec_inv
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN11@ccexec_inv
$LN10@ccexec_inv:
	mov	DWORD PTR tv75[rsp], 0
$LN11@ccexec_inv:
	cmp	QWORD PTR _i$[rsp], 0
	je	SHORT $LN12@ccexec_inv
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _i$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN13@ccexec_inv
$LN12@ccexec_inv:
	mov	DWORD PTR tv81[rsp], 0
$LN13@ccexec_inv:
	mov	eax, DWORD PTR tv75[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	QWORD PTR tv77[rsp], rax
	mov	ecx, DWORD PTR tv81[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 24
	div	rcx
	mov	rcx, QWORD PTR tv77[rsp]
	cmp	rcx, rax
	je	SHORT $LN14@ccexec_inv
	int	3
$LN14@ccexec_inv:
; Line 343
	mov	rax, QWORD PTR type$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR lval$[rsp], rax
	jmp	SHORT $LN4@ccexec_inv
$LN2@ccexec_inv:
	mov	rax, QWORD PTR lval$[rsp]
	add	rax, 8
	mov	QWORD PTR lval$[rsp], rax
$LN4@ccexec_inv:
	mov	rax, QWORD PTR type$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN16@ccexec_inv
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv93[rsp], eax
	jmp	SHORT $LN17@ccexec_inv
$LN16@ccexec_inv:
	mov	DWORD PTR tv93[rsp], 0
$LN17@ccexec_inv:
	mov	eax, DWORD PTR tv93[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR lval$[rsp], rax
	jae	SHORT $LN3@ccexec_inv
; Line 345
	mov	rax, QWORD PTR lval$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR _p$[rsp]
	call	ccprocd_local
	mov	QWORD PTR local$3[rsp], rax
; Line 346
	mov	rdx, QWORD PTR local$3[rsp]
	lea	rcx, QWORD PTR stack$[rsp]
	call	ccstack_local_alloc
	mov	QWORD PTR rval$4[rsp], rax
; Line 348
	mov	rax, QWORD PTR _i$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR int_value$1[rsp], eax
; Line 349
	mov	rax, QWORD PTR rval$4[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, DWORD PTR int_value$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 350
	mov	rax, QWORD PTR _i$[rsp]
	add	rax, 24
	mov	QWORD PTR _i$[rsp], rax
; Line 351
	jmp	$LN2@ccexec_inv
$LN3@ccexec_inv:
; Line 353
	mov	rax, QWORD PTR _p$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, QWORD PTR stack$[rsp]
	call	ccexec_enter
$LN5@ccexec_inv:
; Line 355
	mov	rax, QWORD PTR stack$[rsp+8]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN18@ccexec_inv
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR stack$[rsp+8]
	mov	rcx, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv150[rsp], eax
	jmp	SHORT $LN19@ccexec_inv
$LN18@ccexec_inv:
	mov	DWORD PTR tv150[rsp], 0
$LN19@ccexec_inv:
	movsxd	rax, DWORD PTR stack$[rsp+16]
	mov	QWORD PTR tv144[rsp], rax
	mov	ecx, DWORD PTR tv150[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR tv144[rsp]
	cmp	rcx, rax
	jae	$LN6@ccexec_inv
; Line 357
	movsxd	rax, DWORD PTR stack$[rsp+16]
	mov	rcx, QWORD PTR stack$[rsp+8]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR it$2[rsp], rax
; Line 358
	mov	eax, DWORD PTR stack$[rsp+16]
	inc	eax
	mov	DWORD PTR stack$[rsp+16], eax
; Line 360
	mov	rax, QWORD PTR it$2[rsp]
	mov	r8, QWORD PTR [rax]
	lea	rdx, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR _e$[rsp]
	call	ccexec_edict
	test	eax, eax
	jne	SHORT $LN7@ccexec_inv
; Line 363
	mov	rax, QWORD PTR it$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR edict$5[rsp], rax
; Line 365
	mov	rax, QWORD PTR edict$5[rsp]
	cmp	DWORD PTR [rax], 11
	jne	SHORT $LN8@ccexec_inv
; Line 366
	mov	rax, QWORD PTR it$2[rsp]
	mov	r8, QWORD PTR [rax]
	lea	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	ccstack_yield
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	mov	rdi, QWORD PTR _r$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
$LN8@ccexec_inv:
; Line 367
	mov	eax, 1
	jmp	SHORT $LN1@ccexec_inv
$LN7@ccexec_inv:
; Line 369
	jmp	$LN5@ccexec_inv
$LN6@ccexec_inv:
; Line 371
	cmp	QWORD PTR stack$[rsp+24], 0
	je	SHORT $LN20@ccexec_inv
	mov	rax, QWORD PTR stack$[rsp+24]
	sub	rax, 24
	mov	QWORD PTR tv177[rsp], rax
	jmp	SHORT $LN21@ccexec_inv
$LN20@ccexec_inv:
	mov	QWORD PTR tv177[rsp], 0
$LN21@ccexec_inv:
	mov	r9d, 371				; 00000173H
	lea	r8, OFFSET FLAT:$SG49808
	lea	rdx, OFFSET FLAT:$SG49809
	mov	rcx, QWORD PTR tv177[rsp]
	call	ccfree_
; Line 373
	xor	eax, eax
$LN1@ccexec_inv:
; Line 374
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
ccexec_invoke ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 32
tv70 = 40
tv79 = 48
tv88 = 56
tv129 = 64
$T1 = 72
$T2 = 96
$T3 = 120
$T4 = 144
$T5 = 168
$T6 = 192
$T7 = 216
$T8 = 240
$T9 = 264
$T10 = 288
$T11 = 312
$T12 = 336
$T13 = 360
$T14 = 384
$T15 = 408
$T16 = 432
$T17 = 456
$T18 = 480
__$ReturnAddress$ = 544
opr$ = 552
lval$ = 560
rval$ = 568
ccexec_edict_arith PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 130
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 520				; 00000208H
; Line 131
	mov	eax, DWORD PTR opr$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	mov	eax, DWORD PTR tv64[rsp]
	sub	eax, 92					; 0000005cH
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 26
	ja	$LN12@ccexec_edi
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN24@ccexec_edi[rcx+rax]
	mov	eax, DWORD PTR $LN25@ccexec_edi[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@ccexec_edi:
; Line 133
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jle	SHORT $LN14@ccexec_edi
	mov	QWORD PTR tv70[rsp], 1
	jmp	SHORT $LN15@ccexec_edi
$LN14@ccexec_edi:
	mov	QWORD PTR tv70[rsp], 0
$LN15@ccexec_edi:
	lea	r8, OFFSET FLAT:$SG49670
	mov	rdx, QWORD PTR tv70[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN5@ccexec_edi:
; Line 135
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jl	SHORT $LN16@ccexec_edi
	mov	QWORD PTR tv79[rsp], 1
	jmp	SHORT $LN17@ccexec_edi
$LN16@ccexec_edi:
	mov	QWORD PTR tv79[rsp], 0
$LN17@ccexec_edi:
	lea	r8, OFFSET FLAT:$SG49672
	mov	rdx, QWORD PTR tv79[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN6@ccexec_edi:
; Line 137
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jle	SHORT $LN18@ccexec_edi
	mov	QWORD PTR tv88[rsp], 1
	jmp	SHORT $LN19@ccexec_edi
$LN18@ccexec_edi:
	mov	QWORD PTR tv88[rsp], 0
$LN19@ccexec_edi:
	lea	r8, OFFSET FLAT:$SG49674
	mov	rdx, QWORD PTR tv88[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN7@ccexec_edi:
; Line 139
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	cmp	QWORD PTR [rax+16], rcx
	jle	SHORT $LN20@ccexec_edi
	mov	QWORD PTR tv129[rsp], 1
	jmp	SHORT $LN21@ccexec_edi
$LN20@ccexec_edi:
	mov	QWORD PTR tv129[rsp], 0
$LN21@ccexec_edi:
	lea	r8, OFFSET FLAT:$SG49676
	mov	rdx, QWORD PTR tv129[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN8@ccexec_edi:
; Line 141
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rax, QWORD PTR [rax+16]
	imul	rax, QWORD PTR [rcx+16]
	lea	r8, OFFSET FLAT:$SG49678
	mov	rdx, rax
	lea	rcx, QWORD PTR $T14[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN9@ccexec_edi:
; Line 143
	mov	rax, QWORD PTR lval$[rsp]
	mov	rax, QWORD PTR [rax+16]
	cdq
	mov	rcx, QWORD PTR rval$[rsp]
	idiv	QWORD PTR [rcx+16]
	lea	r8, OFFSET FLAT:$SG49680
	mov	rdx, rax
	lea	rcx, QWORD PTR $T15[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN10@ccexec_edi:
; Line 145
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	rax, QWORD PTR [rax+16]
	sub	rax, rcx
	lea	r8, OFFSET FLAT:$SG49682
	mov	rdx, rax
	lea	rcx, QWORD PTR $T16[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@ccexec_edi
$LN11@ccexec_edi:
; Line 147
	mov	rax, QWORD PTR lval$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR rval$[rsp]
	add	rax, QWORD PTR [rcx+16]
	lea	r8, OFFSET FLAT:$SG49684
	mov	rdx, rax
	lea	rcx, QWORD PTR $T17[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@ccexec_edi
$LN12@ccexec_edi:
; Line 148
	lea	rax, OFFSET FLAT:$SG49686
	test	rax, rax
	je	SHORT $LN22@ccexec_edi
	int	3
$LN22@ccexec_edi:
; Line 150
	lea	r8, OFFSET FLAT:$SG49687
	xor	edx, edx
	lea	rcx, QWORD PTR $T18[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@ccexec_edi:
; Line 151
	add	rsp, 520				; 00000208H
	pop	rdi
	pop	rsi
	ret	0
	npad	2
$LN25@ccexec_edi:
	DD	$LN8@ccexec_edi
	DD	$LN9@ccexec_edi
	DD	$LN11@ccexec_edi
	DD	$LN10@ccexec_edi
	DD	$LN4@ccexec_edi
	DD	$LN6@ccexec_edi
	DD	$LN5@ccexec_edi
	DD	$LN7@ccexec_edi
	DD	$LN12@ccexec_edi
$LN24@ccexec_edi:
	DB	0
	DB	1
	DB	8
	DB	2
	DB	3
	DB	8
	DB	8
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	7
ccexec_edict_arith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stack$ = 8
block$ = 16
ccexec_enter PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 122
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 123
	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 124
	mov	rax, QWORD PTR stack$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 125
	ret	0
ccexec_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stack$ = 8
type$ = 16
address$ = 24
ccexec_load PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 116
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 117
	mov	rax, QWORD PTR address$[rsp]
	mov	eax, DWORD PTR [rax]
; Line 118
	ret	0
ccexec_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 32
edict$ = 40
result$ = 48
$T1 = 56
$T2 = 80
stack$ = 144
value$ = 152
ccstack_local_alloc PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 90
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 92
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN3@ccstack_lo
	int	3
$LN3@ccstack_lo:
; Line 93
	mov	rax, QWORD PTR value$[rsp]
	cmp	DWORD PTR [rax], 5
	je	SHORT $LN5@ccstack_lo
	int	3
$LN5@ccstack_lo:
; Line 99
	mov	rax, QWORD PTR value$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR edict$[rsp], rax
; Line 100
	cmp	QWORD PTR edict$[rsp], 0
	jne	SHORT $LN7@ccstack_lo
	int	3
$LN7@ccstack_lo:
; Line 101
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN9@ccstack_lo
	mov	rax, QWORD PTR edict$[rsp]
	cmp	DWORD PTR [rax], 1
	je	SHORT $LN9@ccstack_lo
	int	3
$LN9@ccstack_lo:
; Line 105
	mov	rax, QWORD PTR edict$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccexec_sizeof
	mov	DWORD PTR size$[rsp], eax
; Line 106
	cmp	DWORD PTR size$[rsp], 0
	jne	SHORT $LN11@ccstack_lo
	int	3
$LN11@ccstack_lo:
; Line 108
	mov	rdx, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	call	ccstack_mingle
	mov	QWORD PTR result$[rsp], rax
; Line 109
	mov	eax, DWORD PTR size$[rsp]
	mov	r9d, 109				; 0000006dH
	lea	r8, OFFSET FLAT:$SG49632
	lea	rdx, OFFSET FLAT:$SG49633
	mov	ecx, eax
	call	ccmalloc_
	lea	r8, OFFSET FLAT:$SG49631
	mov	rdx, rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccexec_lvalue
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR result$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 111
	mov	rax, QWORD PTR result$[rsp]
; Line 112
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
ccstack_local_alloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
result$ = 40
$T1 = 64
$T2 = 88
__$ReturnAddress$ = 144
stack$ = 152
couple$ = 160
ccstack_yield_lvalue PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 70
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 71
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
; Line 73
	mov	rax, QWORD PTR couple$[rsp]
	cmp	DWORD PTR [rax], 5
	jne	SHORT $LN4@ccstack_yi
; Line 74
	mov	rax, QWORD PTR couple$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv72[rsp], eax
	cmp	DWORD PTR tv72[rsp], 0
	je	SHORT $LN5@ccstack_yi
	cmp	DWORD PTR tv72[rsp], 1
	je	SHORT $LN6@ccstack_yi
	jmp	SHORT $LN2@ccstack_yi
$LN5@ccstack_yi:
$LN6@ccstack_yi:
; Line 77
	mov	r8, QWORD PTR couple$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	ccstack_yield
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR result$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
$LN2@ccstack_yi:
$LN4@ccstack_yi:
; Line 82
	cmp	DWORD PTR result$[rsp+8], 2
	je	SHORT $LN8@ccstack_yi
	int	3
$LN8@ccstack_yi:
; Line 83
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 84
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
ccstack_yield_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv69 = 36
result$ = 40
$T1 = 64
$T2 = 88
$T3 = 112
$T4 = 136
__$ReturnAddress$ = 192
stack$ = 200
couple$ = 208
ccstack_yield_rvalue PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 44
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 45
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 24
	rep stosb
; Line 47
	mov	rax, QWORD PTR couple$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv69[rsp], eax
	cmp	DWORD PTR tv69[rsp], 2
	je	SHORT $LN10@ccstack_yi
	cmp	DWORD PTR tv69[rsp], 5
	je	SHORT $LN6@ccstack_yi
	jmp	$LN2@ccstack_yi
$LN6@ccstack_yi:
; Line 49
	mov	rax, QWORD PTR couple$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv72[rsp], eax
	cmp	DWORD PTR tv72[rsp], 3
	je	SHORT $LN7@ccstack_yi
	cmp	DWORD PTR tv72[rsp], 4
	je	SHORT $LN8@ccstack_yi
	cmp	DWORD PTR tv72[rsp], 10
	je	SHORT $LN9@ccstack_yi
	jmp	SHORT $LN4@ccstack_yi
$LN7@ccstack_yi:
$LN8@ccstack_yi:
$LN9@ccstack_yi:
; Line 53
	mov	r8, QWORD PTR couple$[rsp]
	mov	rdx, QWORD PTR stack$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	ccstack_yield
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR result$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
$LN4@ccstack_yi:
; Line 56
	jmp	SHORT $LN2@ccstack_yi
$LN10@ccstack_yi:
; Line 58
	lea	r8, OFFSET FLAT:$SG49611
	mov	rax, QWORD PTR couple$[rsp]
	mov	rdx, QWORD PTR [rax+40]
	lea	rcx, QWORD PTR $T4[rsp]
	call	ccexec_rvalue
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR result$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
$LN2@ccstack_yi:
; Line 63
	cmp	DWORD PTR result$[rsp+8], 1
	je	SHORT $LN12@ccstack_yi
	int	3
$LN12@ccstack_yi:
; Line 65
	lea	rax, QWORD PTR result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 66
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
ccstack_yield_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
__$ReturnAddress$ = 96
stack$ = 104
value$ = 112
ccstack_yield PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 27
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 28
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN4@ccstack_yi
	int	3
$LN4@ccstack_yi:
; Line 30
	mov	rax, QWORD PTR stack$[rsp]
	add	rax, 24
	mov	r9, QWORD PTR value$[rsp]
	mov	r8d, -8
	mov	edx, 24
	mov	rcx, rax
	call	ccdlb_tblget
	mov	eax, eax
	imul	rax, rax, 24
	mov	rcx, QWORD PTR stack$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR result$[rsp], rax
; Line 31
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN6@ccstack_yi
	int	3
$LN6@ccstack_yi:
; Line 33
	mov	rax, QWORD PTR result$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jne	SHORT $LN2@ccstack_yi
; Line 34
	lea	rax, OFFSET FLAT:$SG49590
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49591
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49592
	mov	r8d, 34					; 00000022H
	lea	rdx, OFFSET FLAT:$SG49593
	mov	ecx, 48					; 00000030H
	call	cctrace_
	int	3
$LN2@ccstack_yi:
; Line 36
	mov	rax, QWORD PTR result$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jne	SHORT $LN8@ccstack_yi
	int	3
$LN8@ccstack_yi:
; Line 38
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, QWORD PTR result$[rsp]
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 39
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
ccstack_yield ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
stack$ = 64
value$ = 72
ccstack_mingle PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 14
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 15
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN3@ccstack_mi
	int	3
$LN3@ccstack_mi:
; Line 18
	mov	rax, QWORD PTR stack$[rsp]
	add	rax, 24
	mov	r9, QWORD PTR value$[rsp]
	mov	r8d, -8
	mov	edx, 24
	mov	rcx, rax
	call	ccdlb_tblput
	mov	eax, eax
	imul	rax, rax, 24
	mov	rcx, QWORD PTR stack$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR result$[rsp], rax
; Line 19
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN5@ccstack_mi
	int	3
$LN5@ccstack_mi:
; Line 21
	mov	rax, QWORD PTR result$[rsp]
; Line 22
	add	rsp, 56					; 00000038H
	ret	0
ccstack_mingle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_s$ = 8
_t$ = 16
ccexec_sizeof PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 312
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 313
	mov	rax, QWORD PTR _t$[rsp]
	cmp	DWORD PTR [rax], 5
	jne	SHORT $LN2@ccexec_siz
; Line 315
	mov	eax, 8
	jmp	SHORT $LN1@ccexec_siz
; Line 316
	jmp	SHORT $LN3@ccexec_siz
$LN2@ccexec_siz:
; Line 317
	mov	rax, QWORD PTR _t$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN4@ccexec_siz
; Line 321
	jmp	SHORT $LN5@ccexec_siz
$LN4@ccexec_siz:
; Line 322
	mov	rax, QWORD PTR _t$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN6@ccexec_siz
; Line 324
	mov	eax, 8
	jmp	SHORT $LN1@ccexec_siz
$LN6@ccexec_siz:
$LN5@ccexec_siz:
$LN3@ccexec_siz:
; Line 327
	lea	rax, OFFSET FLAT:$SG49776
	test	rax, rax
	je	SHORT $LN8@ccexec_siz
	int	3
$LN8@ccexec_siz:
; Line 328
	xor	eax, eax
$LN1@ccexec_siz:
; Line 329
	ret	0
ccexec_sizeof ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
emit$ = 48
ccemit_init PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 289
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 24
	xor	edx, edx
	mov	rcx, QWORD PTR emit$[rsp]
	call	memset
; Line 290
	add	rsp, 40					; 00000028H
	ret	0
ccemit_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
decl$ = 40
emit$ = 64
tree$ = 72
ccemit_translation_unit PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 280
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 281
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve
; Line 284
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR decl$[rsp], rax
	jmp	SHORT $LN4@ccemit_tra
$LN2@ccemit_tra:
	mov	rax, QWORD PTR decl$[rsp]
	add	rax, 8
	mov	QWORD PTR decl$[rsp], rax
$LN4@ccemit_tra:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@ccemit_tra
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN7@ccemit_tra
$LN6@ccemit_tra:
	mov	DWORD PTR tv73[rsp], 0
$LN7@ccemit_tra:
	mov	eax, DWORD PTR tv73[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR decl$[rsp], rax
	jae	SHORT $LN3@ccemit_tra
	mov	rax, QWORD PTR decl$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_external_decl
	jmp	SHORT $LN2@ccemit_tra
$LN3@ccemit_tra:
; Line 285
	add	rsp, 56					; 00000038H
	ret	0
ccemit_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
decl$ = 40
decl_$ = 48
p$1 = 56
emit$ = 80
tree$ = 88
ccemit_external_decl PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 256
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 259
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR decl_$[rsp], rax
	jmp	SHORT $LN4@ccemit_ext
$LN2@ccemit_ext:
	mov	rax, QWORD PTR decl_$[rsp]
	add	rax, 8
	mov	QWORD PTR decl_$[rsp], rax
$LN4@ccemit_ext:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN9@ccemit_ext
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN10@ccemit_ext
$LN9@ccemit_ext:
	mov	DWORD PTR tv72[rsp], 0
$LN10@ccemit_ext:
	mov	eax, DWORD PTR tv72[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR decl_$[rsp], rax
	jae	$LN3@ccemit_ext
; Line 260
	mov	rax, QWORD PTR decl_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR decl$[rsp], rax
; Line 262
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN5@ccemit_ext
; Line 264
	mov	rax, QWORD PTR decl$[rsp]
	mov	r8, QWORD PTR [rax+24]
	mov	rdx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_global_procd
	mov	QWORD PTR p$1[rsp], rax
; Line 265
	mov	r8, QWORD PTR decl$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_function
; Line 267
	lea	rdx, OFFSET FLAT:$SG49554
	mov	rax, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN7@ccemit_ext
; Line 268
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN7@ccemit_ext:
; Line 270
	jmp	SHORT $LN6@ccemit_ext
$LN5@ccemit_ext:
; Line 273
	lea	rax, OFFSET FLAT:$SG49555
	test	rax, rax
	je	SHORT $LN11@ccemit_ext
	int	3
$LN11@ccemit_ext:
$LN6@ccemit_ext:
; Line 275
	jmp	$LN2@ccemit_ext
$LN3@ccemit_ext:
; Line 276
	add	rsp, 72					; 00000048H
	ret	0
ccemit_external_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv87 = 32
tv142 = 36
list$ = 40
tv164 = 48
tv158 = 56
emit$ = 80
procd$ = 88
tree$ = 96
ccemit_function PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 231
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 232
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN9@ccemit_fun
	int	3
$LN9@ccemit_fun:
; Line 234
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN11@ccemit_fun
	int	3
$LN11@ccemit_fun:
; Line 235
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 3
	je	SHORT $LN13@ccemit_fun
	int	3
$LN13@ccemit_fun:
; Line 237
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN15@ccemit_fun
	int	3
$LN15@ccemit_fun:
; Line 238
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	cmp	DWORD PTR [rax], 10
	je	SHORT $LN17@ccemit_fun
	int	3
$LN17@ccemit_fun:
; Line 242
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN4@ccemit_fun
$LN2@ccemit_fun:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 8
	mov	QWORD PTR list$[rsp], rax
$LN4@ccemit_fun:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN19@ccemit_fun
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	rax, QWORD PTR [rax+32]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv87[rsp], eax
	jmp	SHORT $LN20@ccemit_fun
$LN19@ccemit_fun:
	mov	DWORD PTR tv87[rsp], 0
$LN20@ccemit_fun:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv164[rsp], rax
	mov	ecx, DWORD PTR tv87[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR tv164[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN3@ccemit_fun
; Line 243
	mov	rax, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR [rax]
	mov	rdx, QWORD PTR procd$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_param
	jmp	$LN2@ccemit_fun
$LN3@ccemit_fun:
; Line 246
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR procd$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	mov	QWORD PTR [rax+8], rcx
; Line 247
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN7@ccemit_fun
$LN5@ccemit_fun:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 8
	mov	QWORD PTR list$[rsp], rax
$LN7@ccemit_fun:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN21@ccemit_fun
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	rax, QWORD PTR [rax+32]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv142[rsp], eax
	jmp	SHORT $LN22@ccemit_fun
$LN21@ccemit_fun:
	mov	DWORD PTR tv142[rsp], 0
$LN22@ccemit_fun:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv158[rsp], rax
	mov	ecx, DWORD PTR tv142[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR tv158[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN6@ccemit_fun
; Line 248
	mov	rax, QWORD PTR list$[rsp]
	mov	r9, QWORD PTR [rax]
	mov	rax, QWORD PTR emit$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR procd$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	jmp	$LN5@ccemit_fun
$LN6@ccemit_fun:
; Line 250
	mov	rax, QWORD PTR procd$[rsp]
	mov	rdx, QWORD PTR [rax+40]
	mov	rax, QWORD PTR procd$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	ccblock_enter
; Line 251
	add	rsp, 72					; 00000048H
	ret	0
ccemit_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lval$ = 32
emit$ = 64
func$ = 72
tree$ = 80
ccemit_param PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 138
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, 1
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR func$[rsp]
	call	ccprocd_include_local
	mov	QWORD PTR lval$[rsp], rax
; Line 139
	mov	rax, QWORD PTR lval$[rsp]
; Line 140
	add	rsp, 56					; 00000038H
	ret	0
ccemit_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
list$ = 40
emit$ = 64
func$ = 72
block$ = 80
decl$ = 88
ccemit_decl PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 132
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 133
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN4@ccemit_dec
$LN2@ccemit_dec:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 8
	mov	QWORD PTR list$[rsp], rax
$LN4@ccemit_dec:
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@ccemit_dec
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN7@ccemit_dec
$LN6@ccemit_dec:
	mov	DWORD PTR tv72[rsp], 0
$LN7@ccemit_dec:
	mov	eax, DWORD PTR tv72[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN3@ccemit_dec
	mov	rax, QWORD PTR list$[rsp]
	mov	r9, QWORD PTR [rax]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_decl_name
	jmp	SHORT $LN2@ccemit_dec
$LN3@ccemit_dec:
; Line 134
	add	rsp, 56					; 00000038H
	ret	0
ccemit_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lval$ = 32
rval$1 = 40
emit$ = 64
func$ = 72
block$ = 80
tree$ = 88
ccemit_decl_name PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 121
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR func$[rsp]
	call	ccprocd_include_local
	mov	QWORD PTR lval$[rsp], rax
; Line 123
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN2@ccemit_dec
; Line 124
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+64]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR rval$1[rsp], rax
; Line 125
	mov	r8, QWORD PTR rval$1[rsp]
	mov	rdx, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_store
$LN2@ccemit_dec:
; Line 127
	mov	rax, QWORD PTR lval$[rsp]
; Line 128
	add	rsp, 56					; 00000038H
	ret	0
ccemit_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
it$ = 40
emit$ = 64
func$ = 72
irset$ = 80
list$ = 88
ccemit_treelist PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 114
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 116
	mov	rax, QWORD PTR list$[rsp]
	mov	QWORD PTR it$[rsp], rax
	jmp	SHORT $LN4@ccemit_tre
$LN2@ccemit_tre:
	mov	rax, QWORD PTR it$[rsp]
	add	rax, 8
	mov	QWORD PTR it$[rsp], rax
$LN4@ccemit_tre:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN6@ccemit_tre
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN7@ccemit_tre
$LN6@ccemit_tre:
	mov	DWORD PTR tv68[rsp], 0
$LN7@ccemit_tre:
	mov	eax, DWORD PTR tv68[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR list$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR it$[rsp], rax
	jae	SHORT $LN3@ccemit_tre
	mov	rax, QWORD PTR it$[rsp]
	mov	r9, QWORD PTR [rax]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	jmp	SHORT $LN2@ccemit_tre
$LN3@ccemit_tre:
; Line 117
	add	rsp, 56					; 00000038H
	ret	0
ccemit_treelist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv188 = 32
lval$1 = 40
rval$2 = 48
rval$3 = 56
cvalue$4 = 64
jump$5 = 72
emit$ = 96
func$ = 104
irset$ = 112
tree$ = 120
ccemit_tree PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 145
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 146
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN2@ccemit_tre
; Line 148
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_decl
; Line 150
	xor	eax, eax
	jmp	$LN1@ccemit_tre
; Line 151
	jmp	$LN3@ccemit_tre
$LN2@ccemit_tre:
; Line 152
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 10
	jne	SHORT $LN4@ccemit_tre
; Line 154
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+32]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_treelist
; Line 155
	xor	eax, eax
	jmp	$LN1@ccemit_tre
; Line 156
	jmp	$LN5@ccemit_tre
$LN4@ccemit_tre:
; Line 157
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 11
	jne	SHORT $LN6@ccemit_tre
; Line 162
	jmp	$LN7@ccemit_tre
$LN6@ccemit_tre:
; Line 163
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 12
	jne	SHORT $LN8@ccemit_tre
; Line 165
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR rval$3[rsp], rax
; Line 167
	mov	rdx, QWORD PTR rval$3[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_return
	jmp	$LN1@ccemit_tre
; Line 168
	jmp	$LN9@ccemit_tre
$LN8@ccemit_tre:
; Line 169
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 13
	jne	SHORT $LN10@ccemit_tre
; Line 172
	jmp	$LN11@ccemit_tre
$LN10@ccemit_tre:
; Line 173
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 21
	jne	SHORT $LN12@ccemit_tre
; Line 175
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_invoke_easy
	jmp	$LN1@ccemit_tre
; Line 176
	jmp	$LN13@ccemit_tre
$LN12@ccemit_tre:
; Line 177
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 18
	jne	$LN14@ccemit_tre
; Line 180
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+72]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_lvalue
	mov	QWORD PTR lval$1[rsp], rax
; Line 181
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR rval$2[rsp], rax
; Line 183
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax+40], 109			; 0000006dH
	jne	SHORT $LN16@ccemit_tre
; Line 185
	mov	r8, QWORD PTR rval$2[rsp]
	mov	rdx, QWORD PTR lval$1[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_store
	jmp	$LN1@ccemit_tre
; Line 186
	jmp	SHORT $LN17@ccemit_tre
$LN16@ccemit_tre:
; Line 189
	mov	rdx, QWORD PTR lval$1[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_fetch
	mov	QWORD PTR lval$1[rsp], rax
; Line 190
	mov	r9, QWORD PTR rval$2[rsp]
	mov	r8, QWORD PTR lval$1[rsp]
	mov	rax, QWORD PTR tree$[rsp]
	mov	edx, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_arith
	jmp	$LN1@ccemit_tre
$LN17@ccemit_tre:
; Line 193
	jmp	$LN15@ccemit_tre
$LN14@ccemit_tre:
; Line 194
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 17
	jne	$LN18@ccemit_tre
; Line 195
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+64]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	mov	QWORD PTR cvalue$4[rsp], rax
; Line 198
	mov	r9, QWORD PTR cvalue$4[rsp]
	mov	r8d, 65535				; 0000ffffH
	mov	rdx, QWORD PTR irset$[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccblock_fjump
	mov	QWORD PTR jump$5[rsp], rax
; Line 200
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN20@ccemit_tre
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+72]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
$LN20@ccemit_tre:
; Line 201
	mov	rax, QWORD PTR irset$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN24@ccemit_tre
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR irset$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv188[rsp], eax
	jmp	SHORT $LN25@ccemit_tre
$LN24@ccemit_tre:
	mov	DWORD PTR tv188[rsp], 0
$LN25@ccemit_tre:
	mov	eax, DWORD PTR tv188[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR jump$5[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	DWORD PTR [rcx+88], eax
; Line 202
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN21@ccemit_tre
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
$LN21@ccemit_tre:
; Line 204
	xor	eax, eax
	jmp	SHORT $LN1@ccemit_tre
; Line 205
	jmp	SHORT $LN19@ccemit_tre
$LN18@ccemit_tre:
; Line 206
	mov	rax, QWORD PTR tree$[rsp]
$LN19@ccemit_tre:
$LN15@ccemit_tre:
$LN13@ccemit_tre:
$LN11@ccemit_tre:
$LN9@ccemit_tre:
$LN7@ccemit_tre:
$LN5@ccemit_tre:
$LN3@ccemit_tre:
; Line 223
	lea	rax, OFFSET FLAT:$SG49525
	test	rax, rax
	je	SHORT $LN26@ccemit_tre
	int	3
$LN26@ccemit_tre:
; Line 224
	xor	eax, eax
$LN1@ccemit_tre:
; Line 225
	add	rsp, 88					; 00000058H
	ret	0
ccemit_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
rtree$ = 40
list$ = 48
rvalue$ = 56
allude$ = 64
ltree$ = 72
tv92 = 80
call$ = 88
emit$ = 112
func$ = 120
block$ = 128
tree$ = 136
ccemit_invoke_easy PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 51
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 52
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR ltree$[rsp], rax
; Line 53
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR rtree$[rsp], rax
; Line 55
	mov	rax, QWORD PTR ltree$[rsp]
	cmp	DWORD PTR [rax], 6
	je	SHORT $LN6@ccemit_inv
	int	3
$LN6@ccemit_inv:
; Line 57
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_resolve_symbol
	mov	QWORD PTR allude$[rsp], rax
; Line 58
	cmp	QWORD PTR allude$[rsp], 0
	jne	SHORT $LN8@ccemit_inv
	int	3
$LN8@ccemit_inv:
; Line 60
	mov	rdx, QWORD PTR allude$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_global
	mov	QWORD PTR call$[rsp], rax
; Line 62
	mov	QWORD PTR rvalue$[rsp], 0
; Line 65
	mov	rax, QWORD PTR rtree$[rsp]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN4@ccemit_inv
$LN2@ccemit_inv:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 184				; 000000b8H
	mov	QWORD PTR list$[rsp], rax
$LN4@ccemit_inv:
	cmp	QWORD PTR rtree$[rsp], 0
	je	SHORT $LN10@ccemit_inv
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR rtree$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN11@ccemit_inv
$LN10@ccemit_inv:
	mov	DWORD PTR tv78[rsp], 0
$LN11@ccemit_inv:
	mov	eax, DWORD PTR tv78[rsp]
	xor	edx, edx
	mov	ecx, 184				; 000000b8H
	div	rcx
	imul	rax, rax, 184				; 000000b8H
	mov	rcx, QWORD PTR rtree$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN3@ccemit_inv
; Line 66
	mov	r9, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR tv92[rsp], rax
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR rvalue$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR rvalue$[rsp]
	mov	rdx, QWORD PTR tv92[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	jmp	$LN2@ccemit_inv
$LN3@ccemit_inv:
; Line 68
	mov	r8, QWORD PTR rvalue$[rsp]
	mov	rax, QWORD PTR call$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_invoke
; Line 69
	add	rsp, 104				; 00000068H
	ret	0
ccemit_invoke_easy ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
value$ = 40
tv72 = 48
emit$ = 80
func$ = 88
block$ = 96
tree$ = 104
ccemit_rvalue PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 85
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR value$[rsp], 0
; Line 86
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	$LN6@ccemit_rva
	cmp	DWORD PTR tv65[rsp], 7
	je	SHORT $LN4@ccemit_rva
	cmp	DWORD PTR tv65[rsp], 18
	je	SHORT $LN5@ccemit_rva
	cmp	DWORD PTR tv65[rsp], 21
	je	$LN7@ccemit_rva
	jmp	$LN8@ccemit_rva
$LN4@ccemit_rva:
; Line 88
	mov	rax, QWORD PTR tree$[rsp]
	movsxd	rax, DWORD PTR [rax+96]
	mov	rdx, rax
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_const_i32
	mov	QWORD PTR value$[rsp], rax
; Line 89
	jmp	$LN2@ccemit_rva
$LN5@ccemit_rva:
; Line 91
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	QWORD PTR tv72[rsp], rax
	mov	rcx, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rcx+72]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_rvalue
	mov	rcx, QWORD PTR tv72[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	rax, QWORD PTR tree$[rsp]
	mov	edx, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_arith
	mov	QWORD PTR value$[rsp], rax
; Line 95
	jmp	SHORT $LN2@ccemit_rva
$LN6@ccemit_rva:
; Line 97
	mov	r8, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_resolve
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_fetch
	mov	QWORD PTR value$[rsp], rax
; Line 98
	jmp	SHORT $LN2@ccemit_rva
$LN7@ccemit_rva:
; Line 100
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR block$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_invoke_easy
	mov	QWORD PTR value$[rsp], rax
; Line 101
	jmp	SHORT $LN2@ccemit_rva
$LN8@ccemit_rva:
; Line 102
	lea	rax, OFFSET FLAT:$SG49447
	test	rax, rax
	je	SHORT $LN10@ccemit_rva
	int	3
$LN10@ccemit_rva:
$LN2@ccemit_rva:
; Line 104
	mov	rax, QWORD PTR value$[rsp]
; Line 105
	add	rsp, 72					; 00000048H
	ret	0
ccemit_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
value$ = 40
emit$ = 64
func$ = 72
block$ = 80
tree$ = 88
ccemit_lvalue PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 73
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR value$[rsp], 0
; Line 74
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	SHORT $LN4@ccemit_lva
	jmp	SHORT $LN5@ccemit_lva
$LN4@ccemit_lva:
; Line 76
	mov	r8, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_resolve
	mov	QWORD PTR value$[rsp], rax
; Line 77
	jmp	SHORT $LN2@ccemit_lva
$LN5@ccemit_lva:
; Line 78
	lea	rax, OFFSET FLAT:$SG49432
	test	rax, rax
	je	SHORT $LN7@ccemit_lva
	int	3
$LN7@ccemit_lva:
$LN2@ccemit_lva:
; Line 80
	mov	rax, QWORD PTR value$[rsp]
; Line 81
	add	rsp, 56					; 00000038H
	ret	0
ccemit_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
couple$ = 40
result$ = 48
emit$ = 80
func$ = 88
tree$ = 96
ccemit_resolve PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 32
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN3@ccemit_res
	int	3
$LN3@ccemit_res:
; Line 33
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 6
	jne	SHORT $LN5@ccemit_res
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN6@ccemit_res
$LN5@ccemit_res:
	mov	DWORD PTR tv67[rsp], 0
$LN6@ccemit_res:
	cmp	DWORD PTR tv67[rsp], 0
	jne	SHORT $LN7@ccemit_res
	int	3
$LN7@ccemit_res:
; Line 35
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_resolve_symbol
	mov	QWORD PTR couple$[rsp], rax
; Line 36
	cmp	QWORD PTR couple$[rsp], 0
	jne	SHORT $LN9@ccemit_res
	int	3
$LN9@ccemit_res:
; Line 38
	mov	rdx, QWORD PTR couple$[rsp]
	mov	rcx, QWORD PTR func$[rsp]
	call	ccprocd_local
	mov	QWORD PTR result$[rsp], rax
; Line 39
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN11@ccemit_res
	int	3
$LN11@ccemit_res:
; Line 40
	mov	rax, QWORD PTR result$[rsp]
; Line 41
	add	rsp, 72					; 00000048H
	ret	0
ccemit_resolve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
classic$ = 32
emit$ = 64
value$ = 72
ccemit_const_i32 PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 25
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 26
	mov	rax, QWORD PTR value$[rsp]
	mov	QWORD PTR classic$[rsp], rax
; Line 27
	mov	r8, QWORD PTR classic$[rsp]
	mov	rdx, QWORD PTR ctype_int32
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_constant
; Line 28
	add	rsp, 56					; 00000038H
	ret	0
ccemit_const_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
emit$ = 64
type$ = 72
clsc$ = 80
ccemit_constant PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 11
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 13
	mov	r9d, 13
	lea	r8, OFFSET FLAT:$SG49379
	lea	rdx, OFFSET FLAT:$SG49380
	mov	ecx, 48					; 00000030H
	call	ccmalloc_
	mov	QWORD PTR value$[rsp], rax
; Line 14
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	mov	rcx, QWORD PTR value$[rsp]
	call	memset
; Line 16
	mov	rax, QWORD PTR value$[rsp]
	mov	DWORD PTR [rax], 2
; Line 17
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 18
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR clsc$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 19
	mov	rax, QWORD PTR value$[rsp]
; Line 20
	add	rsp, 56					; 00000038H
	ret	0
ccemit_constant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
next$1 = 40
reader$ = 64
ccread_translation_unit PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1221
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1222
	call	cctree_translation_unit
	mov	QWORD PTR tree$[rsp], rax
$LN2@ccread_tra:
; Line 1224
	xor	r8d, r8d
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_external_declaration
	mov	QWORD PTR next$1[rsp], rax
	cmp	QWORD PTR next$1[rsp], 0
	je	SHORT $LN3@ccread_tra
; Line 1225
	mov	rax, QWORD PTR tree$[rsp]
	add	rax, 32					; 00000020H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rdx, QWORD PTR next$1[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	jmp	SHORT $LN2@ccread_tra
$LN3@ccread_tra:
; Line 1227
	mov	rax, QWORD PTR tree$[rsp]
; Line 1228
	add	rsp, 56					; 00000038H
	ret	0
ccread_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 48
decl$ = 56
name$ = 64
reader$ = 96
root$ = 104
mark$ = 112
ccread_external_declaration PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1232
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1233
	mov	eax, DWORD PTR mark$[rsp]
	or	eax, 4
	or	eax, 16
	mov	r8d, eax
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl
	mov	QWORD PTR decl$[rsp], rax
; Line 1235
	cmp	QWORD PTR decl$[rsp], 0
	jne	SHORT $LN2@ccread_ext
	xor	eax, eax
	jmp	$LN1@ccread_ext
$LN2@ccread_ext:
; Line 1237
	mov	rax, QWORD PTR decl$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN9@ccread_ext
	int	3
$LN9@ccread_ext:
; Line 1238
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN11@ccread_ext
	int	3
$LN11@ccread_ext:
; Line 1240
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR name$[rsp], rax
; Line 1242
	mov	rax, QWORD PTR name$[rsp]
	cmp	DWORD PTR [rax], 15
	je	SHORT $LN13@ccread_ext
	int	3
$LN13@ccread_ext:
; Line 1243
	mov	rax, QWORD PTR name$[rsp]
	cmp	QWORD PTR [rax+48], 0
	jne	SHORT $LN15@ccread_ext
	int	3
$LN15@ccread_ext:
; Line 1244
	mov	rax, QWORD PTR name$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN17@ccread_ext
	int	3
$LN17@ccread_ext:
; Line 1246
	mov	rax, QWORD PTR name$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN3@ccread_ext
; Line 1249
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN19@ccread_ext
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN20@ccread_ext
$LN19@ccread_ext:
	mov	DWORD PTR tv91[rsp], 0
$LN20@ccread_ext:
	mov	eax, DWORD PTR tv91[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	cmp	rax, 1
	je	SHORT $LN21@ccread_ext
	int	3
$LN21@ccread_ext:
; Line 1251
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rcx+88], rax
; Line 1253
	mov	rax, QWORD PTR name$[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN5@ccread_ext
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN5@ccread_ext
	lea	rax, OFFSET FLAT:$SG49355
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49356
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49357
	mov	r8d, 1253				; 000004e5H
	lea	rdx, OFFSET FLAT:$SG49358
	mov	ecx, 45					; 0000002dH
	call	cctrace_
	int	3
	int	3
$LN5@ccread_ext:
; Line 1254
	jmp	SHORT $LN4@ccread_ext
$LN3@ccread_ext:
; Line 1257
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN6@ccread_ext
	lea	rax, OFFSET FLAT:$SG49360
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49361
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49362
	mov	r8d, 1257				; 000004e9H
	lea	rdx, OFFSET FLAT:$SG49363
	mov	ecx, 46					; 0000002eH
	call	cctrace_
	int	3
	int	3
$LN6@ccread_ext:
$LN4@ccread_ext:
; Line 1260
	cmp	QWORD PTR decl$[rsp], 0
	jne	SHORT $LN7@ccread_ext
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee_end
	test	eax, eax
	jne	SHORT $LN7@ccread_ext
	lea	rax, OFFSET FLAT:$SG49365
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49366
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49367
	mov	r8d, 1260				; 000004ecH
	lea	rdx, OFFSET FLAT:$SG49368
	mov	ecx, 47					; 0000002fH
	call	cctrace_
	int	3
	int	3
$LN7@ccread_ext:
; Line 1261
	mov	rax, QWORD PTR decl$[rsp]
$LN1@ccread_ext:
; Line 1262
	add	rsp, 88					; 00000058H
	ret	0
ccread_external_declaration ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stmt$ = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_block_or_single_stmt PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1075
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block
	mov	QWORD PTR stmt$[rsp], rax
; Line 1076
	cmp	QWORD PTR stmt$[rsp], 0
	jne	SHORT $LN2@ccread_blo
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_statement
	mov	QWORD PTR stmt$[rsp], rax
$LN2@ccread_blo:
; Line 1077
	mov	rax, QWORD PTR stmt$[rsp]
; Line 1078
	add	rsp, 56					; 00000038H
	ret	0
ccread_block_or_single_stmt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
child$ = 48
then_tree$1 = 56
cond_tree$2 = 64
else_tree$3 = 72
then_tree$4 = 80
cond_tree$5 = 88
expr_tree$6 = 96
ident$7 = 104
list$8 = 112
reader$ = 144
root$ = 152
mark$ = 160
ccread_statement PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1083
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 1084
	mov	QWORD PTR child$[rsp], 0
; Line 1086
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_sta
; Line 1089
	jmp	$LN3@ccread_sta
$LN2@ccread_sta:
; Line 1090
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN4@ccread_sta
; Line 1091
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block
	mov	QWORD PTR child$[rsp], rax
; Line 1092
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN6@ccread_sta
	lea	rax, OFFSET FLAT:$SG49204
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49205
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49206
	mov	r8d, 1092				; 00000444H
	lea	rdx, OFFSET FLAT:$SG49207
	mov	ecx, 27
	call	cctrace_
	int	3
	int	3
$LN6@ccread_sta:
; Line 1093
	mov	rax, QWORD PTR child$[rsp]
	jmp	$LN1@ccread_sta
; Line 1094
	jmp	$LN5@ccread_sta
$LN4@ccread_sta:
; Line 1095
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl
	mov	QWORD PTR child$[rsp], rax
	cmp	QWORD PTR child$[rsp], 0
	je	SHORT $LN7@ccread_sta
; Line 1096
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN9@ccread_sta
	lea	rax, OFFSET FLAT:$SG49211
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49212
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49213
	mov	r8d, 1096				; 00000448H
	lea	rdx, OFFSET FLAT:$SG49214
	mov	ecx, 28
	call	cctrace_
	int	3
	int	3
$LN9@ccread_sta:
; Line 1097
	mov	rax, QWORD PTR child$[rsp]
	jmp	$LN1@ccread_sta
; Line 1098
	jmp	$LN8@ccread_sta
$LN7@ccread_sta:
; Line 1099
	mov	edx, 81					; 00000051H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN10@ccread_sta
; Line 1101
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR expr_tree$6[rsp], rax
; Line 1102
	mov	r8, QWORD PTR expr_tree$6[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_return
	mov	QWORD PTR child$[rsp], rax
; Line 1104
	cmp	QWORD PTR expr_tree$6[rsp], 0
	jne	SHORT $LN12@ccread_sta
	lea	rax, OFFSET FLAT:$SG49218
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49219
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49220
	mov	r8d, 1104				; 00000450H
	lea	rdx, OFFSET FLAT:$SG49221
	mov	ecx, 29
	call	cctrace_
	int	3
	int	3
$LN12@ccread_sta:
; Line 1106
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN13@ccread_sta
	lea	rax, OFFSET FLAT:$SG49223
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49224
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49225
	mov	r8d, 1106				; 00000452H
	lea	rdx, OFFSET FLAT:$SG49226
	mov	ecx, 30
	call	cctrace_
	int	3
	int	3
$LN13@ccread_sta:
; Line 1107
	jmp	$LN11@ccread_sta
$LN10@ccread_sta:
; Line 1108
	mov	edx, 78					; 0000004eH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN14@ccread_sta
; Line 1110
	mov	QWORD PTR cond_tree$2[rsp], 0
	mov	QWORD PTR then_tree$1[rsp], 0
; Line 1112
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN16@ccread_sta
	lea	rax, OFFSET FLAT:$SG49230
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49231
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49232
	mov	r8d, 1112				; 00000458H
	lea	rdx, OFFSET FLAT:$SG49233
	mov	ecx, 31
	call	cctrace_
	int	3
	int	3
$LN16@ccread_sta:
; Line 1113
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR cond_tree$2[rsp], rax
; Line 1114
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN17@ccread_sta
	lea	rax, OFFSET FLAT:$SG49235
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49236
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49237
	mov	r8d, 1114				; 0000045aH
	lea	rdx, OFFSET FLAT:$SG49238
	mov	ecx, 32					; 00000020H
	call	cctrace_
	int	3
	int	3
$LN17@ccread_sta:
; Line 1116
	cmp	QWORD PTR cond_tree$2[rsp], 0
	jne	SHORT $LN18@ccread_sta
	lea	rax, OFFSET FLAT:$SG49240
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49241
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49242
	mov	r8d, 1116				; 0000045cH
	lea	rdx, OFFSET FLAT:$SG49243
	mov	ecx, 33					; 00000021H
	call	cctrace_
	int	3
	int	3
$LN18@ccread_sta:
; Line 1118
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN19@ccread_sta
; Line 1120
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR then_tree$1[rsp], rax
; Line 1121
	cmp	QWORD PTR then_tree$1[rsp], 0
	jne	SHORT $LN20@ccread_sta
	lea	rax, OFFSET FLAT:$SG49246
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49247
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49248
	mov	r8d, 1121				; 00000461H
	lea	rdx, OFFSET FLAT:$SG49249
	mov	ecx, 34					; 00000022H
	call	cctrace_
	int	3
	int	3
$LN20@ccread_sta:
$LN19@ccread_sta:
; Line 1123
	mov	r9, QWORD PTR then_tree$1[rsp]
	mov	r8, QWORD PTR cond_tree$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_while
	mov	QWORD PTR child$[rsp], rax
; Line 1124
	jmp	$LN15@ccread_sta
$LN14@ccread_sta:
; Line 1125
	mov	edx, 80					; 00000050H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN21@ccread_sta
; Line 1127
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_identifier
	mov	QWORD PTR ident$7[rsp], rax
; Line 1128
	cmp	QWORD PTR ident$7[rsp], 0
	jne	SHORT $LN23@ccread_sta
	lea	rax, OFFSET FLAT:$SG49253
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49254
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49255
	mov	r8d, 1128				; 00000468H
	lea	rdx, OFFSET FLAT:$SG49256
	mov	ecx, 35					; 00000023H
	call	cctrace_
	int	3
	int	3
$LN23@ccread_sta:
; Line 1130
	mov	r8, QWORD PTR ident$7[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_goto
	mov	QWORD PTR child$[rsp], rax
; Line 1132
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN24@ccread_sta
	lea	rax, OFFSET FLAT:$SG49258
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49259
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49260
	mov	r8d, 1132				; 0000046cH
	lea	rdx, OFFSET FLAT:$SG49261
	mov	ecx, 36					; 00000024H
	call	cctrace_
	int	3
	int	3
$LN24@ccread_sta:
; Line 1133
	jmp	$LN22@ccread_sta
$LN21@ccread_sta:
; Line 1134
	mov	edx, 74					; 0000004aH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN25@ccread_sta
; Line 1137
	jmp	$LN26@ccread_sta
$LN25@ccread_sta:
; Line 1138
	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN27@ccread_sta
; Line 1140
	mov	QWORD PTR cond_tree$5[rsp], 0
; Line 1141
	mov	QWORD PTR then_tree$4[rsp], 0
; Line 1142
	mov	QWORD PTR else_tree$3[rsp], 0
; Line 1144
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN29@ccread_sta
	lea	rax, OFFSET FLAT:$SG49267
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49268
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49269
	mov	r8d, 1144				; 00000478H
	lea	rdx, OFFSET FLAT:$SG49270
	mov	ecx, 37					; 00000025H
	call	cctrace_
	int	3
	int	3
$LN29@ccread_sta:
; Line 1145
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR cond_tree$5[rsp], rax
; Line 1146
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN30@ccread_sta
	lea	rax, OFFSET FLAT:$SG49272
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49273
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49274
	mov	r8d, 1146				; 0000047aH
	lea	rdx, OFFSET FLAT:$SG49275
	mov	ecx, 38					; 00000026H
	call	cctrace_
	int	3
	int	3
$LN30@ccread_sta:
; Line 1148
	cmp	QWORD PTR cond_tree$5[rsp], 0
	jne	SHORT $LN31@ccread_sta
	lea	rax, OFFSET FLAT:$SG49277
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49278
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49279
	mov	r8d, 1148				; 0000047cH
	lea	rdx, OFFSET FLAT:$SG49280
	mov	ecx, 39					; 00000027H
	call	cctrace_
	int	3
	int	3
$LN31@ccread_sta:
; Line 1150
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN32@ccread_sta
; Line 1151
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR then_tree$4[rsp], rax
; Line 1152
	cmp	QWORD PTR then_tree$4[rsp], 0
	jne	SHORT $LN33@ccread_sta
	lea	rax, OFFSET FLAT:$SG49283
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49284
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49285
	mov	r8d, 1152				; 00000480H
	lea	rdx, OFFSET FLAT:$SG49286
	mov	ecx, 40					; 00000028H
	call	cctrace_
	int	3
	int	3
$LN33@ccread_sta:
$LN32@ccread_sta:
; Line 1154
	mov	edx, 74					; 0000004aH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN34@ccread_sta
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN34@ccread_sta
; Line 1155
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR else_tree$3[rsp], rax
; Line 1156
	cmp	QWORD PTR else_tree$3[rsp], 0
	jne	SHORT $LN35@ccread_sta
	lea	rax, OFFSET FLAT:$SG49289
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49290
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49291
	mov	r8d, 1156				; 00000484H
	lea	rdx, OFFSET FLAT:$SG49292
	mov	ecx, 41					; 00000029H
	call	cctrace_
	int	3
	int	3
$LN35@ccread_sta:
$LN34@ccread_sta:
; Line 1159
	mov	rax, QWORD PTR else_tree$3[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR then_tree$4[rsp]
	mov	r8, QWORD PTR cond_tree$5[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_ternary
	mov	QWORD PTR child$[rsp], rax
; Line 1161
	jmp	$LN28@ccread_sta
$LN27@ccread_sta:
; Line 1163
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR child$[rsp], rax
	cmp	QWORD PTR child$[rsp], 0
	je	$LN36@ccread_sta
; Line 1166
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	$LN37@ccread_sta
; Line 1168
	mov	rax, QWORD PTR child$[rsp]
	cmp	DWORD PTR [rax], 6
	jne	$LN38@ccread_sta
; Line 1170
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN40@ccread_sta
; Line 1173
	mov	QWORD PTR list$8[rsp], 0
; Line 1174
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN42@ccread_sta
; Line 1175
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_statement_list
	mov	QWORD PTR list$8[rsp], rax
$LN42@ccread_sta:
; Line 1177
	mov	r9, QWORD PTR list$8[rsp]
	mov	r8, QWORD PTR child$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_label
	mov	QWORD PTR child$[rsp], rax
; Line 1178
	jmp	SHORT $LN41@ccread_sta
$LN40@ccread_sta:
; Line 1179
	lea	rax, OFFSET FLAT:$SG49300
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49301
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49302
	mov	r8d, 1179				; 0000049bH
	lea	rdx, OFFSET FLAT:$SG49303
	mov	ecx, 42					; 0000002aH
	call	cctrace_
	int	3
	int	3
$LN41@ccread_sta:
; Line 1180
	jmp	SHORT $LN39@ccread_sta
$LN38@ccread_sta:
; Line 1181
	lea	rax, OFFSET FLAT:$SG49304
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49305
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49306
	mov	r8d, 1181				; 0000049dH
	lea	rdx, OFFSET FLAT:$SG49307
	mov	ecx, 43					; 0000002bH
	call	cctrace_
	int	3
	int	3
$LN39@ccread_sta:
$LN37@ccread_sta:
; Line 1184
	mov	rax, QWORD PTR child$[rsp]
	jmp	SHORT $LN1@ccread_sta
$LN36@ccread_sta:
$LN28@ccread_sta:
$LN26@ccread_sta:
$LN22@ccread_sta:
$LN15@ccread_sta:
$LN11@ccread_sta:
$LN8@ccread_sta:
$LN5@ccread_sta:
$LN3@ccread_sta:
; Line 1186
	mov	rax, QWORD PTR child$[rsp]
$LN1@ccread_sta:
; Line 1187
	add	rsp, 136				; 00000088H
	ret	0
ccread_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
next$ = 40
reader$ = 64
root$ = 72
mark$ = 80
ccread_statement_list PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1191
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN2@ccread_sta:
; Line 1192
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_statement
	mov	QWORD PTR next$[rsp], rax
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN3@ccread_sta
; Line 1193
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR next$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 1194
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee_end
	test	eax, eax
	je	SHORT $LN4@ccread_sta
	jmp	SHORT $LN3@ccread_sta
$LN4@ccread_sta:
; Line 1195
	jmp	SHORT $LN2@ccread_sta
$LN3@ccread_sta:
; Line 1196
	mov	rax, QWORD PTR list$[rsp]
; Line 1197
	add	rsp, 56					; 00000038H
	ret	0
ccread_statement_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 48
reader$ = 80
root$ = 88
mark$ = 96
ccread_block PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1201
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR tree$[rsp], 0
; Line 1202
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN2@ccread_blo
; Line 1203
	xor	r8d, r8d
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_block
	mov	QWORD PTR tree$[rsp], rax
; Line 1204
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_statement_list
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 1205
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN3@ccread_blo
; Line 1206
	lea	rax, OFFSET FLAT:$SG49327
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49328
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49329
	mov	r8d, 1206				; 000004b6H
	lea	rdx, OFFSET FLAT:$SG49330
	mov	ecx, 44					; 0000002cH
	call	cctrace_
	int	3
	int	3
$LN3@ccread_blo:
$LN2@ccread_blo:
; Line 1208
	mov	rax, QWORD PTR tree$[rsp]
; Line 1209
	add	rsp, 72					; 00000048H
	ret	0
ccread_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
next$ = 40
reader$ = 64
root$ = 72
mark$ = 80
ccread_param_decl_list PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1049
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN2@ccread_par:
; Line 1050
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_decl
	mov	QWORD PTR next$[rsp], rax
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN3@ccread_par
; Line 1051
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR next$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 1052
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_par
	jmp	SHORT $LN3@ccread_par
$LN4@ccread_par:
; Line 1053
	jmp	SHORT $LN2@ccread_par
$LN3@ccread_par:
; Line 1054
	mov	rax, QWORD PTR list$[rsp]
; Line 1055
	add	rsp, 56					; 00000038H
	ret	0
ccread_param_decl_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spec$ = 48
decl$ = 56
reader$ = 80
root$ = 88
mark$ = 96
ccread_param_decl PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1034
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1035
	mov	QWORD PTR spec$[rsp], 0
; Line 1036
	mov	QWORD PTR decl$[rsp], 0
; Line 1038
	mov	edx, 12
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_par
; Line 1039
	lea	rax, OFFSET FLAT:$SG49144
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49145
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49146
	mov	r8d, 1039				; 0000040fH
	lea	rdx, OFFSET FLAT:$SG49147
	mov	ecx, 26
	call	cctrace_
	int	3
	int	3
$LN2@ccread_par:
; Line 1041
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_declaration_specifiers
	mov	QWORD PTR spec$[rsp], rax
; Line 1042
	cmp	QWORD PTR spec$[rsp], 0
	je	SHORT $LN3@ccread_par
	mov	r9, QWORD PTR spec$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
$LN3@ccread_par:
; Line 1044
	mov	rax, QWORD PTR decl$[rsp]
; Line 1045
	add	rsp, 72					; 00000048H
	ret	0
ccread_param_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_alignment_specifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 964
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR reader$[rsp]
	call	kttc__peek_alignment_specifier
	test	rax, rax
	je	SHORT $LN2@ccread_ali
; Line 965
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 967
	mov	eax, 1
	jmp	SHORT $LN1@ccread_ali
$LN2@ccread_ali:
; Line 969
	xor	eax, eax
$LN1@ccread_ali:
; Line 970
	add	rsp, 56					; 00000038H
	ret	0
ccread_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_function_specifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 950
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR reader$[rsp]
	call	kttc__peek_func_specifier
	test	rax, rax
	je	SHORT $LN2@ccread_fun
; Line 951
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 953
	mov	eax, 1
	jmp	SHORT $LN1@ccread_fun
$LN2@ccread_fun:
; Line 955
	xor	eax, eax
$LN1@ccread_fun:
; Line 956
	add	rsp, 56					; 00000038H
	ret	0
ccread_function_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_type_qualifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 936
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR reader$[rsp]
	call	kttc__peek_type_qualifier
	test	rax, rax
	je	SHORT $LN2@ccread_typ
; Line 937
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 939
	mov	eax, 1
	jmp	SHORT $LN1@ccread_typ
$LN2@ccread_typ:
; Line 941
	xor	eax, eax
$LN1@ccread_typ:
; Line 942
	add	rsp, 56					; 00000038H
	ret	0
ccread_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_storage_class_specifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 917
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 918
	mov	rcx, QWORD PTR reader$[rsp]
	call	kttc__peek_storage_class
	test	rax, rax
	je	SHORT $LN2@ccread_sto
; Line 920
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 923
	mov	eax, 1
	jmp	SHORT $LN1@ccread_sto
$LN2@ccread_sto:
; Line 925
	xor	eax, eax
$LN1@ccread_sto:
; Line 926
	add	rsp, 56					; 00000038H
	ret	0
ccread_storage_class_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
tok$1 = 40
reader$ = 64
root$ = 72
mark$ = 80
ccread_type_specifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 885
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 886
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee_typespec
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	$LN4@ccread_typ
; Line 887
	mov	rax, QWORD PTR tok$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	mov	eax, DWORD PTR tv68[rsp]
	sub	eax, 46					; 0000002eH
	mov	DWORD PTR tv68[rsp], eax
	cmp	DWORD PTR tv68[rsp], 15
	ja	$LN2@ccread_typ
	movsxd	rax, DWORD PTR tv68[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN19@ccread_typ[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN5@ccread_typ:
$LN6@ccread_typ:
; Line 889
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_or_union_specifier
	jmp	$LN1@ccread_typ
$LN7@ccread_typ:
; Line 890
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int8
	jmp	$LN1@ccread_typ
$LN8@ccread_typ:
; Line 891
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int16
	jmp	$LN1@ccread_typ
$LN9@ccread_typ:
; Line 892
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int32
	jmp	$LN1@ccread_typ
$LN10@ccread_typ:
; Line 893
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int64
	jmp	$LN1@ccread_typ
$LN11@ccread_typ:
; Line 894
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int8
	jmp	SHORT $LN1@ccread_typ
$LN12@ccread_typ:
; Line 895
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_void
	jmp	SHORT $LN1@ccread_typ
$LN13@ccread_typ:
; Line 896
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int8
	jmp	SHORT $LN1@ccread_typ
$LN14@ccread_typ:
; Line 897
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int16
	jmp	SHORT $LN1@ccread_typ
$LN15@ccread_typ:
; Line 898
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int32
	jmp	SHORT $LN1@ccread_typ
$LN16@ccread_typ:
; Line 899
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_flo32
	jmp	SHORT $LN1@ccread_typ
$LN17@ccread_typ:
; Line 900
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_flo64
	jmp	SHORT $LN1@ccread_typ
$LN2@ccread_typ:
$LN4@ccread_typ:
; Line 903
	xor	eax, eax
$LN1@ccread_typ:
; Line 904
	add	rsp, 56					; 00000038H
	ret	0
$LN19@ccread_typ:
	DD	$LN7@ccread_typ
	DD	$LN8@ccread_typ
	DD	$LN9@ccread_typ
	DD	$LN10@ccread_typ
	DD	$LN17@ccread_typ
	DD	$LN16@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN15@ccread_typ
	DD	$LN14@ccread_typ
	DD	$LN13@ccread_typ
	DD	$LN12@ccread_typ
	DD	$LN11@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN5@ccread_typ
	DD	$LN6@ccread_typ
ccread_type_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$1 = 48
next$2 = 56
name$3 = 64
tree$4 = 72
reader$ = 96
root$ = 104
mark$ = 112
ccread_struct_or_union_specifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 838
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	edx, 61					; 0000003dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN4@ccread_str
; Line 841
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_identifier
	mov	QWORD PTR name$3[rsp], rax
; Line 842
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN6@ccread_str
; Line 843
	lea	rax, OFFSET FLAT:$SG49048
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49049
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49050
	mov	r8d, 843				; 0000034bH
	lea	rdx, OFFSET FLAT:$SG49051
	mov	ecx, 23
	call	cctrace_
	int	3
	int	3
$LN6@ccread_str:
; Line 845
	mov	QWORD PTR list$1[rsp], 0
$LN2@ccread_str:
; Line 846
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_decl
	mov	QWORD PTR next$2[rsp], rax
	cmp	QWORD PTR next$2[rsp], 0
	je	$LN3@ccread_str
; Line 847
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$1[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR list$1[rsp]
	mov	rdx, QWORD PTR next$2[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 848
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN7@ccread_str
	lea	rax, OFFSET FLAT:$SG49053
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49054
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49055
	mov	r8d, 848				; 00000350H
	lea	rdx, OFFSET FLAT:$SG49056
	mov	ecx, 24
	call	cctrace_
	int	3
	int	3
$LN7@ccread_str:
; Line 849
	jmp	$LN2@ccread_str
$LN3@ccread_str:
; Line 850
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN8@ccread_str
; Line 851
	lea	rax, OFFSET FLAT:$SG49058
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49059
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49060
	mov	r8d, 851				; 00000353H
	lea	rdx, OFFSET FLAT:$SG49061
	mov	ecx, 25
	call	cctrace_
	int	3
	int	3
$LN8@ccread_str:
; Line 852
	mov	rdx, QWORD PTR name$3[rsp]
	mov	rcx, QWORD PTR list$1[rsp]
	call	cctreee_struct_specifier
	mov	QWORD PTR tree$4[rsp], rax
; Line 853
	mov	rax, QWORD PTR tree$4[rsp]
	jmp	SHORT $LN1@ccread_str
; Line 854
	jmp	SHORT $LN5@ccread_str
$LN4@ccread_str:
; Line 855
	mov	edx, 60					; 0000003cH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN9@ccread_str
; Line 857
	lea	rax, OFFSET FLAT:$SG49063
	test	rax, rax
	je	SHORT $LN11@ccread_str
	int	3
$LN11@ccread_str:
$LN9@ccread_str:
$LN5@ccread_str:
; Line 859
	xor	eax, eax
$LN1@ccread_str:
; Line 860
	add	rsp, 88					; 00000058H
	ret	0
ccread_struct_or_union_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
list$ = 56
reader$ = 80
root$ = 88
mark$ = 96
ccread_struct_decl PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 827
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 828
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_specifier_qualifier_list
	mov	QWORD PTR type$[rsp], rax
	cmp	QWORD PTR type$[rsp], 0
	je	SHORT $LN2@ccread_str
; Line 829
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_decl_name_list
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN3@ccread_str
; Line 830
	mov	r9, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR type$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_decl
	jmp	SHORT $LN1@ccread_str
	jmp	SHORT $LN4@ccread_str
$LN3@ccread_str:
; Line 831
	lea	rax, OFFSET FLAT:$SG49029
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49030
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49031
	mov	r8d, 831				; 0000033fH
	lea	rdx, OFFSET FLAT:$SG49032
	mov	ecx, 22
	call	cctrace_
	int	3
	int	3
$LN4@ccread_str:
$LN2@ccread_str:
; Line 833
	xor	eax, eax
$LN1@ccread_str:
; Line 834
	add	rsp, 72					; 00000048H
	ret	0
ccread_struct_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
list$ = 56
reader$ = 80
root$ = 88
mark$ = 96
ccread_init_decl PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 815
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 816
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_declaration_specifiers
	mov	QWORD PTR type$[rsp], rax
	cmp	QWORD PTR type$[rsp], 0
	je	$LN2@ccread_ini
; Line 817
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_attribute_seq
; Line 818
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl_name_list
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN3@ccread_ini
; Line 819
	mov	r9, QWORD PTR list$[rsp]
	mov	r8, QWORD PTR type$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_decl
	jmp	SHORT $LN1@ccread_ini
	jmp	SHORT $LN4@ccread_ini
$LN3@ccread_ini:
; Line 820
	lea	rax, OFFSET FLAT:$SG49015
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG49016
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG49017
	mov	r8d, 820				; 00000334H
	lea	rdx, OFFSET FLAT:$SG49018
	mov	ecx, 21
	call	cctrace_
	int	3
	int	3
$LN4@ccread_ini:
$LN2@ccread_ini:
; Line 822
	xor	eax, eax
$LN1@ccread_ini:
; Line 823
	add	rsp, 72					; 00000048H
	ret	0
ccread_init_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 64
root$ = 72
mark$ = 80
type$ = 88
ccread_struct_decl_name_list PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 805
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_str:
; Line 807
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_decl_name
	mov	QWORD PTR next$[rsp], rax
; Line 808
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN5@ccread_str
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR next$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
$LN5@ccread_str:
; Line 809
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN6@ccread_str
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_str
$LN6@ccread_str:
; Line 810
	mov	rax, QWORD PTR list$[rsp]
; Line 811
	add	rsp, 56					; 00000038H
	ret	0
ccread_struct_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
next$ = 40
reader$ = 64
root$ = 72
mark$ = 80
type$ = 88
ccread_init_decl_name_list PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 793
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR root$[rsp], 0
	jne	SHORT $LN7@ccread_ini
	int	3
$LN7@ccread_ini:
; Line 794
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_ini:
; Line 796
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl_name
	mov	QWORD PTR next$[rsp], rax
; Line 797
	cmp	QWORD PTR next$[rsp], 0
	jne	SHORT $LN5@ccread_ini
	jmp	SHORT $LN3@ccread_ini
$LN5@ccread_ini:
; Line 798
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR list$[rsp]
	mov	rdx, QWORD PTR next$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 799
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_ini
$LN3@ccread_ini:
; Line 800
	mov	rax, QWORD PTR list$[rsp]
; Line 801
	add	rsp, 56					; 00000038H
	ret	0
ccread_init_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 48
reader$ = 80
root$ = 88
mark$ = 96
type$ = 104
ccread_struct_decl_name PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 780
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN6@ccread_str
	int	3
$LN6@ccread_str:
; Line 781
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
; Line 782
	cmp	QWORD PTR decl$[rsp], 0
	je	SHORT $LN2@ccread_str
; Line 783
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN3@ccread_str
; Line 784
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_constant_expression
	mov	rcx, QWORD PTR decl$[rsp]
	mov	QWORD PTR [rcx+56], rax
; Line 785
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+56], 0
	jne	SHORT $LN4@ccread_str
	lea	rax, OFFSET FLAT:$SG48974
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48975
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48976
	mov	r8d, 785				; 00000311H
	lea	rdx, OFFSET FLAT:$SG48977
	mov	ecx, 20
	call	cctrace_
	int	3
	int	3
$LN4@ccread_str:
$LN3@ccread_str:
$LN2@ccread_str:
; Line 788
	mov	rax, QWORD PTR decl$[rsp]
; Line 789
	add	rsp, 72					; 00000048H
	ret	0
ccread_struct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 48
reader$ = 80
root$ = 88
mark$ = 96
type$ = 104
ccread_init_decl_name PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 765
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN6@ccread_ini
	int	3
$LN6@ccread_ini:
; Line 767
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
; Line 769
	cmp	QWORD PTR decl$[rsp], 0
	je	SHORT $LN2@ccread_ini
; Line 770
	mov	edx, 109				; 0000006dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN3@ccread_ini
; Line 771
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_initializer
	mov	rcx, QWORD PTR decl$[rsp]
	mov	QWORD PTR [rcx+64], rax
; Line 772
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+64], 0
	jne	SHORT $LN4@ccread_ini
	lea	rax, OFFSET FLAT:$SG48960
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48961
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48962
	mov	r8d, 772				; 00000304H
	lea	rdx, OFFSET FLAT:$SG48963
	mov	ecx, 19
	call	cctrace_
	int	3
	int	3
$LN4@ccread_ini:
$LN3@ccread_ini:
$LN2@ccread_ini:
; Line 775
	mov	rax, QWORD PTR decl$[rsp]
; Line 776
	add	rsp, 72					; 00000048H
	ret	0
ccread_init_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
type$ = 72
ccread_decl_name_modifier_maybe PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 749
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	edx, 92					; 0000005cH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN2@ccread_dec
; Line 750
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name_modifier_maybe
	mov	rcx, rax
	call	cctreee_pointer_modifier
	jmp	SHORT $LN1@ccread_dec
$LN2@ccread_dec:
; Line 751
	mov	rax, QWORD PTR type$[rsp]
$LN1@ccread_dec:
; Line 752
	add	rsp, 40					; 00000028H
	ret	0
ccread_decl_name_modifier_maybe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mod$1 = 48
tmp$2 = 56
res$3 = 64
name$4 = 72
mod$5 = 80
mod$6 = 88
reader$ = 128
root$ = 136
mark$ = 144
type$ = 152
ccread_direct_decl_name PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 726
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_dir
; Line 729
	mov	rcx, QWORD PTR type$[rsp]
	call	cctree_clone
	mov	QWORD PTR mod$1[rsp], rax
; Line 730
	mov	r9, QWORD PTR mod$1[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR res$3[rsp], rax
; Line 731
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_dir
	lea	rax, OFFSET FLAT:$SG48930
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48931
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48932
	mov	r8d, 731				; 000002dbH
	lea	rdx, OFFSET FLAT:$SG48933
	mov	ecx, 18
	call	cctrace_
	int	3
	int	3
$LN4@ccread_dir:
; Line 732
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR tmp$2[rsp], rax
; Line 733
	mov	rdi, QWORD PTR mod$1[rsp]
	mov	rsi, QWORD PTR tmp$2[rsp]
	mov	ecx, 184				; 000000b8H
	rep movsb
; Line 734
	mov	rcx, QWORD PTR tmp$2[rsp]
	call	cctree_del
; Line 735
	mov	rax, QWORD PTR res$3[rsp]
	jmp	$LN1@ccread_dir
; Line 736
	jmp	$LN3@ccread_dir
$LN2@ccread_dir:
; Line 737
	mov	edx, 18
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN5@ccread_dir
; Line 738
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_identifier
	mov	QWORD PTR name$4[rsp], rax
; Line 739
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR mod$5[rsp], rax
; Line 740
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR name$4[rsp]
	mov	r8, QWORD PTR mod$5[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_decl_name
	jmp	SHORT $LN1@ccread_dir
; Line 741
	jmp	SHORT $LN6@ccread_dir
$LN5@ccread_dir:
; Line 742
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR mod$6[rsp], rax
; Line 743
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR mod$6[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_decl_name
$LN6@ccread_dir:
$LN3@ccread_dir:
$LN1@ccread_dir:
; Line 745
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
ccread_direct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
modifier$1 = 48
list$2 = 56
rval$3 = 64
modi$4 = 72
reader$ = 96
root$ = 104
mark$ = 112
type$ = 120
ccread_direct_decl_name_modifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 703
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_dir
; Line 704
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_type_list
	mov	QWORD PTR list$2[rsp], rax
; Line 705
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_dir
	lea	rax, OFFSET FLAT:$SG48895
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48896
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48897
	mov	r8d, 705				; 000002c1H
	lea	rdx, OFFSET FLAT:$SG48898
	mov	ecx, 14
	call	cctrace_
	int	3
	int	3
$LN4@ccread_dir:
; Line 706
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR modifier$1[rsp], rax
; Line 707
	mov	rax, QWORD PTR modifier$1[rsp]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN5@ccread_dir
	lea	rax, OFFSET FLAT:$SG48900
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48901
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48902
	mov	r8d, 707				; 000002c3H
	lea	rdx, OFFSET FLAT:$SG48903
	mov	ecx, 15
	call	cctrace_
$LN5@ccread_dir:
; Line 708
	mov	rax, QWORD PTR modifier$1[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN6@ccread_dir
	lea	rax, OFFSET FLAT:$SG48905
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48906
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48907
	mov	r8d, 708				; 000002c4H
	lea	rdx, OFFSET FLAT:$SG48908
	mov	ecx, 16
	call	cctrace_
$LN6@ccread_dir:
; Line 709
	mov	rdx, QWORD PTR list$2[rsp]
	mov	rcx, QWORD PTR modifier$1[rsp]
	call	cctreee_function_modifier
	jmp	$LN1@ccread_dir
; Line 710
	jmp	$LN3@ccread_dir
$LN2@ccread_dir:
; Line 711
	mov	edx, 7
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN7@ccread_dir
; Line 713
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR rval$3[rsp], rax
; Line 715
	mov	edx, 8
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN8@ccread_dir
; Line 716
	lea	rax, OFFSET FLAT:$SG48911
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48912
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48913
	mov	r8d, 716				; 000002ccH
	lea	rdx, OFFSET FLAT:$SG48914
	mov	ecx, 17
	call	cctrace_
	int	3
	int	3
$LN8@ccread_dir:
; Line 718
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR modi$4[rsp], rax
; Line 719
	mov	rdx, QWORD PTR rval$3[rsp]
	mov	rcx, QWORD PTR modi$4[rsp]
	call	cctreee_array_modifier
	jmp	SHORT $LN1@ccread_dir
$LN7@ccread_dir:
$LN3@ccread_dir:
; Line 721
	mov	rax, QWORD PTR type$[rsp]
$LN1@ccread_dir:
; Line 722
	add	rsp, 88					; 00000058H
	ret	0
ccread_direct_decl_name_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_specifier_qualifier_list PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 979
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 980
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_type_specifier
	mov	QWORD PTR type$[rsp], rax
; Line 981
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_type_qualifier
; Line 982
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_alignment_specifier
; Line 984
	mov	rax, QWORD PTR type$[rsp]
; Line 985
	add	rsp, 56					; 00000038H
	ret	0
ccread_specifier_qualifier_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reader$ = 8
root$ = 16
mark$ = 24
ccread_attribute_seq PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 994
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 996
	xor	eax, eax
; Line 997
	ret	0
ccread_attribute_seq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_declaration_specifiers PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1008
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1009
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_storage_class_specifier
; Line 1011
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_specifier_qualifier_list
	mov	QWORD PTR type$[rsp], rax
; Line 1013
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_function_specifier
; Line 1015
	mov	rax, QWORD PTR type$[rsp]
; Line 1016
	add	rsp, 56					; 00000038H
	ret	0
ccread_declaration_specifiers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
reader$ = 64
root$ = 72
mark$ = 80
type$ = 88
ccread_decl_name PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 756
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN3@ccread_dec
	int	3
$LN3@ccread_dec:
; Line 758
	mov	r9, QWORD PTR type$[rsp]
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name_modifier_maybe
	mov	r9, rax
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name
	mov	QWORD PTR tree$[rsp], rax
; Line 760
	mov	rax, QWORD PTR tree$[rsp]
; Line 761
	add	rsp, 56					; 00000038H
	ret	0
ccread_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_initializer PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 683
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 698
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_assignment_expr
; Line 699
	add	rsp, 40					; 00000028H
	ret	0
ccread_initializer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
reader$ = 64
root$ = 72
mark$ = 80
ccread_param_type_list PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 1059
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1060
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_decl_list
	mov	QWORD PTR list$[rsp], rax
; Line 1065
	mov	rax, QWORD PTR list$[rsp]
; Line 1066
	add	rsp, 56					; 00000038H
	ret	0
ccread_param_type_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reader$ = 48
root$ = 56
mark$ = 64
ccread_constant_expression PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 568
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 569
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_conditional_expr
; Line 570
	add	rsp, 40					; 00000028H
	ret	0
ccread_constant_expression ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
tok$1 = 56
rhs$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_assignment_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 555
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_conditional_expr
	mov	QWORD PTR lhs$[rsp], rax
; Line 556
	mov	edx, 109				; 0000006dH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	SHORT $LN2@ccread_ass
; Line 557
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_assignment_expr
	mov	QWORD PTR rhs$2[rsp], rax
; Line 558
	mov	rax, QWORD PTR rhs$2[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_ass:
; Line 560
	mov	rax, QWORD PTR lhs$[rsp]
; Line 561
	add	rsp, 88					; 00000058H
	ret	0
ccread_assignment_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rhs$1 = 48
lhs$2 = 56
rad$ = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_conditional_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 526
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 527
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_or_expr
	mov	QWORD PTR rad$[rsp], rax
; Line 529
	mov	edx, 108				; 0000006cH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_con
; Line 531
	mov	QWORD PTR lhs$2[rsp], 0
	mov	QWORD PTR rhs$1[rsp], 0
; Line 532
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_or_expr
	mov	QWORD PTR lhs$2[rsp], rax
; Line 534
	mov	edx, 10
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN3@ccread_con
; Line 535
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_conditional_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 536
	jmp	SHORT $LN4@ccread_con
$LN3@ccread_con:
; Line 537
	lea	rax, OFFSET FLAT:$SG48814
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48815
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48816
	mov	r8d, 537				; 00000219H
	lea	rdx, OFFSET FLAT:$SG48817
	mov	ecx, 13
	call	cctrace_
	int	3
	int	3
$LN4@ccread_con:
; Line 540
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$2[rsp]
	mov	r8, QWORD PTR rad$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_ternary
	jmp	SHORT $LN1@ccread_con
$LN2@ccread_con:
; Line 543
	mov	rax, QWORD PTR rad$[rsp]
$LN1@ccread_con:
; Line 544
	add	rsp, 88					; 00000058H
	ret	0
ccread_conditional_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_logical_or_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 511
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_and_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_log:
; Line 512
	mov	edx, 107				; 0000006bH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_log
; Line 513
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 514
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_and_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 515
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 516
	jmp	SHORT $LN2@ccread_log
$LN3@ccread_log:
; Line 517
	mov	rax, QWORD PTR lhs$[rsp]
; Line 518
	add	rsp, 88					; 00000058H
	ret	0
ccread_logical_or_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_logical_and_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 496
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_or_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_log:
; Line 497
	mov	edx, 106				; 0000006aH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_log
; Line 498
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 499
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_or_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 500
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 501
	jmp	SHORT $LN2@ccread_log
$LN3@ccread_log:
; Line 502
	mov	rax, QWORD PTR lhs$[rsp]
; Line 503
	add	rsp, 88					; 00000058H
	ret	0
ccread_logical_and_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_bitwise_or_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 481
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_xor_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 482
	mov	edx, 105				; 00000069H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 483
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 484
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_xor_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 485
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 486
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 487
	mov	rax, QWORD PTR lhs$[rsp]
; Line 488
	add	rsp, 88					; 00000058H
	ret	0
ccread_bitwise_or_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_bitwise_xor_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 466
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_and_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 467
	mov	edx, 103				; 00000067H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 468
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 469
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_and_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 470
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 471
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 472
	mov	rax, QWORD PTR lhs$[rsp]
; Line 473
	add	rsp, 88					; 00000058H
	ret	0
ccread_bitwise_xor_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_bitwise_and_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 451
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 452
	mov	edx, 103				; 00000067H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 453
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 454
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 455
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 456
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 457
	mov	rax, QWORD PTR lhs$[rsp]
; Line 458
	add	rsp, 88					; 00000058H
	ret	0
ccread_bitwise_and_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_equality_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 434
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_relational_expr
	mov	QWORD PTR lhs$[rsp], rax
; Line 435
	mov	edx, 101				; 00000065H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN3@ccread_equ
	mov	edx, 102				; 00000066H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_equ
$LN3@ccread_equ:
; Line 437
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 438
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 439
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_equ:
; Line 441
	mov	rax, QWORD PTR lhs$[rsp]
; Line 442
	add	rsp, 88					; 00000058H
	ret	0
ccread_equality_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_relational_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 415
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_shift_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_rel:
; Line 418
	mov	edx, 100				; 00000064H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 118				; 00000076H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 99					; 00000063H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 117				; 00000075H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_rel
$LN4@ccread_rel:
; Line 420
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 421
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_shift_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 422
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 423
	jmp	$LN2@ccread_rel
$LN3@ccread_rel:
; Line 424
	mov	rax, QWORD PTR lhs$[rsp]
; Line 425
	add	rsp, 88					; 00000058H
	ret	0
ccread_relational_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_shift_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 395
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_additive_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_shi:
; Line 396
	mov	edx, 97					; 00000061H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_shi
	mov	edx, 98					; 00000062H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_shi
$LN4@ccread_shi:
; Line 398
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 399
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_additive_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 400
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 401
	jmp	SHORT $LN2@ccread_shi
$LN3@ccread_shi:
; Line 402
	mov	rax, QWORD PTR lhs$[rsp]
; Line 403
	add	rsp, 88					; 00000058H
	ret	0
ccread_shift_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_additive_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 377
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_multiplicative_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_add:
; Line 378
	mov	edx, 95					; 0000005fH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_add
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_add
$LN4@ccread_add:
; Line 381
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 382
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_multiplicative_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 383
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 384
	jmp	SHORT $LN2@ccread_add
$LN3@ccread_add:
; Line 385
	mov	rax, QWORD PTR lhs$[rsp]
; Line 386
	add	rsp, 88					; 00000058H
	ret	0
ccread_additive_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
rhs$1 = 56
tok$2 = 64
parser$ = 96
root$ = 104
mark$ = 112
ccread_multiplicative_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 358
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_mul:
; Line 360
	mov	edx, 92					; 0000005cH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_mul
	mov	edx, 93					; 0000005dH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_mul
	mov	edx, 94					; 0000005eH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_mul
$LN4@ccread_mul:
; Line 363
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 364
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 365
	mov	rax, QWORD PTR rhs$1[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 366
	jmp	$LN2@ccread_mul
$LN3@ccread_mul:
; Line 367
	mov	rax, QWORD PTR lhs$[rsp]
; Line 368
	add	rsp, 88					; 00000058H
	ret	0
ccread_multiplicative_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
tok$1 = 40
tok$2 = 48
tok$3 = 56
tv179 = 64
clo$4 = 80
clo$5 = 144
clo$6 = 208
reader$ = 304
root$ = 312
mark$ = 320
ccread_unary_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 288
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	mov	QWORD PTR result$[rsp], 0
; Line 290
	mov	edx, 95					; 0000005fH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN2@ccread_una
; Line 291
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 292
	mov	edx, 95					; 0000005fH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN4@ccread_una
; Line 294
	lea	rax, QWORD PTR clo$4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$1[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 295
	mov	QWORD PTR clo$4[rsp+8], 123		; 0000007bH
; Line 296
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast_expr
	mov	r9, rax
	lea	r8, QWORD PTR clo$4[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 297
	jmp	SHORT $LN5@ccread_una
$LN4@ccread_una:
; Line 298
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast_expr
	mov	r9, rax
	mov	r8, QWORD PTR tok$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
$LN5@ccread_una:
; Line 300
	jmp	$LN3@ccread_una
$LN2@ccread_una:
; Line 301
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN6@ccread_una
; Line 302
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 303
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN8@ccread_una
; Line 305
	lea	rax, QWORD PTR clo$5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$2[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 306
	mov	QWORD PTR clo$5[rsp+8], 122		; 0000007aH
; Line 307
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast_expr
	mov	r9, rax
	lea	r8, QWORD PTR clo$5[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 308
	jmp	SHORT $LN9@ccread_una
$LN8@ccread_una:
; Line 309
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast_expr
	mov	r9, rax
	mov	r8, QWORD PTR tok$2[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
$LN9@ccread_una:
; Line 311
	jmp	$LN7@ccread_una
$LN6@ccread_una:
; Line 312
	mov	edx, 92					; 0000005cH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN10@ccread_una
; Line 315
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$3[rsp], rax
; Line 316
	lea	rax, QWORD PTR clo$6[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$3[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 317
	mov	QWORD PTR clo$6[rsp+8], 84		; 00000054H
; Line 319
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast_expr
	mov	r9, rax
	lea	r8, QWORD PTR clo$6[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 320
	jmp	$LN11@ccread_una
$LN10@ccread_una:
; Line 321
	mov	edx, 86					; 00000056H
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN14@ccread_una
	mov	edx, 89					; 00000059H
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN12@ccread_una
$LN14@ccread_una:
; Line 323
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_cast_expr
	mov	QWORD PTR tv179[rsp], rax
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rcx, QWORD PTR tv179[rsp]
	mov	r9, rcx
	mov	r8, rax
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR result$[rsp], rax
; Line 324
	jmp	SHORT $LN13@ccread_una
$LN12@ccread_una:
; Line 325
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_postfix
	mov	QWORD PTR result$[rsp], rax
$LN13@ccread_una:
$LN11@ccread_una:
$LN7@ccread_una:
$LN3@ccread_una:
; Line 327
	mov	rax, QWORD PTR result$[rsp]
; Line 328
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
ccread_unary_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
inc$1 = 56
args$2 = 64
args$3 = 72
dec$4 = 80
reader$ = 112
root$ = 120
mark$ = 128
ccread_postfix PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 238
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 242
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_primary
	mov	QWORD PTR lhs$[rsp], rax
; Line 244
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_pos
; Line 246
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_arglist_expr
	mov	QWORD PTR args$2[rsp], rax
; Line 248
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_pos
; Line 249
	lea	rax, OFFSET FLAT:$SG48644
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48645
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48646
	mov	r8d, 249				; 000000f9H
	lea	rdx, OFFSET FLAT:$SG48647
	mov	ecx, 10
	call	cctrace_
	int	3
	int	3
$LN4@ccread_pos:
; Line 251
	mov	r9, QWORD PTR args$2[rsp]
	mov	r8, QWORD PTR lhs$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_call
	jmp	$LN1@ccread_pos
; Line 252
	jmp	$LN3@ccread_pos
$LN2@ccread_pos:
; Line 253
	mov	edx, 7
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN5@ccread_pos
; Line 255
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR args$3[rsp], rax
; Line 257
	mov	edx, 8
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN7@ccread_pos
; Line 258
	lea	rax, OFFSET FLAT:$SG48651
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48652
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48653
	mov	r8d, 258				; 00000102H
	lea	rdx, OFFSET FLAT:$SG48654
	mov	ecx, 11
	call	cctrace_
	int	3
	int	3
$LN7@ccread_pos:
; Line 260
	mov	r9, QWORD PTR args$3[rsp]
	mov	r8, QWORD PTR lhs$[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_index
	jmp	$LN1@ccread_pos
; Line 261
	jmp	$LN6@ccread_pos
$LN5@ccread_pos:
; Line 262
	mov	edx, 90					; 0000005aH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN8@ccread_pos
; Line 263
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR lhs$[rsp], rax
; Line 264
	jmp	SHORT $LN9@ccread_pos
$LN8@ccread_pos:
; Line 265
	mov	edx, 125				; 0000007dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	mov	QWORD PTR inc$1[rsp], rax
	cmp	QWORD PTR inc$1[rsp], 0
	je	SHORT $LN10@ccread_pos
; Line 266
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR inc$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR lhs$[rsp], rax
; Line 267
	jmp	SHORT $LN11@ccread_pos
$LN10@ccread_pos:
; Line 268
	mov	edx, 124				; 0000007cH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	mov	QWORD PTR dec$4[rsp], rax
	cmp	QWORD PTR dec$4[rsp], 0
	je	SHORT $LN12@ccread_pos
; Line 269
	mov	r9, QWORD PTR lhs$[rsp]
	mov	r8, QWORD PTR inc$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_unary
	mov	QWORD PTR lhs$[rsp], rax
$LN12@ccread_pos:
$LN11@ccread_pos:
$LN9@ccread_pos:
$LN6@ccread_pos:
$LN3@ccread_pos:
; Line 271
	mov	rax, QWORD PTR lhs$[rsp]
$LN1@ccread_pos:
; Line 272
	add	rsp, 104				; 00000068H
	ret	0
ccread_postfix ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 48
token$ = 56
group$1 = 64
reader$ = 96
root$ = 104
mark$ = 112
ccread_primary PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 201
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 202
	cmp	QWORD PTR token$[rsp], 0
	jne	SHORT $LN4@ccread_pri
	xor	eax, eax
	jmp	$LN1@ccread_pri
$LN4@ccread_pri:
; Line 203
	mov	rax, QWORD PTR token$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	cmp	DWORD PTR tv68[rsp], 3
	je	$LN9@ccread_pri
	cmp	DWORD PTR tv68[rsp], 15
	je	$LN8@ccread_pri
	cmp	DWORD PTR tv68[rsp], 18
	je	SHORT $LN5@ccread_pri
	cmp	DWORD PTR tv68[rsp], 19
	je	SHORT $LN6@ccread_pri
	cmp	DWORD PTR tv68[rsp], 20
	je	SHORT $LN7@ccread_pri
	jmp	$LN2@ccread_pri
$LN5@ccread_pri:
; Line 205
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_identifier
	jmp	$LN1@ccread_pri
$LN6@ccread_pri:
; Line 207
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	r9, rax
	mov	r8, QWORD PTR ctype_int64
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_constant
	jmp	$LN1@ccread_pri
$LN7@ccread_pri:
; Line 209
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	r9, rax
	mov	r8, QWORD PTR ctype_flo64
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_constant
	jmp	$LN1@ccread_pri
$LN8@ccread_pri:
; Line 211
	lea	rax, OFFSET FLAT:$SG48624
	test	rax, rax
	je	SHORT $LN12@ccread_pri
	int	3
$LN12@ccread_pri:
$LN9@ccread_pri:
; Line 214
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR group$1[rsp], rax
; Line 215
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN10@ccread_pri
	lea	rax, OFFSET FLAT:$SG48627
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48628
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48629
	mov	r8d, 215				; 000000d7H
	lea	rdx, OFFSET FLAT:$SG48630
	mov	ecx, 9
	call	cctrace_
	int	3
$LN10@ccread_pri:
; Line 216
	mov	r8, QWORD PTR group$1[rsp]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_group
	jmp	SHORT $LN1@ccread_pri
$LN2@ccread_pri:
; Line 219
	xor	eax, eax
$LN1@ccread_pri:
; Line 220
	add	rsp, 88					; 00000058H
	ret	0
ccread_primary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
tree$ = 40
reader$ = 64
root$ = 72
mark$ = 80
ccread_identifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 191
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	edx, 18
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	mov	QWORD PTR token$[rsp], rax
; Line 192
	mov	QWORD PTR tree$[rsp], 0
; Line 193
	cmp	QWORD PTR token$[rsp], 0
	je	SHORT $LN2@ccread_ide
	mov	rax, QWORD PTR token$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_identifier
	mov	QWORD PTR tree$[rsp], rax
$LN2@ccread_ide:
; Line 194
	mov	rax, QWORD PTR tree$[rsp]
; Line 195
	add	rsp, 56					; 00000038H
	ret	0
ccread_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tok$1 = 56
parser$ = 80
root$ = 88
mark$ = 96
ccread_cast_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 336
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR result$[rsp], 0
; Line 337
	mov	edx, 3
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	SHORT $LN2@ccread_cas
; Line 339
	mov	QWORD PTR result$[rsp], 0
; Line 341
	mov	edx, 4
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_cas
; Line 342
	lea	rax, OFFSET FLAT:$SG48695
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48696
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48697
	mov	r8d, 342				; 00000156H
	lea	rdx, OFFSET FLAT:$SG48698
	mov	ecx, 12
	call	cctrace_
	int	3
	int	3
$LN4@ccread_cas:
; Line 344
	jmp	SHORT $LN3@ccread_cas
$LN2@ccread_cas:
; Line 345
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary_expr
	mov	QWORD PTR result$[rsp], rax
$LN3@ccread_cas:
; Line 347
	mov	rax, QWORD PTR result$[rsp]
; Line 348
	add	rsp, 72					; 00000048H
	ret	0
ccread_cast_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tv73 = 56
reader$ = 80
root$ = 88
mark$ = 96
ccread_expression PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 578
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_assignment_expr
	mov	QWORD PTR result$[rsp], rax
; Line 579
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_exp
; Line 580
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccgobble
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR result$[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR mark$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	call	cctree_binary
	mov	QWORD PTR result$[rsp], rax
$LN2@ccread_exp:
; Line 582
	mov	rax, QWORD PTR result$[rsp]
; Line 583
	add	rsp, 72					; 00000048H
	ret	0
ccread_expression ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 80
root$ = 88
mark$ = 96
ccread_arglist_expr PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 591
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_arg:
; Line 593
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_assignment_expr
	mov	QWORD PTR next$[rsp], rax
; Line 594
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN5@ccread_arg
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 184				; 000000b8H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 184				; 000000b8H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$[rsp]
	mov	ecx, 184				; 000000b8H
	rep movsb
$LN5@ccread_arg:
; Line 595
	mov	rcx, QWORD PTR next$[rsp]
	call	cctree_del
; Line 596
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN6@ccread_arg
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_arg
$LN6@ccread_arg:
; Line 597
	mov	rax, QWORD PTR list$[rsp]
; Line 598
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_arglist_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_func_specifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 171
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 172
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 174
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 39			; 00000027H
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 42			; 0000002aH
	jge	SHORT $LN2@kttc__peek
; Line 177
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 179
	xor	eax, eax
$LN1@kttc__peek:
; Line 180
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_func_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_storage_class PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 157
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 158
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 160
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 62			; 0000003eH
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 71			; 00000047H
	jge	SHORT $LN2@kttc__peek
; Line 163
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 165
	xor	eax, eax
$LN1@kttc__peek:
; Line 166
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_storage_class ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
ccsee_typespec PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 143
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 144
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 146
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 43			; 0000002bH
	jle	SHORT $LN2@ccsee_type
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 64			; 00000040H
	jge	SHORT $LN2@ccsee_type
; Line 149
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@ccsee_type
$LN2@ccsee_type:
; Line 151
	xor	eax, eax
$LN1@ccsee_type:
; Line 152
	add	rsp, 56					; 00000038H
	ret	0
ccsee_typespec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_type_qualifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 129
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 130
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 132
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 34			; 00000022H
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 38			; 00000026H
	jge	SHORT $LN2@kttc__peek
; Line 135
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 137
	xor	eax, eax
$LN1@kttc__peek:
; Line 138
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_alignment_specifier PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 115
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 116
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 118
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 30
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 33			; 00000021H
	jge	SHORT $LN2@kttc__peek
; Line 121
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 123
	xor	eax, eax
$LN1@kttc__peek:
; Line 124
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
_k$ = 56
cceat	PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 103
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 104
	mov	edx, DWORD PTR _k$[rsp]
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@cceat
; Line 105
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccgobble
	jmp	SHORT $LN1@cceat
$LN2@cceat:
; Line 106
	xor	eax, eax
$LN1@cceat:
; Line 107
	add	rsp, 40					; 00000028H
	ret	0
cceat	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
_r$ = 64
ccgobble PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 93
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 95
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR [rcx+128]
	cmp	QWORD PTR [rax+136], rcx
	jae	SHORT $LN2@ccgobble
; Line 96
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR [rcx+136]
	mov	QWORD PTR [rax+144], rcx
	mov	rax, QWORD PTR _r$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	QWORD PTR tv73[rsp], rax
	mov	rax, QWORD PTR _r$[rsp]
	mov	rax, QWORD PTR [rax+136]
	add	rax, 64					; 00000040H
	mov	rcx, QWORD PTR _r$[rsp]
	mov	QWORD PTR [rcx+136], rax
	mov	rax, QWORD PTR tv73[rsp]
	jmp	SHORT $LN1@ccgobble
$LN2@ccgobble:
; Line 98
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccpeep
$LN1@ccgobble:
; Line 99
	add	rsp, 56					; 00000038H
	ret	0
ccgobble ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
ccsee_end PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 86
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 87
	xor	edx, edx
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccsee
; Line 88
	add	rsp, 40					; 00000028H
	ret	0
ccsee_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
_r$ = 64
kind$ = 72
ccsee	PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 80
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 81
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccpeep
	mov	ecx, DWORD PTR kind$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@ccsee
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@ccsee
$LN3@ccsee:
	mov	DWORD PTR tv68[rsp], 0
$LN4@ccsee:
	mov	eax, DWORD PTR tv68[rsp]
; Line 82
	add	rsp, 56					; 00000038H
	ret	0
ccsee	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
ccpeep	PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 74
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 75
	xor	edx, edx
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccpeek
; Line 76
	add	rsp, 40					; 00000028H
	ret	0
ccpeep	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 8
_o$ = 16
ccpeek	PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 61
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 62
	movsxd	rax, DWORD PTR _o$[rsp]
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR _r$[rsp]
	add	rax, QWORD PTR [rcx+136]
	mov	rcx, QWORD PTR _r$[rsp]
	cmp	rax, QWORD PTR [rcx+128]
	jae	SHORT $LN2@ccpeek
; Line 64
	movsxd	rax, DWORD PTR _o$[rsp]
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR _r$[rsp]
	add	rax, QWORD PTR [rcx+136]
	jmp	SHORT $LN1@ccpeek
$LN2@ccpeek:
; Line 69
	lea	rax, OFFSET FLAT:?end_tok@?1??ccpeek@@9@4Ucctoken_t@@A
$LN1@ccpeek:
; Line 70
	ret	0
ccpeek	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 32
file$ = 40
data$ = 48
_r$ = 80
name$ = 88
ccread_include PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 38
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 39
	mov	DWORD PTR size$[rsp], 0
; Line 40
	mov	rcx, QWORD PTR name$[rsp]
	call	ccopenfile
	mov	QWORD PTR file$[rsp], rax
; Line 41
	lea	r8, QWORD PTR size$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	ccpullfile
	mov	QWORD PTR data$[rsp], rax
; Line 42
	mov	rcx, QWORD PTR file$[rsp]
	call	ccclosefile
; Line 44
	mov	eax, DWORD PTR size$[rsp]
	mov	r8, QWORD PTR data$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccreader_move
; Line 48
	add	rsp, 72					; 00000048H
	ret	0
ccread_include ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 32
_r$ = 64
_l$ = 72
_d$ = 80
ccreader_move PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 27
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 28
	mov	rax, QWORD PTR _r$[rsp]
	mov	r8, QWORD PTR _d$[rsp]
	mov	rdx, QWORD PTR _l$[rsp]
	mov	rcx, rax
	call	cclex_move
; Line 29
	mov	rcx, QWORD PTR _r$[rsp]
	call	ccread_all_tokens
; Line 31
	mov	rax, QWORD PTR _r$[rsp]
	mov	QWORD PTR [rax+144], 0
; Line 32
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR [rcx+120]
	mov	QWORD PTR [rax+136], rcx
; Line 33
	mov	rax, QWORD PTR _r$[rsp]
	cmp	QWORD PTR [rax+120], 0
	je	SHORT $LN3@ccreader_m
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR _r$[rsp]
	mov	rcx, QWORD PTR [rcx+120]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN4@ccreader_m
$LN3@ccreader_m:
	mov	DWORD PTR tv79[rsp], 0
$LN4@ccreader_m:
	mov	eax, DWORD PTR tv79[rsp]
	xor	edx, edx
	mov	ecx, 64					; 00000040H
	div	rcx
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR _r$[rsp]
	add	rax, QWORD PTR [rcx+120]
	mov	rcx, QWORD PTR _r$[rsp]
	mov	QWORD PTR [rcx+128], rax
; Line 34
	add	rsp, 56					; 00000038H
	ret	0
ccreader_move ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$1 = 32
_r$ = 64
ccread_all_tokens PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 52
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@ccread_all:
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, rax
	call	cclex_next_token
	test	eax, eax
	je	SHORT $LN3@ccread_all
; Line 54
	mov	rax, QWORD PTR _r$[rsp]
	add	rax, 120				; 00000078H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 64					; 00000040H
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR _r$[rsp]
	add	rax, QWORD PTR [rcx+120]
	mov	QWORD PTR token$1[rsp], rax
; Line 55
	mov	rax, QWORD PTR _r$[rsp]
	mov	rdx, QWORD PTR token$1[rsp]
	mov	rcx, rax
	call	cclex_token
; Line 56
	jmp	SHORT $LN2@ccread_all
$LN3@ccread_all:
; Line 57
	add	rsp, 56					; 00000038H
	ret	0
ccread_all_tokens ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
_r$ = 64
ccread_uninit PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 16
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 17
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, rax
	call	cclex_uninit
; Line 18
	mov	rax, QWORD PTR _r$[rsp]
	cmp	QWORD PTR [rax+120], 0
	je	SHORT $LN3@ccread_uni
	mov	rax, QWORD PTR _r$[rsp]
	mov	rax, QWORD PTR [rax+120]
	sub	rax, 24
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN4@ccread_uni
$LN3@ccread_uni:
	mov	QWORD PTR tv73[rsp], 0
$LN4@ccread_uni:
	mov	r9d, 18
	lea	r8, OFFSET FLAT:$SG48514
	lea	rdx, OFFSET FLAT:$SG48515
	mov	rcx, QWORD PTR tv73[rsp]
	call	ccfree_
; Line 19
	add	rsp, 56					; 00000038H
	ret	0
ccread_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_r$ = 48
ccread_init PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 9
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 10
	mov	r8d, 152				; 00000098H
	xor	edx, edx
	mov	rcx, QWORD PTR _r$[rsp]
	call	memset
; Line 11
	mov	rax, QWORD PTR _r$[rsp]
	mov	rcx, rax
	call	cclex_init
; Line 12
	add	rsp, 40					; 00000028H
	ret	0
ccread_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
end$ = 32
com$ = 36
res$ = 40
tv135 = 44
cur$ = 48
l$ = 80
str$ = 88
cclex_readstr PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 234
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 237
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 17
; Line 238
	mov	rax, QWORD PTR l$[rsp]
	mov	QWORD PTR [rax+64], 0
; Line 240
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR end$[rsp], al
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 244
	mov	DWORD PTR res$[rsp], 32			; 00000020H
	mov	DWORD PTR com$[rsp], 0
	jmp	SHORT $LN4@cclex_read
$LN2@cclex_read:
	mov	eax, DWORD PTR res$[rsp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR res$[rsp], eax
$LN4@cclex_read:
	mov	rax, QWORD PTR l$[rsp]
	add	rax, 64					; 00000040H
	xor	r9d, r9d
	mov	r8d, DWORD PTR res$[rsp]
	mov	edx, 1
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR l$[rsp]
	add	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR cur$[rsp], rax
	cmp	QWORD PTR cur$[rsp], 0
	je	$LN3@cclex_read
; Line 246
	jmp	SHORT $LN7@cclex_read
$LN5@cclex_read:
	mov	eax, DWORD PTR com$[rsp]
	inc	eax
	mov	DWORD PTR com$[rsp], eax
$LN7@cclex_read:
	mov	eax, DWORD PTR res$[rsp]
	cmp	DWORD PTR com$[rsp], eax
	jae	$LN6@cclex_read
; Line 248
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR end$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN10@cclex_read
; Line 249
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
; Line 250
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 251
	mov	eax, DWORD PTR com$[rsp]
	inc	eax
	mov	DWORD PTR com$[rsp], eax
; Line 253
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 15
; Line 254
	mov	rax, QWORD PTR l$[rsp]
	add	rax, 64					; 00000040H
	mov	r9d, DWORD PTR com$[rsp]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, rax
	call	ccdlb_arradd
; Line 255
	mov	rax, QWORD PTR str$[rsp]
	jmp	$LN1@cclex_read
; Line 256
	jmp	$LN11@cclex_read
$LN10@cclex_read:
; Line 257
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	jne	$LN12@cclex_read
; Line 258
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv135[rsp], eax
	mov	eax, DWORD PTR tv135[rsp]
	sub	eax, 34					; 00000022H
	mov	DWORD PTR tv135[rsp], eax
	cmp	DWORD PTR tv135[rsp], 86		; 00000056H
	ja	$LN25@cclex_read
	movsxd	rax, DWORD PTR tv135[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN27@cclex_read[rcx+rax]
	mov	eax, DWORD PTR $LN28@cclex_read[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN14@cclex_read:
; Line 259
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 92			; 0000005cH
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN15@cclex_read:
; Line 260
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 39			; 00000027H
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN16@cclex_read:
; Line 261
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 34			; 00000022H
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN17@cclex_read:
; Line 262
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 9
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN18@cclex_read:
; Line 263
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 12
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN19@cclex_read:
; Line 264
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 10
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN20@cclex_read:
; Line 265
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 13
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN21@cclex_read:
; Line 268
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN22@cclex_read:
$LN23@cclex_read:
; Line 272
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN24@cclex_read:
; Line 275
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN25@cclex_read:
; Line 278
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
$LN8@cclex_read:
; Line 280
	mov	rax, QWORD PTR str$[rsp]
	add	rax, 2
	mov	QWORD PTR str$[rsp], rax
	jmp	SHORT $LN13@cclex_read
$LN12@cclex_read:
; Line 281
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
$LN13@cclex_read:
$LN11@cclex_read:
; Line 282
	jmp	$LN5@cclex_read
$LN6@cclex_read:
; Line 283
	jmp	$LN2@cclex_read
$LN3@cclex_read:
; Line 284
	mov	rax, QWORD PTR str$[rsp]
$LN1@cclex_read:
; Line 285
	add	rsp, 72					; 00000048H
	ret	0
	npad	1
$LN28@cclex_read:
	DD	$LN16@cclex_read
	DD	$LN15@cclex_read
	DD	$LN21@cclex_read
	DD	$LN23@cclex_read
	DD	$LN14@cclex_read
	DD	$LN18@cclex_read
	DD	$LN19@cclex_read
	DD	$LN20@cclex_read
	DD	$LN17@cclex_read
	DD	$LN24@cclex_read
	DD	$LN22@cclex_read
	DD	$LN25@cclex_read
$LN27@cclex_read:
	DB	0
	DB	11
	DB	11
	DB	11
	DB	11
	DB	1
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	2
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	3
	DB	11
	DB	11
	DB	11
	DB	4
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	5
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	6
	DB	11
	DB	11
	DB	11
	DB	7
	DB	11
	DB	8
	DB	9
	DB	11
	DB	11
	DB	10
cclex_readstr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
l$ = 80
str$ = 88
cclex_identifier PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 226
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR str$[rsp]
	call	cclex_idenlen
	mov	DWORD PTR len$[rsp], eax
; Line 227
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 18
; Line 228
	mov	rax, QWORD PTR l$[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1
	mov	r8, QWORD PTR str$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_hash
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+64], rax
; Line 229
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
; Line 230
	add	rsp, 72					; 00000048H
	ret	0
cclex_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
l$ = 64
cclex_next_token PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 212
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN10@cclex_next:
$LN9@cclex_next:
$LN8@cclex_next:
$LN4@cclex_next:
; Line 214
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_next_token_internal
; Line 217
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 13
	je	SHORT $LN4@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 11
	je	SHORT $LN8@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 1
	je	SHORT $LN9@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 2
	je	SHORT $LN10@cclex_next
; Line 220
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 0
	jle	SHORT $LN6@cclex_next
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN7@cclex_next
$LN6@cclex_next:
	mov	DWORD PTR tv80[rsp], 0
$LN7@cclex_next:
	mov	eax, DWORD PTR tv80[rsp]
; Line 221
	add	rsp, 56					; 00000038H
	ret	0
cclex_next_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$1 = 32
tv92 = 36
tv635 = 40
tv77 = 44
u$2 = 48
d$3 = 56
p$4 = 64
l$ = 96
cclex_next_token_internal PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 290
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 291
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+24], rcx
; Line 295
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+72], rcx
; Line 298
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jb	SHORT $LN15@cclex_next
; Line 299
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 0
; Line 300
	jmp	$LN1@cclex_next
$LN15@cclex_next:
; Line 302
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv77[rsp], eax
	cmp	DWORD PTR tv77[rsp], 126		; 0000007eH
	ja	SHORT $LN16@cclex_next
	movsxd	rax, DWORD PTR tv77[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN192@cclex_next[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN16@cclex_next:
; Line 304
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], -1
; Line 305
	jmp	$LN2@cclex_next
$LN17@cclex_next:
$LN18@cclex_next:
$LN19@cclex_next:
$LN20@cclex_next:
$LN21@cclex_next:
$LN22@cclex_next:
$LN23@cclex_next:
$LN24@cclex_next:
$LN25@cclex_next:
$LN26@cclex_next:
; Line 312
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	$LN27@cclex_next
; Line 313
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR tv92[rsp], al
	cmp	BYTE PTR tv92[rsp], 98			; 00000062H
	je	$LN33@cclex_next
	cmp	BYTE PTR tv92[rsp], 100			; 00000064H
	je	SHORT $LN31@cclex_next
	cmp	BYTE PTR tv92[rsp], 104			; 00000068H
	je	SHORT $LN29@cclex_next
	cmp	BYTE PTR tv92[rsp], 111			; 0000006fH
	je	SHORT $LN32@cclex_next
	cmp	BYTE PTR tv92[rsp], 120			; 00000078H
	je	SHORT $LN30@cclex_next
	jmp	$LN34@cclex_next
$LN29@cclex_next:
$LN30@cclex_next:
; Line 316
	mov	DWORD PTR b$1[rsp], 16
; Line 317
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 318
	jmp	SHORT $LN4@cclex_next
$LN31@cclex_next:
; Line 320
	mov	DWORD PTR b$1[rsp], 10
; Line 321
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 322
	jmp	SHORT $LN4@cclex_next
$LN32@cclex_next:
; Line 324
	mov	DWORD PTR b$1[rsp], 8
; Line 325
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 326
	jmp	SHORT $LN4@cclex_next
$LN33@cclex_next:
; Line 328
	mov	DWORD PTR b$1[rsp], 2
; Line 329
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 330
	jmp	SHORT $LN4@cclex_next
$LN34@cclex_next:
; Line 332
	mov	DWORD PTR b$1[rsp], 10
$LN4@cclex_next:
; Line 335
	jmp	SHORT $LN28@cclex_next
$LN27@cclex_next:
; Line 336
	mov	DWORD PTR b$1[rsp], 10
$LN28@cclex_next:
; Line 338
	mov	QWORD PTR u$2[rsp], 0
$LN6@cclex_next:
; Line 339
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN7@cclex_next
; Line 340
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN35@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN35@cclex_next
; Line 341
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 342
	jmp	$LN36@cclex_next
$LN35@cclex_next:
; Line 343
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN37@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN37@cclex_next
; Line 344
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 345
	jmp	SHORT $LN38@cclex_next
$LN37@cclex_next:
; Line 346
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN39@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN39@cclex_next
; Line 347
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 348
	jmp	SHORT $LN40@cclex_next
$LN39@cclex_next:
; Line 349
	jmp	SHORT $LN7@cclex_next
$LN40@cclex_next:
$LN38@cclex_next:
$LN36@cclex_next:
; Line 351
	jmp	$LN6@cclex_next
$LN7@cclex_next:
; Line 352
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN41@cclex_next
; Line 353
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 356
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR p$4[rsp], xmm0
; Line 357
	mov	QWORD PTR d$3[rsp], 0
; Line 359
	jmp	SHORT $LN10@cclex_next
$LN8@cclex_next:
	cvtsi2sd xmm0, DWORD PTR b$1[rsp]
	movsd	xmm1, QWORD PTR p$4[rsp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p$4[rsp], xmm0
$LN10@cclex_next:
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN9@cclex_next
; Line 360
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN43@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN43@cclex_next
; Line 361
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 362
	jmp	$LN44@cclex_next
$LN43@cclex_next:
; Line 363
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN45@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN45@cclex_next
; Line 364
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 365
	jmp	SHORT $LN46@cclex_next
$LN45@cclex_next:
; Line 366
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN47@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN47@cclex_next
; Line 367
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 368
	jmp	SHORT $LN48@cclex_next
$LN47@cclex_next:
; Line 369
	jmp	SHORT $LN9@cclex_next
$LN48@cclex_next:
$LN46@cclex_next:
$LN44@cclex_next:
; Line 371
	jmp	$LN8@cclex_next
$LN9@cclex_next:
; Line 372
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 20
; Line 373
	mov	rax, QWORD PTR u$2[rsp]
	test	rax, rax
	jl	SHORT $LN190@cclex_next
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN191@cclex_next
$LN190@cclex_next:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN191@cclex_next:
	mov	rax, QWORD PTR d$3[rsp]
	test	rax, rax
	jl	SHORT $LN188@cclex_next
	cvtsi2sd xmm1, rax
	jmp	SHORT $LN189@cclex_next
$LN188@cclex_next:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
	movaps	xmm1, xmm2
$LN189@cclex_next:
	divsd	xmm1, QWORD PTR p$4[rsp]
	addsd	xmm0, xmm1
	mov	rax, QWORD PTR l$[rsp]
	movsd	QWORD PTR [rax+64], xmm0
; Line 374
	jmp	SHORT $LN42@cclex_next
$LN41@cclex_next:
; Line 375
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 19
; Line 376
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	mov	QWORD PTR [rax+64], rcx
$LN42@cclex_next:
; Line 378
	jmp	$LN2@cclex_next
$LN49@cclex_next:
$LN50@cclex_next:
$LN51@cclex_next:
$LN52@cclex_next:
$LN53@cclex_next:
$LN54@cclex_next:
$LN55@cclex_next:
$LN56@cclex_next:
$LN57@cclex_next:
$LN58@cclex_next:
$LN59@cclex_next:
$LN60@cclex_next:
$LN61@cclex_next:
$LN62@cclex_next:
$LN63@cclex_next:
$LN64@cclex_next:
$LN65@cclex_next:
$LN66@cclex_next:
$LN67@cclex_next:
$LN68@cclex_next:
$LN69@cclex_next:
$LN70@cclex_next:
$LN71@cclex_next:
$LN72@cclex_next:
$LN73@cclex_next:
$LN74@cclex_next:
$LN75@cclex_next:
$LN76@cclex_next:
$LN77@cclex_next:
$LN78@cclex_next:
$LN79@cclex_next:
$LN80@cclex_next:
$LN81@cclex_next:
$LN82@cclex_next:
$LN83@cclex_next:
$LN84@cclex_next:
$LN85@cclex_next:
$LN86@cclex_next:
$LN87@cclex_next:
$LN88@cclex_next:
$LN89@cclex_next:
$LN90@cclex_next:
$LN91@cclex_next:
$LN92@cclex_next:
$LN93@cclex_next:
$LN94@cclex_next:
$LN95@cclex_next:
$LN96@cclex_next:
$LN97@cclex_next:
$LN98@cclex_next:
$LN99@cclex_next:
$LN100@cclex_next:
$LN101@cclex_next:
; Line 391
	mov	rax, QWORD PTR l$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_identifier
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 392
	jmp	$LN2@cclex_next
$LN102@cclex_next:
; Line 394
	mov	rax, QWORD PTR l$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_readstr
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 395
	jmp	$LN2@cclex_next
$LN103@cclex_next:
; Line 397
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 10
; Line 398
	jmp	$LN2@cclex_next
$LN104@cclex_next:
; Line 400
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 9
; Line 401
	jmp	$LN2@cclex_next
$LN105@cclex_next:
; Line 406
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 3
; Line 407
	jmp	$LN2@cclex_next
$LN106@cclex_next:
; Line 409
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 4
; Line 410
	jmp	$LN2@cclex_next
$LN107@cclex_next:
; Line 412
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 7
; Line 413
	jmp	$LN2@cclex_next
$LN108@cclex_next:
; Line 415
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 8
; Line 416
	jmp	$LN2@cclex_next
$LN109@cclex_next:
; Line 418
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 5
; Line 419
	jmp	$LN2@cclex_next
$LN110@cclex_next:
; Line 421
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 6
; Line 422
	jmp	$LN2@cclex_next
$LN111@cclex_next:
; Line 425
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 86			; 00000056H
; Line 426
	jmp	$LN2@cclex_next
$LN112@cclex_next:
; Line 430
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN113@cclex_next
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN113@cclex_next
; Line 431
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 3
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 12
; Line 432
	jmp	SHORT $LN114@cclex_next
$LN113@cclex_next:
; Line 433
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 90			; 0000005aH
$LN114@cclex_next:
; Line 435
	jmp	$LN2@cclex_next
$LN115@cclex_next:
; Line 440
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN116@cclex_next
; Line 441
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 120			; 00000078H
; Line 442
	jmp	SHORT $LN117@cclex_next
$LN116@cclex_next:
; Line 443
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 104			; 00000068H
$LN117@cclex_next:
; Line 445
	jmp	$LN2@cclex_next
$LN118@cclex_next:
; Line 451
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 124				; 0000007cH
	jne	SHORT $LN119@cclex_next
; Line 452
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 107			; 0000006bH
; Line 453
	jmp	SHORT $LN120@cclex_next
$LN119@cclex_next:
; Line 454
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN121@cclex_next
; Line 455
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 121			; 00000079H
; Line 456
	jmp	SHORT $LN122@cclex_next
$LN121@cclex_next:
; Line 457
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 105			; 00000069H
$LN122@cclex_next:
$LN120@cclex_next:
; Line 459
	jmp	$LN2@cclex_next
$LN123@cclex_next:
; Line 465
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 38					; 00000026H
	jne	SHORT $LN124@cclex_next
; Line 466
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 106			; 0000006aH
; Line 467
	jmp	SHORT $LN125@cclex_next
$LN124@cclex_next:
; Line 468
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN126@cclex_next
; Line 469
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 119			; 00000077H
; Line 470
	jmp	SHORT $LN127@cclex_next
$LN126@cclex_next:
; Line 471
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 103			; 00000067H
$LN127@cclex_next:
$LN125@cclex_next:
; Line 473
	jmp	$LN2@cclex_next
$LN128@cclex_next:
; Line 478
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN129@cclex_next
; Line 479
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 111			; 0000006fH
; Line 480
	jmp	SHORT $LN130@cclex_next
$LN129@cclex_next:
; Line 481
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 93			; 0000005dH
$LN130@cclex_next:
; Line 483
	jmp	$LN2@cclex_next
$LN131@cclex_next:
; Line 488
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN132@cclex_next
; Line 489
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 110			; 0000006eH
; Line 490
	jmp	SHORT $LN133@cclex_next
$LN132@cclex_next:
; Line 491
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 92			; 0000005cH
$LN133@cclex_next:
; Line 493
	jmp	$LN2@cclex_next
$LN134@cclex_next:
; Line 506
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN135@cclex_next
; Line 507
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 113			; 00000071H
; Line 508
	jmp	SHORT $LN136@cclex_next
$LN135@cclex_next:
; Line 509
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 95			; 0000005fH
$LN136@cclex_next:
; Line 511
	jmp	$LN2@cclex_next
$LN137@cclex_next:
; Line 524
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN138@cclex_next
; Line 525
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 91			; 0000005bH
; Line 526
	jmp	SHORT $LN139@cclex_next
$LN138@cclex_next:
; Line 527
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN140@cclex_next
; Line 528
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 114			; 00000072H
; Line 529
	jmp	SHORT $LN141@cclex_next
$LN140@cclex_next:
; Line 530
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 96			; 00000060H
$LN141@cclex_next:
$LN139@cclex_next:
; Line 532
	jmp	$LN2@cclex_next
$LN142@cclex_next:
; Line 537
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN143@cclex_next
; Line 538
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 101			; 00000065H
; Line 539
	jmp	SHORT $LN144@cclex_next
$LN143@cclex_next:
; Line 540
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 109			; 0000006dH
$LN144@cclex_next:
; Line 542
	jmp	$LN2@cclex_next
$LN145@cclex_next:
; Line 547
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN146@cclex_next
; Line 548
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 102			; 00000066H
; Line 549
	jmp	SHORT $LN147@cclex_next
$LN146@cclex_next:
; Line 550
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 89			; 00000059H
$LN147@cclex_next:
; Line 552
	jmp	$LN2@cclex_next
$LN148@cclex_next:
; Line 557
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN149@cclex_next
; Line 558
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 117			; 00000075H
; Line 559
	jmp	SHORT $LN150@cclex_next
$LN149@cclex_next:
; Line 560
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 99			; 00000063H
$LN150@cclex_next:
; Line 562
	jmp	$LN2@cclex_next
$LN151@cclex_next:
; Line 567
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN152@cclex_next
; Line 568
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 118			; 00000076H
; Line 569
	jmp	SHORT $LN153@cclex_next
$LN152@cclex_next:
; Line 570
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 100			; 00000064H
$LN153@cclex_next:
; Line 572
	jmp	$LN2@cclex_next
$LN154@cclex_next:
; Line 577
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN155@cclex_next
; Line 578
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 112			; 00000070H
; Line 579
	jmp	SHORT $LN156@cclex_next
$LN155@cclex_next:
; Line 580
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 94			; 0000005eH
$LN156@cclex_next:
; Line 582
	jmp	$LN2@cclex_next
$LN157@cclex_next:
; Line 585
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN158@cclex_next
; Line 586
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], -1
; Line 587
	jmp	SHORT $LN159@cclex_next
$LN158@cclex_next:
; Line 588
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], -1
$LN159@cclex_next:
; Line 590
	jmp	$LN2@cclex_next
$LN160@cclex_next:
; Line 593
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 0
; Line 594
	jmp	$LN2@cclex_next
$LN161@cclex_next:
$LN162@cclex_next:
$LN163@cclex_next:
$LN164@cclex_next:
$LN165@cclex_next:
; Line 599
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 11
; Line 600
	jmp	$LN2@cclex_next
$LN166@cclex_next:
; Line 602
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN167@cclex_next
; Line 603
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 1
; Line 604
	jmp	SHORT $LN168@cclex_next
$LN167@cclex_next:
; Line 605
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 1
$LN168@cclex_next:
; Line 607
	jmp	SHORT $LN2@cclex_next
$LN169@cclex_next:
; Line 609
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 1
; Line 610
	jmp	SHORT $LN2@cclex_next
$LN170@cclex_next:
; Line 612
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 2
$LN2@cclex_next:
; Line 616
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 617
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
$LN185@cclex_next:
$LN184@cclex_next:
$LN183@cclex_next:
$LN11@cclex_next:
; Line 619
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN12@cclex_next
; Line 620
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv635[rsp], eax
	mov	eax, DWORD PTR tv635[rsp]
	sub	eax, 8
	mov	DWORD PTR tv635[rsp], eax
	cmp	DWORD PTR tv635[rsp], 51		; 00000033H
	ja	$LN181@cclex_next
	movsxd	rax, DWORD PTR tv635[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN186@cclex_next[rcx+rax]
	mov	eax, DWORD PTR $LN187@cclex_next[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN171@cclex_next:
$LN172@cclex_next:
$LN173@cclex_next:
$LN174@cclex_next:
$LN175@cclex_next:
; Line 622
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 623
	jmp	SHORT $LN11@cclex_next
$LN176@cclex_next:
; Line 625
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN177@cclex_next
; Line 626
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 627
	jmp	SHORT $LN178@cclex_next
$LN177@cclex_next:
; Line 628
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN178@cclex_next:
; Line 630
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	and	eax, 1
	inc	eax
	and	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 631
	jmp	$LN183@cclex_next
$LN179@cclex_next:
; Line 633
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 634
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	and	eax, 1
	inc	eax
	and	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 635
	jmp	$LN184@cclex_next
$LN180@cclex_next:
; Line 637
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 638
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	shr	eax, 1
	and	eax, 1
	inc	eax
	and	eax, 1
	shl	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 639
	jmp	$LN185@cclex_next
$LN181@cclex_next:
; Line 642
	jmp	SHORT $LN1@cclex_next
; Line 644
	jmp	$LN11@cclex_next
$LN12@cclex_next:
$LN1@cclex_next:
; Line 645
	add	rsp, 88					; 00000058H
	ret	0
	npad	3
$LN192@cclex_next:
	DD	$LN160@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN165@cclex_next
	DD	$LN162@cclex_next
	DD	$LN169@cclex_next
	DD	$LN164@cclex_next
	DD	$LN163@cclex_next
	DD	$LN166@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN161@cclex_next
	DD	$LN145@cclex_next
	DD	$LN102@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN154@cclex_next
	DD	$LN123@cclex_next
	DD	$LN16@cclex_next
	DD	$LN105@cclex_next
	DD	$LN106@cclex_next
	DD	$LN131@cclex_next
	DD	$LN134@cclex_next
	DD	$LN104@cclex_next
	DD	$LN137@cclex_next
	DD	$LN112@cclex_next
	DD	$LN128@cclex_next
	DD	$LN17@cclex_next
	DD	$LN18@cclex_next
	DD	$LN19@cclex_next
	DD	$LN20@cclex_next
	DD	$LN21@cclex_next
	DD	$LN22@cclex_next
	DD	$LN23@cclex_next
	DD	$LN24@cclex_next
	DD	$LN25@cclex_next
	DD	$LN26@cclex_next
	DD	$LN103@cclex_next
	DD	$LN170@cclex_next
	DD	$LN151@cclex_next
	DD	$LN142@cclex_next
	DD	$LN148@cclex_next
	DD	$LN157@cclex_next
	DD	$LN16@cclex_next
	DD	$LN49@cclex_next
	DD	$LN50@cclex_next
	DD	$LN51@cclex_next
	DD	$LN52@cclex_next
	DD	$LN53@cclex_next
	DD	$LN54@cclex_next
	DD	$LN55@cclex_next
	DD	$LN56@cclex_next
	DD	$LN57@cclex_next
	DD	$LN58@cclex_next
	DD	$LN59@cclex_next
	DD	$LN60@cclex_next
	DD	$LN61@cclex_next
	DD	$LN62@cclex_next
	DD	$LN63@cclex_next
	DD	$LN64@cclex_next
	DD	$LN65@cclex_next
	DD	$LN66@cclex_next
	DD	$LN67@cclex_next
	DD	$LN68@cclex_next
	DD	$LN69@cclex_next
	DD	$LN70@cclex_next
	DD	$LN71@cclex_next
	DD	$LN72@cclex_next
	DD	$LN73@cclex_next
	DD	$LN74@cclex_next
	DD	$LN107@cclex_next
	DD	$LN16@cclex_next
	DD	$LN108@cclex_next
	DD	$LN115@cclex_next
	DD	$LN101@cclex_next
	DD	$LN16@cclex_next
	DD	$LN75@cclex_next
	DD	$LN76@cclex_next
	DD	$LN77@cclex_next
	DD	$LN78@cclex_next
	DD	$LN79@cclex_next
	DD	$LN80@cclex_next
	DD	$LN81@cclex_next
	DD	$LN82@cclex_next
	DD	$LN83@cclex_next
	DD	$LN84@cclex_next
	DD	$LN85@cclex_next
	DD	$LN86@cclex_next
	DD	$LN87@cclex_next
	DD	$LN88@cclex_next
	DD	$LN89@cclex_next
	DD	$LN90@cclex_next
	DD	$LN91@cclex_next
	DD	$LN92@cclex_next
	DD	$LN93@cclex_next
	DD	$LN94@cclex_next
	DD	$LN95@cclex_next
	DD	$LN96@cclex_next
	DD	$LN97@cclex_next
	DD	$LN98@cclex_next
	DD	$LN99@cclex_next
	DD	$LN100@cclex_next
	DD	$LN109@cclex_next
	DD	$LN118@cclex_next
	DD	$LN110@cclex_next
	DD	$LN111@cclex_next
$LN187@cclex_next:
	DD	$LN175@cclex_next
	DD	$LN172@cclex_next
	DD	$LN179@cclex_next
	DD	$LN174@cclex_next
	DD	$LN173@cclex_next
	DD	$LN176@cclex_next
	DD	$LN171@cclex_next
	DD	$LN180@cclex_next
	DD	$LN181@cclex_next
$LN186@cclex_next:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
cclex_next_token_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
l$ = 96
token$ = 104
cclex_token PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 204
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR l$[rsp]
	mov	rdi, QWORD PTR token$[rsp]
	lea	rsi, QWORD PTR [rax+56]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 205
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 64					; 00000040H
	rep stosb
	mov	rax, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rax+56]
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 206
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
cclex_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 0
s$ = 32
cclex_idenlen PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 195
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 196
	mov	DWORD PTR l$[rsp], 0
	jmp	SHORT $LN4@cclex_iden
$LN2@cclex_iden:
; Line 198
	mov	eax, DWORD PTR l$[rsp]
	inc	eax
	mov	DWORD PTR l$[rsp], eax
$LN4@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN6@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 122				; 0000007aH
	jle	SHORT $LN5@cclex_iden
$LN6@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN7@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 90					; 0000005aH
	jle	SHORT $LN5@cclex_iden
$LN7@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN8@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN5@cclex_iden
$LN8@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 95					; 0000005fH
	jne	SHORT $LN3@cclex_iden
$LN5@cclex_iden:
	jmp	$LN2@cclex_iden
$LN3@cclex_iden:
; Line 199
	mov	eax, DWORD PTR l$[rsp]
; Line 200
	add	rsp, 24
	ret	0
cclex_idenlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 8
cclex_uninit PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 185
	mov	QWORD PTR [rsp+8], rcx
; Line 188
	ret	0
cclex_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
l$ = 128
cclex_init PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 172
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 173
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 64					; 00000040H
	rep stosb
	mov	rax, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rax+56]
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 175
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+32], 1024		; 00000400H
; Line 176
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+36], 0
; Line 177
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	rax, rax, 24
	mov	r9d, 177				; 000000b1H
	lea	r8, OFFSET FLAT:$SG48240
	lea	rdx, OFFSET FLAT:$SG48241
	mov	rcx, rax
	call	ccmalloc_
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 178
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	rax, rax, 24
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	memset
; Line 180
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_hash_init
; Line 181
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
cclex_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 8
len$ = 16
bed$ = 24
cclex_move PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 165
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 166
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 167
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+24], rcx
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 168
	ret	0
cclex_move ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lexer$ = 48
cclex_hash_init PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 71
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 77
	mov	r9d, 21
	lea	r8, OFFSET FLAT:$SG48174
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 78
	mov	r9d, 22
	lea	r8, OFFSET FLAT:$SG48175
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 79
	mov	r9d, 23
	lea	r8, OFFSET FLAT:$SG48176
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 80
	mov	r9d, 24
	lea	r8, OFFSET FLAT:$SG48177
	mov	edx, 9
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 81
	mov	r9d, 25
	lea	r8, OFFSET FLAT:$SG48178
	mov	edx, 10
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 82
	mov	r9d, 26
	lea	r8, OFFSET FLAT:$SG48179
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 83
	mov	r9d, 27
	lea	r8, OFFSET FLAT:$SG48180
	mov	edx, 9
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 84
	mov	r9d, 28
	lea	r8, OFFSET FLAT:$SG48181
	mov	edx, 10
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 85
	mov	r9d, 29
	lea	r8, OFFSET FLAT:$SG48182
	mov	edx, 11
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 91
	mov	r9d, 31
	lea	r8, OFFSET FLAT:$SG48183
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 92
	mov	r9d, 32					; 00000020H
	lea	r8, OFFSET FLAT:$SG48184
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 98
	mov	r9d, 35					; 00000023H
	lea	r8, OFFSET FLAT:$SG48185
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 99
	mov	r9d, 36					; 00000024H
	lea	r8, OFFSET FLAT:$SG48186
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 100
	mov	r9d, 37					; 00000025H
	lea	r8, OFFSET FLAT:$SG48187
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 106
	mov	r9d, 40					; 00000028H
	lea	r8, OFFSET FLAT:$SG48188
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 107
	mov	r9d, 41					; 00000029H
	lea	r8, OFFSET FLAT:$SG48189
	mov	edx, 9
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 113
	mov	r9d, 44					; 0000002cH
	lea	r8, OFFSET FLAT:$SG48190
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 114
	mov	r9d, 45					; 0000002dH
	lea	r8, OFFSET FLAT:$SG48191
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 115
	mov	r9d, 46					; 0000002eH
	lea	r8, OFFSET FLAT:$SG48192
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 116
	mov	r9d, 47					; 0000002fH
	lea	r8, OFFSET FLAT:$SG48193
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 117
	mov	r9d, 48					; 00000030H
	lea	r8, OFFSET FLAT:$SG48194
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 118
	mov	r9d, 49					; 00000031H
	lea	r8, OFFSET FLAT:$SG48195
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 119
	mov	r9d, 50					; 00000032H
	lea	r8, OFFSET FLAT:$SG48196
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 120
	mov	r9d, 51					; 00000033H
	lea	r8, OFFSET FLAT:$SG48197
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 121
	mov	r9d, 52					; 00000034H
	lea	r8, OFFSET FLAT:$SG48198
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 122
	mov	r9d, 53					; 00000035H
	lea	r8, OFFSET FLAT:$SG48199
	mov	edx, 3
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 123
	mov	r9d, 54					; 00000036H
	lea	r8, OFFSET FLAT:$SG48200
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 124
	mov	r9d, 55					; 00000037H
	lea	r8, OFFSET FLAT:$SG48201
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 125
	mov	r9d, 56					; 00000038H
	lea	r8, OFFSET FLAT:$SG48202
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 126
	mov	r9d, 57					; 00000039H
	lea	r8, OFFSET FLAT:$SG48203
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 127
	mov	r9d, 58					; 0000003aH
	lea	r8, OFFSET FLAT:$SG48204
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 128
	mov	r9d, 59					; 0000003bH
	lea	r8, OFFSET FLAT:$SG48205
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 129
	mov	r9d, 60					; 0000003cH
	lea	r8, OFFSET FLAT:$SG48206
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 130
	mov	r9d, 61					; 0000003dH
	lea	r8, OFFSET FLAT:$SG48207
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 134
	mov	r9d, 63					; 0000003fH
	lea	r8, OFFSET FLAT:$SG48208
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 139
	mov	r9d, 65					; 00000041H
	lea	r8, OFFSET FLAT:$SG48209
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 140
	mov	r9d, 66					; 00000042H
	lea	r8, OFFSET FLAT:$SG48210
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 141
	mov	r9d, 67					; 00000043H
	lea	r8, OFFSET FLAT:$SG48211
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 142
	mov	r9d, 68					; 00000044H
	lea	r8, OFFSET FLAT:$SG48212
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 143
	mov	r9d, 69					; 00000045H
	lea	r8, OFFSET FLAT:$SG48213
	mov	edx, 13
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 144
	mov	r9d, 70					; 00000046H
	lea	r8, OFFSET FLAT:$SG48214
	mov	edx, 10
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 149
	mov	r9d, 72					; 00000048H
	lea	r8, OFFSET FLAT:$SG48215
	mov	edx, 2
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 150
	mov	r9d, 73					; 00000049H
	lea	r8, OFFSET FLAT:$SG48216
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 151
	mov	r9d, 74					; 0000004aH
	lea	r8, OFFSET FLAT:$SG48217
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 152
	mov	r9d, 75					; 0000004bH
	lea	r8, OFFSET FLAT:$SG48218
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 153
	mov	r9d, 76					; 0000004cH
	lea	r8, OFFSET FLAT:$SG48219
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 154
	mov	r9d, 77					; 0000004dH
	lea	r8, OFFSET FLAT:$SG48220
	mov	edx, 3
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 155
	mov	r9d, 78					; 0000004eH
	lea	r8, OFFSET FLAT:$SG48221
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 156
	mov	r9d, 79					; 0000004fH
	lea	r8, OFFSET FLAT:$SG48222
	mov	edx, 2
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 157
	mov	r9d, 80					; 00000050H
	lea	r8, OFFSET FLAT:$SG48223
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 158
	mov	r9d, 81					; 00000051H
	lea	r8, OFFSET FLAT:$SG48224
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 159
	mov	r9d, 82					; 00000052H
	lea	r8, OFFSET FLAT:$SG48225
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 160
	mov	r9d, 83					; 00000053H
	lea	r8, OFFSET FLAT:$SG48226
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 161
	add	rsp, 40					; 00000028H
	ret	0
cclex_hash_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fnd$ = 48
okey$ = 56
l$ = 80
len$ = 88
key$ = 96
bit$ = 104
cclex_hashonly PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 59
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 61
	lea	rax, QWORD PTR fnd$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR bit$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR key$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_hash
	mov	QWORD PTR okey$[rsp], rax
; Line 63
	mov	rax, QWORD PTR key$[rsp]
	cmp	QWORD PTR okey$[rsp], rax
	je	SHORT $LN4@cclex_hash
	int	3
$LN4@cclex_hash:
; Line 65
	cmp	DWORD PTR fnd$[rsp], 0
	je	SHORT $LN2@cclex_hash
	lea	rax, OFFSET FLAT:$SG48114
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48115
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48116
	mov	r8d, 65					; 00000041H
	lea	rdx, OFFSET FLAT:$SG48117
	mov	ecx, 8
	call	cctrace_
	int	3
$LN2@cclex_hash:
; Line 66
	add	rsp, 72					; 00000048H
	ret	0
cclex_hashonly ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
slot$ = 32
eql$ = 40
tv80 = 44
tv93 = 48
k$1 = 56
hash$ = 64
tv92 = 68
tv91 = 72
m$2 = 80
tv137 = 88
tv154 = 96
l$ = 128
len$ = 136
key$ = 144
cpy$ = 152
bit$ = 160
fnd$ = 168
cclex_hash PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 16
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 17
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN17@cclex_hash
	int	3
$LN17@cclex_hash:
; Line 18
	cmp	QWORD PTR bit$[rsp], 0
	jne	SHORT $LN19@cclex_hash
	int	3
$LN19@cclex_hash:
; Line 20
	mov	rdx, QWORD PTR key$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	call	cclex_hashfunc
	mov	DWORD PTR hash$[rsp], eax
; Line 21
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+32]
	dec	eax
	mov	ecx, DWORD PTR hash$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	imul	rax, rax, 24
	mov	rcx, QWORD PTR l$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR slot$[rsp], rax
; Line 23
	mov	DWORD PTR eql$[rsp], 0
$LN4@cclex_hash:
; Line 26
	mov	rax, QWORD PTR slot$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN21@cclex_hash
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN22@cclex_hash
$LN21@cclex_hash:
	mov	DWORD PTR tv80[rsp], 0
$LN22@cclex_hash:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR eql$[rsp], eax
	cmp	DWORD PTR eql$[rsp], 0
	je	$LN7@cclex_hash
; Line 28
	mov	rax, QWORD PTR slot$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR m$2[rsp], rax
; Line 29
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR k$1[rsp], rax
$LN5@cclex_hash:
; Line 30
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR k$1[rsp], rax
	jae	SHORT $LN6@cclex_hash
	mov	rax, QWORD PTR k$1[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv91[rsp], eax
	mov	rax, QWORD PTR m$2[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv92[rsp], eax
	mov	rax, QWORD PTR m$2[rsp]
	inc	rax
	mov	QWORD PTR m$2[rsp], rax
	mov	rax, QWORD PTR k$1[rsp]
	inc	rax
	mov	QWORD PTR k$1[rsp], rax
	mov	eax, DWORD PTR tv92[rsp]
	cmp	DWORD PTR tv91[rsp], eax
	jne	SHORT $LN23@cclex_hash
	mov	DWORD PTR tv93[rsp], 1
	jmp	SHORT $LN24@cclex_hash
$LN23@cclex_hash:
	mov	DWORD PTR tv93[rsp], 0
$LN24@cclex_hash:
	mov	eax, DWORD PTR tv93[rsp]
	mov	DWORD PTR eql$[rsp], eax
	cmp	DWORD PTR eql$[rsp], 0
	je	SHORT $LN6@cclex_hash
	jmp	SHORT $LN5@cclex_hash
$LN6@cclex_hash:
$LN7@cclex_hash:
; Line 32
	cmp	DWORD PTR eql$[rsp], 0
	jne	SHORT $LN8@cclex_hash
	mov	rax, QWORD PTR slot$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN8@cclex_hash
	mov	rax, QWORD PTR slot$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR slot$[rsp], rax
	cmp	QWORD PTR slot$[rsp], 0
	jne	$LN4@cclex_hash
$LN8@cclex_hash:
; Line 34
	cmp	QWORD PTR fnd$[rsp], 0
	je	SHORT $LN9@cclex_hash
	mov	rax, QWORD PTR fnd$[rsp]
	mov	ecx, DWORD PTR eql$[rsp]
	mov	DWORD PTR [rax], ecx
$LN9@cclex_hash:
; Line 36
	cmp	DWORD PTR eql$[rsp], 0
	jne	$LN10@cclex_hash
; Line 38
	mov	rax, QWORD PTR slot$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN12@cclex_hash
	mov	r9d, 38					; 00000026H
	lea	r8, OFFSET FLAT:$SG48097
	lea	rdx, OFFSET FLAT:$SG48098
	mov	ecx, 24
	call	ccmalloc_
	mov	QWORD PTR tv137[rsp], rax
	mov	rax, QWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR tv137[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv137[rsp]
	mov	QWORD PTR slot$[rsp], rax
$LN12@cclex_hash:
; Line 40
	mov	rax, QWORD PTR slot$[rsp]
	mov	QWORD PTR [rax], 0
; Line 41
	mov	rax, QWORD PTR slot$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 42
	mov	rax, QWORD PTR slot$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 43
	mov	rax, QWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR bit$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+20], ecx
; Line 46
	cmp	DWORD PTR cpy$[rsp], 0
	je	SHORT $LN13@cclex_hash
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	ecx, DWORD PTR len$[rsp]
	inc	ecx
	mov	rdx, QWORD PTR slot$[rsp]
	add	rdx, 8
	mov	QWORD PTR tv154[rsp], rdx
	mov	r9, QWORD PTR key$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rax, QWORD PTR tv154[rsp]
	mov	rcx, rax
	call	ccdlb_stradd
	jmp	SHORT $LN14@cclex_hash
$LN13@cclex_hash:
; Line 47
	mov	rax, QWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN14@cclex_hash:
; Line 49
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 50
	jmp	SHORT $LN11@cclex_hash
$LN10@cclex_hash:
; Line 52
	cmp	QWORD PTR bit$[rsp], 0
	je	SHORT $LN15@cclex_hash
	mov	rax, QWORD PTR bit$[rsp]
	mov	rcx, QWORD PTR slot$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	mov	DWORD PTR [rax], ecx
$LN15@cclex_hash:
$LN11@cclex_hash:
; Line 54
	mov	rax, QWORD PTR slot$[rsp]
	mov	rax, QWORD PTR [rax+8]
; Line 55
	add	rsp, 120				; 00000078H
	ret	0
cclex_hash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 0
len$ = 32
str$ = 40
cclex_hashfunc PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 9
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	DWORD PTR h$[rsp], 5381			; 00001505H
$LN2@cclex_hash:
; Line 10
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN3@cclex_hash
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR h$[rsp]
	shl	ecx, 5
	add	eax, DWORD PTR h$[rsp]
	add	eax, ecx
	mov	DWORD PTR h$[rsp], eax
	jmp	SHORT $LN2@cclex_hash
$LN3@cclex_hash:
; Line 11
	mov	eax, DWORD PTR h$[rsp]
; Line 12
	add	rsp, 24
	ret	0
cclex_hashfunc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
__$ReturnAddress$ = 64
value$ = 72
label$ = 80
ccexec_lvalue PROC
; File W:\cpp\void\ktt-c\ccexec.h
; Line 76
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 77
	mov	DWORD PTR t$[rsp+8], 2
; Line 78
	mov	rax, QWORD PTR value$[rsp]
	mov	QWORD PTR t$[rsp+16], rax
; Line 79
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR t$[rsp], rax
; Line 80
	lea	rax, QWORD PTR t$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 81
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
ccexec_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
__$ReturnAddress$ = 64
value$ = 72
label$ = 80
ccexec_rvalue PROC
; File W:\cpp\void\ktt-c\ccexec.h
; Line 67
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 68
	mov	DWORD PTR t$[rsp+8], 1
; Line 69
	mov	rax, QWORD PTR value$[rsp]
	mov	QWORD PTR t$[rsp+16], rax
; Line 70
	mov	rax, QWORD PTR label$[rsp]
	mov	QWORD PTR t$[rsp], rax
; Line 71
	lea	rax, QWORD PTR t$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 72
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
ccexec_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
i$ = 40
e$ = 48
v$ = 56
func$ = 80
tree$ = 88
is_param$ = 96
ccprocd_include_local PROC
; File W:\cpp\void\ktt-c\ccexec.h
; Line 52
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 53
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN3@ccprocd_in
	int	3
$LN3@ccprocd_in:
; Line 54
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 15
	je	SHORT $LN5@ccprocd_in
	int	3
$LN5@ccprocd_in:
; Line 57
	cmp	DWORD PTR is_param$[rsp], 0
	je	SHORT $LN7@ccprocd_in
	mov	rcx, QWORD PTR tree$[rsp]
	call	ccedict_param
	mov	QWORD PTR tv72[rsp], rax
	jmp	SHORT $LN8@ccprocd_in
$LN7@ccprocd_in:
	mov	rcx, QWORD PTR tree$[rsp]
	call	ccedict_local
	mov	QWORD PTR tv72[rsp], rax
$LN8@ccprocd_in:
	mov	rax, QWORD PTR tv72[rsp]
	mov	QWORD PTR e$[rsp], rax
; Line 58
	mov	rdx, QWORD PTR e$[rsp]
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	ccblock_add_edict
	mov	QWORD PTR i$[rsp], rax
; Line 59
	mov	rax, QWORD PTR func$[rsp]
	add	rax, 16
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_tblput
	mov	eax, eax
	mov	rcx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$[rsp], rax
; Line 60
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@ccprocd_in
	int	3
$LN9@ccprocd_in:
; Line 61
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR i$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 62
	mov	rax, QWORD PTR i$[rsp]
; Line 63
	add	rsp, 72					; 00000048H
	ret	0
ccprocd_include_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
func$ = 64
tree$ = 72
ccprocd_local PROC
; File W:\cpp\void\ktt-c\ccexec.h
; Line 44
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 45
	mov	rax, QWORD PTR func$[rsp]
	add	rax, 16
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$[rsp], rax
; Line 46
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN2@ccprocd_lo
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	jmp	SHORT $LN1@ccprocd_lo
$LN2@ccprocd_lo:
; Line 47
	xor	eax, eax
$LN1@ccprocd_lo:
; Line 48
	add	rsp, 56					; 00000038H
	ret	0
ccprocd_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
blc$ = 56
tar$ = 64
cnd$ = 72
ccblock_fjump PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 201
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 202
	mov	r8, QWORD PTR cnd$[rsp]
	mov	edx, DWORD PTR tar$[rsp]
	mov	rcx, QWORD PTR blc$[rsp]
	call	ccedict_fjump
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 203
	add	rsp, 40					; 00000028H
	ret	0
ccblock_fjump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
p$ = 56
i$ = 64
ccblock_invoke PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 189
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 190
	mov	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	ccedict_call
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 191
	add	rsp, 40					; 00000028H
	ret	0
ccblock_invoke ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
value$ = 56
ccblock_return PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 177
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 178
	mov	rcx, QWORD PTR value$[rsp]
	call	ccedict_return
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 179
	add	rsp, 40					; 00000028H
	ret	0
ccblock_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
blc$ = 56
ccblock_enter PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 171
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 172
	mov	rcx, QWORD PTR blc$[rsp]
	call	ccedict_enter
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 173
	add	rsp, 40					; 00000028H
	ret	0
ccblock_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
opr$ = 56
lhs$ = 64
rhs$ = 72
ccblock_arith PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 165
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 166
	mov	r8, QWORD PTR rhs$[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	ecx, DWORD PTR opr$[rsp]
	call	ccedict_arith
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 167
	add	rsp, 40					; 00000028H
	ret	0
ccblock_arith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
lval$ = 56
ccblock_fetch PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 159
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 160
	mov	rcx, QWORD PTR lval$[rsp]
	call	ccedict_fetch
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 161
	add	rsp, 40					; 00000028H
	ret	0
ccblock_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
lval$ = 56
rval$ = 64
ccblock_store PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 153
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 154
	mov	rdx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	call	ccedict_store
	mov	rdx, rax
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add_edict
; Line 155
	add	rsp, 40					; 00000028H
	ret	0
ccblock_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
block$ = 64
edict$ = 72
ccblock_add_edict PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 145
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_add
	mov	QWORD PTR value$[rsp], rax
; Line 146
	mov	rax, QWORD PTR value$[rsp]
	mov	DWORD PTR [rax], 5
; Line 147
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR edict$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 148
	mov	rax, QWORD PTR value$[rsp]
; Line 149
	add	rsp, 56					; 00000038H
	ret	0
ccblock_add_edict ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
t$ = 40
block$ = 64
ccblock_add PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 136
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r9d, 136				; 00000088H
	lea	r8, OFFSET FLAT:$SG47906
	lea	rdx, OFFSET FLAT:$SG47907
	mov	ecx, 48					; 00000030H
	call	ccmalloc_
	mov	QWORD PTR v$[rsp], rax
; Line 137
	mov	rax, QWORD PTR block$[rsp]
	add	rax, 8
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR t$[rsp], rax
; Line 138
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	mov	rcx, QWORD PTR v$[rsp]
	call	memset
; Line 139
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR v$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 140
	mov	rax, QWORD PTR v$[rsp]
; Line 141
	add	rsp, 56					; 00000038H
	ret	0
ccblock_add ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
tv84 = 40
tv129 = 48
tv142 = 56
v$ = 64
emit$ = 96
tree$ = 104
label$ = 112
ccemit_global_procd PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 115
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 116
	mov	r8, QWORD PTR label$[rsp]
	mov	rdx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_include_global
	mov	QWORD PTR v$[rsp], rax
; Line 117
	mov	rax, QWORD PTR v$[rsp]
	mov	DWORD PTR [rax], 4
; Line 119
	mov	rcx, QWORD PTR label$[rsp]
	call	ccprocd
	mov	QWORD PTR p$[rsp], rax
; Line 121
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 122
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 125
	lea	rcx, OFFSET FLAT:$SG47895
	call	ccblock
	mov	QWORD PTR tv84[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR tv84[rsp]
	mov	QWORD PTR [rax+32], rcx
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 24
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR tv84[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 126
	lea	rcx, OFFSET FLAT:$SG47896
	call	ccblock
	mov	QWORD PTR tv129[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR tv129[rsp]
	mov	QWORD PTR [rax+40], rcx
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 24
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR tv129[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 127
	lea	rcx, OFFSET FLAT:$SG47897
	call	ccblock
	mov	QWORD PTR tv142[rsp], rax
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR tv142[rsp]
	mov	QWORD PTR [rax+48], rcx
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 24
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	rdx, QWORD PTR tv142[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
; Line 129
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 131
	mov	rax, QWORD PTR p$[rsp]
; Line 132
	add	rsp, 88					; 00000058H
	ret	0
ccemit_global_procd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
v$ = 40
emit$ = 64
tree$ = 72
label$ = 80
ccemit_include_global PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 103
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 104
	mov	rax, QWORD PTR emit$[rsp]
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_tblput
	mov	eax, eax
	mov	rcx, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$[rsp], rax
; Line 105
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN3@ccemit_inc
	int	3
$LN3@ccemit_inc:
; Line 107
	mov	rcx, QWORD PTR label$[rsp]
	call	ccvalue
	mov	QWORD PTR value$[rsp], rax
; Line 108
	mov	rax, QWORD PTR v$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 110
	mov	rax, QWORD PTR value$[rsp]
; Line 111
	add	rsp, 56					; 00000038H
	ret	0
ccemit_include_global ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
value$ = 40
emit$ = 64
tree$ = 72
ccemit_global PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 93
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 94
	mov	rax, QWORD PTR emit$[rsp]
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	mov	rcx, rax
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR v$[rsp], rax
; Line 95
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN3@ccemit_glo
	int	3
$LN3@ccemit_glo:
; Line 97
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR value$[rsp], rax
; Line 98
	mov	rax, QWORD PTR value$[rsp]
; Line 99
	add	rsp, 56					; 00000038H
	ret	0
ccemit_global ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
label$ = 64
ccprocd	PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 80
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 81
	mov	r9d, 81					; 00000051H
	lea	r8, OFFSET FLAT:$SG47864
	lea	rdx, OFFSET FLAT:$SG47865
	mov	ecx, 56					; 00000038H
	call	ccmalloc_
	mov	QWORD PTR t$[rsp], rax
; Line 82
	mov	r8d, 56					; 00000038H
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	memset
; Line 84
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR label$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 85
	mov	rax, QWORD PTR t$[rsp]
; Line 86
	add	rsp, 56					; 00000038H
	ret	0
ccprocd	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
label$ = 64
ccblock	PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 69
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 70
	mov	r9d, 70					; 00000046H
	lea	r8, OFFSET FLAT:$SG47856
	lea	rdx, OFFSET FLAT:$SG47857
	mov	ecx, 16
	call	ccmalloc_
	mov	QWORD PTR t$[rsp], rax
; Line 71
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	memset
; Line 73
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR label$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 74
	mov	rax, QWORD PTR t$[rsp]
; Line 75
	add	rsp, 56					; 00000038H
	ret	0
ccblock	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
label$ = 64
ccvalue	PROC
; File W:\cpp\void\ktt-c\ccemit.h
; Line 58
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 59
	mov	r9d, 59					; 0000003bH
	lea	r8, OFFSET FLAT:$SG47848
	lea	rdx, OFFSET FLAT:$SG47849
	mov	ecx, 48					; 00000030H
	call	ccmalloc_
	mov	QWORD PTR t$[rsp], rax
; Line 60
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	mov	rcx, QWORD PTR t$[rsp]
	call	memset
; Line 62
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR label$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 63
	mov	rax, QWORD PTR t$[rsp]
; Line 64
	add	rsp, 56					; 00000038H
	ret	0
ccvalue	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
rval$ = 64
ccedict_return PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 192
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 193
	mov	r9d, 193				; 000000c1H
	lea	r8, OFFSET FLAT:$SG47740
	lea	rdx, OFFSET FLAT:$SG47741
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 194
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 11
; Line 195
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 196
	mov	rax, QWORD PTR e$[rsp]
; Line 197
	add	rsp, 56					; 00000038H
	ret	0
ccedict_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
lval$ = 64
rval$ = 72
ccedict_call PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 179
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 180
	cmp	QWORD PTR lval$[rsp], 0
	jne	SHORT $LN3@ccedict_ca
	int	3
$LN3@ccedict_ca:
; Line 182
	mov	r9d, 182				; 000000b6H
	lea	r8, OFFSET FLAT:$SG47732
	lea	rdx, OFFSET FLAT:$SG47733
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 183
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 10
; Line 184
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 185
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 187
	mov	rax, QWORD PTR e$[rsp]
; Line 188
	add	rsp, 56					; 00000038H
	ret	0
ccedict_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
blc$ = 64
tar$ = 72
cnd$ = 80
ccedict_fjump PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 168
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 169
	mov	r9d, 169				; 000000a9H
	lea	r8, OFFSET FLAT:$SG47723
	lea	rdx, OFFSET FLAT:$SG47724
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 170
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 7
; Line 171
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR blc$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 172
	mov	rax, QWORD PTR e$[rsp]
	mov	ecx, DWORD PTR tar$[rsp]
	mov	DWORD PTR [rax+88], ecx
; Line 173
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR cnd$[rsp]
	mov	QWORD PTR [rax+96], rcx
; Line 174
	mov	rax, QWORD PTR e$[rsp]
; Line 175
	add	rsp, 56					; 00000038H
	ret	0
ccedict_fjump ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
blc$ = 64
ccedict_enter PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 137
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 138
	mov	r9d, 138				; 0000008aH
	lea	r8, OFFSET FLAT:$SG47694
	lea	rdx, OFFSET FLAT:$SG47695
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 139
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 9
; Line 140
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR blc$[rsp]
	mov	QWORD PTR [rax+104], rcx
; Line 142
	mov	rax, QWORD PTR e$[rsp]
; Line 143
	add	rsp, 56					; 00000038H
	ret	0
ccedict_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
opr$ = 64
lhs$ = 72
rhs$ = 80
ccedict_arith PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 126
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 127
	mov	r9d, 127				; 0000007fH
	lea	r8, OFFSET FLAT:$SG47686
	lea	rdx, OFFSET FLAT:$SG47687
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 128
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 4
; Line 129
	mov	rax, QWORD PTR e$[rsp]
	mov	ecx, DWORD PTR opr$[rsp]
	mov	DWORD PTR [rax+136], ecx
; Line 130
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lhs$[rsp]
	mov	QWORD PTR [rax+144], rcx
; Line 131
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rax+152], rcx
; Line 132
	mov	rax, QWORD PTR e$[rsp]
; Line 133
	add	rsp, 56					; 00000038H
	ret	0
ccedict_arith ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
lval$ = 64
ccedict_fetch PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 117
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 118
	mov	r9d, 118				; 00000076H
	lea	r8, OFFSET FLAT:$SG47676
	lea	rdx, OFFSET FLAT:$SG47677
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 119
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 3
; Line 120
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 121
	mov	rax, QWORD PTR e$[rsp]
; Line 122
	add	rsp, 56					; 00000038H
	ret	0
ccedict_fetch ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
lval$ = 64
rval$ = 72
ccedict_store PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 107
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 108
	mov	r9d, 108				; 0000006cH
	lea	r8, OFFSET FLAT:$SG47668
	lea	rdx, OFFSET FLAT:$SG47669
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 109
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 2
; Line 110
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 111
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 112
	mov	rax, QWORD PTR e$[rsp]
; Line 113
	add	rsp, 56					; 00000038H
	ret	0
ccedict_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
tree$ = 64
ccedict_param PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 94
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 97
	mov	r9d, 97					; 00000061H
	lea	r8, OFFSET FLAT:$SG47659
	lea	rdx, OFFSET FLAT:$SG47660
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 98
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 1
; Line 99
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+8], rcx
; Line 101
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax+16], rcx
; Line 102
	mov	rax, QWORD PTR e$[rsp]
; Line 103
	add	rsp, 56					; 00000038H
	ret	0
ccedict_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
e$ = 32
tree$ = 64
ccedict_local PROC
; File W:\cpp\void\ktt-c\ccedict.h
; Line 81
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 84
	mov	r9d, 84					; 00000054H
	lea	r8, OFFSET FLAT:$SG47651
	lea	rdx, OFFSET FLAT:$SG47652
	mov	ecx, 160				; 000000a0H
	call	ccmalloc_
	mov	QWORD PTR e$[rsp], rax
; Line 85
	mov	rax, QWORD PTR e$[rsp]
	mov	DWORD PTR [rax], 0
; Line 86
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+8], rcx
; Line 88
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	mov	QWORD PTR [rax+16], rcx
; Line 89
	mov	rax, QWORD PTR e$[rsp]
; Line 90
	add	rsp, 56					; 00000038H
	ret	0
ccedict_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 32
decl$ = 40
tree$ = 64
cctree_solve PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 593
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 23
	je	SHORT $LN6@cctree_sol
	int	3
$LN6@cctree_sol:
; Line 596
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR decl$[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR decl$[rsp]
	add	rax, 8
	mov	QWORD PTR decl$[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN8@cctree_sol
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv74[rsp], eax
	jmp	SHORT $LN9@cctree_sol
$LN8@cctree_sol:
	mov	DWORD PTR tv74[rsp], 0
$LN9@cctree_sol:
	mov	eax, DWORD PTR tv74[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR decl$[rsp], rax
	jae	SHORT $LN3@cctree_sol
	mov	rax, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_decl
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 597
	add	rsp, 56					; 00000038H
	ret	0
cctree_solve ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv131 = 64
tv150 = 68
list$1 = 72
tv213 = 80
tv207 = 88
value$2 = 96
tree$ = 128
cctree_solve_decl_name PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 545
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 547
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax], 23
	jne	SHORT $LN8@cctree_sol
; Line 548
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN20@cctree_sol
	int	3
$LN20@cctree_sol:
$LN8@cctree_sol:
; Line 550
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN9@cctree_sol
; Line 551
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax], 23
	je	SHORT $LN22@cctree_sol
	int	3
$LN22@cctree_sol:
$LN9@cctree_sol:
; Line 554
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax], 3
	jne	$LN10@cctree_sol
; Line 556
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 16
	test	eax, eax
	je	$LN12@cctree_sol
; Line 558
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_include_invokable
	test	eax, eax
	je	$LN14@cctree_sol
; Line 561
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$1[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR list$1[rsp]
	add	rax, 8
	mov	QWORD PTR list$1[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN24@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	rax, QWORD PTR [rax+32]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN25@cctree_sol
$LN24@cctree_sol:
	mov	DWORD PTR tv131[rsp], 0
$LN25@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv213[rsp], rax
	mov	ecx, DWORD PTR tv131[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR tv213[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR list$1[rsp], rax
	jae	SHORT $LN3@cctree_sol
; Line 562
	mov	rax, QWORD PTR list$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_decl_name
	jmp	$LN2@cctree_sol
$LN3@cctree_sol:
; Line 564
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$1[rsp], rax
	jmp	SHORT $LN7@cctree_sol
$LN5@cctree_sol:
	mov	rax, QWORD PTR list$1[rsp]
	add	rax, 8
	mov	QWORD PTR list$1[rsp], rax
$LN7@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN26@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	rax, QWORD PTR [rax+32]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv150[rsp], eax
	jmp	SHORT $LN27@cctree_sol
$LN26@cctree_sol:
	mov	DWORD PTR tv150[rsp], 0
$LN27@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv207[rsp], rax
	mov	ecx, DWORD PTR tv150[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR tv207[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR list$1[rsp], rax
	jae	SHORT $LN6@cctree_sol
; Line 565
	mov	rax, QWORD PTR list$1[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_statement
	jmp	$LN5@cctree_sol
$LN6@cctree_sol:
; Line 566
	jmp	SHORT $LN15@cctree_sol
$LN14@cctree_sol:
; Line 567
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47437
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47438
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47439
	mov	r8d, 567				; 00000237H
	lea	rdx, OFFSET FLAT:$SG47440
	mov	ecx, 5
	call	cctrace_
	int	3
$LN15@cctree_sol:
; Line 568
	jmp	SHORT $LN13@cctree_sol
$LN12@cctree_sol:
; Line 569
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47441
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47442
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47443
	mov	r8d, 569				; 00000239H
	lea	rdx, OFFSET FLAT:$SG47444
	mov	ecx, 6
	call	cctrace_
	int	3
$LN13@cctree_sol:
; Line 570
	jmp	$LN11@cctree_sol
$LN10@cctree_sol:
; Line 572
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	strlen
	mov	rcx, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rcx+24]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, OFFSET FLAT:vari_decls
	call	ccdlb_tblput
	mov	eax, eax
	mov	rcx, QWORD PTR vari_decls
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR value$2[rsp], rax
; Line 573
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN16@cctree_sol
; Line 574
	mov	rax, QWORD PTR value$2[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN17@cctree_sol
$LN16@cctree_sol:
; Line 576
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47447
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47448
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47449
	mov	r8d, 576				; 00000240H
	lea	rdx, OFFSET FLAT:$SG47450
	mov	ecx, 7
	call	cctrace_
	int	3
$LN17@cctree_sol:
; Line 578
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN18@cctree_sol
; Line 580
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	cctree_solve_rvalue
$LN18@cctree_sol:
$LN11@cctree_sol:
; Line 583
	add	rsp, 120				; 00000078H
	ret	0
cctree_solve_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tree$ = 40
block$ = 64
cctree_solve_block PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 504
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 506
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tree$[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	add	rax, 8
	mov	QWORD PTR tree$[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@cctree_sol
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	mov	DWORD PTR tv72[rsp], 0
$LN7@cctree_sol:
	mov	eax, DWORD PTR tv72[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR tree$[rsp], rax
	jae	SHORT $LN3@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_statement
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 507
	add	rsp, 56					; 00000038H
	ret	0
cctree_solve_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 64
rval$ = 72
tree$ = 96
cctree_solve_call PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 439
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 440
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	jne	SHORT $LN7@cctree_sol
	int	3
$LN7@cctree_sol:
; Line 441
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN9@cctree_sol
	int	3
$LN9@cctree_sol:
; Line 443
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN5@cctree_sol
; Line 444
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+72]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47348
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47349
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47350
	mov	r8d, 444				; 000001bcH
	lea	rdx, OFFSET FLAT:$SG47351
	mov	ecx, 2
	call	cctrace_
	int	3
$LN5@cctree_sol:
; Line 447
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR rval$[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR rval$[rsp]
	add	rax, 184				; 000000b8H
	mov	QWORD PTR rval$[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN11@cctree_sol
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN12@cctree_sol
$LN11@cctree_sol:
	mov	DWORD PTR tv91[rsp], 0
$LN12@cctree_sol:
	mov	eax, DWORD PTR tv91[rsp]
	xor	edx, edx
	mov	ecx, 184				; 000000b8H
	div	rcx
	imul	rax, rax, 184				; 000000b8H
	mov	rcx, QWORD PTR tree$[rsp]
	add	rax, QWORD PTR [rcx+80]
	cmp	QWORD PTR rval$[rsp], rax
	jae	SHORT $LN3@cctree_sol
	mov	rcx, QWORD PTR rval$[rsp]
	call	cctree_solve_rvalue
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 448
	add	rsp, 88					; 00000058H
	ret	0
cctree_solve_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 64
tree$ = 96
cctree_solve_lvalue PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 452
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 453
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	SHORT $LN4@cctree_sol
	jmp	SHORT $LN6@cctree_sol
$LN4@cctree_sol:
; Line 457
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN5@cctree_sol
; Line 458
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47359
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47360
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47361
	mov	r8d, 458				; 000001caH
	lea	rdx, OFFSET FLAT:$SG47362
	mov	ecx, 3
	call	cctrace_
	int	3
$LN5@cctree_sol:
; Line 459
	jmp	SHORT $LN2@cctree_sol
$LN6@cctree_sol:
; Line 460
	lea	rax, OFFSET FLAT:$SG47364
	test	rax, rax
	je	SHORT $LN8@cctree_sol
	int	3
$LN8@cctree_sol:
$LN2@cctree_sol:
; Line 462
	add	rsp, 88					; 00000058H
	ret	0
cctree_solve_lvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 64
tree$ = 96
cctree_solve_rvalue PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 466
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 467
	mov	rax, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 6
	je	SHORT $LN5@cctree_sol
	cmp	DWORD PTR tv65[rsp], 7
	je	SHORT $LN4@cctree_sol
	cmp	DWORD PTR tv65[rsp], 18
	je	SHORT $LN7@cctree_sol
	cmp	DWORD PTR tv65[rsp], 21
	je	$LN8@cctree_sol
	jmp	$LN9@cctree_sol
$LN4@cctree_sol:
; Line 469
	jmp	$LN2@cctree_sol
$LN5@cctree_sol:
; Line 472
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_mingle
	test	eax, eax
	jne	SHORT $LN6@cctree_sol
; Line 473
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47373
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47374
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47375
	mov	r8d, 473				; 000001d9H
	lea	rdx, OFFSET FLAT:$SG47376
	mov	ecx, 4
	call	cctrace_
	int	3
$LN6@cctree_sol:
; Line 475
	jmp	SHORT $LN2@cctree_sol
$LN7@cctree_sol:
; Line 478
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [rax+80]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+72]
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	cctree_solve_binary
; Line 479
	jmp	SHORT $LN2@cctree_sol
$LN8@cctree_sol:
; Line 482
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_call
; Line 483
	jmp	SHORT $LN2@cctree_sol
$LN9@cctree_sol:
; Line 484
	lea	rax, OFFSET FLAT:$SG47380
	test	rax, rax
	je	SHORT $LN11@cctree_sol
	int	3
$LN11@cctree_sol:
$LN2@cctree_sol:
; Line 486
	add	rsp, 88					; 00000058H
	ret	0
cctree_solve_rvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
oper$ = 48
lvalue$ = 56
rvalue$ = 64
cctree_solve_binary PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 490
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 491
	cmp	DWORD PTR oper$[rsp], 109		; 0000006dH
	jne	SHORT $LN2@cctree_sol
; Line 492
	mov	rcx, QWORD PTR lvalue$[rsp]
	call	cctree_solve_lvalue
	jmp	SHORT $LN3@cctree_sol
$LN2@cctree_sol:
; Line 494
	mov	rcx, QWORD PTR lvalue$[rsp]
	call	cctree_solve_rvalue
$LN3@cctree_sol:
; Line 496
	mov	rcx, QWORD PTR rvalue$[rsp]
	call	cctree_solve_rvalue
; Line 497
	add	rsp, 40					; 00000028H
	ret	0
cctree_solve_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv169 = 64
solved$ = 72
symbol$1 = 80
tree$ = 112
name$ = 120
cctree_mingle PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 407
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 408
	mov	QWORD PTR solved$[rsp], 0
; Line 410
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 412
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 21
	jne	SHORT $LN2@cctree_min
; Line 413
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	r9, QWORD PTR name$[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, OFFSET FLAT:func_decls
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR func_decls
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR solved$[rsp], rax
	jmp	$LN3@cctree_min
$LN2@cctree_min:
; Line 415
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 6
	jne	SHORT $LN4@cctree_min
; Line 416
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	r9, QWORD PTR name$[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, OFFSET FLAT:vari_decls
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR vari_decls
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR solved$[rsp], rax
	jmp	SHORT $LN5@cctree_min
$LN4@cctree_min:
; Line 418
	mov	rax, QWORD PTR tree$[rsp]
	movsxd	rax, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:cctree_s
	mov	rdx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rsp+56], rdx
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47326
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47327
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47328
	mov	r8d, 418				; 000001a2H
	lea	rdx, OFFSET FLAT:$SG47329
	mov	ecx, 1
	call	cctrace_
	int	3
$LN5@cctree_min:
$LN3@cctree_min:
; Line 420
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN6@cctree_min
; Line 422
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	lea	rcx, OFFSET FLAT:symbols
	call	ccdlb_tblput
	mov	eax, eax
	mov	rcx, QWORD PTR symbols
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR symbol$1[rsp], rax
; Line 423
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN8@cctree_min
	int	3
$LN8@cctree_min:
; Line 424
	mov	rax, QWORD PTR symbol$1[rsp]
	mov	rcx, QWORD PTR solved$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
$LN6@cctree_min:
; Line 427
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN10@cctree_min
	mov	DWORD PTR tv169[rsp], 1
	jmp	SHORT $LN11@cctree_min
$LN10@cctree_min:
	mov	DWORD PTR tv169[rsp], 0
$LN11@cctree_min:
	mov	eax, DWORD PTR tv169[rsp]
; Line 428
	add	rsp, 104				; 00000068H
	ret	0
cctree_mingle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
symbol$ = 64
tv131 = 72
tree$ = 96
cctree_resolve_symbol PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 393
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 394
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN4@cctree_res
	int	3
$LN4@cctree_res:
; Line 396
	mov	QWORD PTR symbol$[rsp], 0
; Line 397
	mov	r9, QWORD PTR tree$[rsp]
	mov	r8d, -8
	mov	edx, 8
	lea	rcx, OFFSET FLAT:symbols
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR symbols
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR symbol$[rsp], rax
; Line 399
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN2@cctree_res
; Line 400
	mov	rax, QWORD PTR tree$[rsp]
	movsxd	rax, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:cctree_s
	mov	rdx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rsp+56], rdx
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47305
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47306
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47307
	mov	r8d, 400				; 00000190H
	lea	rdx, OFFSET FLAT:$SG47308
	xor	ecx, ecx
	call	cctrace_
	int	3
$LN2@cctree_res:
; Line 402
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN6@cctree_res
	mov	rax, QWORD PTR symbol$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv131[rsp], rax
	jmp	SHORT $LN7@cctree_res
$LN6@cctree_res:
	mov	QWORD PTR tv131[rsp], 0
$LN7@cctree_res:
	mov	rax, QWORD PTR tv131[rsp]
; Line 403
	add	rsp, 88					; 00000058H
	ret	0
cctree_resolve_symbol ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv93 = 32
value$ = 40
tree$ = 64
name$ = 72
cctree_include_invokable PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 381
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 382
	cmp	QWORD PTR tree$[rsp], 0
	jne	SHORT $LN4@cctree_inc
	int	3
$LN4@cctree_inc:
; Line 383
	cmp	QWORD PTR name$[rsp], 0
	jne	SHORT $LN6@cctree_inc
	int	3
$LN6@cctree_inc:
; Line 385
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	strlen
	mov	rcx, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rcx+24]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, OFFSET FLAT:func_decls
	call	ccdlb_tblput
	mov	eax, eax
	mov	rcx, QWORD PTR func_decls
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR value$[rsp], rax
; Line 386
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN2@cctree_inc
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rax], rcx
$LN2@cctree_inc:
; Line 388
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN8@cctree_inc
	mov	DWORD PTR tv93[rsp], 1
	jmp	SHORT $LN9@cctree_inc
$LN8@cctree_inc:
	mov	DWORD PTR tv93[rsp], 0
$LN9@cctree_inc:
	mov	eax, DWORD PTR tv93[rsp]
; Line 389
	add	rsp, 56					; 00000038H
	ret	0
cctree_include_invokable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 48
cctree_solve_statement PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 511
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 512
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN2@cctree_sol
; Line 514
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_decl
; Line 515
	jmp	$LN3@cctree_sol
$LN2@cctree_sol:
; Line 516
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 21
	jne	SHORT $LN4@cctree_sol
; Line 518
	mov	rcx, QWORD PTR tree$[rsp]
	call	cctree_solve_call
; Line 520
	jmp	$LN5@cctree_sol
$LN4@cctree_sol:
; Line 521
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 12
	jne	SHORT $LN6@cctree_sol
; Line 523
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	jne	SHORT $LN15@cctree_sol
	int	3
$LN15@cctree_sol:
; Line 524
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	cctree_solve_rvalue
; Line 525
	jmp	$LN7@cctree_sol
$LN6@cctree_sol:
; Line 526
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 18
	jne	SHORT $LN8@cctree_sol
; Line 528
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [rax+80]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+72]
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	cctree_solve_binary
; Line 529
	jmp	SHORT $LN9@cctree_sol
$LN8@cctree_sol:
; Line 530
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 17
	jne	SHORT $LN10@cctree_sol
; Line 532
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+64]
	call	cctree_solve_rvalue
; Line 533
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+72], 0
	je	SHORT $LN12@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+72]
	call	cctree_solve_block
$LN12@cctree_sol:
; Line 534
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN13@cctree_sol
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	cctree_solve_block
$LN13@cctree_sol:
; Line 535
	jmp	SHORT $LN11@cctree_sol
$LN10@cctree_sol:
; Line 537
	lea	rax, OFFSET FLAT:$SG47413
	test	rax, rax
	je	SHORT $LN17@cctree_sol
	int	3
$LN17@cctree_sol:
$LN11@cctree_sol:
$LN9@cctree_sol:
$LN7@cctree_sol:
$LN5@cctree_sol:
$LN3@cctree_sol:
; Line 539
	add	rsp, 40					; 00000028H
	ret	0
cctree_solve_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
list$ = 40
decl$ = 64
cctree_solve_decl PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 587
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 588
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR list$[rsp], rax
	jmp	SHORT $LN4@cctree_sol
$LN2@cctree_sol:
	mov	rax, QWORD PTR list$[rsp]
	add	rax, 8
	mov	QWORD PTR list$[rsp], rax
$LN4@cctree_sol:
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN6@cctree_sol
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN7@cctree_sol
$LN6@cctree_sol:
	mov	DWORD PTR tv72[rsp], 0
$LN7@cctree_sol:
	mov	eax, DWORD PTR tv72[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR list$[rsp], rax
	jae	SHORT $LN3@cctree_sol
	mov	rax, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	cctree_solve_decl_name
	jmp	SHORT $LN2@cctree_sol
$LN3@cctree_sol:
; Line 589
	add	rsp, 56					; 00000038H
	ret	0
cctree_solve_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
type$ = 80
token$ = 88
cctree_constant PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 341
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 7
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 342
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 343
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax+96], rcx
; Line 344
	mov	rax, QWORD PTR result$[rsp]
; Line 345
	add	rsp, 56					; 00000038H
	ret	0
cctree_constant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
cond_tree$ = 80
then_tree$ = 88
else_tree$ = 96
cctree_ternary PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 322
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 17
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 323
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR cond_tree$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 324
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR then_tree$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 325
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR else_tree$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 326
	mov	rax, QWORD PTR result$[rsp]
; Line 327
	add	rsp, 56					; 00000038H
	ret	0
cctree_ternary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
token$ = 80
lhs$ = 88
rhs$ = 96
cctree_binary PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 313
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 18
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 314
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+40], ecx
; Line 315
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR lhs$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 316
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 317
	mov	rax, QWORD PTR result$[rsp]
; Line 318
	add	rsp, 56					; 00000038H
	ret	0
cctree_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
root$ = 64
mark$ = 72
token$ = 80
rval$ = 88
cctree_unary PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 305
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 19
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 306
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+40], ecx
; Line 307
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 308
	mov	rax, QWORD PTR result$[rsp]
; Line 309
	add	rsp, 56					; 00000038H
	ret	0
cctree_unary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
name$ = 80
cctree_identifier PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 298
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 6
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 299
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 300
	mov	rax, QWORD PTR tree$[rsp]
; Line 301
	add	rsp, 56					; 00000038H
	ret	0
cctree_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
type$ = 80
list$ = 88
cctree_decl PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 290
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 16
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 291
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 292
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 293
	mov	rax, QWORD PTR tree$[rsp]
; Line 294
	add	rsp, 56					; 00000038H
	ret	0
cctree_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
type$ = 80
name$ = 88
size$ = 96
init$ = 104
cctree_decl_name PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 280
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 15
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 281
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 282
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_name
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 283
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 284
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR init$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 285
	mov	rax, QWORD PTR tree$[rsp]
; Line 286
	add	rsp, 56					; 00000038H
	ret	0
cctree_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
rval$ = 80
cctree_return PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 273
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 12
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 274
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 275
	mov	rax, QWORD PTR tree$[rsp]
; Line 276
	add	rsp, 56					; 00000038H
	ret	0
cctree_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
name$ = 80
cctree_goto PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 266
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 13
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 267
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_name
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 268
	mov	rax, QWORD PTR tree$[rsp]
; Line 269
	add	rsp, 56					; 00000038H
	ret	0
cctree_goto ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
name$ = 80
list$ = 88
cctree_label PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 258
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 11
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 259
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_name
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 260
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 261
	mov	rax, QWORD PTR tree$[rsp]
; Line 262
	add	rsp, 56					; 00000038H
	ret	0
cctree_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
cond_tree$ = 80
then_tree$ = 88
cctree_while PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 249
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR cond_tree$[rsp], 0
	jne	SHORT $LN3@cctree_whi
	int	3
$LN3@cctree_whi:
; Line 250
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 14
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 251
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR cond_tree$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 252
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR then_tree$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 253
	mov	rax, QWORD PTR tree$[rsp]
; Line 254
	add	rsp, 56					; 00000038H
	ret	0
cctree_while ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
list$ = 80
cctree_block PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 242
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 10
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 243
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 244
	mov	rax, QWORD PTR tree$[rsp]
; Line 245
	add	rsp, 56					; 00000038H
	ret	0
cctree_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
lval$ = 80
rval$ = 88
cctree_index PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 234
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 22
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 235
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 236
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 237
	mov	rax, QWORD PTR tree$[rsp]
; Line 238
	add	rsp, 56					; 00000038H
	ret	0
cctree_index ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
lval$ = 80
rval$ = 88
cctree_call PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 226
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 21
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 227
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR lval$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 228
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 229
	mov	rax, QWORD PTR tree$[rsp]
; Line 230
	add	rsp, 56					; 00000038H
	ret	0
cctree_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
root$ = 64
mark$ = 72
init$ = 80
cctree_group PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 219
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	r8d, DWORD PTR mark$[rsp]
	mov	rdx, QWORD PTR root$[rsp]
	mov	ecx, 20
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 220
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR init$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 221
	mov	rax, QWORD PTR tree$[rsp]
; Line 222
	add	rsp, 56					; 00000038H
	ret	0
cctree_group ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
cctree_translation_unit PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 213
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 23
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 214
	mov	rax, QWORD PTR tree$[rsp]
; Line 215
	add	rsp, 56					; 00000038H
	ret	0
cctree_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
list$ = 64
name$ = 72
cctreee_struct_specifier PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 204
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR list$[rsp], 0
	jne	SHORT $LN3@cctreee_st
	int	3
$LN3@cctreee_st:
; Line 205
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 1
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 206
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 207
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_name
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 208
	mov	rax, QWORD PTR tree$[rsp]
; Line 209
	add	rsp, 56					; 00000038H
	ret	0
cctreee_struct_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
type$ = 64
list$ = 72
cctreee_function_modifier PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 196
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 3
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 197
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 198
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 199
	mov	rax, QWORD PTR tree$[rsp]
; Line 200
	add	rsp, 56					; 00000038H
	ret	0
cctreee_function_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
type$ = 64
rval$ = 72
cctreee_array_modifier PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 188
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 4
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 189
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 190
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 191
	mov	rax, QWORD PTR tree$[rsp]
; Line 192
	add	rsp, 56					; 00000038H
	ret	0
cctreee_array_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
type$ = 64
cctreee_pointer_modifier PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 181
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 5
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 182
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 183
	mov	rax, QWORD PTR tree$[rsp]
; Line 184
	add	rsp, 56					; 00000038H
	ret	0
cctreee_pointer_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
name$ = 32
cctree_name PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 175
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 176
	cmp	QWORD PTR name$[rsp], 0
	je	SHORT $LN3@cctree_nam
	mov	rax, QWORD PTR name$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@cctree_nam
$LN3@cctree_nam:
	mov	QWORD PTR tv66[rsp], 0
$LN4@cctree_nam:
	mov	rax, QWORD PTR tv66[rsp]
; Line 177
	add	rsp, 24
	ret	0
cctree_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
tree$ = 80
cctree_clone PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 168
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 169
	mov	rdi, QWORD PTR result$[rsp]
	mov	rsi, QWORD PTR tree$[rsp]
	mov	ecx, 184				; 000000b8H
	rep movsb
; Line 170
	mov	rax, QWORD PTR result$[rsp]
; Line 171
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctree_clone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_void@@YAXXZ
text$di	SEGMENT
??__Ectype_void@@YAXXZ PROC				; `dynamic initializer for 'ctype_void'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 101
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_void, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_void@@YAXXZ ENDP				; `dynamic initializer for 'ctype_void''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_uint8@@YAXXZ
text$di	SEGMENT
??__Ectype_uint8@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint8'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 100
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_uint8, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint8@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint8''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_uint16@@YAXXZ
text$di	SEGMENT
??__Ectype_uint16@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint16'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 99
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_uint16, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint16@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint16''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_uint32@@YAXXZ
text$di	SEGMENT
??__Ectype_uint32@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint32'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 98
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_uint32, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint32''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_uint64@@YAXXZ
text$di	SEGMENT
??__Ectype_uint64@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint64'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 97
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_uint64, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint64''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_int8@@YAXXZ
text$di	SEGMENT
??__Ectype_int8@@YAXXZ PROC				; `dynamic initializer for 'ctype_int8'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 96
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_int8, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int8@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int8''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_int16@@YAXXZ
text$di	SEGMENT
??__Ectype_int16@@YAXXZ PROC				; `dynamic initializer for 'ctype_int16'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 95
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_int16, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int16@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int16''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_int32@@YAXXZ
text$di	SEGMENT
??__Ectype_int32@@YAXXZ PROC				; `dynamic initializer for 'ctype_int32'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 94
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_int32, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int32''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_int64@@YAXXZ
text$di	SEGMENT
??__Ectype_int64@@YAXXZ PROC				; `dynamic initializer for 'ctype_int64'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 93
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_int64, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int64''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_flo64@@YAXXZ
text$di	SEGMENT
??__Ectype_flo64@@YAXXZ PROC				; `dynamic initializer for 'ctype_flo64'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 92
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_flo64, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_flo64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_flo64''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_flo32@@YAXXZ
text$di	SEGMENT
??__Ectype_flo32@@YAXXZ PROC				; `dynamic initializer for 'ctype_flo32'', COMDAT
; File W:\cpp\void\ktt-c\cctree.h
; Line 91
	sub	rsp, 40					; 00000028H
	xor	r8d, r8d
	xor	edx, edx
	xor	ecx, ecx
	call	cctree_new
	mov	QWORD PTR ctype_flo32, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_flo32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_flo32''
text$di	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
kind$ = 64
root$ = 72
mark$ = 80
cctree_new PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 158
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	r9d, 158				; 0000009eH
	lea	r8, OFFSET FLAT:$SG47139
	lea	rdx, OFFSET FLAT:$SG47140
	mov	ecx, 184				; 000000b8H
	call	ccmalloc_
	mov	QWORD PTR tree$[rsp], rax
; Line 159
	mov	r8d, 184				; 000000b8H
	xor	edx, edx
	mov	rcx, QWORD PTR tree$[rsp]
	call	memset
; Line 160
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR kind$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 161
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR root$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 162
	mov	rax, QWORD PTR tree$[rsp]
	mov	ecx, DWORD PTR mark$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 163
	mov	rax, QWORD PTR tree$[rsp]
; Line 164
	add	rsp, 56					; 00000038H
	ret	0
cctree_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 48
cctree_del PROC
; File W:\cpp\void\ktt-c\cctree.h
; Line 153
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r9d, 153				; 00000099H
	lea	r8, OFFSET FLAT:$SG47129
	lea	rdx, OFFSET FLAT:$SG47130
	mov	rcx, QWORD PTR tree$[rsp]
	call	ccfree_
; Line 154
	add	rsp, 40					; 00000028H
	ret	0
cctree_del ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
key$2 = 40
string_map$ = 48
simple_arr$ = 56
i$3 = 64
i$4 = 68
res$5 = 72
item$ = 80
key$6 = 88
tv364 = 96
tv426 = 100
key$7 = 104
key$8 = 112
pointer_map$ = 120
tv88 = 128
tv159 = 132
tv205 = 136
tv241 = 140
tv415 = 144
item$9 = 152
item$10 = 160
res$11 = 168
res$12 = 176
res$13 = 184
res$14 = 192
key$15 = 200
ccdlb_test PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 476
	sub	rsp, 216				; 000000d8H
; Line 516
	mov	QWORD PTR simple_arr$[rsp], 0
; Line 517
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN4@ccdlb_test
$LN2@ccdlb_test:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN4@ccdlb_test:
	cmp	DWORD PTR i$3[rsp], 25
	jg	$LN3@ccdlb_test
; Line 519
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR simple_arr$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR simple_arr$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR item$9[rsp], rax
; Line 520
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR item$9[rsp]
	call	memset
; Line 521
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 97					; 00000061H
	mov	r8d, DWORD PTR i$3[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46591
	call	ccformat
	mov	QWORD PTR key$7[rsp], rax
; Line 522
	mov	rcx, QWORD PTR key$7[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR tv88[rsp], eax
	mov	rcx, QWORD PTR key$7[rsp]
	call	strlen
	inc	eax
	mov	rcx, QWORD PTR item$9[rsp]
	mov	r9, QWORD PTR key$7[rsp]
	mov	edx, DWORD PTR tv88[rsp]
	mov	r8d, edx
	mov	edx, eax
	call	ccdlb_stradd
	mov	eax, eax
	mov	rcx, QWORD PTR item$9[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR res$12[rsp], rax
; Line 523
	mov	rdx, QWORD PTR key$7[rsp]
	mov	rcx, QWORD PTR res$12[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN18@ccdlb_test
	int	3
$LN18@ccdlb_test:
; Line 524
	jmp	$LN2@ccdlb_test
$LN3@ccdlb_test:
; Line 525
	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN7@ccdlb_test
$LN5@ccdlb_test:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN7@ccdlb_test:
	cmp	DWORD PTR i$4[rsp], 25
	jg	$LN6@ccdlb_test
; Line 527
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR simple_arr$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR simple_arr$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR item$10[rsp], rax
; Line 528
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR item$10[rsp]
	call	memset
; Line 529
	mov	eax, DWORD PTR i$4[rsp]
	add	eax, 65					; 00000041H
	mov	r8d, DWORD PTR i$4[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46592
	call	ccformat
	mov	QWORD PTR key$8[rsp], rax
; Line 530
	mov	rcx, QWORD PTR key$8[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR tv159[rsp], eax
	mov	rcx, QWORD PTR key$8[rsp]
	call	strlen
	inc	eax
	mov	rcx, QWORD PTR item$10[rsp]
	mov	r9, QWORD PTR key$8[rsp]
	mov	edx, DWORD PTR tv159[rsp]
	mov	r8d, edx
	mov	edx, eax
	call	ccdlb_stradd
	mov	eax, eax
	mov	rcx, QWORD PTR item$10[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR res$13[rsp], rax
; Line 531
	mov	rdx, QWORD PTR key$8[rsp]
	mov	rcx, QWORD PTR res$13[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN20@ccdlb_test
	int	3
$LN20@ccdlb_test:
; Line 532
	jmp	$LN5@ccdlb_test
$LN6@ccdlb_test:
; Line 534
	mov	QWORD PTR string_map$[rsp], 0
; Line 536
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN10@ccdlb_test
$LN8@ccdlb_test:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN10@ccdlb_test:
	cmp	DWORD PTR i$1[rsp], 25
	jg	$LN9@ccdlb_test
; Line 541
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 97					; 00000061H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46593
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 542
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR string_map$[rsp]
	call	ccdlb_tblput
	mov	eax, eax
	mov	rcx, QWORD PTR string_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 543
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN22@ccdlb_test
	int	3
$LN22@ccdlb_test:
; Line 544
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR tv205[rsp], eax
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	inc	eax
	mov	rcx, QWORD PTR res$5[rsp]
	mov	r9, QWORD PTR key$2[rsp]
	mov	edx, DWORD PTR tv205[rsp]
	mov	r8d, edx
	mov	edx, eax
	call	ccdlb_stradd
; Line 546
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 65					; 00000041H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46594
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 547
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR string_map$[rsp]
	call	ccdlb_tblput
	mov	eax, eax
	mov	rcx, QWORD PTR string_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 548
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN24@ccdlb_test
	int	3
$LN24@ccdlb_test:
; Line 549
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR tv241[rsp], eax
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	inc	eax
	mov	rcx, QWORD PTR res$5[rsp]
	mov	r9, QWORD PTR key$2[rsp]
	mov	edx, DWORD PTR tv241[rsp]
	mov	r8d, edx
	mov	edx, eax
	call	ccdlb_stradd
; Line 552
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 97					; 00000061H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46595
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 553
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR string_map$[rsp]
	call	ccdlb_tblset
	mov	eax, eax
	mov	rcx, QWORD PTR string_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 554
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN26@ccdlb_test
	int	3
$LN26@ccdlb_test:
; Line 555
	mov	rax, QWORD PTR res$5[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$2[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN28@ccdlb_test
	int	3
$LN28@ccdlb_test:
; Line 557
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 65					; 00000041H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46596
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 558
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR string_map$[rsp]
	call	ccdlb_tblset
	mov	eax, eax
	mov	rcx, QWORD PTR string_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 559
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN30@ccdlb_test
	int	3
$LN30@ccdlb_test:
; Line 560
	mov	rax, QWORD PTR res$5[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$2[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN32@ccdlb_test
	int	3
$LN32@ccdlb_test:
; Line 563
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 97					; 00000061H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46597
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 564
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR string_map$[rsp]
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR string_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 565
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN34@ccdlb_test
	int	3
$LN34@ccdlb_test:
; Line 566
	mov	rax, QWORD PTR res$5[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$2[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN36@ccdlb_test
	int	3
$LN36@ccdlb_test:
; Line 568
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 65					; 00000041H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG46598
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 569
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR string_map$[rsp]
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR string_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 570
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN38@ccdlb_test
	int	3
$LN38@ccdlb_test:
; Line 571
	mov	rax, QWORD PTR res$5[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$2[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN40@ccdlb_test
	int	3
$LN40@ccdlb_test:
; Line 572
	jmp	$LN8@ccdlb_test
$LN9@ccdlb_test:
; Line 574
	mov	QWORD PTR pointer_map$[rsp], 0
; Line 577
	mov	rax, QWORD PTR simple_arr$[rsp]
	mov	QWORD PTR item$[rsp], rax
	jmp	SHORT $LN13@ccdlb_test
$LN11@ccdlb_test:
	mov	rax, QWORD PTR item$[rsp]
	add	rax, 8
	mov	QWORD PTR item$[rsp], rax
$LN13@ccdlb_test:
	cmp	QWORD PTR simple_arr$[rsp], 0
	je	SHORT $LN42@ccdlb_test
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR simple_arr$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv364[rsp], eax
	jmp	SHORT $LN43@ccdlb_test
$LN42@ccdlb_test:
	mov	DWORD PTR tv364[rsp], 0
$LN43@ccdlb_test:
	mov	eax, DWORD PTR tv364[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR simple_arr$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR item$[rsp], rax
	jae	$LN12@ccdlb_test
; Line 579
	mov	rax, QWORD PTR item$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR key$6[rsp], rax
; Line 583
	mov	rcx, QWORD PTR key$6[rsp]
	call	strlen
	mov	r9, QWORD PTR key$6[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR string_map$[rsp]
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR string_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$11[rsp], rax
; Line 584
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN44@ccdlb_test
	int	3
$LN44@ccdlb_test:
; Line 585
	mov	rax, QWORD PTR res$11[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$6[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN46@ccdlb_test
	int	3
$LN46@ccdlb_test:
; Line 587
	mov	r9, QWORD PTR item$[rsp]
	mov	r8d, -8
	mov	edx, 8
	lea	rcx, QWORD PTR pointer_map$[rsp]
	call	ccdlb_tblput
	mov	eax, eax
	mov	rcx, QWORD PTR pointer_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$11[rsp], rax
; Line 588
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN48@ccdlb_test
	int	3
$LN48@ccdlb_test:
; Line 589
	mov	rcx, QWORD PTR key$6[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR tv415[rsp], eax
	mov	rcx, QWORD PTR key$6[rsp]
	call	strlen
	inc	eax
	mov	rcx, QWORD PTR res$11[rsp]
	mov	r9, QWORD PTR key$6[rsp]
	mov	edx, DWORD PTR tv415[rsp]
	mov	r8d, edx
	mov	edx, eax
	call	ccdlb_stradd
; Line 590
	jmp	$LN11@ccdlb_test
$LN12@ccdlb_test:
; Line 592
	mov	rax, QWORD PTR simple_arr$[rsp]
	mov	QWORD PTR item$[rsp], rax
	jmp	SHORT $LN16@ccdlb_test
$LN14@ccdlb_test:
	mov	rax, QWORD PTR item$[rsp]
	add	rax, 8
	mov	QWORD PTR item$[rsp], rax
$LN16@ccdlb_test:
	cmp	QWORD PTR simple_arr$[rsp], 0
	je	SHORT $LN50@ccdlb_test
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR simple_arr$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv426[rsp], eax
	jmp	SHORT $LN51@ccdlb_test
$LN50@ccdlb_test:
	mov	DWORD PTR tv426[rsp], 0
$LN51@ccdlb_test:
	mov	eax, DWORD PTR tv426[rsp]
	xor	edx, edx
	mov	ecx, 8
	div	rcx
	mov	rcx, QWORD PTR simple_arr$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR item$[rsp], rax
	jae	$LN15@ccdlb_test
; Line 593
	mov	rax, QWORD PTR item$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR key$15[rsp], rax
; Line 595
	mov	r9, QWORD PTR item$[rsp]
	mov	r8d, -8
	mov	edx, 8
	lea	rcx, QWORD PTR pointer_map$[rsp]
	call	ccdlb_tblget
	mov	eax, eax
	mov	rcx, QWORD PTR pointer_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$14[rsp], rax
; Line 596
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN52@ccdlb_test
	int	3
$LN52@ccdlb_test:
; Line 597
	mov	rax, QWORD PTR res$14[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$15[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN54@ccdlb_test
	int	3
$LN54@ccdlb_test:
; Line 598
	jmp	$LN14@ccdlb_test
$LN15@ccdlb_test:
; Line 600
	add	rsp, 216				; 000000d8H
	ret	0
ccdlb_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
vli$ = 40
ccm$ = 64
fmt$ = 72
ccstr_catf PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 461
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 463
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 466
	mov	r8, QWORD PTR vli$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccstr_vcatf
	mov	DWORD PTR res$[rsp], eax
; Line 468
	mov	QWORD PTR vli$[rsp], 0
; Line 470
	mov	eax, DWORD PTR res$[rsp]
; Line 471
	add	rsp, 56					; 00000038H
	ret	0
ccstr_catf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
res$ = 36
ccm$ = 64
fmt$ = 72
vli$ = 80
ccstr_vcatf PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 452
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 453
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsnprintf
	mov	DWORD PTR len$[rsp], eax
; Line 454
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8d, eax
	mov	edx, 1
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccdlb_arradd
	mov	DWORD PTR res$[rsp], eax
; Line 455
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	ecx, DWORD PTR res$[rsp]
	mov	rdx, QWORD PTR ccm$[rsp]
	add	rcx, QWORD PTR [rdx]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, eax
	call	stbsp_vsnprintf
	mov	DWORD PTR len$[rsp], eax
; Line 456
	mov	eax, DWORD PTR res$[rsp]
; Line 457
	add	rsp, 56					; 00000038H
	ret	0
ccstr_vcatf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 32
tv140 = 40
tbl$ = 64
isze$ = 72
len$ = 80
key$ = 88
ent$ = 96
ccdlb_tblcat PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 355
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 356
	cmp	QWORD PTR tbl$[rsp], 0
	jne	SHORT $LN6@ccdlb_tblc
	int	3
$LN6@ccdlb_tblc:
; Line 357
	mov	rax, QWORD PTR tbl$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN8@ccdlb_tblc
	int	3
$LN8@ccdlb_tblc:
; Line 359
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN2@ccdlb_tblc
; Line 360
	mov	r9d, 360				; 00000168H
	lea	r8, OFFSET FLAT:$SG46444
	lea	rdx, OFFSET FLAT:$SG46445
	mov	ecx, 32					; 00000020H
	call	ccmalloc_
	mov	rcx, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 361
	mov	rax, QWORD PTR ent$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR ent$[rsp], rax
; Line 362
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR ent$[rsp]
	call	memset
; Line 363
	mov	rax, QWORD PTR tbl$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 8
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	ccdlb_arradd
$LN2@ccdlb_tblc:
; Line 366
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN10@ccdlb_tblc
	int	3
$LN10@ccdlb_tblc:
; Line 367
	mov	rax, QWORD PTR ent$[rsp]
	cmp	DWORD PTR [rax+8], 0
	je	SHORT $LN12@ccdlb_tblc
	int	3
$LN12@ccdlb_tblc:
; Line 368
	mov	rax, QWORD PTR ent$[rsp]
	cmp	DWORD PTR [rax+24], 0
	je	SHORT $LN14@ccdlb_tblc
	int	3
$LN14@ccdlb_tblc:
; Line 371
	mov	r8d, DWORD PTR isze$[rsp]
	mov	edx, DWORD PTR isze$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_arradd_
	mov	DWORD PTR val$[rsp], eax
; Line 372
	mov	eax, DWORD PTR isze$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR val$[rsp]
	lea	rcx, QWORD PTR [rcx+rdx+24]
	mov	r8d, eax
	xor	edx, edx
	call	memset
; Line 375
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN3@ccdlb_tblc
; Line 376
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	ecx, DWORD PTR len$[rsp]
	inc	ecx
	mov	rdx, QWORD PTR ent$[rsp]
	add	rdx, 16
	mov	QWORD PTR tv140[rsp], rdx
	mov	r9, QWORD PTR key$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rax, QWORD PTR tv140[rsp]
	mov	rcx, rax
	call	ccdlb_stradd
	jmp	SHORT $LN4@ccdlb_tblc
$LN3@ccdlb_tblc:
; Line 378
	mov	rax, QWORD PTR ent$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	mov	QWORD PTR [rax+16], rcx
$LN4@ccdlb_tblc:
; Line 380
	mov	rax, QWORD PTR ent$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 381
	mov	rax, QWORD PTR ent$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax+24], ecx
; Line 382
	mov	eax, DWORD PTR val$[rsp]
; Line 383
	add	rsp, 56					; 00000038H
	ret	0
ccdlb_tblcat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
idx$ = 36
ent$ = 40
hsh$ = 48
tv74 = 56
tbl$ = 80
len$ = 88
key$ = 96
ccdlb_tblent_ PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 336
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 337
	mov	rdx, QWORD PTR key$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	call	cchsh_abc
	mov	QWORD PTR hsh$[rsp], rax
; Line 338
	mov	rax, QWORD PTR tbl$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN8@ccdlb_tble
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR tbl$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN9@ccdlb_tble
$LN8@ccdlb_tble:
	mov	DWORD PTR tv72[rsp], 0
$LN9@ccdlb_tble:
	mov	eax, DWORD PTR tv72[rsp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	rcx
	mov	QWORD PTR tv74[rsp], rax
	xor	edx, edx
	mov	rax, QWORD PTR hsh$[rsp]
	mov	rcx, QWORD PTR tv74[rsp]
	div	rcx
	mov	rax, rdx
	mov	DWORD PTR idx$[rsp], eax
; Line 339
	mov	eax, DWORD PTR idx$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tbl$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR ent$[rsp], rax
; Line 341
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 0
$LN2@ccdlb_tble:
; Line 342
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN3@ccdlb_tble
; Line 343
	mov	rax, QWORD PTR ent$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN4@ccdlb_tble
	mov	rax, QWORD PTR ent$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	cmp	QWORD PTR [rax+16], rcx
	je	SHORT $LN5@ccdlb_tble
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR key$[rsp]
	mov	rax, QWORD PTR ent$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN4@ccdlb_tble
$LN5@ccdlb_tble:
; Line 344
	mov	rax, QWORD PTR ent$[rsp]
	jmp	SHORT $LN1@ccdlb_tble
$LN4@ccdlb_tble:
; Line 345
	mov	rax, QWORD PTR ent$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN6@ccdlb_tble
; Line 346
	jmp	SHORT $LN3@ccdlb_tble
$LN6@ccdlb_tble:
; Line 347
	mov	rax, QWORD PTR ent$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR ent$[rsp], rax
; Line 348
	jmp	SHORT $LN2@ccdlb_tble
$LN3@ccdlb_tble:
; Line 349
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 350
	mov	rax, QWORD PTR ent$[rsp]
$LN1@ccdlb_tble:
; Line 351
	add	rsp, 72					; 00000048H
	ret	0
ccdlb_tblent_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
tv91 = 36
tv137 = 40
dlb$ = 48
dlb_$ = 80
isze$ = 88
ccdlb_tblini PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 315
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 316
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR dlb$[rsp], rax
; Line 318
	cmp	QWORD PTR dlb$[rsp], 0
	jne	$LN2@ccdlb_tbli
; Line 321
	imul	eax, DWORD PTR isze$[rsp], 255		; 000000ffH
	xor	r8d, r8d
	mov	edx, eax
	lea	rcx, QWORD PTR dlb$[rsp]
	call	ccdlb_arradd_
; Line 322
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 24
	test	rax, rax
	je	SHORT $LN4@ccdlb_tbli
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rcx+rax+24]
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN5@ccdlb_tbli
$LN4@ccdlb_tbli:
	mov	DWORD PTR tv75[rsp], 0
$LN5@ccdlb_tbli:
	mov	eax, DWORD PTR tv75[rsp]
	mov	rcx, QWORD PTR dlb$[rsp]
	add	rcx, 24
	mov	r8d, eax
	xor	edx, edx
	call	memset
; Line 325
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 8
	xor	r9d, r9d
	mov	r8d, 255				; 000000ffH
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	ccdlb_arradd
; Line 326
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN6@ccdlb_tbli
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN7@ccdlb_tbli
$LN6@ccdlb_tbli:
	mov	DWORD PTR tv91[rsp], 0
$LN7@ccdlb_tbli:
	mov	eax, DWORD PTR tv91[rsp]
	mov	r8d, eax
	xor	edx, edx
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memset
; Line 327
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN8@ccdlb_tbli
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	eax, DWORD PTR [rax-24]
	or	eax, 2
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	DWORD PTR [rcx-24], eax
	mov	DWORD PTR tv137[rsp], 1
	jmp	SHORT $LN9@ccdlb_tbli
$LN8@ccdlb_tbli:
	mov	DWORD PTR tv137[rsp], 0
$LN9@ccdlb_tbli:
; Line 330
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	QWORD PTR [rax], rcx
$LN2@ccdlb_tbli:
; Line 332
	add	rsp, 72					; 00000048H
	ret	0
ccdlb_tblini ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hsh$ = 0
len$ = 32
key$ = 40
cchsh_abc PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 305
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 306
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN5@cchsh_abc
; Line 307
	mov	QWORD PTR hsh$[rsp], 5381		; 00001505H
	jmp	SHORT $LN4@cchsh_abc
$LN2@cchsh_abc:
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	movsx	rax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR hsh$[rsp]
	shl	rcx, 5
	add	rax, QWORD PTR hsh$[rsp]
	add	rax, rcx
	mov	QWORD PTR hsh$[rsp], rax
$LN4@cchsh_abc:
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN3@cchsh_abc
	jmp	SHORT $LN2@cchsh_abc
$LN3@cchsh_abc:
	jmp	SHORT $LN6@cchsh_abc
$LN5@cchsh_abc:
; Line 309
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR hsh$[rsp], rax
$LN6@cchsh_abc:
; Line 310
	mov	rax, QWORD PTR hsh$[rsp]
; Line 311
	add	rsp, 24
	ret	0
cchsh_abc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
cur$ = 40
ccm$ = 64
cres$ = 72
ccom$ = 80
cpy$ = 88
ccdlb_stradd PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 291
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 293
	cmp	DWORD PTR cres$[rsp], 0
	jne	SHORT $LN3@ccdlb_stra
	int	3
$LN3@ccdlb_stra:
; Line 294
	cmp	DWORD PTR ccom$[rsp], 0
	jne	SHORT $LN5@ccdlb_stra
	int	3
$LN5@ccdlb_stra:
; Line 295
	mov	r9d, DWORD PTR ccom$[rsp]
	mov	r8d, DWORD PTR cres$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccdlb_arradd
	mov	DWORD PTR res$[rsp], eax
; Line 296
	mov	eax, DWORD PTR res$[rsp]
	mov	rcx, QWORD PTR ccm$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR cur$[rsp], rax
; Line 297
	mov	eax, DWORD PTR cres$[rsp]
	dec	eax
	mov	eax, eax
	mov	r8d, eax
	mov	rdx, QWORD PTR cpy$[rsp]
	mov	rcx, QWORD PTR cur$[rsp]
	call	memcpy
; Line 298
	mov	eax, DWORD PTR cres$[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 299
	mov	eax, DWORD PTR res$[rsp]
; Line 300
	add	rsp, 56					; 00000038H
	ret	0
ccdlb_stradd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
tv66 = 40
dlb$ = 48
ccm$ = 80
isze$ = 88
cres$ = 96
ccom$ = 104
ccdlb_arradd PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 280
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 283
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@ccdlb_arra
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 24
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@ccdlb_arra
$LN3@ccdlb_arra:
	mov	QWORD PTR tv66[rsp], 0
$LN4@ccdlb_arra:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR dlb$[rsp], rax
; Line 284
	mov	eax, DWORD PTR isze$[rsp]
	imul	eax, DWORD PTR ccom$[rsp]
	mov	ecx, DWORD PTR isze$[rsp]
	imul	ecx, DWORD PTR cres$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, QWORD PTR dlb$[rsp]
	call	ccdlb_arradd_
	mov	DWORD PTR res$[rsp], eax
; Line 285
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 24
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 286
	xor	edx, edx
	mov	eax, DWORD PTR res$[rsp]
	div	DWORD PTR isze$[rsp]
; Line 287
	add	rsp, 72					; 00000048H
	ret	0
ccdlb_arradd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sze_max$ = 48
sze_min$ = 52
tv65 = 56
rem_rze$ = 60
is_ini$ = 64
dlb$ = 72
dlb_$ = 96
rsze$ = 104
csze$ = 112
ccdlb_arradd_ PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 225
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 236
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR dlb$[rsp], rax
; Line 238
	cmp	QWORD PTR dlb$[rsp], 0
	jne	SHORT $LN7@ccdlb_arra
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN8@ccdlb_arra
$LN7@ccdlb_arra:
	mov	DWORD PTR tv65[rsp], 0
$LN8@ccdlb_arra:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR is_ini$[rsp], eax
; Line 241
	mov	DWORD PTR sze_max$[rsp], 0
; Line 242
	mov	DWORD PTR sze_min$[rsp], 0
; Line 244
	mov	DWORD PTR rem_rze$[rsp], 0
; Line 246
	cmp	DWORD PTR is_ini$[rsp], 0
	jne	SHORT $LN2@ccdlb_arra
; Line 247
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR sze_max$[rsp], eax
; Line 248
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR sze_min$[rsp], eax
; Line 249
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 1
	and	eax, 1
	mov	DWORD PTR rem_rze$[rsp], eax
$LN2@ccdlb_arra:
; Line 254
	mov	eax, DWORD PTR sze_max$[rsp]
	mov	ecx, DWORD PTR rsze$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR sze_min$[rsp]
	cmp	DWORD PTR csze$[rsp], eax
	jbe	SHORT $LN9@ccdlb_arra
	int	3
$LN9@ccdlb_arra:
; Line 256
	mov	eax, DWORD PTR rsze$[rsp]
	mov	ecx, DWORD PTR sze_min$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR sze_max$[rsp], eax
	jae	$LN3@ccdlb_arra
; Line 258
	cmp	DWORD PTR rem_rze$[rsp], 0
	je	SHORT $LN11@ccdlb_arra
	int	3
$LN11@ccdlb_arra:
; Line 260
	mov	eax, DWORD PTR sze_max$[rsp]
	shl	eax, 1
	mov	DWORD PTR sze_max$[rsp], eax
; Line 261
	mov	eax, DWORD PTR rsze$[rsp]
	mov	ecx, DWORD PTR sze_min$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR sze_max$[rsp], eax
	jae	SHORT $LN4@ccdlb_arra
; Line 262
	mov	eax, DWORD PTR rsze$[rsp]
	mov	ecx, DWORD PTR sze_min$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR sze_max$[rsp], eax
$LN4@ccdlb_arra:
; Line 265
	mov	eax, DWORD PTR sze_max$[rsp]
	add	rax, 24
	mov	DWORD PTR [rsp+32], 265			; 00000109H
	lea	r9, OFFSET FLAT:$SG46370
	lea	r8, OFFSET FLAT:$SG46371
	mov	rdx, rax
	mov	rcx, QWORD PTR dlb$[rsp]
	call	ccrealloc_
	mov	rcx, QWORD PTR dlb_$[rsp]
	mov	QWORD PTR [rcx], rax
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR dlb$[rsp], rax
; Line 267
	cmp	DWORD PTR is_ini$[rsp], 0
	je	SHORT $LN5@ccdlb_arra
; Line 269
	mov	r8d, 24
	xor	edx, edx
	mov	rcx, QWORD PTR dlb$[rsp]
	call	memset
$LN5@ccdlb_arra:
$LN3@ccdlb_arra:
; Line 273
	mov	rax, QWORD PTR dlb$[rsp]
	mov	ecx, DWORD PTR sze_max$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 274
	mov	eax, DWORD PTR csze$[rsp]
	mov	ecx, DWORD PTR sze_min$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 275
	mov	eax, DWORD PTR sze_min$[rsp]
; Line 276
	add	rsp, 88					; 00000058H
	ret	0
ccdlb_arradd_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 48
tbl$ = 56
tv66 = 64
ent$ = 72
ccm$ = 96
isze$ = 104
len$ = 112
key$ = 120
ccdlb_tblset PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 426
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 431
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN6@ccdlb_tbls
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 24
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN7@ccdlb_tbls
$LN6@ccdlb_tbls:
	mov	QWORD PTR tv66[rsp], 0
$LN7@ccdlb_tbls:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR tbl$[rsp], rax
; Line 432
	cmp	QWORD PTR tbl$[rsp], 0
	jne	SHORT $LN2@ccdlb_tbls
	mov	edx, DWORD PTR isze$[rsp]
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblini
$LN2@ccdlb_tbls:
; Line 434
	mov	DWORD PTR val$[rsp], 0
; Line 435
	mov	r8, QWORD PTR key$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblent_
	mov	QWORD PTR ent$[rsp], rax
; Line 436
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 1
	jne	SHORT $LN3@ccdlb_tbls
; Line 438
	mov	rax, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR key$[rsp]
	mov	r8d, DWORD PTR len$[rsp]
	mov	edx, DWORD PTR isze$[rsp]
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblcat
	mov	DWORD PTR val$[rsp], eax
; Line 439
	mov	rax, QWORD PTR tbl$[rsp]
	add	rax, 24
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 441
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 0
; Line 442
	jmp	SHORT $LN4@ccdlb_tbls
$LN3@ccdlb_tbls:
; Line 444
	mov	rax, QWORD PTR ent$[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR val$[rsp], eax
$LN4@ccdlb_tbls:
; Line 447
	xor	edx, edx
	mov	eax, DWORD PTR val$[rsp]
	div	DWORD PTR isze$[rsp]
; Line 448
	add	rsp, 88					; 00000058H
	ret	0
ccdlb_tblset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 48
tbl$ = 56
tv66 = 64
ent$ = 72
ccm$ = 96
isze$ = 104
len$ = 112
key$ = 120
ccdlb_tblput PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 401
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 406
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN6@ccdlb_tblp
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 24
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN7@ccdlb_tblp
$LN6@ccdlb_tblp:
	mov	QWORD PTR tv66[rsp], 0
$LN7@ccdlb_tblp:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR tbl$[rsp], rax
; Line 407
	cmp	QWORD PTR tbl$[rsp], 0
	jne	SHORT $LN2@ccdlb_tblp
	mov	edx, DWORD PTR isze$[rsp]
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblini
$LN2@ccdlb_tblp:
; Line 409
	mov	DWORD PTR val$[rsp], 0
; Line 410
	mov	r8, QWORD PTR key$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblent_
	mov	QWORD PTR ent$[rsp], rax
; Line 411
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 1
	jne	SHORT $LN3@ccdlb_tblp
; Line 413
	mov	rax, QWORD PTR ent$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR key$[rsp]
	mov	r8d, DWORD PTR len$[rsp]
	mov	edx, DWORD PTR isze$[rsp]
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblcat
	mov	DWORD PTR val$[rsp], eax
; Line 414
	mov	rax, QWORD PTR tbl$[rsp]
	add	rax, 24
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 416
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 0
; Line 417
	jmp	SHORT $LN4@ccdlb_tblp
$LN3@ccdlb_tblp:
; Line 419
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 2
$LN4@ccdlb_tblp:
; Line 421
	xor	edx, edx
	mov	eax, DWORD PTR val$[rsp]
	div	DWORD PTR isze$[rsp]
; Line 422
	add	rsp, 88					; 00000058H
	ret	0
ccdlb_tblput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 32
tv66 = 40
tbl$ = 48
ent$1 = 56
ccm$ = 80
isze$ = 88
len$ = 96
key$ = 104
ccdlb_tblget PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 388
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@ccdlb_tblg
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 24
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN6@ccdlb_tblg
$LN5@ccdlb_tblg:
	mov	QWORD PTR tv66[rsp], 0
$LN6@ccdlb_tblg:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR tbl$[rsp], rax
; Line 389
	mov	DWORD PTR val$[rsp], 0
; Line 391
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 392
	cmp	QWORD PTR tbl$[rsp], 0
	je	SHORT $LN2@ccdlb_tblg
; Line 393
	mov	r8, QWORD PTR key$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_tblent_
	mov	QWORD PTR ent$1[rsp], rax
; Line 394
	mov	eax, OFFSET FLAT:ccerr
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	jne	SHORT $LN3@ccdlb_tblg
	mov	rax, QWORD PTR ent$1[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR val$[rsp], eax
$LN3@ccdlb_tblg:
$LN2@ccdlb_tblg:
; Line 396
	xor	edx, edx
	mov	eax, DWORD PTR val$[rsp]
	div	DWORD PTR isze$[rsp]
; Line 397
	add	rsp, 72					; 00000048H
	ret	0
ccdlb_tblget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vli$ = 32
res$ = 40
fmt$ = 64
ccformat PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 55
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 57
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 58
	mov	rdx, QWORD PTR vli$[rsp]
	mov	rcx, QWORD PTR fmt$[rsp]
	call	ccformatv
	mov	QWORD PTR res$[rsp], rax
; Line 59
	mov	QWORD PTR vli$[rsp], 0
; Line 61
	mov	rax, QWORD PTR res$[rsp]
; Line 62
	add	rsp, 56					; 00000038H
	ret	0
ccformat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
vli$ = 40
buf$ = 64
len$ = 72
fmt$ = 80
ccformatex PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 44
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 46
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 47
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatvex
	mov	DWORD PTR res$[rsp], eax
; Line 48
	mov	QWORD PTR vli$[rsp], 0
; Line 50
	mov	eax, DWORD PTR res$[rsp]
; Line 51
	add	rsp, 56					; 00000038H
	ret	0
ccformatex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fmt$ = 48
vli$ = 56
ccformatv PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 33
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 37
	mov	eax, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	ccformatvex
; Line 39
	mov	eax, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
; Line 40
	add	rsp, 40					; 00000028H
	ret	0
ccformatv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 48
len$ = 56
fmt$ = 64
vli$ = 72
ccformatvex PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 27
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 28
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
; Line 29
	add	rsp, 40					; 00000028H
	ret	0
ccformatvex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
string$ = 48
ccout	PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 9
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11
	mov	rcx, QWORD PTR string$[rsp]
	call	QWORD PTR __imp_OutputDebugStringA
; Line 13
	mov	rcx, QWORD PTR string$[rsp]
	call	printf
; Line 14
	add	rsp, 40					; 00000028H
	ret	0
ccout	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
et$1 = 0
ph$ = 8
eb$2 = 16
e$3 = 20
pl$ = 24
cn$4 = 32
cn$5 = 36
cn$6 = 40
cn$7 = 44
cn$8 = 48
cn$9 = 52
cn$10 = 56
cn$11 = 60
cn$12 = 64
cn$13 = 68
cn$14 = 72
cn$15 = 76
cn$16 = 80
cn$17 = 84
cn$18 = 88
cn$19 = 92
cn$20 = 96
cn$21 = 100
cn$22 = 104
cn$23 = 108
cn$24 = 112
cn$25 = 116
cn$26 = 120
cn$27 = 124
p2l$28 = 128
p2h$29 = 136
bt$30 = 144
bt$31 = 152
bt$32 = 160
bt$33 = 168
bt$34 = 176
bt$35 = 184
ahi$36 = 192
bhi$37 = 200
ahi$38 = 208
bhi$39 = 216
ahi$40 = 224
bhi$41 = 232
ahi$42 = 240
bhi$43 = 248
ahi$44 = 256
bhi$45 = 264
ahi$46 = 272
bhi$47 = 280
alo$48 = 288
blo$49 = 296
alo$50 = 304
blo$51 = 312
s$52 = 320
alo$53 = 328
blo$54 = 336
alo$55 = 344
blo$56 = 352
s$57 = 360
alo$58 = 368
blo$59 = 376
s$60 = 384
alo$61 = 392
blo$62 = 400
s$63 = 408
ohi$ = 432
olo$ = 440
d$ = 448
power$ = 456
stbsp__raise_to_power10 PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1639
	mov	DWORD PTR [rsp+32], r9d
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 424				; 000001a8H
; Line 1641
	cmp	DWORD PTR power$[rsp], 0
	jl	$LN74@stbsp__rai
	cmp	DWORD PTR power$[rsp], 22
	jg	$LN74@stbsp__rai
; Line 1642
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$36[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$37[rsp], xmm0
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$4[rsp], 0
	jmp	SHORT $LN4@stbsp__rai
$LN2@stbsp__rai:
	mov	eax, DWORD PTR cn$4[rsp]
	inc	eax
	mov	DWORD PTR cn$4[rsp], eax
$LN4@stbsp__rai:
	cmp	DWORD PTR cn$4[rsp], 8
	jge	SHORT $LN3@stbsp__rai
	movsxd	rax, DWORD PTR cn$4[rsp]
	movsxd	rcx, DWORD PTR cn$4[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$30[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rai
$LN3@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$5[rsp], 0
	jmp	SHORT $LN7@stbsp__rai
$LN5@stbsp__rai:
	mov	eax, DWORD PTR cn$5[rsp]
	inc	eax
	mov	DWORD PTR cn$5[rsp], eax
$LN7@stbsp__rai:
	cmp	DWORD PTR cn$5[rsp], 8
	jge	SHORT $LN6@stbsp__rai
	movsxd	rax, DWORD PTR cn$5[rsp]
	movsxd	rcx, DWORD PTR cn$5[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR ahi$36[rsp+rcx], al
	jmp	SHORT $LN5@stbsp__rai
$LN6@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$36[rsp]
	movsd	QWORD PTR alo$48[rsp], xmm0
	mov	DWORD PTR cn$6[rsp], 0
	jmp	SHORT $LN10@stbsp__rai
$LN8@stbsp__rai:
	mov	eax, DWORD PTR cn$6[rsp]
	inc	eax
	mov	DWORD PTR cn$6[rsp], eax
$LN10@stbsp__rai:
	cmp	DWORD PTR cn$6[rsp], 8
	jge	SHORT $LN9@stbsp__rai
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$6[rsp]
	movsxd	rdx, DWORD PTR cn$6[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$30[rsp+rdx], al
	jmp	SHORT $LN8@stbsp__rai
$LN9@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$7[rsp], 0
	jmp	SHORT $LN13@stbsp__rai
$LN11@stbsp__rai:
	mov	eax, DWORD PTR cn$7[rsp]
	inc	eax
	mov	DWORD PTR cn$7[rsp], eax
$LN13@stbsp__rai:
	cmp	DWORD PTR cn$7[rsp], 8
	jge	SHORT $LN12@stbsp__rai
	movsxd	rax, DWORD PTR cn$7[rsp]
	movsxd	rcx, DWORD PTR cn$7[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR bhi$37[rsp+rcx], al
	jmp	SHORT $LN11@stbsp__rai
$LN12@stbsp__rai:
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$37[rsp]
	movsd	QWORD PTR blo$49[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$36[rsp]
	mulsd	xmm0, QWORD PTR bhi$37[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$36[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR bhi$37[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1643
	jmp	$LN75@stbsp__rai
$LN74@stbsp__rai:
; Line 1647
	mov	eax, DWORD PTR power$[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1648
	cmp	DWORD PTR power$[rsp], 0
	jge	SHORT $LN76@stbsp__rai
; Line 1649
	mov	eax, DWORD PTR e$3[rsp]
	neg	eax
	mov	DWORD PTR e$3[rsp], eax
$LN76@stbsp__rai:
; Line 1650
	imul	eax, DWORD PTR e$3[rsp], 713		; 000002c9H
	sar	eax, 14
	mov	DWORD PTR et$1[rsp], eax
; Line 1651
	cmp	DWORD PTR et$1[rsp], 13
	jle	SHORT $LN77@stbsp__rai
; Line 1652
	mov	DWORD PTR et$1[rsp], 13
$LN77@stbsp__rai:
; Line 1653
	imul	eax, DWORD PTR et$1[rsp], 23
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR eb$2[rsp], eax
; Line 1655
	movsd	xmm0, QWORD PTR d$[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1656
	xorps	xmm0, xmm0
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1657
	cmp	DWORD PTR power$[rsp], 0
	jge	$LN78@stbsp__rai
; Line 1658
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN80@stbsp__rai
; Line 1659
	mov	eax, DWORD PTR eb$2[rsp]
	dec	eax
	mov	DWORD PTR eb$2[rsp], eax
; Line 1660
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$38[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$39[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$8[rsp], 0
	jmp	SHORT $LN16@stbsp__rai
$LN14@stbsp__rai:
	mov	eax, DWORD PTR cn$8[rsp]
	inc	eax
	mov	DWORD PTR cn$8[rsp], eax
$LN16@stbsp__rai:
	cmp	DWORD PTR cn$8[rsp], 8
	jge	SHORT $LN15@stbsp__rai
	movsxd	rax, DWORD PTR cn$8[rsp]
	movsxd	rcx, DWORD PTR cn$8[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$31[rsp+rcx], al
	jmp	SHORT $LN14@stbsp__rai
$LN15@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$9[rsp], 0
	jmp	SHORT $LN19@stbsp__rai
$LN17@stbsp__rai:
	mov	eax, DWORD PTR cn$9[rsp]
	inc	eax
	mov	DWORD PTR cn$9[rsp], eax
$LN19@stbsp__rai:
	cmp	DWORD PTR cn$9[rsp], 8
	jge	SHORT $LN18@stbsp__rai
	movsxd	rax, DWORD PTR cn$9[rsp]
	movsxd	rcx, DWORD PTR cn$9[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR ahi$38[rsp+rcx], al
	jmp	SHORT $LN17@stbsp__rai
$LN18@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$38[rsp]
	movsd	QWORD PTR alo$50[rsp], xmm0
	mov	DWORD PTR cn$10[rsp], 0
	jmp	SHORT $LN22@stbsp__rai
$LN20@stbsp__rai:
	mov	eax, DWORD PTR cn$10[rsp]
	inc	eax
	mov	DWORD PTR cn$10[rsp], eax
$LN22@stbsp__rai:
	cmp	DWORD PTR cn$10[rsp], 8
	jge	SHORT $LN21@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$10[rsp]
	movsxd	rdx, DWORD PTR cn$10[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$31[rsp+rdx], al
	jmp	SHORT $LN20@stbsp__rai
$LN21@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$11[rsp], 0
	jmp	SHORT $LN25@stbsp__rai
$LN23@stbsp__rai:
	mov	eax, DWORD PTR cn$11[rsp]
	inc	eax
	mov	DWORD PTR cn$11[rsp], eax
$LN25@stbsp__rai:
	cmp	DWORD PTR cn$11[rsp], 8
	jge	SHORT $LN24@stbsp__rai
	movsxd	rax, DWORD PTR cn$11[rsp]
	movsxd	rcx, DWORD PTR cn$11[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR bhi$39[rsp+rcx], al
	jmp	SHORT $LN23@stbsp__rai
$LN24@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$39[rsp]
	movsd	QWORD PTR blo$51[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$38[rsp]
	mulsd	xmm0, QWORD PTR bhi$39[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$38[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR bhi$39[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1661
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negboterr
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	xmm1, QWORD PTR pl$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
$LN80@stbsp__rai:
; Line 1663
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN81@stbsp__rai
; Line 1664
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$52[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1665
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1666
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$40[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$41[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$12[rsp], 0
	jmp	SHORT $LN28@stbsp__rai
$LN26@stbsp__rai:
	mov	eax, DWORD PTR cn$12[rsp]
	inc	eax
	mov	DWORD PTR cn$12[rsp], eax
$LN28@stbsp__rai:
	cmp	DWORD PTR cn$12[rsp], 8
	jge	SHORT $LN27@stbsp__rai
	movsxd	rax, DWORD PTR cn$12[rsp]
	movsxd	rcx, DWORD PTR cn$12[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$32[rsp+rcx], al
	jmp	SHORT $LN26@stbsp__rai
$LN27@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$13[rsp], 0
	jmp	SHORT $LN31@stbsp__rai
$LN29@stbsp__rai:
	mov	eax, DWORD PTR cn$13[rsp]
	inc	eax
	mov	DWORD PTR cn$13[rsp], eax
$LN31@stbsp__rai:
	cmp	DWORD PTR cn$13[rsp], 8
	jge	SHORT $LN30@stbsp__rai
	movsxd	rax, DWORD PTR cn$13[rsp]
	movsxd	rcx, DWORD PTR cn$13[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR ahi$40[rsp+rcx], al
	jmp	SHORT $LN29@stbsp__rai
$LN30@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$40[rsp]
	movsd	QWORD PTR alo$53[rsp], xmm0
	mov	DWORD PTR cn$14[rsp], 0
	jmp	SHORT $LN34@stbsp__rai
$LN32@stbsp__rai:
	mov	eax, DWORD PTR cn$14[rsp]
	inc	eax
	mov	DWORD PTR cn$14[rsp], eax
$LN34@stbsp__rai:
	cmp	DWORD PTR cn$14[rsp], 8
	jge	SHORT $LN33@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$14[rsp]
	movsxd	rdx, DWORD PTR cn$14[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$32[rsp+rdx], al
	jmp	SHORT $LN32@stbsp__rai
$LN33@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$15[rsp], 0
	jmp	SHORT $LN37@stbsp__rai
$LN35@stbsp__rai:
	mov	eax, DWORD PTR cn$15[rsp]
	inc	eax
	mov	DWORD PTR cn$15[rsp], eax
$LN37@stbsp__rai:
	cmp	DWORD PTR cn$15[rsp], 8
	jge	SHORT $LN36@stbsp__rai
	movsxd	rax, DWORD PTR cn$15[rsp]
	movsxd	rcx, DWORD PTR cn$15[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR bhi$41[rsp+rcx], al
	jmp	SHORT $LN35@stbsp__rai
$LN36@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$41[rsp]
	movsd	QWORD PTR blo$54[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$40[rsp]
	mulsd	xmm0, QWORD PTR bhi$41[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$40[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR bhi$41[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1667
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtoperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1668
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1669
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN81@stbsp__rai:
; Line 1671
	jmp	$LN79@stbsp__rai
$LN78@stbsp__rai:
; Line 1672
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN82@stbsp__rai
; Line 1673
	mov	eax, DWORD PTR eb$2[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1674
	cmp	DWORD PTR eb$2[rsp], 22
	jle	SHORT $LN83@stbsp__rai
; Line 1675
	mov	DWORD PTR eb$2[rsp], 22
$LN83@stbsp__rai:
; Line 1676
	mov	eax, DWORD PTR eb$2[rsp]
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$3[rsp], eax
; Line 1677
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$42[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$43[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$16[rsp], 0
	jmp	SHORT $LN40@stbsp__rai
$LN38@stbsp__rai:
	mov	eax, DWORD PTR cn$16[rsp]
	inc	eax
	mov	DWORD PTR cn$16[rsp], eax
$LN40@stbsp__rai:
	cmp	DWORD PTR cn$16[rsp], 8
	jge	SHORT $LN39@stbsp__rai
	movsxd	rax, DWORD PTR cn$16[rsp]
	movsxd	rcx, DWORD PTR cn$16[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$33[rsp+rcx], al
	jmp	SHORT $LN38@stbsp__rai
$LN39@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$17[rsp], 0
	jmp	SHORT $LN43@stbsp__rai
$LN41@stbsp__rai:
	mov	eax, DWORD PTR cn$17[rsp]
	inc	eax
	mov	DWORD PTR cn$17[rsp], eax
$LN43@stbsp__rai:
	cmp	DWORD PTR cn$17[rsp], 8
	jge	SHORT $LN42@stbsp__rai
	movsxd	rax, DWORD PTR cn$17[rsp]
	movsxd	rcx, DWORD PTR cn$17[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR ahi$42[rsp+rcx], al
	jmp	SHORT $LN41@stbsp__rai
$LN42@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$42[rsp]
	movsd	QWORD PTR alo$55[rsp], xmm0
	mov	DWORD PTR cn$18[rsp], 0
	jmp	SHORT $LN46@stbsp__rai
$LN44@stbsp__rai:
	mov	eax, DWORD PTR cn$18[rsp]
	inc	eax
	mov	DWORD PTR cn$18[rsp], eax
$LN46@stbsp__rai:
	cmp	DWORD PTR cn$18[rsp], 8
	jge	SHORT $LN45@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$18[rsp]
	movsxd	rdx, DWORD PTR cn$18[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$33[rsp+rdx], al
	jmp	SHORT $LN44@stbsp__rai
$LN45@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$19[rsp], 0
	jmp	SHORT $LN49@stbsp__rai
$LN47@stbsp__rai:
	mov	eax, DWORD PTR cn$19[rsp]
	inc	eax
	mov	DWORD PTR cn$19[rsp], eax
$LN49@stbsp__rai:
	cmp	DWORD PTR cn$19[rsp], 8
	jge	SHORT $LN48@stbsp__rai
	movsxd	rax, DWORD PTR cn$19[rsp]
	movsxd	rcx, DWORD PTR cn$19[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR bhi$43[rsp+rcx], al
	jmp	SHORT $LN47@stbsp__rai
$LN48@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$43[rsp]
	movsd	QWORD PTR blo$56[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$42[rsp]
	mulsd	xmm0, QWORD PTR bhi$43[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$42[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR bhi$43[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1678
	cmp	DWORD PTR e$3[rsp], 0
	je	$LN84@stbsp__rai
; Line 1679
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$57[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1680
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$44[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$45[rsp], xmm0
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$20[rsp], 0
	jmp	SHORT $LN52@stbsp__rai
$LN50@stbsp__rai:
	mov	eax, DWORD PTR cn$20[rsp]
	inc	eax
	mov	DWORD PTR cn$20[rsp], eax
$LN52@stbsp__rai:
	cmp	DWORD PTR cn$20[rsp], 8
	jge	SHORT $LN51@stbsp__rai
	movsxd	rax, DWORD PTR cn$20[rsp]
	movsxd	rcx, DWORD PTR cn$20[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$34[rsp+rcx], al
	jmp	SHORT $LN50@stbsp__rai
$LN51@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$21[rsp], 0
	jmp	SHORT $LN55@stbsp__rai
$LN53@stbsp__rai:
	mov	eax, DWORD PTR cn$21[rsp]
	inc	eax
	mov	DWORD PTR cn$21[rsp], eax
$LN55@stbsp__rai:
	cmp	DWORD PTR cn$21[rsp], 8
	jge	SHORT $LN54@stbsp__rai
	movsxd	rax, DWORD PTR cn$21[rsp]
	movsxd	rcx, DWORD PTR cn$21[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR ahi$44[rsp+rcx], al
	jmp	SHORT $LN53@stbsp__rai
$LN54@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$44[rsp]
	movsd	QWORD PTR alo$58[rsp], xmm0
	mov	DWORD PTR cn$22[rsp], 0
	jmp	SHORT $LN58@stbsp__rai
$LN56@stbsp__rai:
	mov	eax, DWORD PTR cn$22[rsp]
	inc	eax
	mov	DWORD PTR cn$22[rsp], eax
$LN58@stbsp__rai:
	cmp	DWORD PTR cn$22[rsp], 8
	jge	SHORT $LN57@stbsp__rai
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$22[rsp]
	movsxd	rdx, DWORD PTR cn$22[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$34[rsp+rdx], al
	jmp	SHORT $LN56@stbsp__rai
$LN57@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$23[rsp], 0
	jmp	SHORT $LN61@stbsp__rai
$LN59@stbsp__rai:
	mov	eax, DWORD PTR cn$23[rsp]
	inc	eax
	mov	DWORD PTR cn$23[rsp], eax
$LN61@stbsp__rai:
	cmp	DWORD PTR cn$23[rsp], 8
	jge	SHORT $LN60@stbsp__rai
	movsxd	rax, DWORD PTR cn$23[rsp]
	movsxd	rcx, DWORD PTR cn$23[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR bhi$45[rsp+rcx], al
	jmp	SHORT $LN59@stbsp__rai
$LN60@stbsp__rai:
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$45[rsp]
	movsd	QWORD PTR blo$59[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$44[rsp]
	mulsd	xmm0, QWORD PTR bhi$45[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$44[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR bhi$45[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1681
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	mulsd	xmm0, QWORD PTR pl$[rsp]
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1682
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1683
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN84@stbsp__rai:
$LN82@stbsp__rai:
; Line 1686
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN85@stbsp__rai
; Line 1687
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$60[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1688
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1689
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$46[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$47[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$24[rsp], 0
	jmp	SHORT $LN64@stbsp__rai
$LN62@stbsp__rai:
	mov	eax, DWORD PTR cn$24[rsp]
	inc	eax
	mov	DWORD PTR cn$24[rsp], eax
$LN64@stbsp__rai:
	cmp	DWORD PTR cn$24[rsp], 8
	jge	SHORT $LN63@stbsp__rai
	movsxd	rax, DWORD PTR cn$24[rsp]
	movsxd	rcx, DWORD PTR cn$24[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$35[rsp+rcx], al
	jmp	SHORT $LN62@stbsp__rai
$LN63@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$25[rsp], 0
	jmp	SHORT $LN67@stbsp__rai
$LN65@stbsp__rai:
	mov	eax, DWORD PTR cn$25[rsp]
	inc	eax
	mov	DWORD PTR cn$25[rsp], eax
$LN67@stbsp__rai:
	cmp	DWORD PTR cn$25[rsp], 8
	jge	SHORT $LN66@stbsp__rai
	movsxd	rax, DWORD PTR cn$25[rsp]
	movsxd	rcx, DWORD PTR cn$25[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR ahi$46[rsp+rcx], al
	jmp	SHORT $LN65@stbsp__rai
$LN66@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$46[rsp]
	movsd	QWORD PTR alo$61[rsp], xmm0
	mov	DWORD PTR cn$26[rsp], 0
	jmp	SHORT $LN70@stbsp__rai
$LN68@stbsp__rai:
	mov	eax, DWORD PTR cn$26[rsp]
	inc	eax
	mov	DWORD PTR cn$26[rsp], eax
$LN70@stbsp__rai:
	cmp	DWORD PTR cn$26[rsp], 8
	jge	SHORT $LN69@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$26[rsp]
	movsxd	rdx, DWORD PTR cn$26[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$35[rsp+rdx], al
	jmp	SHORT $LN68@stbsp__rai
$LN69@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$27[rsp], 0
	jmp	SHORT $LN73@stbsp__rai
$LN71@stbsp__rai:
	mov	eax, DWORD PTR cn$27[rsp]
	inc	eax
	mov	DWORD PTR cn$27[rsp], eax
$LN73@stbsp__rai:
	cmp	DWORD PTR cn$27[rsp], 8
	jge	SHORT $LN72@stbsp__rai
	movsxd	rax, DWORD PTR cn$27[rsp]
	movsxd	rcx, DWORD PTR cn$27[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR bhi$47[rsp+rcx], al
	jmp	SHORT $LN71@stbsp__rai
$LN72@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$47[rsp]
	movsd	QWORD PTR blo$62[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$46[rsp]
	mulsd	xmm0, QWORD PTR bhi$47[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$46[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR bhi$47[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1690
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__toperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1691
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1692
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN85@stbsp__rai:
$LN79@stbsp__rai:
$LN75@stbsp__rai:
; Line 1696
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$63[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1697
	mov	rax, QWORD PTR ohi$[rsp]
	movsd	xmm0, QWORD PTR ph$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1698
	mov	rax, QWORD PTR olo$[rsp]
	movsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1699
	add	rsp, 424				; 000001a8H
	ret	0
stbsp__raise_to_power10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
buf$ = 32
user$ = 40
len$ = 48
stbsp__count_clamp_callback PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1422
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1423
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1426
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1427
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
; Line 1428
	add	rsp, 24
	ret	0
stbsp__count_clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
s$1 = 8
d$2 = 16
tv93 = 24
se$3 = 32
buf$ = 64
user$ = 72
len$ = 80
stbsp__clamp_callback PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1394
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1395
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1396
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1398
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN5@stbsp__cla
; Line 1399
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR len$[rsp], eax
$LN5@stbsp__cla:
; Line 1401
	cmp	DWORD PTR len$[rsp], 0
	je	$LN6@stbsp__cla
; Line 1402
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR buf$[rsp], rax
	je	SHORT $LN7@stbsp__cla
; Line 1405
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR d$2[rsp], rax
; Line 1406
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR s$1[rsp], rax
; Line 1407
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR se$3[rsp], rax
$LN4@stbsp__cla:
; Line 1409
	mov	rax, QWORD PTR d$2[rsp]
	mov	rcx, QWORD PTR s$1[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR d$2[rsp]
	inc	rax
	mov	QWORD PTR d$2[rsp], rax
	mov	rax, QWORD PTR s$1[rsp]
	inc	rax
	mov	QWORD PTR s$1[rsp], rax
; Line 1410
	mov	rax, QWORD PTR se$3[rsp]
	cmp	QWORD PTR s$1[rsp], rax
	jb	SHORT $LN4@stbsp__cla
$LN7@stbsp__cla:
; Line 1412
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1413
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN6@stbsp__cla:
; Line 1416
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jg	SHORT $LN8@stbsp__cla
; Line 1417
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	jmp	SHORT $LN1@stbsp__cla
$LN8@stbsp__cla:
; Line 1418
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 512			; 00000200H
	jl	SHORT $LN10@stbsp__cla
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv93[rsp], rax
	jmp	SHORT $LN11@stbsp__cla
$LN10@stbsp__cla:
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	mov	QWORD PTR tv93[rsp], rax
$LN11@stbsp__cla:
	mov	rax, QWORD PTR tv93[rsp]
$LN1@stbsp__cla:
; Line 1419
	add	rsp, 56					; 00000038H
	ret	0
stbsp__clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 0
sn$ = 8
s$ = 32
limit$ = 40
stbsp__strlen_limited PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 310
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 311
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR sn$[rsp], rax
$LN2@stbsp__str:
; Line 315
	mov	rax, QWORD PTR sn$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN9@stbsp__str
; Line 316
	jmp	SHORT $LN3@stbsp__str
$LN9@stbsp__str:
; Line 318
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN11@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN10@stbsp__str
$LN11@stbsp__str:
; Line 319
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	jmp	$LN1@stbsp__str
$LN10@stbsp__str:
; Line 321
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 322
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 323
	jmp	SHORT $LN2@stbsp__str
$LN3@stbsp__str:
$LN5@stbsp__str:
; Line 330
	cmp	DWORD PTR limit$[rsp], 4
	jb	SHORT $LN6@stbsp__str
; Line 331
	mov	rax, QWORD PTR sn$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$1[rsp], eax
; Line 333
	mov	eax, DWORD PTR v$1[rsp]
	sub	eax, 16843009				; 01010101H
	mov	ecx, DWORD PTR v$1[rsp]
	not	ecx
	and	eax, ecx
	and	eax, -2139062144			; 80808080H
	test	eax, eax
	je	SHORT $LN12@stbsp__str
; Line 334
	jmp	SHORT $LN6@stbsp__str
$LN12@stbsp__str:
; Line 336
	mov	rax, QWORD PTR sn$[rsp]
	add	rax, 4
	mov	QWORD PTR sn$[rsp], rax
; Line 337
	mov	eax, DWORD PTR limit$[rsp]
	sub	eax, 4
	mov	DWORD PTR limit$[rsp], eax
; Line 338
	jmp	SHORT $LN5@stbsp__str
$LN6@stbsp__str:
$LN7@stbsp__str:
; Line 341
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN8@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN8@stbsp__str
; Line 342
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 343
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 344
	jmp	SHORT $LN7@stbsp__str
$LN8@stbsp__str:
; Line 346
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@stbsp__str:
; Line 347
	add	rsp, 24
	ret	0
stbsp__strlen_limited ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$ = 8
sign$ = 16
stbsp__lead_sign PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 295
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
; Line 296
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 297
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN2@stbsp__lea
; Line 298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 299
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 45			; 0000002dH
	jmp	SHORT $LN3@stbsp__lea
$LN2@stbsp__lea:
; Line 300
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN4@stbsp__lea
; Line 301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 302
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H
	jmp	SHORT $LN5@stbsp__lea
$LN4@stbsp__lea:
; Line 303
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN6@stbsp__lea
; Line 304
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 305
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 43			; 0000002bH
$LN6@stbsp__lea:
$LN5@stbsp__lea:
$LN3@stbsp__lea:
; Line 307
	ret	0
stbsp__lead_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cn$1 = 0
b$ = 8
d$ = 16
bits$ = 48
expo$ = 56
value$ = 64
stbsp__real_to_parts PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1492
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1494
	mov	QWORD PTR b$[rsp], 0
; Line 1497
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1499
	mov	DWORD PTR cn$1[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$1[rsp]
	inc	eax
	mov	DWORD PTR cn$1[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$1[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$1[rsp]
	movsxd	rcx, DWORD PTR cn$1[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR b$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1501
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR b$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR bits$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1502
	mov	rax, QWORD PTR b$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	sub	rax, 1023				; 000003ffH
	mov	rcx, QWORD PTR expo$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1504
	mov	rax, QWORD PTR b$[rsp]
	shr	rax, 63					; 0000003fH
; Line 1505
	add	rsp, 40					; 00000028H
	ret	0
stbsp__real_to_parts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bits$ = 32
tens$ = 40
e$ = 44
dg$1 = 48
cn$2 = 52
expo$ = 56
n$3 = 60
n$4 = 64
ng$ = 68
tv131 = 72
tv157 = 76
d$ = 80
ph$5 = 88
ahi$6 = 96
v$7 = 104
tv82 = 112
vh$8 = 120
t$9 = 128
r$10 = 136
alo$11 = 144
pl$12 = 152
o$13 = 160
start$ = 192
len$ = 200
out$ = 208
decimal_pos$ = 216
value$ = 224
frac_digits$ = 232
stbsp__real_to_str PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1706
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
; Line 1708
	mov	QWORD PTR bits$[rsp], 0
; Line 1711
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1712
	mov	DWORD PTR cn$2[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$2[rsp]
	inc	eax
	mov	DWORD PTR cn$2[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$2[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$2[rsp]
	movsxd	rcx, DWORD PTR cn$2[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bits$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1713
	mov	rax, QWORD PTR bits$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	mov	DWORD PTR expo$[rsp], eax
; Line 1714
	mov	rax, QWORD PTR bits$[rsp]
	shr	rax, 63					; 0000003fH
	mov	DWORD PTR ng$[rsp], eax
; Line 1715
	cmp	DWORD PTR ng$[rsp], 0
	je	SHORT $LN21@stbsp__rea
; Line 1716
	movsd	xmm0, QWORD PTR d$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR d$[rsp], xmm0
$LN21@stbsp__rea:
; Line 1718
	cmp	DWORD PTR expo$[rsp], 2047		; 000007ffH
	jne	SHORT $LN22@stbsp__rea
; Line 1720
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN43@stbsp__rea
	lea	rax, OFFSET FLAT:$SG46207
	mov	QWORD PTR tv82[rsp], rax
	jmp	SHORT $LN44@stbsp__rea
$LN43@stbsp__rea:
	lea	rax, OFFSET FLAT:$SG46208
	mov	QWORD PTR tv82[rsp], rax
$LN44@stbsp__rea:
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR tv82[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1721
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 28672			; 00007000H
; Line 1722
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 3
; Line 1723
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN22@stbsp__rea:
; Line 1726
	cmp	DWORD PTR expo$[rsp], 0
	jne	$LN23@stbsp__rea
; Line 1728
	mov	rax, QWORD PTR bits$[rsp]
	shl	rax, 1
	test	rax, rax
	jne	SHORT $LN24@stbsp__rea
; Line 1730
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1731
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1732
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 48			; 00000030H
; Line 1733
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1734
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN24@stbsp__rea:
; Line 1738
	mov	rax, 2251799813685248			; 0008000000000000H
	mov	QWORD PTR v$7[rsp], rax
$LN5@stbsp__rea:
; Line 1739
	mov	rax, QWORD PTR v$7[rsp]
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN6@stbsp__rea
; Line 1740
	mov	eax, DWORD PTR expo$[rsp]
	dec	eax
	mov	DWORD PTR expo$[rsp], eax
; Line 1741
	mov	rax, QWORD PTR v$7[rsp]
	sar	rax, 1
	mov	QWORD PTR v$7[rsp], rax
; Line 1742
	jmp	SHORT $LN5@stbsp__rea
$LN6@stbsp__rea:
$LN23@stbsp__rea:
; Line 1751
	mov	eax, DWORD PTR expo$[rsp]
	sub	eax, 1023				; 000003ffH
	mov	DWORD PTR tens$[rsp], eax
; Line 1752
	cmp	DWORD PTR tens$[rsp], 0
	jge	SHORT $LN45@stbsp__rea
	imul	eax, DWORD PTR tens$[rsp], 617		; 00000269H
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN46@stbsp__rea
$LN45@stbsp__rea:
	imul	eax, DWORD PTR tens$[rsp], 1233		; 000004d1H
	cdq
	and	edx, 4095				; 00000fffH
	add	eax, edx
	sar	eax, 12
	inc	eax
	mov	DWORD PTR tv131[rsp], eax
$LN46@stbsp__rea:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR tens$[rsp], eax
; Line 1755
	mov	eax, 18
	sub	eax, DWORD PTR tens$[rsp]
	mov	r9d, eax
	movsd	xmm2, QWORD PTR d$[rsp]
	lea	rdx, QWORD PTR pl$12[rsp]
	lea	rcx, QWORD PTR ph$5[rsp]
	call	stbsp__raise_to_power10
; Line 1758
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$6[rsp], xmm0
	cvttsd2si rax, QWORD PTR ph$5[rsp]
	mov	QWORD PTR bits$[rsp], rax
	cvtsi2sd xmm0, QWORD PTR bits$[rsp]
	movsd	QWORD PTR vh$8[rsp], xmm0
	movsd	xmm0, QWORD PTR ph$5[rsp]
	subsd	xmm0, QWORD PTR vh$8[rsp]
	movsd	QWORD PTR ahi$6[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR ph$5[rsp]
	movsd	QWORD PTR t$9[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR t$9[rsp]
	movsd	xmm1, QWORD PTR ph$5[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR vh$8[rsp]
	addsd	xmm1, QWORD PTR t$9[rsp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR alo$11[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	addsd	xmm0, QWORD PTR alo$11[rsp]
	addsd	xmm0, QWORD PTR pl$12[rsp]
	cvttsd2si rax, xmm0
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1761
	mov	rax, 1000000000000000000		; 0de0b6b3a7640000H
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN25@stbsp__rea
; Line 1762
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN25@stbsp__rea:
; Line 1766
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, -2147483648			; 80000000H
	test	eax, eax
	je	SHORT $LN47@stbsp__rea
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	mov	DWORD PTR tv157[rsp], eax
	jmp	SHORT $LN48@stbsp__rea
$LN47@stbsp__rea:
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv157[rsp], eax
$LN48@stbsp__rea:
	mov	eax, DWORD PTR tv157[rsp]
	mov	DWORD PTR frac_digits$[rsp], eax
; Line 1767
	cmp	DWORD PTR frac_digits$[rsp], 24
	jae	$LN26@stbsp__rea
; Line 1768
	mov	DWORD PTR dg$1[rsp], 1
; Line 1769
	mov	eax, 8
	imul	rax, rax, 9
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN27@stbsp__rea
; Line 1770
	mov	DWORD PTR dg$1[rsp], 10
$LN27@stbsp__rea:
$LN7@stbsp__rea:
; Line 1771
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN8@stbsp__rea
; Line 1772
	mov	eax, DWORD PTR dg$1[rsp]
	inc	eax
	mov	DWORD PTR dg$1[rsp], eax
; Line 1773
	cmp	DWORD PTR dg$1[rsp], 20
	jne	SHORT $LN28@stbsp__rea
; Line 1774
	jmp	$LN29@stbsp__rea
	jmp	$noround$49
$LN28@stbsp__rea:
; Line 1775
	jmp	SHORT $LN7@stbsp__rea
$LN8@stbsp__rea:
; Line 1776
	mov	eax, DWORD PTR dg$1[rsp]
	cmp	DWORD PTR frac_digits$[rsp], eax
	jae	$LN30@stbsp__rea
; Line 1779
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR dg$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 1780
	cmp	DWORD PTR e$[rsp], 24
	jb	SHORT $LN31@stbsp__rea
; Line 1781
	jmp	SHORT $LN32@stbsp__rea
	jmp	SHORT $noround$49
$LN31@stbsp__rea:
; Line 1782
	movsxd	rax, DWORD PTR e$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR r$10[rsp], rax
; Line 1783
	xor	edx, edx
	mov	rax, QWORD PTR r$10[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1784
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN33@stbsp__rea
; Line 1785
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN33@stbsp__rea:
; Line 1786
	xor	edx, edx
	mov	rax, QWORD PTR bits$[rsp]
	div	QWORD PTR r$10[rsp]
	mov	QWORD PTR bits$[rsp], rax
$LN30@stbsp__rea:
$LN29@stbsp__rea:
$LN32@stbsp__rea:
$noround$49:
$LN26@stbsp__rea:
; Line 1792
	cmp	QWORD PTR bits$[rsp], 0
	je	SHORT $LN34@stbsp__rea
$LN9@stbsp__rea:
; Line 1795
	mov	eax, -1
	cmp	QWORD PTR bits$[rsp], rax
	jg	SHORT $LN35@stbsp__rea
; Line 1796
	jmp	SHORT $LN10@stbsp__rea
$LN35@stbsp__rea:
; Line 1797
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	rax, rdx
	test	rax, rax
	je	SHORT $LN36@stbsp__rea
; Line 1798
	jmp	SHORT $LN37@stbsp__rea
	jmp	SHORT $donez$50
$LN36@stbsp__rea:
; Line 1799
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1800
	jmp	SHORT $LN9@stbsp__rea
$LN10@stbsp__rea:
; Line 1801
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$4[rsp], eax
$LN12@stbsp__rea:
; Line 1802
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	eax, edx
	test	eax, eax
	jne	SHORT $LN13@stbsp__rea
; Line 1803
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR n$4[rsp], eax
	jmp	SHORT $LN12@stbsp__rea
$LN13@stbsp__rea:
; Line 1804
	mov	eax, DWORD PTR n$4[rsp]
	mov	QWORD PTR bits$[rsp], rax
$LN37@stbsp__rea:
$donez$50:
$LN34@stbsp__rea:
; Line 1809
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR out$[rsp], rax
; Line 1810
	mov	DWORD PTR e$[rsp], 0
$LN14@stbsp__rea:
; Line 1813
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
	mov	QWORD PTR o$13[rsp], rax
; Line 1815
	cmp	QWORD PTR bits$[rsp], 100000000		; 05f5e100H
	jl	SHORT $LN38@stbsp__rea
; Line 1816
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1817
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1818
	jmp	SHORT $LN39@stbsp__rea
$LN38@stbsp__rea:
; Line 1819
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1820
	mov	QWORD PTR bits$[rsp], 0
$LN39@stbsp__rea:
$LN17@stbsp__rea:
; Line 1822
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN18@stbsp__rea
; Line 1823
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 2
	mov	QWORD PTR out$[rsp], rax
; Line 1824
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR out$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1825
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1826
	mov	eax, DWORD PTR e$[rsp]
	add	eax, 2
	mov	DWORD PTR e$[rsp], eax
; Line 1827
	jmp	SHORT $LN17@stbsp__rea
$LN18@stbsp__rea:
; Line 1828
	cmp	QWORD PTR bits$[rsp], 0
	jne	SHORT $LN40@stbsp__rea
; Line 1829
	cmp	DWORD PTR e$[rsp], 0
	je	SHORT $LN41@stbsp__rea
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN41@stbsp__rea
; Line 1830
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 1831
	mov	eax, DWORD PTR e$[rsp]
	dec	eax
	mov	DWORD PTR e$[rsp], eax
$LN41@stbsp__rea:
; Line 1833
	jmp	SHORT $LN15@stbsp__rea
$LN40@stbsp__rea:
$LN19@stbsp__rea:
; Line 1835
	mov	rax, QWORD PTR o$13[rsp]
	cmp	QWORD PTR out$[rsp], rax
	je	SHORT $LN20@stbsp__rea
; Line 1836
	mov	rax, QWORD PTR out$[rsp]
	dec	rax
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1837
	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax
; Line 1838
	jmp	SHORT $LN19@stbsp__rea
$LN20@stbsp__rea:
; Line 1839
	jmp	$LN14@stbsp__rea
$LN15@stbsp__rea:
; Line 1841
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1842
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1843
	mov	rax, QWORD PTR len$[rsp]
	mov	ecx, DWORD PTR e$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1844
	mov	eax, DWORD PTR ng$[rsp]
$LN1@stbsp__rea:
; Line 1845
	add	rsp, 184				; 000000b8H
	ret	0
stbsp__real_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pcomma$ = 8
pperiod$ = 16
stbsp_set_separators PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 275
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
; Line 276
	movzx	eax, BYTE PTR pperiod$[rsp]
	mov	BYTE PTR stbsp__period, al
; Line 277
	movzx	eax, BYTE PTR pcomma$[rsp]
	mov	BYTE PTR stbsp__comma, al
; Line 278
	ret	0
stbsp_set_separators ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$1 = 48
pr$2 = 52
n$3 = 56
s$4 = 64
l$5 = 72
bf$ = 80
dp$6 = 88
idx$7 = 92
f$ = 96
cs$8 = 104
i$9 = 108
tlen$ = 112
fw$10 = 116
n64$11 = 120
i$12 = 128
sn$13 = 136
i$14 = 144
i$15 = 148
tz$16 = 152
i$17 = 156
i$18 = 160
i$19 = 164
fv$20 = 168
h$21 = 176
tv228 = 184
tv141 = 188
v$22 = 192
tv275 = 196
len$23 = 200
c$24 = 204
len$25 = 208
len$26 = 212
len$27 = 216
len$28 = 220
len$29 = 224
len$30 = 228
len$31 = 232
len$32 = 236
i$33 = 240
len$34 = 244
tv438 = 248
tv440 = 252
tv503 = 256
tv506 = 260
tv566 = 264
tv642 = 268
tv818 = 272
tv886 = 276
tv979 = 280
lg$35 = 284
lg$36 = 288
tv1058 = 292
lg$37 = 296
tv439 = 300
lg$38 = 304
lg$39 = 308
lg$40 = 312
lg$41 = 316
c$42 = 320
lg$43 = 324
tv176 = 328
tv208 = 332
tv286 = 336
tv303 = 340
tv345 = 344
o$44 = 352
divisor$45 = 360
tv1941 = 368
tv922 = 372
tv945 = 376
i64$46 = 384
tv1082 = 392
tv1081 = 396
tv1277 = 400
tv418 = 404
$T47 = 408
$T48 = 416
tv282 = 424
$T49 = 432
$T50 = 440
$T51 = 448
$T52 = 456
tv317 = 464
tv325 = 472
tv332 = 480
tv462 = 488
tv469 = 496
tv512 = 504
tv519 = 512
$T53 = 520
tv584 = 528
$T54 = 536
tv760 = 544
$T55 = 552
$T56 = 560
tv789 = 568
$T57 = 576
tv811 = 584
$T58 = 592
$T59 = 600
tv872 = 608
$T60 = 616
d$61 = 624
tv1581 = 632
lead$62 = 640
tail$63 = 648
num$64 = 656
__$ArrayPad$ = 1184
callback$ = 1216
user$ = 1224
buf$ = 1232
fmt$ = 1240
va$ = 1248
stbsp_vsprintfcb PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 350
$LN461:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1208				; 000004b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 355
	mov	DWORD PTR tlen$[rsp], 0
; Line 357
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
; Line 358
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR f$[rsp], rax
$LN2@stbsp_vspr:
$LN5@stbsp_vspr:
$LN8@stbsp_vspr:
; Line 393
	mov	rax, QWORD PTR f$[rsp]
	and	rax, 3
	test	rax, rax
	je	$LN9@stbsp_vspr
$schk1$462:
; Line 395
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN126@stbsp_vspr
; Line 396
	jmp	$LN127@stbsp_vspr
	jmp	$scandd$463
$LN126@stbsp_vspr:
$schk2$464:
; Line 398
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN128@stbsp_vspr
; Line 399
	jmp	$LN129@stbsp_vspr
	jmp	$endfmt$465
$LN128@stbsp_vspr:
; Line 400
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN130@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$32[rsp], eax
	mov	eax, DWORD PTR len$32[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN131@stbsp_vspr
	mov	eax, DWORD PTR len$32[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$32[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN132@stbsp_vspr
	jmp	$LN133@stbsp_vspr
	jmp	$done$466
$LN132@stbsp_vspr:
$LN131@stbsp_vspr:
$LN130@stbsp_vspr:
; Line 401
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bf$[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 402
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 403
	jmp	$LN8@stbsp_vspr
$LN9@stbsp_vspr:
$LN10@stbsp_vspr:
; Line 409
	mov	rax, QWORD PTR f$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$22[rsp], eax
; Line 410
	mov	eax, DWORD PTR v$22[rsp]
	not	eax
	and	eax, -2139062144			; 80808080H
	mov	DWORD PTR c$42[rsp], eax
; Line 411
	mov	eax, DWORD PTR v$22[rsp]
	xor	eax, 623191333				; 25252525H
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$42[rsp]
	test	eax, eax
	je	SHORT $LN134@stbsp_vspr
; Line 412
	jmp	$schk1$462
$LN134@stbsp_vspr:
; Line 413
	mov	eax, DWORD PTR v$22[rsp]
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$42[rsp]
	test	eax, eax
	je	SHORT $LN135@stbsp_vspr
; Line 414
	jmp	$schk2$464
$LN135@stbsp_vspr:
; Line 415
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN136@stbsp_vspr
; Line 416
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 4
	jge	SHORT $LN137@stbsp_vspr
; Line 417
	jmp	$schk1$462
$LN137@stbsp_vspr:
$LN136@stbsp_vspr:
; Line 427
	mov	rax, QWORD PTR bf$[rsp]
	mov	ecx, DWORD PTR v$22[rsp]
	mov	DWORD PTR [rax], ecx
; Line 429
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 430
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 4
	mov	QWORD PTR f$[rsp], rax
; Line 431
	jmp	$LN10@stbsp_vspr
; Line 432
	jmp	$LN5@stbsp_vspr
$LN127@stbsp_vspr:
$scandd$463:
; Line 435
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 438
	mov	DWORD PTR fw$10[rsp], 0
; Line 439
	mov	DWORD PTR pr$2[rsp], -1
; Line 440
	mov	DWORD PTR fl$1[rsp], 0
; Line 441
	mov	DWORD PTR tz$16[rsp], 0
$LN13@stbsp_vspr:
; Line 445
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv141[rsp], eax
	mov	eax, DWORD PTR tv141[rsp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR tv141[rsp], eax
	cmp	DWORD PTR tv141[rsp], 63		; 0000003fH
	ja	$LN151@stbsp_vspr
	movsxd	rax, DWORD PTR tv141[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN459@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN460@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN138@stbsp_vspr:
; Line 448
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 1
	mov	DWORD PTR fl$1[rsp], eax
; Line 449
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 450
	jmp	SHORT $LN13@stbsp_vspr
$LN139@stbsp_vspr:
; Line 453
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 2
	mov	DWORD PTR fl$1[rsp], eax
; Line 454
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 455
	jmp	$LN13@stbsp_vspr
$LN140@stbsp_vspr:
; Line 458
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 4
	mov	DWORD PTR fl$1[rsp], eax
; Line 459
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 460
	jmp	$LN13@stbsp_vspr
$LN141@stbsp_vspr:
; Line 463
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
; Line 464
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 465
	jmp	$LN13@stbsp_vspr
$LN142@stbsp_vspr:
; Line 468
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR fl$1[rsp], eax
; Line 469
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 470
	jmp	$LN13@stbsp_vspr
$LN143@stbsp_vspr:
; Line 473
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN144@stbsp_vspr
; Line 474
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN146@stbsp_vspr
; Line 475
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 12
	mov	DWORD PTR fl$1[rsp], eax
; Line 476
	jmp	SHORT $LN147@stbsp_vspr
$LN146@stbsp_vspr:
; Line 477
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 11
	mov	DWORD PTR fl$1[rsp], eax
$LN147@stbsp_vspr:
; Line 479
	jmp	SHORT $LN145@stbsp_vspr
$LN144@stbsp_vspr:
; Line 480
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
$LN145@stbsp_vspr:
; Line 482
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 483
	jmp	$LN13@stbsp_vspr
$LN148@stbsp_vspr:
; Line 486
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 10
	mov	DWORD PTR fl$1[rsp], eax
; Line 487
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 488
	jmp	$LN13@stbsp_vspr
$LN149@stbsp_vspr:
; Line 491
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 16
	mov	DWORD PTR fl$1[rsp], eax
; Line 492
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 493
	jmp	SHORT $LN150@stbsp_vspr
	jmp	SHORT $flags_done$467
$LN151@stbsp_vspr:
; Line 494
	jmp	SHORT $LN152@stbsp_vspr
	jmp	SHORT $flags_done$467
; Line 496
	jmp	$LN13@stbsp_vspr
$LN150@stbsp_vspr:
$LN152@stbsp_vspr:
$flags_done$467:
; Line 500
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN153@stbsp_vspr
; Line 501
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN369@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv176[rsp], eax
	jmp	SHORT $LN370@stbsp_vspr
$LN369@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv176[rsp], eax
$LN370@stbsp_vspr:
	mov	eax, DWORD PTR tv176[rsp]
	mov	DWORD PTR fw$10[rsp], eax
; Line 502
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 503
	jmp	SHORT $LN154@stbsp_vspr
$LN153@stbsp_vspr:
$LN18@stbsp_vspr:
; Line 504
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN19@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN19@stbsp_vspr
; Line 505
	imul	eax, DWORD PTR fw$10[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR fw$10[rsp], eax
; Line 506
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 507
	jmp	SHORT $LN18@stbsp_vspr
$LN19@stbsp_vspr:
$LN154@stbsp_vspr:
; Line 510
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN155@stbsp_vspr
; Line 511
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 512
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN156@stbsp_vspr
; Line 513
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN371@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv208[rsp], eax
	jmp	SHORT $LN372@stbsp_vspr
$LN371@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv208[rsp], eax
$LN372@stbsp_vspr:
	mov	eax, DWORD PTR tv208[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 514
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 515
	jmp	SHORT $LN157@stbsp_vspr
$LN156@stbsp_vspr:
; Line 516
	mov	DWORD PTR pr$2[rsp], 0
$LN20@stbsp_vspr:
; Line 517
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN21@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN21@stbsp_vspr
; Line 518
	imul	eax, DWORD PTR pr$2[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR pr$2[rsp], eax
; Line 519
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 520
	jmp	SHORT $LN20@stbsp_vspr
$LN21@stbsp_vspr:
$LN157@stbsp_vspr:
$LN155@stbsp_vspr:
; Line 525
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv228[rsp], eax
	mov	eax, DWORD PTR tv228[rsp]
	sub	eax, 73					; 00000049H
	mov	DWORD PTR tv228[rsp], eax
	cmp	DWORD PTR tv228[rsp], 49		; 00000031H
	ja	$LN170@stbsp_vspr
	movsxd	rax, DWORD PTR tv228[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN457@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN458@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN158@stbsp_vspr:
; Line 528
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 9
	mov	DWORD PTR fl$1[rsp], eax
; Line 529
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 530
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 104				; 00000068H
	jne	SHORT $LN159@stbsp_vspr
; Line 531
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN159@stbsp_vspr:
; Line 532
	jmp	$LN22@stbsp_vspr
$LN160@stbsp_vspr:
; Line 535
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fl$1[rsp], eax
; Line 536
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 537
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN161@stbsp_vspr
; Line 538
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 539
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN161@stbsp_vspr:
; Line 541
	jmp	$LN22@stbsp_vspr
$LN162@stbsp_vspr:
; Line 544
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 545
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 546
	jmp	$LN22@stbsp_vspr
$LN163@stbsp_vspr:
; Line 549
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 550
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 551
	jmp	$LN22@stbsp_vspr
$LN164@stbsp_vspr:
; Line 553
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 554
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 555
	jmp	$LN22@stbsp_vspr
$LN165@stbsp_vspr:
; Line 558
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN166@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 52					; 00000034H
	jne	SHORT $LN166@stbsp_vspr
; Line 559
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 560
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
	jmp	SHORT $LN167@stbsp_vspr
$LN166@stbsp_vspr:
; Line 561
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 51					; 00000033H
	jne	SHORT $LN168@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 50					; 00000032H
	jne	SHORT $LN168@stbsp_vspr
; Line 562
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
; Line 563
	jmp	SHORT $LN169@stbsp_vspr
$LN168@stbsp_vspr:
; Line 564
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 565
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN169@stbsp_vspr:
$LN167@stbsp_vspr:
$LN170@stbsp_vspr:
$LN22@stbsp_vspr:
; Line 572
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv275[rsp], eax
	mov	eax, DWORD PTR tv275[rsp]
	sub	eax, 65					; 00000041H
	mov	DWORD PTR tv275[rsp], eax
	cmp	DWORD PTR tv275[rsp], 55		; 00000037H
	ja	$LN362@stbsp_vspr
	movsxd	rax, DWORD PTR tv275[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN455@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN456@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN171@stbsp_vspr:
; Line 589
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN373@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv282[rsp], rax
	jmp	SHORT $LN374@stbsp_vspr
$LN373@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv282[rsp], rax
$LN374@stbsp_vspr:
	mov	rax, QWORD PTR tv282[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 590
	cmp	QWORD PTR s$4[rsp], 0
	jne	SHORT $LN172@stbsp_vspr
; Line 591
	lea	rax, OFFSET FLAT:$SG45592
	mov	QWORD PTR s$4[rsp], rax
$LN172@stbsp_vspr:
; Line 594
	cmp	DWORD PTR pr$2[rsp], 0
	jl	SHORT $LN375@stbsp_vspr
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv286[rsp], eax
	jmp	SHORT $LN376@stbsp_vspr
$LN375@stbsp_vspr:
	mov	DWORD PTR tv286[rsp], -1		; ffffffffH
$LN376@stbsp_vspr:
	mov	edx, DWORD PTR tv286[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	call	stbsp__strlen_limited
	mov	DWORD PTR l$5[rsp], eax
; Line 595
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T49[rsp], rax
	cmp	QWORD PTR $T49[rsp], 8
	jae	SHORT $LN377@stbsp_vspr
	jmp	SHORT $LN378@stbsp_vspr
$LN377@stbsp_vspr:
	call	__report_rangecheckfailure
$LN378@stbsp_vspr:
	mov	rax, QWORD PTR $T49[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 596
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T50[rsp], rax
	cmp	QWORD PTR $T50[rsp], 8
	jae	SHORT $LN379@stbsp_vspr
	jmp	SHORT $LN380@stbsp_vspr
$LN379@stbsp_vspr:
	call	__report_rangecheckfailure
$LN380@stbsp_vspr:
	mov	rax, QWORD PTR $T50[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 597
	mov	DWORD PTR pr$2[rsp], 0
; Line 598
	mov	DWORD PTR dp$6[rsp], 0
; Line 599
	mov	DWORD PTR cs$8[rsp], 0
; Line 601
	jmp	$LN173@stbsp_vspr
	jmp	$scopy$468
$LN174@stbsp_vspr:
; Line 605
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 606
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN381@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv303[rsp], eax
	jmp	SHORT $LN382@stbsp_vspr
$LN381@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv303[rsp], eax
$LN382@stbsp_vspr:
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR tv303[rsp]
	mov	BYTE PTR [rax], cl
; Line 607
	mov	DWORD PTR l$5[rsp], 1
; Line 608
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T51[rsp], rax
	cmp	QWORD PTR $T51[rsp], 8
	jae	SHORT $LN383@stbsp_vspr
	jmp	SHORT $LN384@stbsp_vspr
$LN383@stbsp_vspr:
	call	__report_rangecheckfailure
$LN384@stbsp_vspr:
	mov	rax, QWORD PTR $T51[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 609
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T52[rsp], rax
	cmp	QWORD PTR $T52[rsp], 8
	jae	SHORT $LN385@stbsp_vspr
	jmp	SHORT $LN386@stbsp_vspr
$LN385@stbsp_vspr:
	call	__report_rangecheckfailure
$LN386@stbsp_vspr:
	mov	rax, QWORD PTR $T52[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 610
	mov	DWORD PTR pr$2[rsp], 0
; Line 611
	mov	DWORD PTR dp$6[rsp], 0
; Line 612
	mov	DWORD PTR cs$8[rsp], 0
; Line 613
	jmp	$LN175@stbsp_vspr
	jmp	$scopy$468
$LN176@stbsp_vspr:
; Line 617
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN387@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv317[rsp], rax
	jmp	SHORT $LN388@stbsp_vspr
$LN387@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv317[rsp], rax
$LN388@stbsp_vspr:
	mov	rax, QWORD PTR tv317[rsp]
	mov	QWORD PTR d$61[rsp], rax
; Line 618
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR d$61[rsp]
	mov	DWORD PTR [rcx], eax
; Line 619
	jmp	$LN24@stbsp_vspr
$LN177@stbsp_vspr:
$LN178@stbsp_vspr:
; Line 641
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN389@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv325[rsp], rax
	jmp	SHORT $LN390@stbsp_vspr
$LN389@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv325[rsp], rax
$LN390@stbsp_vspr:
	mov	rax, QWORD PTR tv325[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 642
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN391@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv332[rsp], xmm0
	jmp	SHORT $LN392@stbsp_vspr
$LN391@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv332[rsp], xmm0
$LN392@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv332[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 643
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN179@stbsp_vspr
; Line 644
	mov	DWORD PTR pr$2[rsp], 6
$LN179@stbsp_vspr:
; Line 646
	movsd	xmm2, QWORD PTR fv$20[rsp]
	lea	rdx, QWORD PTR dp$6[rsp]
	lea	rcx, QWORD PTR n64$11[rsp]
	call	stbsp__real_to_parts
	test	eax, eax
	je	SHORT $LN180@stbsp_vspr
; Line 647
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN180@stbsp_vspr:
; Line 649
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 651
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 653
	cmp	DWORD PTR dp$6[rsp], -1023		; fffffffffffffc01H
	jne	SHORT $LN181@stbsp_vspr
; Line 654
	cmp	QWORD PTR n64$11[rsp], 0
	je	SHORT $LN393@stbsp_vspr
	mov	DWORD PTR tv345[rsp], -1022		; fffffffffffffc02H
	jmp	SHORT $LN394@stbsp_vspr
$LN393@stbsp_vspr:
	mov	DWORD PTR tv345[rsp], 0
$LN394@stbsp_vspr:
	mov	eax, DWORD PTR tv345[rsp]
	mov	DWORD PTR dp$6[rsp], eax
	jmp	SHORT $LN182@stbsp_vspr
$LN181@stbsp_vspr:
; Line 656
	mov	rax, 4503599627370496			; 0010000000000000H
	mov	rcx, QWORD PTR n64$11[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN182@stbsp_vspr:
; Line 657
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 8
	mov	QWORD PTR n64$11[rsp], rax
; Line 658
	cmp	DWORD PTR pr$2[rsp], 15
	jge	SHORT $LN183@stbsp_vspr
; Line 659
	mov	eax, DWORD PTR pr$2[rsp]
	shl	eax, 2
	mov	rcx, 576460752303423488			; 0800000000000000H
	mov	QWORD PTR tv1581[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1581[rsp]
	shr	rax, cl
	mov	rcx, QWORD PTR n64$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN183@stbsp_vspr:
; Line 666
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	inc	eax
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 667
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 120		; 00000078H
; Line 668
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
; Line 670
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 671
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 672
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN184@stbsp_vspr
; Line 673
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN184@stbsp_vspr:
; Line 674
	mov	rax, QWORD PTR s$4[rsp]
	mov	QWORD PTR sn$13[rsp], rax
; Line 677
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 678
	cmp	DWORD PTR n$3[rsp], 13
	jbe	SHORT $LN185@stbsp_vspr
; Line 679
	mov	DWORD PTR n$3[rsp], 13
$LN185@stbsp_vspr:
; Line 680
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN186@stbsp_vspr
; Line 681
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN186@stbsp_vspr:
; Line 682
	mov	DWORD PTR pr$2[rsp], 0
$LN26@stbsp_vspr:
; Line 683
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR tv418[rsp], eax
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
	cmp	DWORD PTR tv418[rsp], 0
	je	SHORT $LN27@stbsp_vspr
; Line 684
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 685
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 686
	jmp	SHORT $LN26@stbsp_vspr
$LN27@stbsp_vspr:
; Line 689
	mov	eax, 1
	imul	rax, rax, 17
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 690
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN187@stbsp_vspr
; Line 691
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 692
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 693
	jmp	SHORT $LN188@stbsp_vspr
$LN187@stbsp_vspr:
; Line 694
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN188@stbsp_vspr:
; Line 695
	cmp	DWORD PTR dp$6[rsp], 1000		; 000003e8H
	jl	SHORT $LN399@stbsp_vspr
	mov	DWORD PTR tv440[rsp], 6
	jmp	SHORT $LN400@stbsp_vspr
$LN399@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN397@stbsp_vspr
	mov	DWORD PTR tv439[rsp], 5
	jmp	SHORT $LN398@stbsp_vspr
$LN397@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 10
	jl	SHORT $LN395@stbsp_vspr
	mov	DWORD PTR tv438[rsp], 4
	jmp	SHORT $LN396@stbsp_vspr
$LN395@stbsp_vspr:
	mov	DWORD PTR tv438[rsp], 3
$LN396@stbsp_vspr:
	mov	eax, DWORD PTR tv438[rsp]
	mov	DWORD PTR tv439[rsp], eax
$LN398@stbsp_vspr:
	mov	eax, DWORD PTR tv439[rsp]
	mov	DWORD PTR tv440[rsp], eax
$LN400@stbsp_vspr:
	mov	eax, DWORD PTR tv440[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 696
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN28@stbsp_vspr:
; Line 698
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 699
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN189@stbsp_vspr
; Line 700
	jmp	SHORT $LN29@stbsp_vspr
$LN189@stbsp_vspr:
; Line 701
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 702
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 703
	jmp	SHORT $LN28@stbsp_vspr
$LN29@stbsp_vspr:
; Line 705
	mov	rax, QWORD PTR sn$13[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dp$6[rsp], eax
; Line 706
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 707
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 708
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 709
	jmp	$LN190@stbsp_vspr
	jmp	$scopy$468
$LN191@stbsp_vspr:
$LN192@stbsp_vspr:
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN401@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv462[rsp], rax
	jmp	SHORT $LN402@stbsp_vspr
$LN401@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv462[rsp], rax
$LN402@stbsp_vspr:
	mov	rax, QWORD PTR tv462[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 714
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN403@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv469[rsp], xmm0
	jmp	SHORT $LN404@stbsp_vspr
$LN403@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv469[rsp], xmm0
$LN404@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv469[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 715
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN193@stbsp_vspr
; Line 716
	mov	DWORD PTR pr$2[rsp], 6
	jmp	SHORT $LN194@stbsp_vspr
$LN193@stbsp_vspr:
; Line 717
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN195@stbsp_vspr
; Line 718
	mov	DWORD PTR pr$2[rsp], 1
$LN195@stbsp_vspr:
$LN194@stbsp_vspr:
; Line 720
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN196@stbsp_vspr
; Line 721
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN196@stbsp_vspr:
; Line 724
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 725
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR l$5[rsp], eax
	jbe	SHORT $LN197@stbsp_vspr
; Line 726
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR l$5[rsp], eax
$LN197@stbsp_vspr:
$LN31@stbsp_vspr:
; Line 727
	cmp	DWORD PTR l$5[rsp], 1
	jbe	SHORT $LN32@stbsp_vspr
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN32@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR sn$13[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN32@stbsp_vspr
; Line 728
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
; Line 729
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 730
	jmp	SHORT $LN31@stbsp_vspr
$LN32@stbsp_vspr:
; Line 733
	cmp	DWORD PTR dp$6[rsp], -4
	jle	SHORT $LN199@stbsp_vspr
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jle	SHORT $LN198@stbsp_vspr
$LN199@stbsp_vspr:
; Line 734
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN200@stbsp_vspr
; Line 735
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
	jmp	SHORT $LN201@stbsp_vspr
$LN200@stbsp_vspr:
; Line 736
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN202@stbsp_vspr
; Line 737
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
$LN202@stbsp_vspr:
$LN201@stbsp_vspr:
; Line 738
	jmp	$LN203@stbsp_vspr
	jmp	$doexpfromg$469
$LN198@stbsp_vspr:
; Line 741
	cmp	DWORD PTR dp$6[rsp], 0
	jle	SHORT $LN204@stbsp_vspr
; Line 742
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jge	SHORT $LN405@stbsp_vspr
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv503[rsp], eax
	jmp	SHORT $LN406@stbsp_vspr
$LN405@stbsp_vspr:
	mov	DWORD PTR tv503[rsp], 0
$LN406@stbsp_vspr:
	mov	eax, DWORD PTR tv503[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 743
	jmp	SHORT $LN205@stbsp_vspr
$LN204@stbsp_vspr:
; Line 744
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN407@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv506[rsp], eax
	jmp	SHORT $LN408@stbsp_vspr
$LN407@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv506[rsp], eax
$LN408@stbsp_vspr:
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	add	eax, DWORD PTR tv506[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN205@stbsp_vspr:
; Line 746
	jmp	$LN206@stbsp_vspr
	jmp	$dofloatfromg$470
$LN207@stbsp_vspr:
$LN208@stbsp_vspr:
; Line 750
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN409@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv512[rsp], rax
	jmp	SHORT $LN410@stbsp_vspr
$LN409@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv512[rsp], rax
$LN410@stbsp_vspr:
	mov	rax, QWORD PTR tv512[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 751
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN411@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv519[rsp], xmm0
	jmp	SHORT $LN412@stbsp_vspr
$LN411@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv519[rsp], xmm0
$LN412@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv519[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 752
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN209@stbsp_vspr
; Line 753
	mov	DWORD PTR pr$2[rsp], 6
$LN209@stbsp_vspr:
; Line 755
	mov	eax, DWORD PTR pr$2[rsp]
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN210@stbsp_vspr
; Line 756
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN210@stbsp_vspr:
$LN203@stbsp_vspr:
$doexpfromg$469:
; Line 758
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T53[rsp], rax
	cmp	QWORD PTR $T53[rsp], 8
	jae	SHORT $LN413@stbsp_vspr
	jmp	SHORT $LN414@stbsp_vspr
$LN413@stbsp_vspr:
	call	__report_rangecheckfailure
$LN414@stbsp_vspr:
	mov	rax, QWORD PTR $T53[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 759
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 760
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN211@stbsp_vspr
; Line 761
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 762
	mov	DWORD PTR cs$8[rsp], 0
; Line 763
	mov	DWORD PTR pr$2[rsp], 0
; Line 764
	jmp	$LN212@stbsp_vspr
	jmp	$scopy$468
$LN211@stbsp_vspr:
; Line 766
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 768
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 770
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN213@stbsp_vspr
; Line 771
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN213@stbsp_vspr:
; Line 774
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN214@stbsp_vspr
; Line 775
	mov	eax, DWORD PTR pr$2[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
$LN214@stbsp_vspr:
; Line 776
	mov	DWORD PTR n$3[rsp], 1
	jmp	SHORT $LN35@stbsp_vspr
$LN33@stbsp_vspr:
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
$LN35@stbsp_vspr:
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN34@stbsp_vspr
; Line 777
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	jmp	SHORT $LN33@stbsp_vspr
$LN34@stbsp_vspr:
; Line 779
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 780
	mov	DWORD PTR pr$2[rsp], 0
; Line 782
	mov	eax, 1
	imul	rax, rax, 14
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 783
	mov	eax, DWORD PTR dp$6[rsp]
	dec	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 784
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN215@stbsp_vspr
; Line 785
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 786
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 787
	jmp	SHORT $LN216@stbsp_vspr
$LN215@stbsp_vspr:
; Line 788
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN216@stbsp_vspr:
; Line 792
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN415@stbsp_vspr
	mov	DWORD PTR tv566[rsp], 5
	jmp	SHORT $LN416@stbsp_vspr
$LN415@stbsp_vspr:
	mov	DWORD PTR tv566[rsp], 4
$LN416@stbsp_vspr:
	mov	eax, DWORD PTR tv566[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 794
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN36@stbsp_vspr:
; Line 796
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 797
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN217@stbsp_vspr
; Line 798
	jmp	SHORT $LN37@stbsp_vspr
$LN217@stbsp_vspr:
; Line 799
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 800
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 801
	jmp	SHORT $LN36@stbsp_vspr
$LN37@stbsp_vspr:
; Line 802
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 803
	jmp	$LN218@stbsp_vspr
	jmp	$flt_lead$471
$LN219@stbsp_vspr:
; Line 806
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN417@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv584[rsp], xmm0
	jmp	SHORT $LN418@stbsp_vspr
$LN417@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv584[rsp], xmm0
$LN418@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv584[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
$doafloat$472:
; Line 809
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN220@stbsp_vspr
; Line 811
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
; Line 812
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN221@stbsp_vspr
; Line 813
	movsd	xmm0, QWORD PTR __real@4090000000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
$LN221@stbsp_vspr:
$LN39@stbsp_vspr:
; Line 814
	cmp	DWORD PTR fl$1[rsp], 67108864		; 04000000H
	jae	SHORT $LN40@stbsp_vspr
; Line 815
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	comisd	xmm0, QWORD PTR fv$20[rsp]
	jbe	SHORT $LN222@stbsp_vspr
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR fv$20[rsp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN222@stbsp_vspr
; Line 816
	jmp	SHORT $LN40@stbsp_vspr
$LN222@stbsp_vspr:
; Line 817
	movsd	xmm0, QWORD PTR fv$20[rsp]
	divsd	xmm0, QWORD PTR divisor$45[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 818
	mov	eax, DWORD PTR fl$1[rsp]
	add	eax, 16777216				; 01000000H
	mov	DWORD PTR fl$1[rsp], eax
; Line 819
	jmp	SHORT $LN39@stbsp_vspr
$LN40@stbsp_vspr:
$LN220@stbsp_vspr:
; Line 821
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN223@stbsp_vspr
; Line 822
	mov	DWORD PTR pr$2[rsp], 6
$LN223@stbsp_vspr:
; Line 824
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN224@stbsp_vspr
; Line 825
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN224@stbsp_vspr:
$LN206@stbsp_vspr:
$dofloatfromg$470:
; Line 827
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T54[rsp], rax
	cmp	QWORD PTR $T54[rsp], 8
	jae	SHORT $LN419@stbsp_vspr
	jmp	SHORT $LN420@stbsp_vspr
$LN419@stbsp_vspr:
	call	__report_rangecheckfailure
$LN420@stbsp_vspr:
	mov	rax, QWORD PTR $T54[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 828
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 829
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN225@stbsp_vspr
; Line 830
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 831
	mov	DWORD PTR cs$8[rsp], 0
; Line 832
	mov	DWORD PTR pr$2[rsp], 0
; Line 833
	jmp	$LN226@stbsp_vspr
	jmp	$scopy$468
$LN225@stbsp_vspr:
; Line 835
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 838
	cmp	DWORD PTR dp$6[rsp], 0
	jg	$LN227@stbsp_vspr
; Line 841
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 842
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN229@stbsp_vspr
; Line 843
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN229@stbsp_vspr:
; Line 844
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 845
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jle	SHORT $LN230@stbsp_vspr
; Line 846
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN230@stbsp_vspr:
; Line 847
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN41@stbsp_vspr:
; Line 848
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN42@stbsp_vspr
; Line 849
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN231@stbsp_vspr
; Line 850
	jmp	SHORT $LN42@stbsp_vspr
$LN231@stbsp_vspr:
; Line 851
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 852
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 853
	jmp	SHORT $LN41@stbsp_vspr
$LN42@stbsp_vspr:
$LN43@stbsp_vspr:
; Line 854
	cmp	DWORD PTR i$12[rsp], 4
	jl	SHORT $LN44@stbsp_vspr
; Line 855
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 856
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 857
	mov	eax, DWORD PTR i$12[rsp]
	sub	eax, 4
	mov	DWORD PTR i$12[rsp], eax
; Line 858
	jmp	SHORT $LN43@stbsp_vspr
$LN44@stbsp_vspr:
$LN45@stbsp_vspr:
; Line 859
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN46@stbsp_vspr
; Line 860
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 861
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 862
	jmp	SHORT $LN45@stbsp_vspr
$LN46@stbsp_vspr:
; Line 863
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jle	SHORT $LN232@stbsp_vspr
; Line 864
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN232@stbsp_vspr:
; Line 865
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN47@stbsp_vspr:
; Line 866
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN48@stbsp_vspr
; Line 867
	mov	rax, QWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 868
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 869
	jmp	SHORT $LN47@stbsp_vspr
$LN48@stbsp_vspr:
; Line 870
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 871
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 872
	jmp	$LN228@stbsp_vspr
$LN227@stbsp_vspr:
; Line 873
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN421@stbsp_vspr
	mov	eax, 600				; 00000258H
	sub	eax, DWORD PTR dp$6[rsp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	eax, edx
	mov	DWORD PTR tv642[rsp], eax
	jmp	SHORT $LN422@stbsp_vspr
$LN421@stbsp_vspr:
	mov	DWORD PTR tv642[rsp], 0
$LN422@stbsp_vspr:
	mov	eax, DWORD PTR tv642[rsp]
	mov	DWORD PTR cs$8[rsp], eax
; Line 874
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jb	$LN233@stbsp_vspr
; Line 876
	mov	DWORD PTR n$3[rsp], 0
$LN49@stbsp_vspr:
; Line 878
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN235@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN235@stbsp_vspr
; Line 879
	mov	DWORD PTR cs$8[rsp], 0
; Line 880
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 881
	jmp	SHORT $LN236@stbsp_vspr
$LN235@stbsp_vspr:
; Line 882
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 883
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 884
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN237@stbsp_vspr
; Line 885
	jmp	SHORT $LN50@stbsp_vspr
$LN237@stbsp_vspr:
$LN236@stbsp_vspr:
; Line 887
	jmp	SHORT $LN49@stbsp_vspr
$LN50@stbsp_vspr:
; Line 888
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	$LN238@stbsp_vspr
; Line 889
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR dp$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 890
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN239@stbsp_vspr
$LN52@stbsp_vspr:
; Line 891
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN53@stbsp_vspr
; Line 892
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN240@stbsp_vspr
; Line 893
	jmp	SHORT $LN53@stbsp_vspr
$LN240@stbsp_vspr:
; Line 894
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 895
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 896
	jmp	SHORT $LN52@stbsp_vspr
$LN53@stbsp_vspr:
$LN54@stbsp_vspr:
; Line 897
	cmp	DWORD PTR n$3[rsp], 4
	jb	SHORT $LN55@stbsp_vspr
; Line 898
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 899
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 900
	mov	eax, DWORD PTR n$3[rsp]
	sub	eax, 4
	mov	DWORD PTR n$3[rsp], eax
; Line 901
	jmp	SHORT $LN54@stbsp_vspr
$LN55@stbsp_vspr:
$LN239@stbsp_vspr:
$LN56@stbsp_vspr:
; Line 903
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN57@stbsp_vspr
; Line 904
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN241@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN241@stbsp_vspr
; Line 905
	mov	DWORD PTR cs$8[rsp], 0
; Line 906
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 907
	jmp	SHORT $LN242@stbsp_vspr
$LN241@stbsp_vspr:
; Line 908
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 909
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
$LN242@stbsp_vspr:
; Line 911
	jmp	SHORT $LN56@stbsp_vspr
$LN57@stbsp_vspr:
$LN238@stbsp_vspr:
; Line 913
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 914
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN243@stbsp_vspr
; Line 915
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 916
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tz$16[rsp], eax
$LN243@stbsp_vspr:
; Line 918
	jmp	$LN234@stbsp_vspr
$LN233@stbsp_vspr:
; Line 920
	mov	DWORD PTR n$3[rsp], 0
$LN58@stbsp_vspr:
; Line 922
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN244@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN244@stbsp_vspr
; Line 923
	mov	DWORD PTR cs$8[rsp], 0
; Line 924
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 925
	jmp	SHORT $LN245@stbsp_vspr
$LN244@stbsp_vspr:
; Line 926
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 927
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 928
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN246@stbsp_vspr
; Line 929
	jmp	SHORT $LN59@stbsp_vspr
$LN246@stbsp_vspr:
$LN245@stbsp_vspr:
; Line 931
	jmp	SHORT $LN58@stbsp_vspr
$LN59@stbsp_vspr:
; Line 932
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 933
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN247@stbsp_vspr
; Line 934
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN247@stbsp_vspr:
; Line 935
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN248@stbsp_vspr
; Line 936
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN248@stbsp_vspr:
$LN61@stbsp_vspr:
; Line 937
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN62@stbsp_vspr
; Line 938
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 939
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 940
	jmp	SHORT $LN61@stbsp_vspr
$LN62@stbsp_vspr:
; Line 941
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN234@stbsp_vspr:
$LN228@stbsp_vspr:
; Line 944
	mov	DWORD PTR pr$2[rsp], 0
; Line 947
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN249@stbsp_vspr
; Line 949
	mov	BYTE PTR idx$7[rsp], 1
; Line 950
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN250@stbsp_vspr
; Line 951
	mov	BYTE PTR idx$7[rsp], 0
$LN250@stbsp_vspr:
; Line 952
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
; Line 953
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR tail$63[rsp+rax], 32		; 00000020H
; Line 955
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	test	eax, eax
	je	$LN251@stbsp_vspr
; Line 956
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN252@stbsp_vspr
; Line 957
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG45674
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
	jmp	SHORT $LN253@stbsp_vspr
$LN252@stbsp_vspr:
; Line 959
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG45675
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
$LN253@stbsp_vspr:
; Line 960
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
; Line 962
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN254@stbsp_vspr
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	jne	SHORT $LN254@stbsp_vspr
; Line 963
	movsx	eax, BYTE PTR idx$7[rsp]
	inc	eax
	cdqe
	mov	BYTE PTR tail$63[rsp+rax], 105		; 00000069H
; Line 964
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
$LN254@stbsp_vspr:
; Line 966
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN251@stbsp_vspr:
$LN249@stbsp_vspr:
$LN218@stbsp_vspr:
$flt_lead$471:
; Line 973
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 974
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 975
	jmp	$LN255@stbsp_vspr
	jmp	$scopy$468
$LN256@stbsp_vspr:
$LN257@stbsp_vspr:
; Line 980
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN423@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv760[rsp], rax
	jmp	SHORT $LN424@stbsp_vspr
$LN423@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv760[rsp], rax
$LN424@stbsp_vspr:
	mov	rax, QWORD PTR tv760[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 981
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T55[rsp], rax
	cmp	QWORD PTR $T55[rsp], 8
	jae	SHORT $LN425@stbsp_vspr
	jmp	SHORT $LN426@stbsp_vspr
$LN425@stbsp_vspr:
	call	__report_rangecheckfailure
$LN426@stbsp_vspr:
	mov	rax, QWORD PTR $T55[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 982
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN258@stbsp_vspr
; Line 983
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 984
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 985
	mov	eax, 1
	imul	rax, rax, 11
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN258@stbsp_vspr:
; Line 987
	mov	DWORD PTR l$5[rsp], 384			; 00000180H
; Line 988
	jmp	$LN259@stbsp_vspr
	jmp	$radixnum$473
$LN260@stbsp_vspr:
; Line 991
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR h$21[rsp], rax
; Line 992
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T56[rsp], rax
	cmp	QWORD PTR $T56[rsp], 8
	jae	SHORT $LN427@stbsp_vspr
	jmp	SHORT $LN428@stbsp_vspr
$LN427@stbsp_vspr:
	call	__report_rangecheckfailure
$LN428@stbsp_vspr:
	mov	rax, QWORD PTR $T56[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 993
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN261@stbsp_vspr
; Line 994
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 1
; Line 995
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
$LN261@stbsp_vspr:
; Line 997
	mov	DWORD PTR l$5[rsp], 816			; 00000330H
; Line 998
	jmp	$LN262@stbsp_vspr
	jmp	$radixnum$473
$LN263@stbsp_vspr:
; Line 1001
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 1002
	mov	DWORD PTR pr$2[rsp], 16
; Line 1003
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -17				; ffffffefH
	mov	DWORD PTR fl$1[rsp], eax
$LN264@stbsp_vspr:
$LN265@stbsp_vspr:
; Line 1008
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 88					; 00000058H
	jne	SHORT $LN429@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv789[rsp], rax
	jmp	SHORT $LN430@stbsp_vspr
$LN429@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv789[rsp], rax
$LN430@stbsp_vspr:
	mov	rax, QWORD PTR tv789[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 1009
	mov	DWORD PTR l$5[rsp], 1088		; 00000440H
; Line 1010
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T57[rsp], rax
	cmp	QWORD PTR $T57[rsp], 8
	jae	SHORT $LN431@stbsp_vspr
	jmp	SHORT $LN432@stbsp_vspr
$LN431@stbsp_vspr:
	call	__report_rangecheckfailure
$LN432@stbsp_vspr:
	mov	rax, QWORD PTR $T57[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1011
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN266@stbsp_vspr
; Line 1012
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 1013
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 1014
	mov	eax, 1
	imul	rax, rax, 16
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN266@stbsp_vspr:
$LN259@stbsp_vspr:
$LN262@stbsp_vspr:
$radixnum$473:
; Line 1018
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN267@stbsp_vspr
; Line 1019
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN433@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv811[rsp], rax
	jmp	SHORT $LN434@stbsp_vspr
$LN433@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv811[rsp], rax
$LN434@stbsp_vspr:
	mov	rax, QWORD PTR tv811[rsp]
	mov	QWORD PTR n64$11[rsp], rax
	jmp	SHORT $LN268@stbsp_vspr
$LN267@stbsp_vspr:
; Line 1021
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN435@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv818[rsp], eax
	jmp	SHORT $LN436@stbsp_vspr
$LN435@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv818[rsp], eax
$LN436@stbsp_vspr:
	mov	eax, DWORD PTR tv818[rsp]
	mov	QWORD PTR n64$11[rsp], rax
$LN268@stbsp_vspr:
; Line 1023
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1024
	mov	DWORD PTR dp$6[rsp], 0
; Line 1026
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T58[rsp], rax
	cmp	QWORD PTR $T58[rsp], 8
	jae	SHORT $LN437@stbsp_vspr
	jmp	SHORT $LN438@stbsp_vspr
$LN437@stbsp_vspr:
	call	__report_rangecheckfailure
$LN438@stbsp_vspr:
	mov	rax, QWORD PTR $T58[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1027
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN269@stbsp_vspr
; Line 1028
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T59[rsp], rax
	cmp	QWORD PTR $T59[rsp], 8
	jae	SHORT $LN439@stbsp_vspr
	jmp	SHORT $LN440@stbsp_vspr
$LN439@stbsp_vspr:
	call	__report_rangecheckfailure
$LN440@stbsp_vspr:
	mov	rax, QWORD PTR $T59[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1029
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN270@stbsp_vspr
; Line 1030
	mov	DWORD PTR l$5[rsp], 0
; Line 1031
	mov	DWORD PTR cs$8[rsp], 0
; Line 1032
	jmp	$LN271@stbsp_vspr
	jmp	$scopy$468
$LN270@stbsp_vspr:
$LN269@stbsp_vspr:
$LN63@stbsp_vspr:
; Line 1037
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	ecx, 1
	mov	DWORD PTR tv1941[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1941[rsp]
	shl	eax, cl
	dec	eax
	cdqe
	mov	rcx, QWORD PTR n64$11[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1038
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	eax, eax
	movzx	ecx, al
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, cl
	mov	QWORD PTR n64$11[rsp], rax
; Line 1039
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN272@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	cmp	eax, DWORD PTR pr$2[rsp]
	jl	SHORT $LN272@stbsp_vspr
; Line 1040
	jmp	SHORT $LN64@stbsp_vspr
$LN272@stbsp_vspr:
; Line 1041
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN273@stbsp_vspr
; Line 1042
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 1043
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, 15
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	cmp	eax, ecx
	jne	SHORT $LN274@stbsp_vspr
; Line 1044
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR l$5[rsp], eax
; Line 1045
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
$LN274@stbsp_vspr:
$LN273@stbsp_vspr:
; Line 1048
	jmp	$LN63@stbsp_vspr
$LN64@stbsp_vspr:
; Line 1050
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	shl	ecx, 24
	add	eax, ecx
	mov	DWORD PTR cs$8[rsp], eax
; Line 1052
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1054
	jmp	$LN275@stbsp_vspr
	jmp	$scopy$468
$LN276@stbsp_vspr:
$LN277@stbsp_vspr:
$LN278@stbsp_vspr:
; Line 1060
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	$LN279@stbsp_vspr
; Line 1061
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN441@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv872[rsp], rax
	jmp	SHORT $LN442@stbsp_vspr
$LN441@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv872[rsp], rax
$LN442@stbsp_vspr:
	mov	rax, QWORD PTR tv872[rsp]
	mov	QWORD PTR i64$46[rsp], rax
; Line 1062
	mov	rax, QWORD PTR i64$46[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1063
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN281@stbsp_vspr
	cmp	QWORD PTR i64$46[rsp], 0
	jge	SHORT $LN281@stbsp_vspr
; Line 1064
	mov	rax, QWORD PTR i64$46[rsp]
	neg	rax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1065
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN281@stbsp_vspr:
; Line 1067
	jmp	$LN280@stbsp_vspr
$LN279@stbsp_vspr:
; Line 1068
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN443@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv886[rsp], eax
	jmp	SHORT $LN444@stbsp_vspr
$LN443@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv886[rsp], eax
$LN444@stbsp_vspr:
	mov	eax, DWORD PTR tv886[rsp]
	mov	DWORD PTR i$33[rsp], eax
; Line 1069
	mov	eax, DWORD PTR i$33[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1070
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN282@stbsp_vspr
	cmp	DWORD PTR i$33[rsp], 0
	jge	SHORT $LN282@stbsp_vspr
; Line 1071
	mov	eax, DWORD PTR i$33[rsp]
	neg	eax
	mov	eax, eax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1072
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN282@stbsp_vspr:
$LN280@stbsp_vspr:
; Line 1077
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN283@stbsp_vspr
; Line 1078
	cmp	QWORD PTR n64$11[rsp], 1024		; 00000400H
	jae	SHORT $LN284@stbsp_vspr
; Line 1079
	mov	DWORD PTR pr$2[rsp], 0
	jmp	SHORT $LN285@stbsp_vspr
$LN284@stbsp_vspr:
; Line 1080
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN286@stbsp_vspr
; Line 1081
	mov	DWORD PTR pr$2[rsp], 1
$LN286@stbsp_vspr:
$LN285@stbsp_vspr:
; Line 1082
	cvtsi2sd xmm0, QWORD PTR n64$11[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 1083
	jmp	$doafloat$472
$LN283@stbsp_vspr:
; Line 1088
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1089
	mov	DWORD PTR l$5[rsp], 0
$LN66@stbsp_vspr:
; Line 1093
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 8
	mov	QWORD PTR o$44[rsp], rax
; Line 1094
	cmp	QWORD PTR n64$11[rsp], 100000000	; 05f5e100H
	jb	SHORT $LN287@stbsp_vspr
; Line 1095
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1096
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	QWORD PTR n64$11[rsp], rax
; Line 1097
	jmp	SHORT $LN288@stbsp_vspr
$LN287@stbsp_vspr:
; Line 1098
	mov	eax, DWORD PTR n64$11[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1099
	mov	QWORD PTR n64$11[rsp], 0
$LN288@stbsp_vspr:
; Line 1101
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN289@stbsp_vspr
$LN71@stbsp_vspr:
; Line 1103
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 2
	mov	QWORD PTR s$4[rsp], rax
; Line 1104
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR s$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1105
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1106
	cmp	DWORD PTR n$3[rsp], 0
	jne	SHORT $LN71@stbsp_vspr
$LN289@stbsp_vspr:
$LN72@stbsp_vspr:
; Line 1108
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN73@stbsp_vspr
; Line 1109
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN290@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv922[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv922[rsp], 3
	jne	SHORT $LN290@stbsp_vspr
; Line 1110
	mov	DWORD PTR l$5[rsp], 0
; Line 1111
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1112
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1113
	jmp	SHORT $LN291@stbsp_vspr
$LN290@stbsp_vspr:
; Line 1114
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	eax, edx
	movsx	eax, al
	add	eax, 48					; 00000030H
	mov	rcx, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rcx], al
; Line 1115
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
$LN291@stbsp_vspr:
; Line 1117
	jmp	$LN72@stbsp_vspr
$LN73@stbsp_vspr:
; Line 1118
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN292@stbsp_vspr
; Line 1119
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN293@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN293@stbsp_vspr
; Line 1120
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN293@stbsp_vspr:
; Line 1121
	jmp	$LN67@stbsp_vspr
$LN292@stbsp_vspr:
$LN74@stbsp_vspr:
; Line 1123
	mov	rax, QWORD PTR o$44[rsp]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN75@stbsp_vspr
; Line 1124
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN294@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv945[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv945[rsp], 3
	jne	SHORT $LN294@stbsp_vspr
; Line 1125
	mov	DWORD PTR l$5[rsp], 0
; Line 1126
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1127
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1128
	jmp	SHORT $LN295@stbsp_vspr
$LN294@stbsp_vspr:
; Line 1129
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
$LN295@stbsp_vspr:
; Line 1130
	jmp	$LN74@stbsp_vspr
$LN75@stbsp_vspr:
; Line 1131
	jmp	$LN66@stbsp_vspr
$LN67@stbsp_vspr:
; Line 1133
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T60[rsp], rax
	cmp	QWORD PTR $T60[rsp], 8
	jae	SHORT $LN445@stbsp_vspr
	jmp	SHORT $LN446@stbsp_vspr
$LN445@stbsp_vspr:
	call	__report_rangecheckfailure
$LN446@stbsp_vspr:
	mov	rax, QWORD PTR $T60[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1134
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 1137
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1138
	cmp	DWORD PTR l$5[rsp], 0
	jne	SHORT $LN296@stbsp_vspr
; Line 1139
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1140
	mov	DWORD PTR l$5[rsp], 1
$LN296@stbsp_vspr:
; Line 1142
	mov	eax, DWORD PTR l$5[rsp]
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 1143
	cmp	DWORD PTR pr$2[rsp], 0
	jge	SHORT $LN297@stbsp_vspr
; Line 1144
	mov	DWORD PTR pr$2[rsp], 0
$LN297@stbsp_vspr:
$LN173@stbsp_vspr:
$LN175@stbsp_vspr:
$LN190@stbsp_vspr:
$LN212@stbsp_vspr:
$LN226@stbsp_vspr:
$LN255@stbsp_vspr:
$LN271@stbsp_vspr:
$LN275@stbsp_vspr:
$scopy$468:
; Line 1148
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jge	SHORT $LN298@stbsp_vspr
; Line 1149
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN298@stbsp_vspr:
; Line 1150
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsx	ecx, BYTE PTR tail$63[rsp+rcx]
	mov	edx, DWORD PTR tz$16[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1151
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jge	SHORT $LN299@stbsp_vspr
; Line 1152
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR fw$10[rsp], eax
$LN299@stbsp_vspr:
; Line 1153
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
; Line 1154
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1157
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN300@stbsp_vspr
; Line 1158
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN301@stbsp_vspr
; Line 1160
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jle	SHORT $LN447@stbsp_vspr
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR tv979[rsp], eax
	jmp	SHORT $LN448@stbsp_vspr
$LN447@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv979[rsp], eax
$LN448@stbsp_vspr:
	mov	eax, DWORD PTR tv979[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 1161
	mov	DWORD PTR fw$10[rsp], 0
; Line 1162
	jmp	SHORT $LN302@stbsp_vspr
$LN301@stbsp_vspr:
; Line 1163
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -65				; ffffffbfH
	mov	DWORD PTR fl$1[rsp], eax
$LN302@stbsp_vspr:
$LN300@stbsp_vspr:
; Line 1168
	mov	eax, DWORD PTR pr$2[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	$LN303@stbsp_vspr
; Line 1173
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN304@stbsp_vspr
$LN76@stbsp_vspr:
; Line 1174
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN77@stbsp_vspr
; Line 1175
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN305@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$35[rsp], eax
	mov	eax, DWORD PTR lg$35[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN306@stbsp_vspr
	mov	eax, DWORD PTR lg$35[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN306@stbsp_vspr:
$LN305@stbsp_vspr:
; Line 1176
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN78@stbsp_vspr:
; Line 1177
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN79@stbsp_vspr
; Line 1178
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN307@stbsp_vspr
; Line 1179
	jmp	SHORT $LN79@stbsp_vspr
$LN307@stbsp_vspr:
; Line 1180
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1181
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1182
	jmp	SHORT $LN78@stbsp_vspr
$LN79@stbsp_vspr:
$LN80@stbsp_vspr:
; Line 1183
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN81@stbsp_vspr
; Line 1184
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1185
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1186
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1187
	jmp	SHORT $LN80@stbsp_vspr
$LN81@stbsp_vspr:
$LN82@stbsp_vspr:
; Line 1188
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN83@stbsp_vspr
; Line 1189
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1191
	jmp	SHORT $LN82@stbsp_vspr
$LN83@stbsp_vspr:
; Line 1192
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN308@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$34[rsp], eax
	mov	eax, DWORD PTR len$34[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN309@stbsp_vspr
	mov	eax, DWORD PTR len$34[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$34[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN310@stbsp_vspr
	jmp	$LN311@stbsp_vspr
	jmp	$done$466
$LN310@stbsp_vspr:
$LN309@stbsp_vspr:
$LN308@stbsp_vspr:
; Line 1193
	jmp	$LN76@stbsp_vspr
$LN77@stbsp_vspr:
$LN304@stbsp_vspr:
; Line 1196
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN84@stbsp_vspr:
; Line 1197
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN85@stbsp_vspr
; Line 1198
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN312@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$36[rsp], eax
	mov	eax, DWORD PTR lg$36[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN313@stbsp_vspr
	mov	eax, DWORD PTR lg$36[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN313@stbsp_vspr:
$LN312@stbsp_vspr:
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$9[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN86@stbsp_vspr:
; Line 1200
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN87@stbsp_vspr
; Line 1201
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1202
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1203
	jmp	SHORT $LN86@stbsp_vspr
$LN87@stbsp_vspr:
; Line 1204
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN314@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$23[rsp], eax
	mov	eax, DWORD PTR len$23[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN315@stbsp_vspr
	mov	eax, DWORD PTR len$23[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$23[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN316@stbsp_vspr
	jmp	$LN317@stbsp_vspr
	jmp	$done$466
$LN316@stbsp_vspr:
$LN315@stbsp_vspr:
$LN314@stbsp_vspr:
; Line 1205
	jmp	$LN84@stbsp_vspr
$LN85@stbsp_vspr:
; Line 1208
	mov	eax, DWORD PTR cs$8[rsp]
	shr	eax, 24
	mov	DWORD PTR c$24[rsp], eax
; Line 1209
	mov	eax, DWORD PTR cs$8[rsp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR cs$8[rsp], eax
; Line 1210
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN449@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$24[rsp]
	inc	ecx
	xor	edx, edx
	div	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR c$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv1058[rsp], eax
	jmp	SHORT $LN450@stbsp_vspr
$LN449@stbsp_vspr:
	mov	DWORD PTR tv1058[rsp], 0
$LN450@stbsp_vspr:
	mov	eax, DWORD PTR tv1058[rsp]
	mov	DWORD PTR cs$8[rsp], eax
$LN88@stbsp_vspr:
; Line 1211
	cmp	DWORD PTR pr$2[rsp], 0
	jle	$LN89@stbsp_vspr
; Line 1212
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN318@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$37[rsp], eax
	mov	eax, DWORD PTR lg$37[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN319@stbsp_vspr
	mov	eax, DWORD PTR lg$37[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN319@stbsp_vspr:
$LN318@stbsp_vspr:
; Line 1213
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1214
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN320@stbsp_vspr
$LN90@stbsp_vspr:
; Line 1215
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN91@stbsp_vspr
; Line 1216
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN321@stbsp_vspr
; Line 1217
	jmp	SHORT $LN91@stbsp_vspr
$LN321@stbsp_vspr:
; Line 1218
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1219
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1220
	jmp	SHORT $LN90@stbsp_vspr
$LN91@stbsp_vspr:
$LN92@stbsp_vspr:
; Line 1221
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN93@stbsp_vspr
; Line 1222
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1223
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1224
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1225
	jmp	SHORT $LN92@stbsp_vspr
$LN93@stbsp_vspr:
$LN320@stbsp_vspr:
$LN94@stbsp_vspr:
; Line 1227
	cmp	DWORD PTR i$9[rsp], 0
	je	$LN95@stbsp_vspr
; Line 1228
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN322@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	DWORD PTR tv1081[rsp], eax
	mov	eax, DWORD PTR c$24[rsp]
	mov	DWORD PTR tv1082[rsp], eax
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	mov	eax, DWORD PTR tv1082[rsp]
	cmp	DWORD PTR tv1081[rsp], eax
	jne	SHORT $LN322@stbsp_vspr
; Line 1229
	mov	DWORD PTR cs$8[rsp], 0
; Line 1230
	mov	rax, QWORD PTR bf$[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1231
	jmp	SHORT $LN323@stbsp_vspr
$LN322@stbsp_vspr:
; Line 1232
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
$LN323@stbsp_vspr:
; Line 1233
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1234
	jmp	$LN94@stbsp_vspr
$LN95@stbsp_vspr:
; Line 1235
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN324@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$25[rsp], eax
	mov	eax, DWORD PTR len$25[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN325@stbsp_vspr
	mov	eax, DWORD PTR len$25[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$25[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN326@stbsp_vspr
	jmp	$LN327@stbsp_vspr
	jmp	$done$466
$LN326@stbsp_vspr:
$LN325@stbsp_vspr:
$LN324@stbsp_vspr:
; Line 1236
	jmp	$LN88@stbsp_vspr
$LN89@stbsp_vspr:
$LN303@stbsp_vspr:
; Line 1240
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN96@stbsp_vspr:
; Line 1241
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN97@stbsp_vspr
; Line 1243
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$18[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN328@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$43[rsp], eax
	mov	eax, DWORD PTR lg$43[rsp]
	cmp	DWORD PTR i$18[rsp], eax
	jle	SHORT $LN329@stbsp_vspr
	mov	eax, DWORD PTR lg$43[rsp]
	mov	DWORD PTR i$18[rsp], eax
$LN329@stbsp_vspr:
$LN328@stbsp_vspr:
; Line 1244
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$18[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN98@stbsp_vspr:
; Line 1245
	cmp	DWORD PTR i$18[rsp], 0
	je	SHORT $LN99@stbsp_vspr
; Line 1246
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1247
	mov	eax, DWORD PTR i$18[rsp]
	dec	eax
	mov	DWORD PTR i$18[rsp], eax
; Line 1248
	jmp	SHORT $LN98@stbsp_vspr
$LN99@stbsp_vspr:
; Line 1249
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN330@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$26[rsp], eax
	mov	eax, DWORD PTR len$26[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN331@stbsp_vspr
	mov	eax, DWORD PTR len$26[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$26[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN332@stbsp_vspr
	jmp	$LN333@stbsp_vspr
	jmp	$done$466
$LN332@stbsp_vspr:
$LN331@stbsp_vspr:
$LN330@stbsp_vspr:
; Line 1250
	jmp	$LN96@stbsp_vspr
$LN97@stbsp_vspr:
; Line 1253
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN100@stbsp_vspr:
; Line 1254
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN101@stbsp_vspr
; Line 1256
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$17[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN334@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$38[rsp], eax
	mov	eax, DWORD PTR lg$38[rsp]
	cmp	DWORD PTR i$17[rsp], eax
	jle	SHORT $LN335@stbsp_vspr
	mov	eax, DWORD PTR lg$38[rsp]
	mov	DWORD PTR i$17[rsp], eax
$LN335@stbsp_vspr:
$LN334@stbsp_vspr:
; Line 1257
	mov	eax, DWORD PTR i$17[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
$LN102@stbsp_vspr:
; Line 1258
	cmp	DWORD PTR i$17[rsp], 4
	jl	SHORT $LN103@stbsp_vspr
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR i$17[rsp]
	sub	eax, 4
	mov	DWORD PTR i$17[rsp], eax
	jmp	SHORT $LN102@stbsp_vspr
$LN103@stbsp_vspr:
$LN104@stbsp_vspr:
; Line 1264
	cmp	DWORD PTR i$17[rsp], 0
	je	SHORT $LN105@stbsp_vspr
; Line 1265
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 1266
	mov	eax, DWORD PTR i$17[rsp]
	dec	eax
	mov	DWORD PTR i$17[rsp], eax
; Line 1267
	jmp	SHORT $LN104@stbsp_vspr
$LN105@stbsp_vspr:
; Line 1268
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN336@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$27[rsp], eax
	mov	eax, DWORD PTR len$27[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN337@stbsp_vspr
	mov	eax, DWORD PTR len$27[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$27[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN338@stbsp_vspr
	jmp	$LN339@stbsp_vspr
	jmp	$done$466
$LN338@stbsp_vspr:
$LN337@stbsp_vspr:
$LN336@stbsp_vspr:
; Line 1269
	jmp	$LN100@stbsp_vspr
$LN101@stbsp_vspr:
$LN106@stbsp_vspr:
; Line 1272
	cmp	DWORD PTR tz$16[rsp], 0
	je	$LN107@stbsp_vspr
; Line 1274
	mov	eax, DWORD PTR tz$16[rsp]
	mov	DWORD PTR i$14[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN340@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$39[rsp], eax
	mov	eax, DWORD PTR lg$39[rsp]
	cmp	DWORD PTR i$14[rsp], eax
	jle	SHORT $LN341@stbsp_vspr
	mov	eax, DWORD PTR lg$39[rsp]
	mov	DWORD PTR i$14[rsp], eax
$LN341@stbsp_vspr:
$LN340@stbsp_vspr:
; Line 1275
	mov	eax, DWORD PTR i$14[rsp]
	mov	ecx, DWORD PTR tz$16[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN108@stbsp_vspr:
; Line 1276
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN109@stbsp_vspr
; Line 1277
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN342@stbsp_vspr
; Line 1278
	jmp	SHORT $LN109@stbsp_vspr
$LN342@stbsp_vspr:
; Line 1279
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1280
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1281
	jmp	SHORT $LN108@stbsp_vspr
$LN109@stbsp_vspr:
$LN110@stbsp_vspr:
; Line 1282
	cmp	DWORD PTR i$14[rsp], 4
	jl	SHORT $LN111@stbsp_vspr
; Line 1283
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1284
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1285
	mov	eax, DWORD PTR i$14[rsp]
	sub	eax, 4
	mov	DWORD PTR i$14[rsp], eax
; Line 1286
	jmp	SHORT $LN110@stbsp_vspr
$LN111@stbsp_vspr:
$LN112@stbsp_vspr:
; Line 1287
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN113@stbsp_vspr
; Line 1288
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1289
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1290
	jmp	SHORT $LN112@stbsp_vspr
$LN113@stbsp_vspr:
; Line 1291
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN343@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$28[rsp], eax
	mov	eax, DWORD PTR len$28[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN344@stbsp_vspr
	mov	eax, DWORD PTR len$28[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$28[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN345@stbsp_vspr
	jmp	$LN346@stbsp_vspr
	jmp	$done$466
$LN345@stbsp_vspr:
$LN344@stbsp_vspr:
$LN343@stbsp_vspr:
; Line 1292
	jmp	$LN106@stbsp_vspr
$LN107@stbsp_vspr:
; Line 1295
	lea	rax, QWORD PTR tail$63[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN114@stbsp_vspr:
; Line 1296
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	test	eax, eax
	je	$LN115@stbsp_vspr
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	mov	DWORD PTR i$19[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN347@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$40[rsp], eax
	mov	eax, DWORD PTR lg$40[rsp]
	cmp	DWORD PTR i$19[rsp], eax
	jle	SHORT $LN348@stbsp_vspr
	mov	eax, DWORD PTR lg$40[rsp]
	mov	DWORD PTR i$19[rsp], eax
$LN348@stbsp_vspr:
$LN347@stbsp_vspr:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$19[rsp]
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR tail$63[rsp+rcx], al
$LN116@stbsp_vspr:
; Line 1300
	cmp	DWORD PTR i$19[rsp], 0
	je	SHORT $LN117@stbsp_vspr
; Line 1301
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1302
	mov	eax, DWORD PTR i$19[rsp]
	dec	eax
	mov	DWORD PTR i$19[rsp], eax
; Line 1303
	jmp	SHORT $LN116@stbsp_vspr
$LN117@stbsp_vspr:
; Line 1304
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN349@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$29[rsp], eax
	mov	eax, DWORD PTR len$29[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN350@stbsp_vspr
	mov	eax, DWORD PTR len$29[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$29[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN351@stbsp_vspr
	jmp	$LN352@stbsp_vspr
	jmp	$done$466
$LN351@stbsp_vspr:
$LN350@stbsp_vspr:
$LN349@stbsp_vspr:
; Line 1305
	jmp	$LN114@stbsp_vspr
$LN115@stbsp_vspr:
; Line 1308
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	je	$LN353@stbsp_vspr
; Line 1309
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN354@stbsp_vspr
$LN118@stbsp_vspr:
; Line 1310
	cmp	DWORD PTR fw$10[rsp], 0
	je	$LN119@stbsp_vspr
; Line 1312
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$15[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN355@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$41[rsp], eax
	mov	eax, DWORD PTR lg$41[rsp]
	cmp	DWORD PTR i$15[rsp], eax
	jle	SHORT $LN356@stbsp_vspr
	mov	eax, DWORD PTR lg$41[rsp]
	mov	DWORD PTR i$15[rsp], eax
$LN356@stbsp_vspr:
$LN355@stbsp_vspr:
; Line 1313
	mov	eax, DWORD PTR i$15[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN120@stbsp_vspr:
; Line 1314
	cmp	DWORD PTR i$15[rsp], 0
	je	SHORT $LN121@stbsp_vspr
; Line 1315
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN357@stbsp_vspr
; Line 1316
	jmp	SHORT $LN121@stbsp_vspr
$LN357@stbsp_vspr:
; Line 1317
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1318
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
; Line 1319
	jmp	SHORT $LN120@stbsp_vspr
$LN121@stbsp_vspr:
$LN122@stbsp_vspr:
; Line 1320
	cmp	DWORD PTR i$15[rsp], 4
	jl	SHORT $LN123@stbsp_vspr
; Line 1321
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1322
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1323
	mov	eax, DWORD PTR i$15[rsp]
	sub	eax, 4
	mov	DWORD PTR i$15[rsp], eax
; Line 1324
	jmp	SHORT $LN122@stbsp_vspr
$LN123@stbsp_vspr:
$LN124@stbsp_vspr:
; Line 1325
	mov	eax, DWORD PTR i$15[rsp]
	mov	DWORD PTR tv1277[rsp], eax
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
	cmp	DWORD PTR tv1277[rsp], 0
	je	SHORT $LN125@stbsp_vspr
; Line 1326
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	jmp	SHORT $LN124@stbsp_vspr
$LN125@stbsp_vspr:
; Line 1327
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN358@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$30[rsp], eax
	mov	eax, DWORD PTR len$30[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN359@stbsp_vspr
	mov	eax, DWORD PTR len$30[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$30[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN360@stbsp_vspr
	jmp	$LN361@stbsp_vspr
	jmp	$done$466
$LN360@stbsp_vspr:
$LN359@stbsp_vspr:
$LN358@stbsp_vspr:
; Line 1328
	jmp	$LN118@stbsp_vspr
$LN119@stbsp_vspr:
$LN354@stbsp_vspr:
$LN353@stbsp_vspr:
; Line 1330
	jmp	$LN24@stbsp_vspr
$LN362@stbsp_vspr:
; Line 1333
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 1334
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1335
	mov	DWORD PTR l$5[rsp], 1
; Line 1336
	mov	DWORD PTR fl$1[rsp], 0
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fw$10[rsp], eax
; Line 1337
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T47[rsp], rax
	cmp	QWORD PTR $T47[rsp], 8
	jae	SHORT $LN451@stbsp_vspr
	jmp	SHORT $LN452@stbsp_vspr
$LN451@stbsp_vspr:
	call	__report_rangecheckfailure
$LN452@stbsp_vspr:
	mov	rax, QWORD PTR $T47[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1338
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T48[rsp], rax
	cmp	QWORD PTR $T48[rsp], 8
	jae	SHORT $LN453@stbsp_vspr
	jmp	SHORT $LN454@stbsp_vspr
$LN453@stbsp_vspr:
	call	__report_rangecheckfailure
$LN454@stbsp_vspr:
	mov	rax, QWORD PTR $T48[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1339
	mov	DWORD PTR pr$2[rsp], 0
; Line 1340
	mov	DWORD PTR dp$6[rsp], 0
; Line 1341
	mov	DWORD PTR cs$8[rsp], 0
; Line 1342
	jmp	$scopy$468
$LN24@stbsp_vspr:
; Line 1344
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 1345
	jmp	$LN2@stbsp_vspr
$LN129@stbsp_vspr:
$endfmt$465:
; Line 1348
	cmp	QWORD PTR callback$[rsp], 0
	jne	SHORT $LN363@stbsp_vspr
; Line 1349
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 0
	jmp	SHORT $LN364@stbsp_vspr
$LN363@stbsp_vspr:
; Line 1351
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$31[rsp], eax
	mov	eax, DWORD PTR len$31[rsp]
	add	eax, 511				; 000001ffH
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN365@stbsp_vspr
	mov	eax, DWORD PTR len$31[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$31[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
$LN365@stbsp_vspr:
$LN364@stbsp_vspr:
$LN133@stbsp_vspr:
$LN311@stbsp_vspr:
$LN317@stbsp_vspr:
$LN327@stbsp_vspr:
$LN333@stbsp_vspr:
$LN339@stbsp_vspr:
$LN346@stbsp_vspr:
$LN352@stbsp_vspr:
$LN361@stbsp_vspr:
$done$466:
; Line 1354
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
$LN368@stbsp_vspr:
; Line 1355
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1208				; 000004b8H
	ret	0
$LN460@stbsp_vspr:
	DD	$LN140@stbsp_vspr
	DD	$LN141@stbsp_vspr
	DD	$LN143@stbsp_vspr
	DD	$LN142@stbsp_vspr
	DD	$LN139@stbsp_vspr
	DD	$LN138@stbsp_vspr
	DD	$LN149@stbsp_vspr
	DD	$LN148@stbsp_vspr
	DD	$LN151@stbsp_vspr
$LN459@stbsp_vspr:
	DB	0
	DB	8
	DB	8
	DB	1
	DB	2
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	5
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
$LN458@stbsp_vspr:
	DD	$LN165@stbsp_vspr
	DD	$LN158@stbsp_vspr
	DD	$LN162@stbsp_vspr
	DD	$LN160@stbsp_vspr
	DD	$LN164@stbsp_vspr
	DD	$LN163@stbsp_vspr
	DD	$LN170@stbsp_vspr
$LN457@stbsp_vspr:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	npad	2
$LN456@stbsp_vspr:
	DD	$LN177@stbsp_vspr
	DD	$LN256@stbsp_vspr
	DD	$LN207@stbsp_vspr
	DD	$LN191@stbsp_vspr
	DD	$LN264@stbsp_vspr
	DD	$LN178@stbsp_vspr
	DD	$LN257@stbsp_vspr
	DD	$LN174@stbsp_vspr
	DD	$LN278@stbsp_vspr
	DD	$LN208@stbsp_vspr
	DD	$LN219@stbsp_vspr
	DD	$LN192@stbsp_vspr
	DD	$LN277@stbsp_vspr
	DD	$LN176@stbsp_vspr
	DD	$LN260@stbsp_vspr
	DD	$LN263@stbsp_vspr
	DD	$LN171@stbsp_vspr
	DD	$LN276@stbsp_vspr
	DD	$LN265@stbsp_vspr
	DD	$LN362@stbsp_vspr
$LN455@stbsp_vspr:
	DB	0
	DB	1
	DB	19
	DB	19
	DB	2
	DB	19
	DB	3
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	4
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	19
	DB	12
	DB	19
	DB	19
	DB	19
	DB	19
	DB	13
	DB	14
	DB	15
	DB	19
	DB	19
	DB	16
	DB	19
	DB	17
	DB	19
	DB	19
	DB	18
stbsp_vsprintfcb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
va$ = 40
buf$ = 64
count$ = 72
fmt$ = 80
stbsp_snprintf PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1461
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1464
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1466
	mov	r9, QWORD PTR va$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR count$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
	mov	DWORD PTR result$[rsp], eax
; Line 1467
	mov	QWORD PTR va$[rsp], 0
; Line 1469
	mov	eax, DWORD PTR result$[rsp]
; Line 1470
	add	rsp, 56					; 00000038H
	ret	0
stbsp_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
va$ = 56
buf$ = 80
fmt$ = 88
stbsp_sprintf PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1377
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 1380
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1381
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
	mov	DWORD PTR result$[rsp], eax
; Line 1382
	mov	QWORD PTR va$[rsp], 0
; Line 1383
	mov	eax, DWORD PTR result$[rsp]
; Line 1384
	add	rsp, 72					; 00000048H
	ret	0
stbsp_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$1 = 48
c$ = 64
__$ArrayPad$ = 592
buf$ = 624
count$ = 632
fmt$ = 640
va$ = 648
stbsp_vsnprintf PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1431
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 616				; 00000268H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1434
	cmp	DWORD PTR count$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
	cmp	QWORD PTR buf$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
; Line 1436
	mov	DWORD PTR c$[rsp+12], 0
; Line 1438
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	lea	r8, QWORD PTR c$[rsp+16]
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__count_clamp_callback
	call	stbsp_vsprintfcb
; Line 1439
	jmp	$LN3@stbsp_vsnp
$LN2@stbsp_vsnp:
; Line 1444
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1445
	mov	eax, DWORD PTR count$[rsp]
	mov	DWORD PTR c$[rsp+8], eax
; Line 1446
	mov	DWORD PTR c$[rsp+12], 0
; Line 1448
	xor	r8d, r8d
	lea	rdx, QWORD PTR c$[rsp]
	xor	ecx, ecx
	call	stbsp__clamp_callback
	mov	rcx, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__clamp_callback
	call	stbsp_vsprintfcb
; Line 1451
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$1[rsp], eax
; Line 1452
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR l$1[rsp], eax
	jl	SHORT $LN4@stbsp_vsnp
; Line 1453
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	DWORD PTR l$1[rsp], eax
$LN4@stbsp_vsnp:
; Line 1454
	movsxd	rax, DWORD PTR l$1[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN3@stbsp_vsnp:
; Line 1457
	mov	eax, DWORD PTR c$[rsp+12]
; Line 1458
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 616				; 00000268H
	ret	0
stbsp_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
va$ = 80
stbsp_vsprintf PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1473
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1474
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1475
	add	rsp, 56					; 00000038H
	ret	0
stbsp_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 32
t$ = 64
ccclocksecs PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 14
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 15
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 16
	mov	rax, QWORD PTR t$[rsp]
	test	rax, rax
	jl	SHORT $LN3@ccclocksec
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN4@ccclocksec
$LN3@ccclocksec:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN4@ccclocksec:
	cvtsi2sd xmm1, QWORD PTR l$[rsp]
	divsd	xmm0, xmm1
; Line 17
	add	rsp, 56					; 00000038H
	ret	0
ccclocksecs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 32
ccclocktick PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 8
	sub	rsp, 56					; 00000038H
; Line 9
	lea	rcx, QWORD PTR l$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 10
	mov	rax, QWORD PTR l$[rsp]
; Line 11
	add	rsp, 56					; 00000038H
	ret	0
ccclocktick ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccfilesize PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 26
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_GetFileSize
; Line 27
	add	rsp, 40					; 00000028H
	ret	0
ccfilesize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file_size$ = 48
file$ = 80
offset$ = 88
length$ = 96
file_data$ = 104
ccpushfile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 56
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN2@ccpushfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpushfile
$LN2@ccpushfile:
; Line 58
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfilesize
	mov	DWORD PTR file_size$[rsp], eax
; Line 59
	mov	eax, DWORD PTR offset$[rsp]
	cmp	DWORD PTR file_size$[rsp], eax
	jae	SHORT $LN3@ccpushfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpushfile
$LN3@ccpushfile:
; Line 60
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR file_data$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_WriteFile
	test	eax, eax
	jne	SHORT $LN4@ccpushfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpushfile
$LN4@ccpushfile:
; Line 61
	mov	eax, DWORD PTR length$[rsp]
$LN1@ccpushfile:
; Line 62
	add	rsp, 72					; 00000048H
	ret	0
ccpushfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$ = 48
tv70 = 52
file_size$ = 56
file_data$ = 64
file$ = 96
offset$ = 104
lplength$ = 112
ccpullfile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 42
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN2@ccpullfile
	xor	eax, eax
	jmp	$LN1@ccpullfile
$LN2@ccpullfile:
; Line 44
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfilesize
	mov	DWORD PTR file_size$[rsp], eax
; Line 45
	cmp	QWORD PTR lplength$[rsp], 0
	je	SHORT $LN8@ccpullfile
	mov	rax, QWORD PTR lplength$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN9@ccpullfile
$LN8@ccpullfile:
	mov	DWORD PTR tv70[rsp], 0
$LN9@ccpullfile:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR length$[rsp], eax
; Line 46
	mov	eax, DWORD PTR length$[rsp]
	mov	ecx, DWORD PTR offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR file_size$[rsp], eax
	jae	SHORT $LN3@ccpullfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpullfile
$LN3@ccpullfile:
; Line 47
	cmp	DWORD PTR length$[rsp], 0
	jne	SHORT $LN4@ccpullfile
	mov	eax, DWORD PTR file_size$[rsp]
	mov	DWORD PTR length$[rsp], eax
$LN4@ccpullfile:
; Line 48
	mov	eax, DWORD PTR length$[rsp]
	mov	r9d, 48					; 00000030H
	lea	r8, OFFSET FLAT:$SG46639
	lea	rdx, OFFSET FLAT:$SG46640
	mov	ecx, eax
	call	ccmalloc_
	mov	QWORD PTR file_data$[rsp], rax
; Line 49
	cmp	QWORD PTR lplength$[rsp], 0
	jne	SHORT $LN5@ccpullfile
	lea	rax, QWORD PTR length$[rsp]
	mov	QWORD PTR lplength$[rsp], rax
$LN5@ccpullfile:
; Line 50
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR lplength$[rsp]
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR file_data$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	jne	SHORT $LN6@ccpullfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpullfile
$LN6@ccpullfile:
; Line 51
	mov	rax, QWORD PTR file_data$[rsp]
$LN1@ccpullfile:
; Line 52
	add	rsp, 88					; 00000058H
	ret	0
ccpullfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 64
tv75 = 72
name$ = 96
ccopenfile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 36
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 4
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, -1073741824			; c0000000H
	mov	rcx, QWORD PTR name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR file$[rsp], rax
; Line 37
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	je	SHORT $LN3@ccopenfile
	mov	rax, QWORD PTR file$[rsp]
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN4@ccopenfile
$LN3@ccopenfile:
	mov	QWORD PTR tv75[rsp], 0
$LN4@ccopenfile:
	mov	rax, QWORD PTR tv75[rsp]
; Line 38
	add	rsp, 88					; 00000058H
	ret	0
ccopenfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccclosefile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 31
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 32
	add	rsp, 40					; 00000028H
	ret	0
ccclosefile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
file$ = 32
ccrealfile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 21
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	cmp	QWORD PTR file$[rsp], -1
	je	SHORT $LN3@ccrealfile
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@ccrealfile
$LN3@ccrealfile:
	mov	DWORD PTR tv65[rsp], 0
$LN4@ccrealfile:
	mov	eax, DWORD PTR tv65[rsp]
; Line 22
	add	rsp, 24
	ret	0
ccrealfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
file$ = 56
func$ = 64
line$ = 72
ccfree_	PROC
; File W:\cpp\void\ktt-c\cc.c
; Line 237
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 238
	mov	rcx, QWORD PTR data$[rsp]
	call	_CrtIsValidHeapPointer
	test	eax, eax
	jne	SHORT $LN3@ccfree_
	int	3
$LN3@ccfree_:
; Line 240
	mov	edx, 4
	mov	rcx, QWORD PTR data$[rsp]
	call	_free_dbg
; Line 241
	add	rsp, 40					; 00000028H
	ret	0
ccfree_	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mem$ = 48
data$ = 80
size$ = 88
file$ = 96
func$ = 104
line$ = 112
ccrealloc_ PROC
; File W:\cpp\void\ktt-c\cc.c
; Line 232
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 233
	mov	eax, DWORD PTR line$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR file$[rsp]
	mov	r8d, 4
	mov	rdx, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	_realloc_dbg
	mov	QWORD PTR mem$[rsp], rax
; Line 234
	mov	rax, QWORD PTR mem$[rsp]
; Line 235
	add	rsp, 72					; 00000048H
	ret	0
ccrealloc_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mem$ = 32
size$ = 64
file$ = 72
func$ = 80
line$ = 88
ccmalloc_ PROC
; File W:\cpp\void\ktt-c\cc.c
; Line 221
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 227
	mov	r9d, DWORD PTR line$[rsp]
	mov	r8, QWORD PTR file$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR size$[rsp]
	call	_malloc_dbg
	mov	QWORD PTR mem$[rsp], rax
; Line 228
	mov	rax, QWORD PTR mem$[rsp]
; Line 229
	add	rsp, 56					; 00000038H
	ret	0
ccmalloc_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 64
rem$ = 68
vli$ = 72
guid$ = 96
file$ = 104
line$ = 112
func$ = 120
tag$ = 128
fmt$ = 136
cctrace_ PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 66
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H
; Line 70
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 73
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 255				; 000000ffH
	lea	rcx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	call	ccformatvex
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 74
	movsxd	rax, DWORD PTR len$[rsp]
	mov	ecx, 4095				; 00000fffH
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR rem$[rsp], eax
; Line 75
	movsxd	rax, DWORD PTR len$[rsp]
	lea	rcx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	add	rcx, rax
	mov	rax, rcx
	lea	rcx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR func$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	ecx, DWORD PTR line$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, QWORD PTR file$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR tag$[rsp]
	lea	r8, OFFSET FLAT:$SG46294
	mov	edx, DWORD PTR rem$[rsp]
	mov	rcx, rax
	call	ccformatex
; Line 76
	movsxd	rax, DWORD PTR len$[rsp]
	lea	rcx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ccout
; Line 78
	mov	QWORD PTR vli$[rsp], 0
; Line 79
	add	rsp, 88					; 00000058H
	ret	0
cctrace_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	ecx, 1
	call	__acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END

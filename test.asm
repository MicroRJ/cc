; Listing generated by Microsoft (R) Optimizing Compiler Version 19.34.31937.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	ccvm_instr_S
PUBLIC	ccvm_value_S
_DATA	SEGMENT
ccvm_instr_S DQ	FLAT:$SG48026
	DQ	FLAT:$SG48027
	DQ	FLAT:$SG48028
	DQ	FLAT:$SG48029
	DQ	FLAT:$SG48030
	DQ	FLAT:$SG48031
	DQ	FLAT:$SG48032
	DQ	FLAT:$SG48033
	DQ	FLAT:$SG48034
ccvm_value_S DQ	FLAT:$SG48036
	DQ	FLAT:$SG48037
	DQ	FLAT:$SG48038
	DQ	FLAT:$SG48039
_DATA	ENDS
CONST	SEGMENT
$SG44070 DB	'null', 00H
$SG48049 DB	00H
	ORG $+2
$SG44152 DB	'_KMGT', 00H
	ORG $+2
$SG44153 DB	'_kMGT', 00H
	ORG $+2
$SG44685 DB	'NaN', 00H
	ORG $+4
stbsp__bot DQ	03ff0000000000000r		; 1
	DQ	04024000000000000r		; 10
	DQ	04059000000000000r		; 100
	DQ	0408f400000000000r		; 1000
	DQ	040c3880000000000r		; 10000
	DQ	040f86a0000000000r		; 100000
	DQ	0412e848000000000r		; 1e+06
	DQ	0416312d000000000r		; 1e+07
	DQ	04197d78400000000r		; 1e+08
	DQ	041cdcd6500000000r		; 1e+09
	DQ	04202a05f20000000r		; 1e+10
	DQ	042374876e8000000r		; 1e+11
	DQ	0426d1a94a2000000r		; 1e+12
	DQ	042a2309ce5400000r		; 1e+13
	DQ	042d6bcc41e900000r		; 1e+14
	DQ	0430c6bf526340000r		; 1e+15
	DQ	04341c37937e08000r		; 1e+16
	DQ	04376345785d8a000r		; 1e+17
	DQ	043abc16d674ec800r		; 1e+18
	DQ	043e158e460913d00r		; 1e+19
	DQ	04415af1d78b58c40r		; 1e+20
	DQ	0444b1ae4d6e2ef50r		; 1e+21
	DQ	04480f0cf064dd592r		; 1e+22
$SG44686 DB	'Inf', 00H
	ORG $+4
stbsp__negbot DQ 03fb999999999999ar		; 0.1
	DQ	03f847ae147ae147br		; 0.01
	DQ	03f50624dd2f1a9fcr		; 0.001
	DQ	03f1a36e2eb1c432dr		; 0.0001
	DQ	03ee4f8b588e368f1r		; 1e-05
	DQ	03eb0c6f7a0b5ed8dr		; 1e-06
	DQ	03e7ad7f29abcaf48r		; 1e-07
	DQ	03e45798ee2308c3ar		; 1e-08
	DQ	03e112e0be826d695r		; 1e-09
	DQ	03ddb7cdfd9d7bdbbr		; 1e-10
	DQ	03da5fd7fe1796495r		; 1e-11
	DQ	03d719799812dea11r		; 1e-12
	DQ	03d3c25c268497682r		; 1e-13
	DQ	03d06849b86a12b9br		; 1e-14
	DQ	03cd203af9ee75616r		; 1e-15
	DQ	03c9cd2b297d889bcr		; 1e-16
	DQ	03c670ef54646d497r		; 1e-17
	DQ	03c32725dd1d243acr		; 1e-18
	DQ	03bfd83c94fb6d2acr		; 1e-19
	DQ	03bc79ca10c924223r		; 1e-20
	DQ	03b92e3b40a0e9b4fr		; 1e-21
	DQ	03b5e392010175ee6r		; 1e-22
stbsp__negboterr DQ 0bc5999999999999ar		; -5.55112e-18
	DQ	0bc0eb851eb851eb8r		; -2.08167e-19
	DQ	0bbd89374bc6a7efar		; -2.08167e-20
	DQ	0bbb6a161e4f765fer		; -4.79217e-21
	DQ	0bb8ee78183f91e64r		; -8.18031e-22
	DQ	03b4b5a63f9a49c2cr		; 4.52519e-23
	DQ	03b15e1e99483b023r		; 4.52519e-24
	DQ	0bad03023df2d4c94r		; -2.09226e-25
	DQ	0bab34674bfabb83br		; -6.22816e-26
	DQ	0ba720a5465df8d2cr		; -3.64322e-27
	DQ	03a47f7bc7b4d28aar		; 6.0503e-28
	DQ	039f97f27f0f6e886r		; 2.01134e-29
	DQ	0b9cecd79a5a0df95r		; -3.03737e-30
	DQ	0394ea70909833de7r		; 1.18069e-32
	DQ	0b97937831647f5a0r		; -7.77054e-32
	DQ	03925b4c2ebe68799r		; 2.09022e-33
	DQ	0b90db7b2080a3029r		; -7.15424e-34
	DQ	0b8d7c628066e8ceer		; -7.15424e-35
	DQ	0388a52b31e9e3d07r		; 2.47541e-36
	DQ	038675447a5d8e536r		; 5.48467e-37
	DQ	0383f769fb7e0b75er		; 9.24625e-38
	DQ	0b7fa7566d9cba769r		; -4.85968e-39
stbsp__top DQ	044b52d02c7e14af6r		; 1e+23
	DQ	0497c06a5ec5433c6r		; 1e+46
	DQ	04e428bc8abe49f64r		; 1e+69
	DQ	053088ba3bf284e24r		; 1e+92
	DQ	057d03e29f5c2b18cr		; 1e+115
	DQ	05c957f48bb41db7cr		; 1e+138
	DQ	0615c73892ecbfbf4r		; 1e+161
	DQ	06622d3d6f88f0b3dr		; 1e+184
	DQ	06ae8eb0138858d0ar		; 1e+207
	DQ	06fb07d457124123dr		; 1e+230
	DQ	07475d2ce55747a18r		; 1e+253
	DQ	0793ce2137f743382r		; 1e+276
	DQ	07e031cfd3999f7b0r		; 1e+299
$SG44713 DB	0dH, 0aH, 00H
	ORG $+5
stbsp__negtop DQ 03b282db34012b251r		; 1e-23
	DQ	0366244ce242c5561r		; 1e-46
	DQ	0319b9b6364f30304r		; 1e-69
	DQ	02cd4dbf7b3f71cb7r		; 1e-92
	DQ	0280f8587e7083e30r		; 1e-115
	DQ	02347d12a4670c123r		; 1e-138
	DQ	01e81fee341fc585dr		; 1e-161
	DQ	019bb31bb5dc320d2r		; 1e-184
	DQ	014f48c22ca71a1bdr		; 1e-207
	DQ	0102f0ce4839198dbr		; 1e-230
	DQ	00b677603725064a8r		; 1e-253
	DQ	006a1ba03f5b21000r		; 1e-276
	DQ	001dac9a7b3b7302fr		; 1e-299
$SG44774 DB	'%s: %s[%i] %s() %s', 0aH, 00H
	ORG $+4
stbsp__toperr DQ 04160000000000000r		; 8.38861e+06
	DQ	045ebb542c80deb40r		; 6.86018e+28
	DQ	0cae83b80b9aab60ar		; -7.25314e+52
	DQ	0cfa32e22d17a166cr		; -4.33773e+75
	DQ	0d4523606902e180er		; -1.55594e+98
	DQ	0d9296fb782462e87r		; -3.28416e+121
	DQ	0ddf358952c0bd011r		; -3.77459e+144
	DQ	0e2a78c1376a34b6cr		; -1.73567e+167
	DQ	0e7817569fc243adfr		; -3.88936e+190
	DQ	0ec5d9365a897aaa6r		; -9.95664e+213
	DQ	07119050c256123a0r		; 6.36413e+236
	DQ	0f5db1799d76cc7a6r		; -5.20691e+259
	DQ	0faa213fe39571a38r		; -5.25048e+282
$SG44996 DB	'%c%i', 00H
	ORG $+3
stbsp__negtoperr DQ 037c13badb829e079r		; 3.95653e-40
	DQ	0b2ee46a98d3d9f64r		; -2.2999e-63
	DQ	02e3227c7218a2b65r		; 3.65062e-86
	DQ	02951d96999aa01e9r		; 1.18752e-109
	DQ	0a4acc2229efc3962r		; -5.06449e-132
	DQ	09fecd04a2263407ar		; -6.71568e-155
	DQ	09b123b80f187a157r		; -2.81208e-178
	DQ	0965c4e22914ed912r		; -5.77789e-201
	DQ	0119bc296cdf42f82r		; 7.49971e-224
	DQ	08cc9f9e7f4e16fe1r		; -4.64397e-247
	DQ	0880aeb0a72a8902ar		; -6.36911e-270
	DQ	0834e228e12c13408r		; -9.43681e-293
	DQ	00000000000fa1259r		; 8.09709e-317
$SG44998 DB	'%c%i', 00H
	ORG $+3
stbsp__powten DQ 0000000000000001H
	DQ	000000000000000aH
	DQ	0000000000000064H
	DQ	00000000000003e8H
	DQ	0000000000002710H
	DQ	00000000000186a0H
	DQ	00000000000f4240H
	DQ	0000000000989680H
	DQ	0000000005f5e100H
	DQ	000000003b9aca00H
	DQ	00000002540be400H
	DQ	000000174876e800H
	DQ	000000e8d4a51000H
	DQ	000009184e72a000H
	DQ	00005af3107a4000H
	DQ	00038d7ea4c68000H
	DQ	002386f26fc10000H
	DQ	016345785d8a0000H
	DQ	0de0b6b3a7640000H
	DQ	8ac7230489e80000H
$SG44994 DB	'little_string%c', 00H
$SG45000 DB	'%c%i', 00H
	ORG $+3
$SG45002 DB	'%c%i', 00H
	ORG $+3
$SG45004 DB	'%c%i', 00H
	ORG $+3
$SG45006 DB	'%c%i', 00H
	ORG $+3
$SG45697 DB	'keitt::f32', 00H
	ORG $+1
$SG45911 DB	'ptr', 00H
$SG45726 DB	'keitt::f64', 00H
	ORG $+1
$SG45916 DB	'arr', 00H
$SG45731 DB	'keitt::i64', 00H
	ORG $+1
$SG45922 DB	'fun', 00H
$SG45736 DB	'keitt::i32', 00H
	ORG $+1
$SG46083 DB	'err', 00H
$SG45741 DB	'keitt::i16', 00H
	ORG $+1
$SG46167 DB	'int', 00H
$SG45746 DB	'keitt::i8', 00H
	ORG $+2
$SG46156 DB	'inline', 00H
	ORG $+1
$SG46183 DB	'if', 00H
	ORG $+1
$SG45751 DB	'keitt::u64', 00H
	ORG $+1
$SG46188 DB	'for', 00H
$SG45756 DB	'keitt::u32', 00H
	ORG $+1
$SG46190 DB	'do', 00H
	ORG $+1
$SG45761 DB	'keitt::u16', 00H
	ORG $+1
$SG46504 DB	'err', 00H
$SG45766 DB	'keitt::u8', 00H
	ORG $+2
$SG46158 DB	'signed', 00H
	ORG $+1
$SG46520 DB	'err', 00H
$SG45771 DB	'keitt::void', 00H
$SG46527 DB	'err', 00H
$SG46082 DB	'invalid key, already in hash table', 00H
	ORG $+1
$SG46569 DB	'err', 00H
$SG46084 DB	'cclex_hashonly', 00H
	ORG $+1
$SG46085 DB	'W:\cpp\void\ktt-c\cclex.c', 00H
	ORG $+2
$SG46142 DB	'__asm', 00H
	ORG $+2
$SG46160 DB	'__int8', 00H
	ORG $+1
$SG46667 DB	'err', 00H
$SG46143 DB	'__based', 00H
$SG46144 DB	'__cdecl', 00H
$SG46145 DB	'__clrcall', 00H
	ORG $+2
$SG46164 DB	'double', 00H
	ORG $+1
$SG46726 DB	'err', 00H
$SG46146 DB	'__fastcall', 00H
	ORG $+1
$SG46732 DB	'err', 00H
$SG46147 DB	'__inline', 00H
	ORG $+3
$SG46153 DB	'const', 00H
	ORG $+2
$SG46175 DB	'struct', 00H
	ORG $+1
$SG46742 DB	'err', 00H
$SG46148 DB	'__stdcall', 00H
	ORG $+2
$SG46178 DB	'extern', 00H
	ORG $+1
$SG46753 DB	'err', 00H
$SG46149 DB	'__thiscall', 00H
	ORG $+1
$SG46769 DB	'err', 00H
$SG46150 DB	'__vectorcal', 00H
$SG46774 DB	'war', 00H
$SG46151 DB	'_Alignof', 00H
	ORG $+3
$SG46165 DB	'float', 00H
	ORG $+2
$SG46180 DB	'static', 00H
	ORG $+1
$SG46779 DB	'war', 00H
$SG46152 DB	'_Alignas', 00H
	ORG $+3
$SG46168 DB	'short', 00H
	ORG $+2
$SG46184 DB	'switch', 00H
	ORG $+1
$SG46785 DB	'err', 00H
$SG46154 DB	'restrict', 00H
	ORG $+3
$SG46171 DB	'_Bool', 00H
	ORG $+2
$SG46192 DB	'return', 00H
	ORG $+1
$SG46806 DB	'err', 00H
$SG46155 DB	'volatile', 00H
	ORG $+3
$SG46189 DB	'while', 00H
	ORG $+2
$SG46831 DB	'err', 00H
$SG46157 DB	'_Noreturn', 00H
	ORG $+2
$SG46844 DB	'err', 00H
$SG46159 DB	'unsigned', 00H
	ORG $+3
$SG46193 DB	'break', 00H
	ORG $+2
$SG46883 DB	'err', 00H
$SG46161 DB	'__int16', 00H
$SG46162 DB	'__int32', 00H
$SG46163 DB	'__int64', 00H
$SG46166 DB	'long', 00H
	ORG $+3
$SG46169 DB	'char', 00H
	ORG $+3
$SG46170 DB	'void', 00H
	ORG $+3
$SG46172 DB	'_Complex', 00H
	ORG $+3
$SG46896 DB	'err', 00H
$SG46173 DB	'_Atomic', 00H
$SG46174 DB	'enum', 00H
	ORG $+3
$SG46176 DB	'typedef', 00H
$SG46177 DB	'auto', 00H
	ORG $+3
$SG46179 DB	'register', 00H
	ORG $+3
$SG46918 DB	'err', 00H
$SG46181 DB	'_Thread_local', 00H
	ORG $+2
$SG46182 DB	'__declspec', 00H
	ORG $+1
$SG46185 DB	'else', 00H
	ORG $+3
$SG46186 DB	'case', 00H
	ORG $+3
$SG46923 DB	'err', 00H
$SG46187 DB	'default', 00H
$SG46191 DB	'goto', 00H
	ORG $+3
$SG46194 DB	'continue', 00H
	ORG $+3
$SG46993 DB	'err', 00H
$SG46503 DB	'expected '')''', 00H
	ORG $+3
$SG46505 DB	'ccread_primary_expr', 00H
$SG47085 DB	'err', 00H
$SG46506 DB	'W:\cpp\void\ktt-c\ccreadexpr.c', 00H
	ORG $+1
$SG46519 DB	'expected '')''', 00H
	ORG $+3
$SG46521 DB	'ccread_postfix_expr', 00H
$SG47092 DB	'err', 00H
$SG46522 DB	'W:\cpp\void\ktt-c\ccreadexpr.c', 00H
	ORG $+1
$SG46526 DB	'expected '']'', in postfix expression!', 00H
	ORG $+3
$SG46528 DB	'ccread_postfix_expr', 00H
$SG47099 DB	'err', 00H
$SG46529 DB	'W:\cpp\void\ktt-c\ccreadexpr.c', 00H
	ORG $+1
$SG46568 DB	'expected '')''', 00H
	ORG $+3
$SG46570 DB	'ccread_cast_expr', 00H
	ORG $+3
$SG47104 DB	'err', 00H
$SG46571 DB	'W:\cpp\void\ktt-c\ccreadexpr.c', 00H
	ORG $+1
$SG46666 DB	'expected '':'' invalid conditional expression', 00H
$SG47111 DB	'err', 00H
$SG46668 DB	'ccread_conditional_expr', 00H
$SG46669 DB	'W:\cpp\void\ktt-c\ccreadexpr.c', 00H
	ORG $+1
$SG46725 DB	'expected ''='' for designation', 00H
	ORG $+3
$SG46727 DB	'ccread_init_designation', 00H
$SG46728 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46731 DB	'expected ''initializer'' for designator', 00H
	ORG $+2
$SG46733 DB	'ccread_init_designation', 00H
$SG46734 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46741 DB	'unexpected '','' in initializer list', 00H
	ORG $+1
$SG47116 DB	'err', 00H
$SG46743 DB	'ccread_initializer_list', 00H
$SG46744 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46752 DB	'expected ''}'' for initializer list', 00H
	ORG $+2
$SG47121 DB	'err', 00H
$SG46754 DB	'ccread_initializer', 00H
	ORG $+1
$SG47127 DB	'err', 00H
$SG46755 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46768 DB	'expected '')''', 00H
	ORG $+3
$SG46770 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+3
$SG47134 DB	'err', 00H
$SG46771 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46773 DB	'function that returns function', 00H
	ORG $+1
$SG46775 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+3
$SG47139 DB	'err', 00H
$SG46776 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46778 DB	'function that returns array', 00H
$SG47148 DB	'err', 00H
$SG46780 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+3
$SG47153 DB	'err', 00H
$SG46781 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46784 DB	'expected '']'' for array modifier', 00H
$SG46786 DB	'ccread_direct_decl_name_modifier', 00H
	ORG $+3
$SG47158 DB	'err', 00H
$SG46787 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46805 DB	'expected '')''', 00H
	ORG $+3
$SG46807 DB	'ccread_direct_decl_name', 00H
$SG46808 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46830 DB	'expected initializer after ''=''', 00H
	ORG $+1
$SG46832 DB	'ccread_init_decl_name', 00H
	ORG $+2
$SG46833 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46843 DB	'expected constant expression after '':''', 00H
	ORG $+1
$SG46845 DB	'ccread_struct_decl_name', 00H
$SG46846 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46882 DB	'expected declarator', 00H
$SG47164 DB	'err', 00H
$SG46884 DB	'ccread_init_decl', 00H
	ORG $+3
$SG47170 DB	'err', 00H
$SG46885 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46895 DB	'expected declarator', 00H
$SG47181 DB	'err', 00H
$SG46897 DB	'ccread_struct_decl', 00H
	ORG $+1
$SG47185 DB	'err', 00H
$SG46898 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46917 DB	'expected ''{'' for struct specifier', 00H
	ORG $+2
$SG47207 DB	'err', 00H
$SG46919 DB	'ccread_struct_or_union_specifier', 00H
	ORG $+3
$SG47242 DB	'err', 00H
$SG46920 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46922 DB	'expected ''}'' for struct specifier', 00H
	ORG $+2
$SG47247 DB	'err', 00H
$SG46924 DB	'ccread_struct_or_union_specifier', 00H
	ORG $+3
$SG47252 DB	'err', 00H
$SG46925 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG46927 DB	'notimpl', 00H
$SG46992 DB	'unexpected ''...'', must be at end of function', 00H
	ORG $+3
$SG46994 DB	'ccread_param_decl', 00H
	ORG $+2
$SG47359 DB	'$0', 00H
	ORG $+1
$SG46995 DB	'W:\cpp\void\ktt-c\ccreaddecl.c', 00H
	ORG $+1
$SG47084 DB	'expected ''}''', 00H
	ORG $+3
$SG47086 DB	'ccread_stmt', 00H
$SG47379 DB	'log', 00H
$SG47087 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47091 DB	'expected '';''', 00H
	ORG $+3
$SG47093 DB	'ccread_stmt', 00H
$SG47639 DB	'err', 00H
$SG47094 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47098 DB	'expected expression', 00H
pf	DB	069H
	DB	075H
	DB	063H
	DB	066H
$SG47100 DB	'ccread_stmt', 00H
fn	DB	078H
	DB	079H
	DB	07aH
	DB	077H
$SG47101 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47103 DB	'expected '';''', 00H
	ORG $+3
$SG47105 DB	'ccread_stmt', 00H
$SG47727 DB	'i', 00H
	ORG $+2
$SG47106 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47110 DB	'expected ''(''', 00H
	ORG $+3
$SG47112 DB	'ccread_stmt', 00H
$SG47728 DB	'lli', 00H
$SG47113 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47115 DB	'expected '')''', 00H
	ORG $+3
$SG47117 DB	'ccread_stmt', 00H
$SG47729 DB	'c', 00H
	ORG $+2
$SG47118 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47120 DB	'expected expression', 00H
$SG47730 DB	'f', 00H
	ORG $+2
$SG47122 DB	'ccread_stmt', 00H
$SG47745 DB	'x%i', 00H
$SG47123 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47126 DB	'expected statement', 00H
	ORG $+1
$SG47755 DB	'%s', 00H
	ORG $+1
$SG47128 DB	'ccread_stmt', 00H
$SG47761 DB	'*', 00H
	ORG $+2
$SG47129 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47133 DB	'missing goto label identifier', 00H
	ORG $+2
$SG47135 DB	'ccread_stmt', 00H
$SG47763 DB	'&', 00H
	ORG $+2
$SG47136 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47138 DB	'expected '';''', 00H
	ORG $+3
$SG47140 DB	'ccread_stmt', 00H
$SG47765 DB	'[]', 00H
	ORG $+1
$SG47141 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47147 DB	'expected ''(''', 00H
	ORG $+3
$SG47149 DB	'ccread_stmt', 00H
$SG47778 DB	'%s ', 00H
$SG47150 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47152 DB	'expected '')''', 00H
	ORG $+3
$SG47154 DB	'ccread_stmt', 00H
$SG47785 DB	'%c', 00H
	ORG $+1
$SG47155 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47157 DB	'expected expression', 00H
$SG47811 DB	'(', 00H
	ORG $+2
$SG47159 DB	'ccread_stmt', 00H
$SG47813 DB	',', 00H
	ORG $+2
$SG47160 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47163 DB	'expected statement', 00H
	ORG $+1
$SG47814 DB	')', 00H
	ORG $+2
$SG47165 DB	'ccread_stmt', 00H
$SG47823 DB	'%sm', 00H
$SG47166 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47169 DB	'expected statement', 00H
	ORG $+1
$SG47824 DB	0dH, 0aH, 00H
	ORG $+1
$SG47171 DB	'ccread_stmt', 00H
$SG47825 DB	'{ ', 00H
	ORG $+1
$SG47172 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47180 DB	'invalid statement, missing '':'' for label statement?', 00H
$SG47826 DB	';', 00H
	ORG $+2
$SG47182 DB	'ccread_stmt', 00H
$SG47829 DB	'}', 0dH, 0aH, 00H
$SG47183 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47184 DB	'invalid statement', 00H
	ORG $+2
$SG47488 DB	'$block', 00H
	ORG $+1
$SG47842 DB	',', 00H
	ORG $+2
$SG47186 DB	'ccread_stmt', 00H
$SG47843 DB	')', 0dH, 0aH, 00H
$SG47187 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47206 DB	'expected ''}''', 00H
	ORG $+3
$SG47208 DB	'ccread_block_stmt', 00H
	ORG $+2
$SG47517 DB	'$local', 00H
	ORG $+1
$SG47844 DB	'{ ', 00H
	ORG $+1
$SG47209 DB	'W:\cpp\void\ktt-c\ccreadstat.c', 00H
	ORG $+1
$SG47241 DB	'expected '';''', 00H
	ORG $+3
$SG47243 DB	'ccread_external_declaration', 00H
$SG47845 DB	';', 00H
	ORG $+2
$SG47244 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG47848 DB	'}', 0dH, 0aH, 00H
$SG47246 DB	'expected '';''', 00H
	ORG $+3
$SG47248 DB	'ccread_external_declaration', 00H
$SG47859 DB	0dH, 0aH, 00H
	ORG $+1
$SG47249 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG47860 DB	'{', 00H
	ORG $+2
$SG47251 DB	'invalid external declaration', 00H
	ORG $+3
$SG47253 DB	'ccread_external_declaration', 00H
$SG47862 DB	';', 00H
	ORG $+2
$SG47254 DB	'W:\cpp\void\ktt-c\ccread.c', 00H
	ORG $+1
$SG47863 DB	0dH, 0aH, 00H
	ORG $+1
$SG47378 DB	'%s] [s:32] %p, %p %i', 00H
	ORG $+3
$SG47380 DB	'ccemit_store', 00H
	ORG $+3
$SG47381 DB	'W:\cpp\void\ktt-c\ccemit.c', 00H
	ORG $+1
$SG47485 DB	'error', 00H
	ORG $+2
$SG47605 DB	'$decls', 00H
	ORG $+1
$SG47864 DB	'} ', 00H
	ORG $+1
$SG47511 DB	'$while::cond', 00H
	ORG $+3
$SG47512 DB	'$while::then', 00H
	ORG $+3
$SG47513 DB	'$while::else', 00H
	ORG $+3
$SG47519 DB	'$if::then', 00H
	ORG $+2
$SG47606 DB	'$enter', 00H
	ORG $+1
$SG47865 DB	';', 0dH, 0aH, 00H
$SG47521 DB	'$if::else', 00H
	ORG $+2
$SG47523 DB	'error', 00H
	ORG $+2
$SG47544 DB	'error', 00H
	ORG $+2
$SG47607 DB	'$leave', 00H
	ORG $+1
$SG47866 DB	'*', 00H
	ORG $+2
$SG47638 DB	'invalid external declaration', 00H
	ORG $+3
$SG47640 DB	'ccemit_translation_unit', 00H
$SG47641 DB	'W:\cpp\void\ktt-c\ccemit.c', 00H
	ORG $+1
$SG47662 DB	'main', 00H
	ORG $+3
$SG47739 DB	'%c%i', 00H
	ORG $+3
$SG47867 DB	'*=', 00H
	ORG $+1
$SG47742 DB	'%c%i_%i', 00H
$SG47806 DB	'static ', 00H
$SG47809 DB	'void', 00H
	ORG $+3
$SG47810 DB	0dH, 0aH, '%s', 00H
	ORG $+3
$SG47827 DB	0dH, 0aH, '  r.%c=%c;', 00H
	ORG $+3
$SG47828 DB	0dH, 0aH, '  return r;', 0dH, 0aH, 00H
$SG47839 DB	'static %s operator %s (', 00H
$SG47846 DB	0dH, 0aH, '  r.%c=a.%c%cb.%c;', 00H
	ORG $+3
$SG47847 DB	0dH, 0aH, '  return r;', 0dH, 0aH, 00H
$SG47858 DB	'typedef struct ', 00H
$SG47861 DB	0dH, 0aH, '  ', 00H
	ORG $+3
$SG47868 DB	'/', 00H
	ORG $+2
$SG47869 DB	'/=', 00H
	ORG $+1
$SG47870 DB	'+', 00H
	ORG $+2
$SG47871 DB	'+=', 00H
	ORG $+1
$SG47872 DB	'-', 00H
	ORG $+2
$SG47873 DB	'-=', 00H
	ORG $+1
$SG47902 DB	'undefined lhs value', 00H
$SG47903 DB	'err', 00H
$SG47904 DB	'ccsvm_execbinary', 00H
	ORG $+3
$SG47908 DB	'err', 00H
$SG47905 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG47967 DB	'log', 00H
$SG47907 DB	'undefined rhs value', 00H
$SG47975 DB	'log', 00H
$SG47909 DB	'ccsvm_execbinary', 00H
	ORG $+3
$SG47928 DB	'error', 00H
	ORG $+2
$SG48003 DB	'log', 00H
$SG47910 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG48022 DB	'err', 00H
$SG47966 DB	'%s]LOCAL] [s:32] %s, %p', 00H
$SG47968 DB	'ccvm_exec_instr', 00H
$SG47969 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG48063 DB	0dH, 0aH, 00H
	ORG $+1
$SG47974 DB	'%s::STORE($%s@%p,%p=%i)', 00H
$SG47976 DB	'ccvm_exec_instr', 00H
$SG47977 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG47986 DB	'error', 00H
	ORG $+2
$SG48034 DB	'RETURN', 00H
	ORG $+1
$SG48089 DB	'log', 00H
$SG48002 DB	'%s] l: %i, i: %i', 00H
	ORG $+3
$SG48026 DB	'STORE', 00H
	ORG $+2
$SG48037 DB	'GLOBAL', 00H
	ORG $+1
$SG48093 DB	'log', 00H
$SG48004 DB	'ccvm_exec', 00H
	ORG $+2
$SG48053 DB	'%s: %s', 00H
	ORG $+1
$SG48097 DB	'log', 00H
$SG48005 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG48019 DB	'main', 00H
	ORG $+3
$SG48027 DB	'LOCAL', 00H
	ORG $+2
$SG48091 DB	'test.c', 00H
	ORG $+5
$SG48021 DB	'missing entry point', 00H
	ORG $+4
$SG48023 DB	'ccexec_translation_unit', 00H
$SG48024 DB	'W:\cpp\void\ktt-c\ccexec.c', 00H
	ORG $+1
$SG48028 DB	'BINOP', 00H
	ORG $+2
$SG48029 DB	'BLOCK', 00H
	ORG $+2
$SG48030 DB	'CONDI', 00H
	ORG $+2
$SG48031 DB	'ENTER', 00H
	ORG $+2
$SG48032 DB	'LEAVE', 00H
	ORG $+2
$SG48033 DB	'CALL', 00H
	ORG $+3
$SG48036 DB	'LEAF', 00H
	ORG $+3
$SG48038 DB	'BLOCK', 00H
	ORG $+2
$SG48039 DB	'INSTR', 00H
	ORG $+6
$SG48050 DB	'%s: %s::%s', 00H
	ORG $+5
$SG48088 DB	'log test 1', 00H
	ORG $+1
$SG48090 DB	'main', 00H
	ORG $+7
$SG48092 DB	'log test 2', 00H
	ORG $+1
$SG48094 DB	'main', 00H
	ORG $+3
$SG48095 DB	'test.c', 00H
	ORG $+5
$SG48096 DB	'log test 3', 00H
	ORG $+1
$SG48098 DB	'main', 00H
	ORG $+3
$SG48099 DB	'test.c', 00H
	ORG $+5
$SG48100 DB	'test.svm.c', 00H
	ORG $+13
$SG48101 DB	'#define f64 double', 0dH, 0aH, '#define f32 float', 0dH, 0aH
	DB	'#ifdef _MSC_VER', 0dH, 0aH, '# define i64 signed   __int64', 0dH
	DB	0aH, '# define u64 unsigned __int64', 0dH, 0aH, '# define i32 '
	DB	'signed   __int32', 0dH, 0aH, '# define u32 unsigned __int32', 0dH
	DB	0aH, '# define i16 signed   __int16', 0dH, 0aH, '# define u16 '
	DB	'unsigned __int16', 0dH, 0aH, '# define i8  signed   __int8', 0dH
	DB	0aH, '# define u8  unsigned __int8', 0dH, 0aH, '#else', 0dH, 0aH
	DB	'# define i64 signed   long long', 0dH, 0aH, '# define u64 uns'
	DB	'igned long long', 0dH, 0aH, '# define i32 signed   int', 0dH, 0aH
	DB	'# define u32 unsigned int', 0dH, 0aH, '# define i16 signed   '
	DB	'short', 0dH, 0aH, '# define u16 unsigned short', 0dH, 0aH, '#'
	DB	' define i8  signed   char', 0dH, 0aH, '# define u8  unsigned '
	DB	'char', 0dH, 0aH, '#endif', 0dH, 0aH, '#define c8  char', 0dH, 0aH
	DB	'#define c16 wchar_t', 0dH, 0aH, 00H
	ORG $+1
$SG48102 DB	'#define f64 double', 0dH, 0aH, '#define f32 float', 0dH, 0aH
	DB	'#ifdef _MSC_VER', 0dH, 0aH, '# define i64 signed   __int64', 0dH
	DB	0aH, '# define u64 unsigned __int64', 0dH, 0aH, '# define i32 '
	DB	'signed   __int32', 0dH, 0aH, '# define u32 unsigned __int32', 0dH
	DB	0aH, '# define i16 signed   __int16', 0dH, 0aH, '# define u16 '
	DB	'unsigned __int16', 0dH, 0aH, '# define i8  signed   __int8', 0dH
	DB	0aH, '# define u8  unsigned __int8', 0dH, 0aH, '#else', 0dH, 0aH
	DB	'# define i64 signed   long long', 0dH, 0aH, '# define u64 uns'
	DB	'igned long long', 0dH, 0aH, '# define i32 signed   int', 0dH, 0aH
	DB	'# define u32 unsigned int', 0dH, 0aH, '# define i16 signed   '
	DB	'short', 0dH, 0aH, '# define u16 unsigned short', 0dH, 0aH, '#'
	DB	' define i8  signed   char', 0dH, 0aH, '# define u8  unsigned '
	DB	'char', 0dH, 0aH, '#endif', 0dH, 0aH, '#define c8  char', 0dH, 0aH
	DB	'#define c16 wchar_t', 0dH, 0aH, 00H
	ORG $+1
$SG48103 DB	'#define f64 double', 0dH, 0aH, '#define f32 float', 0dH, 0aH
	DB	'#ifdef _MSC_VER', 0dH, 0aH, '# define i64 signed   __int64', 0dH
	DB	0aH, '# define u64 unsigned __int64', 0dH, 0aH, '# define i32 '
	DB	'signed   __int32', 0dH, 0aH, '# define u32 unsigned __int32', 0dH
	DB	0aH, '# define i16 signed   __int16', 0dH, 0aH, '# define u16 '
	DB	'unsigned __int16', 0dH, 0aH, '# define i8  signed   __int8', 0dH
	DB	0aH, '# define u8  unsigned __int8', 0dH, 0aH, '#else', 0dH, 0aH
	DB	'# define i64 signed   long long', 0dH, 0aH, '# define u64 uns'
	DB	'igned long long', 0dH, 0aH, '# define i32 signed   int', 0dH, 0aH
	DB	'# define u32 unsigned int', 0dH, 0aH, '# define i16 signed   '
	DB	'short', 0dH, 0aH, '# define u16 unsigned short', 0dH, 0aH, '#'
	DB	' define i8  signed   char', 0dH, 0aH, '# define u8  unsigned '
	DB	'char', 0dH, 0aH, '#endif', 0dH, 0aH, '#define c8  char', 0dH, 0aH
	DB	'#define c16 wchar_t', 0dH, 0aH, 00H
	ORG $+1
$SG48104 DB	'gen.ktt.c', 00H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	stbsp_vsprintf
PUBLIC	stbsp_vsnprintf
PUBLIC	stbsp_sprintf
PUBLIC	stbsp_snprintf
PUBLIC	stbsp_vsprintfcb
PUBLIC	stbsp_set_separators
PUBLIC	gen_type
PUBLIC	gen_vectype
PUBLIC	gen_ptrtype
PUBLIC	gen_vartype
PUBLIC	gen_fixtype
PUBLIC	gen_typename_ex
PUBLIC	gen_typename
PUBLIC	emit_typename
PUBLIC	emit_modifier
PUBLIC	emit_vardecl_ex
PUBLIC	emit_vardecl
PUBLIC	emit_fundecl
PUBLIC	genmake
PUBLIC	emit_vecoprari
PUBLIC	emit_vectype
PUBLIC	emit_type
PUBLIC	main
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@408f400000000000
PUBLIC	__real@4090000000000000
PUBLIC	__xmm@80000000000000008000000000000000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_OutputDebugStringA:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_realloc:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
;	COMDAT ?buf@?1??ccformatv@@9@4PADA
_TLS	SEGMENT
?buf@?1??ccformatv@@9@4PADA DB 0ffH DUP (?)		; `ccformatv'::`2'::buf
_TLS	ENDS
;	COMDAT ?buf@?1??cctrace_@@9@4PADA
_BSS	SEGMENT
?buf@?1??cctrace_@@9@4PADA DB 0fffH DUP (?)		; `cctrace_'::`2'::buf
_BSS	ENDS
_BSS	SEGMENT
ctype_flo32 DQ	01H DUP (?)
ctype_flo64 DQ	01H DUP (?)
ctype_int64 DQ	01H DUP (?)
ctype_int32 DQ	01H DUP (?)
ctype_int16 DQ	01H DUP (?)
ctype_int8 DQ	01H DUP (?)
ctype_uint64 DQ	01H DUP (?)
ctype_uint32 DQ	01H DUP (?)
ctype_uint16 DQ	01H DUP (?)
ctype_uint8 DQ	01H DUP (?)
ctype_void DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
_BSS	SEGMENT
?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A DB 040H DUP (?) ; `kttc__peek_ahead'::`2'::end_tok
_BSS	ENDS
;	COMDAT ?buf@?1??gen_typename@@9@4PADA
_BSS	SEGMENT
?buf@?1??gen_typename@@9@4PADA DB 020H DUP (?)		; `gen_typename'::`2'::buf
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$ccrealfile DD imagerel ccrealfile
	DD	imagerel ccrealfile+41
	DD	imagerel $unwind$ccrealfile
$pdata$ccclosefile DD imagerel ccclosefile
	DD	imagerel ccclosefile+25
	DD	imagerel $unwind$ccclosefile
$pdata$ccopenfile DD imagerel ccopenfile
	DD	imagerel ccopenfile+109
	DD	imagerel $unwind$ccopenfile
$pdata$ccpullfile DD imagerel ccpullfile
	DD	imagerel ccpullfile+215
	DD	imagerel $unwind$ccpullfile
$pdata$ccpushfile DD imagerel ccpushfile
	DD	imagerel ccpushfile+119
	DD	imagerel $unwind$ccpushfile
$pdata$ccfilesize DD imagerel ccfilesize
	DD	imagerel ccfilesize+27
	DD	imagerel $unwind$ccfilesize
$pdata$stbsp_vsprintf DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$stbsp_vsprintf
$pdata$stbsp_vsnprintf DD imagerel $LN6
	DD	imagerel $LN6+303
	DD	imagerel $unwind$stbsp_vsnprintf
$pdata$stbsp_sprintf DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$stbsp_sprintf
$pdata$stbsp_snprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$stbsp_snprintf
$pdata$stbsp_vsprintfcb DD imagerel $LN461
	DD	imagerel $LN461+14412
	DD	imagerel $unwind$stbsp_vsprintfcb
$pdata$stbsp__real_to_str DD imagerel stbsp__real_to_str
	DD	imagerel stbsp__real_to_str+1622
	DD	imagerel $unwind$stbsp__real_to_str
$pdata$stbsp__real_to_parts DD imagerel stbsp__real_to_parts
	DD	imagerel stbsp__real_to_parts+154
	DD	imagerel $unwind$stbsp__real_to_parts
$pdata$stbsp__strlen_limited DD imagerel stbsp__strlen_limited
	DD	imagerel stbsp__strlen_limited+239
	DD	imagerel $unwind$stbsp__strlen_limited
$pdata$stbsp__clamp_callback DD imagerel stbsp__clamp_callback
	DD	imagerel stbsp__clamp_callback+300
	DD	imagerel $unwind$stbsp__clamp_callback
$pdata$stbsp__count_clamp_callback DD imagerel stbsp__count_clamp_callback
	DD	imagerel stbsp__count_clamp_callback+59
	DD	imagerel $unwind$stbsp__count_clamp_callback
$pdata$stbsp__raise_to_power10 DD imagerel stbsp__raise_to_power10
	DD	imagerel stbsp__raise_to_power10+3868
	DD	imagerel $unwind$stbsp__raise_to_power10
$pdata$ccout DD	imagerel ccout
	DD	imagerel ccout+35
	DD	imagerel $unwind$ccout
$pdata$cctrace_ DD imagerel cctrace_
	DD	imagerel cctrace_+217
	DD	imagerel $unwind$cctrace_
$pdata$ccformatvex DD imagerel ccformatvex
	DD	imagerel ccformatvex+52
	DD	imagerel $unwind$ccformatvex
$pdata$ccformatv DD imagerel ccformatv
	DD	imagerel ccformatv+94
	DD	imagerel $unwind$ccformatv
$pdata$ccformatex DD imagerel ccformatex
	DD	imagerel ccformatex+79
	DD	imagerel $unwind$ccformatex
$pdata$ccformat DD imagerel ccformat
	DD	imagerel ccformat+73
	DD	imagerel $unwind$ccformat
$pdata$ccdlb_arradd_ DD imagerel ccdlb_arradd_
	DD	imagerel ccdlb_arradd_+273
	DD	imagerel $unwind$ccdlb_arradd_
$pdata$ccdlb_arradd DD imagerel ccdlb_arradd
	DD	imagerel ccdlb_arradd+141
	DD	imagerel $unwind$ccdlb_arradd
$pdata$ccdlb_stradd DD imagerel ccdlb_stradd
	DD	imagerel ccdlb_stradd+137
	DD	imagerel $unwind$ccdlb_stradd
$pdata$cctbl_set_ DD imagerel cctbl_set_
	DD	imagerel cctbl_set_+766
	DD	imagerel $unwind$cctbl_set_
$pdata$cctbl_set DD imagerel cctbl_set
	DD	imagerel cctbl_set+453
	DD	imagerel $unwind$cctbl_set
$pdata$ccstr_vcatf DD imagerel ccstr_vcatf
	DD	imagerel ccstr_vcatf+123
	DD	imagerel $unwind$ccstr_vcatf
$pdata$ccstr_catf DD imagerel ccstr_catf
	DD	imagerel ccstr_catf+76
	DD	imagerel $unwind$ccstr_catf
$pdata$ccdlb_test DD imagerel ccdlb_test
	DD	imagerel ccdlb_test+1030
	DD	imagerel $unwind$ccdlb_test
$pdata$cctree_idenname DD imagerel cctree_idenname
	DD	imagerel cctree_idenname+52
	DD	imagerel $unwind$cctree_idenname
$pdata$cclex_init DD imagerel cclex_init
	DD	imagerel cclex_init+178
	DD	imagerel $unwind$cclex_init
$pdata$cclex_next_token DD imagerel cclex_next_token
	DD	imagerel cclex_next_token+101
	DD	imagerel $unwind$cclex_next_token
$pdata$cclex_token DD imagerel cclex_token
	DD	imagerel cclex_token+83
	DD	imagerel $unwind$cclex_token
$pdata$ccpeep DD imagerel ccpeep
	DD	imagerel ccpeep+26
	DD	imagerel $unwind$ccpeep
$pdata$ccsee DD	imagerel ccsee
	DD	imagerel ccsee+58
	DD	imagerel $unwind$ccsee
$pdata$ccgobble DD imagerel ccgobble
	DD	imagerel ccgobble+126
	DD	imagerel $unwind$ccgobble
$pdata$ccread_decl_name DD imagerel ccread_decl_name
	DD	imagerel ccread_decl_name+56
	DD	imagerel $unwind$ccread_decl_name
$pdata$ccread_init_decl_name_list DD imagerel ccread_init_decl_name_list
	DD	imagerel ccread_init_decl_name_list+160
	DD	imagerel $unwind$ccread_init_decl_name_list
$pdata$ccread_init_decl DD imagerel ccread_init_decl
	DD	imagerel ccread_init_decl+151
	DD	imagerel $unwind$ccread_init_decl
$pdata$ccread_declaration_specifiers DD imagerel ccread_declaration_specifiers
	DD	imagerel ccread_declaration_specifiers+54
	DD	imagerel $unwind$ccread_declaration_specifiers
$pdata$ccread_specifier_qualifier_list DD imagerel ccread_specifier_qualifier_list
	DD	imagerel ccread_specifier_qualifier_list+54
	DD	imagerel $unwind$ccread_specifier_qualifier_list
$pdata$ccread_assignment_expr DD imagerel ccread_assignment_expr
	DD	imagerel ccread_assignment_expr+102
	DD	imagerel $unwind$ccread_assignment_expr
$pdata$ccread_expression DD imagerel ccread_expression
	DD	imagerel ccread_expression+104
	DD	imagerel $unwind$ccread_expression
$pdata$ccread_cast_expr DD imagerel ccread_cast_expr
	DD	imagerel ccread_cast_expr+157
	DD	imagerel $unwind$ccread_cast_expr
$pdata$cctype_del DD imagerel cctype_del
	DD	imagerel cctype_del+25
	DD	imagerel $unwind$cctype_del
$pdata$cctype_new DD imagerel cctype_new
	DD	imagerel cctype_new+82
	DD	imagerel $unwind$cctype_new
$pdata$cctype_clone DD imagerel cctype_clone
	DD	imagerel cctype_clone+59
	DD	imagerel $unwind$cctype_clone
$pdata$cctype_new_ptr DD imagerel cctype_new_ptr
	DD	imagerel cctype_new_ptr+55
	DD	imagerel $unwind$cctype_new_ptr
$pdata$cctype_new_arr DD imagerel cctype_new_arr
	DD	imagerel cctype_new_arr+55
	DD	imagerel $unwind$cctype_new_arr
$pdata$cctype_new_fun DD imagerel cctype_new_fun
	DD	imagerel cctype_new_fun+74
	DD	imagerel $unwind$cctype_new_fun
$pdata$cctree_del DD imagerel cctree_del
	DD	imagerel cctree_del+25
	DD	imagerel $unwind$cctree_del
$pdata$cctree_new DD imagerel cctree_new
	DD	imagerel cctree_new+63
	DD	imagerel $unwind$cctree_new
$pdata$cctree_new_constant DD imagerel cctree_new_constant
	DD	imagerel cctree_new_constant+81
	DD	imagerel $unwind$cctree_new_constant
$pdata$cctree_new_top DD imagerel cctree_new_top
	DD	imagerel cctree_new_top+125
	DD	imagerel $unwind$cctree_new_top
$pdata$cctree_binary DD imagerel cctree_binary
	DD	imagerel cctree_binary+103
	DD	imagerel $unwind$cctree_binary
$pdata$cctree_new_uop DD imagerel cctree_new_uop
	DD	imagerel cctree_new_uop+81
	DD	imagerel $unwind$cctree_new_uop
$pdata$cctree_new_designator DD imagerel cctree_new_designator
	DD	imagerel cctree_new_designator+81
	DD	imagerel $unwind$cctree_new_designator
$pdata$cctree_new_designation DD imagerel cctree_new_designation
	DD	imagerel cctree_new_designation+82
	DD	imagerel $unwind$cctree_new_designation
$pdata$cctree_new_identifier DD imagerel cctree_new_identifier
	DD	imagerel cctree_new_identifier+74
	DD	imagerel $unwind$cctree_new_identifier
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_flo32@@YAXXZ DD imagerel ??__Ectype_flo32@@YAXXZ
	DD	imagerel ??__Ectype_flo32@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_flo32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_flo64@@YAXXZ DD imagerel ??__Ectype_flo64@@YAXXZ
	DD	imagerel ??__Ectype_flo64@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_flo64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int64@@YAXXZ DD imagerel ??__Ectype_int64@@YAXXZ
	DD	imagerel ??__Ectype_int64@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_int64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int32@@YAXXZ DD imagerel ??__Ectype_int32@@YAXXZ
	DD	imagerel ??__Ectype_int32@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_int32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int16@@YAXXZ DD imagerel ??__Ectype_int16@@YAXXZ
	DD	imagerel ??__Ectype_int16@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_int16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_int8@@YAXXZ DD imagerel ??__Ectype_int8@@YAXXZ
	DD	imagerel ??__Ectype_int8@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_int8@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint64@@YAXXZ DD imagerel ??__Ectype_uint64@@YAXXZ
	DD	imagerel ??__Ectype_uint64@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_uint64@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint32@@YAXXZ DD imagerel ??__Ectype_uint32@@YAXXZ
	DD	imagerel ??__Ectype_uint32@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_uint32@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint16@@YAXXZ DD imagerel ??__Ectype_uint16@@YAXXZ
	DD	imagerel ??__Ectype_uint16@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_uint16@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_uint8@@YAXXZ DD imagerel ??__Ectype_uint8@@YAXXZ
	DD	imagerel ??__Ectype_uint8@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_uint8@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__Ectype_void@@YAXXZ DD imagerel ??__Ectype_void@@YAXXZ
	DD	imagerel ??__Ectype_void@@YAXXZ+33
	DD	imagerel $unwind$??__Ectype_void@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$ccread_init DD imagerel ccread_init
	DD	imagerel ccread_init+93
	DD	imagerel $unwind$ccread_init
$pdata$ccread_uninit DD imagerel ccread_uninit
	DD	imagerel ccread_uninit+79
	DD	imagerel $unwind$ccread_uninit
$pdata$ccread_all_tokens DD imagerel ccread_all_tokens
	DD	imagerel ccread_all_tokens+105
	DD	imagerel $unwind$ccread_all_tokens
$pdata$ccreader_move DD imagerel ccreader_move
	DD	imagerel ccreader_move+180
	DD	imagerel $unwind$ccreader_move
$pdata$ccread_include DD imagerel ccread_include
	DD	imagerel ccread_include+95
	DD	imagerel $unwind$ccread_include
$pdata$ccsee_end DD imagerel ccsee_end
	DD	imagerel ccsee_end+26
	DD	imagerel $unwind$ccsee_end
$pdata$kttc__peek_alignment_specifier DD imagerel kttc__peek_alignment_specifier
	DD	imagerel kttc__peek_alignment_specifier+58
	DD	imagerel $unwind$kttc__peek_alignment_specifier
$pdata$kttc__peek_type_qualifier DD imagerel kttc__peek_type_qualifier
	DD	imagerel kttc__peek_type_qualifier+58
	DD	imagerel $unwind$kttc__peek_type_qualifier
$pdata$ccsee_typespec DD imagerel ccsee_typespec
	DD	imagerel ccsee_typespec+58
	DD	imagerel $unwind$ccsee_typespec
$pdata$kttc__peek_storage_class DD imagerel kttc__peek_storage_class
	DD	imagerel kttc__peek_storage_class+58
	DD	imagerel $unwind$kttc__peek_storage_class
$pdata$kttc__peek_func_specifier DD imagerel kttc__peek_func_specifier
	DD	imagerel kttc__peek_func_specifier+58
	DD	imagerel $unwind$kttc__peek_func_specifier
$pdata$cceat DD	imagerel cceat
	DD	imagerel cceat+50
	DD	imagerel $unwind$cceat
$pdata$cctype_new_struct_spec DD imagerel cctype_new_struct_spec
	DD	imagerel cctype_new_struct_spec+75
	DD	imagerel $unwind$cctype_new_struct_spec
$pdata$cctree_decl_name DD imagerel cctree_decl_name
	DD	imagerel cctree_decl_name+110
	DD	imagerel $unwind$cctree_decl_name
$pdata$cctree_decl DD imagerel cctree_decl
	DD	imagerel cctree_decl+67
	DD	imagerel $unwind$cctree_decl
$pdata$cclex_hashfunc DD imagerel cclex_hashfunc
	DD	imagerel cclex_hashfunc+75
	DD	imagerel $unwind$cclex_hashfunc
$pdata$cclex_hash DD imagerel cclex_hash
	DD	imagerel cclex_hash+679
	DD	imagerel $unwind$cclex_hash
$pdata$cclex_hashonly DD imagerel cclex_hashonly
	DD	imagerel cclex_hashonly+146
	DD	imagerel $unwind$cclex_hashonly
$pdata$cclex_hash_init DD imagerel cclex_hash_init
	DD	imagerel cclex_hash_init+1498
	DD	imagerel $unwind$cclex_hash_init
$pdata$cclex_idenlen DD imagerel cclex_idenlen
	DD	imagerel cclex_idenlen+165
	DD	imagerel $unwind$cclex_idenlen
$pdata$cclex_next_token_internal DD imagerel cclex_next_token_internal
	DD	imagerel cclex_next_token_internal+4608
	DD	imagerel $unwind$cclex_next_token_internal
$pdata$cclex_identifier DD imagerel cclex_identifier
	DD	imagerel cclex_identifier+118
	DD	imagerel $unwind$cclex_identifier
$pdata$cclex_readstr DD imagerel cclex_readstr
	DD	imagerel cclex_readstr+867
	DD	imagerel $unwind$cclex_readstr
$pdata$ccread_arglist_expr DD imagerel ccread_arglist_expr
	DD	imagerel ccread_arglist_expr+150
	DD	imagerel $unwind$ccread_arglist_expr
$pdata$cctree_paren_expr DD imagerel cctree_paren_expr
	DD	imagerel cctree_paren_expr+48
	DD	imagerel $unwind$cctree_paren_expr
$pdata$cctree_call_expr DD imagerel cctree_call_expr
	DD	imagerel cctree_call_expr+67
	DD	imagerel $unwind$cctree_call_expr
$pdata$ccread_identifier DD imagerel ccread_identifier
	DD	imagerel ccread_identifier+37
	DD	imagerel $unwind$ccread_identifier
$pdata$ccread_primary_expr DD imagerel ccread_primary_expr
	DD	imagerel ccread_primary_expr+351
	DD	imagerel $unwind$ccread_primary_expr
$pdata$ccread_postfix_expr DD imagerel ccread_postfix_expr
	DD	imagerel ccread_postfix_expr+449
	DD	imagerel $unwind$ccread_postfix_expr
$pdata$ccread_unary_expr DD imagerel ccread_unary_expr
	DD	imagerel ccread_unary_expr+604
	DD	imagerel $unwind$ccread_unary_expr
$pdata$ccread_multiplicative_expr DD imagerel ccread_multiplicative_expr
	DD	imagerel ccread_multiplicative_expr+148
	DD	imagerel $unwind$ccread_multiplicative_expr
$pdata$ccread_additive_expr DD imagerel ccread_additive_expr
	DD	imagerel ccread_additive_expr+129
	DD	imagerel $unwind$ccread_additive_expr
$pdata$ccread_shift_expr DD imagerel ccread_shift_expr
	DD	imagerel ccread_shift_expr+129
	DD	imagerel $unwind$ccread_shift_expr
$pdata$ccread_relational_expr DD imagerel ccread_relational_expr
	DD	imagerel ccread_relational_expr+170
	DD	imagerel $unwind$ccread_relational_expr
$pdata$ccread_equality_expr DD imagerel ccread_equality_expr
	DD	imagerel ccread_equality_expr+127
	DD	imagerel $unwind$ccread_equality_expr
$pdata$ccread_bitwise_and_expr DD imagerel ccread_bitwise_and_expr
	DD	imagerel ccread_bitwise_and_expr+110
	DD	imagerel $unwind$ccread_bitwise_and_expr
$pdata$ccread_bitwise_xor_expr DD imagerel ccread_bitwise_xor_expr
	DD	imagerel ccread_bitwise_xor_expr+110
	DD	imagerel $unwind$ccread_bitwise_xor_expr
$pdata$ccread_bitwise_or_expr DD imagerel ccread_bitwise_or_expr
	DD	imagerel ccread_bitwise_or_expr+110
	DD	imagerel $unwind$ccread_bitwise_or_expr
$pdata$ccread_logical_and_expr DD imagerel ccread_logical_and_expr
	DD	imagerel ccread_logical_and_expr+110
	DD	imagerel $unwind$ccread_logical_and_expr
$pdata$ccread_logical_or_expr DD imagerel ccread_logical_or_expr
	DD	imagerel ccread_logical_or_expr+110
	DD	imagerel $unwind$ccread_logical_or_expr
$pdata$ccread_conditional_expr DD imagerel ccread_conditional_expr
	DD	imagerel ccread_conditional_expr+218
	DD	imagerel $unwind$ccread_conditional_expr
$pdata$ccread_constant_expression DD imagerel ccread_constant_expression
	DD	imagerel ccread_constant_expression+24
	DD	imagerel $unwind$ccread_constant_expression
$pdata$ccread_param_type_list DD imagerel ccread_param_type_list
	DD	imagerel ccread_param_type_list+34
	DD	imagerel $unwind$ccread_param_type_list
$pdata$ccread_initializer DD imagerel ccread_initializer
	DD	imagerel ccread_initializer+143
	DD	imagerel $unwind$ccread_initializer
$pdata$ccread_designator DD imagerel ccread_designator
	DD	imagerel ccread_designator+150
	DD	imagerel $unwind$ccread_designator
$pdata$ccread_designator_list DD imagerel ccread_designator_list
	DD	imagerel ccread_designator_list+64
	DD	imagerel $unwind$ccread_designator_list
$pdata$ccread_init_designation DD imagerel ccread_init_designation
	DD	imagerel ccread_init_designation+213
	DD	imagerel $unwind$ccread_init_designation
$pdata$ccread_initializer_list DD imagerel ccread_initializer_list
	DD	imagerel ccread_initializer_list+139
	DD	imagerel $unwind$ccread_initializer_list
$pdata$ccread_direct_decl_name_modifier DD imagerel ccread_direct_decl_name_modifier
	DD	imagerel ccread_direct_decl_name_modifier+453
	DD	imagerel $unwind$ccread_direct_decl_name_modifier
$pdata$ccread_direct_decl_name DD imagerel ccread_direct_decl_name
	DD	imagerel ccread_direct_decl_name+372
	DD	imagerel $unwind$ccread_direct_decl_name
$pdata$ccread_decl_name_modifier_maybe DD imagerel ccread_decl_name_modifier_maybe
	DD	imagerel ccread_decl_name_modifier_maybe+69
	DD	imagerel $unwind$ccread_decl_name_modifier_maybe
$pdata$ccread_init_decl_name DD imagerel ccread_init_decl_name
	DD	imagerel ccread_init_decl_name+167
	DD	imagerel $unwind$ccread_init_decl_name
$pdata$ccread_struct_decl_name DD imagerel ccread_struct_decl_name
	DD	imagerel ccread_struct_decl_name+167
	DD	imagerel $unwind$ccread_struct_decl_name
$pdata$ccread_struct_decl_name_list DD imagerel ccread_struct_decl_name_list
	DD	imagerel ccread_struct_decl_name_list+160
	DD	imagerel $unwind$ccread_struct_decl_name_list
$pdata$ccread_struct_decl DD imagerel ccread_struct_decl
	DD	imagerel ccread_struct_decl+141
	DD	imagerel $unwind$ccread_struct_decl
$pdata$ccread_struct_decl_list DD imagerel ccread_struct_decl_list
	DD	imagerel ccread_struct_decl_list+124
	DD	imagerel $unwind$ccread_struct_decl_list
$pdata$ccread_struct_or_union_specifier DD imagerel ccread_struct_or_union_specifier
	DD	imagerel ccread_struct_or_union_specifier+262
	DD	imagerel $unwind$ccread_struct_or_union_specifier
$pdata$ccread_type_specifier DD imagerel ccread_type_specifier
	DD	imagerel ccread_type_specifier+400
	DD	imagerel $unwind$ccread_type_specifier
$pdata$ccread_storage_class_specifier DD imagerel ccread_storage_class_specifier
	DD	imagerel ccread_storage_class_specifier+53
	DD	imagerel $unwind$ccread_storage_class_specifier
$pdata$ccread_type_qualifier DD imagerel ccread_type_qualifier
	DD	imagerel ccread_type_qualifier+53
	DD	imagerel $unwind$ccread_type_qualifier
$pdata$ccread_function_specifier DD imagerel ccread_function_specifier
	DD	imagerel ccread_function_specifier+53
	DD	imagerel $unwind$ccread_function_specifier
$pdata$ccread_alignment_specifier DD imagerel ccread_alignment_specifier
	DD	imagerel ccread_alignment_specifier+53
	DD	imagerel $unwind$ccread_alignment_specifier
$pdata$ccread_param_decl DD imagerel ccread_param_decl
	DD	imagerel ccread_param_decl+154
	DD	imagerel $unwind$ccread_param_decl
$pdata$ccread_param_decl_list DD imagerel ccread_param_decl_list
	DD	imagerel ccread_param_decl_list+146
	DD	imagerel $unwind$ccread_param_decl_list
$pdata$cctree_block_stmt DD imagerel cctree_block_stmt
	DD	imagerel cctree_block_stmt+67
	DD	imagerel $unwind$cctree_block_stmt
$pdata$cctree_conditional_statement DD imagerel cctree_conditional_statement
	DD	imagerel cctree_conditional_statement+95
	DD	imagerel $unwind$cctree_conditional_statement
$pdata$cctree_while_statement DD imagerel cctree_while_statement
	DD	imagerel cctree_while_statement+76
	DD	imagerel $unwind$cctree_while_statement
$pdata$cctree_label_statement DD imagerel cctree_label_statement
	DD	imagerel cctree_label_statement+91
	DD	imagerel $unwind$cctree_label_statement
$pdata$cctree_goto_statement DD imagerel cctree_goto_statement
	DD	imagerel cctree_goto_statement+72
	DD	imagerel $unwind$cctree_goto_statement
$pdata$cctree_return_statement DD imagerel cctree_return_statement
	DD	imagerel cctree_return_statement+48
	DD	imagerel $unwind$cctree_return_statement
$pdata$ccread_block_stmt DD imagerel ccread_block_stmt
	DD	imagerel ccread_block_stmt+140
	DD	imagerel $unwind$ccread_block_stmt
$pdata$ccread_stmt_list DD imagerel ccread_stmt_list
	DD	imagerel ccread_stmt_list+140
	DD	imagerel $unwind$ccread_stmt_list
$pdata$ccread_stmt DD imagerel ccread_stmt
	DD	imagerel ccread_stmt+2033
	DD	imagerel $unwind$ccread_stmt
$pdata$ccread_block_or_single_stmt DD imagerel ccread_block_or_single_stmt
	DD	imagerel ccread_block_or_single_stmt+57
	DD	imagerel $unwind$ccread_block_or_single_stmt
$pdata$ccread_external_declaration DD imagerel ccread_external_declaration
	DD	imagerel ccread_external_declaration+488
	DD	imagerel $unwind$ccread_external_declaration
$pdata$ccread_translation_unit DD imagerel ccread_translation_unit
	DD	imagerel ccread_translation_unit+124
	DD	imagerel $unwind$ccread_translation_unit
$pdata$ccvm_value_init DD imagerel ccvm_value_init
	DD	imagerel ccvm_value_init+71
	DD	imagerel $unwind$ccvm_value_init
$pdata$ccemit_const_classic_value DD imagerel ccemit_const_classic_value
	DD	imagerel ccemit_const_classic_value+109
	DD	imagerel $unwind$ccemit_const_classic_value
$pdata$ccemit_const_i32 DD imagerel ccemit_const_i32
	DD	imagerel ccemit_const_i32+51
	DD	imagerel $unwind$ccemit_const_i32
$pdata$ccmapget DD imagerel ccmapget
	DD	imagerel ccmapget+192
	DD	imagerel $unwind$ccmapget
$pdata$ccmapput DD imagerel ccmapput
	DD	imagerel ccmapput+127
	DD	imagerel $unwind$ccmapput
$pdata$ccblock_init DD imagerel ccblock_init
	DD	imagerel ccblock_init+143
	DD	imagerel $unwind$ccblock_init
$pdata$ccvm_global_ex DD imagerel ccvm_global_ex
	DD	imagerel ccvm_global_ex+99
	DD	imagerel $unwind$ccvm_global_ex
$pdata$ccvm_local DD imagerel ccvm_local
	DD	imagerel ccvm_local+109
	DD	imagerel $unwind$ccvm_local
$pdata$ccvm_block DD imagerel ccvm_block
	DD	imagerel ccvm_block+55
	DD	imagerel $unwind$ccvm_block
$pdata$ccvm_label DD imagerel ccvm_label
	DD	imagerel ccvm_label+183
	DD	imagerel $unwind$ccvm_label
$pdata$ccvm_instrvalue DD imagerel ccvm_instrvalue
	DD	imagerel ccvm_instrvalue+65
	DD	imagerel $unwind$ccvm_instrvalue
$pdata$ccvm_addir DD imagerel ccvm_addir
	DD	imagerel ccvm_addir+99
	DD	imagerel $unwind$ccvm_addir
$pdata$ccemit_binary DD imagerel ccemit_binary
	DD	imagerel ccemit_binary+123
	DD	imagerel $unwind$ccemit_binary
$pdata$ccemit_store DD imagerel ccemit_store
	DD	imagerel ccemit_store+201
	DD	imagerel $unwind$ccemit_store
$pdata$ccemit_condi DD imagerel ccemit_condi
	DD	imagerel ccemit_condi+138
	DD	imagerel $unwind$ccemit_condi
$pdata$ccemit_block DD imagerel ccemit_block
	DD	imagerel ccemit_block+87
	DD	imagerel $unwind$ccemit_block
$pdata$ccemit_return DD imagerel ccemit_return
	DD	imagerel ccemit_return+55
	DD	imagerel $unwind$ccemit_return
$pdata$ccemit_enter DD imagerel ccemit_enter
	DD	imagerel ccemit_enter+87
	DD	imagerel $unwind$ccemit_enter
$pdata$ccemit_tree DD imagerel ccemit_tree
	DD	imagerel ccemit_tree+1678
	DD	imagerel $unwind$ccemit_tree
$pdata$ccemit_treelist DD imagerel ccemit_treelist
	DD	imagerel ccemit_treelist+195
	DD	imagerel $unwind$ccemit_treelist
$pdata$ccemit_decl_name DD imagerel ccemit_decl_name
	DD	imagerel ccemit_decl_name+341
	DD	imagerel $unwind$ccemit_decl_name
$pdata$ccemit_decl DD imagerel ccemit_decl
	DD	imagerel ccemit_decl+275
	DD	imagerel $unwind$ccemit_decl
$pdata$ccemit_function DD imagerel ccemit_function
	DD	imagerel ccemit_function+905
	DD	imagerel $unwind$ccemit_function
$pdata$ccemit_translation_unit DD imagerel ccemit_translation_unit
	DD	imagerel ccemit_translation_unit+775
	DD	imagerel $unwind$ccemit_translation_unit
$pdata$ccemit_init DD imagerel ccemit_init
	DD	imagerel ccemit_init+94
	DD	imagerel $unwind$ccemit_init
$pdata$gen_type DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$gen_type
$pdata$gen_vectype DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$gen_vectype
$pdata$gen_ptrtype DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$gen_ptrtype
$pdata$gen_vartype DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$gen_vartype
$pdata$gen_fixtype DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$gen_fixtype
$pdata$gen_typename_ex DD imagerel $LN9
	DD	imagerel $LN9+277
	DD	imagerel $unwind$gen_typename_ex
$pdata$gen_typename DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$gen_typename
$pdata$emit_typename DD imagerel $LN3
	DD	imagerel $LN3+49
	DD	imagerel $unwind$emit_typename
$pdata$emit_modifier DD imagerel $LN6
	DD	imagerel $LN6+90
	DD	imagerel $unwind$emit_modifier
$pdata$emit_vardecl_ex DD imagerel $LN19
	DD	imagerel $LN19+213
	DD	imagerel $unwind$emit_vardecl_ex
$pdata$emit_vardecl DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$emit_vardecl
$pdata$emit_fundecl DD imagerel $LN9
	DD	imagerel $LN9+232
	DD	imagerel $unwind$emit_fundecl
$pdata$genmake DD imagerel $LN6
	DD	imagerel $LN6+276
	DD	imagerel $unwind$genmake
$pdata$emit_vecoprari DD imagerel $LN8
	DD	imagerel $LN8+412
	DD	imagerel $unwind$emit_vecoprari
$pdata$emit_vectype DD imagerel $LN7
	DD	imagerel $LN7+462
	DD	imagerel $unwind$emit_vectype
$pdata$emit_type DD imagerel $LN7
	DD	imagerel $LN7+182
	DD	imagerel $unwind$emit_type
$pdata$ccsvm_execbinary DD imagerel ccsvm_execbinary
	DD	imagerel ccsvm_execbinary+744
	DD	imagerel $unwind$ccsvm_execbinary
$pdata$ccvm_exec_instr DD imagerel ccvm_exec_instr
	DD	imagerel ccvm_exec_instr+1132
	DD	imagerel $unwind$ccvm_exec_instr
$pdata$ccvm_exec DD imagerel ccvm_exec
	DD	imagerel ccvm_exec+528
	DD	imagerel $unwind$ccvm_exec
$pdata$ccexec_init DD imagerel ccexec_init
	DD	imagerel ccexec_init+37
	DD	imagerel $unwind$ccexec_init
$pdata$ccexec_translation_unit DD imagerel ccexec_translation_unit
	DD	imagerel ccexec_translation_unit+157
	DD	imagerel $unwind$ccexec_translation_unit
$pdata$main DD	imagerel $LN8
	DD	imagerel $LN8+559
	DD	imagerel $unwind$main
pdata	ENDS
CRT$XCU	SEGMENT
?ctype_flo32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_flo32@@YAXXZ ; ctype_flo32$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@4090000000000000
CONST	SEGMENT
__real@4090000000000000 DQ 04090000000000000r	; 1024
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT ?ts@?2??main@@9@4QBUkttcc_type@@B
CONST	SEGMENT
?ts@?2??main@@9@4QBUkttcc_type@@B DD 02H		; `main'::`3'::ts
	DD	03H
	DD	040H
	DD	020H
	ORG $+16
	DD	02H
	DD	00H
	DD	040H
	DD	08H
	ORG $+16
	DD	02H
	DD	01H
	DD	040H
	DD	08H
	ORG $+16
	DD	02H
	DD	02H
	DD	08H
	DD	08H
	ORG $+16
CONST	ENDS
;	COMDAT ?hexu@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hexu@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789ABCDEFXP', 00H ; `stbsp_vsprintfcb'::`2'::hexu
_DATA	ENDS
;	COMDAT ?hex@?1??stbsp_vsprintfcb@@9@4PADA
_DATA	SEGMENT
?hex@?1??stbsp_vsprintfcb@@9@4PADA DB '0123456789abcdefxp', 00H ; `stbsp_vsprintfcb'::`2'::hex
_DATA	ENDS
_DATA	SEGMENT
stbsp__period DB 02eH
stbsp__comma DB	02cH
	ORG $+6
stbsp__digitpair DW 00H
	DB	'00010203040506070809101112131415161718192021222324252627'
	DB	'2829303132333435363738394041424344454647484950515253545556575'
	DB	'8596061626364656667686970717273747576777879808182838485868788'
	DB	'8990919293949596979899', 00H
	ORG $+1
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_void@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint8@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint16@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_uint64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int8@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int16@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_int64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_flo64@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__Ectype_flo32@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsnprintf
	DD	024H
	DD	0117H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbsp_vsprintfcb
	DD	025H
	DD	02f34H
	DD	02f36H
	DD	036f8H
voltbl	ENDS
xdata	SEGMENT
$unwind$ccrealfile DD 010901H
	DD	02209H
$unwind$ccclosefile DD 010901H
	DD	04209H
$unwind$ccopenfile DD 010901H
	DD	0a209H
$unwind$ccpullfile DD 011201H
	DD	0a212H
$unwind$ccpushfile DD 011701H
	DD	08217H
$unwind$ccfilesize DD 010901H
	DD	04209H
$unwind$stbsp_vsprintf DD 011301H
	DD	06213H
$unwind$stbsp_vsnprintf DD 022c19H
	DD	04d011aH
	DD	imagerel __GSHandlerCheck
	DD	0250H
$unwind$stbsp_sprintf DD 011801H
	DD	08218H
$unwind$stbsp_snprintf DD 011701H
	DD	06217H
$unwind$stbsp_vsprintfcb DD 022d19H
	DD	097011bH
	DD	imagerel __GSHandlerCheck
	DD	04a0H
$unwind$stbsp__real_to_str DD 021b01H
	DD	017011bH
$unwind$stbsp__real_to_parts DD 011401H
	DD	04214H
$unwind$stbsp__strlen_limited DD 010d01H
	DD	0220dH
$unwind$stbsp__clamp_callback DD 011301H
	DD	06213H
$unwind$stbsp__count_clamp_callback DD 011301H
	DD	02213H
$unwind$stbsp__raise_to_power10 DD 021c01H
	DD	035011cH
$unwind$ccout DD 010901H
	DD	04209H
$unwind$cctrace_ DD 011701H
	DD	0a217H
$unwind$ccformatvex DD 011701H
	DD	04217H
$unwind$ccformatv DD 010e01H
	DD	0420eH
$unwind$ccformatex DD 011701H
	DD	06217H
$unwind$ccformat DD 011801H
	DD	06218H
$unwind$ccdlb_arradd_ DD 011201H
	DD	08212H
$unwind$ccdlb_arradd DD 011701H
	DD	08217H
$unwind$ccdlb_stradd DD 011701H
	DD	06217H
$unwind$cctbl_set_ DD 011701H
	DD	0e217H
$unwind$cctbl_set DD 011701H
	DD	0a217H
$unwind$ccstr_vcatf DD 011301H
	DD	06213H
$unwind$ccstr_catf DD 011801H
	DD	06218H
$unwind$ccdlb_test DD 020701H
	DD	0130107H
$unwind$cctree_idenname DD 010901H
	DD	02209H
$unwind$cclex_init DD 030b01H
	DD	07007c20bH
	DD	06006H
$unwind$cclex_next_token DD 010901H
	DD	06209H
$unwind$cclex_token DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$ccpeep DD 010901H
	DD	04209H
$unwind$ccsee DD 010d01H
	DD	0620dH
$unwind$ccgobble DD 010901H
	DD	06209H
$unwind$ccread_decl_name DD 010e01H
	DD	0420eH
$unwind$ccread_init_decl_name_list DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$ccread_init_decl DD 010901H
	DD	08209H
$unwind$ccread_declaration_specifiers DD 010901H
	DD	06209H
$unwind$ccread_specifier_qualifier_list DD 010901H
	DD	06209H
$unwind$ccread_assignment_expr DD 010901H
	DD	08209H
$unwind$ccread_expression DD 010901H
	DD	06209H
$unwind$ccread_cast_expr DD 010901H
	DD	08209H
$unwind$cctype_del DD 010901H
	DD	04209H
$unwind$cctype_new DD 010d01H
	DD	0620dH
$unwind$cctype_clone DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$cctype_new_ptr DD 010901H
	DD	06209H
$unwind$cctype_new_arr DD 010901H
	DD	06209H
$unwind$cctype_new_fun DD 010e01H
	DD	0620eH
$unwind$cctree_del DD 010901H
	DD	04209H
$unwind$cctree_new DD 010801H
	DD	06208H
$unwind$cctree_new_constant DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$cctree_new_top DD 031a01H
	DD	07016621aH
	DD	06015H
$unwind$cctree_binary DD 031501H
	DD	070116215H
	DD	06010H
$unwind$cctree_new_uop DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$cctree_new_designator DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$cctree_new_designation DD 010e01H
	DD	0620eH
$unwind$cctree_new_identifier DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$ccread_init DD 010901H
	DD	04209H
$unwind$ccread_uninit DD 010901H
	DD	06209H
$unwind$ccread_all_tokens DD 010901H
	DD	06209H
$unwind$ccreader_move DD 011301H
	DD	06213H
$unwind$ccread_include DD 010e01H
	DD	0820eH
$unwind$ccsee_end DD 010901H
	DD	04209H
$unwind$kttc__peek_alignment_specifier DD 010901H
	DD	06209H
$unwind$kttc__peek_type_qualifier DD 010901H
	DD	06209H
$unwind$ccsee_typespec DD 010901H
	DD	06209H
$unwind$kttc__peek_storage_class DD 010901H
	DD	06209H
$unwind$kttc__peek_func_specifier DD 010901H
	DD	06209H
$unwind$cceat DD 010d01H
	DD	0420dH
$unwind$cctype_new_struct_spec DD 010e01H
	DD	0620eH
$unwind$cctree_decl_name DD 011801H
	DD	06218H
$unwind$cctree_decl DD 010e01H
	DD	0620eH
$unwind$cclex_hashfunc DD 010d01H
	DD	0220dH
$unwind$cclex_hash DD 011701H
	DD	0e217H
$unwind$cclex_hashonly DD 011701H
	DD	08217H
$unwind$cclex_hash_init DD 010901H
	DD	04209H
$unwind$cclex_idenlen DD 010901H
	DD	02209H
$unwind$cclex_next_token_internal DD 010901H
	DD	0a209H
$unwind$cclex_identifier DD 010e01H
	DD	0820eH
$unwind$cclex_readstr DD 010e01H
	DD	0820eH
$unwind$ccread_arglist_expr DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$cctree_paren_expr DD 010901H
	DD	06209H
$unwind$cctree_call_expr DD 010e01H
	DD	0620eH
$unwind$ccread_identifier DD 010901H
	DD	04209H
$unwind$ccread_primary_expr DD 010901H
	DD	08209H
$unwind$ccread_postfix_expr DD 010901H
	DD	0c209H
$unwind$ccread_unary_expr DD 040e01H
	DD	023010eH
	DD	060067007H
$unwind$ccread_multiplicative_expr DD 010901H
	DD	08209H
$unwind$ccread_additive_expr DD 010901H
	DD	08209H
$unwind$ccread_shift_expr DD 010901H
	DD	08209H
$unwind$ccread_relational_expr DD 010901H
	DD	08209H
$unwind$ccread_equality_expr DD 010901H
	DD	08209H
$unwind$ccread_bitwise_and_expr DD 010901H
	DD	08209H
$unwind$ccread_bitwise_xor_expr DD 010901H
	DD	08209H
$unwind$ccread_bitwise_or_expr DD 010901H
	DD	08209H
$unwind$ccread_logical_and_expr DD 010901H
	DD	08209H
$unwind$ccread_logical_or_expr DD 010901H
	DD	08209H
$unwind$ccread_conditional_expr DD 010901H
	DD	0a209H
$unwind$ccread_constant_expression DD 010901H
	DD	04209H
$unwind$ccread_param_type_list DD 010901H
	DD	06209H
$unwind$ccread_initializer DD 010901H
	DD	08209H
$unwind$ccread_designator DD 010901H
	DD	08209H
$unwind$ccread_designator_list DD 010901H
	DD	06209H
$unwind$ccread_init_designation DD 010901H
	DD	08209H
$unwind$ccread_initializer_list DD 010901H
	DD	08209H
$unwind$ccread_direct_decl_name_modifier DD 010e01H
	DD	0a20eH
$unwind$ccread_direct_decl_name DD 031001H
	DD	0700cc210H
	DD	0600bH
$unwind$ccread_decl_name_modifier_maybe DD 010e01H
	DD	0420eH
$unwind$ccread_init_decl_name DD 010e01H
	DD	0820eH
$unwind$ccread_struct_decl_name DD 010e01H
	DD	0820eH
$unwind$ccread_struct_decl_name_list DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$ccread_struct_decl DD 010901H
	DD	08209H
$unwind$ccread_struct_decl_list DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$ccread_struct_or_union_specifier DD 010901H
	DD	0a209H
$unwind$ccread_type_specifier DD 010901H
	DD	06209H
$unwind$ccread_storage_class_specifier DD 010901H
	DD	06209H
$unwind$ccread_type_qualifier DD 010901H
	DD	06209H
$unwind$ccread_function_specifier DD 010901H
	DD	06209H
$unwind$ccread_alignment_specifier DD 010901H
	DD	06209H
$unwind$ccread_param_decl DD 010901H
	DD	08209H
$unwind$ccread_param_decl_list DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$cctree_block_stmt DD 010e01H
	DD	0620eH
$unwind$cctree_conditional_statement DD 011301H
	DD	06213H
$unwind$cctree_while_statement DD 010e01H
	DD	0620eH
$unwind$cctree_label_statement DD 010e01H
	DD	0620eH
$unwind$cctree_goto_statement DD 010901H
	DD	06209H
$unwind$cctree_return_statement DD 010901H
	DD	06209H
$unwind$ccread_block_stmt DD 010901H
	DD	08209H
$unwind$ccread_stmt_list DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$ccread_stmt DD 020c01H
	DD	011010cH
$unwind$ccread_block_or_single_stmt DD 010901H
	DD	06209H
$unwind$ccread_external_declaration DD 010901H
	DD	08209H
$unwind$ccread_translation_unit DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$ccvm_value_init DD 011201H
	DD	04212H
$unwind$ccemit_const_classic_value DD 011301H
	DD	06213H
$unwind$ccemit_const_i32 DD 010e01H
	DD	0620eH
$unwind$ccmapget DD 010e01H
	DD	0820eH
$unwind$ccmapput DD 010e01H
	DD	0620eH
$unwind$ccblock_init DD 011301H
	DD	04213H
$unwind$ccvm_global_ex DD 011201H
	DD	06212H
$unwind$ccvm_local DD 011201H
	DD	06212H
$unwind$ccvm_block DD 010e01H
	DD	0620eH
$unwind$ccvm_label DD 011301H
	DD	08213H
$unwind$ccvm_instrvalue DD 010e01H
	DD	0620eH
$unwind$ccvm_addir DD 010901H
	DD	06209H
$unwind$ccemit_binary DD 031a01H
	DD	07016621aH
	DD	06015H
$unwind$ccemit_store DD 011301H
	DD	0c213H
$unwind$ccemit_condi DD 011801H
	DD	06218H
$unwind$ccemit_block DD 010e01H
	DD	0620eH
$unwind$ccemit_return DD 010901H
	DD	06209H
$unwind$ccemit_enter DD 010e01H
	DD	0620eH
$unwind$ccemit_tree DD 041d01H
	DD	027011dH
	DD	060157016H
$unwind$ccemit_treelist DD 011801H
	DD	08218H
$unwind$ccemit_decl_name DD 011301H
	DD	0a213H
$unwind$ccemit_decl DD 011301H
	DD	08213H
$unwind$ccemit_function DD 011801H
	DD	0a218H
$unwind$ccemit_translation_unit DD 021101H
	DD	0110111H
$unwind$ccemit_init DD 010901H
	DD	04209H
$unwind$gen_type DD 010801H
	DD	06208H
$unwind$gen_vectype DD 010d01H
	DD	0620dH
$unwind$gen_ptrtype DD 010901H
	DD	06209H
$unwind$gen_vartype DD 011101H
	DD	06211H
$unwind$gen_fixtype DD 010c01H
	DD	0620cH
$unwind$gen_typename_ex DD 011301H
	DD	08213H
$unwind$gen_typename DD 010901H
	DD	04209H
$unwind$emit_typename DD 010e01H
	DD	0420eH
$unwind$emit_modifier DD 010d01H
	DD	0420dH
$unwind$emit_vardecl_ex DD 011801H
	DD	04218H
$unwind$emit_vardecl DD 011301H
	DD	04213H
$unwind$emit_fundecl DD 011801H
	DD	06218H
$unwind$genmake DD 010e01H
	DD	0820eH
$unwind$emit_vecoprari DD 011301H
	DD	08213H
$unwind$emit_vectype DD 010e01H
	DD	0620eH
$unwind$emit_type DD 010e01H
	DD	0620eH
$unwind$ccsvm_execbinary DD 031a01H
	DD	07016c21aH
	DD	06015H
$unwind$ccvm_exec_instr DD 041801H
	DD	01d0118H
	DD	060107011H
$unwind$ccvm_exec DD 021101H
	DD	0110111H
$unwind$ccexec_init DD 010901H
	DD	04209H
$unwind$ccexec_translation_unit DD 010e01H
	DD	0820eH
$unwind$main DD	021001H
	DD	0270110H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
CRT$XCU	SEGMENT
?ctype_flo64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_flo64@@YAXXZ ; ctype_flo64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int64@@YAXXZ ; ctype_int64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int32@@YAXXZ ; ctype_int32$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int16$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int16@@YAXXZ ; ctype_int16$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_int8$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_int8@@YAXXZ ; ctype_int8$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint64$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint64@@YAXXZ ; ctype_uint64$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint32$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint32@@YAXXZ ; ctype_uint32$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint16$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint16@@YAXXZ ; ctype_uint16$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_uint8$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_uint8@@YAXXZ ; ctype_uint8$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?ctype_void$initializer$@@3P6AXXZEA DQ FLAT:??__Ectype_void@@YAXXZ ; ctype_void$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
tv154 = 52
out$2 = 56
file$3 = 64
tv130 = 72
emit$ = 80
exec$ = 104
read$ = 144
argc$ = 320
argv$ = 328
main	PROC
; File W:\cpp\void\ktt-c\test.c
; Line 5
$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 312				; 00000138H
; Line 6
	mov	rax, QWORD PTR argv$[rsp]
	add	rax, 8
	mov	QWORD PTR argv$[rsp], rax
; Line 7
	mov	eax, DWORD PTR argc$[rsp]
	dec	eax
	mov	DWORD PTR argc$[rsp], eax
; Line 9
	lea	rax, OFFSET FLAT:$SG48088
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48089
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48090
	mov	r8d, 9
	lea	rdx, OFFSET FLAT:$SG48091
	mov	ecx, 51					; 00000033H
	call	cctrace_
; Line 10
	lea	rax, OFFSET FLAT:$SG48092
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48093
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48094
	mov	r8d, 10
	lea	rdx, OFFSET FLAT:$SG48095
	mov	ecx, 52					; 00000034H
	call	cctrace_
; Line 11
	lea	rax, OFFSET FLAT:$SG48096
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48097
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48098
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:$SG48099
	mov	ecx, 53					; 00000035H
	call	cctrace_
; Line 13
	call	ccdlb_test
; Line 16
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_init
; Line 17
	lea	rdx, OFFSET FLAT:$SG48100
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_include
; Line 20
	lea	rcx, QWORD PTR emit$[rsp]
	call	ccemit_init
; Line 21
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_translation_unit
	mov	rdx, rax
	lea	rcx, QWORD PTR emit$[rsp]
	call	ccemit_translation_unit
; Line 24
	lea	rcx, QWORD PTR exec$[rsp]
	call	ccexec_init
; Line 25
	lea	rdx, QWORD PTR emit$[rsp]
	lea	rcx, QWORD PTR exec$[rsp]
	call	ccexec_translation_unit
; Line 27
	lea	rcx, QWORD PTR read$[rsp]
	call	ccread_uninit
; Line 32
	mov	QWORD PTR out$2[rsp], 0
; Line 34
	lea	rcx, OFFSET FLAT:$SG48102
	call	strlen
	mov	QWORD PTR tv130[rsp], rax
	lea	rcx, OFFSET FLAT:$SG48103
	call	strlen
	inc	eax
	lea	r9, OFFSET FLAT:$SG48101
	mov	rcx, QWORD PTR tv130[rsp]
	mov	r8d, ecx
	mov	edx, eax
	lea	rcx, QWORD PTR out$2[rsp]
	call	ccdlb_stradd
; Line 67
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@main:
	movsxd	rax, DWORD PTR i$1[rsp]
	cmp	rax, 4
	jae	SHORT $LN3@main
; Line 68
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rcx, OFFSET FLAT:?ts@?2??main@@9@4QBUkttcc_type@@B
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, rax
	lea	rcx, QWORD PTR out$2[rsp]
	call	emit_type
; Line 69
	jmp	SHORT $LN2@main
$LN3@main:
; Line 71
	lea	rcx, OFFSET FLAT:$SG48104
	call	ccopenfile
	mov	QWORD PTR file$3[rsp], rax
; Line 72
	cmp	QWORD PTR out$2[rsp], 0
	je	SHORT $LN6@main
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv154[rsp], eax
	jmp	SHORT $LN7@main
$LN6@main:
	mov	DWORD PTR tv154[rsp], 0
$LN7@main:
	mov	r9, QWORD PTR out$2[rsp]
	mov	r8d, DWORD PTR tv154[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR file$3[rsp]
	call	ccpushfile
; Line 73
	mov	rcx, QWORD PTR file$3[rsp]
	call	ccclosefile
; Line 76
	xor	eax, eax
	add	rsp, 312				; 00000138H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
entryV$ = 48
entryF$ = 56
exec$ = 80
emit$ = 88
ccexec_translation_unit PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 159
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 160
	mov	rax, QWORD PTR exec$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 162
	lea	rdx, OFFSET FLAT:$SG48019
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	ccmapget
	mov	QWORD PTR entryV$[rsp], rax
; Line 163
	cmp	QWORD PTR entryV$[rsp], 0
	jne	SHORT $LN2@ccexec_tra
	lea	rax, OFFSET FLAT:$SG48021
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48022
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48023
	mov	r8d, 163				; 000000a3H
	lea	rdx, OFFSET FLAT:$SG48024
	mov	ecx, 50					; 00000032H
	call	cctrace_
$LN2@ccexec_tra:
; Line 165
	mov	rax, QWORD PTR entryV$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR entryF$[rsp], rax
; Line 167
	mov	rax, QWORD PTR entryF$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR exec$[rsp]
	call	ccvm_exec
; Line 169
	mov	eax, 1
; Line 170
	add	rsp, 72					; 00000048H
	ret	0
ccexec_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
exec$ = 48
ccexec_init PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 153
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR exec$[rsp]
	call	memset
; Line 154
	mov	eax, 1
; Line 155
	add	rsp, 40					; 00000028H
	ret	0
ccexec_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 80
tv78 = 84
tv133 = 88
tv71 = 96
tv93 = 104
ir$1 = 112
vm$ = 144
block$ = 152
ccvm_exec PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 138
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+160], 0
	je	SHORT $LN8@ccvm_exec
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+160]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN9@ccvm_exec
$LN8@ccvm_exec:
	mov	DWORD PTR tv69[rsp], 0
$LN9@ccvm_exec:
	mov	rax, QWORD PTR block$[rsp]
	cmp	QWORD PTR [rax+152], 0
	je	SHORT $LN10@ccvm_exec
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR [rcx+152]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN11@ccvm_exec
$LN10@ccvm_exec:
	mov	DWORD PTR tv78[rsp], 0
$LN11@ccvm_exec:
	mov	eax, DWORD PTR tv69[rsp]
	xor	edx, edx
	mov	ecx, 160				; 000000a0H
	div	rcx
	mov	QWORD PTR tv71[rsp], rax
	mov	ecx, DWORD PTR tv78[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 136				; 00000088H
	div	rcx
	mov	rcx, QWORD PTR tv71[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG48002
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG48003
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG48004
	mov	r8d, 138				; 0000008aH
	lea	rdx, OFFSET FLAT:$SG48005
	mov	ecx, 49					; 00000031H
	call	cctrace_
; Line 140
	mov	rdx, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR vm$[rsp]
	call	ccvm_enter
$LN4@ccvm_exec:
; Line 143
	mov	rax, QWORD PTR vm$[rsp]
	mov	rax, QWORD PTR [rax+16]
	cmp	QWORD PTR [rax+160], 0
	je	SHORT $LN12@ccvm_exec
	mov	rax, QWORD PTR vm$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	rax, QWORD PTR [rax+160]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv133[rsp], eax
	jmp	SHORT $LN13@ccvm_exec
$LN12@ccvm_exec:
	mov	DWORD PTR tv133[rsp], 0
$LN13@ccvm_exec:
	mov	rax, QWORD PTR vm$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	QWORD PTR tv93[rsp], rax
	mov	ecx, DWORD PTR tv133[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 160				; 000000a0H
	div	rcx
	mov	rcx, QWORD PTR tv93[rsp]
	cmp	rcx, rax
	jae	SHORT $LN5@ccvm_exec
; Line 144
	mov	rax, QWORD PTR vm$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR vm$[rsp]
	movsxd	rcx, DWORD PTR [rcx+24]
	imul	rcx, rcx, 160				; 000000a0H
	add	rcx, QWORD PTR [rax+160]
	mov	rax, rcx
	mov	QWORD PTR ir$1[rsp], rax
	mov	rax, QWORD PTR vm$[rsp]
	mov	eax, DWORD PTR [rax+24]
	inc	eax
	mov	rcx, QWORD PTR vm$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 145
	mov	r8, QWORD PTR ir$1[rsp]
	mov	rax, QWORD PTR vm$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR vm$[rsp]
	call	ccvm_exec_instr
	jmp	SHORT $LN6@ccvm_exec
$LN5@ccvm_exec:
; Line 146
	mov	rcx, QWORD PTR vm$[rsp]
	call	ccvm_exit
$LN6@ccvm_exec:
; Line 148
	mov	rax, QWORD PTR vm$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	$LN4@ccvm_exec
; Line 149
	add	rsp, 136				; 00000088H
	ret	0
ccvm_exec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vm$ = 8
ccvm_exit PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 132
	mov	QWORD PTR [rsp+8], rcx
; Line 133
	mov	rax, QWORD PTR vm$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 134
	ret	0
ccvm_exit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 96
tv171 = 100
local$1 = 104
lhs$2 = 112
rhs$3 = 120
it$4 = 128
tv181 = 136
address$5 = 144
tv224 = 152
$T6 = 160
vm$ = 256
irset$ = 264
instr$ = 272
ccvm_exec_instr PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 63
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 64
	mov	rax, QWORD PTR instr$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 5
	ja	$LN20@ccvm_exec_
	movsxd	rax, DWORD PTR tv65[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN27@ccvm_exec_[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN7@ccvm_exec_:
; Line 69
	mov	rax, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR local$1[rsp], rax
; Line 70
	cmp	QWORD PTR local$1[rsp], 0
	jne	SHORT $LN8@ccvm_exec_
	int	3
$LN8@ccvm_exec_:
; Line 71
	mov	rax, QWORD PTR local$1[rsp]
	mov	eax, DWORD PTR [rax+128]
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN9@ccvm_exec_
	int	3
$LN9@ccvm_exec_:
; Line 73
	mov	ecx, 8
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR local$1[rsp]
	mov	QWORD PTR [rcx+120], rax
; Line 75
	mov	rax, QWORD PTR local$1[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR local$1[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR irset$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47966
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47967
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47968
	mov	r8d, 75					; 0000004bH
	lea	rdx, OFFSET FLAT:$SG47969
	mov	ecx, 47					; 0000002fH
	call	cctrace_
; Line 76
	jmp	$LN2@ccvm_exec_
$LN10@ccvm_exec_:
; Line 80
	mov	rax, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR lhs$2[rsp], rax
; Line 81
	mov	rax, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR rhs$3[rsp], rax
; Line 83
	mov	rax, QWORD PTR lhs$2[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN11@ccvm_exec_
	int	3
$LN11@ccvm_exec_:
; Line 84
	cmp	QWORD PTR lhs$2[rsp], 0
	jne	SHORT $LN12@ccvm_exec_
	int	3
$LN12@ccvm_exec_:
; Line 85
	cmp	QWORD PTR rhs$3[rsp], 0
	jne	SHORT $LN13@ccvm_exec_
	int	3
$LN13@ccvm_exec_:
; Line 87
	mov	rax, QWORD PTR lhs$2[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR address$5[rsp], rax
; Line 88
	mov	rax, QWORD PTR rhs$3[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	rcx, QWORD PTR address$5[rsp]
	mov	QWORD PTR [rcx], rax
; Line 90
	mov	rax, QWORD PTR rhs$3[rsp]
	mov	eax, DWORD PTR [rax+112]
	mov	DWORD PTR [rsp+80], eax
	mov	rax, QWORD PTR rhs$3[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR lhs$2[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR lhs$2[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR irset$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47974
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47975
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47976
	mov	r8d, 91					; 0000005bH
	lea	rdx, OFFSET FLAT:$SG47977
	mov	ecx, 48					; 00000030H
	call	cctrace_
; Line 100
	jmp	$LN2@ccvm_exec_
$LN14@ccvm_exec_:
; Line 104
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rcx+rax+128]
	mov	rax, QWORD PTR [rax+160]
	mov	QWORD PTR it$4[rsp], rax
	jmp	SHORT $LN6@ccvm_exec_
$LN4@ccvm_exec_:
	mov	rax, QWORD PTR it$4[rsp]
	add	rax, 160				; 000000a0H
	mov	QWORD PTR it$4[rsp], rax
$LN6@ccvm_exec_:
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rcx+rax+128]
	cmp	QWORD PTR [rax+160], 0
	je	$LN25@ccvm_exec_
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rcx+rax+128]
	cmp	QWORD PTR [rax+160], 0
	je	SHORT $LN23@ccvm_exec_
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rcx+rax+128]
	mov	ecx, 4
	imul	rcx, rcx, -1
	mov	rax, QWORD PTR [rax+160]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv171[rsp], eax
	jmp	SHORT $LN24@ccvm_exec_
$LN23@ccvm_exec_:
	mov	DWORD PTR tv171[rsp], 0
$LN24@ccvm_exec_:
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rcx+rax+128]
	mov	QWORD PTR tv224[rsp], rax
	mov	ecx, DWORD PTR tv171[rsp]
	xor	edx, edx
	mov	eax, ecx
	mov	ecx, 160				; 000000a0H
	div	rcx
	imul	rax, rax, 160				; 000000a0H
	mov	rcx, QWORD PTR tv224[rsp]
	add	rax, QWORD PTR [rcx+160]
	mov	QWORD PTR tv181[rsp], rax
	jmp	SHORT $LN26@ccvm_exec_
$LN25@ccvm_exec_:
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rcx+rax+128]
	mov	rax, QWORD PTR [rax+160]
	mov	QWORD PTR tv181[rsp], rax
$LN26@ccvm_exec_:
	mov	rax, QWORD PTR tv181[rsp]
	cmp	QWORD PTR it$4[rsp], rax
	jae	SHORT $LN5@ccvm_exec_
; Line 106
	mov	r8, QWORD PTR it$4[rsp]
	mov	rdx, QWORD PTR irset$[rsp]
	mov	rcx, QWORD PTR vm$[rsp]
	call	ccvm_exec_instr
; Line 107
	jmp	$LN4@ccvm_exec_
$LN5@ccvm_exec_:
; Line 108
	jmp	$LN2@ccvm_exec_
$LN15@ccvm_exec_:
; Line 110
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+128]
	mov	rcx, QWORD PTR vm$[rsp]
	call	ccvm_enter
; Line 111
	jmp	$LN2@ccvm_exec_
$LN16@ccvm_exec_:
; Line 114
	mov	rax, QWORD PTR instr$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+32]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN17@ccvm_exec_
; Line 116
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+128]
	mov	rcx, QWORD PTR vm$[rsp]
	call	ccvm_enter
; Line 117
	jmp	SHORT $LN18@ccvm_exec_
$LN17@ccvm_exec_:
; Line 119
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+128]
	mov	rcx, QWORD PTR vm$[rsp]
	call	ccvm_enter
$LN18@ccvm_exec_:
; Line 121
	jmp	SHORT $LN2@ccvm_exec_
$LN19@ccvm_exec_:
; Line 124
	lea	rax, QWORD PTR $T6[rsp]
	mov	rcx, QWORD PTR instr$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+40]
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR instr$[rsp]
	mov	r9, QWORD PTR [rax+112]
	mov	rax, QWORD PTR instr$[rsp]
	mov	r8, QWORD PTR [rax+104]
	lea	rdx, QWORD PTR $T6[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccsvm_execbinary
	mov	rcx, QWORD PTR instr$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 125
	jmp	SHORT $LN2@ccvm_exec_
$LN20@ccvm_exec_:
; Line 126
	lea	rax, OFFSET FLAT:$SG47986
	test	rax, rax
	je	SHORT $LN21@ccvm_exec_
	int	3
$LN21@ccvm_exec_:
$LN2@ccvm_exec_:
; Line 128
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
	npad	3
$LN27@ccvm_exec_:
	DD	$LN10@ccvm_exec_
	DD	$LN7@ccvm_exec_
	DD	$LN19@ccvm_exec_
	DD	$LN14@ccvm_exec_
	DD	$LN16@ccvm_exec_
	DD	$LN15@ccvm_exec_
ccvm_exec_instr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vm$ = 8
block$ = 16
ccvm_enter PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 46
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 47
	cmp	QWORD PTR block$[rsp], 0
	jne	SHORT $LN2@ccvm_enter
	int	3
$LN2@ccvm_enter:
; Line 49
	mov	rax, QWORD PTR vm$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 50
	mov	rax, QWORD PTR vm$[rsp]
	mov	DWORD PTR [rax+24], 0
; Line 51
	ret	0
ccvm_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv131 = 48
tv142 = 56
tv153 = 64
tv164 = 72
tv175 = 80
irset$ = 128
oper$ = 136
lval$ = 144
rval$ = 152
ccsvm_execbinary PROC
; File W:\cpp\void\ktt-c\ccexec.c
; Line 8
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 11
	cmp	QWORD PTR lval$[rsp], 0
	jne	SHORT $LN2@ccsvm_exec
	lea	rax, OFFSET FLAT:$SG47902
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47903
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47904
	mov	r8d, 11
	lea	rdx, OFFSET FLAT:$SG47905
	mov	ecx, 45					; 0000002dH
	call	cctrace_
$LN2@ccsvm_exec:
; Line 12
	cmp	QWORD PTR rval$[rsp], 0
	jne	SHORT $LN3@ccsvm_exec
	lea	rax, OFFSET FLAT:$SG47907
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47908
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47909
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:$SG47910
	mov	ecx, 46					; 0000002eH
	call	cctrace_
$LN3@ccsvm_exec:
; Line 14
	mov	rax, QWORD PTR lval$[rsp]
	cmp	DWORD PTR [rax], 3
	je	SHORT $LN4@ccsvm_exec
	mov	rax, QWORD PTR lval$[rsp]
	cmp	DWORD PTR [rax], 4
	je	SHORT $LN4@ccsvm_exec
	int	3
$LN4@ccsvm_exec:
; Line 15
	mov	rax, QWORD PTR rval$[rsp]
	cmp	DWORD PTR [rax], 3
	je	SHORT $LN5@ccsvm_exec
	mov	rax, QWORD PTR rval$[rsp]
	cmp	DWORD PTR [rax], 4
	je	SHORT $LN5@ccsvm_exec
	int	3
$LN5@ccsvm_exec:
; Line 17
	mov	rax, QWORD PTR oper$[rsp]
	cmp	DWORD PTR [rax], 109			; 0000006dH
	jne	SHORT $LN6@ccsvm_exec
; Line 18
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	lea	rdi, QWORD PTR [rax+16]
	lea	rsi, QWORD PTR [rcx+16]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 19
	mov	rax, QWORD PTR lval$[rsp]
	jmp	$LN1@ccsvm_exec
; Line 20
	jmp	$LN7@ccsvm_exec
$LN6@ccsvm_exec:
; Line 21
	mov	rax, QWORD PTR oper$[rsp]
	cmp	DWORD PTR [rax], 101			; 00000065H
	jne	SHORT $LN8@ccsvm_exec
; Line 22
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+24], rcx
	jne	SHORT $LN22@ccsvm_exec
	mov	QWORD PTR tv131[rsp], 1
	jmp	SHORT $LN23@ccsvm_exec
$LN22@ccsvm_exec:
	mov	QWORD PTR tv131[rsp], 0
$LN23@ccsvm_exec:
	mov	rdx, QWORD PTR tv131[rsp]
	xor	ecx, ecx
	call	ccemit_const_i32
	jmp	$LN1@ccsvm_exec
; Line 23
	jmp	$LN9@ccsvm_exec
$LN8@ccsvm_exec:
; Line 24
	mov	rax, QWORD PTR oper$[rsp]
	cmp	DWORD PTR [rax], 99			; 00000063H
	jne	SHORT $LN10@ccsvm_exec
; Line 25
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+24], rcx
	jbe	SHORT $LN24@ccsvm_exec
	mov	QWORD PTR tv142[rsp], 1
	jmp	SHORT $LN25@ccsvm_exec
$LN24@ccsvm_exec:
	mov	QWORD PTR tv142[rsp], 0
$LN25@ccsvm_exec:
	mov	rdx, QWORD PTR tv142[rsp]
	xor	ecx, ecx
	call	ccemit_const_i32
	jmp	$LN1@ccsvm_exec
; Line 26
	jmp	$LN11@ccsvm_exec
$LN10@ccsvm_exec:
; Line 27
	mov	rax, QWORD PTR oper$[rsp]
	cmp	DWORD PTR [rax], 117			; 00000075H
	jne	SHORT $LN12@ccsvm_exec
; Line 28
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+24], rcx
	jb	SHORT $LN26@ccsvm_exec
	mov	QWORD PTR tv153[rsp], 1
	jmp	SHORT $LN27@ccsvm_exec
$LN26@ccsvm_exec:
	mov	QWORD PTR tv153[rsp], 0
$LN27@ccsvm_exec:
	mov	rdx, QWORD PTR tv153[rsp]
	xor	ecx, ecx
	call	ccemit_const_i32
	jmp	$LN1@ccsvm_exec
; Line 29
	jmp	$LN13@ccsvm_exec
$LN12@ccsvm_exec:
; Line 30
	mov	rax, QWORD PTR oper$[rsp]
	cmp	DWORD PTR [rax], 100			; 00000064H
	jne	SHORT $LN14@ccsvm_exec
; Line 31
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+24], rcx
	jae	SHORT $LN28@ccsvm_exec
	mov	QWORD PTR tv164[rsp], 1
	jmp	SHORT $LN29@ccsvm_exec
$LN28@ccsvm_exec:
	mov	QWORD PTR tv164[rsp], 0
$LN29@ccsvm_exec:
	mov	rdx, QWORD PTR tv164[rsp]
	xor	ecx, ecx
	call	ccemit_const_i32
	jmp	$LN1@ccsvm_exec
; Line 32
	jmp	$LN15@ccsvm_exec
$LN14@ccsvm_exec:
; Line 33
	mov	rax, QWORD PTR oper$[rsp]
	cmp	DWORD PTR [rax], 118			; 00000076H
	jne	SHORT $LN16@ccsvm_exec
; Line 34
	mov	rax, QWORD PTR lval$[rsp]
	mov	rcx, QWORD PTR rval$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rax+24], rcx
	ja	SHORT $LN30@ccsvm_exec
	mov	QWORD PTR tv175[rsp], 1
	jmp	SHORT $LN31@ccsvm_exec
$LN30@ccsvm_exec:
	mov	QWORD PTR tv175[rsp], 0
$LN31@ccsvm_exec:
	mov	rdx, QWORD PTR tv175[rsp]
	xor	ecx, ecx
	call	ccemit_const_i32
	jmp	SHORT $LN1@ccsvm_exec
; Line 35
	jmp	SHORT $LN17@ccsvm_exec
$LN16@ccsvm_exec:
; Line 36
	mov	rax, QWORD PTR oper$[rsp]
	cmp	DWORD PTR [rax], 95			; 0000005fH
	jne	SHORT $LN18@ccsvm_exec
; Line 37
	mov	rax, QWORD PTR lval$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR rval$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rdx, rax
	xor	ecx, ecx
	call	ccemit_const_i32
	jmp	SHORT $LN1@ccsvm_exec
; Line 38
	jmp	SHORT $LN19@ccsvm_exec
$LN18@ccsvm_exec:
; Line 39
	lea	rax, OFFSET FLAT:$SG47928
	test	rax, rax
	je	SHORT $LN20@ccsvm_exec
	int	3
$LN20@ccsvm_exec:
; Line 40
	xor	eax, eax
$LN19@ccsvm_exec:
$LN17@ccsvm_exec:
$LN15@ccsvm_exec:
$LN13@ccsvm_exec:
$LN11@ccsvm_exec:
$LN9@ccsvm_exec:
$LN7@ccsvm_exec:
$LN1@ccsvm_exec:
; Line 42
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
ccsvm_execbinary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
fix$2 = 40
out$ = 64
t$ = 72
emit_type PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 324
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 325
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 2
	jne	$LN5@emit_type
; Line 327
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR i$1[rsp], eax
	jmp	SHORT $LN4@emit_type
$LN2@emit_type:
	mov	eax, DWORD PTR i$1[rsp]
	shl	eax, 1
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_type:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN3@emit_type
; Line 329
	mov	edx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	gen_fixtype
	mov	QWORD PTR fix$2[rsp], rax
; Line 331
	mov	edx, 2
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 332
	mov	edx, 3
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 333
	mov	edx, 4
	mov	rcx, QWORD PTR fix$2[rsp]
	call	gen_vectype
	mov	rdx, rax
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vectype
; Line 334
	jmp	$LN2@emit_type
$LN3@emit_type:
$LN5@emit_type:
; Line 337
	add	rsp, 56					; 00000038H
	ret	0
emit_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
out$ = 64
t$ = 72
emit_vectype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 291
$LN7:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 292
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	$LN5@emit_vecty
; Line 293
	lea	rdx, OFFSET FLAT:$SG47858
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 294
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 295
	lea	rdx, OFFSET FLAT:$SG47859
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 296
	lea	rdx, OFFSET FLAT:$SG47860
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 297
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_vecty
$LN2@emit_vecty:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_vecty:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_vecty
; Line 298
	lea	rdx, OFFSET FLAT:$SG47861
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 299
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	rax, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 300
	lea	rdx, OFFSET FLAT:$SG47862
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 301
	jmp	SHORT $LN2@emit_vecty
$LN3@emit_vecty:
; Line 302
	lea	rdx, OFFSET FLAT:$SG47863
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 303
	lea	rdx, OFFSET FLAT:$SG47864
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 304
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 305
	lea	rdx, OFFSET FLAT:$SG47865
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN5@emit_vecty:
; Line 308
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	genmake
; Line 309
	lea	r8, OFFSET FLAT:$SG47866
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG47867
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 310
	lea	r8, OFFSET FLAT:$SG47868
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG47869
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 311
	lea	r8, OFFSET FLAT:$SG47870
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG47871
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 312
	lea	r8, OFFSET FLAT:$SG47872
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
	lea	r8, OFFSET FLAT:$SG47873
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vecoprari
; Line 321
	add	rsp, 56					; 00000038H
	ret	0
emit_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$ = 80
t$ = 88
opr$ = 96
emit_vecoprari PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 202
$LN8:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 203
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r9, QWORD PTR opr$[rsp]
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG47839
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 205
	mov	rcx, QWORD PTR opr$[rsp]
	call	strlen
	cmp	rax, 2
	jne	SHORT $LN5@emit_vecop
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR opr$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN5@emit_vecop
; Line 207
	mov	r9b, 97					; 00000061H
	mov	r8d, 6
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl_ex
; Line 208
	jmp	SHORT $LN6@emit_vecop
$LN5@emit_vecop:
; Line 210
	mov	r8b, 97					; 00000061H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
$LN6@emit_vecop:
; Line 213
	lea	rdx, OFFSET FLAT:$SG47842
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 214
	mov	r8b, 98					; 00000062H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 216
	lea	rdx, OFFSET FLAT:$SG47843
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 218
	lea	rdx, OFFSET FLAT:$SG47844
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 219
	mov	r8b, 114				; 00000072H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 220
	lea	rdx, OFFSET FLAT:$SG47845
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 222
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_vecop
$LN2@emit_vecop:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_vecop:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_vecop
; Line 223
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR opr$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR i$1[rsp]
	lea	r8, OFFSET FLAT:fn
	movsx	edx, BYTE PTR [r8+rdx]
	movsxd	r8, DWORD PTR i$1[rsp]
	lea	r9, OFFSET FLAT:fn
	movsx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, edx
	lea	rdx, OFFSET FLAT:$SG47846
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 224
	jmp	SHORT $LN2@emit_vecop
$LN3@emit_vecop:
; Line 225
	lea	rdx, OFFSET FLAT:$SG47847
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 226
	lea	rdx, OFFSET FLAT:$SG47848
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 227
	add	rsp, 72					; 00000048H
	ret	0
emit_vecoprari ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$ = 80
t$ = 88
genmake	PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 183
$LN6:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 184
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG47823
	call	ccformat
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR t$[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	r8d, DWORD PTR [rax+20]
	mov	rax, QWORD PTR t$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_fundecl
; Line 187
	lea	rdx, OFFSET FLAT:$SG47824
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 188
	lea	rdx, OFFSET FLAT:$SG47825
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 190
	mov	r8b, 114				; 00000072H
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 191
	lea	rdx, OFFSET FLAT:$SG47826
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 193
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@genmake
$LN2@genmake:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@genmake:
	mov	rax, QWORD PTR t$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@genmake
; Line 194
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movsx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$1[rsp]
	lea	rdx, OFFSET FLAT:fn
	movsx	ecx, BYTE PTR [rdx+rcx]
	mov	r9d, eax
	mov	r8d, ecx
	lea	rdx, OFFSET FLAT:$SG47827
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 195
	jmp	SHORT $LN2@genmake
$LN3@genmake:
; Line 197
	lea	rdx, OFFSET FLAT:$SG47828
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 198
	lea	rdx, OFFSET FLAT:$SG47829
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 199
	add	rsp, 72					; 00000048H
	ret	0
genmake	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
out$ = 64
t$ = 72
l$ = 80
r$ = 88
n$ = 96
emit_fundecl PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 163
$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 164
	lea	rdx, OFFSET FLAT:$SG47806
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 165
	cmp	QWORD PTR r$[rsp], 0
	je	SHORT $LN5@emit_funde
; Line 166
	mov	rdx, QWORD PTR r$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_typename
; Line 167
	jmp	SHORT $LN6@emit_funde
$LN5@emit_funde:
; Line 168
	lea	rdx, OFFSET FLAT:$SG47809
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN6@emit_funde:
; Line 170
	mov	r8, QWORD PTR n$[rsp]
	lea	rdx, OFFSET FLAT:$SG47810
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 172
	lea	rdx, OFFSET FLAT:$SG47811
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 173
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@emit_funde
$LN2@emit_funde:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@emit_funde:
	mov	eax, DWORD PTR l$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@emit_funde
; Line 174
	cmp	DWORD PTR i$1[rsp], 0
	je	SHORT $LN7@emit_funde
	lea	rdx, OFFSET FLAT:$SG47813
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN7@emit_funde:
; Line 175
	movsxd	rax, DWORD PTR i$1[rsp]
	lea	rcx, OFFSET FLAT:fn
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl
; Line 176
	jmp	SHORT $LN2@emit_funde
$LN3@emit_funde:
; Line 177
	lea	rdx, OFFSET FLAT:$SG47814
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 179
	add	rsp, 56					; 00000038H
	ret	0
emit_fundecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
name$ = 64
emit_vardecl PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 158
$LN3:
	mov	BYTE PTR [rsp+24], r8b
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 159
	movzx	r9d, BYTE PTR name$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_vardecl_ex
; Line 160
	add	rsp, 40					; 00000028H
	ret	0
emit_vardecl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
override_modifier$ = 64
name$ = 72
emit_vardecl_ex PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 126
$LN19:
	mov	BYTE PTR [rsp+32], r9b
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 127
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG47778
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 129
	cmp	DWORD PTR override_modifier$[rsp], 5
	je	SHORT $LN10@emit_varde
	cmp	DWORD PTR override_modifier$[rsp], 6
	jne	SHORT $LN8@emit_varde
$LN10@emit_varde:
; Line 132
	mov	edx, DWORD PTR override_modifier$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 133
	jmp	SHORT $LN9@emit_varde
$LN8@emit_varde:
$LN2@emit_varde:
; Line 135
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 5
	je	SHORT $LN13@emit_varde
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 6
	jne	SHORT $LN11@emit_varde
$LN13@emit_varde:
; Line 138
	mov	rax, QWORD PTR t$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 139
	jmp	SHORT $LN12@emit_varde
$LN11@emit_varde:
	jmp	SHORT $LN3@emit_varde
$LN12@emit_varde:
; Line 140
	jmp	SHORT $LN2@emit_varde
$LN3@emit_varde:
$LN9@emit_varde:
; Line 142
	movsx	eax, BYTE PTR name$[rsp]
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:$SG47785
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 144
	cmp	DWORD PTR override_modifier$[rsp], 7
	jne	SHORT $LN14@emit_varde
; Line 146
	mov	edx, DWORD PTR override_modifier$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 147
	jmp	SHORT $LN15@emit_varde
$LN14@emit_varde:
$LN5@emit_varde:
; Line 150
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 7
	jne	SHORT $LN16@emit_varde
; Line 152
	mov	rax, QWORD PTR t$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	call	emit_modifier
; Line 153
	jmp	SHORT $LN17@emit_varde
$LN16@emit_varde:
	jmp	SHORT $LN6@emit_varde
$LN17@emit_varde:
; Line 154
	jmp	SHORT $LN5@emit_varde
$LN6@emit_varde:
$LN15@emit_varde:
; Line 155
	add	rsp, 40					; 00000028H
	ret	0
emit_vardecl_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
modifier$ = 56
emit_modifier PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 119
$LN6:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 120
	cmp	DWORD PTR modifier$[rsp], 5
	jne	SHORT $LN2@emit_modif
	lea	rdx, OFFSET FLAT:$SG47761
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN2@emit_modif:
; Line 121
	cmp	DWORD PTR modifier$[rsp], 6
	jne	SHORT $LN3@emit_modif
	lea	rdx, OFFSET FLAT:$SG47763
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN3@emit_modif:
; Line 122
	cmp	DWORD PTR modifier$[rsp], 7
	jne	SHORT $LN4@emit_modif
	lea	rdx, OFFSET FLAT:$SG47765
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
$LN4@emit_modif:
; Line 123
	add	rsp, 40					; 00000028H
	ret	0
emit_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 48
t$ = 56
emit_typename PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 114
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 115
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG47755
	mov	rcx, QWORD PTR out$[rsp]
	call	ccstr_catf
; Line 116
	add	rsp, 40					; 00000028H
	ret	0
emit_typename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 48
gen_typename PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 107
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 109
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
	mov	rcx, QWORD PTR t$[rsp]
	call	gen_typename_ex
; Line 110
	lea	rax, OFFSET FLAT:?buf@?1??gen_typename@@9@4PADA
; Line 111
	add	rsp, 40					; 00000028H
	ret	0
gen_typename ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$1 = 48
t$ = 80
buf$ = 88
len$ = 96
gen_typename_ex PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 87
$LN9:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 88
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN2@gen_typena
; Line 90
	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:pf
	movsx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	lea	r8, OFFSET FLAT:$SG47739
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatex
	jmp	$LN1@gen_typena
; Line 91
	jmp	$LN3@gen_typena
$LN2@gen_typena:
; Line 92
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN4@gen_typena
; Line 94
	mov	rax, QWORD PTR t$[rsp]
	movsxd	rax, DWORD PTR [rax+4]
	lea	rcx, OFFSET FLAT:pf
	movsx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, QWORD PTR t$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	lea	r8, OFFSET FLAT:$SG47742
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatex
	jmp	SHORT $LN1@gen_typena
; Line 95
	jmp	SHORT $LN5@gen_typena
$LN4@gen_typena:
; Line 96
	mov	rax, QWORD PTR t$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN6@gen_typena
; Line 98
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	mov	rax, QWORD PTR t$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	gen_typename_ex
	mov	DWORD PTR p$1[rsp], eax
; Line 99
	mov	eax, DWORD PTR p$1[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$1[rsp]
	mov	rdx, QWORD PTR buf$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	rdx, QWORD PTR t$[rsp]
	mov	r9d, DWORD PTR [rdx+20]
	lea	r8, OFFSET FLAT:$SG47745
	mov	edx, eax
	call	ccformatex
	jmp	SHORT $LN1@gen_typena
; Line 100
	jmp	SHORT $LN7@gen_typena
$LN6@gen_typena:
; Line 102
	xor	eax, eax
$LN7@gen_typena:
$LN5@gen_typena:
$LN3@gen_typena:
$LN1@gen_typena:
; Line 104
	add	rsp, 72					; 00000048H
	ret	0
gen_typename_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
d$ = 64
b$ = 72
gen_fixtype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 72
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 73
	mov	ecx, 3
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 75
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 76
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR b$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 78
	mov	rax, QWORD PTR type$[rsp]
; Line 79
	add	rsp, 56					; 00000038H
	ret	0
gen_fixtype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
d$ = 64
i$ = 72
a$ = 80
gen_vartype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 61
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 62
	mov	ecx, 2
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 64
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR d$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 65
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 66
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 68
	mov	rax, QWORD PTR type$[rsp]
; Line 69
	add	rsp, 56					; 00000038H
	ret	0
gen_vartype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
t$ = 64
gen_ptrtype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 52
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 53
	mov	ecx, 5
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 55
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 57
	mov	rax, QWORD PTR type$[rsp]
; Line 58
	add	rsp, 56					; 00000038H
	ret	0
gen_ptrtype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
t$ = 64
length$ = 72
gen_vectype PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 42
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 43
	mov	ecx, 4
	call	gen_type
	mov	QWORD PTR type$[rsp], rax
; Line 45
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR t$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 46
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR length$[rsp]
	mov	DWORD PTR [rax+20], ecx
; Line 48
	mov	rax, QWORD PTR type$[rsp]
; Line 49
	add	rsp, 56					; 00000038H
	ret	0
gen_vectype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
k$ = 64
gen_type PROC
; File W:\cpp\void\ktt-c\ccemit-c.c
; Line 32
$LN3:
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 33
	mov	ecx, 32					; 00000020H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR type$[rsp], rax
; Line 35
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 36
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 38
	mov	rax, QWORD PTR type$[rsp]
; Line 39
	add	rsp, 56					; 00000038H
	ret	0
gen_type ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
emit$ = 48
ccemit_init PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 502
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 24
	xor	edx, edx
	mov	rcx, QWORD PTR emit$[rsp]
	call	memset
; Line 503
	mov	rax, QWORD PTR emit$[rsp]
	xor	r9d, r9d
	mov	r8d, 255				; 000000ffH
	mov	edx, 136				; 00000088H
	mov	rcx, rax
	call	ccdlb_arradd
; Line 505
	lea	rdx, OFFSET FLAT:$SG47662
	xor	ecx, ecx
	call	ccvm_block
	mov	rcx, QWORD PTR emit$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 506
	mov	rax, QWORD PTR emit$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 507
	add	rsp, 40					; 00000028H
	ret	0
ccemit_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl_name$1 = 48
decl$2 = 56
tv68 = 64
tv129 = 68
tv146 = 72
value$3 = 80
tv74 = 88
tv136 = 96
global$4 = 104
func$5 = 112
emit$ = 144
tree$ = 152
ccemit_translation_unit PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 458
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 459
	mov	rax, QWORD PTR tree$[rsp]
	mov	QWORD PTR decl$2[rsp], rax
	jmp	SHORT $LN4@ccemit_tra
$LN2@ccemit_tra:
	mov	rax, QWORD PTR decl$2[rsp]
	add	rax, 208				; 000000d0H
	mov	QWORD PTR decl$2[rsp], rax
$LN4@ccemit_tra:
	cmp	QWORD PTR tree$[rsp], 0
	je	SHORT $LN25@ccemit_tra
	cmp	QWORD PTR tree$[rsp], 0
	je	SHORT $LN23@ccemit_tra
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR tree$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN24@ccemit_tra
$LN23@ccemit_tra:
	mov	DWORD PTR tv68[rsp], 0
$LN24@ccemit_tra:
	mov	eax, DWORD PTR tv68[rsp]
	xor	edx, edx
	mov	ecx, 208				; 000000d0H
	div	rcx
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR tree$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN26@ccemit_tra
$LN25@ccemit_tra:
	mov	rax, QWORD PTR tree$[rsp]
	mov	QWORD PTR tv74[rsp], rax
$LN26@ccemit_tra:
	mov	rax, QWORD PTR tv74[rsp]
	cmp	QWORD PTR decl$2[rsp], rax
	jae	$LN3@ccemit_tra
; Line 461
	mov	rax, QWORD PTR decl$2[rsp]
	cmp	DWORD PTR [rax], 9
	je	SHORT $LN8@ccemit_tra
; Line 463
	lea	rax, OFFSET FLAT:$SG47638
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47639
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47640
	mov	r8d, 463				; 000001cfH
	lea	rdx, OFFSET FLAT:$SG47641
	mov	ecx, 44					; 0000002cH
	call	cctrace_
; Line 464
	jmp	$LN2@ccemit_tra
$LN8@ccemit_tra:
; Line 467
	mov	rax, QWORD PTR decl$2[rsp]
	cmp	QWORD PTR [rax+112], 0
	jne	SHORT $LN9@ccemit_tra
	int	3
$LN9@ccemit_tra:
; Line 468
	mov	rax, QWORD PTR decl$2[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN10@ccemit_tra
	int	3
$LN10@ccemit_tra:
; Line 470
	mov	rax, QWORD PTR decl$2[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR decl_name$1[rsp], rax
	jmp	SHORT $LN7@ccemit_tra
$LN5@ccemit_tra:
	mov	rax, QWORD PTR decl_name$1[rsp]
	add	rax, 208				; 000000d0H
	mov	QWORD PTR decl_name$1[rsp], rax
$LN7@ccemit_tra:
	mov	rax, QWORD PTR decl$2[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN29@ccemit_tra
	mov	rax, QWORD PTR decl$2[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN27@ccemit_tra
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR decl$2[rsp]
	mov	rcx, QWORD PTR [rcx+112]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv129[rsp], eax
	jmp	SHORT $LN28@ccemit_tra
$LN27@ccemit_tra:
	mov	DWORD PTR tv129[rsp], 0
$LN28@ccemit_tra:
	mov	eax, DWORD PTR tv129[rsp]
	xor	edx, edx
	mov	ecx, 208				; 000000d0H
	div	rcx
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR decl$2[rsp]
	add	rax, QWORD PTR [rcx+112]
	mov	QWORD PTR tv136[rsp], rax
	jmp	SHORT $LN30@ccemit_tra
$LN29@ccemit_tra:
	mov	rax, QWORD PTR decl$2[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR tv136[rsp], rax
$LN30@ccemit_tra:
	mov	rax, QWORD PTR tv136[rsp]
	cmp	QWORD PTR decl_name$1[rsp], rax
	jae	$LN6@ccemit_tra
; Line 472
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	DWORD PTR [rax], 8
	je	SHORT $LN11@ccemit_tra
	int	3
$LN11@ccemit_tra:
; Line 473
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN12@ccemit_tra
	int	3
$LN12@ccemit_tra:
; Line 474
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN13@ccemit_tra
	int	3
$LN13@ccemit_tra:
; Line 475
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	QWORD PTR [rax+96], 0
	jne	SHORT $LN31@ccemit_tra
	mov	DWORD PTR tv146[rsp], 1
	jmp	SHORT $LN32@ccemit_tra
$LN31@ccemit_tra:
	mov	DWORD PTR tv146[rsp], 0
$LN32@ccemit_tra:
	cmp	DWORD PTR tv146[rsp], 0
	jne	SHORT $LN14@ccemit_tra
	int	3
$LN14@ccemit_tra:
; Line 477
	mov	rax, QWORD PTR decl_name$1[rsp]
	mov	rax, QWORD PTR [rax+88]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN15@ccemit_tra
; Line 479
	mov	rax, QWORD PTR decl_name$1[rsp]
	mov	r9, QWORD PTR [rax+64]
	mov	rax, QWORD PTR decl_name$1[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR decl_name$1[rsp]
	mov	rdx, QWORD PTR [rax+88]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_function
	mov	QWORD PTR func$5[rsp], rax
; Line 481
	mov	rax, QWORD PTR decl_name$1[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	ccmapput
	mov	QWORD PTR value$3[rsp], rax
; Line 482
	mov	rax, QWORD PTR value$3[rsp]
	mov	rcx, QWORD PTR decl_name$1[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 483
	mov	rax, QWORD PTR value$3[rsp]
	mov	DWORD PTR [rax], 0
; Line 484
	mov	rax, QWORD PTR value$3[rsp]
	mov	rcx, QWORD PTR func$5[rsp]
	mov	QWORD PTR [rax+104], rcx
; Line 486
	jmp	SHORT $LN16@ccemit_tra
$LN15@ccemit_tra:
; Line 487
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN17@ccemit_tra
	int	3
$LN17@ccemit_tra:
; Line 488
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN18@ccemit_tra
	int	3
$LN18@ccemit_tra:
; Line 489
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	QWORD PTR [rax+96], 0
	je	SHORT $LN19@ccemit_tra
	int	3
$LN19@ccemit_tra:
; Line 490
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN20@ccemit_tra
	int	3
$LN20@ccemit_tra:
; Line 491
	mov	rax, QWORD PTR decl_name$1[rsp]
	cmp	QWORD PTR [rax+104], 0
	je	SHORT $LN21@ccemit_tra
	int	3
$LN21@ccemit_tra:
; Line 493
	mov	rax, QWORD PTR decl_name$1[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	ccmapput
	mov	QWORD PTR global$4[rsp], rax
; Line 494
	mov	rax, QWORD PTR global$4[rsp]
	mov	eax, DWORD PTR [rax+128]
	or	eax, 2
	mov	rcx, QWORD PTR global$4[rsp]
	mov	DWORD PTR [rcx+128], eax
$LN16@ccemit_tra:
; Line 496
	jmp	$LN5@ccemit_tra
$LN6@ccemit_tra:
; Line 497
	jmp	$LN2@ccemit_tra
$LN3@ccemit_tra:
; Line 498
	add	rsp, 136				; 00000088H
	ret	0
ccemit_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv177 = 32
tv202 = 36
func$ = 40
stmt$ = 48
decl_name$ = 56
tv184 = 64
tv209 = 72
emit$ = 96
type$ = 104
name$ = 112
body$ = 120
ccemit_function PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 408
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 409
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN8@ccemit_fun
	int	3
$LN8@ccemit_fun:
; Line 410
	mov	rax, QWORD PTR type$[rsp]
	cmp	DWORD PTR [rax], 4
	je	SHORT $LN9@ccemit_fun
	int	3
$LN9@ccemit_fun:
; Line 412
	mov	ecx, 48					; 00000030H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR func$[rsp], rax
; Line 413
	mov	r8d, 48					; 00000030H
	xor	edx, edx
	mov	rcx, QWORD PTR func$[rsp]
	call	memset
; Line 414
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 415
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 418
	mov	rax, QWORD PTR func$[rsp]
	add	rax, 16
	xor	r9d, r9d
	mov	r8d, 255				; 000000ffH
	mov	edx, 168				; 000000a8H
	mov	rcx, rax
	call	ccdlb_arradd
; Line 419
	mov	rax, QWORD PTR func$[rsp]
	add	rax, 16
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 168				; 000000a8H
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 168				; 000000a8H
	mov	rcx, QWORD PTR func$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR func$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 420
	mov	rax, QWORD PTR func$[rsp]
	add	rax, 16
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 168				; 000000a8H
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 168				; 000000a8H
	mov	rcx, QWORD PTR func$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR func$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 421
	mov	rax, QWORD PTR func$[rsp]
	add	rax, 16
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 168				; 000000a8H
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 168				; 000000a8H
	mov	rcx, QWORD PTR func$[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR func$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 423
	cmp	QWORD PTR func$[rsp], 0
	jne	SHORT $LN10@ccemit_fun
	int	3
$LN10@ccemit_fun:
; Line 424
	mov	rax, QWORD PTR func$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN11@ccemit_fun
	int	3
$LN11@ccemit_fun:
; Line 425
	mov	rax, QWORD PTR func$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN12@ccemit_fun
	int	3
$LN12@ccemit_fun:
; Line 426
	mov	rax, QWORD PTR func$[rsp]
	cmp	QWORD PTR [rax+32], 0
	jne	SHORT $LN13@ccemit_fun
	int	3
$LN13@ccemit_fun:
; Line 427
	mov	rax, QWORD PTR func$[rsp]
	cmp	QWORD PTR [rax+40], 0
	jne	SHORT $LN14@ccemit_fun
	int	3
$LN14@ccemit_fun:
; Line 429
	lea	r8, OFFSET FLAT:$SG47605
	xor	edx, edx
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	ccblock_init
; Line 430
	lea	r8, OFFSET FLAT:$SG47606
	xor	edx, edx
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	ccblock_init
; Line 431
	lea	r8, OFFSET FLAT:$SG47607
	xor	edx, edx
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	ccblock_init
; Line 434
	mov	rax, QWORD PTR type$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR decl_name$[rsp], rax
	jmp	SHORT $LN4@ccemit_fun
$LN2@ccemit_fun:
	mov	rax, QWORD PTR decl_name$[rsp]
	add	rax, 208				; 000000d0H
	mov	QWORD PTR decl_name$[rsp], rax
$LN4@ccemit_fun:
	mov	rax, QWORD PTR type$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN22@ccemit_fun
	mov	rax, QWORD PTR type$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	SHORT $LN20@ccemit_fun
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv177[rsp], eax
	jmp	SHORT $LN21@ccemit_fun
$LN20@ccemit_fun:
	mov	DWORD PTR tv177[rsp], 0
$LN21@ccemit_fun:
	mov	eax, DWORD PTR tv177[rsp]
	xor	edx, edx
	mov	ecx, 208				; 000000d0H
	div	rcx
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR type$[rsp]
	add	rax, QWORD PTR [rcx+32]
	mov	QWORD PTR tv184[rsp], rax
	jmp	SHORT $LN23@ccemit_fun
$LN22@ccemit_fun:
	mov	rax, QWORD PTR type$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv184[rsp], rax
$LN23@ccemit_fun:
	mov	rax, QWORD PTR tv184[rsp]
	cmp	QWORD PTR decl_name$[rsp], rax
	jae	SHORT $LN3@ccemit_fun
; Line 435
	mov	rax, QWORD PTR decl_name$[rsp]
	cmp	QWORD PTR [rax+104], 0
	je	SHORT $LN15@ccemit_fun
	int	3
$LN15@ccemit_fun:
; Line 436
	mov	r8, QWORD PTR decl_name$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_decl_name
; Line 437
	jmp	$LN2@ccemit_fun
$LN3@ccemit_fun:
; Line 439
	mov	rax, QWORD PTR body$[rsp]
	cmp	DWORD PTR [rax], 13
	je	SHORT $LN16@ccemit_fun
	int	3
$LN16@ccemit_fun:
; Line 441
	mov	rax, QWORD PTR body$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR stmt$[rsp], rax
	jmp	SHORT $LN7@ccemit_fun
$LN5@ccemit_fun:
	mov	rax, QWORD PTR stmt$[rsp]
	add	rax, 208				; 000000d0H
	mov	QWORD PTR stmt$[rsp], rax
$LN7@ccemit_fun:
	mov	rax, QWORD PTR body$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN26@ccemit_fun
	mov	rax, QWORD PTR body$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN24@ccemit_fun
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR body$[rsp]
	mov	rcx, QWORD PTR [rcx+80]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv202[rsp], eax
	jmp	SHORT $LN25@ccemit_fun
$LN24@ccemit_fun:
	mov	DWORD PTR tv202[rsp], 0
$LN25@ccemit_fun:
	mov	eax, DWORD PTR tv202[rsp]
	xor	edx, edx
	mov	ecx, 208				; 000000d0H
	div	rcx
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR body$[rsp]
	add	rax, QWORD PTR [rcx+80]
	mov	QWORD PTR tv209[rsp], rax
	jmp	SHORT $LN27@ccemit_fun
$LN26@ccemit_fun:
	mov	rax, QWORD PTR body$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv209[rsp], rax
$LN27@ccemit_fun:
	mov	rax, QWORD PTR tv209[rsp]
	cmp	QWORD PTR stmt$[rsp], rax
	jae	SHORT $LN6@ccemit_fun
; Line 443
	mov	rax, QWORD PTR stmt$[rsp]
	cmp	DWORD PTR [rax], 9
	jne	SHORT $LN17@ccemit_fun
; Line 445
	mov	r8, QWORD PTR stmt$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_decl
; Line 446
	jmp	SHORT $LN18@ccemit_fun
$LN17@ccemit_fun:
; Line 448
	mov	r9, QWORD PTR stmt$[rsp]
	mov	rax, QWORD PTR func$[rsp]
	mov	r8, QWORD PTR [rax+32]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
$LN18@ccemit_fun:
; Line 450
	jmp	$LN5@ccemit_fun
$LN6@ccemit_fun:
; Line 451
	mov	rax, QWORD PTR func$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	ccemit_enter
; Line 453
	mov	rax, QWORD PTR func$[rsp]
; Line 454
	add	rsp, 88					; 00000058H
	ret	0
ccemit_function ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv84 = 32
decl_list$ = 40
tv91 = 48
emit$ = 80
func$ = 88
decl$ = 96
ccemit_decl PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 391
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 392
	cmp	QWORD PTR decl$[rsp], 0
	jne	SHORT $LN5@ccemit_dec
	int	3
$LN5@ccemit_dec:
; Line 393
	mov	rax, QWORD PTR decl$[rsp]
	cmp	DWORD PTR [rax], 9
	je	SHORT $LN6@ccemit_dec
	int	3
$LN6@ccemit_dec:
; Line 394
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN7@ccemit_dec
	int	3
$LN7@ccemit_dec:
; Line 395
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+112], 0
	jne	SHORT $LN8@ccemit_dec
	int	3
$LN8@ccemit_dec:
; Line 396
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN9@ccemit_dec
	int	3
$LN9@ccemit_dec:
; Line 397
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+96], 0
	je	SHORT $LN10@ccemit_dec
	int	3
$LN10@ccemit_dec:
; Line 400
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR decl_list$[rsp], rax
	jmp	SHORT $LN4@ccemit_dec
$LN2@ccemit_dec:
	mov	rax, QWORD PTR decl_list$[rsp]
	add	rax, 208				; 000000d0H
	mov	QWORD PTR decl_list$[rsp], rax
$LN4@ccemit_dec:
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN14@ccemit_dec
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN12@ccemit_dec
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+112]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN13@ccemit_dec
$LN12@ccemit_dec:
	mov	DWORD PTR tv84[rsp], 0
$LN13@ccemit_dec:
	mov	eax, DWORD PTR tv84[rsp]
	xor	edx, edx
	mov	ecx, 208				; 000000d0H
	div	rcx
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR decl$[rsp]
	add	rax, QWORD PTR [rcx+112]
	mov	QWORD PTR tv91[rsp], rax
	jmp	SHORT $LN15@ccemit_dec
$LN14@ccemit_dec:
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR tv91[rsp], rax
$LN15@ccemit_dec:
	mov	rax, QWORD PTR tv91[rsp]
	cmp	QWORD PTR decl_list$[rsp], rax
	jae	SHORT $LN3@ccemit_dec
; Line 402
	mov	r8, QWORD PTR decl_list$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_decl_name
; Line 403
	jmp	$LN2@ccemit_dec
$LN3@ccemit_dec:
; Line 404
	add	rsp, 72					; 00000048H
	ret	0
ccemit_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
local$ = 32
init$ = 40
edict$ = 48
tv144 = 56
value$1 = 64
emit$ = 96
func$ = 104
decl$ = 112
ccemit_decl_name PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 364
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 365
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN2@ccemit_dec
	int	3
$LN2@ccemit_dec:
; Line 366
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN3@ccemit_dec
	int	3
$LN3@ccemit_dec:
; Line 367
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+96], 0
	je	SHORT $LN4@ccemit_dec
	int	3
$LN4@ccemit_dec:
; Line 368
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN5@ccemit_dec
	int	3
$LN5@ccemit_dec:
; Line 370
	mov	rax, QWORD PTR func$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rdx, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR [rax+152]
	call	ccmapput
	mov	QWORD PTR local$[rsp], rax
; Line 371
	mov	rax, QWORD PTR local$[rsp]
	mov	DWORD PTR [rax], 0
; Line 372
	mov	rax, QWORD PTR local$[rsp]
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+88]
	mov	QWORD PTR [rax+80], rcx
; Line 375
	mov	rax, QWORD PTR func$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv144[rsp], rax
	mov	rcx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, 160				; 000000a0H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 160				; 000000a0H
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 160				; 000000a0H
	mov	rcx, QWORD PTR tv144[rsp]
	add	rax, QWORD PTR [rcx+160]
	mov	QWORD PTR edict$[rsp], rax
; Line 376
	mov	rax, QWORD PTR edict$[rsp]
	mov	DWORD PTR [rax], 1
; Line 377
	mov	rax, QWORD PTR edict$[rsp]
	mov	rcx, QWORD PTR local$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 379
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR init$[rsp], rax
; Line 380
	cmp	QWORD PTR init$[rsp], 0
	je	SHORT $LN6@ccemit_dec
; Line 381
	mov	rax, QWORD PTR init$[rsp]
	cmp	DWORD PTR [rax], 14
	jne	SHORT $LN7@ccemit_dec
; Line 383
	mov	rax, QWORD PTR init$[rsp]
	mov	rdx, QWORD PTR [rax+136]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_const_i32
	mov	QWORD PTR value$1[rsp], rax
; Line 384
	mov	r8, QWORD PTR value$1[rsp]
	mov	rdx, QWORD PTR local$[rsp]
	mov	rax, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	ccemit_store
	jmp	SHORT $LN8@ccemit_dec
$LN7@ccemit_dec:
; Line 385
	lea	rax, OFFSET FLAT:$SG47544
	test	rax, rax
	je	SHORT $LN9@ccemit_dec
	int	3
$LN9@ccemit_dec:
$LN8@ccemit_dec:
$LN6@ccemit_dec:
; Line 387
	add	rsp, 88					; 00000058H
	ret	0
ccemit_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
it$ = 40
tv74 = 48
emit$ = 80
func$ = 88
irset$ = 96
list$ = 104
ccemit_treelist PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 244
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 246
	mov	rax, QWORD PTR list$[rsp]
	mov	QWORD PTR it$[rsp], rax
	jmp	SHORT $LN4@ccemit_tre
$LN2@ccemit_tre:
	mov	rax, QWORD PTR it$[rsp]
	add	rax, 208				; 000000d0H
	mov	QWORD PTR it$[rsp], rax
$LN4@ccemit_tre:
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN8@ccemit_tre
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN6@ccemit_tre
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR list$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN7@ccemit_tre
$LN6@ccemit_tre:
	mov	DWORD PTR tv68[rsp], 0
$LN7@ccemit_tre:
	mov	eax, DWORD PTR tv68[rsp]
	xor	edx, edx
	mov	ecx, 208				; 000000d0H
	div	rcx
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR list$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN9@ccemit_tre
$LN8@ccemit_tre:
	mov	rax, QWORD PTR list$[rsp]
	mov	QWORD PTR tv74[rsp], rax
$LN9@ccemit_tre:
	mov	rax, QWORD PTR tv74[rsp]
	cmp	QWORD PTR it$[rsp], rax
	jae	SHORT $LN3@ccemit_tre
	mov	r9, QWORD PTR it$[rsp]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	jmp	$LN2@ccemit_tre
$LN3@ccemit_tre:
; Line 247
	add	rsp, 72					; 00000048H
	ret	0
ccemit_treelist ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lval$1 = 32
tv164 = 40
tv169 = 44
cond_block$2 = 48
else_block$3 = 56
rval$4 = 64
then_block$5 = 72
result$ = 80
lhs$6 = 88
rhs$7 = 96
then_block$8 = 104
done_block$9 = 112
child$10 = 120
else_block$11 = 128
label_block$12 = 136
func_name$13 = 144
func_value$14 = 152
cond_value$15 = 160
cond_value$16 = 168
tok$17 = 176
$T18 = 240
emit$ = 336
func$ = 344
irset$ = 352
tree$ = 360
ccemit_tree PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 254
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 255
	mov	QWORD PTR result$[rsp], 0
; Line 257
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 9
	jne	SHORT $LN2@ccemit_tre
; Line 259
	lea	rax, OFFSET FLAT:$SG47485
	test	rax, rax
	je	SHORT $LN4@ccemit_tre
	int	3
$LN4@ccemit_tre:
; Line 261
	jmp	$LN3@ccemit_tre
$LN2@ccemit_tre:
; Line 262
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 13
	jne	SHORT $LN5@ccemit_tre
; Line 264
	lea	rdx, OFFSET FLAT:$SG47488
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_block
	mov	QWORD PTR child$10[rsp], rax
; Line 265
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR child$10[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_treelist
; Line 266
	mov	rdx, QWORD PTR child$10[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_block
	mov	QWORD PTR result$[rsp], rax
; Line 268
	jmp	$LN6@ccemit_tre
$LN5@ccemit_tre:
; Line 269
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN7@ccemit_tre
; Line 271
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR irset$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccvm_label
	mov	QWORD PTR irset$[rsp], rax
; Line 272
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+80]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_treelist
; Line 273
	mov	rdx, QWORD PTR irset$[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_block
	mov	QWORD PTR result$[rsp], rax
; Line 275
	jmp	$LN8@ccemit_tre
$LN7@ccemit_tre:
; Line 276
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN9@ccemit_tre
; Line 278
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_return
; Line 279
	jmp	$LN10@ccemit_tre
$LN9@ccemit_tre:
; Line 280
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 5
	jne	SHORT $LN11@ccemit_tre
; Line 282
	mov	rax, QWORD PTR tree$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR irset$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccvm_label
	mov	QWORD PTR label_block$12[rsp], rax
; Line 283
	mov	rdx, QWORD PTR label_block$12[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_enter
; Line 284
	jmp	$LN12@ccemit_tre
$LN11@ccemit_tre:
; Line 285
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 14
	jne	SHORT $LN13@ccemit_tre
; Line 287
	mov	rax, QWORD PTR tree$[rsp]
	mov	rdx, QWORD PTR [rax+136]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_const_i32
	mov	QWORD PTR result$[rsp], rax
; Line 288
	jmp	$LN14@ccemit_tre
$LN13@ccemit_tre:
; Line 289
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 21
	jne	SHORT $LN15@ccemit_tre
; Line 291
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR func_name$13[rsp], rax
; Line 292
	mov	rdx, QWORD PTR func_name$13[rsp]
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	ccmapget
	mov	QWORD PTR func_value$14[rsp], rax
; Line 293
	mov	rdx, QWORD PTR func_value$14[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_call
; Line 294
	jmp	$LN16@ccemit_tre
$LN15@ccemit_tre:
; Line 295
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 18
	jne	$LN17@ccemit_tre
; Line 298
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+184]
	mov	QWORD PTR lhs$6[rsp], rax
	cmp	QWORD PTR lhs$6[rsp], 0
	je	SHORT $LN36@ccemit_tre
	mov	DWORD PTR tv164[rsp], 1
	jmp	SHORT $LN37@ccemit_tre
$LN36@ccemit_tre:
	mov	DWORD PTR tv164[rsp], 0
$LN37@ccemit_tre:
	cmp	DWORD PTR tv164[rsp], 0
	jne	SHORT $LN19@ccemit_tre
	int	3
$LN19@ccemit_tre:
; Line 299
	mov	rax, QWORD PTR tree$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR rhs$7[rsp], rax
	cmp	QWORD PTR rhs$7[rsp], 0
	je	SHORT $LN38@ccemit_tre
	mov	DWORD PTR tv169[rsp], 1
	jmp	SHORT $LN39@ccemit_tre
$LN38@ccemit_tre:
	mov	DWORD PTR tv169[rsp], 0
$LN39@ccemit_tre:
	cmp	DWORD PTR tv169[rsp], 0
	jne	SHORT $LN20@ccemit_tre
	int	3
$LN20@ccemit_tre:
; Line 302
	mov	QWORD PTR lval$1[rsp], 0
; Line 303
	mov	QWORD PTR rval$4[rsp], 0
; Line 308
	mov	rax, QWORD PTR func$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR lhs$6[rsp]
	mov	rdx, QWORD PTR [rcx+136]
	mov	rcx, QWORD PTR [rax+152]
	call	ccmapget
	mov	QWORD PTR lval$1[rsp], rax
; Line 309
	cmp	QWORD PTR lval$1[rsp], 0
	jne	SHORT $LN21@ccemit_tre
	mov	rax, QWORD PTR lhs$6[rsp]
	mov	rdx, QWORD PTR [rax+136]
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	ccmapget
	mov	QWORD PTR lval$1[rsp], rax
$LN21@ccemit_tre:
; Line 311
	mov	rax, QWORD PTR rhs$7[rsp]
	cmp	DWORD PTR [rax], 14
	jne	SHORT $LN22@ccemit_tre
; Line 312
	mov	rax, QWORD PTR rhs$7[rsp]
	mov	rdx, QWORD PTR [rax+136]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_const_i32
	mov	QWORD PTR rval$4[rsp], rax
$LN22@ccemit_tre:
; Line 315
	cmp	QWORD PTR lval$1[rsp], 0
	jne	SHORT $LN23@ccemit_tre
	int	3
$LN23@ccemit_tre:
; Line 316
	cmp	QWORD PTR rval$4[rsp], 0
	jne	SHORT $LN24@ccemit_tre
	int	3
$LN24@ccemit_tre:
; Line 319
	lea	rax, QWORD PTR tok$17[rsp]
	mov	rcx, QWORD PTR tree$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+120]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 320
	cmp	DWORD PTR tok$17[rsp], 109		; 0000006dH
	jne	SHORT $LN25@ccemit_tre
; Line 321
	mov	r8, QWORD PTR rval$4[rsp]
	mov	rdx, QWORD PTR lval$1[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_store
	jmp	$LN1@ccemit_tre
; Line 322
	jmp	SHORT $LN26@ccemit_tre
$LN25@ccemit_tre:
; Line 323
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR tok$17[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	r9, QWORD PTR rval$4[rsp]
	mov	r8, QWORD PTR lval$1[rsp]
	lea	rdx, QWORD PTR $T18[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_binary
	jmp	$LN1@ccemit_tre
$LN26@ccemit_tre:
; Line 325
	jmp	$LN18@ccemit_tre
$LN17@ccemit_tre:
; Line 326
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 7
	jne	$LN27@ccemit_tre
; Line 327
	lea	rdx, OFFSET FLAT:$SG47511
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_block
	mov	QWORD PTR cond_block$2[rsp], rax
; Line 328
	lea	rdx, OFFSET FLAT:$SG47512
	mov	rcx, QWORD PTR cond_block$2[rsp]
	call	ccvm_block
	mov	QWORD PTR then_block$8[rsp], rax
; Line 329
	lea	rdx, OFFSET FLAT:$SG47513
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_block
	mov	QWORD PTR else_block$11[rsp], rax
; Line 330
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+32]
	mov	r8, QWORD PTR cond_block$2[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	mov	QWORD PTR cond_value$15[rsp], rax
; Line 331
	mov	r9, QWORD PTR else_block$11[rsp]
	mov	r8, QWORD PTR then_block$8[rsp]
	mov	rdx, QWORD PTR cond_value$15[rsp]
	mov	rcx, QWORD PTR cond_block$2[rsp]
	call	ccemit_condi
; Line 332
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN29@ccemit_tre
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+40]
	mov	r8, QWORD PTR then_block$8[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
$LN29@ccemit_tre:
; Line 333
	mov	rdx, QWORD PTR cond_block$2[rsp]
	mov	rcx, QWORD PTR then_block$8[rsp]
	call	ccemit_enter
; Line 334
	mov	rdx, QWORD PTR cond_block$2[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_block
; Line 335
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR else_block$11[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 336
	mov	rax, QWORD PTR emit$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 337
	jmp	$LN28@ccemit_tre
$LN27@ccemit_tre:
; Line 338
	mov	rax, QWORD PTR tree$[rsp]
	cmp	DWORD PTR [rax], 6
	jne	$LN30@ccemit_tre
; Line 339
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+32]
	mov	r8, QWORD PTR irset$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
	mov	QWORD PTR cond_value$16[rsp], rax
; Line 340
	mov	QWORD PTR then_block$5[rsp], 0
	mov	QWORD PTR else_block$3[rsp], 0
; Line 341
	lea	rdx, OFFSET FLAT:$SG47517
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_block
	mov	QWORD PTR done_block$9[rsp], rax
; Line 342
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN32@ccemit_tre
; Line 343
	lea	rdx, OFFSET FLAT:$SG47519
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_block
	mov	QWORD PTR then_block$5[rsp], rax
; Line 344
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+40]
	mov	r8, QWORD PTR then_block$5[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
; Line 345
	mov	rdx, QWORD PTR done_block$9[rsp]
	mov	rcx, QWORD PTR then_block$5[rsp]
	call	ccemit_enter
$LN32@ccemit_tre:
; Line 347
	mov	rax, QWORD PTR tree$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN33@ccemit_tre
; Line 348
	lea	rdx, OFFSET FLAT:$SG47521
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_block
	mov	QWORD PTR else_block$3[rsp], rax
	mov	rax, QWORD PTR else_block$3[rsp]
	mov	QWORD PTR irset$[rsp], rax
; Line 349
	mov	rax, QWORD PTR tree$[rsp]
	mov	r9, QWORD PTR [rax+48]
	mov	r8, QWORD PTR else_block$3[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_tree
; Line 350
	mov	rdx, QWORD PTR done_block$9[rsp]
	mov	rcx, QWORD PTR else_block$3[rsp]
	call	ccemit_enter
$LN33@ccemit_tre:
; Line 352
	mov	r9, QWORD PTR else_block$3[rsp]
	mov	r8, QWORD PTR then_block$5[rsp]
	mov	rdx, QWORD PTR cond_value$16[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccemit_condi
; Line 353
	mov	rax, QWORD PTR emit$[rsp]
	mov	rcx, QWORD PTR done_block$9[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 354
	mov	rax, QWORD PTR emit$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 355
	jmp	SHORT $LN31@ccemit_tre
$LN30@ccemit_tre:
; Line 356
	lea	rax, OFFSET FLAT:$SG47523
	test	rax, rax
	je	SHORT $LN34@ccemit_tre
	int	3
$LN34@ccemit_tre:
$LN31@ccemit_tre:
$LN28@ccemit_tre:
$LN18@ccemit_tre:
$LN16@ccemit_tre:
$LN14@ccemit_tre:
$LN12@ccemit_tre:
$LN10@ccemit_tre:
$LN8@ccemit_tre:
$LN6@ccemit_tre:
$LN3@ccemit_tre:
; Line 359
	mov	rax, QWORD PTR result$[rsp]
$LN1@ccemit_tre:
; Line 360
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
ccemit_tree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
irset$ = 64
block$ = 72
ccemit_enter PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 203
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_addir
	mov	QWORD PTR i$[rsp], rax
; Line 204
	mov	rax, QWORD PTR i$[rsp]
	mov	DWORD PTR [rax], 5
; Line 205
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rcx+rax+128], rdx
; Line 206
	mov	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_instrvalue
; Line 207
	add	rsp, 56					; 00000038H
	ret	0
ccemit_enter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
irset$ = 64
ccemit_return PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 196
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_addir
	mov	QWORD PTR i$[rsp], rax
; Line 197
	mov	rax, QWORD PTR i$[rsp]
	mov	DWORD PTR [rax], 8
; Line 198
	mov	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_instrvalue
; Line 199
	add	rsp, 56					; 00000038H
	ret	0
ccemit_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 8
value$ = 16
ccemit_call PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 187
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 191
	xor	eax, eax
; Line 192
	ret	0
ccemit_call ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
irset$ = 64
block$ = 72
ccemit_block PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 179
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_addir
	mov	QWORD PTR i$[rsp], rax
; Line 180
	mov	rax, QWORD PTR i$[rsp]
	mov	DWORD PTR [rax], 3
; Line 181
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rcx+rax+128], rdx
; Line 182
	mov	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_instrvalue
; Line 183
	add	rsp, 56					; 00000038H
	ret	0
ccemit_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
irset$ = 64
check_value$ = 72
then_block$ = 80
else_block$ = 88
ccemit_condi PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 169
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_addir
	mov	QWORD PTR i$[rsp], rax
; Line 170
	mov	rax, QWORD PTR i$[rsp]
	mov	DWORD PTR [rax], 4
; Line 171
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR check_value$[rsp]
	mov	QWORD PTR [rax+120], rcx
; Line 172
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR then_block$[rsp]
	mov	QWORD PTR [rcx+rax+128], rdx
; Line 173
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR i$[rsp]
	mov	rdx, QWORD PTR else_block$[rsp]
	mov	QWORD PTR [rcx+rax+128], rdx
; Line 174
	mov	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR irset$[rsp]
	call	ccvm_instrvalue
; Line 175
	add	rsp, 56					; 00000038H
	ret	0
ccemit_condi ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 80
block$ = 112
address$ = 120
value$ = 128
ccemit_store PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 157
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR value$[rsp]
	mov	eax, DWORD PTR [rax+112]
	mov	DWORD PTR [rsp+72], eax
	mov	rax, QWORD PTR value$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR address$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR block$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, OFFSET FLAT:$SG47378
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47379
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47380
	mov	r8d, 157				; 0000009dH
	lea	rdx, OFFSET FLAT:$SG47381
	mov	ecx, 43					; 0000002bH
	call	cctrace_
; Line 159
	mov	rcx, QWORD PTR block$[rsp]
	call	ccvm_addir
	mov	QWORD PTR i$[rsp], rax
; Line 160
	mov	rax, QWORD PTR i$[rsp]
	mov	DWORD PTR [rax], 0
; Line 161
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR address$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 162
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rax+16], rcx
; Line 164
	mov	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccvm_instrvalue
; Line 165
	add	rsp, 104				; 00000068H
	ret	0
ccemit_store ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
block$ = 80
oper$ = 88
lhs$ = 96
rhs$ = 104
ccemit_binary PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 147
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR block$[rsp]
	call	ccvm_addir
	mov	QWORD PTR i$[rsp], rax
; Line 148
	mov	rax, QWORD PTR i$[rsp]
	mov	DWORD PTR [rax], 2
; Line 149
	mov	rax, QWORD PTR i$[rsp]
	lea	rdi, QWORD PTR [rax+40]
	mov	rsi, QWORD PTR oper$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 150
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR lhs$[rsp]
	mov	QWORD PTR [rax+104], rcx
; Line 151
	mov	rax, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rax+112], rcx
; Line 152
	mov	rdx, QWORD PTR i$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccvm_instrvalue
; Line 153
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccemit_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
block$ = 64
ccvm_addir PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 139
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 140
	mov	rax, QWORD PTR block$[rsp]
	add	rax, 160				; 000000a0H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 160				; 000000a0H
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 160				; 000000a0H
	mov	rcx, QWORD PTR block$[rsp]
	add	rax, QWORD PTR [rcx+160]
	mov	QWORD PTR res$[rsp], rax
; Line 141
	mov	r8d, 160				; 000000a0H
	xor	edx, edx
	mov	rcx, QWORD PTR res$[rsp]
	call	memset
; Line 142
	mov	rax, QWORD PTR res$[rsp]
; Line 143
	add	rsp, 56					; 00000038H
	ret	0
ccvm_addir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
block$ = 64
instr$ = 72
ccvm_instrvalue PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 132
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	lea	r8, OFFSET FLAT:$SG47359
	mov	edx, 2
	mov	rcx, QWORD PTR block$[rsp]
	call	ccvm_local
	mov	QWORD PTR value$[rsp], rax
; Line 133
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR instr$[rsp]
	mov	QWORD PTR [rax+96], rcx
; Line 134
	mov	rax, QWORD PTR value$[rsp]
; Line 135
	add	rsp, 56					; 00000038H
	ret	0
ccvm_instrvalue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 32
value$ = 40
global$1 = 48
vm$ = 80
super$ = 88
name$ = 96
ccvm_label PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 113
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 114
	mov	rdx, QWORD PTR name$[rsp]
	mov	rax, QWORD PTR vm$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	ccmapget
	mov	QWORD PTR value$[rsp], rax
; Line 115
	mov	QWORD PTR block$[rsp], 0
; Line 117
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN2@ccvm_label
; Line 118
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR super$[rsp]
	call	ccvm_block
	mov	QWORD PTR block$[rsp], rax
; Line 119
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR super$[rsp]
	call	ccvm_local
	mov	QWORD PTR value$[rsp], rax
; Line 120
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+88], rcx
; Line 123
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR vm$[rsp]
	call	ccvm_global_ex
	mov	QWORD PTR global$1[rsp], rax
; Line 124
	mov	rax, QWORD PTR global$1[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	mov	QWORD PTR [rax+88], rcx
	jmp	SHORT $LN3@ccvm_label
$LN2@ccvm_label:
; Line 125
	mov	rax, QWORD PTR value$[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR block$[rsp], rax
$LN3@ccvm_label:
; Line 127
	mov	rax, QWORD PTR block$[rsp]
; Line 128
	add	rsp, 72					; 00000048H
	ret	0
ccvm_label ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 32
super$ = 64
debug_label$ = 72
ccvm_block PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 106
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 107
	mov	ecx, 168				; 000000a8H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR block$[rsp], rax
; Line 108
	mov	r8, QWORD PTR debug_label$[rsp]
	mov	rdx, QWORD PTR super$[rsp]
	mov	rcx, QWORD PTR block$[rsp]
	call	ccblock_init
; Line 109
	add	rsp, 56					; 00000038H
	ret	0
ccvm_block ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$ = 32
block$ = 64
kind$ = 72
name$ = 80
ccvm_local PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 98
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 99
	mov	rax, QWORD PTR block$[rsp]
	add	rax, 152				; 00000098H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 136				; 00000088H
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR block$[rsp]
	add	rax, QWORD PTR [rcx+152]
	mov	QWORD PTR val$[rsp], rax
; Line 100
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR kind$[rsp]
	mov	rcx, QWORD PTR val$[rsp]
	call	ccvm_value_init
; Line 101
	mov	rax, QWORD PTR val$[rsp]
; Line 102
	add	rsp, 56					; 00000038H
	ret	0
ccvm_local ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
vm$ = 64
kind$ = 72
name$ = 80
ccvm_global_ex PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 83
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR vm$[rsp]
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 136				; 00000088H
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR vm$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR value$[rsp], rax
; Line 84
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR kind$[rsp]
	mov	rcx, QWORD PTR value$[rsp]
	call	ccvm_value_init
; Line 85
	mov	rax, QWORD PTR value$[rsp]
; Line 86
	add	rsp, 56					; 00000038H
	ret	0
ccvm_global_ex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
block$ = 48
super$ = 56
debug_label$ = 64
ccblock_init PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 72
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 168				; 000000a8H
	xor	edx, edx
	mov	rcx, QWORD PTR block$[rsp]
	call	memset
; Line 74
	mov	rax, QWORD PTR block$[rsp]
	add	rax, 152				; 00000098H
	xor	r9d, r9d
	mov	r8d, 255				; 000000ffH
	mov	edx, 136				; 00000088H
	mov	rcx, rax
	call	ccdlb_arradd
; Line 75
	mov	rax, QWORD PTR block$[rsp]
	add	rax, 160				; 000000a0H
	xor	r9d, r9d
	mov	r8d, 255				; 000000ffH
	mov	edx, 160				; 000000a0H
	mov	rcx, rax
	call	ccdlb_arradd
; Line 76
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR super$[rsp]
	mov	QWORD PTR [rax+144], rcx
; Line 77
	mov	rax, QWORD PTR block$[rsp]
	mov	rcx, QWORD PTR debug_label$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 78
	mov	rax, QWORD PTR block$[rsp]
; Line 79
	add	rsp, 40					; 00000028H
	ret	0
ccblock_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
arr$ = 64
name$ = 72
ccmapput PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 53
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR arr$[rsp]
	call	ccmapget
	mov	QWORD PTR value$[rsp], rax
; Line 54
	cmp	QWORD PTR value$[rsp], 0
	je	SHORT $LN2@ccmapput
	int	3
$LN2@ccmapput:
; Line 56
	cmp	QWORD PTR value$[rsp], 0
	jne	SHORT $LN3@ccmapput
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 136				; 00000088H
	lea	rcx, QWORD PTR arr$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR arr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR value$[rsp], rax
$LN3@ccmapput:
; Line 57
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 59
	mov	rax, QWORD PTR value$[rsp]
; Line 60
	add	rsp, 56					; 00000038H
	ret	0
ccmapput ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
it$ = 40
tv74 = 48
arr$ = 80
name$ = 88
ccmapget PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 42
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 43
	mov	rax, QWORD PTR arr$[rsp]
	mov	QWORD PTR it$[rsp], rax
	jmp	SHORT $LN4@ccmapget
$LN2@ccmapget:
	mov	rax, QWORD PTR it$[rsp]
	add	rax, 136				; 00000088H
	mov	QWORD PTR it$[rsp], rax
$LN4@ccmapget:
	cmp	QWORD PTR arr$[rsp], 0
	je	SHORT $LN9@ccmapget
	cmp	QWORD PTR arr$[rsp], 0
	je	SHORT $LN7@ccmapget
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR arr$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN8@ccmapget
$LN7@ccmapget:
	mov	DWORD PTR tv68[rsp], 0
$LN8@ccmapget:
	mov	eax, DWORD PTR tv68[rsp]
	xor	edx, edx
	mov	ecx, 136				; 00000088H
	div	rcx
	imul	rax, rax, 136				; 00000088H
	mov	rcx, QWORD PTR arr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN10@ccmapget
$LN9@ccmapget:
	mov	rax, QWORD PTR arr$[rsp]
	mov	QWORD PTR tv74[rsp], rax
$LN10@ccmapget:
	mov	rax, QWORD PTR tv74[rsp]
	cmp	QWORD PTR it$[rsp], rax
	jae	SHORT $LN3@ccmapget
; Line 44
	mov	rdx, QWORD PTR name$[rsp]
	mov	rax, QWORD PTR it$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN5@ccmapget
; Line 45
	mov	rax, QWORD PTR it$[rsp]
	jmp	SHORT $LN1@ccmapget
$LN5@ccmapget:
; Line 47
	jmp	$LN2@ccmapget
$LN3@ccmapget:
; Line 48
	xor	eax, eax
$LN1@ccmapget:
; Line 49
	add	rsp, 72					; 00000048H
	ret	0
ccmapget ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
classic$ = 32
emit$ = 64
value$ = 72
ccemit_const_i32 PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 35
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 36
	mov	rax, QWORD PTR value$[rsp]
	mov	QWORD PTR classic$[rsp], rax
; Line 37
	mov	r8, QWORD PTR classic$[rsp]
	mov	rdx, QWORD PTR ctype_int32
	mov	rcx, QWORD PTR emit$[rsp]
	call	ccemit_const_classic_value
; Line 38
	add	rsp, 56					; 00000038H
	ret	0
ccemit_const_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
emit$ = 64
type$ = 72
classic$ = 80
ccemit_const_classic_value PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 19
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 22
	mov	ecx, 136				; 00000088H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR value$[rsp], rax
; Line 23
	mov	rax, QWORD PTR value$[rsp]
	mov	DWORD PTR [rax], 0
; Line 24
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 25
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR classic$[rsp]
	mov	QWORD PTR [rax+112], rcx
; Line 26
	mov	rax, QWORD PTR value$[rsp]
	mov	eax, DWORD PTR [rax+128]
	or	eax, 1
	mov	rcx, QWORD PTR value$[rsp]
	mov	DWORD PTR [rcx+128], eax
; Line 27
	mov	rax, QWORD PTR value$[rsp]
; Line 28
	add	rsp, 56					; 00000038H
	ret	0
ccemit_const_classic_value ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 48
kind$ = 56
name$ = 64
ccvm_value_init PROC
; File W:\cpp\void\ktt-c\ccemit.c
; Line 11
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 136				; 00000088H
	xor	edx, edx
	mov	rcx, QWORD PTR value$[rsp]
	call	memset
; Line 12
	mov	rax, QWORD PTR value$[rsp]
	mov	ecx, DWORD PTR kind$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 13
	mov	rax, QWORD PTR value$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 14
	mov	rax, QWORD PTR value$[rsp]
; Line 15
	add	rsp, 40					; 00000028H
	ret	0
ccvm_value_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$1 = 32
list$ = 40
reader$ = 80
ccread_translation_unit PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 10
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN2@ccread_tra:
; Line 11
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_external_declaration
	mov	QWORD PTR next$1[rsp], rax
	cmp	QWORD PTR next$1[rsp], 0
	je	SHORT $LN3@ccread_tra
; Line 12
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 208				; 000000d0H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$1[rsp]
	mov	ecx, 208				; 000000d0H
	rep movsb
	mov	rcx, QWORD PTR next$1[rsp]
	call	cctree_del
; Line 13
	jmp	SHORT $LN2@ccread_tra
$LN3@ccread_tra:
; Line 14
	mov	rax, QWORD PTR list$[rsp]
; Line 15
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_translation_unit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv89 = 48
decl$ = 56
reader$ = 80
ccread_external_declaration PROC
; File W:\cpp\void\ktt-c\ccread.c
; Line 19
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 20
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl
	mov	QWORD PTR decl$[rsp], rax
; Line 22
	cmp	QWORD PTR decl$[rsp], 0
	jne	SHORT $LN2@ccread_ext
	xor	eax, eax
	jmp	$LN1@ccread_ext
$LN2@ccread_ext:
; Line 25
	mov	rax, QWORD PTR decl$[rsp]
	cmp	DWORD PTR [rax], 9
	je	SHORT $LN3@ccread_ext
	int	3
$LN3@ccread_ext:
; Line 27
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+112], 0
	jne	SHORT $LN4@ccread_ext
	int	3
$LN4@ccread_ext:
; Line 28
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+112]
	cmp	DWORD PTR [rax], 8
	je	SHORT $LN5@ccread_ext
	int	3
$LN5@ccread_ext:
; Line 29
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+112]
	cmp	QWORD PTR [rax+88], 0
	jne	SHORT $LN6@ccread_ext
	int	3
$LN6@ccread_ext:
; Line 30
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+112]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN7@ccread_ext
	int	3
$LN7@ccread_ext:
; Line 32
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	rax, QWORD PTR [rax+88]
	cmp	DWORD PTR [rax], 4
	jne	$LN8@ccread_ext
; Line 35
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN15@ccread_ext
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+112]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN16@ccread_ext
$LN15@ccread_ext:
	mov	DWORD PTR tv89[rsp], 0
$LN16@ccread_ext:
	mov	eax, DWORD PTR tv89[rsp]
	xor	edx, edx
	mov	ecx, 208				; 000000d0H
	div	rcx
	cmp	rax, 1
	je	SHORT $LN10@ccread_ext
	int	3
$LN10@ccread_ext:
; Line 37
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_stmt
	mov	rcx, QWORD PTR decl$[rsp]
	mov	rcx, QWORD PTR [rcx+112]
	mov	QWORD PTR [rcx+64], rax
; Line 39
	mov	rax, QWORD PTR decl$[rsp]
	mov	rax, QWORD PTR [rax+112]
	cmp	QWORD PTR [rax+64], 0
	jne	SHORT $LN11@ccread_ext
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN11@ccread_ext
	lea	rax, OFFSET FLAT:$SG47241
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47242
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47243
	mov	r8d, 39					; 00000027H
	lea	rdx, OFFSET FLAT:$SG47244
	mov	ecx, 40					; 00000028H
	call	cctrace_
	int	3
$LN11@ccread_ext:
; Line 40
	jmp	SHORT $LN9@ccread_ext
$LN8@ccread_ext:
; Line 43
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN12@ccread_ext
	lea	rax, OFFSET FLAT:$SG47246
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47247
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47248
	mov	r8d, 43					; 0000002bH
	lea	rdx, OFFSET FLAT:$SG47249
	mov	ecx, 41					; 00000029H
	call	cctrace_
	int	3
$LN12@ccread_ext:
$LN9@ccread_ext:
; Line 46
	cmp	QWORD PTR decl$[rsp], 0
	jne	SHORT $LN13@ccread_ext
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee_end
	test	eax, eax
	jne	SHORT $LN13@ccread_ext
	lea	rax, OFFSET FLAT:$SG47251
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47252
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47253
	mov	r8d, 46					; 0000002eH
	lea	rdx, OFFSET FLAT:$SG47254
	mov	ecx, 42					; 0000002aH
	call	cctrace_
	int	3
$LN13@ccread_ext:
; Line 47
	mov	rax, QWORD PTR decl$[rsp]
$LN1@ccread_ext:
; Line 48
	add	rsp, 72					; 00000048H
	ret	0
ccread_external_declaration ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stmt$ = 32
reader$ = 64
ccread_block_or_single_stmt PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 60
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_stmt
	mov	QWORD PTR stmt$[rsp], rax
; Line 61
	cmp	QWORD PTR stmt$[rsp], 0
	jne	SHORT $LN2@ccread_blo
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_stmt
	mov	QWORD PTR stmt$[rsp], rax
$LN2@ccread_blo:
; Line 62
	mov	rax, QWORD PTR stmt$[rsp]
; Line 63
	add	rsp, 56					; 00000038H
	ret	0
ccread_block_or_single_stmt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
child$ = 48
then_tree$1 = 56
cond_tree$2 = 64
else_tree$3 = 72
then_tree$4 = 80
cond_tree$5 = 88
expr_tree$6 = 96
ident$7 = 104
list$8 = 112
reader$ = 144
ccread_stmt PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 68
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 69
	mov	QWORD PTR child$[rsp], 0
; Line 71
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_stm
; Line 74
	jmp	$LN3@ccread_stm
$LN2@ccread_stm:
; Line 75
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN4@ccread_stm
; Line 76
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_stmt
	mov	QWORD PTR child$[rsp], rax
; Line 77
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN6@ccread_stm
	lea	rax, OFFSET FLAT:$SG47084
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47085
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47086
	mov	r8d, 77					; 0000004dH
	lea	rdx, OFFSET FLAT:$SG47087
	mov	ecx, 22
	call	cctrace_
	int	3
$LN6@ccread_stm:
; Line 78
	mov	rax, QWORD PTR child$[rsp]
	jmp	$LN1@ccread_stm
; Line 79
	jmp	$LN5@ccread_stm
$LN4@ccread_stm:
; Line 80
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl
	mov	QWORD PTR child$[rsp], rax
	cmp	QWORD PTR child$[rsp], 0
	je	SHORT $LN7@ccread_stm
; Line 81
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN9@ccread_stm
	lea	rax, OFFSET FLAT:$SG47091
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47092
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47093
	mov	r8d, 81					; 00000051H
	lea	rdx, OFFSET FLAT:$SG47094
	mov	ecx, 23
	call	cctrace_
	int	3
$LN9@ccread_stm:
; Line 82
	mov	rax, QWORD PTR child$[rsp]
	jmp	$LN1@ccread_stm
; Line 83
	jmp	$LN8@ccread_stm
$LN7@ccread_stm:
; Line 84
	mov	edx, 81					; 00000051H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN10@ccread_stm
; Line 86
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR expr_tree$6[rsp], rax
; Line 87
	mov	rcx, QWORD PTR expr_tree$6[rsp]
	call	cctree_return_statement
	mov	QWORD PTR child$[rsp], rax
; Line 89
	cmp	QWORD PTR expr_tree$6[rsp], 0
	jne	SHORT $LN12@ccread_stm
	lea	rax, OFFSET FLAT:$SG47098
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47099
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47100
	mov	r8d, 89					; 00000059H
	lea	rdx, OFFSET FLAT:$SG47101
	mov	ecx, 24
	call	cctrace_
	int	3
$LN12@ccread_stm:
; Line 91
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN13@ccread_stm
	lea	rax, OFFSET FLAT:$SG47103
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47104
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47105
	mov	r8d, 91					; 0000005bH
	lea	rdx, OFFSET FLAT:$SG47106
	mov	ecx, 25
	call	cctrace_
	int	3
$LN13@ccread_stm:
; Line 92
	jmp	$LN11@ccread_stm
$LN10@ccread_stm:
; Line 93
	mov	edx, 78					; 0000004eH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN14@ccread_stm
; Line 95
	mov	QWORD PTR cond_tree$2[rsp], 0
	mov	QWORD PTR then_tree$1[rsp], 0
; Line 97
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN16@ccread_stm
	lea	rax, OFFSET FLAT:$SG47110
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47111
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47112
	mov	r8d, 97					; 00000061H
	lea	rdx, OFFSET FLAT:$SG47113
	mov	ecx, 26
	call	cctrace_
	int	3
$LN16@ccread_stm:
; Line 98
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR cond_tree$2[rsp], rax
; Line 99
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN17@ccread_stm
	lea	rax, OFFSET FLAT:$SG47115
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47116
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47117
	mov	r8d, 99					; 00000063H
	lea	rdx, OFFSET FLAT:$SG47118
	mov	ecx, 27
	call	cctrace_
	int	3
$LN17@ccread_stm:
; Line 101
	cmp	QWORD PTR cond_tree$2[rsp], 0
	jne	SHORT $LN18@ccread_stm
	lea	rax, OFFSET FLAT:$SG47120
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47121
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47122
	mov	r8d, 101				; 00000065H
	lea	rdx, OFFSET FLAT:$SG47123
	mov	ecx, 28
	call	cctrace_
	int	3
$LN18@ccread_stm:
; Line 103
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN19@ccread_stm
; Line 105
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR then_tree$1[rsp], rax
; Line 106
	cmp	QWORD PTR then_tree$1[rsp], 0
	jne	SHORT $LN20@ccread_stm
	lea	rax, OFFSET FLAT:$SG47126
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47127
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47128
	mov	r8d, 106				; 0000006aH
	lea	rdx, OFFSET FLAT:$SG47129
	mov	ecx, 29
	call	cctrace_
	int	3
$LN20@ccread_stm:
$LN19@ccread_stm:
; Line 108
	mov	rdx, QWORD PTR then_tree$1[rsp]
	mov	rcx, QWORD PTR cond_tree$2[rsp]
	call	cctree_while_statement
	mov	QWORD PTR child$[rsp], rax
; Line 109
	jmp	$LN15@ccread_stm
$LN14@ccread_stm:
; Line 110
	mov	edx, 80					; 00000050H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN21@ccread_stm
; Line 112
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_identifier
	mov	QWORD PTR ident$7[rsp], rax
; Line 113
	cmp	QWORD PTR ident$7[rsp], 0
	jne	SHORT $LN23@ccread_stm
	lea	rax, OFFSET FLAT:$SG47133
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47134
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47135
	mov	r8d, 113				; 00000071H
	lea	rdx, OFFSET FLAT:$SG47136
	mov	ecx, 30
	call	cctrace_
	int	3
$LN23@ccread_stm:
; Line 115
	mov	rcx, QWORD PTR ident$7[rsp]
	call	cctree_goto_statement
	mov	QWORD PTR child$[rsp], rax
; Line 117
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN24@ccread_stm
	lea	rax, OFFSET FLAT:$SG47138
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47139
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47140
	mov	r8d, 117				; 00000075H
	lea	rdx, OFFSET FLAT:$SG47141
	mov	ecx, 31
	call	cctrace_
	int	3
$LN24@ccread_stm:
; Line 118
	jmp	$LN22@ccread_stm
$LN21@ccread_stm:
; Line 119
	mov	edx, 74					; 0000004aH
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN25@ccread_stm
; Line 122
	jmp	$LN26@ccread_stm
$LN25@ccread_stm:
; Line 123
	mov	edx, 72					; 00000048H
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN27@ccread_stm
; Line 125
	mov	QWORD PTR cond_tree$5[rsp], 0
; Line 126
	mov	QWORD PTR then_tree$4[rsp], 0
; Line 127
	mov	QWORD PTR else_tree$3[rsp], 0
; Line 129
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN29@ccread_stm
	lea	rax, OFFSET FLAT:$SG47147
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47148
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47149
	mov	r8d, 129				; 00000081H
	lea	rdx, OFFSET FLAT:$SG47150
	mov	ecx, 32					; 00000020H
	call	cctrace_
	int	3
$LN29@ccread_stm:
; Line 130
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR cond_tree$5[rsp], rax
; Line 131
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN30@ccread_stm
	lea	rax, OFFSET FLAT:$SG47152
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47153
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47154
	mov	r8d, 131				; 00000083H
	lea	rdx, OFFSET FLAT:$SG47155
	mov	ecx, 33					; 00000021H
	call	cctrace_
	int	3
$LN30@ccread_stm:
; Line 133
	cmp	QWORD PTR cond_tree$5[rsp], 0
	jne	SHORT $LN31@ccread_stm
	lea	rax, OFFSET FLAT:$SG47157
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47158
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47159
	mov	r8d, 133				; 00000085H
	lea	rdx, OFFSET FLAT:$SG47160
	mov	ecx, 34					; 00000022H
	call	cctrace_
	int	3
$LN31@ccread_stm:
; Line 135
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN32@ccread_stm
; Line 136
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR then_tree$4[rsp], rax
; Line 137
	cmp	QWORD PTR then_tree$4[rsp], 0
	jne	SHORT $LN33@ccread_stm
	lea	rax, OFFSET FLAT:$SG47163
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47164
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47165
	mov	r8d, 137				; 00000089H
	lea	rdx, OFFSET FLAT:$SG47166
	mov	ecx, 35					; 00000023H
	call	cctrace_
	int	3
$LN33@ccread_stm:
$LN32@ccread_stm:
; Line 139
	mov	edx, 74					; 0000004aH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN34@ccread_stm
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN34@ccread_stm
; Line 140
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_block_or_single_stmt
	mov	QWORD PTR else_tree$3[rsp], rax
; Line 141
	cmp	QWORD PTR else_tree$3[rsp], 0
	jne	SHORT $LN35@ccread_stm
	lea	rax, OFFSET FLAT:$SG47169
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47170
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47171
	mov	r8d, 141				; 0000008dH
	lea	rdx, OFFSET FLAT:$SG47172
	mov	ecx, 36					; 00000024H
	call	cctrace_
	int	3
$LN35@ccread_stm:
$LN34@ccread_stm:
; Line 144
	mov	r8, QWORD PTR else_tree$3[rsp]
	mov	rdx, QWORD PTR then_tree$4[rsp]
	mov	rcx, QWORD PTR cond_tree$5[rsp]
	call	cctree_conditional_statement
	mov	QWORD PTR child$[rsp], rax
; Line 146
	jmp	$LN28@ccread_stm
$LN27@ccread_stm:
; Line 148
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR child$[rsp], rax
	cmp	QWORD PTR child$[rsp], 0
	je	$LN36@ccread_stm
; Line 151
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	$LN37@ccread_stm
; Line 153
	mov	rax, QWORD PTR child$[rsp]
	cmp	DWORD PTR [rax], 2
	jne	$LN38@ccread_stm
; Line 155
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN40@ccread_stm
; Line 158
	mov	QWORD PTR list$8[rsp], 0
; Line 159
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	eax, DWORD PTR [rax+56]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN42@ccread_stm
; Line 160
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_stmt_list
	mov	QWORD PTR list$8[rsp], rax
$LN42@ccread_stm:
; Line 162
	mov	rdx, QWORD PTR list$8[rsp]
	mov	rcx, QWORD PTR child$[rsp]
	call	cctree_label_statement
	mov	QWORD PTR child$[rsp], rax
; Line 163
	jmp	SHORT $LN41@ccread_stm
$LN40@ccread_stm:
; Line 164
	lea	rax, OFFSET FLAT:$SG47180
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47181
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47182
	mov	r8d, 164				; 000000a4H
	lea	rdx, OFFSET FLAT:$SG47183
	mov	ecx, 37					; 00000025H
	call	cctrace_
	int	3
$LN41@ccread_stm:
; Line 165
	jmp	SHORT $LN39@ccread_stm
$LN38@ccread_stm:
; Line 166
	lea	rax, OFFSET FLAT:$SG47184
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47185
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47186
	mov	r8d, 166				; 000000a6H
	lea	rdx, OFFSET FLAT:$SG47187
	mov	ecx, 38					; 00000026H
	call	cctrace_
	int	3
$LN39@ccread_stm:
$LN37@ccread_stm:
; Line 169
	mov	rax, QWORD PTR child$[rsp]
	jmp	SHORT $LN1@ccread_stm
$LN36@ccread_stm:
$LN28@ccread_stm:
$LN26@ccread_stm:
$LN22@ccread_stm:
$LN15@ccread_stm:
$LN11@ccread_stm:
$LN8@ccread_stm:
$LN5@ccread_stm:
$LN3@ccread_stm:
; Line 171
	mov	rax, QWORD PTR child$[rsp]
$LN1@ccread_stm:
; Line 172
	add	rsp, 136				; 00000088H
	ret	0
ccread_stmt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 80
ccread_stmt_list PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 176
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 177
	mov	QWORD PTR list$[rsp], 0
$LN2@ccread_stm:
; Line 178
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_stmt
	mov	QWORD PTR next$[rsp], rax
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN3@ccread_stm
; Line 180
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 208				; 000000d0H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$[rsp]
	mov	ecx, 208				; 000000d0H
	rep movsb
; Line 181
	mov	rcx, QWORD PTR next$[rsp]
	call	cctree_del
; Line 183
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee_end
	test	eax, eax
	je	SHORT $LN4@ccread_stm
	jmp	SHORT $LN3@ccread_stm
$LN4@ccread_stm:
; Line 184
	jmp	SHORT $LN2@ccread_stm
$LN3@ccread_stm:
; Line 185
	mov	rax, QWORD PTR list$[rsp]
; Line 186
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_stmt_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stmt$1 = 48
reader$ = 80
ccread_block_stmt PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 190
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN2@ccread_blo
; Line 191
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_stmt_list
	mov	QWORD PTR stmt$1[rsp], rax
; Line 192
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN3@ccread_blo
; Line 193
	lea	rax, OFFSET FLAT:$SG47206
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG47207
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG47208
	mov	r8d, 193				; 000000c1H
	lea	rdx, OFFSET FLAT:$SG47209
	mov	ecx, 39					; 00000027H
	call	cctrace_
	int	3
$LN3@ccread_blo:
; Line 194
	mov	rdx, QWORD PTR stmt$1[rsp]
	xor	ecx, ecx
	call	cctree_block_stmt
	jmp	SHORT $LN1@ccread_blo
$LN2@ccread_blo:
; Line 196
	xor	eax, eax
$LN1@ccread_blo:
; Line 197
	add	rsp, 72					; 00000048H
	ret	0
ccread_block_stmt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
expr_tree$ = 64
cctree_return_statement PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 49
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 4
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 50
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR expr_tree$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 51
	mov	rax, QWORD PTR tree$[rsp]
; Line 52
	add	rsp, 56					; 00000038H
	ret	0
cctree_return_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
name$ = 64
cctree_goto_statement PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 41
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR name$[rsp], 0
	je	SHORT $LN3@cctree_got
	mov	rax, QWORD PTR name$[rsp]
	cmp	DWORD PTR [rax], 2
	je	SHORT $LN2@cctree_got
$LN3@cctree_got:
	int	3
$LN2@cctree_got:
; Line 42
	mov	ecx, 5
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 43
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_idenname
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 44
	mov	rax, QWORD PTR tree$[rsp]
; Line 45
	add	rsp, 56					; 00000038H
	ret	0
cctree_goto_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
name$ = 64
list$ = 72
cctree_label_statement PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 32
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR name$[rsp], 0
	je	SHORT $LN3@cctree_lab
	mov	rax, QWORD PTR name$[rsp]
	cmp	DWORD PTR [rax], 2
	je	SHORT $LN2@cctree_lab
$LN3@cctree_lab:
	int	3
$LN2@cctree_lab:
; Line 33
	mov	ecx, 3
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 34
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_idenname
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 35
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 36
	mov	rax, QWORD PTR tree$[rsp]
; Line 37
	add	rsp, 56					; 00000038H
	ret	0
cctree_label_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
cond_tree$ = 64
then_tree$ = 72
cctree_while_statement PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 23
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR cond_tree$[rsp], 0
	jne	SHORT $LN2@cctree_whi
	int	3
$LN2@cctree_whi:
; Line 24
	mov	ecx, 7
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 25
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR cond_tree$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 26
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR then_tree$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 27
	mov	rax, QWORD PTR tree$[rsp]
; Line 28
	add	rsp, 56					; 00000038H
	ret	0
cctree_while_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
cond_tree$ = 64
then_tree$ = 72
else_tree$ = 80
cctree_conditional_statement PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 13
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR cond_tree$[rsp], 0
	jne	SHORT $LN2@cctree_con
	int	3
$LN2@cctree_con:
; Line 14
	mov	ecx, 6
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 15
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR cond_tree$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 16
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR then_tree$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 17
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR else_tree$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 18
	mov	rax, QWORD PTR tree$[rsp]
; Line 19
	add	rsp, 56					; 00000038H
	ret	0
cctree_conditional_statement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
decl$ = 64
stmt$ = 72
cctree_block_stmt PROC
; File W:\cpp\void\ktt-c\ccreadstat.c
; Line 5
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 13
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 6
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR decl$[rsp]
	mov	QWORD PTR [rax+112], rcx
; Line 7
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR stmt$[rsp]
	mov	QWORD PTR [rax+80], rcx
; Line 8
	mov	rax, QWORD PTR tree$[rsp]
; Line 9
	add	rsp, 56					; 00000038H
	ret	0
cctree_block_stmt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 80
ccread_param_decl_list PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 440
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 441
	mov	QWORD PTR list$[rsp], 0
$LN2@ccread_par:
; Line 442
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_decl
	mov	QWORD PTR next$[rsp], rax
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN3@ccread_par
; Line 444
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 208				; 000000d0H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$[rsp]
	mov	ecx, 208				; 000000d0H
	rep movsb
; Line 445
	mov	rcx, QWORD PTR next$[rsp]
	call	cctree_del
; Line 447
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_par
	jmp	SHORT $LN3@ccread_par
$LN4@ccread_par:
; Line 448
	jmp	SHORT $LN2@ccread_par
$LN3@ccread_par:
; Line 449
	mov	rax, QWORD PTR list$[rsp]
; Line 450
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_param_decl_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spec$ = 48
decl$ = 56
reader$ = 80
ccread_param_decl PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 425
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 426
	mov	QWORD PTR spec$[rsp], 0
; Line 427
	mov	QWORD PTR decl$[rsp], 0
; Line 429
	mov	edx, 12
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_par
; Line 430
	lea	rax, OFFSET FLAT:$SG46992
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46993
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46994
	mov	r8d, 430				; 000001aeH
	lea	rdx, OFFSET FLAT:$SG46995
	mov	ecx, 21
	call	cctrace_
	int	3
$LN2@ccread_par:
; Line 432
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_declaration_specifiers
	mov	QWORD PTR spec$[rsp], rax
; Line 433
	cmp	QWORD PTR spec$[rsp], 0
	je	SHORT $LN3@ccread_par
	mov	rdx, QWORD PTR spec$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
$LN3@ccread_par:
; Line 435
	mov	rax, QWORD PTR decl$[rsp]
; Line 436
	add	rsp, 72					; 00000048H
	ret	0
ccread_param_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
parser$ = 64
ccread_alignment_specifier PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 355
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR parser$[rsp]
	call	kttc__peek_alignment_specifier
	test	rax, rax
	je	SHORT $LN2@ccread_ali
; Line 356
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 358
	mov	eax, 1
	jmp	SHORT $LN1@ccread_ali
$LN2@ccread_ali:
; Line 360
	xor	eax, eax
$LN1@ccread_ali:
; Line 361
	add	rsp, 56					; 00000038H
	ret	0
ccread_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
parser$ = 64
ccread_function_specifier PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 341
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR parser$[rsp]
	call	kttc__peek_func_specifier
	test	rax, rax
	je	SHORT $LN2@ccread_fun
; Line 342
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 344
	mov	eax, 1
	jmp	SHORT $LN1@ccread_fun
$LN2@ccread_fun:
; Line 346
	xor	eax, eax
$LN1@ccread_fun:
; Line 347
	add	rsp, 56					; 00000038H
	ret	0
ccread_function_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
parser$ = 64
ccread_type_qualifier PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 327
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR parser$[rsp]
	call	kttc__peek_type_qualifier
	test	rax, rax
	je	SHORT $LN2@ccread_typ
; Line 328
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 330
	mov	eax, 1
	jmp	SHORT $LN1@ccread_typ
$LN2@ccread_typ:
; Line 332
	xor	eax, eax
$LN1@ccread_typ:
; Line 333
	add	rsp, 56					; 00000038H
	ret	0
ccread_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tok$1 = 32
parser$ = 64
ccread_storage_class_specifier PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 308
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 309
	mov	rcx, QWORD PTR parser$[rsp]
	call	kttc__peek_storage_class
	test	rax, rax
	je	SHORT $LN2@ccread_sto
; Line 311
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 314
	mov	eax, 1
	jmp	SHORT $LN1@ccread_sto
$LN2@ccread_sto:
; Line 316
	xor	eax, eax
$LN1@ccread_sto:
; Line 317
	add	rsp, 56					; 00000038H
	ret	0
ccread_storage_class_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
tok$1 = 40
parser$ = 64
ccread_type_specifier PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 276
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 277
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee_typespec
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	$LN4@ccread_typ
; Line 278
	mov	rax, QWORD PTR tok$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	mov	eax, DWORD PTR tv68[rsp]
	sub	eax, 46					; 0000002eH
	mov	DWORD PTR tv68[rsp], eax
	cmp	DWORD PTR tv68[rsp], 15
	ja	$LN2@ccread_typ
	movsxd	rax, DWORD PTR tv68[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN19@ccread_typ[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN5@ccread_typ:
$LN6@ccread_typ:
; Line 280
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_struct_or_union_specifier
	jmp	$LN1@ccread_typ
$LN7@ccread_typ:
; Line 281
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int8
	jmp	$LN1@ccread_typ
$LN8@ccread_typ:
; Line 282
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int16
	jmp	$LN1@ccread_typ
$LN9@ccread_typ:
; Line 283
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int32
	jmp	$LN1@ccread_typ
$LN10@ccread_typ:
; Line 284
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int64
	jmp	$LN1@ccread_typ
$LN11@ccread_typ:
; Line 285
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int8
	jmp	SHORT $LN1@ccread_typ
$LN12@ccread_typ:
; Line 286
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_void
	jmp	SHORT $LN1@ccread_typ
$LN13@ccread_typ:
; Line 287
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int8
	jmp	SHORT $LN1@ccread_typ
$LN14@ccread_typ:
; Line 288
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int16
	jmp	SHORT $LN1@ccread_typ
$LN15@ccread_typ:
; Line 289
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_int32
	jmp	SHORT $LN1@ccread_typ
$LN16@ccread_typ:
; Line 290
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_flo32
	jmp	SHORT $LN1@ccread_typ
$LN17@ccread_typ:
; Line 291
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rax, QWORD PTR ctype_flo64
	jmp	SHORT $LN1@ccread_typ
$LN2@ccread_typ:
$LN4@ccread_typ:
; Line 294
	xor	eax, eax
$LN1@ccread_typ:
; Line 295
	add	rsp, 56					; 00000038H
	ret	0
$LN19@ccread_typ:
	DD	$LN7@ccread_typ
	DD	$LN8@ccread_typ
	DD	$LN9@ccread_typ
	DD	$LN10@ccread_typ
	DD	$LN17@ccread_typ
	DD	$LN16@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN15@ccread_typ
	DD	$LN14@ccread_typ
	DD	$LN13@ccread_typ
	DD	$LN12@ccread_typ
	DD	$LN11@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN2@ccread_typ
	DD	$LN5@ccread_typ
	DD	$LN6@ccread_typ
ccread_type_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
name$1 = 48
list$2 = 56
type$3 = 64
reader$ = 96
ccread_struct_or_union_specifier PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 234
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	edx, 61					; 0000003dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_str
; Line 237
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_identifier
	mov	QWORD PTR name$1[rsp], rax
; Line 238
	mov	edx, 5
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_str
; Line 239
	lea	rax, OFFSET FLAT:$SG46917
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46918
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46919
	mov	r8d, 239				; 000000efH
	lea	rdx, OFFSET FLAT:$SG46920
	mov	ecx, 19
	call	cctrace_
	int	3
$LN4@ccread_str:
; Line 240
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_decl_list
	mov	QWORD PTR list$2[rsp], rax
; Line 241
	mov	edx, 6
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN5@ccread_str
; Line 242
	lea	rax, OFFSET FLAT:$SG46922
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46923
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46924
	mov	r8d, 242				; 000000f2H
	lea	rdx, OFFSET FLAT:$SG46925
	mov	ecx, 20
	call	cctrace_
	int	3
$LN5@ccread_str:
; Line 243
	mov	rdx, QWORD PTR name$1[rsp]
	mov	rcx, QWORD PTR list$2[rsp]
	call	cctype_new_struct_spec
	mov	QWORD PTR type$3[rsp], rax
; Line 244
	mov	rax, QWORD PTR type$3[rsp]
	jmp	SHORT $LN1@ccread_str
; Line 245
	jmp	SHORT $LN3@ccread_str
$LN2@ccread_str:
; Line 248
	lea	rax, OFFSET FLAT:$SG46927
	test	rax, rax
	je	SHORT $LN6@ccread_str
	int	3
$LN6@ccread_str:
$LN3@ccread_str:
; Line 250
	xor	eax, eax
$LN1@ccread_str:
; Line 251
	add	rsp, 88					; 00000058H
	ret	0
ccread_struct_or_union_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
parser$ = 80
ccread_struct_decl_list PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 225
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN2@ccread_str:
; Line 226
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_struct_decl
	mov	QWORD PTR next$[rsp], rax
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN3@ccread_str
; Line 227
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 208				; 000000d0H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$[rsp]
	mov	ecx, 208				; 000000d0H
	rep movsb
	mov	rcx, QWORD PTR next$[rsp]
	call	cctree_del
; Line 228
	jmp	SHORT $LN2@ccread_str
$LN3@ccread_str:
; Line 229
	mov	rax, QWORD PTR list$[rsp]
; Line 230
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_struct_decl_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
list$ = 56
parser$ = 80
ccread_struct_decl PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 214
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 215
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_specifier_qualifier_list
	mov	QWORD PTR type$[rsp], rax
	cmp	QWORD PTR type$[rsp], 0
	je	SHORT $LN2@ccread_str
; Line 216
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_struct_decl_name_list
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN3@ccread_str
; Line 217
	mov	rdx, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	call	cctree_decl
	jmp	SHORT $LN1@ccread_str
	jmp	SHORT $LN4@ccread_str
$LN3@ccread_str:
; Line 218
	lea	rax, OFFSET FLAT:$SG46895
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46896
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46897
	mov	r8d, 218				; 000000daH
	lea	rdx, OFFSET FLAT:$SG46898
	mov	ecx, 18
	call	cctrace_
	int	3
$LN4@ccread_str:
$LN2@ccread_str:
; Line 220
	xor	eax, eax
$LN1@ccread_str:
; Line 221
	add	rsp, 72					; 00000048H
	ret	0
ccread_struct_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 80
type$ = 88
ccread_struct_decl_name_list PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 191
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_str:
; Line 193
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_struct_decl_name
	mov	QWORD PTR next$[rsp], rax
; Line 194
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN5@ccread_str
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 208				; 000000d0H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$[rsp]
	mov	ecx, 208				; 000000d0H
	rep movsb
$LN5@ccread_str:
; Line 195
	mov	rcx, QWORD PTR next$[rsp]
	call	cctree_del
; Line 196
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN6@ccread_str
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_str
$LN6@ccread_str:
; Line 197
	mov	rax, QWORD PTR list$[rsp]
; Line 198
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_struct_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 48
reader$ = 80
type$ = 88
ccread_struct_decl_name PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 167
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN2@ccread_str
	int	3
$LN2@ccread_str:
; Line 168
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
; Line 169
	cmp	QWORD PTR decl$[rsp], 0
	je	SHORT $LN3@ccread_str
; Line 170
	mov	edx, 10
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN4@ccread_str
; Line 171
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_constant_expression
	mov	rcx, QWORD PTR decl$[rsp]
	mov	QWORD PTR [rcx+96], rax
; Line 172
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+96], 0
	jne	SHORT $LN5@ccread_str
	lea	rax, OFFSET FLAT:$SG46843
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46844
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46845
	mov	r8d, 172				; 000000acH
	lea	rdx, OFFSET FLAT:$SG46846
	mov	ecx, 16
	call	cctrace_
	int	3
$LN5@ccread_str:
$LN4@ccread_str:
$LN3@ccread_str:
; Line 175
	mov	rax, QWORD PTR decl$[rsp]
; Line 176
	add	rsp, 72					; 00000048H
	ret	0
ccread_struct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
decl$ = 48
reader$ = 80
type$ = 88
ccread_init_decl_name PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 154
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN2@ccread_ini
	int	3
$LN2@ccread_ini:
; Line 155
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR decl$[rsp], rax
; Line 156
	cmp	QWORD PTR decl$[rsp], 0
	je	SHORT $LN3@ccread_ini
; Line 157
	mov	edx, 109				; 0000006dH
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN4@ccread_ini
; Line 158
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_initializer
	mov	rcx, QWORD PTR decl$[rsp]
	mov	QWORD PTR [rcx+104], rax
; Line 159
	mov	rax, QWORD PTR decl$[rsp]
	cmp	QWORD PTR [rax+104], 0
	jne	SHORT $LN5@ccread_ini
	lea	rax, OFFSET FLAT:$SG46830
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46831
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46832
	mov	r8d, 159				; 0000009fH
	lea	rdx, OFFSET FLAT:$SG46833
	mov	ecx, 15
	call	cctrace_
	int	3
$LN5@ccread_ini:
$LN4@ccread_ini:
$LN3@ccread_ini:
; Line 162
	mov	rax, QWORD PTR decl$[rsp]
; Line 163
	add	rsp, 72					; 00000048H
	ret	0
ccread_init_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
type$ = 56
ccread_decl_name_modifier_maybe PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 137
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 138
	mov	edx, 92					; 0000005cH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN2@ccread_dec
; Line 139
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_decl_name_modifier_maybe
	mov	rcx, rax
	call	cctype_new_ptr
	jmp	SHORT $LN1@ccread_dec
$LN2@ccread_dec:
; Line 141
	mov	rax, QWORD PTR type$[rsp]
$LN1@ccread_dec:
; Line 142
	add	rsp, 40					; 00000028H
	ret	0
ccread_decl_name_modifier_maybe ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
mod$1 = 48
tmp$2 = 56
res$3 = 64
nam$4 = 72
mod$5 = 80
mod$6 = 88
reader$ = 128
type$ = 136
ccread_direct_decl_name PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 114
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_dir
; Line 117
	mov	rcx, QWORD PTR type$[rsp]
	call	cctype_clone
	mov	QWORD PTR mod$1[rsp], rax
; Line 118
	mov	rdx, QWORD PTR mod$1[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name
	mov	QWORD PTR res$3[rsp], rax
; Line 119
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_dir
	lea	rax, OFFSET FLAT:$SG46805
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46806
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46807
	mov	r8d, 119				; 00000077H
	lea	rdx, OFFSET FLAT:$SG46808
	mov	ecx, 14
	call	cctrace_
	int	3
$LN4@ccread_dir:
; Line 120
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR tmp$2[rsp], rax
; Line 121
	mov	rdi, QWORD PTR mod$1[rsp]
	mov	rsi, QWORD PTR tmp$2[rsp]
	mov	ecx, 56					; 00000038H
	rep movsb
; Line 122
	mov	rcx, QWORD PTR tmp$2[rsp]
	call	cctype_del
; Line 123
	mov	rax, QWORD PTR res$3[rsp]
	jmp	$LN1@ccread_dir
; Line 124
	jmp	$LN3@ccread_dir
$LN2@ccread_dir:
; Line 125
	mov	edx, 18
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN5@ccread_dir
; Line 126
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_identifier
	mov	QWORD PTR nam$4[rsp], rax
; Line 127
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR mod$5[rsp], rax
; Line 128
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR nam$4[rsp]
	mov	rcx, QWORD PTR mod$5[rsp]
	call	cctree_decl_name
	jmp	SHORT $LN1@ccread_dir
; Line 129
	jmp	SHORT $LN6@ccread_dir
$LN5@ccread_dir:
; Line 130
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR mod$6[rsp], rax
; Line 131
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR mod$6[rsp]
	call	cctree_decl_name
$LN6@ccread_dir:
$LN3@ccread_dir:
$LN1@ccread_dir:
; Line 133
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
ccread_direct_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
modifier$1 = 48
list$2 = 56
modifier$3 = 64
expression$4 = 72
reader$ = 96
type$ = 104
ccread_direct_decl_name_modifier PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 85
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	edx, 3
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	$LN2@ccread_dir
; Line 87
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_type_list
	mov	QWORD PTR list$2[rsp], rax
; Line 89
	mov	edx, 4
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_dir
	lea	rax, OFFSET FLAT:$SG46768
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46769
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46770
	mov	r8d, 89					; 00000059H
	lea	rdx, OFFSET FLAT:$SG46771
	mov	ecx, 10
	call	cctrace_
	int	3
$LN4@ccread_dir:
; Line 91
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR modifier$1[rsp], rax
; Line 93
	mov	rax, QWORD PTR modifier$1[rsp]
	cmp	DWORD PTR [rax], 4
	jne	SHORT $LN5@ccread_dir
	lea	rax, OFFSET FLAT:$SG46773
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46774
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46775
	mov	r8d, 93					; 0000005dH
	lea	rdx, OFFSET FLAT:$SG46776
	mov	ecx, 11
	call	cctrace_
$LN5@ccread_dir:
; Line 94
	mov	rax, QWORD PTR modifier$1[rsp]
	cmp	DWORD PTR [rax], 3
	jne	SHORT $LN6@ccread_dir
	lea	rax, OFFSET FLAT:$SG46778
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46779
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46780
	mov	r8d, 94					; 0000005eH
	lea	rdx, OFFSET FLAT:$SG46781
	mov	ecx, 12
	call	cctrace_
$LN6@ccread_dir:
; Line 96
	mov	rdx, QWORD PTR list$2[rsp]
	mov	rcx, QWORD PTR modifier$1[rsp]
	call	cctype_new_fun
	jmp	$LN1@ccread_dir
; Line 97
	jmp	$LN3@ccread_dir
$LN2@ccread_dir:
; Line 98
	mov	edx, 7
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN7@ccread_dir
; Line 100
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_expression
	mov	QWORD PTR expression$4[rsp], rax
; Line 103
	mov	edx, 8
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN8@ccread_dir
; Line 104
	lea	rax, OFFSET FLAT:$SG46784
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46785
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46786
	mov	r8d, 104				; 00000068H
	lea	rdx, OFFSET FLAT:$SG46787
	mov	ecx, 13
	call	cctrace_
	int	3
$LN8@ccread_dir:
; Line 107
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name_modifier
	mov	QWORD PTR modifier$3[rsp], rax
; Line 108
	mov	rcx, QWORD PTR modifier$3[rsp]
	call	cctype_new_arr
	jmp	SHORT $LN1@ccread_dir
$LN7@ccread_dir:
$LN3@ccread_dir:
; Line 110
	mov	rax, QWORD PTR type$[rsp]
$LN1@ccread_dir:
; Line 111
	add	rsp, 88					; 00000058H
	ret	0
ccread_direct_decl_name_modifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
desi$ = 48
parser$ = 80
ccread_initializer_list PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 54
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_init_designation
	mov	QWORD PTR desi$[rsp], rax
; Line 56
	mov	edx, 9
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN2@ccread_ini
; Line 57
	cmp	QWORD PTR desi$[rsp], 0
	jne	SHORT $LN3@ccread_ini
; Line 58
	lea	rax, OFFSET FLAT:$SG46741
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46742
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46743
	mov	r8d, 58					; 0000003aH
	lea	rdx, OFFSET FLAT:$SG46744
	mov	ecx, 8
	call	cctrace_
	int	3
$LN3@ccread_ini:
; Line 61
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_initializer_list
	mov	rcx, QWORD PTR desi$[rsp]
	mov	QWORD PTR [rcx+136], rax
$LN2@ccread_ini:
; Line 63
	mov	rax, QWORD PTR desi$[rsp]
; Line 64
	add	rsp, 72					; 00000048H
	ret	0
ccread_initializer_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 48
init$ = 56
parser$ = 80
ccread_init_designation PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 37
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_designator_list
	mov	QWORD PTR list$[rsp], rax
; Line 38
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN2@ccread_ini
; Line 39
	mov	edx, 109				; 0000006dH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN3@ccread_ini
; Line 40
	lea	rax, OFFSET FLAT:$SG46725
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46726
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46727
	mov	r8d, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG46728
	mov	ecx, 6
	call	cctrace_
	int	3
$LN3@ccread_ini:
$LN2@ccread_ini:
; Line 43
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_initializer
	mov	QWORD PTR init$[rsp], rax
; Line 44
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN4@ccread_ini
; Line 45
	cmp	QWORD PTR init$[rsp], 0
	jne	SHORT $LN5@ccread_ini
; Line 46
	lea	rax, OFFSET FLAT:$SG46731
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46732
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46733
	mov	r8d, 46					; 0000002eH
	lea	rdx, OFFSET FLAT:$SG46734
	mov	ecx, 7
	call	cctrace_
	int	3
$LN5@ccread_ini:
$LN4@ccread_ini:
; Line 49
	mov	rdx, QWORD PTR init$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	call	cctree_new_designation
; Line 50
	add	rsp, 72					; 00000048H
	ret	0
ccread_init_designation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
parser$ = 64
ccread_designator_list PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 28
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_designator
	mov	QWORD PTR result$[rsp], rax
; Line 29
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@ccread_des
; Line 30
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_designator_list
	mov	rcx, QWORD PTR result$[rsp]
	mov	QWORD PTR [rcx+192], rax
$LN2@ccread_des:
; Line 32
	mov	rax, QWORD PTR result$[rsp]
; Line 33
	add	rsp, 56					; 00000038H
	ret	0
ccread_designator_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cex$1 = 32
tok$2 = 40
cex$3 = 48
tok$4 = 56
parser$ = 80
ccread_designator PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 13
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	edx, 7
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_des
; Line 14
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 15
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_constant_expression
	mov	QWORD PTR cex$1[rsp], rax
; Line 16
	mov	rdx, QWORD PTR cex$1[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_new_designator
	jmp	SHORT $LN1@ccread_des
; Line 17
	jmp	SHORT $LN3@ccread_des
$LN2@ccread_des:
; Line 18
	mov	edx, 90					; 0000005aH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN4@ccread_des
; Line 19
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$4[rsp], rax
; Line 20
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_identifier
	mov	QWORD PTR cex$3[rsp], rax
; Line 21
	mov	rdx, QWORD PTR cex$3[rsp]
	mov	rcx, QWORD PTR tok$4[rsp]
	call	cctree_new_designator
	jmp	SHORT $LN1@ccread_des
$LN4@ccread_des:
$LN3@ccread_des:
; Line 23
	xor	eax, eax
$LN1@ccread_des:
; Line 24
	add	rsp, 72					; 00000048H
	ret	0
ccread_designator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$1 = 48
parser$ = 80
ccread_initializer PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 68
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 69
	mov	edx, 5
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN2@ccread_ini
; Line 71
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_initializer_list
	mov	QWORD PTR list$1[rsp], rax
; Line 73
	mov	edx, 6
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_ini
; Line 74
	lea	rax, OFFSET FLAT:$SG46752
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46753
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46754
	mov	r8d, 74					; 0000004aH
	lea	rdx, OFFSET FLAT:$SG46755
	mov	ecx, 9
	call	cctrace_
	int	3
$LN4@ccread_ini:
; Line 76
	mov	rax, QWORD PTR list$1[rsp]
	jmp	SHORT $LN1@ccread_ini
; Line 77
	jmp	SHORT $LN3@ccread_ini
$LN2@ccread_ini:
; Line 79
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_assignment_expr
$LN3@ccread_ini:
$LN1@ccread_ini:
; Line 81
	add	rsp, 72					; 00000048H
	ret	0
ccread_initializer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
list$ = 32
reader$ = 64
ccread_param_type_list PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 454
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 455
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_param_decl_list
	mov	QWORD PTR list$[rsp], rax
; Line 460
	mov	rax, QWORD PTR list$[rsp]
; Line 461
	add	rsp, 56					; 00000038H
	ret	0
ccread_param_type_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
ccread_constant_expression PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 396
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 397
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_conditional_expr
; Line 398
	add	rsp, 40					; 00000028H
	ret	0
ccread_constant_expression ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
rhs$1 = 48
lhs$2 = 56
tok$3 = 64
rad$ = 72
parser$ = 96
ccread_conditional_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 355
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_or_expr
	mov	QWORD PTR rad$[rsp], rax
; Line 357
	mov	edx, 108				; 0000006cH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR tok$3[rsp], rax
	cmp	QWORD PTR tok$3[rsp], 0
	je	$LN2@ccread_con
; Line 359
	mov	QWORD PTR lhs$2[rsp], 0
	mov	QWORD PTR rhs$1[rsp], 0
; Line 360
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_or_expr
	mov	QWORD PTR lhs$2[rsp], rax
; Line 362
	mov	edx, 10
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN3@ccread_con
; Line 363
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_conditional_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 364
	jmp	SHORT $LN4@ccread_con
$LN3@ccread_con:
; Line 365
	lea	rax, OFFSET FLAT:$SG46666
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46667
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46668
	mov	r8d, 365				; 0000016dH
	lea	rdx, OFFSET FLAT:$SG46669
	mov	ecx, 5
	call	cctrace_
	int	3
$LN4@ccread_con:
; Line 368
	mov	r9, QWORD PTR rhs$1[rsp]
	mov	r8, QWORD PTR lhs$2[rsp]
	mov	rdx, QWORD PTR rad$[rsp]
	mov	rcx, QWORD PTR tok$3[rsp]
	call	cctree_new_top
	jmp	SHORT $LN1@ccread_con
$LN2@ccread_con:
; Line 371
	mov	rax, QWORD PTR rad$[rsp]
$LN1@ccread_con:
; Line 372
	add	rsp, 88					; 00000058H
	ret	0
ccread_conditional_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_logical_or_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 340
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_and_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_log:
; Line 341
	mov	edx, 107				; 0000006bH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_log
; Line 342
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 343
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_logical_and_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 344
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 345
	jmp	SHORT $LN2@ccread_log
$LN3@ccread_log:
; Line 346
	mov	rax, QWORD PTR lhs$[rsp]
; Line 347
	add	rsp, 72					; 00000048H
	ret	0
ccread_logical_or_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_logical_and_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 325
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_or_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_log:
; Line 326
	mov	edx, 106				; 0000006aH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_log
; Line 327
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 328
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_or_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 329
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 330
	jmp	SHORT $LN2@ccread_log
$LN3@ccread_log:
; Line 331
	mov	rax, QWORD PTR lhs$[rsp]
; Line 332
	add	rsp, 72					; 00000048H
	ret	0
ccread_logical_and_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_bitwise_or_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 310
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_xor_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 311
	mov	edx, 105				; 00000069H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 312
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 313
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_xor_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 314
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 315
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 316
	mov	rax, QWORD PTR lhs$[rsp]
; Line 317
	add	rsp, 72					; 00000048H
	ret	0
ccread_bitwise_or_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_bitwise_xor_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 295
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_and_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 296
	mov	edx, 103				; 00000067H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 297
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 298
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_bitwise_and_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 299
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 300
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 301
	mov	rax, QWORD PTR lhs$[rsp]
; Line 302
	add	rsp, 72					; 00000048H
	ret	0
ccread_bitwise_xor_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_bitwise_and_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 280
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_bit:
; Line 281
	mov	edx, 103				; 00000067H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_bit
; Line 282
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 283
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 284
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 285
	jmp	SHORT $LN2@ccread_bit
$LN3@ccread_bit:
; Line 286
	mov	rax, QWORD PTR lhs$[rsp]
; Line 287
	add	rsp, 72					; 00000048H
	ret	0
ccread_bitwise_and_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_equality_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 263
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_relational_expr
	mov	QWORD PTR lhs$[rsp], rax
; Line 264
	mov	edx, 101				; 00000065H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN3@ccread_equ
	mov	edx, 102				; 00000066H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_equ
$LN3@ccread_equ:
; Line 266
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 267
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_equality_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 268
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_equ:
; Line 270
	mov	rax, QWORD PTR lhs$[rsp]
; Line 271
	add	rsp, 72					; 00000048H
	ret	0
ccread_equality_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_relational_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 244
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_shift_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_rel:
; Line 247
	mov	edx, 100				; 00000064H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 118				; 00000076H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 99					; 00000063H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_rel
	mov	edx, 117				; 00000075H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_rel
$LN4@ccread_rel:
; Line 249
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 250
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_shift_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 251
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 252
	jmp	$LN2@ccread_rel
$LN3@ccread_rel:
; Line 253
	mov	rax, QWORD PTR lhs$[rsp]
; Line 254
	add	rsp, 72					; 00000048H
	ret	0
ccread_relational_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_shift_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 224
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_additive_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_shi:
; Line 225
	mov	edx, 97					; 00000061H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_shi
	mov	edx, 98					; 00000062H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_shi
$LN4@ccread_shi:
; Line 227
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 228
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_additive_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 229
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 230
	jmp	SHORT $LN2@ccread_shi
$LN3@ccread_shi:
; Line 231
	mov	rax, QWORD PTR lhs$[rsp]
; Line 232
	add	rsp, 72					; 00000048H
	ret	0
ccread_shift_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_additive_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 206
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_multiplicative_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_add:
; Line 207
	mov	edx, 95					; 0000005fH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_add
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_add
$LN4@ccread_add:
; Line 210
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 211
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_multiplicative_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 212
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 213
	jmp	SHORT $LN2@ccread_add
$LN3@ccread_add:
; Line 214
	mov	rax, QWORD PTR lhs$[rsp]
; Line 215
	add	rsp, 72					; 00000048H
	ret	0
ccread_additive_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
rhs$1 = 40
tok$2 = 48
parser$ = 80
ccread_multiplicative_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 187
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary_expr
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_mul:
; Line 189
	mov	edx, 92					; 0000005cH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_mul
	mov	edx, 93					; 0000005dH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN4@ccread_mul
	mov	edx, 94					; 0000005eH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN3@ccread_mul
$LN4@ccread_mul:
; Line 192
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 193
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary_expr
	mov	QWORD PTR rhs$1[rsp], rax
; Line 194
	mov	r8, QWORD PTR rhs$1[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
; Line 195
	jmp	SHORT $LN2@ccread_mul
$LN3@ccread_mul:
; Line 196
	mov	rax, QWORD PTR lhs$[rsp]
; Line 197
	add	rsp, 72					; 00000048H
	ret	0
ccread_multiplicative_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
tok$1 = 40
tok$2 = 48
tok$3 = 56
tv159 = 64
clo$4 = 80
clo$5 = 144
clo$6 = 208
parser$ = 304
ccread_unary_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 117
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 280				; 00000118H
	mov	QWORD PTR result$[rsp], 0
; Line 119
	mov	edx, 95					; 0000005fH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN2@ccread_una
; Line 120
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$1[rsp], rax
; Line 121
	mov	edx, 95					; 0000005fH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN4@ccread_una
; Line 123
	lea	rax, QWORD PTR clo$4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$1[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 124
	mov	QWORD PTR clo$4[rsp+8], 123		; 0000007bH
; Line 125
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_cast_expr
	mov	rdx, rax
	lea	rcx, QWORD PTR clo$4[rsp]
	call	cctree_new_uop
	mov	QWORD PTR result$[rsp], rax
; Line 126
	jmp	SHORT $LN5@ccread_una
$LN4@ccread_una:
; Line 127
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_cast_expr
	mov	rdx, rax
	mov	rcx, QWORD PTR tok$1[rsp]
	call	cctree_new_uop
	mov	QWORD PTR result$[rsp], rax
$LN5@ccread_una:
; Line 129
	jmp	$LN3@ccread_una
$LN2@ccread_una:
; Line 130
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	$LN6@ccread_una
; Line 131
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$2[rsp], rax
; Line 132
	mov	edx, 96					; 00000060H
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN8@ccread_una
; Line 134
	lea	rax, QWORD PTR clo$5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$2[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 135
	mov	QWORD PTR clo$5[rsp+8], 122		; 0000007aH
; Line 136
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_cast_expr
	mov	rdx, rax
	lea	rcx, QWORD PTR clo$5[rsp]
	call	cctree_new_uop
	mov	QWORD PTR result$[rsp], rax
; Line 137
	jmp	SHORT $LN9@ccread_una
$LN8@ccread_una:
; Line 138
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_cast_expr
	mov	rdx, rax
	mov	rcx, QWORD PTR tok$2[rsp]
	call	cctree_new_uop
	mov	QWORD PTR result$[rsp], rax
$LN9@ccread_una:
; Line 140
	jmp	$LN7@ccread_una
$LN6@ccread_una:
; Line 141
	mov	edx, 92					; 0000005cH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN10@ccread_una
; Line 144
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tok$3[rsp], rax
; Line 145
	lea	rax, QWORD PTR clo$6[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tok$3[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 146
	mov	QWORD PTR clo$6[rsp+8], 84		; 00000054H
; Line 148
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_cast_expr
	mov	rdx, rax
	lea	rcx, QWORD PTR clo$6[rsp]
	call	cctree_new_uop
	mov	QWORD PTR result$[rsp], rax
; Line 149
	jmp	SHORT $LN11@ccread_una
$LN10@ccread_una:
; Line 150
	mov	edx, 86					; 00000056H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN14@ccread_una
	mov	edx, 89					; 00000059H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN12@ccread_una
$LN14@ccread_una:
; Line 152
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_cast_expr
	mov	QWORD PTR tv159[rsp], rax
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rcx, QWORD PTR tv159[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	cctree_new_uop
	mov	QWORD PTR result$[rsp], rax
; Line 153
	jmp	SHORT $LN13@ccread_una
$LN12@ccread_una:
; Line 154
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_postfix_expr
	mov	QWORD PTR result$[rsp], rax
$LN13@ccread_una:
$LN11@ccread_una:
$LN7@ccread_una:
$LN3@ccread_una:
; Line 156
	mov	rax, QWORD PTR result$[rsp]
; Line 157
	add	rsp, 280				; 00000118H
	pop	rdi
	pop	rsi
	ret	0
ccread_unary_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 48
inc$1 = 56
dec$2 = 64
args$3 = 72
expression$4 = 80
parser$ = 112
ccread_postfix_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 75
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 76
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_primary_expr
	mov	QWORD PTR lhs$[rsp], rax
; Line 78
	mov	edx, 3
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN2@ccread_pos
; Line 79
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_arglist_expr
	mov	QWORD PTR args$3[rsp], rax
; Line 80
	mov	edx, 4
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_pos
	lea	rax, OFFSET FLAT:$SG46519
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46520
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46521
	mov	r8d, 80					; 00000050H
	lea	rdx, OFFSET FLAT:$SG46522
	mov	ecx, 2
	call	cctrace_
	int	3
$LN4@ccread_pos:
; Line 81
	mov	rdx, QWORD PTR args$3[rsp]
	mov	rcx, QWORD PTR lhs$[rsp]
	call	cctree_call_expr
	jmp	$LN1@ccread_pos
; Line 82
	jmp	$LN3@ccread_pos
$LN2@ccread_pos:
; Line 83
	mov	edx, 7
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN5@ccread_pos
; Line 84
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_expression
	mov	QWORD PTR expression$4[rsp], rax
; Line 86
	mov	edx, 8
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN7@ccread_pos
; Line 87
	lea	rax, OFFSET FLAT:$SG46526
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46527
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46528
	mov	r8d, 87					; 00000057H
	lea	rdx, OFFSET FLAT:$SG46529
	mov	ecx, 3
	call	cctrace_
	int	3
$LN7@ccread_pos:
; Line 89
	jmp	$LN6@ccread_pos
$LN5@ccread_pos:
; Line 90
	mov	edx, 90					; 0000005aH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	jne	SHORT $LN10@ccread_pos
	mov	edx, 91					; 0000005bH
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN8@ccread_pos
$LN10@ccread_pos:
; Line 92
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, rax
	call	cctree_new_uop
	mov	QWORD PTR lhs$[rsp], rax
; Line 93
	jmp	SHORT $LN9@ccread_pos
$LN8@ccread_pos:
; Line 94
	mov	edx, 125				; 0000007dH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR inc$1[rsp], rax
	cmp	QWORD PTR inc$1[rsp], 0
	je	SHORT $LN11@ccread_pos
; Line 95
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR inc$1[rsp]
	call	cctree_new_uop
	mov	QWORD PTR lhs$[rsp], rax
; Line 96
	jmp	SHORT $LN12@ccread_pos
$LN11@ccread_pos:
; Line 97
	mov	edx, 124				; 0000007cH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR dec$2[rsp], rax
	cmp	QWORD PTR dec$2[rsp], 0
	je	SHORT $LN13@ccread_pos
; Line 98
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR dec$2[rsp]
	call	cctree_new_uop
	mov	QWORD PTR lhs$[rsp], rax
$LN13@ccread_pos:
$LN12@ccread_pos:
$LN9@ccread_pos:
$LN6@ccread_pos:
$LN3@ccread_pos:
; Line 100
	mov	rax, QWORD PTR lhs$[rsp]
$LN1@ccread_pos:
; Line 101
	add	rsp, 104				; 00000068H
	ret	0
ccread_postfix_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv93 = 48
inner$1 = 56
parser$ = 80
ccread_primary_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 41
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 42
	mov	edx, 18
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_pri
; Line 43
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_identifier
	jmp	$LN1@ccread_pri
; Line 44
	jmp	$LN3@ccread_pri
$LN2@ccread_pri:
; Line 45
	mov	edx, 19
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN4@ccread_pri
; Line 46
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rdx, rax
	mov	rcx, QWORD PTR ctype_int64
	call	cctree_new_constant
	jmp	$LN1@ccread_pri
; Line 47
	jmp	$LN5@ccread_pri
$LN4@ccread_pri:
; Line 48
	mov	edx, 20
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN6@ccread_pri
; Line 49
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rdx, rax
	mov	rcx, QWORD PTR ctype_flo64
	call	cctree_new_constant
	jmp	$LN1@ccread_pri
; Line 50
	jmp	$LN7@ccread_pri
$LN6@ccread_pri:
; Line 51
	mov	edx, 15
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN8@ccread_pri
; Line 52
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	QWORD PTR tv93[rsp], rax
	mov	rcx, QWORD PTR ctype_int8
	call	cctype_new_arr
	mov	rcx, QWORD PTR tv93[rsp]
	mov	rdx, rcx
	mov	rcx, rax
	call	cctree_new_constant
	jmp	SHORT $LN1@ccread_pri
; Line 53
	jmp	SHORT $LN9@ccread_pri
$LN8@ccread_pri:
; Line 54
	mov	edx, 3
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	je	SHORT $LN10@ccread_pri
; Line 55
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_expression
	mov	QWORD PTR inner$1[rsp], rax
; Line 56
	mov	edx, 3
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN11@ccread_pri
	lea	rax, OFFSET FLAT:$SG46503
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46504
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46505
	mov	r8d, 56					; 00000038H
	lea	rdx, OFFSET FLAT:$SG46506
	mov	ecx, 1
	call	cctrace_
	int	3
$LN11@ccread_pri:
; Line 57
	mov	rcx, QWORD PTR inner$1[rsp]
	call	cctree_paren_expr
	jmp	SHORT $LN1@ccread_pri
$LN10@ccread_pri:
$LN9@ccread_pri:
$LN7@ccread_pri:
$LN5@ccread_pri:
$LN3@ccread_pri:
; Line 59
	xor	eax, eax
$LN1@ccread_pri:
; Line 60
	add	rsp, 72					; 00000048H
	ret	0
ccread_primary_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
ccread_identifier PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 28
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 29
	mov	edx, 18
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	rcx, rax
	call	cctree_new_identifier
; Line 30
	add	rsp, 40					; 00000028H
	ret	0
ccread_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
expr$ = 64
args$ = 72
cctree_call_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 18
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 19
	mov	ecx, 21
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 20
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 21
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR args$[rsp]
	mov	QWORD PTR [rax+72], rcx
; Line 22
	mov	rax, QWORD PTR tree$[rsp]
; Line 23
	add	rsp, 56					; 00000038H
	ret	0
cctree_call_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
body$ = 64
cctree_paren_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 10
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 11
	mov	ecx, 20
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 12
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR body$[rsp]
	mov	QWORD PTR [rax+64], rcx
; Line 13
	mov	rax, QWORD PTR tree$[rsp]
; Line 14
	add	rsp, 56					; 00000038H
	ret	0
cctree_paren_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 80
ccread_arglist_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 419
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_arg:
; Line 421
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_assignment_expr
	mov	QWORD PTR next$[rsp], rax
; Line 422
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN5@ccread_arg
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 208				; 000000d0H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$[rsp]
	mov	ecx, 208				; 000000d0H
	rep movsb
$LN5@ccread_arg:
; Line 423
	mov	rcx, QWORD PTR next$[rsp]
	call	cctree_del
; Line 424
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN6@ccread_arg
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_arg
$LN6@ccread_arg:
; Line 425
	mov	rax, QWORD PTR list$[rsp]
; Line 426
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_arglist_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
end$ = 32
com$ = 36
res$ = 40
tv135 = 44
cur$ = 48
l$ = 80
str$ = 88
cclex_readstr PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 232
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 235
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 17
; Line 236
	mov	rax, QWORD PTR l$[rsp]
	mov	QWORD PTR [rax+64], 0
; Line 238
	mov	rax, QWORD PTR str$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR end$[rsp], al
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 242
	mov	DWORD PTR res$[rsp], 32			; 00000020H
	mov	DWORD PTR com$[rsp], 0
	jmp	SHORT $LN4@cclex_read
$LN2@cclex_read:
	mov	eax, DWORD PTR res$[rsp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR res$[rsp], eax
$LN4@cclex_read:
	mov	rax, QWORD PTR l$[rsp]
	add	rax, 64					; 00000040H
	xor	r9d, r9d
	mov	r8d, DWORD PTR res$[rsp]
	mov	edx, 1
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR l$[rsp]
	add	rax, QWORD PTR [rcx+64]
	mov	QWORD PTR cur$[rsp], rax
	cmp	QWORD PTR cur$[rsp], 0
	je	$LN3@cclex_read
; Line 244
	jmp	SHORT $LN7@cclex_read
$LN5@cclex_read:
	mov	eax, DWORD PTR com$[rsp]
	inc	eax
	mov	DWORD PTR com$[rsp], eax
$LN7@cclex_read:
	mov	eax, DWORD PTR res$[rsp]
	cmp	DWORD PTR com$[rsp], eax
	jae	$LN6@cclex_read
; Line 246
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	movsx	ecx, BYTE PTR end$[rsp]
	cmp	eax, ecx
	jne	SHORT $LN10@cclex_read
; Line 247
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
; Line 248
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
; Line 249
	mov	eax, DWORD PTR com$[rsp]
	inc	eax
	mov	DWORD PTR com$[rsp], eax
; Line 251
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 15
; Line 252
	mov	rax, QWORD PTR l$[rsp]
	add	rax, 64					; 00000040H
	mov	r9d, DWORD PTR com$[rsp]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, rax
	call	ccdlb_arradd
; Line 253
	mov	rax, QWORD PTR str$[rsp]
	jmp	$LN1@cclex_read
; Line 254
	jmp	$LN11@cclex_read
$LN10@cclex_read:
; Line 255
	mov	rax, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 92					; 0000005cH
	jne	$LN12@cclex_read
; Line 256
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv135[rsp], eax
	mov	eax, DWORD PTR tv135[rsp]
	sub	eax, 34					; 00000022H
	mov	DWORD PTR tv135[rsp], eax
	cmp	DWORD PTR tv135[rsp], 86		; 00000056H
	ja	$LN25@cclex_read
	movsxd	rax, DWORD PTR tv135[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN27@cclex_read[rcx+rax]
	mov	eax, DWORD PTR $LN28@cclex_read[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN14@cclex_read:
; Line 257
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 92			; 0000005cH
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN15@cclex_read:
; Line 258
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 39			; 00000027H
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN16@cclex_read:
; Line 259
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 34			; 00000022H
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN17@cclex_read:
; Line 260
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 9
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN18@cclex_read:
; Line 261
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 12
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	$LN8@cclex_read
$LN19@cclex_read:
; Line 262
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 10
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN20@cclex_read:
; Line 263
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 13
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN21@cclex_read:
; Line 266
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN22@cclex_read:
$LN23@cclex_read:
; Line 270
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN24@cclex_read:
; Line 273
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	jmp	SHORT $LN8@cclex_read
$LN25@cclex_read:
; Line 276
	mov	rax, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
$LN8@cclex_read:
; Line 278
	mov	rax, QWORD PTR str$[rsp]
	add	rax, 2
	mov	QWORD PTR str$[rsp], rax
	jmp	SHORT $LN13@cclex_read
$LN12@cclex_read:
; Line 279
	mov	rax, QWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR cur$[rsp]
	inc	rax
	mov	QWORD PTR cur$[rsp], rax
	mov	rax, QWORD PTR str$[rsp]
	inc	rax
	mov	QWORD PTR str$[rsp], rax
$LN13@cclex_read:
$LN11@cclex_read:
; Line 280
	jmp	$LN5@cclex_read
$LN6@cclex_read:
; Line 281
	jmp	$LN2@cclex_read
$LN3@cclex_read:
; Line 282
	mov	rax, QWORD PTR str$[rsp]
$LN1@cclex_read:
; Line 283
	add	rsp, 72					; 00000048H
	ret	0
	npad	1
$LN28@cclex_read:
	DD	$LN16@cclex_read
	DD	$LN15@cclex_read
	DD	$LN21@cclex_read
	DD	$LN23@cclex_read
	DD	$LN14@cclex_read
	DD	$LN18@cclex_read
	DD	$LN19@cclex_read
	DD	$LN20@cclex_read
	DD	$LN17@cclex_read
	DD	$LN24@cclex_read
	DD	$LN22@cclex_read
	DD	$LN25@cclex_read
$LN27@cclex_read:
	DB	0
	DB	11
	DB	11
	DB	11
	DB	11
	DB	1
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	2
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	3
	DB	11
	DB	11
	DB	11
	DB	4
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	5
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	11
	DB	6
	DB	11
	DB	11
	DB	11
	DB	7
	DB	11
	DB	8
	DB	9
	DB	11
	DB	11
	DB	10
cclex_readstr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
l$ = 80
str$ = 88
cclex_identifier PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 224
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR str$[rsp]
	call	cclex_idenlen
	mov	DWORD PTR len$[rsp], eax
; Line 225
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 18
; Line 226
	mov	rax, QWORD PTR l$[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1
	mov	r8, QWORD PTR str$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_hash
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+64], rax
; Line 227
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	add	rcx, rax
	mov	rax, rcx
; Line 228
	add	rsp, 72					; 00000048H
	ret	0
cclex_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$1 = 32
tv92 = 36
tv635 = 40
tv77 = 44
u$2 = 48
d$3 = 56
p$4 = 64
l$ = 96
cclex_next_token_internal PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 288
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 289
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+24], rcx
; Line 292
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	QWORD PTR [rax+72], rcx
; Line 294
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jb	SHORT $LN15@cclex_next
; Line 295
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 0
; Line 296
	jmp	$LN1@cclex_next
$LN15@cclex_next:
; Line 298
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv77[rsp], eax
	cmp	DWORD PTR tv77[rsp], 126		; 0000007eH
	ja	SHORT $LN16@cclex_next
	movsxd	rax, DWORD PTR tv77[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN192@cclex_next[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN16@cclex_next:
; Line 300
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], -1
; Line 301
	jmp	$LN2@cclex_next
$LN17@cclex_next:
$LN18@cclex_next:
$LN19@cclex_next:
$LN20@cclex_next:
$LN21@cclex_next:
$LN22@cclex_next:
$LN23@cclex_next:
$LN24@cclex_next:
$LN25@cclex_next:
$LN26@cclex_next:
; Line 308
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	$LN27@cclex_next
; Line 309
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR tv92[rsp], al
	cmp	BYTE PTR tv92[rsp], 98			; 00000062H
	je	$LN33@cclex_next
	cmp	BYTE PTR tv92[rsp], 100			; 00000064H
	je	SHORT $LN31@cclex_next
	cmp	BYTE PTR tv92[rsp], 104			; 00000068H
	je	SHORT $LN29@cclex_next
	cmp	BYTE PTR tv92[rsp], 111			; 0000006fH
	je	SHORT $LN32@cclex_next
	cmp	BYTE PTR tv92[rsp], 120			; 00000078H
	je	SHORT $LN30@cclex_next
	jmp	$LN34@cclex_next
$LN29@cclex_next:
$LN30@cclex_next:
; Line 312
	mov	DWORD PTR b$1[rsp], 16
; Line 313
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 314
	jmp	SHORT $LN4@cclex_next
$LN31@cclex_next:
; Line 316
	mov	DWORD PTR b$1[rsp], 10
; Line 317
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 318
	jmp	SHORT $LN4@cclex_next
$LN32@cclex_next:
; Line 320
	mov	DWORD PTR b$1[rsp], 8
; Line 321
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 322
	jmp	SHORT $LN4@cclex_next
$LN33@cclex_next:
; Line 324
	mov	DWORD PTR b$1[rsp], 2
; Line 325
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 326
	jmp	SHORT $LN4@cclex_next
$LN34@cclex_next:
; Line 328
	mov	DWORD PTR b$1[rsp], 10
$LN4@cclex_next:
; Line 331
	jmp	SHORT $LN28@cclex_next
$LN27@cclex_next:
; Line 332
	mov	DWORD PTR b$1[rsp], 10
$LN28@cclex_next:
; Line 334
	mov	QWORD PTR u$2[rsp], 0
$LN6@cclex_next:
; Line 335
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN7@cclex_next
; Line 336
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN35@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN35@cclex_next
; Line 337
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 338
	jmp	$LN36@cclex_next
$LN35@cclex_next:
; Line 339
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN37@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN37@cclex_next
; Line 340
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 341
	jmp	SHORT $LN38@cclex_next
$LN37@cclex_next:
; Line 342
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN39@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN39@cclex_next
; Line 343
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR u$2[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 344
	jmp	SHORT $LN40@cclex_next
$LN39@cclex_next:
; Line 345
	jmp	SHORT $LN7@cclex_next
$LN40@cclex_next:
$LN38@cclex_next:
$LN36@cclex_next:
; Line 347
	jmp	$LN6@cclex_next
$LN7@cclex_next:
; Line 348
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN41@cclex_next
; Line 349
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 352
	movsd	xmm0, QWORD PTR __real@3ff0000000000000
	movsd	QWORD PTR p$4[rsp], xmm0
; Line 353
	mov	QWORD PTR d$3[rsp], 0
; Line 355
	jmp	SHORT $LN10@cclex_next
$LN8@cclex_next:
	cvtsi2sd xmm0, DWORD PTR b$1[rsp]
	movsd	xmm1, QWORD PTR p$4[rsp]
	mulsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p$4[rsp], xmm0
$LN10@cclex_next:
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN9@cclex_next
; Line 356
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN43@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN43@cclex_next
; Line 357
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 358
	jmp	$LN44@cclex_next
$LN43@cclex_next:
; Line 359
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN45@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN45@cclex_next
; Line 360
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 361
	jmp	SHORT $LN46@cclex_next
$LN45@cclex_next:
; Line 362
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN47@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN47@cclex_next
; Line 363
	movsxd	rax, DWORD PTR b$1[rsp]
	mov	rcx, QWORD PTR d$3[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR d$3[rsp], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 364
	jmp	SHORT $LN48@cclex_next
$LN47@cclex_next:
; Line 365
	jmp	SHORT $LN9@cclex_next
$LN48@cclex_next:
$LN46@cclex_next:
$LN44@cclex_next:
; Line 367
	jmp	$LN8@cclex_next
$LN9@cclex_next:
; Line 368
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 20
; Line 369
	mov	rax, QWORD PTR u$2[rsp]
	test	rax, rax
	jl	SHORT $LN190@cclex_next
	cvtsi2sd xmm0, rax
	jmp	SHORT $LN191@cclex_next
$LN190@cclex_next:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm1, rcx
	addsd	xmm1, xmm1
	movaps	xmm0, xmm1
$LN191@cclex_next:
	mov	rax, QWORD PTR d$3[rsp]
	test	rax, rax
	jl	SHORT $LN188@cclex_next
	cvtsi2sd xmm1, rax
	jmp	SHORT $LN189@cclex_next
$LN188@cclex_next:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	cvtsi2sd xmm2, rcx
	addsd	xmm2, xmm2
	movaps	xmm1, xmm2
$LN189@cclex_next:
	divsd	xmm1, QWORD PTR p$4[rsp]
	addsd	xmm0, xmm1
	mov	rax, QWORD PTR l$[rsp]
	movsd	QWORD PTR [rax+64], xmm0
; Line 370
	jmp	SHORT $LN42@cclex_next
$LN41@cclex_next:
; Line 371
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 19
; Line 372
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR u$2[rsp]
	mov	QWORD PTR [rax+64], rcx
$LN42@cclex_next:
; Line 374
	jmp	$LN2@cclex_next
$LN49@cclex_next:
$LN50@cclex_next:
$LN51@cclex_next:
$LN52@cclex_next:
$LN53@cclex_next:
$LN54@cclex_next:
$LN55@cclex_next:
$LN56@cclex_next:
$LN57@cclex_next:
$LN58@cclex_next:
$LN59@cclex_next:
$LN60@cclex_next:
$LN61@cclex_next:
$LN62@cclex_next:
$LN63@cclex_next:
$LN64@cclex_next:
$LN65@cclex_next:
$LN66@cclex_next:
$LN67@cclex_next:
$LN68@cclex_next:
$LN69@cclex_next:
$LN70@cclex_next:
$LN71@cclex_next:
$LN72@cclex_next:
$LN73@cclex_next:
$LN74@cclex_next:
$LN75@cclex_next:
$LN76@cclex_next:
$LN77@cclex_next:
$LN78@cclex_next:
$LN79@cclex_next:
$LN80@cclex_next:
$LN81@cclex_next:
$LN82@cclex_next:
$LN83@cclex_next:
$LN84@cclex_next:
$LN85@cclex_next:
$LN86@cclex_next:
$LN87@cclex_next:
$LN88@cclex_next:
$LN89@cclex_next:
$LN90@cclex_next:
$LN91@cclex_next:
$LN92@cclex_next:
$LN93@cclex_next:
$LN94@cclex_next:
$LN95@cclex_next:
$LN96@cclex_next:
$LN97@cclex_next:
$LN98@cclex_next:
$LN99@cclex_next:
$LN100@cclex_next:
$LN101@cclex_next:
; Line 387
	mov	rax, QWORD PTR l$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_identifier
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 388
	jmp	$LN2@cclex_next
$LN102@cclex_next:
; Line 390
	mov	rax, QWORD PTR l$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_readstr
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 391
	jmp	$LN2@cclex_next
$LN103@cclex_next:
; Line 393
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 10
; Line 394
	jmp	$LN2@cclex_next
$LN104@cclex_next:
; Line 396
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 9
; Line 397
	jmp	$LN2@cclex_next
$LN105@cclex_next:
; Line 402
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 3
; Line 403
	jmp	$LN2@cclex_next
$LN106@cclex_next:
; Line 405
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 4
; Line 406
	jmp	$LN2@cclex_next
$LN107@cclex_next:
; Line 408
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 7
; Line 409
	jmp	$LN2@cclex_next
$LN108@cclex_next:
; Line 411
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 8
; Line 412
	jmp	$LN2@cclex_next
$LN109@cclex_next:
; Line 414
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 5
; Line 415
	jmp	$LN2@cclex_next
$LN110@cclex_next:
; Line 417
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 6
; Line 418
	jmp	$LN2@cclex_next
$LN111@cclex_next:
; Line 421
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 86			; 00000056H
; Line 422
	jmp	$LN2@cclex_next
$LN112@cclex_next:
; Line 426
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN113@cclex_next
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN113@cclex_next
; Line 427
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 3
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 12
; Line 428
	jmp	SHORT $LN114@cclex_next
$LN113@cclex_next:
; Line 429
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 90			; 0000005aH
$LN114@cclex_next:
; Line 431
	jmp	$LN2@cclex_next
$LN115@cclex_next:
; Line 436
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN116@cclex_next
; Line 437
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 120			; 00000078H
; Line 438
	jmp	SHORT $LN117@cclex_next
$LN116@cclex_next:
; Line 439
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 104			; 00000068H
$LN117@cclex_next:
; Line 441
	jmp	$LN2@cclex_next
$LN118@cclex_next:
; Line 447
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 124				; 0000007cH
	jne	SHORT $LN119@cclex_next
; Line 448
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 107			; 0000006bH
; Line 449
	jmp	SHORT $LN120@cclex_next
$LN119@cclex_next:
; Line 450
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN121@cclex_next
; Line 451
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 121			; 00000079H
; Line 452
	jmp	SHORT $LN122@cclex_next
$LN121@cclex_next:
; Line 453
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 105			; 00000069H
$LN122@cclex_next:
$LN120@cclex_next:
; Line 455
	jmp	$LN2@cclex_next
$LN123@cclex_next:
; Line 461
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 38					; 00000026H
	jne	SHORT $LN124@cclex_next
; Line 462
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 106			; 0000006aH
; Line 463
	jmp	SHORT $LN125@cclex_next
$LN124@cclex_next:
; Line 464
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN126@cclex_next
; Line 465
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 119			; 00000077H
; Line 466
	jmp	SHORT $LN127@cclex_next
$LN126@cclex_next:
; Line 467
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 103			; 00000067H
$LN127@cclex_next:
$LN125@cclex_next:
; Line 469
	jmp	$LN2@cclex_next
$LN128@cclex_next:
; Line 474
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN129@cclex_next
; Line 475
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 111			; 0000006fH
; Line 476
	jmp	SHORT $LN130@cclex_next
$LN129@cclex_next:
; Line 477
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 93			; 0000005dH
$LN130@cclex_next:
; Line 479
	jmp	$LN2@cclex_next
$LN131@cclex_next:
; Line 484
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN132@cclex_next
; Line 485
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 110			; 0000006eH
; Line 486
	jmp	SHORT $LN133@cclex_next
$LN132@cclex_next:
; Line 487
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 92			; 0000005cH
$LN133@cclex_next:
; Line 489
	jmp	$LN2@cclex_next
$LN134@cclex_next:
; Line 502
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN135@cclex_next
; Line 503
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 113			; 00000071H
; Line 504
	jmp	SHORT $LN136@cclex_next
$LN135@cclex_next:
; Line 505
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 95			; 0000005fH
$LN136@cclex_next:
; Line 507
	jmp	$LN2@cclex_next
$LN137@cclex_next:
; Line 520
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 62					; 0000003eH
	jne	SHORT $LN138@cclex_next
; Line 521
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 91			; 0000005bH
; Line 522
	jmp	SHORT $LN139@cclex_next
$LN138@cclex_next:
; Line 523
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN140@cclex_next
; Line 524
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 114			; 00000072H
; Line 525
	jmp	SHORT $LN141@cclex_next
$LN140@cclex_next:
; Line 526
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 96			; 00000060H
$LN141@cclex_next:
$LN139@cclex_next:
; Line 528
	jmp	$LN2@cclex_next
$LN142@cclex_next:
; Line 533
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN143@cclex_next
; Line 534
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 101			; 00000065H
; Line 535
	jmp	SHORT $LN144@cclex_next
$LN143@cclex_next:
; Line 536
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 109			; 0000006dH
$LN144@cclex_next:
; Line 538
	jmp	$LN2@cclex_next
$LN145@cclex_next:
; Line 543
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN146@cclex_next
; Line 544
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 102			; 00000066H
; Line 545
	jmp	SHORT $LN147@cclex_next
$LN146@cclex_next:
; Line 546
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 89			; 00000059H
$LN147@cclex_next:
; Line 548
	jmp	$LN2@cclex_next
$LN148@cclex_next:
; Line 553
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN149@cclex_next
; Line 554
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 117			; 00000075H
; Line 555
	jmp	SHORT $LN150@cclex_next
$LN149@cclex_next:
; Line 556
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 99			; 00000063H
$LN150@cclex_next:
; Line 558
	jmp	$LN2@cclex_next
$LN151@cclex_next:
; Line 563
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN152@cclex_next
; Line 564
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 118			; 00000076H
; Line 565
	jmp	SHORT $LN153@cclex_next
$LN152@cclex_next:
; Line 566
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 100			; 00000064H
$LN153@cclex_next:
; Line 568
	jmp	$LN2@cclex_next
$LN154@cclex_next:
; Line 573
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN155@cclex_next
; Line 574
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 112			; 00000070H
; Line 575
	jmp	SHORT $LN156@cclex_next
$LN155@cclex_next:
; Line 576
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 94			; 0000005eH
$LN156@cclex_next:
; Line 578
	jmp	$LN2@cclex_next
$LN157@cclex_next:
; Line 581
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 61					; 0000003dH
	jne	SHORT $LN158@cclex_next
; Line 582
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], -1
; Line 583
	jmp	SHORT $LN159@cclex_next
$LN158@cclex_next:
; Line 584
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], -1
$LN159@cclex_next:
; Line 586
	jmp	$LN2@cclex_next
$LN160@cclex_next:
; Line 589
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 0
; Line 590
	jmp	$LN2@cclex_next
$LN161@cclex_next:
$LN162@cclex_next:
$LN163@cclex_next:
$LN164@cclex_next:
$LN165@cclex_next:
; Line 595
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 11
; Line 596
	jmp	$LN2@cclex_next
$LN166@cclex_next:
; Line 598
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN167@cclex_next
; Line 599
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 1
; Line 600
	jmp	SHORT $LN168@cclex_next
$LN167@cclex_next:
; Line 601
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 1
$LN168@cclex_next:
; Line 603
	jmp	SHORT $LN2@cclex_next
$LN169@cclex_next:
; Line 605
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 1
; Line 606
	jmp	SHORT $LN2@cclex_next
$LN170@cclex_next:
; Line 608
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+56], 2
$LN2@cclex_next:
; Line 612
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 613
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	and	eax, -3					; fffffffdH
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
$LN185@cclex_next:
$LN184@cclex_next:
$LN183@cclex_next:
$LN11@cclex_next:
; Line 615
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx]
	cmp	QWORD PTR [rax+16], rcx
	jae	$LN12@cclex_next
; Line 616
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv635[rsp], eax
	mov	eax, DWORD PTR tv635[rsp]
	sub	eax, 8
	mov	DWORD PTR tv635[rsp], eax
	cmp	DWORD PTR tv635[rsp], 51		; 00000033H
	ja	$LN181@cclex_next
	movsxd	rax, DWORD PTR tv635[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN186@cclex_next[rcx+rax]
	mov	eax, DWORD PTR $LN187@cclex_next[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN171@cclex_next:
$LN172@cclex_next:
$LN173@cclex_next:
$LN174@cclex_next:
$LN175@cclex_next:
; Line 618
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 619
	jmp	SHORT $LN11@cclex_next
$LN176@cclex_next:
; Line 621
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 10
	jne	SHORT $LN177@cclex_next
; Line 622
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	add	rax, 2
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 623
	jmp	SHORT $LN178@cclex_next
$LN177@cclex_next:
; Line 624
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN178@cclex_next:
; Line 626
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	and	eax, 1
	inc	eax
	and	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 627
	jmp	$LN183@cclex_next
$LN179@cclex_next:
; Line 629
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 630
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	and	eax, 1
	inc	eax
	and	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 631
	jmp	$LN184@cclex_next
$LN180@cclex_next:
; Line 633
	mov	rax, QWORD PTR l$[rsp]
	mov	rax, QWORD PTR [rax+16]
	inc	rax
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 634
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+112]
	shr	eax, 1
	and	eax, 1
	inc	eax
	and	eax, 1
	shl	eax, 1
	mov	rcx, QWORD PTR l$[rsp]
	mov	ecx, DWORD PTR [rcx+112]
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+112], eax
; Line 635
	jmp	$LN185@cclex_next
$LN181@cclex_next:
; Line 638
	jmp	SHORT $LN1@cclex_next
; Line 640
	jmp	$LN11@cclex_next
$LN12@cclex_next:
$LN1@cclex_next:
; Line 641
	add	rsp, 88					; 00000058H
	ret	0
	npad	3
$LN192@cclex_next:
	DD	$LN160@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN165@cclex_next
	DD	$LN162@cclex_next
	DD	$LN169@cclex_next
	DD	$LN164@cclex_next
	DD	$LN163@cclex_next
	DD	$LN166@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN161@cclex_next
	DD	$LN145@cclex_next
	DD	$LN102@cclex_next
	DD	$LN16@cclex_next
	DD	$LN16@cclex_next
	DD	$LN154@cclex_next
	DD	$LN123@cclex_next
	DD	$LN16@cclex_next
	DD	$LN105@cclex_next
	DD	$LN106@cclex_next
	DD	$LN131@cclex_next
	DD	$LN134@cclex_next
	DD	$LN104@cclex_next
	DD	$LN137@cclex_next
	DD	$LN112@cclex_next
	DD	$LN128@cclex_next
	DD	$LN17@cclex_next
	DD	$LN18@cclex_next
	DD	$LN19@cclex_next
	DD	$LN20@cclex_next
	DD	$LN21@cclex_next
	DD	$LN22@cclex_next
	DD	$LN23@cclex_next
	DD	$LN24@cclex_next
	DD	$LN25@cclex_next
	DD	$LN26@cclex_next
	DD	$LN103@cclex_next
	DD	$LN170@cclex_next
	DD	$LN151@cclex_next
	DD	$LN142@cclex_next
	DD	$LN148@cclex_next
	DD	$LN157@cclex_next
	DD	$LN16@cclex_next
	DD	$LN49@cclex_next
	DD	$LN50@cclex_next
	DD	$LN51@cclex_next
	DD	$LN52@cclex_next
	DD	$LN53@cclex_next
	DD	$LN54@cclex_next
	DD	$LN55@cclex_next
	DD	$LN56@cclex_next
	DD	$LN57@cclex_next
	DD	$LN58@cclex_next
	DD	$LN59@cclex_next
	DD	$LN60@cclex_next
	DD	$LN61@cclex_next
	DD	$LN62@cclex_next
	DD	$LN63@cclex_next
	DD	$LN64@cclex_next
	DD	$LN65@cclex_next
	DD	$LN66@cclex_next
	DD	$LN67@cclex_next
	DD	$LN68@cclex_next
	DD	$LN69@cclex_next
	DD	$LN70@cclex_next
	DD	$LN71@cclex_next
	DD	$LN72@cclex_next
	DD	$LN73@cclex_next
	DD	$LN74@cclex_next
	DD	$LN107@cclex_next
	DD	$LN16@cclex_next
	DD	$LN108@cclex_next
	DD	$LN115@cclex_next
	DD	$LN101@cclex_next
	DD	$LN16@cclex_next
	DD	$LN75@cclex_next
	DD	$LN76@cclex_next
	DD	$LN77@cclex_next
	DD	$LN78@cclex_next
	DD	$LN79@cclex_next
	DD	$LN80@cclex_next
	DD	$LN81@cclex_next
	DD	$LN82@cclex_next
	DD	$LN83@cclex_next
	DD	$LN84@cclex_next
	DD	$LN85@cclex_next
	DD	$LN86@cclex_next
	DD	$LN87@cclex_next
	DD	$LN88@cclex_next
	DD	$LN89@cclex_next
	DD	$LN90@cclex_next
	DD	$LN91@cclex_next
	DD	$LN92@cclex_next
	DD	$LN93@cclex_next
	DD	$LN94@cclex_next
	DD	$LN95@cclex_next
	DD	$LN96@cclex_next
	DD	$LN97@cclex_next
	DD	$LN98@cclex_next
	DD	$LN99@cclex_next
	DD	$LN100@cclex_next
	DD	$LN109@cclex_next
	DD	$LN118@cclex_next
	DD	$LN110@cclex_next
	DD	$LN111@cclex_next
$LN187@cclex_next:
	DD	$LN175@cclex_next
	DD	$LN172@cclex_next
	DD	$LN179@cclex_next
	DD	$LN174@cclex_next
	DD	$LN173@cclex_next
	DD	$LN176@cclex_next
	DD	$LN171@cclex_next
	DD	$LN180@cclex_next
	DD	$LN181@cclex_next
$LN186@cclex_next:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	4
	DB	5
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
cclex_next_token_internal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 0
s$ = 32
cclex_idenlen PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 193
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 194
	mov	DWORD PTR l$[rsp], 0
	jmp	SHORT $LN4@cclex_iden
$LN2@cclex_iden:
; Line 196
	mov	eax, DWORD PTR l$[rsp]
	inc	eax
	mov	DWORD PTR l$[rsp], eax
$LN4@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN6@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 122				; 0000007aH
	jle	SHORT $LN5@cclex_iden
$LN6@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN7@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 90					; 0000005aH
	jle	SHORT $LN5@cclex_iden
$LN7@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN8@cclex_iden
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jle	SHORT $LN5@cclex_iden
$LN8@cclex_iden:
	movsxd	rax, DWORD PTR l$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 95					; 0000005fH
	jne	SHORT $LN3@cclex_iden
$LN5@cclex_iden:
	jmp	$LN2@cclex_iden
$LN3@cclex_iden:
; Line 197
	mov	eax, DWORD PTR l$[rsp]
; Line 198
	add	rsp, 24
	ret	0
cclex_idenlen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lexer$ = 48
cclex_hash_init PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 69
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 75
	mov	r9d, 21
	lea	r8, OFFSET FLAT:$SG46142
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 76
	mov	r9d, 22
	lea	r8, OFFSET FLAT:$SG46143
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 77
	mov	r9d, 23
	lea	r8, OFFSET FLAT:$SG46144
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 78
	mov	r9d, 24
	lea	r8, OFFSET FLAT:$SG46145
	mov	edx, 9
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 79
	mov	r9d, 25
	lea	r8, OFFSET FLAT:$SG46146
	mov	edx, 10
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 80
	mov	r9d, 26
	lea	r8, OFFSET FLAT:$SG46147
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 81
	mov	r9d, 27
	lea	r8, OFFSET FLAT:$SG46148
	mov	edx, 9
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 82
	mov	r9d, 28
	lea	r8, OFFSET FLAT:$SG46149
	mov	edx, 10
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 83
	mov	r9d, 29
	lea	r8, OFFSET FLAT:$SG46150
	mov	edx, 11
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 89
	mov	r9d, 31
	lea	r8, OFFSET FLAT:$SG46151
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 90
	mov	r9d, 32					; 00000020H
	lea	r8, OFFSET FLAT:$SG46152
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 96
	mov	r9d, 35					; 00000023H
	lea	r8, OFFSET FLAT:$SG46153
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 97
	mov	r9d, 36					; 00000024H
	lea	r8, OFFSET FLAT:$SG46154
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 98
	mov	r9d, 37					; 00000025H
	lea	r8, OFFSET FLAT:$SG46155
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 104
	mov	r9d, 40					; 00000028H
	lea	r8, OFFSET FLAT:$SG46156
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 105
	mov	r9d, 41					; 00000029H
	lea	r8, OFFSET FLAT:$SG46157
	mov	edx, 9
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 111
	mov	r9d, 44					; 0000002cH
	lea	r8, OFFSET FLAT:$SG46158
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 112
	mov	r9d, 45					; 0000002dH
	lea	r8, OFFSET FLAT:$SG46159
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 113
	mov	r9d, 46					; 0000002eH
	lea	r8, OFFSET FLAT:$SG46160
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 114
	mov	r9d, 47					; 0000002fH
	lea	r8, OFFSET FLAT:$SG46161
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 115
	mov	r9d, 48					; 00000030H
	lea	r8, OFFSET FLAT:$SG46162
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 116
	mov	r9d, 49					; 00000031H
	lea	r8, OFFSET FLAT:$SG46163
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 117
	mov	r9d, 50					; 00000032H
	lea	r8, OFFSET FLAT:$SG46164
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 118
	mov	r9d, 51					; 00000033H
	lea	r8, OFFSET FLAT:$SG46165
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 119
	mov	r9d, 52					; 00000034H
	lea	r8, OFFSET FLAT:$SG46166
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 120
	mov	r9d, 53					; 00000035H
	lea	r8, OFFSET FLAT:$SG46167
	mov	edx, 3
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 121
	mov	r9d, 54					; 00000036H
	lea	r8, OFFSET FLAT:$SG46168
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 122
	mov	r9d, 55					; 00000037H
	lea	r8, OFFSET FLAT:$SG46169
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 123
	mov	r9d, 56					; 00000038H
	lea	r8, OFFSET FLAT:$SG46170
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 124
	mov	r9d, 57					; 00000039H
	lea	r8, OFFSET FLAT:$SG46171
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 125
	mov	r9d, 58					; 0000003aH
	lea	r8, OFFSET FLAT:$SG46172
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 126
	mov	r9d, 59					; 0000003bH
	lea	r8, OFFSET FLAT:$SG46173
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 127
	mov	r9d, 60					; 0000003cH
	lea	r8, OFFSET FLAT:$SG46174
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 128
	mov	r9d, 61					; 0000003dH
	lea	r8, OFFSET FLAT:$SG46175
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 132
	mov	r9d, 63					; 0000003fH
	lea	r8, OFFSET FLAT:$SG46176
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 137
	mov	r9d, 65					; 00000041H
	lea	r8, OFFSET FLAT:$SG46177
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 138
	mov	r9d, 66					; 00000042H
	lea	r8, OFFSET FLAT:$SG46178
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 139
	mov	r9d, 67					; 00000043H
	lea	r8, OFFSET FLAT:$SG46179
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 140
	mov	r9d, 68					; 00000044H
	lea	r8, OFFSET FLAT:$SG46180
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 141
	mov	r9d, 69					; 00000045H
	lea	r8, OFFSET FLAT:$SG46181
	mov	edx, 13
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 142
	mov	r9d, 70					; 00000046H
	lea	r8, OFFSET FLAT:$SG46182
	mov	edx, 10
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 147
	mov	r9d, 72					; 00000048H
	lea	r8, OFFSET FLAT:$SG46183
	mov	edx, 2
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 148
	mov	r9d, 73					; 00000049H
	lea	r8, OFFSET FLAT:$SG46184
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 149
	mov	r9d, 74					; 0000004aH
	lea	r8, OFFSET FLAT:$SG46185
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 150
	mov	r9d, 75					; 0000004bH
	lea	r8, OFFSET FLAT:$SG46186
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 151
	mov	r9d, 76					; 0000004cH
	lea	r8, OFFSET FLAT:$SG46187
	mov	edx, 7
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 152
	mov	r9d, 77					; 0000004dH
	lea	r8, OFFSET FLAT:$SG46188
	mov	edx, 3
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 153
	mov	r9d, 78					; 0000004eH
	lea	r8, OFFSET FLAT:$SG46189
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 154
	mov	r9d, 79					; 0000004fH
	lea	r8, OFFSET FLAT:$SG46190
	mov	edx, 2
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 155
	mov	r9d, 80					; 00000050H
	lea	r8, OFFSET FLAT:$SG46191
	mov	edx, 4
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 156
	mov	r9d, 81					; 00000051H
	lea	r8, OFFSET FLAT:$SG46192
	mov	edx, 6
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 157
	mov	r9d, 82					; 00000052H
	lea	r8, OFFSET FLAT:$SG46193
	mov	edx, 5
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 158
	mov	r9d, 83					; 00000053H
	lea	r8, OFFSET FLAT:$SG46194
	mov	edx, 8
	mov	rcx, QWORD PTR lexer$[rsp]
	call	cclex_hashonly
; Line 159
	add	rsp, 40					; 00000028H
	ret	0
cclex_hash_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fnd$ = 48
okey$ = 56
l$ = 80
len$ = 88
key$ = 96
bit$ = 104
cclex_hashonly PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 59
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 61
	lea	rax, QWORD PTR fnd$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR bit$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR key$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_hash
	mov	QWORD PTR okey$[rsp], rax
; Line 62
	mov	rax, QWORD PTR key$[rsp]
	cmp	QWORD PTR okey$[rsp], rax
	je	SHORT $LN2@cclex_hash
	int	3
$LN2@cclex_hash:
; Line 63
	cmp	DWORD PTR fnd$[rsp], 0
	je	SHORT $LN3@cclex_hash
	lea	rax, OFFSET FLAT:$SG46082
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46083
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46084
	mov	r8d, 63					; 0000003fH
	lea	rdx, OFFSET FLAT:$SG46085
	xor	ecx, ecx
	call	cctrace_
$LN3@cclex_hash:
; Line 64
	add	rsp, 72					; 00000048H
	ret	0
cclex_hashonly ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
slot$ = 32
eql$ = 40
tv80 = 44
tv93 = 48
k$1 = 56
hash$ = 64
tv92 = 68
tv91 = 72
m$2 = 80
tv137 = 88
tv154 = 96
l$ = 128
len$ = 136
key$ = 144
cpy$ = 152
bit$ = 160
fnd$ = 168
cclex_hash PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 16
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 17
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN7@cclex_hash
	int	3
$LN7@cclex_hash:
; Line 18
	cmp	QWORD PTR bit$[rsp], 0
	jne	SHORT $LN8@cclex_hash
	int	3
$LN8@cclex_hash:
; Line 20
	mov	rdx, QWORD PTR key$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	call	cclex_hashfunc
	mov	DWORD PTR hash$[rsp], eax
; Line 21
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+32]
	dec	eax
	mov	ecx, DWORD PTR hash$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	eax, eax
	imul	rax, rax, 24
	mov	rcx, QWORD PTR l$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	QWORD PTR slot$[rsp], rax
; Line 23
	mov	DWORD PTR eql$[rsp], 0
$LN4@cclex_hash:
; Line 26
	mov	rax, QWORD PTR slot$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN19@cclex_hash
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN20@cclex_hash
$LN19@cclex_hash:
	mov	DWORD PTR tv80[rsp], 0
$LN20@cclex_hash:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR eql$[rsp], eax
	cmp	DWORD PTR eql$[rsp], 0
	je	$LN9@cclex_hash
; Line 28
	mov	rax, QWORD PTR slot$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR m$2[rsp], rax
; Line 29
	mov	rax, QWORD PTR key$[rsp]
	mov	QWORD PTR k$1[rsp], rax
$LN5@cclex_hash:
; Line 30
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR k$1[rsp], rax
	jae	SHORT $LN6@cclex_hash
	mov	rax, QWORD PTR k$1[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv91[rsp], eax
	mov	rax, QWORD PTR m$2[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv92[rsp], eax
	mov	rax, QWORD PTR m$2[rsp]
	inc	rax
	mov	QWORD PTR m$2[rsp], rax
	mov	rax, QWORD PTR k$1[rsp]
	inc	rax
	mov	QWORD PTR k$1[rsp], rax
	mov	eax, DWORD PTR tv92[rsp]
	cmp	DWORD PTR tv91[rsp], eax
	jne	SHORT $LN21@cclex_hash
	mov	DWORD PTR tv93[rsp], 1
	jmp	SHORT $LN22@cclex_hash
$LN21@cclex_hash:
	mov	DWORD PTR tv93[rsp], 0
$LN22@cclex_hash:
	mov	eax, DWORD PTR tv93[rsp]
	mov	DWORD PTR eql$[rsp], eax
	cmp	DWORD PTR eql$[rsp], 0
	je	SHORT $LN6@cclex_hash
	jmp	SHORT $LN5@cclex_hash
$LN6@cclex_hash:
$LN9@cclex_hash:
; Line 32
	cmp	DWORD PTR eql$[rsp], 0
	jne	SHORT $LN10@cclex_hash
	mov	rax, QWORD PTR slot$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@cclex_hash
	mov	rax, QWORD PTR slot$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR slot$[rsp], rax
	cmp	QWORD PTR slot$[rsp], 0
	jne	$LN4@cclex_hash
$LN10@cclex_hash:
; Line 34
	cmp	QWORD PTR fnd$[rsp], 0
	je	SHORT $LN11@cclex_hash
	mov	rax, QWORD PTR fnd$[rsp]
	mov	ecx, DWORD PTR eql$[rsp]
	mov	DWORD PTR [rax], ecx
$LN11@cclex_hash:
; Line 36
	cmp	DWORD PTR eql$[rsp], 0
	jne	$LN12@cclex_hash
; Line 38
	mov	rax, QWORD PTR slot$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN14@cclex_hash
	mov	ecx, 24
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR tv137[rsp], rax
	mov	rax, QWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR tv137[rsp]
	mov	QWORD PTR [rax], rcx
	mov	rax, QWORD PTR tv137[rsp]
	mov	QWORD PTR slot$[rsp], rax
$LN14@cclex_hash:
; Line 40
	mov	rax, QWORD PTR slot$[rsp]
	mov	QWORD PTR [rax], 0
; Line 41
	mov	rax, QWORD PTR slot$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 42
	mov	rax, QWORD PTR slot$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 43
	mov	rax, QWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR bit$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax+20], ecx
; Line 46
	cmp	DWORD PTR cpy$[rsp], 0
	je	SHORT $LN15@cclex_hash
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	ecx, DWORD PTR len$[rsp]
	inc	ecx
	mov	rdx, QWORD PTR slot$[rsp]
	add	rdx, 8
	mov	QWORD PTR tv154[rsp], rdx
	mov	r9, QWORD PTR key$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rax, QWORD PTR tv154[rsp]
	mov	rcx, rax
	call	ccdlb_stradd
	jmp	SHORT $LN16@cclex_hash
$LN15@cclex_hash:
; Line 47
	mov	rax, QWORD PTR slot$[rsp]
	mov	rcx, QWORD PTR key$[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN16@cclex_hash:
; Line 49
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	rcx, QWORD PTR l$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 50
	jmp	SHORT $LN13@cclex_hash
$LN12@cclex_hash:
; Line 52
	cmp	QWORD PTR bit$[rsp], 0
	je	SHORT $LN17@cclex_hash
	mov	rax, QWORD PTR bit$[rsp]
	mov	rcx, QWORD PTR slot$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	mov	DWORD PTR [rax], ecx
$LN17@cclex_hash:
$LN13@cclex_hash:
; Line 54
	mov	rax, QWORD PTR slot$[rsp]
	mov	rax, QWORD PTR [rax+8]
; Line 55
	add	rsp, 120				; 00000078H
	ret	0
cclex_hash ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
h$ = 0
len$ = 32
str$ = 40
cclex_hashfunc PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 9
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	DWORD PTR h$[rsp], 5381			; 00001505H
$LN2@cclex_hash:
; Line 10
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN3@cclex_hash
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR str$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR h$[rsp]
	shl	ecx, 5
	add	eax, DWORD PTR h$[rsp]
	add	eax, ecx
	mov	DWORD PTR h$[rsp], eax
	jmp	SHORT $LN2@cclex_hash
$LN3@cclex_hash:
; Line 11
	mov	eax, DWORD PTR h$[rsp]
; Line 12
	add	rsp, 24
	ret	0
cclex_hashfunc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
type$ = 64
list$ = 72
cctree_decl PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 977
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 9
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 978
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+88], rcx
; Line 979
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+112], rcx
; Line 980
	mov	rax, QWORD PTR tree$[rsp]
; Line 981
	add	rsp, 56					; 00000038H
	ret	0
cctree_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
type$ = 64
name$ = 72
size$ = 80
init$ = 88
cctree_decl_name PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 967
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	ecx, 8
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 968
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+88], rcx
; Line 969
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_idenname
	mov	rcx, QWORD PTR tree$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 970
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	mov	QWORD PTR [rax+96], rcx
; Line 971
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR init$[rsp]
	mov	QWORD PTR [rax+104], rcx
; Line 972
	mov	rax, QWORD PTR tree$[rsp]
; Line 973
	add	rsp, 56					; 00000038H
	ret	0
cctree_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
list$ = 64
name$ = 72
cctype_new_struct_spec PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 959
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	cmp	QWORD PTR list$[rsp], 0
	jne	SHORT $LN2@cctype_new
	int	3
$LN2@cctype_new:
; Line 960
	mov	rcx, QWORD PTR name$[rsp]
	call	cctree_idenname
	mov	rdx, rax
	mov	ecx, 19
	call	cctype_new
	mov	QWORD PTR type$[rsp], rax
; Line 961
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 962
	mov	rax, QWORD PTR type$[rsp]
; Line 963
	add	rsp, 56					; 00000038H
	ret	0
cctype_new_struct_spec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
kind$ = 56
cceat	PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 895
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	edx, DWORD PTR kind$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@cceat
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	jmp	SHORT $LN1@cceat
$LN2@cceat:
; Line 896
	xor	eax, eax
$LN1@cceat:
; Line 897
	add	rsp, 40					; 00000028H
	ret	0
cceat	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_func_specifier PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 874
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 875
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 877
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 39			; 00000027H
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 42			; 0000002aH
	jge	SHORT $LN2@kttc__peek
; Line 880
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 882
	xor	eax, eax
$LN1@kttc__peek:
; Line 883
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_func_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_storage_class PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 861
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 862
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 864
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 62			; 0000003eH
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 71			; 00000047H
	jge	SHORT $LN2@kttc__peek
; Line 867
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 869
	xor	eax, eax
$LN1@kttc__peek:
; Line 870
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_storage_class ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
ccsee_typespec PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 848
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 849
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 851
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 43			; 0000002bH
	jle	SHORT $LN2@ccsee_type
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 64			; 00000040H
	jge	SHORT $LN2@ccsee_type
; Line 854
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@ccsee_type
$LN2@ccsee_type:
; Line 856
	xor	eax, eax
$LN1@ccsee_type:
; Line 857
	add	rsp, 56					; 00000038H
	ret	0
ccsee_typespec ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_type_qualifier PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 835
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 836
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 838
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 34			; 00000022H
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 38			; 00000026H
	jge	SHORT $LN2@kttc__peek
; Line 841
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 843
	xor	eax, eax
$LN1@kttc__peek:
; Line 844
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_type_qualifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
parser$ = 64
kttc__peek_alignment_specifier PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 822
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 823
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	QWORD PTR token$[rsp], rax
; Line 825
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 30
	jle	SHORT $LN2@kttc__peek
	mov	rax, QWORD PTR token$[rsp]
	cmp	DWORD PTR [rax], 33			; 00000021H
	jge	SHORT $LN2@kttc__peek
; Line 828
	mov	rax, QWORD PTR token$[rsp]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 830
	xor	eax, eax
$LN1@kttc__peek:
; Line 831
	add	rsp, 56					; 00000038H
	ret	0
kttc__peek_alignment_specifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
ccsee_end PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 775
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	edx, edx
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
; Line 776
	add	rsp, 40					; 00000028H
	ret	0
ccsee_end ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 8
offset$ = 16
kttc__peek_ahead PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 755
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	movsxd	rax, DWORD PTR offset$[rsp]
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR parser$[rsp]
	add	rax, QWORD PTR [rcx+136]
	mov	rcx, QWORD PTR parser$[rsp]
	cmp	rax, QWORD PTR [rcx+128]
	jae	SHORT $LN2@kttc__peek
; Line 756
	movsxd	rax, DWORD PTR offset$[rsp]
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR parser$[rsp]
	add	rax, QWORD PTR [rcx+136]
	jmp	SHORT $LN1@kttc__peek
$LN2@kttc__peek:
; Line 760
	lea	rax, OFFSET FLAT:?end_tok@?1??kttc__peek_ahead@@9@4Ucctoken_t@@A
$LN1@kttc__peek:
; Line 761
	ret	0
kttc__peek_ahead ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 32
file$ = 40
data$ = 48
reader$ = 80
name$ = 88
ccread_include PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 732
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 734
	mov	rcx, QWORD PTR name$[rsp]
	call	ccopenfile
	mov	QWORD PTR file$[rsp], rax
; Line 735
	mov	DWORD PTR size$[rsp], 0
	lea	r8, QWORD PTR size$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	ccpullfile
	mov	QWORD PTR data$[rsp], rax
; Line 736
	mov	rcx, QWORD PTR file$[rsp]
	call	ccclosefile
; Line 738
	mov	eax, DWORD PTR size$[rsp]
	mov	r8, QWORD PTR data$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccreader_move
; Line 742
	add	rsp, 72					; 00000048H
	ret	0
ccread_include ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 32
parser$ = 64
len$ = 72
min$ = 80
ccreader_move PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 721
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 722
	mov	rax, QWORD PTR parser$[rsp]
	mov	r8, QWORD PTR min$[rsp]
	mov	rdx, QWORD PTR len$[rsp]
	mov	rcx, rax
	call	cclex_move
; Line 723
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_all_tokens
; Line 725
	mov	rax, QWORD PTR parser$[rsp]
	mov	QWORD PTR [rax+144], 0
; Line 726
	mov	rax, QWORD PTR parser$[rsp]
	mov	rcx, QWORD PTR parser$[rsp]
	mov	rcx, QWORD PTR [rcx+120]
	mov	QWORD PTR [rax+136], rcx
; Line 727
	mov	rax, QWORD PTR parser$[rsp]
	cmp	QWORD PTR [rax+120], 0
	je	SHORT $LN3@ccreader_m
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR parser$[rsp]
	mov	rcx, QWORD PTR [rcx+120]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN4@ccreader_m
$LN3@ccreader_m:
	mov	DWORD PTR tv79[rsp], 0
$LN4@ccreader_m:
	mov	eax, DWORD PTR tv79[rsp]
	xor	edx, edx
	mov	ecx, 64					; 00000040H
	div	rcx
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR parser$[rsp]
	add	rax, QWORD PTR [rcx+120]
	mov	rcx, QWORD PTR parser$[rsp]
	mov	QWORD PTR [rcx+128], rax
; Line 728
	add	rsp, 56					; 00000038H
	ret	0
ccreader_move ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$1 = 32
parser$ = 64
ccread_all_tokens PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 746
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@ccread_all:
	mov	rax, QWORD PTR parser$[rsp]
	mov	rcx, rax
	call	cclex_next_token
	test	eax, eax
	je	SHORT $LN3@ccread_all
; Line 748
	mov	rax, QWORD PTR parser$[rsp]
	add	rax, 120				; 00000078H
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 64					; 00000040H
	mov	rcx, rax
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR parser$[rsp]
	add	rax, QWORD PTR [rcx+120]
	mov	QWORD PTR token$1[rsp], rax
; Line 749
	mov	rax, QWORD PTR parser$[rsp]
	mov	rdx, QWORD PTR token$1[rsp]
	mov	rcx, rax
	call	cclex_token
; Line 750
	jmp	SHORT $LN2@ccread_all
$LN3@ccread_all:
; Line 751
	add	rsp, 56					; 00000038H
	ret	0
ccread_all_tokens ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
parser$ = 64
ccread_uninit PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 711
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR parser$[rsp]
	mov	rcx, rax
	call	cclex_uninit
; Line 712
	mov	rax, QWORD PTR parser$[rsp]
	cmp	QWORD PTR [rax+120], 0
	je	SHORT $LN3@ccread_uni
	mov	rax, QWORD PTR parser$[rsp]
	mov	rax, QWORD PTR [rax+120]
	sub	rax, 16
	mov	QWORD PTR tv70[rsp], rax
	jmp	SHORT $LN4@ccread_uni
$LN3@ccread_uni:
	mov	QWORD PTR tv70[rsp], 0
$LN4@ccread_uni:
	mov	rcx, QWORD PTR tv70[rsp]
	call	QWORD PTR __imp_free
; Line 713
	add	rsp, 56					; 00000038H
	ret	0
ccread_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
ccread_init PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 702
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 152				; 00000098H
	xor	edx, edx
	mov	rcx, QWORD PTR parser$[rsp]
	call	memset
; Line 703
	mov	rax, QWORD PTR parser$[rsp]
	mov	rcx, rax
	call	cclex_init
; Line 704
	mov	rax, QWORD PTR parser$[rsp]
	mov	QWORD PTR [rax+144], 0
; Line 705
	mov	rax, QWORD PTR parser$[rsp]
	mov	QWORD PTR [rax+136], 0
; Line 706
	mov	rax, QWORD PTR parser$[rsp]
	mov	QWORD PTR [rax+128], 0
; Line 707
	add	rsp, 40					; 00000028H
	ret	0
ccread_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_void@@YAXXZ
text$di	SEGMENT
??__Ectype_void@@YAXXZ PROC				; `dynamic initializer for 'ctype_void'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 697
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45771
	mov	ecx, 1
	call	cctype_new
	mov	QWORD PTR ctype_void, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_void@@YAXXZ ENDP				; `dynamic initializer for 'ctype_void''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_uint8@@YAXXZ
text$di	SEGMENT
??__Ectype_uint8@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint8'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 696
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45766
	mov	ecx, 16
	call	cctype_new
	mov	QWORD PTR ctype_uint8, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint8@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint8''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_uint16@@YAXXZ
text$di	SEGMENT
??__Ectype_uint16@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint16'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 695
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45761
	mov	ecx, 15
	call	cctype_new
	mov	QWORD PTR ctype_uint16, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint16@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint16''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_uint32@@YAXXZ
text$di	SEGMENT
??__Ectype_uint32@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint32'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 694
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45756
	mov	ecx, 14
	call	cctype_new
	mov	QWORD PTR ctype_uint32, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint32''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_uint64@@YAXXZ
text$di	SEGMENT
??__Ectype_uint64@@YAXXZ PROC				; `dynamic initializer for 'ctype_uint64'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 693
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45751
	mov	ecx, 13
	call	cctype_new
	mov	QWORD PTR ctype_uint64, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_uint64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_uint64''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_int8@@YAXXZ
text$di	SEGMENT
??__Ectype_int8@@YAXXZ PROC				; `dynamic initializer for 'ctype_int8'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 692
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45746
	mov	ecx, 12
	call	cctype_new
	mov	QWORD PTR ctype_int8, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int8@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int8''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_int16@@YAXXZ
text$di	SEGMENT
??__Ectype_int16@@YAXXZ PROC				; `dynamic initializer for 'ctype_int16'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 691
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45741
	mov	ecx, 11
	call	cctype_new
	mov	QWORD PTR ctype_int16, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int16@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int16''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_int32@@YAXXZ
text$di	SEGMENT
??__Ectype_int32@@YAXXZ PROC				; `dynamic initializer for 'ctype_int32'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 690
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45736
	mov	ecx, 10
	call	cctype_new
	mov	QWORD PTR ctype_int32, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int32''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_int64@@YAXXZ
text$di	SEGMENT
??__Ectype_int64@@YAXXZ PROC				; `dynamic initializer for 'ctype_int64'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 689
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45731
	mov	ecx, 9
	call	cctype_new
	mov	QWORD PTR ctype_int64, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_int64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_int64''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_flo64@@YAXXZ
text$di	SEGMENT
??__Ectype_flo64@@YAXXZ PROC				; `dynamic initializer for 'ctype_flo64'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 688
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45726
	mov	ecx, 18
	call	cctype_new
	mov	QWORD PTR ctype_flo64, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_flo64@@YAXXZ ENDP				; `dynamic initializer for 'ctype_flo64''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__Ectype_flo32@@YAXXZ
text$di	SEGMENT
??__Ectype_flo32@@YAXXZ PROC				; `dynamic initializer for 'ctype_flo32'', COMDAT
; File W:\cpp\void\ktt-c\ccread.h
; Line 687
	sub	rsp, 40					; 00000028H
	lea	rdx, OFFSET FLAT:$SG45697
	mov	ecx, 17
	call	cctype_new
	mov	QWORD PTR ctype_flo32, rax
	add	rsp, 40					; 00000028H
	ret	0
??__Ectype_flo32@@YAXXZ ENDP				; `dynamic initializer for 'ctype_flo32''
text$di	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$1 = 32
token$ = 80
cctree_new_identifier PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 1029
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 1031
	cmp	QWORD PTR token$[rsp], 0
	je	SHORT $LN2@cctree_new
; Line 1033
	mov	ecx, 2
	call	cctree_new
	mov	QWORD PTR tree$1[rsp], rax
; Line 1034
	mov	rax, QWORD PTR tree$1[rsp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, QWORD PTR token$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1035
	mov	rax, QWORD PTR tree$1[rsp]
	jmp	SHORT $LN1@cctree_new
$LN2@cctree_new:
; Line 1037
	xor	eax, eax
$LN1@cctree_new:
; Line 1038
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctree_new_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$1 = 32
list$ = 64
init$ = 72
cctree_new_designation PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 1062
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1064
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN2@cctree_new
; Line 1066
	mov	ecx, 12
	call	cctree_new
	mov	QWORD PTR tree$1[rsp], rax
; Line 1067
	mov	rax, QWORD PTR tree$1[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+120], rcx
; Line 1068
	mov	rax, QWORD PTR tree$1[rsp]
	mov	rcx, QWORD PTR init$[rsp]
	mov	QWORD PTR [rax+128], rcx
; Line 1069
	mov	rax, QWORD PTR tree$1[rsp]
	jmp	SHORT $LN1@cctree_new
$LN2@cctree_new:
; Line 1071
	xor	eax, eax
$LN1@cctree_new:
; Line 1072
	add	rsp, 56					; 00000038H
	ret	0
cctree_new_designation ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 32
token$ = 80
expr$ = 88
cctree_new_designator PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 985
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	ecx, 11
	call	cctree_new
	mov	QWORD PTR tree$[rsp], rax
; Line 986
	mov	rax, QWORD PTR tree$[rsp]
	lea	rdi, QWORD PTR [rax+120]
	mov	rsi, QWORD PTR token$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 987
	mov	rax, QWORD PTR tree$[rsp]
	mov	rcx, QWORD PTR expr$[rsp]
	mov	QWORD PTR [rax+184], rcx
; Line 988
	mov	rax, QWORD PTR tree$[rsp]
; Line 989
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctree_new_designator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
token$ = 80
mhs$ = 88
cctree_new_uop PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 1020
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	ecx, 19
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 1021
	mov	rax, QWORD PTR result$[rsp]
	lea	rdi, QWORD PTR [rax+120]
	mov	rsi, QWORD PTR token$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1022
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR mhs$[rsp]
	mov	QWORD PTR [rax+184], rcx
; Line 1023
	mov	rax, QWORD PTR result$[rsp]
; Line 1024
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctree_new_uop ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
token$ = 80
lhs$ = 88
rhs$ = 96
cctree_binary PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 1011
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	ecx, 18
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 1012
	mov	rax, QWORD PTR result$[rsp]
	lea	rdi, QWORD PTR [rax+120]
	mov	rsi, QWORD PTR token$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1013
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR lhs$[rsp]
	mov	QWORD PTR [rax+184], rcx
; Line 1014
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 1015
	mov	rax, QWORD PTR result$[rsp]
; Line 1016
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctree_binary ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
token$ = 80
lhs$ = 88
mhs$ = 96
rhs$ = 104
cctree_new_top PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 1001
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	ecx, 18
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 1002
	mov	rax, QWORD PTR result$[rsp]
	lea	rdi, QWORD PTR [rax+120]
	mov	rsi, QWORD PTR token$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1003
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR lhs$[rsp]
	mov	QWORD PTR [rax+184], rcx
; Line 1004
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR mhs$[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 1005
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR rhs$[rsp]
	mov	QWORD PTR [rax+200], rcx
; Line 1006
	mov	rax, QWORD PTR result$[rsp]
; Line 1007
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctree_new_top ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
type$ = 80
token$ = 88
cctree_new_constant PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 993
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	ecx, 14
	call	cctree_new
	mov	QWORD PTR result$[rsp], rax
; Line 994
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	mov	QWORD PTR [rax+120], rcx
; Line 995
	mov	rax, QWORD PTR result$[rsp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, QWORD PTR token$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 996
	mov	rax, QWORD PTR result$[rsp]
; Line 997
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctree_new_constant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
kind$ = 64
cctree_new PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 912
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	ecx, 208				; 000000d0H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR result$[rsp], rax
; Line 913
	mov	r8d, 208				; 000000d0H
	xor	edx, edx
	mov	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 914
	mov	rax, QWORD PTR result$[rsp]
	mov	ecx, DWORD PTR kind$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 915
	mov	rax, QWORD PTR result$[rsp]
; Line 916
	add	rsp, 56					; 00000038H
	ret	0
cctree_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tree$ = 48
cctree_del PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 925
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR tree$[rsp]
	call	QWORD PTR __imp_free
; Line 926
	add	rsp, 40					; 00000028H
	ret	0
cctree_del ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
modifier_of$ = 64
list$ = 72
cctype_new_fun PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 951
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	lea	rdx, OFFSET FLAT:$SG45922
	mov	ecx, 4
	call	cctype_new
	mov	QWORD PTR type$[rsp], rax
; Line 952
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR modifier_of$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 953
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR list$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 954
	mov	rax, QWORD PTR type$[rsp]
; Line 955
	add	rsp, 56					; 00000038H
	ret	0
cctype_new_fun ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
modifier_of$ = 64
cctype_new_arr PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 944
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	lea	rdx, OFFSET FLAT:$SG45916
	mov	ecx, 3
	call	cctype_new
	mov	QWORD PTR type$[rsp], rax
; Line 945
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR modifier_of$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 946
	mov	rax, QWORD PTR type$[rsp]
; Line 947
	add	rsp, 56					; 00000038H
	ret	0
cctype_new_arr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
modifier_of$ = 64
cctype_new_ptr PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 937
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	lea	rdx, OFFSET FLAT:$SG45911
	mov	ecx, 2
	call	cctype_new
	mov	QWORD PTR type$[rsp], rax
; Line 938
	mov	rax, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR modifier_of$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 939
	mov	rax, QWORD PTR type$[rsp]
; Line 940
	add	rsp, 56					; 00000038H
	ret	0
cctype_new_ptr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
type$ = 80
cctype_clone PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 930
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	xor	edx, edx
	mov	rax, QWORD PTR type$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	cctype_new
	mov	QWORD PTR result$[rsp], rax
; Line 931
	mov	rdi, QWORD PTR result$[rsp]
	mov	rsi, QWORD PTR type$[rsp]
	mov	ecx, 56					; 00000038H
	rep movsb
; Line 932
	mov	rax, QWORD PTR result$[rsp]
; Line 933
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
cctype_clone ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
kind$ = 64
name$ = 72
cctype_new PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 902
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	ecx, 56					; 00000038H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR result$[rsp], rax
; Line 903
	mov	r8d, 56					; 00000038H
	xor	edx, edx
	mov	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 905
	mov	rax, QWORD PTR result$[rsp]
	mov	ecx, DWORD PTR kind$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 906
	mov	rax, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 907
	mov	rax, QWORD PTR result$[rsp]
; Line 908
	add	rsp, 56					; 00000038H
	ret	0
cctype_new ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
cctype_del PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 920
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR type$[rsp]
	call	QWORD PTR __imp_free
; Line 921
	add	rsp, 40					; 00000028H
	ret	0
cctype_del ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
tok$1 = 56
parser$ = 80
ccread_cast_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 165
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR result$[rsp], 0
; Line 166
	mov	edx, 3
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	SHORT $LN2@ccread_cas
; Line 168
	mov	QWORD PTR result$[rsp], 0
; Line 170
	mov	edx, 4
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_cas
; Line 171
	lea	rax, OFFSET FLAT:$SG46568
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46569
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46570
	mov	r8d, 171				; 000000abH
	lea	rdx, OFFSET FLAT:$SG46571
	mov	ecx, 4
	call	cctrace_
	int	3
$LN4@ccread_cas:
; Line 173
	jmp	SHORT $LN3@ccread_cas
$LN2@ccread_cas:
; Line 174
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_unary_expr
	mov	QWORD PTR result$[rsp], rax
$LN3@ccread_cas:
; Line 176
	mov	rax, QWORD PTR result$[rsp]
; Line 177
	add	rsp, 72					; 00000048H
	ret	0
ccread_cast_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
tv71 = 40
parser$ = 64
ccread_expression PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 406
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_assignment_expr
	mov	QWORD PTR result$[rsp], rax
; Line 407
	mov	edx, 9
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccsee
	test	eax, eax
	je	SHORT $LN2@ccread_exp
; Line 408
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_expression
	mov	QWORD PTR tv71[rsp], rax
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccgobble
	mov	rcx, QWORD PTR tv71[rsp]
	mov	r8, rcx
	mov	rdx, QWORD PTR result$[rsp]
	mov	rcx, rax
	call	cctree_binary
	mov	QWORD PTR result$[rsp], rax
$LN2@ccread_exp:
; Line 410
	mov	rax, QWORD PTR result$[rsp]
; Line 411
	add	rsp, 56					; 00000038H
	ret	0
ccread_expression ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lhs$ = 32
tok$1 = 40
rhs$2 = 48
parser$ = 80
ccread_assignment_expr PROC
; File W:\cpp\void\ktt-c\ccreadexpr.c
; Line 383
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_conditional_expr
	mov	QWORD PTR lhs$[rsp], rax
; Line 384
	mov	edx, 109				; 0000006dH
	mov	rcx, QWORD PTR parser$[rsp]
	call	cceat
	mov	QWORD PTR tok$1[rsp], rax
	cmp	QWORD PTR tok$1[rsp], 0
	je	SHORT $LN2@ccread_ass
; Line 385
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_assignment_expr
	mov	QWORD PTR rhs$2[rsp], rax
; Line 386
	mov	r8, QWORD PTR rhs$2[rsp]
	mov	rdx, QWORD PTR lhs$[rsp]
	mov	rcx, QWORD PTR tok$1[rsp]
	call	cctree_binary
	mov	QWORD PTR lhs$[rsp], rax
$LN2@ccread_ass:
; Line 388
	mov	rax, QWORD PTR lhs$[rsp]
; Line 389
	add	rsp, 72					; 00000048H
	ret	0
ccread_assignment_expr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
parser$ = 64
ccread_specifier_qualifier_list PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 370
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 371
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_type_specifier
	mov	QWORD PTR type$[rsp], rax
; Line 372
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_type_qualifier
; Line 373
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_alignment_specifier
; Line 375
	mov	rax, QWORD PTR type$[rsp]
; Line 376
	add	rsp, 56					; 00000038H
	ret	0
ccread_specifier_qualifier_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
parser$ = 64
ccread_declaration_specifiers PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 399
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 400
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_storage_class_specifier
; Line 402
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_specifier_qualifier_list
	mov	QWORD PTR type$[rsp], rax
; Line 404
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccread_function_specifier
; Line 406
	mov	rax, QWORD PTR type$[rsp]
; Line 407
	add	rsp, 56					; 00000038H
	ret	0
ccread_declaration_specifiers ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 8
ccread_attribute_seq PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 385
	mov	QWORD PTR [rsp+8], rcx
; Line 387
	xor	eax, eax
; Line 388
	ret	0
ccread_attribute_seq ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 48
list$ = 56
reader$ = 80
ccread_init_decl PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 202
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 203
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_declaration_specifiers
	mov	QWORD PTR type$[rsp], rax
	cmp	QWORD PTR type$[rsp], 0
	je	SHORT $LN2@ccread_ini
; Line 204
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_attribute_seq
; Line 205
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl_name_list
	mov	QWORD PTR list$[rsp], rax
	cmp	QWORD PTR list$[rsp], 0
	je	SHORT $LN3@ccread_ini
; Line 206
	mov	rdx, QWORD PTR list$[rsp]
	mov	rcx, QWORD PTR type$[rsp]
	call	cctree_decl
	jmp	SHORT $LN1@ccread_ini
	jmp	SHORT $LN4@ccread_ini
$LN3@ccread_ini:
; Line 207
	lea	rax, OFFSET FLAT:$SG46882
	mov	QWORD PTR [rsp+40], rax
	lea	rax, OFFSET FLAT:$SG46883
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:$SG46884
	mov	r8d, 207				; 000000cfH
	lea	rdx, OFFSET FLAT:$SG46885
	mov	ecx, 17
	call	cctrace_
	int	3
$LN4@ccread_ini:
$LN2@ccread_ini:
; Line 209
	xor	eax, eax
$LN1@ccread_ini:
; Line 210
	add	rsp, 72					; 00000048H
	ret	0
ccread_init_decl ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
next$ = 32
list$ = 40
reader$ = 80
type$ = 88
ccread_init_decl_name_list PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 180
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR list$[rsp], 0
$LN4@ccread_ini:
; Line 182
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_init_decl_name
	mov	QWORD PTR next$[rsp], rax
; Line 183
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN5@ccread_ini
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 208				; 000000d0H
	lea	rcx, QWORD PTR list$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	imul	rax, rax, 208				; 000000d0H
	mov	rcx, QWORD PTR list$[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, QWORD PTR next$[rsp]
	mov	ecx, 208				; 000000d0H
	rep movsb
$LN5@ccread_ini:
; Line 184
	mov	rcx, QWORD PTR next$[rsp]
	call	cctree_del
; Line 185
	cmp	QWORD PTR next$[rsp], 0
	je	SHORT $LN6@ccread_ini
	mov	edx, 9
	mov	rcx, QWORD PTR reader$[rsp]
	call	cceat
	test	rax, rax
	jne	SHORT $LN4@ccread_ini
$LN6@ccread_ini:
; Line 186
	mov	rax, QWORD PTR list$[rsp]
; Line 187
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
ccread_init_decl_name_list ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
reader$ = 48
type$ = 56
ccread_decl_name PROC
; File W:\cpp\void\ktt-c\ccreaddecl.c
; Line 146
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 147
	cmp	QWORD PTR type$[rsp], 0
	jne	SHORT $LN2@ccread_dec
	int	3
$LN2@ccread_dec:
; Line 149
	mov	rdx, QWORD PTR type$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_decl_name_modifier_maybe
	mov	rdx, rax
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccread_direct_decl_name
; Line 150
	add	rsp, 40					; 00000028H
	ret	0
ccread_decl_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
reader$ = 64
ccgobble PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 887
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR reader$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	mov	rcx, QWORD PTR [rcx+128]
	cmp	QWORD PTR [rax+136], rcx
	jae	SHORT $LN2@ccgobble
	mov	rax, QWORD PTR reader$[rsp]
	mov	rcx, QWORD PTR reader$[rsp]
	mov	rcx, QWORD PTR [rcx+136]
	mov	QWORD PTR [rax+144], rcx
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+144]
	mov	QWORD PTR tv73[rsp], rax
	mov	rax, QWORD PTR reader$[rsp]
	mov	rax, QWORD PTR [rax+136]
	add	rax, 64					; 00000040H
	mov	rcx, QWORD PTR reader$[rsp]
	mov	QWORD PTR [rcx+136], rax
	mov	rax, QWORD PTR tv73[rsp]
	jmp	SHORT $LN1@ccgobble
$LN2@ccgobble:
; Line 888
	mov	rcx, QWORD PTR reader$[rsp]
	call	ccpeep
$LN1@ccgobble:
; Line 889
	add	rsp, 56					; 00000038H
	ret	0
ccgobble ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
parser$ = 64
kind$ = 72
ccsee	PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 770
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR parser$[rsp]
	call	ccpeep
	mov	ecx, DWORD PTR kind$[rsp]
	cmp	DWORD PTR [rax], ecx
	jne	SHORT $LN3@ccsee
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@ccsee
$LN3@ccsee:
	mov	DWORD PTR tv68[rsp], 0
$LN4@ccsee:
	mov	eax, DWORD PTR tv68[rsp]
; Line 771
	add	rsp, 56					; 00000038H
	ret	0
ccsee	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
parser$ = 48
ccpeep	PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 765
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	edx, edx
	mov	rcx, QWORD PTR parser$[rsp]
	call	kttc__peek_ahead
; Line 766
	add	rsp, 40					; 00000028H
	ret	0
ccpeep	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 8
cclex_uninit PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 183
	mov	QWORD PTR [rsp+8], rcx
; Line 186
	ret	0
cclex_uninit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
l$ = 96
token$ = 104
cclex_token PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 202
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
	mov	rax, QWORD PTR l$[rsp]
	mov	rdi, QWORD PTR token$[rsp]
	lea	rsi, QWORD PTR [rax+56]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 203
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 64					; 00000040H
	rep stosb
	mov	rax, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rax+56]
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 204
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
cclex_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
l$ = 64
cclex_next_token PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 210
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN10@cclex_next:
$LN9@cclex_next:
$LN8@cclex_next:
$LN4@cclex_next:
; Line 212
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_next_token_internal
; Line 215
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 13
	je	SHORT $LN4@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 11
	je	SHORT $LN8@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 1
	je	SHORT $LN9@cclex_next
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 2
	je	SHORT $LN10@cclex_next
; Line 218
	mov	rax, QWORD PTR l$[rsp]
	cmp	DWORD PTR [rax+56], 0
	jle	SHORT $LN6@cclex_next
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN7@cclex_next
$LN6@cclex_next:
	mov	DWORD PTR tv80[rsp], 0
$LN7@cclex_next:
	mov	eax, DWORD PTR tv80[rsp]
; Line 219
	add	rsp, 56					; 00000038H
	ret	0
cclex_next_token ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$ = 8
len$ = 16
bed$ = 24
cclex_move PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 163
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 164
	mov	rax, QWORD PTR len$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 165
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+16], rcx
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+24], rcx
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR bed$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 166
	ret	0
cclex_move ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
l$ = 128
cclex_init PROC
; File W:\cpp\void\ktt-c\cclex.c
; Line 170
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
; Line 171
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 64					; 00000040H
	rep stosb
	mov	rax, QWORD PTR l$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	lea	rdi, QWORD PTR [rax+56]
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 173
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+32], 1024		; 00000400H
; Line 174
	mov	rax, QWORD PTR l$[rsp]
	mov	DWORD PTR [rax+36], 0
; Line 175
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	rax, rax, 24
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR l$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 176
	mov	rax, QWORD PTR l$[rsp]
	mov	eax, DWORD PTR [rax+32]
	imul	rax, rax, 24
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR l$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	memset
; Line 178
	mov	rcx, QWORD PTR l$[rsp]
	call	cclex_hash_init
; Line 179
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
cclex_init ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 0
name$ = 32
cctree_idenname PROC
; File W:\cpp\void\ktt-c\ccread.h
; Line 561
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 562
	cmp	QWORD PTR name$[rsp], 0
	je	SHORT $LN3@cctree_ide
	mov	rax, QWORD PTR name$[rsp]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR tv68[rsp], rax
	jmp	SHORT $LN4@cctree_ide
$LN3@cctree_ide:
	mov	QWORD PTR tv68[rsp], 0
$LN4@cctree_ide:
	mov	rax, QWORD PTR tv68[rsp]
; Line 563
	add	rsp, 24
	ret	0
cctree_idenname ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
key$2 = 40
i$3 = 48
simple_map$ = 56
i$4 = 64
res$5 = 72
key$6 = 80
key$7 = 88
tv87 = 96
tv160 = 100
tv212 = 104
item$8 = 112
res$9 = 120
simple_arr$ = 128
res$10 = 136
ccdlb_test PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 349
	sub	rsp, 152				; 00000098H
; Line 353
	mov	QWORD PTR simple_arr$[rsp], 0
; Line 354
	mov	DWORD PTR i$4[rsp], 0
	jmp	SHORT $LN4@ccdlb_test
$LN2@ccdlb_test:
	mov	eax, DWORD PTR i$4[rsp]
	inc	eax
	mov	DWORD PTR i$4[rsp], eax
$LN4@ccdlb_test:
	cmp	DWORD PTR i$4[rsp], 25
	jg	$LN3@ccdlb_test
; Line 356
	mov	r9d, 1
	mov	r8d, 1
	mov	edx, 8
	lea	rcx, QWORD PTR simple_arr$[rsp]
	call	ccdlb_arradd
	mov	eax, eax
	mov	rcx, QWORD PTR simple_arr$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR item$8[rsp], rax
; Line 357
	mov	r8d, 8
	xor	edx, edx
	mov	rcx, QWORD PTR item$8[rsp]
	call	memset
; Line 358
	mov	eax, DWORD PTR i$4[rsp]
	add	eax, 97					; 00000061H
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG44994
	call	ccformat
	mov	QWORD PTR key$7[rsp], rax
; Line 359
	mov	rcx, QWORD PTR key$7[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR tv87[rsp], eax
	mov	rcx, QWORD PTR key$7[rsp]
	call	strlen
	inc	eax
	mov	rcx, QWORD PTR item$8[rsp]
	mov	r9, QWORD PTR key$7[rsp]
	mov	edx, DWORD PTR tv87[rsp]
	mov	r8d, edx
	mov	edx, eax
	call	ccdlb_stradd
	mov	eax, eax
	mov	rcx, QWORD PTR item$8[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR res$10[rsp], rax
; Line 360
	mov	rdx, QWORD PTR key$7[rsp]
	mov	rcx, QWORD PTR res$10[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN11@ccdlb_test
	int	3
$LN11@ccdlb_test:
; Line 361
	jmp	$LN2@ccdlb_test
$LN3@ccdlb_test:
; Line 363
	mov	QWORD PTR simple_map$[rsp], 0
; Line 365
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN7@ccdlb_test
$LN5@ccdlb_test:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN7@ccdlb_test:
	cmp	DWORD PTR i$1[rsp], 25
	jg	$LN6@ccdlb_test
; Line 369
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 97					; 00000061H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG44996
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 370
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR simple_map$[rsp]
	call	cctbl_set
	mov	eax, eax
	mov	rcx, QWORD PTR simple_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 371
	mov	rax, QWORD PTR res$5[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@ccdlb_test
	int	3
$LN12@ccdlb_test:
; Line 372
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR tv160[rsp], eax
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	inc	eax
	mov	rcx, QWORD PTR res$5[rsp]
	mov	r9, QWORD PTR key$2[rsp]
	mov	edx, DWORD PTR tv160[rsp]
	mov	r8d, edx
	mov	edx, eax
	call	ccdlb_stradd
; Line 374
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 97					; 00000061H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG44998
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 375
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR simple_map$[rsp]
	call	cctbl_set
	mov	eax, eax
	mov	rcx, QWORD PTR simple_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 376
	mov	rax, QWORD PTR res$5[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$2[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN13@ccdlb_test
	int	3
$LN13@ccdlb_test:
; Line 378
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 65					; 00000041H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG45000
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 379
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR simple_map$[rsp]
	call	cctbl_set
	mov	eax, eax
	mov	rcx, QWORD PTR simple_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 380
	mov	rax, QWORD PTR res$5[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN14@ccdlb_test
	int	3
$LN14@ccdlb_test:
; Line 381
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	inc	eax
	mov	DWORD PTR tv212[rsp], eax
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	inc	eax
	mov	rcx, QWORD PTR res$5[rsp]
	mov	r9, QWORD PTR key$2[rsp]
	mov	edx, DWORD PTR tv212[rsp]
	mov	r8d, edx
	mov	edx, eax
	call	ccdlb_stradd
; Line 383
	mov	eax, DWORD PTR i$1[rsp]
	add	eax, 65					; 00000041H
	mov	r8d, DWORD PTR i$1[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG45002
	call	ccformat
	mov	QWORD PTR key$2[rsp], rax
; Line 384
	mov	rcx, QWORD PTR key$2[rsp]
	call	strlen
	mov	r9, QWORD PTR key$2[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR simple_map$[rsp]
	call	cctbl_set
	mov	eax, eax
	mov	rcx, QWORD PTR simple_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$5[rsp], rax
; Line 385
	mov	rax, QWORD PTR res$5[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$2[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN15@ccdlb_test
	int	3
$LN15@ccdlb_test:
; Line 386
	jmp	$LN5@ccdlb_test
$LN6@ccdlb_test:
; Line 388
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@ccdlb_test
$LN8@ccdlb_test:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@ccdlb_test:
	cmp	DWORD PTR i$3[rsp], 25
	jg	$LN9@ccdlb_test
; Line 392
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 97					; 00000061H
	mov	r8d, DWORD PTR i$3[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG45004
	call	ccformat
	mov	QWORD PTR key$6[rsp], rax
; Line 393
	mov	rcx, QWORD PTR key$6[rsp]
	call	strlen
	mov	r9, QWORD PTR key$6[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR simple_map$[rsp]
	call	cctbl_set
	mov	eax, eax
	mov	rcx, QWORD PTR simple_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$9[rsp], rax
; Line 394
	mov	rax, QWORD PTR res$9[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$6[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN16@ccdlb_test
	int	3
$LN16@ccdlb_test:
; Line 396
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 65					; 00000041H
	mov	r8d, DWORD PTR i$3[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG45006
	call	ccformat
	mov	QWORD PTR key$6[rsp], rax
; Line 397
	mov	rcx, QWORD PTR key$6[rsp]
	call	strlen
	mov	r9, QWORD PTR key$6[rsp]
	mov	r8d, eax
	mov	edx, 8
	lea	rcx, QWORD PTR simple_map$[rsp]
	call	cctbl_set
	mov	eax, eax
	mov	rcx, QWORD PTR simple_map$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR res$9[rsp], rax
; Line 398
	mov	rax, QWORD PTR res$9[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rcx, QWORD PTR key$6[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN17@ccdlb_test
	int	3
$LN17@ccdlb_test:
; Line 399
	jmp	$LN8@ccdlb_test
$LN9@ccdlb_test:
; Line 400
	add	rsp, 152				; 00000098H
	ret	0
ccdlb_test ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
vli$ = 40
ccm$ = 64
fmt$ = 72
ccstr_catf PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 334
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 336
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 339
	mov	r8, QWORD PTR vli$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccstr_vcatf
	mov	DWORD PTR res$[rsp], eax
; Line 341
	mov	QWORD PTR vli$[rsp], 0
; Line 343
	mov	eax, DWORD PTR res$[rsp]
; Line 344
	add	rsp, 56					; 00000038H
	ret	0
ccstr_catf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 32
res$ = 36
ccm$ = 64
fmt$ = 72
vli$ = 80
ccstr_vcatf PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 325
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 326
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsnprintf
	mov	DWORD PTR len$[rsp], eax
; Line 327
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	r9d, DWORD PTR len$[rsp]
	mov	r8d, eax
	mov	edx, 1
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccdlb_arradd
	mov	DWORD PTR res$[rsp], eax
; Line 328
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	ecx, DWORD PTR res$[rsp]
	mov	rdx, QWORD PTR ccm$[rsp]
	add	rcx, QWORD PTR [rdx]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, eax
	call	stbsp_vsnprintf
	mov	DWORD PTR len$[rsp], eax
; Line 329
	mov	eax, DWORD PTR res$[rsp]
; Line 330
	add	rsp, 56					; 00000038H
	ret	0
ccstr_vcatf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
tv89 = 36
tv131 = 40
tv140 = 44
is_init$ = 48
res$ = 52
dlb$ = 56
tv66 = 64
ccm$ = 96
isze$ = 104
len$ = 112
key$ = 120
cctbl_set PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 295
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 296
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN6@cctbl_set
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 16
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN7@cctbl_set
$LN6@cctbl_set:
	mov	QWORD PTR tv66[rsp], 0
$LN7@cctbl_set:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR dlb$[rsp], rax
; Line 299
	cmp	QWORD PTR dlb$[rsp], 0
	jne	SHORT $LN8@cctbl_set
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN9@cctbl_set
$LN8@cctbl_set:
	mov	DWORD PTR tv68[rsp], 0
$LN9@cctbl_set:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR is_init$[rsp], eax
; Line 300
	cmp	DWORD PTR is_init$[rsp], 0
	je	$LN2@cctbl_set
; Line 303
	imul	eax, DWORD PTR isze$[rsp], 255		; 000000ffH
	imul	ecx, DWORD PTR isze$[rsp], 255		; 000000ffH
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, QWORD PTR dlb$[rsp]
	call	ccdlb_arradd_
; Line 304
	mov	r8d, 16
	xor	edx, edx
	mov	rcx, QWORD PTR dlb$[rsp]
	call	memset
; Line 307
	mov	rax, QWORD PTR dlb$[rsp]
	xor	r9d, r9d
	mov	r8d, 255				; 000000ffH
	mov	edx, 32					; 00000020H
	mov	rcx, rax
	call	ccdlb_arradd
; Line 308
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@cctbl_set
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN11@cctbl_set
$LN10@cctbl_set:
	mov	DWORD PTR tv89[rsp], 0
$LN11@cctbl_set:
	mov	eax, DWORD PTR tv89[rsp]
	mov	r8d, eax
	xor	edx, edx
	mov	rax, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	memset
; Line 309
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@cctbl_set
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN13@cctbl_set
$LN12@cctbl_set:
	mov	DWORD PTR tv131[rsp], 0
$LN13@cctbl_set:
	mov	eax, DWORD PTR tv131[rsp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	rcx
	cmp	rax, 255				; 000000ffH
	je	SHORT $LN3@cctbl_set
	int	3
$LN3@cctbl_set:
; Line 310
	mov	rax, QWORD PTR dlb$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN14@cctbl_set
	mov	eax, 4
	imul	rax, rax, -1
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv140[rsp], eax
	jmp	SHORT $LN15@cctbl_set
$LN14@cctbl_set:
	mov	DWORD PTR tv140[rsp], 0
$LN15@cctbl_set:
	mov	eax, DWORD PTR tv140[rsp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	rcx
	test	rax, rax
	je	SHORT $LN4@cctbl_set
	int	3
$LN4@cctbl_set:
$LN2@cctbl_set:
; Line 314
	mov	r9, QWORD PTR key$[rsp]
	mov	r8d, DWORD PTR len$[rsp]
	mov	edx, DWORD PTR isze$[rsp]
	lea	rcx, QWORD PTR dlb$[rsp]
	call	cctbl_set_
	mov	DWORD PTR res$[rsp], eax
; Line 316
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 318
	xor	edx, edx
	mov	eax, DWORD PTR res$[rsp]
	div	DWORD PTR isze$[rsp]
; Line 319
	add	rsp, 88					; 00000058H
	ret	0
cctbl_set ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
entry$ = 32
len$ = 40
i$1 = 44
tbl$ = 48
val$ = 56
tv84 = 60
tv95 = 64
hsh$ = 72
key$ = 80
debug$ = 88
tv86 = 96
tv183 = 104
tbl_$ = 128
isze$ = 136
len_$ = 144
key_$ = 152
cctbl_set_ PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 218
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 224
	cmp	QWORD PTR tbl_$[rsp], 0
	jne	SHORT $LN7@cctbl_set_
	int	3
$LN7@cctbl_set_:
; Line 225
	cmp	QWORD PTR key_$[rsp], 0
	jne	SHORT $LN8@cctbl_set_
	int	3
$LN8@cctbl_set_:
; Line 226
	cmp	DWORD PTR len_$[rsp], 0
	jne	SHORT $LN9@cctbl_set_
	int	3
$LN9@cctbl_set_:
; Line 228
	mov	rax, QWORD PTR tbl_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tbl$[rsp], rax
; Line 230
	cmp	QWORD PTR tbl$[rsp], 0
	jne	SHORT $LN10@cctbl_set_
	int	3
$LN10@cctbl_set_:
; Line 235
	cmp	DWORD PTR len_$[rsp], -1
	je	SHORT $LN11@cctbl_set_
; Line 236
	mov	eax, DWORD PTR len_$[rsp]
	mov	DWORD PTR len$[rsp], eax
; Line 237
	mov	rax, QWORD PTR key_$[rsp]
	mov	QWORD PTR key$[rsp], rax
; Line 238
	mov	QWORD PTR hsh$[rsp], 5381		; 00001505H
; Line 239
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@cctbl_set_
$LN2@cctbl_set_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@cctbl_set_:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@cctbl_set_
	mov	rax, QWORD PTR hsh$[rsp]
	shl	rax, 5
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR key$[rsp]
	movsx	rcx, BYTE PTR [rdx+rcx]
	add	rcx, QWORD PTR hsh$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR hsh$[rsp], rax
	jmp	SHORT $LN2@cctbl_set_
$LN3@cctbl_set_:
; Line 240
	jmp	SHORT $LN12@cctbl_set_
$LN11@cctbl_set_:
; Line 241
	mov	DWORD PTR len$[rsp], 8
; Line 242
	lea	rax, QWORD PTR key_$[rsp]
	mov	QWORD PTR key$[rsp], rax
; Line 243
	mov	rax, QWORD PTR key_$[rsp]
	mov	QWORD PTR hsh$[rsp], rax
$LN12@cctbl_set_:
; Line 246
	mov	rax, QWORD PTR tbl$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN23@cctbl_set_
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR tbl$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv84[rsp], eax
	jmp	SHORT $LN24@cctbl_set_
$LN23@cctbl_set_:
	mov	DWORD PTR tv84[rsp], 0
$LN24@cctbl_set_:
	mov	eax, DWORD PTR tv84[rsp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	rcx
	mov	QWORD PTR tv86[rsp], rax
	xor	edx, edx
	mov	rax, QWORD PTR hsh$[rsp]
	mov	rcx, QWORD PTR tv86[rsp]
	div	rcx
	mov	rax, rdx
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tbl$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR entry$[rsp], rax
; Line 248
	mov	rax, QWORD PTR tbl$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN25@cctbl_set_
	mov	eax, 4
	imul	rax, rax, -2
	mov	rcx, QWORD PTR tbl$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv95[rsp], eax
	jmp	SHORT $LN26@cctbl_set_
$LN25@cctbl_set_:
	mov	DWORD PTR tv95[rsp], 0
$LN26@cctbl_set_:
	mov	eax, DWORD PTR tv95[rsp]
	xor	edx, edx
	mov	ecx, 32					; 00000020H
	div	rcx
	mov	DWORD PTR debug$[rsp], eax
$LN5@cctbl_set_:
; Line 251
	mov	rax, QWORD PTR entry$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN6@cctbl_set_
; Line 253
	mov	rax, QWORD PTR entry$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	cmp	DWORD PTR [rax+8], ecx
	jne	SHORT $LN13@cctbl_set_
; Line 255
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR key$[rsp]
	mov	rax, QWORD PTR entry$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN14@cctbl_set_
; Line 256
	mov	rax, QWORD PTR entry$[rsp]
	mov	eax, DWORD PTR [rax+24]
	jmp	$LN1@cctbl_set_
$LN14@cctbl_set_:
$LN13@cctbl_set_:
; Line 259
	mov	rax, QWORD PTR entry$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN15@cctbl_set_
; Line 260
	mov	rax, QWORD PTR entry$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR entry$[rsp], rax
	jmp	SHORT $LN16@cctbl_set_
$LN15@cctbl_set_:
; Line 262
	jmp	SHORT $LN6@cctbl_set_
$LN16@cctbl_set_:
; Line 263
	jmp	SHORT $LN5@cctbl_set_
$LN6@cctbl_set_:
; Line 265
	mov	rax, QWORD PTR entry$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN17@cctbl_set_
; Line 267
	mov	ecx, 32					; 00000020H
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR entry$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 268
	mov	rax, QWORD PTR entry$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR entry$[rsp], rax
; Line 269
	mov	r8d, 32					; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR entry$[rsp]
	call	memset
$LN17@cctbl_set_:
; Line 273
	mov	r8d, DWORD PTR isze$[rsp]
	mov	edx, DWORD PTR isze$[rsp]
	lea	rcx, QWORD PTR tbl$[rsp]
	call	ccdlb_arradd_
	mov	DWORD PTR val$[rsp], eax
; Line 274
	mov	eax, DWORD PTR isze$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	mov	rdx, QWORD PTR tbl$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+16]
	mov	r8d, eax
	xor	edx, edx
	call	memset
; Line 276
	mov	rax, QWORD PTR entry$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN18@cctbl_set_
	int	3
$LN18@cctbl_set_:
; Line 277
	mov	rax, QWORD PTR entry$[rsp]
	cmp	DWORD PTR [rax+8], 0
	je	SHORT $LN19@cctbl_set_
	int	3
$LN19@cctbl_set_:
; Line 278
	mov	rax, QWORD PTR entry$[rsp]
	cmp	DWORD PTR [rax+24], 0
	je	SHORT $LN20@cctbl_set_
	int	3
$LN20@cctbl_set_:
; Line 280
	cmp	DWORD PTR len$[rsp], -1
	je	SHORT $LN21@cctbl_set_
; Line 282
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	ecx, DWORD PTR len$[rsp]
	inc	ecx
	mov	rdx, QWORD PTR entry$[rsp]
	add	rdx, 16
	mov	QWORD PTR tv183[rsp], rdx
	mov	r9, QWORD PTR key_$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rax, QWORD PTR tv183[rsp]
	mov	rcx, rax
	call	ccdlb_stradd
$LN21@cctbl_set_:
; Line 285
	mov	rax, QWORD PTR entry$[rsp]
	mov	ecx, DWORD PTR len_$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 286
	mov	rax, QWORD PTR entry$[rsp]
	mov	ecx, DWORD PTR val$[rsp]
	mov	DWORD PTR [rax+24], ecx
; Line 288
	mov	rax, QWORD PTR tbl_$[rsp]
	mov	rcx, QWORD PTR tbl$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 290
	mov	eax, DWORD PTR val$[rsp]
$LN1@cctbl_set_:
; Line 291
	add	rsp, 120				; 00000078H
	ret	0
cctbl_set_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
cur$ = 40
ccm$ = 64
cres$ = 72
ccom$ = 80
cpy$ = 88
ccdlb_stradd PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 205
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 207
	cmp	DWORD PTR cres$[rsp], 0
	jne	SHORT $LN2@ccdlb_stra
	int	3
$LN2@ccdlb_stra:
; Line 208
	cmp	DWORD PTR ccom$[rsp], 0
	jne	SHORT $LN3@ccdlb_stra
	int	3
$LN3@ccdlb_stra:
; Line 209
	mov	r9d, DWORD PTR ccom$[rsp]
	mov	r8d, DWORD PTR cres$[rsp]
	mov	edx, 1
	mov	rcx, QWORD PTR ccm$[rsp]
	call	ccdlb_arradd
	mov	DWORD PTR res$[rsp], eax
; Line 210
	mov	eax, DWORD PTR res$[rsp]
	mov	rcx, QWORD PTR ccm$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR cur$[rsp], rax
; Line 211
	mov	eax, DWORD PTR cres$[rsp]
	dec	eax
	mov	eax, eax
	mov	r8d, eax
	mov	rdx, QWORD PTR cpy$[rsp]
	mov	rcx, QWORD PTR cur$[rsp]
	call	memcpy
; Line 212
	mov	eax, DWORD PTR cres$[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR cur$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 213
	mov	eax, DWORD PTR res$[rsp]
; Line 214
	add	rsp, 56					; 00000038H
	ret	0
ccdlb_stradd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
tv66 = 40
dlb$ = 48
ccm$ = 80
isze$ = 88
cres$ = 96
ccom$ = 104
ccdlb_arradd PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 193
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 197
	mov	rax, QWORD PTR ccm$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@ccdlb_arra
	mov	rax, QWORD PTR ccm$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 16
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN4@ccdlb_arra
$LN3@ccdlb_arra:
	mov	QWORD PTR tv66[rsp], 0
$LN4@ccdlb_arra:
	mov	rax, QWORD PTR tv66[rsp]
	mov	QWORD PTR dlb$[rsp], rax
; Line 198
	mov	eax, DWORD PTR isze$[rsp]
	imul	eax, DWORD PTR ccom$[rsp]
	mov	ecx, DWORD PTR isze$[rsp]
	imul	ecx, DWORD PTR cres$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, QWORD PTR dlb$[rsp]
	call	ccdlb_arradd_
	mov	DWORD PTR res$[rsp], eax
; Line 199
	mov	rax, QWORD PTR dlb$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR ccm$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 200
	xor	edx, edx
	mov	eax, DWORD PTR res$[rsp]
	div	DWORD PTR isze$[rsp]
; Line 201
	add	rsp, 72					; 00000048H
	ret	0
ccdlb_arradd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sze_max$ = 32
sze_min$ = 36
tv66 = 40
tv69 = 44
dlb$ = 48
dlb_$ = 80
rsze$ = 88
csze$ = 96
ccdlb_arradd_ PROC
; File W:\cpp\void\ktt-c\ccdlb.h
; Line 155
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 170
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR dlb$[rsp], rax
; Line 171
	cmp	QWORD PTR dlb$[rsp], 0
	je	SHORT $LN6@ccdlb_arra
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN7@ccdlb_arra
$LN6@ccdlb_arra:
	mov	DWORD PTR tv66[rsp], 0
$LN7@ccdlb_arra:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR sze_max$[rsp], eax
; Line 172
	cmp	QWORD PTR dlb$[rsp], 0
	je	SHORT $LN8@ccdlb_arra
	mov	rax, QWORD PTR dlb$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN9@ccdlb_arra
$LN8@ccdlb_arra:
	mov	DWORD PTR tv69[rsp], 0
$LN9@ccdlb_arra:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR sze_min$[rsp], eax
; Line 176
	mov	eax, DWORD PTR sze_max$[rsp]
	mov	ecx, DWORD PTR rsze$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR sze_min$[rsp]
	cmp	DWORD PTR csze$[rsp], eax
	jbe	SHORT $LN2@ccdlb_arra
	int	3
$LN2@ccdlb_arra:
; Line 178
	mov	eax, DWORD PTR rsze$[rsp]
	mov	ecx, DWORD PTR sze_min$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR sze_max$[rsp], eax
	jae	SHORT $LN3@ccdlb_arra
; Line 179
	mov	eax, DWORD PTR sze_max$[rsp]
	shl	eax, 1
	mov	DWORD PTR sze_max$[rsp], eax
; Line 180
	mov	eax, DWORD PTR rsze$[rsp]
	mov	ecx, DWORD PTR sze_min$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR sze_max$[rsp], eax
	jae	SHORT $LN4@ccdlb_arra
; Line 181
	mov	eax, DWORD PTR rsze$[rsp]
	mov	ecx, DWORD PTR sze_min$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR sze_max$[rsp], eax
$LN4@ccdlb_arra:
; Line 183
	mov	eax, DWORD PTR sze_max$[rsp]
	add	rax, 16
	mov	rdx, rax
	mov	rcx, QWORD PTR dlb$[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR dlb$[rsp], rax
; Line 184
	mov	rax, QWORD PTR dlb_$[rsp]
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	QWORD PTR [rax], rcx
$LN3@ccdlb_arra:
; Line 186
	mov	rax, QWORD PTR dlb$[rsp]
	mov	ecx, DWORD PTR sze_max$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 187
	mov	eax, DWORD PTR csze$[rsp]
	mov	ecx, DWORD PTR sze_min$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR dlb$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 188
	mov	eax, DWORD PTR sze_min$[rsp]
; Line 189
	add	rsp, 72					; 00000048H
	ret	0
ccdlb_arradd_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
vli$ = 32
res$ = 40
fmt$ = 64
ccformat PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 72
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 74
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 75
	mov	rdx, QWORD PTR vli$[rsp]
	mov	rcx, QWORD PTR fmt$[rsp]
	call	ccformatv
	mov	QWORD PTR res$[rsp], rax
; Line 76
	mov	QWORD PTR vli$[rsp], 0
; Line 78
	mov	rax, QWORD PTR res$[rsp]
; Line 79
	add	rsp, 56					; 00000038H
	ret	0
ccformat ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 32
vli$ = 40
buf$ = 64
len$ = 72
fmt$ = 80
ccformatex PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 61
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 63
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 64
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	ccformatvex
	mov	DWORD PTR res$[rsp], eax
; Line 65
	mov	QWORD PTR vli$[rsp], 0
; Line 67
	mov	eax, DWORD PTR res$[rsp]
; Line 68
	add	rsp, 56					; 00000038H
	ret	0
ccformatex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fmt$ = 48
vli$ = 56
ccformatv PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 50
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 54
	mov	eax, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	ccformatvex
; Line 56
	mov	eax, OFFSET FLAT:?buf@?1??ccformatv@@9@4PADA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
; Line 57
	add	rsp, 40					; 00000028H
	ret	0
ccformatv ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 48
len$ = 56
fmt$ = 64
vli$ = 72
ccformatvex PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 44
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 45
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
; Line 46
	add	rsp, 40					; 00000028H
	ret	0
ccformatvex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 64
rem$ = 68
vli$ = 72
guid$ = 96
file$ = 104
line$ = 112
func$ = 120
tag$ = 128
fmt$ = 136
cctrace_ PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 83
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 88					; 00000058H
; Line 87
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR vli$[rsp], rax
; Line 90
	mov	r9, QWORD PTR vli$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, 255				; 000000ffH
	lea	rcx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	call	ccformatvex
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 91
	movsxd	rax, DWORD PTR len$[rsp]
	mov	ecx, 4095				; 00000fffH
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR rem$[rsp], eax
; Line 92
	movsxd	rax, DWORD PTR len$[rsp]
	lea	rcx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	add	rcx, rax
	mov	rax, rcx
	lea	rcx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR func$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	ecx, DWORD PTR line$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, QWORD PTR file$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR tag$[rsp]
	lea	r8, OFFSET FLAT:$SG44774
	mov	edx, DWORD PTR rem$[rsp]
	mov	rcx, rax
	call	ccformatex
; Line 93
	movsxd	rax, DWORD PTR len$[rsp]
	lea	rcx, OFFSET FLAT:?buf@?1??cctrace_@@9@4PADA
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	ccout
; Line 95
	mov	QWORD PTR vli$[rsp], 0
; Line 96
	add	rsp, 88					; 00000058H
	ret	0
cctrace_ ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
string$ = 48
ccout	PROC
; File W:\cpp\void\ktt-c\cclog.h
; Line 9
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 11
	mov	rcx, QWORD PTR string$[rsp]
	call	QWORD PTR __imp_OutputDebugStringA
; Line 13
	mov	rcx, QWORD PTR string$[rsp]
	call	printf
; Line 14
	add	rsp, 40					; 00000028H
	ret	0
ccout	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
et$1 = 0
ph$ = 8
eb$2 = 16
e$3 = 20
pl$ = 24
cn$4 = 32
cn$5 = 36
cn$6 = 40
cn$7 = 44
cn$8 = 48
cn$9 = 52
cn$10 = 56
cn$11 = 60
cn$12 = 64
cn$13 = 68
cn$14 = 72
cn$15 = 76
cn$16 = 80
cn$17 = 84
cn$18 = 88
cn$19 = 92
cn$20 = 96
cn$21 = 100
cn$22 = 104
cn$23 = 108
cn$24 = 112
cn$25 = 116
cn$26 = 120
cn$27 = 124
p2l$28 = 128
p2h$29 = 136
bt$30 = 144
bt$31 = 152
bt$32 = 160
bt$33 = 168
bt$34 = 176
bt$35 = 184
ahi$36 = 192
bhi$37 = 200
ahi$38 = 208
bhi$39 = 216
ahi$40 = 224
bhi$41 = 232
ahi$42 = 240
bhi$43 = 248
ahi$44 = 256
bhi$45 = 264
ahi$46 = 272
bhi$47 = 280
alo$48 = 288
blo$49 = 296
alo$50 = 304
blo$51 = 312
s$52 = 320
alo$53 = 328
blo$54 = 336
alo$55 = 344
blo$56 = 352
s$57 = 360
alo$58 = 368
blo$59 = 376
s$60 = 384
alo$61 = 392
blo$62 = 400
s$63 = 408
ohi$ = 432
olo$ = 440
d$ = 448
power$ = 456
stbsp__raise_to_power10 PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1639
	mov	DWORD PTR [rsp+32], r9d
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 424				; 000001a8H
; Line 1641
	cmp	DWORD PTR power$[rsp], 0
	jl	$LN74@stbsp__rai
	cmp	DWORD PTR power$[rsp], 22
	jg	$LN74@stbsp__rai
; Line 1642
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$36[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$37[rsp], xmm0
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$4[rsp], 0
	jmp	SHORT $LN4@stbsp__rai
$LN2@stbsp__rai:
	mov	eax, DWORD PTR cn$4[rsp]
	inc	eax
	mov	DWORD PTR cn$4[rsp], eax
$LN4@stbsp__rai:
	cmp	DWORD PTR cn$4[rsp], 8
	jge	SHORT $LN3@stbsp__rai
	movsxd	rax, DWORD PTR cn$4[rsp]
	movsxd	rcx, DWORD PTR cn$4[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$30[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rai
$LN3@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$5[rsp], 0
	jmp	SHORT $LN7@stbsp__rai
$LN5@stbsp__rai:
	mov	eax, DWORD PTR cn$5[rsp]
	inc	eax
	mov	DWORD PTR cn$5[rsp], eax
$LN7@stbsp__rai:
	cmp	DWORD PTR cn$5[rsp], 8
	jge	SHORT $LN6@stbsp__rai
	movsxd	rax, DWORD PTR cn$5[rsp]
	movsxd	rcx, DWORD PTR cn$5[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR ahi$36[rsp+rcx], al
	jmp	SHORT $LN5@stbsp__rai
$LN6@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$36[rsp]
	movsd	QWORD PTR alo$48[rsp], xmm0
	mov	DWORD PTR cn$6[rsp], 0
	jmp	SHORT $LN10@stbsp__rai
$LN8@stbsp__rai:
	mov	eax, DWORD PTR cn$6[rsp]
	inc	eax
	mov	DWORD PTR cn$6[rsp], eax
$LN10@stbsp__rai:
	cmp	DWORD PTR cn$6[rsp], 8
	jge	SHORT $LN9@stbsp__rai
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$6[rsp]
	movsxd	rdx, DWORD PTR cn$6[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$30[rsp+rdx], al
	jmp	SHORT $LN8@stbsp__rai
$LN9@stbsp__rai:
	mov	rax, QWORD PTR bt$30[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$30[rsp], rax
	mov	DWORD PTR cn$7[rsp], 0
	jmp	SHORT $LN13@stbsp__rai
$LN11@stbsp__rai:
	mov	eax, DWORD PTR cn$7[rsp]
	inc	eax
	mov	DWORD PTR cn$7[rsp], eax
$LN13@stbsp__rai:
	cmp	DWORD PTR cn$7[rsp], 8
	jge	SHORT $LN12@stbsp__rai
	movsxd	rax, DWORD PTR cn$7[rsp]
	movsxd	rcx, DWORD PTR cn$7[rsp]
	movzx	eax, BYTE PTR bt$30[rsp+rax]
	mov	BYTE PTR bhi$37[rsp+rcx], al
	jmp	SHORT $LN11@stbsp__rai
$LN12@stbsp__rai:
	movsxd	rax, DWORD PTR power$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$37[rsp]
	movsd	QWORD PTR blo$49[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$36[rsp]
	mulsd	xmm0, QWORD PTR bhi$37[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$36[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR bhi$37[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$48[rsp]
	mulsd	xmm1, QWORD PTR blo$49[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1643
	jmp	$LN75@stbsp__rai
$LN74@stbsp__rai:
; Line 1647
	mov	eax, DWORD PTR power$[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1648
	cmp	DWORD PTR power$[rsp], 0
	jge	SHORT $LN76@stbsp__rai
; Line 1649
	mov	eax, DWORD PTR e$3[rsp]
	neg	eax
	mov	DWORD PTR e$3[rsp], eax
$LN76@stbsp__rai:
; Line 1650
	imul	eax, DWORD PTR e$3[rsp], 713		; 000002c9H
	sar	eax, 14
	mov	DWORD PTR et$1[rsp], eax
; Line 1651
	cmp	DWORD PTR et$1[rsp], 13
	jle	SHORT $LN77@stbsp__rai
; Line 1652
	mov	DWORD PTR et$1[rsp], 13
$LN77@stbsp__rai:
; Line 1653
	imul	eax, DWORD PTR et$1[rsp], 23
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR eb$2[rsp], eax
; Line 1655
	movsd	xmm0, QWORD PTR d$[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1656
	xorps	xmm0, xmm0
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1657
	cmp	DWORD PTR power$[rsp], 0
	jge	$LN78@stbsp__rai
; Line 1658
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN80@stbsp__rai
; Line 1659
	mov	eax, DWORD PTR eb$2[rsp]
	dec	eax
	mov	DWORD PTR eb$2[rsp], eax
; Line 1660
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$38[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$39[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$8[rsp], 0
	jmp	SHORT $LN16@stbsp__rai
$LN14@stbsp__rai:
	mov	eax, DWORD PTR cn$8[rsp]
	inc	eax
	mov	DWORD PTR cn$8[rsp], eax
$LN16@stbsp__rai:
	cmp	DWORD PTR cn$8[rsp], 8
	jge	SHORT $LN15@stbsp__rai
	movsxd	rax, DWORD PTR cn$8[rsp]
	movsxd	rcx, DWORD PTR cn$8[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$31[rsp+rcx], al
	jmp	SHORT $LN14@stbsp__rai
$LN15@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$9[rsp], 0
	jmp	SHORT $LN19@stbsp__rai
$LN17@stbsp__rai:
	mov	eax, DWORD PTR cn$9[rsp]
	inc	eax
	mov	DWORD PTR cn$9[rsp], eax
$LN19@stbsp__rai:
	cmp	DWORD PTR cn$9[rsp], 8
	jge	SHORT $LN18@stbsp__rai
	movsxd	rax, DWORD PTR cn$9[rsp]
	movsxd	rcx, DWORD PTR cn$9[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR ahi$38[rsp+rcx], al
	jmp	SHORT $LN17@stbsp__rai
$LN18@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$38[rsp]
	movsd	QWORD PTR alo$50[rsp], xmm0
	mov	DWORD PTR cn$10[rsp], 0
	jmp	SHORT $LN22@stbsp__rai
$LN20@stbsp__rai:
	mov	eax, DWORD PTR cn$10[rsp]
	inc	eax
	mov	DWORD PTR cn$10[rsp], eax
$LN22@stbsp__rai:
	cmp	DWORD PTR cn$10[rsp], 8
	jge	SHORT $LN21@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$10[rsp]
	movsxd	rdx, DWORD PTR cn$10[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$31[rsp+rdx], al
	jmp	SHORT $LN20@stbsp__rai
$LN21@stbsp__rai:
	mov	rax, QWORD PTR bt$31[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$31[rsp], rax
	mov	DWORD PTR cn$11[rsp], 0
	jmp	SHORT $LN25@stbsp__rai
$LN23@stbsp__rai:
	mov	eax, DWORD PTR cn$11[rsp]
	inc	eax
	mov	DWORD PTR cn$11[rsp], eax
$LN25@stbsp__rai:
	cmp	DWORD PTR cn$11[rsp], 8
	jge	SHORT $LN24@stbsp__rai
	movsxd	rax, DWORD PTR cn$11[rsp]
	movsxd	rcx, DWORD PTR cn$11[rsp]
	movzx	eax, BYTE PTR bt$31[rsp+rax]
	mov	BYTE PTR bhi$39[rsp+rcx], al
	jmp	SHORT $LN23@stbsp__rai
$LN24@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negbot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$39[rsp]
	movsd	QWORD PTR blo$51[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$38[rsp]
	mulsd	xmm0, QWORD PTR bhi$39[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$38[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR bhi$39[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$50[rsp]
	mulsd	xmm1, QWORD PTR blo$51[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1661
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negboterr
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	xmm1, QWORD PTR pl$[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
$LN80@stbsp__rai:
; Line 1663
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN81@stbsp__rai
; Line 1664
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$52[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$52[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1665
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1666
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$40[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$41[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$12[rsp], 0
	jmp	SHORT $LN28@stbsp__rai
$LN26@stbsp__rai:
	mov	eax, DWORD PTR cn$12[rsp]
	inc	eax
	mov	DWORD PTR cn$12[rsp], eax
$LN28@stbsp__rai:
	cmp	DWORD PTR cn$12[rsp], 8
	jge	SHORT $LN27@stbsp__rai
	movsxd	rax, DWORD PTR cn$12[rsp]
	movsxd	rcx, DWORD PTR cn$12[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$32[rsp+rcx], al
	jmp	SHORT $LN26@stbsp__rai
$LN27@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$13[rsp], 0
	jmp	SHORT $LN31@stbsp__rai
$LN29@stbsp__rai:
	mov	eax, DWORD PTR cn$13[rsp]
	inc	eax
	mov	DWORD PTR cn$13[rsp], eax
$LN31@stbsp__rai:
	cmp	DWORD PTR cn$13[rsp], 8
	jge	SHORT $LN30@stbsp__rai
	movsxd	rax, DWORD PTR cn$13[rsp]
	movsxd	rcx, DWORD PTR cn$13[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR ahi$40[rsp+rcx], al
	jmp	SHORT $LN29@stbsp__rai
$LN30@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$40[rsp]
	movsd	QWORD PTR alo$53[rsp], xmm0
	mov	DWORD PTR cn$14[rsp], 0
	jmp	SHORT $LN34@stbsp__rai
$LN32@stbsp__rai:
	mov	eax, DWORD PTR cn$14[rsp]
	inc	eax
	mov	DWORD PTR cn$14[rsp], eax
$LN34@stbsp__rai:
	cmp	DWORD PTR cn$14[rsp], 8
	jge	SHORT $LN33@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$14[rsp]
	movsxd	rdx, DWORD PTR cn$14[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$32[rsp+rdx], al
	jmp	SHORT $LN32@stbsp__rai
$LN33@stbsp__rai:
	mov	rax, QWORD PTR bt$32[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$32[rsp], rax
	mov	DWORD PTR cn$15[rsp], 0
	jmp	SHORT $LN37@stbsp__rai
$LN35@stbsp__rai:
	mov	eax, DWORD PTR cn$15[rsp]
	inc	eax
	mov	DWORD PTR cn$15[rsp], eax
$LN37@stbsp__rai:
	cmp	DWORD PTR cn$15[rsp], 8
	jge	SHORT $LN36@stbsp__rai
	movsxd	rax, DWORD PTR cn$15[rsp]
	movsxd	rcx, DWORD PTR cn$15[rsp]
	movzx	eax, BYTE PTR bt$32[rsp+rax]
	mov	BYTE PTR bhi$41[rsp+rcx], al
	jmp	SHORT $LN35@stbsp__rai
$LN36@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$41[rsp]
	movsd	QWORD PTR blo$54[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$40[rsp]
	mulsd	xmm0, QWORD PTR bhi$41[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$40[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR bhi$41[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$53[rsp]
	mulsd	xmm1, QWORD PTR blo$54[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1667
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtoperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__negtop
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1668
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1669
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN81@stbsp__rai:
; Line 1671
	jmp	$LN79@stbsp__rai
$LN78@stbsp__rai:
; Line 1672
	cmp	DWORD PTR eb$2[rsp], 0
	je	$LN82@stbsp__rai
; Line 1673
	mov	eax, DWORD PTR eb$2[rsp]
	mov	DWORD PTR e$3[rsp], eax
; Line 1674
	cmp	DWORD PTR eb$2[rsp], 22
	jle	SHORT $LN83@stbsp__rai
; Line 1675
	mov	DWORD PTR eb$2[rsp], 22
$LN83@stbsp__rai:
; Line 1676
	mov	eax, DWORD PTR eb$2[rsp]
	mov	ecx, DWORD PTR e$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$3[rsp], eax
; Line 1677
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$42[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$43[rsp], xmm0
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR d$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR ph$[rsp], xmm0
	mov	DWORD PTR cn$16[rsp], 0
	jmp	SHORT $LN40@stbsp__rai
$LN38@stbsp__rai:
	mov	eax, DWORD PTR cn$16[rsp]
	inc	eax
	mov	DWORD PTR cn$16[rsp], eax
$LN40@stbsp__rai:
	cmp	DWORD PTR cn$16[rsp], 8
	jge	SHORT $LN39@stbsp__rai
	movsxd	rax, DWORD PTR cn$16[rsp]
	movsxd	rcx, DWORD PTR cn$16[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bt$33[rsp+rcx], al
	jmp	SHORT $LN38@stbsp__rai
$LN39@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$17[rsp], 0
	jmp	SHORT $LN43@stbsp__rai
$LN41@stbsp__rai:
	mov	eax, DWORD PTR cn$17[rsp]
	inc	eax
	mov	DWORD PTR cn$17[rsp], eax
$LN43@stbsp__rai:
	cmp	DWORD PTR cn$17[rsp], 8
	jge	SHORT $LN42@stbsp__rai
	movsxd	rax, DWORD PTR cn$17[rsp]
	movsxd	rcx, DWORD PTR cn$17[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR ahi$42[rsp+rcx], al
	jmp	SHORT $LN41@stbsp__rai
$LN42@stbsp__rai:
	movsd	xmm0, QWORD PTR d$[rsp]
	subsd	xmm0, QWORD PTR ahi$42[rsp]
	movsd	QWORD PTR alo$55[rsp], xmm0
	mov	DWORD PTR cn$18[rsp], 0
	jmp	SHORT $LN46@stbsp__rai
$LN44@stbsp__rai:
	mov	eax, DWORD PTR cn$18[rsp]
	inc	eax
	mov	DWORD PTR cn$18[rsp], eax
$LN46@stbsp__rai:
	cmp	DWORD PTR cn$18[rsp], 8
	jge	SHORT $LN45@stbsp__rai
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$18[rsp]
	movsxd	rdx, DWORD PTR cn$18[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$33[rsp+rdx], al
	jmp	SHORT $LN44@stbsp__rai
$LN45@stbsp__rai:
	mov	rax, QWORD PTR bt$33[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$33[rsp], rax
	mov	DWORD PTR cn$19[rsp], 0
	jmp	SHORT $LN49@stbsp__rai
$LN47@stbsp__rai:
	mov	eax, DWORD PTR cn$19[rsp]
	inc	eax
	mov	DWORD PTR cn$19[rsp], eax
$LN49@stbsp__rai:
	cmp	DWORD PTR cn$19[rsp], 8
	jge	SHORT $LN48@stbsp__rai
	movsxd	rax, DWORD PTR cn$19[rsp]
	movsxd	rcx, DWORD PTR cn$19[rsp]
	movzx	eax, BYTE PTR bt$33[rsp+rax]
	mov	BYTE PTR bhi$43[rsp+rcx], al
	jmp	SHORT $LN47@stbsp__rai
$LN48@stbsp__rai:
	movsxd	rax, DWORD PTR eb$2[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$43[rsp]
	movsd	QWORD PTR blo$56[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$42[rsp]
	mulsd	xmm0, QWORD PTR bhi$43[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR ahi$42[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR bhi$43[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$55[rsp]
	mulsd	xmm1, QWORD PTR blo$56[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
; Line 1678
	cmp	DWORD PTR e$3[rsp], 0
	je	$LN84@stbsp__rai
; Line 1679
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$57[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$57[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1680
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$44[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$45[rsp], xmm0
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$20[rsp], 0
	jmp	SHORT $LN52@stbsp__rai
$LN50@stbsp__rai:
	mov	eax, DWORD PTR cn$20[rsp]
	inc	eax
	mov	DWORD PTR cn$20[rsp], eax
$LN52@stbsp__rai:
	cmp	DWORD PTR cn$20[rsp], 8
	jge	SHORT $LN51@stbsp__rai
	movsxd	rax, DWORD PTR cn$20[rsp]
	movsxd	rcx, DWORD PTR cn$20[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$34[rsp+rcx], al
	jmp	SHORT $LN50@stbsp__rai
$LN51@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$21[rsp], 0
	jmp	SHORT $LN55@stbsp__rai
$LN53@stbsp__rai:
	mov	eax, DWORD PTR cn$21[rsp]
	inc	eax
	mov	DWORD PTR cn$21[rsp], eax
$LN55@stbsp__rai:
	cmp	DWORD PTR cn$21[rsp], 8
	jge	SHORT $LN54@stbsp__rai
	movsxd	rax, DWORD PTR cn$21[rsp]
	movsxd	rcx, DWORD PTR cn$21[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR ahi$44[rsp+rcx], al
	jmp	SHORT $LN53@stbsp__rai
$LN54@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$44[rsp]
	movsd	QWORD PTR alo$58[rsp], xmm0
	mov	DWORD PTR cn$22[rsp], 0
	jmp	SHORT $LN58@stbsp__rai
$LN56@stbsp__rai:
	mov	eax, DWORD PTR cn$22[rsp]
	inc	eax
	mov	DWORD PTR cn$22[rsp], eax
$LN58@stbsp__rai:
	cmp	DWORD PTR cn$22[rsp], 8
	jge	SHORT $LN57@stbsp__rai
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$22[rsp]
	movsxd	rdx, DWORD PTR cn$22[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$34[rsp+rdx], al
	jmp	SHORT $LN56@stbsp__rai
$LN57@stbsp__rai:
	mov	rax, QWORD PTR bt$34[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$34[rsp], rax
	mov	DWORD PTR cn$23[rsp], 0
	jmp	SHORT $LN61@stbsp__rai
$LN59@stbsp__rai:
	mov	eax, DWORD PTR cn$23[rsp]
	inc	eax
	mov	DWORD PTR cn$23[rsp], eax
$LN61@stbsp__rai:
	cmp	DWORD PTR cn$23[rsp], 8
	jge	SHORT $LN60@stbsp__rai
	movsxd	rax, DWORD PTR cn$23[rsp]
	movsxd	rcx, DWORD PTR cn$23[rsp]
	movzx	eax, BYTE PTR bt$34[rsp+rax]
	mov	BYTE PTR bhi$45[rsp+rcx], al
	jmp	SHORT $LN59@stbsp__rai
$LN60@stbsp__rai:
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$45[rsp]
	movsd	QWORD PTR blo$59[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$44[rsp]
	mulsd	xmm0, QWORD PTR bhi$45[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$44[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR bhi$45[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$58[rsp]
	mulsd	xmm1, QWORD PTR blo$59[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1681
	movsxd	rax, DWORD PTR e$3[rsp]
	lea	rcx, OFFSET FLAT:stbsp__bot
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	mulsd	xmm0, QWORD PTR pl$[rsp]
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1682
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1683
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN84@stbsp__rai:
$LN82@stbsp__rai:
; Line 1686
	cmp	DWORD PTR et$1[rsp], 0
	je	$LN85@stbsp__rai
; Line 1687
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$60[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$60[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1688
	mov	eax, DWORD PTR et$1[rsp]
	dec	eax
	mov	DWORD PTR et$1[rsp], eax
; Line 1689
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$46[rsp], xmm0
	xorps	xmm0, xmm0
	movsd	QWORD PTR bhi$47[rsp], xmm0
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsd	QWORD PTR p2h$29[rsp], xmm0
	mov	DWORD PTR cn$24[rsp], 0
	jmp	SHORT $LN64@stbsp__rai
$LN62@stbsp__rai:
	mov	eax, DWORD PTR cn$24[rsp]
	inc	eax
	mov	DWORD PTR cn$24[rsp], eax
$LN64@stbsp__rai:
	cmp	DWORD PTR cn$24[rsp], 8
	jge	SHORT $LN63@stbsp__rai
	movsxd	rax, DWORD PTR cn$24[rsp]
	movsxd	rcx, DWORD PTR cn$24[rsp]
	movzx	eax, BYTE PTR ph$[rsp+rax]
	mov	BYTE PTR bt$35[rsp+rcx], al
	jmp	SHORT $LN62@stbsp__rai
$LN63@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$25[rsp], 0
	jmp	SHORT $LN67@stbsp__rai
$LN65@stbsp__rai:
	mov	eax, DWORD PTR cn$25[rsp]
	inc	eax
	mov	DWORD PTR cn$25[rsp], eax
$LN67@stbsp__rai:
	cmp	DWORD PTR cn$25[rsp], 8
	jge	SHORT $LN66@stbsp__rai
	movsxd	rax, DWORD PTR cn$25[rsp]
	movsxd	rcx, DWORD PTR cn$25[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR ahi$46[rsp+rcx], al
	jmp	SHORT $LN65@stbsp__rai
$LN66@stbsp__rai:
	movsd	xmm0, QWORD PTR ph$[rsp]
	subsd	xmm0, QWORD PTR ahi$46[rsp]
	movsd	QWORD PTR alo$61[rsp], xmm0
	mov	DWORD PTR cn$26[rsp], 0
	jmp	SHORT $LN70@stbsp__rai
$LN68@stbsp__rai:
	mov	eax, DWORD PTR cn$26[rsp]
	inc	eax
	mov	DWORD PTR cn$26[rsp], eax
$LN70@stbsp__rai:
	cmp	DWORD PTR cn$26[rsp], 8
	jge	SHORT $LN69@stbsp__rai
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	lea	rax, QWORD PTR [rcx+rax*8]
	movsxd	rcx, DWORD PTR cn$26[rsp]
	movsxd	rdx, DWORD PTR cn$26[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR bt$35[rsp+rdx], al
	jmp	SHORT $LN68@stbsp__rai
$LN69@stbsp__rai:
	mov	rax, QWORD PTR bt$35[rsp]
	and	rax, -134217728				; fffffffff8000000H
	mov	QWORD PTR bt$35[rsp], rax
	mov	DWORD PTR cn$27[rsp], 0
	jmp	SHORT $LN73@stbsp__rai
$LN71@stbsp__rai:
	mov	eax, DWORD PTR cn$27[rsp]
	inc	eax
	mov	DWORD PTR cn$27[rsp], eax
$LN73@stbsp__rai:
	cmp	DWORD PTR cn$27[rsp], 8
	jge	SHORT $LN72@stbsp__rai
	movsxd	rax, DWORD PTR cn$27[rsp]
	movsxd	rcx, DWORD PTR cn$27[rsp]
	movzx	eax, BYTE PTR bt$35[rsp+rax]
	mov	BYTE PTR bhi$47[rsp+rcx], al
	jmp	SHORT $LN71@stbsp__rai
$LN72@stbsp__rai:
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm0, QWORD PTR [rcx+rax*8]
	subsd	xmm0, QWORD PTR bhi$47[rsp]
	movsd	QWORD PTR blo$62[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$46[rsp]
	mulsd	xmm0, QWORD PTR bhi$47[rsp]
	subsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	xmm1, QWORD PTR ahi$46[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR bhi$47[rsp]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR alo$61[rsp]
	mulsd	xmm1, QWORD PTR blo$62[rsp]
	addsd	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1690
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__toperr
	movsd	xmm0, QWORD PTR ph$[rsp]
	mulsd	xmm0, QWORD PTR [rcx+rax*8]
	movsxd	rax, DWORD PTR et$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__top
	movsd	xmm1, QWORD PTR pl$[rsp]
	mulsd	xmm1, QWORD PTR [rcx+rax*8]
	addsd	xmm0, xmm1
	movsd	xmm1, QWORD PTR p2l$28[rsp]
	addsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR p2l$28[rsp], xmm0
; Line 1691
	movsd	xmm0, QWORD PTR p2h$29[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1692
	movsd	xmm0, QWORD PTR p2l$28[rsp]
	movsd	QWORD PTR pl$[rsp], xmm0
$LN85@stbsp__rai:
$LN79@stbsp__rai:
$LN75@stbsp__rai:
; Line 1696
	movsd	xmm0, QWORD PTR ph$[rsp]
	addsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR s$63[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	subsd	xmm0, QWORD PTR ph$[rsp]
	movsd	xmm1, QWORD PTR pl$[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	QWORD PTR pl$[rsp], xmm0
	movsd	xmm0, QWORD PTR s$63[rsp]
	movsd	QWORD PTR ph$[rsp], xmm0
; Line 1697
	mov	rax, QWORD PTR ohi$[rsp]
	movsd	xmm0, QWORD PTR ph$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1698
	mov	rax, QWORD PTR olo$[rsp]
	movsd	xmm0, QWORD PTR pl$[rsp]
	movsd	QWORD PTR [rax], xmm0
; Line 1699
	add	rsp, 424				; 000001a8H
	ret	0
stbsp__raise_to_power10 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
buf$ = 32
user$ = 40
len$ = 48
stbsp__count_clamp_callback PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1422
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1423
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1426
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1427
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
; Line 1428
	add	rsp, 24
	ret	0
stbsp__count_clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 0
s$1 = 8
d$2 = 16
tv93 = 24
se$3 = 32
buf$ = 64
user$ = 72
len$ = 80
stbsp__clamp_callback PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1394
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1395
	mov	rax, QWORD PTR user$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1396
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 1398
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN5@stbsp__cla
; Line 1399
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR len$[rsp], eax
$LN5@stbsp__cla:
; Line 1401
	cmp	DWORD PTR len$[rsp], 0
	je	$LN6@stbsp__cla
; Line 1402
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	QWORD PTR buf$[rsp], rax
	je	SHORT $LN7@stbsp__cla
; Line 1405
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR d$2[rsp], rax
; Line 1406
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR s$1[rsp], rax
; Line 1407
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR se$3[rsp], rax
$LN4@stbsp__cla:
; Line 1409
	mov	rax, QWORD PTR d$2[rsp]
	mov	rcx, QWORD PTR s$1[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR d$2[rsp]
	inc	rax
	mov	QWORD PTR d$2[rsp], rax
	mov	rax, QWORD PTR s$1[rsp]
	inc	rax
	mov	QWORD PTR s$1[rsp], rax
; Line 1410
	mov	rax, QWORD PTR se$3[rsp]
	cmp	QWORD PTR s$1[rsp], rax
	jb	SHORT $LN4@stbsp__cla
$LN7@stbsp__cla:
; Line 1412
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1413
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN6@stbsp__cla:
; Line 1416
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jg	SHORT $LN8@stbsp__cla
; Line 1417
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	jmp	SHORT $LN1@stbsp__cla
$LN8@stbsp__cla:
; Line 1418
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+8], 512			; 00000200H
	jl	SHORT $LN10@stbsp__cla
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv93[rsp], rax
	jmp	SHORT $LN11@stbsp__cla
$LN10@stbsp__cla:
	mov	rax, QWORD PTR c$[rsp]
	add	rax, 16
	mov	QWORD PTR tv93[rsp], rax
$LN11@stbsp__cla:
	mov	rax, QWORD PTR tv93[rsp]
$LN1@stbsp__cla:
; Line 1419
	add	rsp, 56					; 00000038H
	ret	0
stbsp__clamp_callback ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 0
sn$ = 8
s$ = 32
limit$ = 40
stbsp__strlen_limited PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 310
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 311
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR sn$[rsp], rax
$LN2@stbsp__str:
; Line 315
	mov	rax, QWORD PTR sn$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN9@stbsp__str
; Line 316
	jmp	SHORT $LN3@stbsp__str
$LN9@stbsp__str:
; Line 318
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN11@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN10@stbsp__str
$LN11@stbsp__str:
; Line 319
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	jmp	$LN1@stbsp__str
$LN10@stbsp__str:
; Line 321
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 322
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 323
	jmp	SHORT $LN2@stbsp__str
$LN3@stbsp__str:
$LN5@stbsp__str:
; Line 330
	cmp	DWORD PTR limit$[rsp], 4
	jb	SHORT $LN6@stbsp__str
; Line 331
	mov	rax, QWORD PTR sn$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$1[rsp], eax
; Line 333
	mov	eax, DWORD PTR v$1[rsp]
	sub	eax, 16843009				; 01010101H
	mov	ecx, DWORD PTR v$1[rsp]
	not	ecx
	and	eax, ecx
	and	eax, -2139062144			; 80808080H
	test	eax, eax
	je	SHORT $LN12@stbsp__str
; Line 334
	jmp	SHORT $LN6@stbsp__str
$LN12@stbsp__str:
; Line 336
	mov	rax, QWORD PTR sn$[rsp]
	add	rax, 4
	mov	QWORD PTR sn$[rsp], rax
; Line 337
	mov	eax, DWORD PTR limit$[rsp]
	sub	eax, 4
	mov	DWORD PTR limit$[rsp], eax
; Line 338
	jmp	SHORT $LN5@stbsp__str
$LN6@stbsp__str:
$LN7@stbsp__str:
; Line 341
	cmp	DWORD PTR limit$[rsp], 0
	je	SHORT $LN8@stbsp__str
	mov	rax, QWORD PTR sn$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN8@stbsp__str
; Line 342
	mov	rax, QWORD PTR sn$[rsp]
	inc	rax
	mov	QWORD PTR sn$[rsp], rax
; Line 343
	mov	eax, DWORD PTR limit$[rsp]
	dec	eax
	mov	DWORD PTR limit$[rsp], eax
; Line 344
	jmp	SHORT $LN7@stbsp__str
$LN8@stbsp__str:
; Line 346
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR sn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
$LN1@stbsp__str:
; Line 347
	add	rsp, 24
	ret	0
stbsp__strlen_limited ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$ = 8
sign$ = 16
stbsp__lead_sign PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 295
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
; Line 296
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 297
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN2@stbsp__lea
; Line 298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 299
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 45			; 0000002dH
	jmp	SHORT $LN3@stbsp__lea
$LN2@stbsp__lea:
; Line 300
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN4@stbsp__lea
; Line 301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 302
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 32			; 00000020H
	jmp	SHORT $LN5@stbsp__lea
$LN4@stbsp__lea:
; Line 303
	mov	eax, DWORD PTR fl$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN6@stbsp__lea
; Line 304
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 1
; Line 305
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR sign$[rsp]
	mov	BYTE PTR [rcx+rax], 43			; 0000002bH
$LN6@stbsp__lea:
$LN5@stbsp__lea:
$LN3@stbsp__lea:
; Line 307
	ret	0
stbsp__lead_sign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cn$1 = 0
b$ = 8
d$ = 16
bits$ = 48
expo$ = 56
value$ = 64
stbsp__real_to_parts PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1492
	movsd	QWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1494
	mov	QWORD PTR b$[rsp], 0
; Line 1497
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1499
	mov	DWORD PTR cn$1[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$1[rsp]
	inc	eax
	mov	DWORD PTR cn$1[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$1[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$1[rsp]
	movsxd	rcx, DWORD PTR cn$1[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR b$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1501
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR b$[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR bits$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1502
	mov	rax, QWORD PTR b$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	sub	rax, 1023				; 000003ffH
	mov	rcx, QWORD PTR expo$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1504
	mov	rax, QWORD PTR b$[rsp]
	shr	rax, 63					; 0000003fH
; Line 1505
	add	rsp, 40					; 00000028H
	ret	0
stbsp__real_to_parts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bits$ = 32
tens$ = 40
e$ = 44
dg$1 = 48
cn$2 = 52
expo$ = 56
n$3 = 60
n$4 = 64
ng$ = 68
tv131 = 72
tv157 = 76
d$ = 80
ph$5 = 88
ahi$6 = 96
v$7 = 104
tv82 = 112
vh$8 = 120
t$9 = 128
r$10 = 136
alo$11 = 144
pl$12 = 152
o$13 = 160
start$ = 192
len$ = 200
out$ = 208
decimal_pos$ = 216
value$ = 224
frac_digits$ = 232
stbsp__real_to_str PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1706
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
; Line 1708
	mov	QWORD PTR bits$[rsp], 0
; Line 1711
	movsd	xmm0, QWORD PTR value$[rsp]
	movsd	QWORD PTR d$[rsp], xmm0
; Line 1712
	mov	DWORD PTR cn$2[rsp], 0
	jmp	SHORT $LN4@stbsp__rea
$LN2@stbsp__rea:
	mov	eax, DWORD PTR cn$2[rsp]
	inc	eax
	mov	DWORD PTR cn$2[rsp], eax
$LN4@stbsp__rea:
	cmp	DWORD PTR cn$2[rsp], 8
	jge	SHORT $LN3@stbsp__rea
	movsxd	rax, DWORD PTR cn$2[rsp]
	movsxd	rcx, DWORD PTR cn$2[rsp]
	movzx	eax, BYTE PTR d$[rsp+rax]
	mov	BYTE PTR bits$[rsp+rcx], al
	jmp	SHORT $LN2@stbsp__rea
$LN3@stbsp__rea:
; Line 1713
	mov	rax, QWORD PTR bits$[rsp]
	sar	rax, 52					; 00000034H
	and	rax, 2047				; 000007ffH
	mov	DWORD PTR expo$[rsp], eax
; Line 1714
	mov	rax, QWORD PTR bits$[rsp]
	shr	rax, 63					; 0000003fH
	mov	DWORD PTR ng$[rsp], eax
; Line 1715
	cmp	DWORD PTR ng$[rsp], 0
	je	SHORT $LN21@stbsp__rea
; Line 1716
	movsd	xmm0, QWORD PTR d$[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	QWORD PTR d$[rsp], xmm0
$LN21@stbsp__rea:
; Line 1718
	cmp	DWORD PTR expo$[rsp], 2047		; 000007ffH
	jne	SHORT $LN22@stbsp__rea
; Line 1720
	mov	rax, 4503599627370495			; 000fffffffffffffH
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	je	SHORT $LN43@stbsp__rea
	lea	rax, OFFSET FLAT:$SG44685
	mov	QWORD PTR tv82[rsp], rax
	jmp	SHORT $LN44@stbsp__rea
$LN43@stbsp__rea:
	lea	rax, OFFSET FLAT:$SG44686
	mov	QWORD PTR tv82[rsp], rax
$LN44@stbsp__rea:
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR tv82[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1721
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 28672			; 00007000H
; Line 1722
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 3
; Line 1723
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN22@stbsp__rea:
; Line 1726
	cmp	DWORD PTR expo$[rsp], 0
	jne	$LN23@stbsp__rea
; Line 1728
	mov	rax, QWORD PTR bits$[rsp]
	shl	rax, 1
	test	rax, rax
	jne	SHORT $LN24@stbsp__rea
; Line 1730
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1731
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1732
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 48			; 00000030H
; Line 1733
	mov	rax, QWORD PTR len$[rsp]
	mov	DWORD PTR [rax], 1
; Line 1734
	mov	eax, DWORD PTR ng$[rsp]
	jmp	$LN1@stbsp__rea
$LN24@stbsp__rea:
; Line 1738
	mov	rax, 2251799813685248			; 0008000000000000H
	mov	QWORD PTR v$7[rsp], rax
$LN5@stbsp__rea:
; Line 1739
	mov	rax, QWORD PTR v$7[rsp]
	mov	rcx, QWORD PTR bits$[rsp]
	and	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jne	SHORT $LN6@stbsp__rea
; Line 1740
	mov	eax, DWORD PTR expo$[rsp]
	dec	eax
	mov	DWORD PTR expo$[rsp], eax
; Line 1741
	mov	rax, QWORD PTR v$7[rsp]
	sar	rax, 1
	mov	QWORD PTR v$7[rsp], rax
; Line 1742
	jmp	SHORT $LN5@stbsp__rea
$LN6@stbsp__rea:
$LN23@stbsp__rea:
; Line 1751
	mov	eax, DWORD PTR expo$[rsp]
	sub	eax, 1023				; 000003ffH
	mov	DWORD PTR tens$[rsp], eax
; Line 1752
	cmp	DWORD PTR tens$[rsp], 0
	jge	SHORT $LN45@stbsp__rea
	imul	eax, DWORD PTR tens$[rsp], 617		; 00000269H
	cdq
	and	edx, 2047				; 000007ffH
	add	eax, edx
	sar	eax, 11
	mov	DWORD PTR tv131[rsp], eax
	jmp	SHORT $LN46@stbsp__rea
$LN45@stbsp__rea:
	imul	eax, DWORD PTR tens$[rsp], 1233		; 000004d1H
	cdq
	and	edx, 4095				; 00000fffH
	add	eax, edx
	sar	eax, 12
	inc	eax
	mov	DWORD PTR tv131[rsp], eax
$LN46@stbsp__rea:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR tens$[rsp], eax
; Line 1755
	mov	eax, 18
	sub	eax, DWORD PTR tens$[rsp]
	mov	r9d, eax
	movsd	xmm2, QWORD PTR d$[rsp]
	lea	rdx, QWORD PTR pl$12[rsp]
	lea	rcx, QWORD PTR ph$5[rsp]
	call	stbsp__raise_to_power10
; Line 1758
	xorps	xmm0, xmm0
	movsd	QWORD PTR ahi$6[rsp], xmm0
	cvttsd2si rax, QWORD PTR ph$5[rsp]
	mov	QWORD PTR bits$[rsp], rax
	cvtsi2sd xmm0, QWORD PTR bits$[rsp]
	movsd	QWORD PTR vh$8[rsp], xmm0
	movsd	xmm0, QWORD PTR ph$5[rsp]
	subsd	xmm0, QWORD PTR vh$8[rsp]
	movsd	QWORD PTR ahi$6[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR ph$5[rsp]
	movsd	QWORD PTR t$9[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	subsd	xmm0, QWORD PTR t$9[rsp]
	movsd	xmm1, QWORD PTR ph$5[rsp]
	subsd	xmm1, xmm0
	movaps	xmm0, xmm1
	movsd	xmm1, QWORD PTR vh$8[rsp]
	addsd	xmm1, QWORD PTR t$9[rsp]
	subsd	xmm0, xmm1
	movsd	QWORD PTR alo$11[rsp], xmm0
	movsd	xmm0, QWORD PTR ahi$6[rsp]
	addsd	xmm0, QWORD PTR alo$11[rsp]
	addsd	xmm0, QWORD PTR pl$12[rsp]
	cvttsd2si rax, xmm0
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1761
	mov	rax, 1000000000000000000		; 0de0b6b3a7640000H
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN25@stbsp__rea
; Line 1762
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN25@stbsp__rea:
; Line 1766
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, -2147483648			; 80000000H
	test	eax, eax
	je	SHORT $LN47@stbsp__rea
	mov	eax, DWORD PTR frac_digits$[rsp]
	and	eax, 134217727				; 07ffffffH
	inc	eax
	mov	DWORD PTR tv157[rsp], eax
	jmp	SHORT $LN48@stbsp__rea
$LN47@stbsp__rea:
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv157[rsp], eax
$LN48@stbsp__rea:
	mov	eax, DWORD PTR tv157[rsp]
	mov	DWORD PTR frac_digits$[rsp], eax
; Line 1767
	cmp	DWORD PTR frac_digits$[rsp], 24
	jae	$LN26@stbsp__rea
; Line 1768
	mov	DWORD PTR dg$1[rsp], 1
; Line 1769
	mov	eax, 8
	imul	rax, rax, 9
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN27@stbsp__rea
; Line 1770
	mov	DWORD PTR dg$1[rsp], 10
$LN27@stbsp__rea:
$LN7@stbsp__rea:
; Line 1771
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN8@stbsp__rea
; Line 1772
	mov	eax, DWORD PTR dg$1[rsp]
	inc	eax
	mov	DWORD PTR dg$1[rsp], eax
; Line 1773
	cmp	DWORD PTR dg$1[rsp], 20
	jne	SHORT $LN28@stbsp__rea
; Line 1774
	jmp	$LN29@stbsp__rea
	jmp	$noround$49
$LN28@stbsp__rea:
; Line 1775
	jmp	SHORT $LN7@stbsp__rea
$LN8@stbsp__rea:
; Line 1776
	mov	eax, DWORD PTR dg$1[rsp]
	cmp	DWORD PTR frac_digits$[rsp], eax
	jae	$LN30@stbsp__rea
; Line 1779
	mov	eax, DWORD PTR frac_digits$[rsp]
	mov	ecx, DWORD PTR dg$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR e$[rsp], eax
; Line 1780
	cmp	DWORD PTR e$[rsp], 24
	jb	SHORT $LN31@stbsp__rea
; Line 1781
	jmp	SHORT $LN32@stbsp__rea
	jmp	SHORT $noround$49
$LN31@stbsp__rea:
; Line 1782
	movsxd	rax, DWORD PTR e$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR r$10[rsp], rax
; Line 1783
	xor	edx, edx
	mov	rax, QWORD PTR r$10[rsp]
	mov	ecx, 2
	div	rcx
	mov	rcx, QWORD PTR bits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1784
	mov	eax, DWORD PTR dg$1[rsp]
	lea	rcx, OFFSET FLAT:stbsp__powten
	mov	rax, QWORD PTR [rcx+rax*8]
	cmp	QWORD PTR bits$[rsp], rax
	jb	SHORT $LN33@stbsp__rea
; Line 1785
	mov	eax, DWORD PTR tens$[rsp]
	inc	eax
	mov	DWORD PTR tens$[rsp], eax
$LN33@stbsp__rea:
; Line 1786
	xor	edx, edx
	mov	rax, QWORD PTR bits$[rsp]
	div	QWORD PTR r$10[rsp]
	mov	QWORD PTR bits$[rsp], rax
$LN30@stbsp__rea:
$LN29@stbsp__rea:
$LN32@stbsp__rea:
$noround$49:
$LN26@stbsp__rea:
; Line 1792
	cmp	QWORD PTR bits$[rsp], 0
	je	SHORT $LN34@stbsp__rea
$LN9@stbsp__rea:
; Line 1795
	mov	eax, -1
	cmp	QWORD PTR bits$[rsp], rax
	jg	SHORT $LN35@stbsp__rea
; Line 1796
	jmp	SHORT $LN10@stbsp__rea
$LN35@stbsp__rea:
; Line 1797
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	rax, rdx
	test	rax, rax
	je	SHORT $LN36@stbsp__rea
; Line 1798
	jmp	SHORT $LN37@stbsp__rea
	jmp	SHORT $donez$50
$LN36@stbsp__rea:
; Line 1799
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 1000				; 000003e8H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1800
	jmp	SHORT $LN9@stbsp__rea
$LN10@stbsp__rea:
; Line 1801
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$4[rsp], eax
$LN12@stbsp__rea:
; Line 1802
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	eax, edx
	test	eax, eax
	jne	SHORT $LN13@stbsp__rea
; Line 1803
	xor	edx, edx
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, 1000				; 000003e8H
	div	ecx
	mov	DWORD PTR n$4[rsp], eax
	jmp	SHORT $LN12@stbsp__rea
$LN13@stbsp__rea:
; Line 1804
	mov	eax, DWORD PTR n$4[rsp]
	mov	QWORD PTR bits$[rsp], rax
$LN37@stbsp__rea:
$donez$50:
$LN34@stbsp__rea:
; Line 1809
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 64					; 00000040H
	mov	QWORD PTR out$[rsp], rax
; Line 1810
	mov	DWORD PTR e$[rsp], 0
$LN14@stbsp__rea:
; Line 1813
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
	mov	QWORD PTR o$13[rsp], rax
; Line 1815
	cmp	QWORD PTR bits$[rsp], 100000000		; 05f5e100H
	jl	SHORT $LN38@stbsp__rea
; Line 1816
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1817
	mov	rax, QWORD PTR bits$[rsp]
	cdq
	mov	ecx, 100000000				; 05f5e100H
	idiv	rcx
	mov	QWORD PTR bits$[rsp], rax
; Line 1818
	jmp	SHORT $LN39@stbsp__rea
$LN38@stbsp__rea:
; Line 1819
	mov	eax, DWORD PTR bits$[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1820
	mov	QWORD PTR bits$[rsp], 0
$LN39@stbsp__rea:
$LN17@stbsp__rea:
; Line 1822
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN18@stbsp__rea
; Line 1823
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 2
	mov	QWORD PTR out$[rsp], rax
; Line 1824
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR out$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1825
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1826
	mov	eax, DWORD PTR e$[rsp]
	add	eax, 2
	mov	DWORD PTR e$[rsp], eax
; Line 1827
	jmp	SHORT $LN17@stbsp__rea
$LN18@stbsp__rea:
; Line 1828
	cmp	QWORD PTR bits$[rsp], 0
	jne	SHORT $LN40@stbsp__rea
; Line 1829
	cmp	DWORD PTR e$[rsp], 0
	je	SHORT $LN41@stbsp__rea
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN41@stbsp__rea
; Line 1830
	mov	rax, QWORD PTR out$[rsp]
	inc	rax
	mov	QWORD PTR out$[rsp], rax
; Line 1831
	mov	eax, DWORD PTR e$[rsp]
	dec	eax
	mov	DWORD PTR e$[rsp], eax
$LN41@stbsp__rea:
; Line 1833
	jmp	SHORT $LN15@stbsp__rea
$LN40@stbsp__rea:
$LN19@stbsp__rea:
; Line 1835
	mov	rax, QWORD PTR o$13[rsp]
	cmp	QWORD PTR out$[rsp], rax
	je	SHORT $LN20@stbsp__rea
; Line 1836
	mov	rax, QWORD PTR out$[rsp]
	dec	rax
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1837
	mov	eax, DWORD PTR e$[rsp]
	inc	eax
	mov	DWORD PTR e$[rsp], eax
; Line 1838
	jmp	SHORT $LN19@stbsp__rea
$LN20@stbsp__rea:
; Line 1839
	jmp	$LN14@stbsp__rea
$LN15@stbsp__rea:
; Line 1841
	mov	rax, QWORD PTR decimal_pos$[rsp]
	mov	ecx, DWORD PTR tens$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1842
	mov	rax, QWORD PTR start$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1843
	mov	rax, QWORD PTR len$[rsp]
	mov	ecx, DWORD PTR e$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1844
	mov	eax, DWORD PTR ng$[rsp]
$LN1@stbsp__rea:
; Line 1845
	add	rsp, 184				; 000000b8H
	ret	0
stbsp__real_to_str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pcomma$ = 8
pperiod$ = 16
stbsp_set_separators PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 275
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
; Line 276
	movzx	eax, BYTE PTR pperiod$[rsp]
	mov	BYTE PTR stbsp__period, al
; Line 277
	movzx	eax, BYTE PTR pcomma$[rsp]
	mov	BYTE PTR stbsp__comma, al
; Line 278
	ret	0
stbsp_set_separators ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fl$1 = 48
pr$2 = 52
n$3 = 56
s$4 = 64
l$5 = 72
bf$ = 80
dp$6 = 88
idx$7 = 92
f$ = 96
cs$8 = 104
i$9 = 108
tlen$ = 112
fw$10 = 116
n64$11 = 120
i$12 = 128
sn$13 = 136
i$14 = 144
i$15 = 148
tz$16 = 152
i$17 = 156
i$18 = 160
i$19 = 164
fv$20 = 168
h$21 = 176
tv228 = 184
tv141 = 188
v$22 = 192
tv275 = 196
len$23 = 200
c$24 = 204
len$25 = 208
len$26 = 212
len$27 = 216
len$28 = 220
len$29 = 224
len$30 = 228
len$31 = 232
len$32 = 236
i$33 = 240
len$34 = 244
tv438 = 248
tv440 = 252
tv503 = 256
tv506 = 260
tv566 = 264
tv642 = 268
tv818 = 272
tv886 = 276
tv979 = 280
lg$35 = 284
lg$36 = 288
tv1058 = 292
lg$37 = 296
tv439 = 300
lg$38 = 304
lg$39 = 308
lg$40 = 312
lg$41 = 316
c$42 = 320
lg$43 = 324
tv176 = 328
tv208 = 332
tv286 = 336
tv303 = 340
tv345 = 344
o$44 = 352
divisor$45 = 360
tv1941 = 368
tv922 = 372
tv945 = 376
i64$46 = 384
tv1082 = 392
tv1081 = 396
tv1277 = 400
tv418 = 404
$T47 = 408
$T48 = 416
tv282 = 424
$T49 = 432
$T50 = 440
$T51 = 448
$T52 = 456
tv317 = 464
tv325 = 472
tv332 = 480
tv462 = 488
tv469 = 496
tv512 = 504
tv519 = 512
$T53 = 520
tv584 = 528
$T54 = 536
tv760 = 544
$T55 = 552
$T56 = 560
tv789 = 568
$T57 = 576
tv811 = 584
$T58 = 592
$T59 = 600
tv872 = 608
$T60 = 616
d$61 = 624
tv1581 = 632
lead$62 = 640
tail$63 = 648
num$64 = 656
__$ArrayPad$ = 1184
callback$ = 1216
user$ = 1224
buf$ = 1232
fmt$ = 1240
va$ = 1248
stbsp_vsprintfcb PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 350
$LN461:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1208				; 000004b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 355
	mov	DWORD PTR tlen$[rsp], 0
; Line 357
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
; Line 358
	mov	rax, QWORD PTR fmt$[rsp]
	mov	QWORD PTR f$[rsp], rax
$LN2@stbsp_vspr:
$LN5@stbsp_vspr:
$LN8@stbsp_vspr:
; Line 393
	mov	rax, QWORD PTR f$[rsp]
	and	rax, 3
	test	rax, rax
	je	$LN9@stbsp_vspr
$schk1$462:
; Line 395
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN126@stbsp_vspr
; Line 396
	jmp	$LN127@stbsp_vspr
	jmp	$scandd$463
$LN126@stbsp_vspr:
$schk2$464:
; Line 398
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN128@stbsp_vspr
; Line 399
	jmp	$LN129@stbsp_vspr
	jmp	$endfmt$465
$LN128@stbsp_vspr:
; Line 400
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN130@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$32[rsp], eax
	mov	eax, DWORD PTR len$32[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN131@stbsp_vspr
	mov	eax, DWORD PTR len$32[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$32[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN132@stbsp_vspr
	jmp	$LN133@stbsp_vspr
	jmp	$done$466
$LN132@stbsp_vspr:
$LN131@stbsp_vspr:
$LN130@stbsp_vspr:
; Line 401
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bf$[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 402
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 403
	jmp	$LN8@stbsp_vspr
$LN9@stbsp_vspr:
$LN10@stbsp_vspr:
; Line 409
	mov	rax, QWORD PTR f$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$22[rsp], eax
; Line 410
	mov	eax, DWORD PTR v$22[rsp]
	not	eax
	and	eax, -2139062144			; 80808080H
	mov	DWORD PTR c$42[rsp], eax
; Line 411
	mov	eax, DWORD PTR v$22[rsp]
	xor	eax, 623191333				; 25252525H
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$42[rsp]
	test	eax, eax
	je	SHORT $LN134@stbsp_vspr
; Line 412
	jmp	$schk1$462
$LN134@stbsp_vspr:
; Line 413
	mov	eax, DWORD PTR v$22[rsp]
	sub	eax, 16843009				; 01010101H
	and	eax, DWORD PTR c$42[rsp]
	test	eax, eax
	je	SHORT $LN135@stbsp_vspr
; Line 414
	jmp	$schk2$464
$LN135@stbsp_vspr:
; Line 415
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN136@stbsp_vspr
; Line 416
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 4
	jge	SHORT $LN137@stbsp_vspr
; Line 417
	jmp	$schk1$462
$LN137@stbsp_vspr:
$LN136@stbsp_vspr:
; Line 427
	mov	rax, QWORD PTR bf$[rsp]
	mov	ecx, DWORD PTR v$22[rsp]
	mov	DWORD PTR [rax], ecx
; Line 429
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 430
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 4
	mov	QWORD PTR f$[rsp], rax
; Line 431
	jmp	$LN10@stbsp_vspr
; Line 432
	jmp	$LN5@stbsp_vspr
$LN127@stbsp_vspr:
$scandd$463:
; Line 435
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 438
	mov	DWORD PTR fw$10[rsp], 0
; Line 439
	mov	DWORD PTR pr$2[rsp], -1
; Line 440
	mov	DWORD PTR fl$1[rsp], 0
; Line 441
	mov	DWORD PTR tz$16[rsp], 0
$LN13@stbsp_vspr:
; Line 445
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv141[rsp], eax
	mov	eax, DWORD PTR tv141[rsp]
	sub	eax, 32					; 00000020H
	mov	DWORD PTR tv141[rsp], eax
	cmp	DWORD PTR tv141[rsp], 63		; 0000003fH
	ja	$LN151@stbsp_vspr
	movsxd	rax, DWORD PTR tv141[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN459@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN460@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN138@stbsp_vspr:
; Line 448
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 1
	mov	DWORD PTR fl$1[rsp], eax
; Line 449
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 450
	jmp	SHORT $LN13@stbsp_vspr
$LN139@stbsp_vspr:
; Line 453
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 2
	mov	DWORD PTR fl$1[rsp], eax
; Line 454
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 455
	jmp	$LN13@stbsp_vspr
$LN140@stbsp_vspr:
; Line 458
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 4
	mov	DWORD PTR fl$1[rsp], eax
; Line 459
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 460
	jmp	$LN13@stbsp_vspr
$LN141@stbsp_vspr:
; Line 463
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
; Line 464
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 465
	jmp	$LN13@stbsp_vspr
$LN142@stbsp_vspr:
; Line 468
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR fl$1[rsp], eax
; Line 469
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 470
	jmp	$LN13@stbsp_vspr
$LN143@stbsp_vspr:
; Line 473
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN144@stbsp_vspr
; Line 474
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN146@stbsp_vspr
; Line 475
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 12
	mov	DWORD PTR fl$1[rsp], eax
; Line 476
	jmp	SHORT $LN147@stbsp_vspr
$LN146@stbsp_vspr:
; Line 477
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 11
	mov	DWORD PTR fl$1[rsp], eax
$LN147@stbsp_vspr:
; Line 479
	jmp	SHORT $LN145@stbsp_vspr
$LN144@stbsp_vspr:
; Line 480
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 8
	mov	DWORD PTR fl$1[rsp], eax
$LN145@stbsp_vspr:
; Line 482
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 483
	jmp	$LN13@stbsp_vspr
$LN148@stbsp_vspr:
; Line 486
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 10
	mov	DWORD PTR fl$1[rsp], eax
; Line 487
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 488
	jmp	$LN13@stbsp_vspr
$LN149@stbsp_vspr:
; Line 491
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 16
	mov	DWORD PTR fl$1[rsp], eax
; Line 492
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 493
	jmp	SHORT $LN150@stbsp_vspr
	jmp	SHORT $flags_done$467
$LN151@stbsp_vspr:
; Line 494
	jmp	SHORT $LN152@stbsp_vspr
	jmp	SHORT $flags_done$467
; Line 496
	jmp	$LN13@stbsp_vspr
$LN150@stbsp_vspr:
$LN152@stbsp_vspr:
$flags_done$467:
; Line 500
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN153@stbsp_vspr
; Line 501
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN369@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv176[rsp], eax
	jmp	SHORT $LN370@stbsp_vspr
$LN369@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv176[rsp], eax
$LN370@stbsp_vspr:
	mov	eax, DWORD PTR tv176[rsp]
	mov	DWORD PTR fw$10[rsp], eax
; Line 502
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 503
	jmp	SHORT $LN154@stbsp_vspr
$LN153@stbsp_vspr:
$LN18@stbsp_vspr:
; Line 504
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN19@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN19@stbsp_vspr
; Line 505
	imul	eax, DWORD PTR fw$10[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR fw$10[rsp], eax
; Line 506
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 507
	jmp	SHORT $LN18@stbsp_vspr
$LN19@stbsp_vspr:
$LN154@stbsp_vspr:
; Line 510
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 46					; 0000002eH
	jne	$LN155@stbsp_vspr
; Line 511
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 512
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 42					; 0000002aH
	jne	SHORT $LN156@stbsp_vspr
; Line 513
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN371@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv208[rsp], eax
	jmp	SHORT $LN372@stbsp_vspr
$LN371@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv208[rsp], eax
$LN372@stbsp_vspr:
	mov	eax, DWORD PTR tv208[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 514
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 515
	jmp	SHORT $LN157@stbsp_vspr
$LN156@stbsp_vspr:
; Line 516
	mov	DWORD PTR pr$2[rsp], 0
$LN20@stbsp_vspr:
; Line 517
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN21@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN21@stbsp_vspr
; Line 518
	imul	eax, DWORD PTR pr$2[rsp], 10
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR f$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR pr$2[rsp], eax
; Line 519
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 520
	jmp	SHORT $LN20@stbsp_vspr
$LN21@stbsp_vspr:
$LN157@stbsp_vspr:
$LN155@stbsp_vspr:
; Line 525
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv228[rsp], eax
	mov	eax, DWORD PTR tv228[rsp]
	sub	eax, 73					; 00000049H
	mov	DWORD PTR tv228[rsp], eax
	cmp	DWORD PTR tv228[rsp], 49		; 00000031H
	ja	$LN170@stbsp_vspr
	movsxd	rax, DWORD PTR tv228[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN457@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN458@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN158@stbsp_vspr:
; Line 528
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 9
	mov	DWORD PTR fl$1[rsp], eax
; Line 529
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 530
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 104				; 00000068H
	jne	SHORT $LN159@stbsp_vspr
; Line 531
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN159@stbsp_vspr:
; Line 532
	jmp	$LN22@stbsp_vspr
$LN160@stbsp_vspr:
; Line 535
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fl$1[rsp], eax
; Line 536
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 537
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 108				; 0000006cH
	jne	SHORT $LN161@stbsp_vspr
; Line 538
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 539
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN161@stbsp_vspr:
; Line 541
	jmp	$LN22@stbsp_vspr
$LN162@stbsp_vspr:
; Line 544
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 545
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 546
	jmp	$LN22@stbsp_vspr
$LN163@stbsp_vspr:
; Line 549
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 550
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 551
	jmp	$LN22@stbsp_vspr
$LN164@stbsp_vspr:
; Line 553
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 554
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 555
	jmp	$LN22@stbsp_vspr
$LN165@stbsp_vspr:
; Line 558
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN166@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 52					; 00000034H
	jne	SHORT $LN166@stbsp_vspr
; Line 559
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 560
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
	jmp	SHORT $LN167@stbsp_vspr
$LN166@stbsp_vspr:
; Line 561
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 51					; 00000033H
	jne	SHORT $LN168@stbsp_vspr
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 50					; 00000032H
	jne	SHORT $LN168@stbsp_vspr
; Line 562
	mov	rax, QWORD PTR f$[rsp]
	add	rax, 3
	mov	QWORD PTR f$[rsp], rax
; Line 563
	jmp	SHORT $LN169@stbsp_vspr
$LN168@stbsp_vspr:
; Line 564
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 565
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
$LN169@stbsp_vspr:
$LN167@stbsp_vspr:
$LN170@stbsp_vspr:
$LN22@stbsp_vspr:
; Line 572
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv275[rsp], eax
	mov	eax, DWORD PTR tv275[rsp]
	sub	eax, 65					; 00000041H
	mov	DWORD PTR tv275[rsp], eax
	cmp	DWORD PTR tv275[rsp], 55		; 00000037H
	ja	$LN362@stbsp_vspr
	movsxd	rax, DWORD PTR tv275[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN455@stbsp_vspr[rcx+rax]
	mov	eax, DWORD PTR $LN456@stbsp_vspr[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN171@stbsp_vspr:
; Line 589
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN373@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv282[rsp], rax
	jmp	SHORT $LN374@stbsp_vspr
$LN373@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv282[rsp], rax
$LN374@stbsp_vspr:
	mov	rax, QWORD PTR tv282[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 590
	cmp	QWORD PTR s$4[rsp], 0
	jne	SHORT $LN172@stbsp_vspr
; Line 591
	lea	rax, OFFSET FLAT:$SG44070
	mov	QWORD PTR s$4[rsp], rax
$LN172@stbsp_vspr:
; Line 594
	cmp	DWORD PTR pr$2[rsp], 0
	jl	SHORT $LN375@stbsp_vspr
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv286[rsp], eax
	jmp	SHORT $LN376@stbsp_vspr
$LN375@stbsp_vspr:
	mov	DWORD PTR tv286[rsp], -1		; ffffffffH
$LN376@stbsp_vspr:
	mov	edx, DWORD PTR tv286[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	call	stbsp__strlen_limited
	mov	DWORD PTR l$5[rsp], eax
; Line 595
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T49[rsp], rax
	cmp	QWORD PTR $T49[rsp], 8
	jae	SHORT $LN377@stbsp_vspr
	jmp	SHORT $LN378@stbsp_vspr
$LN377@stbsp_vspr:
	call	__report_rangecheckfailure
$LN378@stbsp_vspr:
	mov	rax, QWORD PTR $T49[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 596
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T50[rsp], rax
	cmp	QWORD PTR $T50[rsp], 8
	jae	SHORT $LN379@stbsp_vspr
	jmp	SHORT $LN380@stbsp_vspr
$LN379@stbsp_vspr:
	call	__report_rangecheckfailure
$LN380@stbsp_vspr:
	mov	rax, QWORD PTR $T50[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 597
	mov	DWORD PTR pr$2[rsp], 0
; Line 598
	mov	DWORD PTR dp$6[rsp], 0
; Line 599
	mov	DWORD PTR cs$8[rsp], 0
; Line 601
	jmp	$LN173@stbsp_vspr
	jmp	$scopy$468
$LN174@stbsp_vspr:
; Line 605
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 606
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN381@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv303[rsp], eax
	jmp	SHORT $LN382@stbsp_vspr
$LN381@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv303[rsp], eax
$LN382@stbsp_vspr:
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR tv303[rsp]
	mov	BYTE PTR [rax], cl
; Line 607
	mov	DWORD PTR l$5[rsp], 1
; Line 608
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T51[rsp], rax
	cmp	QWORD PTR $T51[rsp], 8
	jae	SHORT $LN383@stbsp_vspr
	jmp	SHORT $LN384@stbsp_vspr
$LN383@stbsp_vspr:
	call	__report_rangecheckfailure
$LN384@stbsp_vspr:
	mov	rax, QWORD PTR $T51[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 609
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T52[rsp], rax
	cmp	QWORD PTR $T52[rsp], 8
	jae	SHORT $LN385@stbsp_vspr
	jmp	SHORT $LN386@stbsp_vspr
$LN385@stbsp_vspr:
	call	__report_rangecheckfailure
$LN386@stbsp_vspr:
	mov	rax, QWORD PTR $T52[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 610
	mov	DWORD PTR pr$2[rsp], 0
; Line 611
	mov	DWORD PTR dp$6[rsp], 0
; Line 612
	mov	DWORD PTR cs$8[rsp], 0
; Line 613
	jmp	$LN175@stbsp_vspr
	jmp	$scopy$468
$LN176@stbsp_vspr:
; Line 617
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN387@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv317[rsp], rax
	jmp	SHORT $LN388@stbsp_vspr
$LN387@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv317[rsp], rax
$LN388@stbsp_vspr:
	mov	rax, QWORD PTR tv317[rsp]
	mov	QWORD PTR d$61[rsp], rax
; Line 618
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR d$61[rsp]
	mov	DWORD PTR [rcx], eax
; Line 619
	jmp	$LN24@stbsp_vspr
$LN177@stbsp_vspr:
$LN178@stbsp_vspr:
; Line 641
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 65					; 00000041H
	jne	SHORT $LN389@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv325[rsp], rax
	jmp	SHORT $LN390@stbsp_vspr
$LN389@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv325[rsp], rax
$LN390@stbsp_vspr:
	mov	rax, QWORD PTR tv325[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 642
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN391@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv332[rsp], xmm0
	jmp	SHORT $LN392@stbsp_vspr
$LN391@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv332[rsp], xmm0
$LN392@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv332[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 643
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN179@stbsp_vspr
; Line 644
	mov	DWORD PTR pr$2[rsp], 6
$LN179@stbsp_vspr:
; Line 646
	movsd	xmm2, QWORD PTR fv$20[rsp]
	lea	rdx, QWORD PTR dp$6[rsp]
	lea	rcx, QWORD PTR n64$11[rsp]
	call	stbsp__real_to_parts
	test	eax, eax
	je	SHORT $LN180@stbsp_vspr
; Line 647
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN180@stbsp_vspr:
; Line 649
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 651
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 653
	cmp	DWORD PTR dp$6[rsp], -1023		; fffffffffffffc01H
	jne	SHORT $LN181@stbsp_vspr
; Line 654
	cmp	QWORD PTR n64$11[rsp], 0
	je	SHORT $LN393@stbsp_vspr
	mov	DWORD PTR tv345[rsp], -1022		; fffffffffffffc02H
	jmp	SHORT $LN394@stbsp_vspr
$LN393@stbsp_vspr:
	mov	DWORD PTR tv345[rsp], 0
$LN394@stbsp_vspr:
	mov	eax, DWORD PTR tv345[rsp]
	mov	DWORD PTR dp$6[rsp], eax
	jmp	SHORT $LN182@stbsp_vspr
$LN181@stbsp_vspr:
; Line 656
	mov	rax, 4503599627370496			; 0010000000000000H
	mov	rcx, QWORD PTR n64$11[rsp]
	or	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN182@stbsp_vspr:
; Line 657
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 8
	mov	QWORD PTR n64$11[rsp], rax
; Line 658
	cmp	DWORD PTR pr$2[rsp], 15
	jge	SHORT $LN183@stbsp_vspr
; Line 659
	mov	eax, DWORD PTR pr$2[rsp]
	shl	eax, 2
	mov	rcx, 576460752303423488			; 0800000000000000H
	mov	QWORD PTR tv1581[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv1581[rsp]
	shr	rax, cl
	mov	rcx, QWORD PTR n64$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR n64$11[rsp], rax
$LN183@stbsp_vspr:
; Line 666
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	inc	eax
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 667
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	cdqe
	mov	BYTE PTR lead$62[rsp+rax], 120		; 00000078H
; Line 668
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	add	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
; Line 670
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 671
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 672
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN184@stbsp_vspr
; Line 673
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN184@stbsp_vspr:
; Line 674
	mov	rax, QWORD PTR s$4[rsp]
	mov	QWORD PTR sn$13[rsp], rax
; Line 677
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 678
	cmp	DWORD PTR n$3[rsp], 13
	jbe	SHORT $LN185@stbsp_vspr
; Line 679
	mov	DWORD PTR n$3[rsp], 13
$LN185@stbsp_vspr:
; Line 680
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN186@stbsp_vspr
; Line 681
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN186@stbsp_vspr:
; Line 682
	mov	DWORD PTR pr$2[rsp], 0
$LN26@stbsp_vspr:
; Line 683
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR tv418[rsp], eax
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
	cmp	DWORD PTR tv418[rsp], 0
	je	SHORT $LN27@stbsp_vspr
; Line 684
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, 60					; 0000003cH
	and	rax, 15
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 685
	mov	rax, QWORD PTR n64$11[rsp]
	shl	rax, 4
	mov	QWORD PTR n64$11[rsp], rax
; Line 686
	jmp	SHORT $LN26@stbsp_vspr
$LN27@stbsp_vspr:
; Line 689
	mov	eax, 1
	imul	rax, rax, 17
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 690
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN187@stbsp_vspr
; Line 691
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 692
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 693
	jmp	SHORT $LN188@stbsp_vspr
$LN187@stbsp_vspr:
; Line 694
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN188@stbsp_vspr:
; Line 695
	cmp	DWORD PTR dp$6[rsp], 1000		; 000003e8H
	jl	SHORT $LN399@stbsp_vspr
	mov	DWORD PTR tv440[rsp], 6
	jmp	SHORT $LN400@stbsp_vspr
$LN399@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN397@stbsp_vspr
	mov	DWORD PTR tv439[rsp], 5
	jmp	SHORT $LN398@stbsp_vspr
$LN397@stbsp_vspr:
	cmp	DWORD PTR dp$6[rsp], 10
	jl	SHORT $LN395@stbsp_vspr
	mov	DWORD PTR tv438[rsp], 4
	jmp	SHORT $LN396@stbsp_vspr
$LN395@stbsp_vspr:
	mov	DWORD PTR tv438[rsp], 3
$LN396@stbsp_vspr:
	mov	eax, DWORD PTR tv438[rsp]
	mov	DWORD PTR tv439[rsp], eax
$LN398@stbsp_vspr:
	mov	eax, DWORD PTR tv439[rsp]
	mov	DWORD PTR tv440[rsp], eax
$LN400@stbsp_vspr:
	mov	eax, DWORD PTR tv440[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 696
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN28@stbsp_vspr:
; Line 698
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 699
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN189@stbsp_vspr
; Line 700
	jmp	SHORT $LN29@stbsp_vspr
$LN189@stbsp_vspr:
; Line 701
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 702
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 703
	jmp	SHORT $LN28@stbsp_vspr
$LN29@stbsp_vspr:
; Line 705
	mov	rax, QWORD PTR sn$13[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dp$6[rsp], eax
; Line 706
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 707
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 708
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 709
	jmp	$LN190@stbsp_vspr
	jmp	$scopy$468
$LN191@stbsp_vspr:
$LN192@stbsp_vspr:
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN401@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv462[rsp], rax
	jmp	SHORT $LN402@stbsp_vspr
$LN401@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv462[rsp], rax
$LN402@stbsp_vspr:
	mov	rax, QWORD PTR tv462[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 714
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN403@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv469[rsp], xmm0
	jmp	SHORT $LN404@stbsp_vspr
$LN403@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv469[rsp], xmm0
$LN404@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv469[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 715
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN193@stbsp_vspr
; Line 716
	mov	DWORD PTR pr$2[rsp], 6
	jmp	SHORT $LN194@stbsp_vspr
$LN193@stbsp_vspr:
; Line 717
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN195@stbsp_vspr
; Line 718
	mov	DWORD PTR pr$2[rsp], 1
$LN195@stbsp_vspr:
$LN194@stbsp_vspr:
; Line 720
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN196@stbsp_vspr
; Line 721
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN196@stbsp_vspr:
; Line 724
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 725
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR l$5[rsp], eax
	jbe	SHORT $LN197@stbsp_vspr
; Line 726
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR l$5[rsp], eax
$LN197@stbsp_vspr:
$LN31@stbsp_vspr:
; Line 727
	cmp	DWORD PTR l$5[rsp], 1
	jbe	SHORT $LN32@stbsp_vspr
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN32@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR sn$13[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN32@stbsp_vspr
; Line 728
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
; Line 729
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 730
	jmp	SHORT $LN31@stbsp_vspr
$LN32@stbsp_vspr:
; Line 733
	cmp	DWORD PTR dp$6[rsp], -4
	jle	SHORT $LN199@stbsp_vspr
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jle	SHORT $LN198@stbsp_vspr
$LN199@stbsp_vspr:
; Line 734
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN200@stbsp_vspr
; Line 735
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
	jmp	SHORT $LN201@stbsp_vspr
$LN200@stbsp_vspr:
; Line 736
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN202@stbsp_vspr
; Line 737
	mov	eax, DWORD PTR pr$2[rsp]
	dec	eax
	mov	DWORD PTR pr$2[rsp], eax
$LN202@stbsp_vspr:
$LN201@stbsp_vspr:
; Line 738
	jmp	$LN203@stbsp_vspr
	jmp	$doexpfromg$469
$LN198@stbsp_vspr:
; Line 741
	cmp	DWORD PTR dp$6[rsp], 0
	jle	SHORT $LN204@stbsp_vspr
; Line 742
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jge	SHORT $LN405@stbsp_vspr
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv503[rsp], eax
	jmp	SHORT $LN406@stbsp_vspr
$LN405@stbsp_vspr:
	mov	DWORD PTR tv503[rsp], 0
$LN406@stbsp_vspr:
	mov	eax, DWORD PTR tv503[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 743
	jmp	SHORT $LN205@stbsp_vspr
$LN204@stbsp_vspr:
; Line 744
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jle	SHORT $LN407@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv506[rsp], eax
	jmp	SHORT $LN408@stbsp_vspr
$LN407@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv506[rsp], eax
$LN408@stbsp_vspr:
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	add	eax, DWORD PTR tv506[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN205@stbsp_vspr:
; Line 746
	jmp	$LN206@stbsp_vspr
	jmp	$dofloatfromg$470
$LN207@stbsp_vspr:
$LN208@stbsp_vspr:
; Line 750
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 69					; 00000045H
	jne	SHORT $LN409@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv512[rsp], rax
	jmp	SHORT $LN410@stbsp_vspr
$LN409@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv512[rsp], rax
$LN410@stbsp_vspr:
	mov	rax, QWORD PTR tv512[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 751
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN411@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv519[rsp], xmm0
	jmp	SHORT $LN412@stbsp_vspr
$LN411@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv519[rsp], xmm0
$LN412@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv519[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 752
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN209@stbsp_vspr
; Line 753
	mov	DWORD PTR pr$2[rsp], 6
$LN209@stbsp_vspr:
; Line 755
	mov	eax, DWORD PTR pr$2[rsp]
	bts	eax, 31
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN210@stbsp_vspr
; Line 756
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN210@stbsp_vspr:
$LN203@stbsp_vspr:
$doexpfromg$469:
; Line 758
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T53[rsp], rax
	cmp	QWORD PTR $T53[rsp], 8
	jae	SHORT $LN413@stbsp_vspr
	jmp	SHORT $LN414@stbsp_vspr
$LN413@stbsp_vspr:
	call	__report_rangecheckfailure
$LN414@stbsp_vspr:
	mov	rax, QWORD PTR $T53[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 759
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 760
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN211@stbsp_vspr
; Line 761
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 762
	mov	DWORD PTR cs$8[rsp], 0
; Line 763
	mov	DWORD PTR pr$2[rsp], 0
; Line 764
	jmp	$LN212@stbsp_vspr
	jmp	$scopy$468
$LN211@stbsp_vspr:
; Line 766
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 768
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 770
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN213@stbsp_vspr
; Line 771
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN213@stbsp_vspr:
; Line 774
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN214@stbsp_vspr
; Line 775
	mov	eax, DWORD PTR pr$2[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
$LN214@stbsp_vspr:
; Line 776
	mov	DWORD PTR n$3[rsp], 1
	jmp	SHORT $LN35@stbsp_vspr
$LN33@stbsp_vspr:
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
$LN35@stbsp_vspr:
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN34@stbsp_vspr
; Line 777
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	jmp	SHORT $LN33@stbsp_vspr
$LN34@stbsp_vspr:
; Line 779
	mov	eax, DWORD PTR l$5[rsp]
	dec	eax
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 780
	mov	DWORD PTR pr$2[rsp], 0
; Line 782
	mov	eax, 1
	imul	rax, rax, 14
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 783
	mov	eax, DWORD PTR dp$6[rsp]
	dec	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 784
	cmp	DWORD PTR dp$6[rsp], 0
	jge	SHORT $LN215@stbsp_vspr
; Line 785
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 45		; 0000002dH
; Line 786
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR dp$6[rsp], eax
; Line 787
	jmp	SHORT $LN216@stbsp_vspr
$LN215@stbsp_vspr:
; Line 788
	mov	eax, 1
	imul	rax, rax, 2
	mov	BYTE PTR tail$63[rsp+rax], 43		; 0000002bH
$LN216@stbsp_vspr:
; Line 792
	cmp	DWORD PTR dp$6[rsp], 100		; 00000064H
	jl	SHORT $LN415@stbsp_vspr
	mov	DWORD PTR tv566[rsp], 5
	jmp	SHORT $LN416@stbsp_vspr
$LN415@stbsp_vspr:
	mov	DWORD PTR tv566[rsp], 4
$LN416@stbsp_vspr:
	mov	eax, DWORD PTR tv566[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 794
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN36@stbsp_vspr:
; Line 796
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	eax, edx
	add	eax, 48					; 00000030H
	mov	ecx, DWORD PTR n$3[rsp]
	mov	BYTE PTR tail$63[rsp+rcx], al
; Line 797
	cmp	DWORD PTR n$3[rsp], 3
	ja	SHORT $LN217@stbsp_vspr
; Line 798
	jmp	SHORT $LN37@stbsp_vspr
$LN217@stbsp_vspr:
; Line 799
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 800
	mov	eax, DWORD PTR dp$6[rsp]
	cdq
	mov	ecx, 10
	idiv	ecx
	mov	DWORD PTR dp$6[rsp], eax
; Line 801
	jmp	SHORT $LN36@stbsp_vspr
$LN37@stbsp_vspr:
; Line 802
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 803
	jmp	$LN218@stbsp_vspr
	jmp	$flt_lead$471
$LN219@stbsp_vspr:
; Line 806
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN417@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	movsd	xmm0, QWORD PTR [rax]
	movsd	QWORD PTR tv584[rsp], xmm0
	jmp	SHORT $LN418@stbsp_vspr
$LN417@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	movsd	xmm0, QWORD PTR [rax-8]
	movsd	QWORD PTR tv584[rsp], xmm0
$LN418@stbsp_vspr:
	movsd	xmm0, QWORD PTR tv584[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
$doafloat$472:
; Line 809
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN220@stbsp_vspr
; Line 811
	movsd	xmm0, QWORD PTR __real@408f400000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
; Line 812
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN221@stbsp_vspr
; Line 813
	movsd	xmm0, QWORD PTR __real@4090000000000000
	movsd	QWORD PTR divisor$45[rsp], xmm0
$LN221@stbsp_vspr:
$LN39@stbsp_vspr:
; Line 814
	cmp	DWORD PTR fl$1[rsp], 67108864		; 04000000H
	jae	SHORT $LN40@stbsp_vspr
; Line 815
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	comisd	xmm0, QWORD PTR fv$20[rsp]
	jbe	SHORT $LN222@stbsp_vspr
	movsd	xmm0, QWORD PTR divisor$45[rsp]
	xorps	xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	movsd	xmm1, QWORD PTR fv$20[rsp]
	comisd	xmm1, xmm0
	jbe	SHORT $LN222@stbsp_vspr
; Line 816
	jmp	SHORT $LN40@stbsp_vspr
$LN222@stbsp_vspr:
; Line 817
	movsd	xmm0, QWORD PTR fv$20[rsp]
	divsd	xmm0, QWORD PTR divisor$45[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 818
	mov	eax, DWORD PTR fl$1[rsp]
	add	eax, 16777216				; 01000000H
	mov	DWORD PTR fl$1[rsp], eax
; Line 819
	jmp	SHORT $LN39@stbsp_vspr
$LN40@stbsp_vspr:
$LN220@stbsp_vspr:
; Line 821
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN223@stbsp_vspr
; Line 822
	mov	DWORD PTR pr$2[rsp], 6
$LN223@stbsp_vspr:
; Line 824
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	movsd	xmm0, QWORD PTR fv$20[rsp]
	movsd	QWORD PTR [rsp+32], xmm0
	lea	r9, QWORD PTR dp$6[rsp]
	lea	r8, QWORD PTR num$64[rsp]
	lea	rdx, QWORD PTR l$5[rsp]
	lea	rcx, QWORD PTR sn$13[rsp]
	call	stbsp__real_to_str
	test	eax, eax
	je	SHORT $LN224@stbsp_vspr
; Line 825
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN224@stbsp_vspr:
$LN206@stbsp_vspr:
$dofloatfromg$470:
; Line 827
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T54[rsp], rax
	cmp	QWORD PTR $T54[rsp], 8
	jae	SHORT $LN419@stbsp_vspr
	jmp	SHORT $LN420@stbsp_vspr
$LN419@stbsp_vspr:
	call	__report_rangecheckfailure
$LN420@stbsp_vspr:
	mov	rax, QWORD PTR $T54[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 828
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 829
	cmp	DWORD PTR dp$6[rsp], 28672		; 00007000H
	jne	SHORT $LN225@stbsp_vspr
; Line 830
	mov	rax, QWORD PTR sn$13[rsp]
	mov	QWORD PTR s$4[rsp], rax
; Line 831
	mov	DWORD PTR cs$8[rsp], 0
; Line 832
	mov	DWORD PTR pr$2[rsp], 0
; Line 833
	jmp	$LN226@stbsp_vspr
	jmp	$scopy$468
$LN225@stbsp_vspr:
; Line 835
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 838
	cmp	DWORD PTR dp$6[rsp], 0
	jg	$LN227@stbsp_vspr
; Line 841
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 842
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN229@stbsp_vspr
; Line 843
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN229@stbsp_vspr:
; Line 844
	mov	eax, DWORD PTR dp$6[rsp]
	neg	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 845
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jle	SHORT $LN230@stbsp_vspr
; Line 846
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN230@stbsp_vspr:
; Line 847
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN41@stbsp_vspr:
; Line 848
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN42@stbsp_vspr
; Line 849
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN231@stbsp_vspr
; Line 850
	jmp	SHORT $LN42@stbsp_vspr
$LN231@stbsp_vspr:
; Line 851
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 852
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 853
	jmp	SHORT $LN41@stbsp_vspr
$LN42@stbsp_vspr:
$LN43@stbsp_vspr:
; Line 854
	cmp	DWORD PTR i$12[rsp], 4
	jl	SHORT $LN44@stbsp_vspr
; Line 855
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 856
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 857
	mov	eax, DWORD PTR i$12[rsp]
	sub	eax, 4
	mov	DWORD PTR i$12[rsp], eax
; Line 858
	jmp	SHORT $LN43@stbsp_vspr
$LN44@stbsp_vspr:
$LN45@stbsp_vspr:
; Line 859
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN46@stbsp_vspr
; Line 860
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 861
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 862
	jmp	SHORT $LN45@stbsp_vspr
$LN46@stbsp_vspr:
; Line 863
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jle	SHORT $LN232@stbsp_vspr
; Line 864
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN232@stbsp_vspr:
; Line 865
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR i$12[rsp], eax
$LN47@stbsp_vspr:
; Line 866
	cmp	DWORD PTR i$12[rsp], 0
	je	SHORT $LN48@stbsp_vspr
; Line 867
	mov	rax, QWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 868
	mov	eax, DWORD PTR i$12[rsp]
	dec	eax
	mov	DWORD PTR i$12[rsp], eax
; Line 869
	jmp	SHORT $LN47@stbsp_vspr
$LN48@stbsp_vspr:
; Line 870
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
; Line 871
	mov	DWORD PTR cs$8[rsp], 50331649		; 03000001H
; Line 872
	jmp	$LN228@stbsp_vspr
$LN227@stbsp_vspr:
; Line 873
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN421@stbsp_vspr
	mov	eax, 600				; 00000258H
	sub	eax, DWORD PTR dp$6[rsp]
	xor	edx, edx
	mov	ecx, 3
	div	ecx
	mov	eax, edx
	mov	DWORD PTR tv642[rsp], eax
	jmp	SHORT $LN422@stbsp_vspr
$LN421@stbsp_vspr:
	mov	DWORD PTR tv642[rsp], 0
$LN422@stbsp_vspr:
	mov	eax, DWORD PTR tv642[rsp]
	mov	DWORD PTR cs$8[rsp], eax
; Line 874
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR dp$6[rsp], eax
	jb	$LN233@stbsp_vspr
; Line 876
	mov	DWORD PTR n$3[rsp], 0
$LN49@stbsp_vspr:
; Line 878
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN235@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN235@stbsp_vspr
; Line 879
	mov	DWORD PTR cs$8[rsp], 0
; Line 880
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 881
	jmp	SHORT $LN236@stbsp_vspr
$LN235@stbsp_vspr:
; Line 882
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 883
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 884
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN237@stbsp_vspr
; Line 885
	jmp	SHORT $LN50@stbsp_vspr
$LN237@stbsp_vspr:
$LN236@stbsp_vspr:
; Line 887
	jmp	SHORT $LN49@stbsp_vspr
$LN50@stbsp_vspr:
; Line 888
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	$LN238@stbsp_vspr
; Line 889
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR dp$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 890
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN239@stbsp_vspr
$LN52@stbsp_vspr:
; Line 891
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN53@stbsp_vspr
; Line 892
	mov	rax, QWORD PTR s$4[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN240@stbsp_vspr
; Line 893
	jmp	SHORT $LN53@stbsp_vspr
$LN240@stbsp_vspr:
; Line 894
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 895
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 896
	jmp	SHORT $LN52@stbsp_vspr
$LN53@stbsp_vspr:
$LN54@stbsp_vspr:
; Line 897
	cmp	DWORD PTR n$3[rsp], 4
	jb	SHORT $LN55@stbsp_vspr
; Line 898
	mov	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 899
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
; Line 900
	mov	eax, DWORD PTR n$3[rsp]
	sub	eax, 4
	mov	DWORD PTR n$3[rsp], eax
; Line 901
	jmp	SHORT $LN54@stbsp_vspr
$LN55@stbsp_vspr:
$LN239@stbsp_vspr:
$LN56@stbsp_vspr:
; Line 903
	cmp	DWORD PTR n$3[rsp], 0
	je	SHORT $LN57@stbsp_vspr
; Line 904
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN241@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN241@stbsp_vspr
; Line 905
	mov	DWORD PTR cs$8[rsp], 0
; Line 906
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 907
	jmp	SHORT $LN242@stbsp_vspr
$LN241@stbsp_vspr:
; Line 908
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 909
	mov	eax, DWORD PTR n$3[rsp]
	dec	eax
	mov	DWORD PTR n$3[rsp], eax
$LN242@stbsp_vspr:
; Line 911
	jmp	SHORT $LN56@stbsp_vspr
$LN57@stbsp_vspr:
$LN238@stbsp_vspr:
; Line 913
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 914
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN243@stbsp_vspr
; Line 915
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 916
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tz$16[rsp], eax
$LN243@stbsp_vspr:
; Line 918
	jmp	$LN234@stbsp_vspr
$LN233@stbsp_vspr:
; Line 920
	mov	DWORD PTR n$3[rsp], 0
$LN58@stbsp_vspr:
; Line 922
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN244@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	cmp	DWORD PTR cs$8[rsp], 4
	jne	SHORT $LN244@stbsp_vspr
; Line 923
	mov	DWORD PTR cs$8[rsp], 0
; Line 924
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 925
	jmp	SHORT $LN245@stbsp_vspr
$LN244@stbsp_vspr:
; Line 926
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 927
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 928
	mov	eax, DWORD PTR dp$6[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jb	SHORT $LN246@stbsp_vspr
; Line 929
	jmp	SHORT $LN59@stbsp_vspr
$LN246@stbsp_vspr:
$LN245@stbsp_vspr:
; Line 931
	jmp	SHORT $LN58@stbsp_vspr
$LN59@stbsp_vspr:
; Line 932
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 933
	cmp	DWORD PTR pr$2[rsp], 0
	je	SHORT $LN247@stbsp_vspr
; Line 934
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__period
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN247@stbsp_vspr:
; Line 935
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pr$2[rsp]
	jbe	SHORT $LN248@stbsp_vspr
; Line 936
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR l$5[rsp], eax
$LN248@stbsp_vspr:
$LN61@stbsp_vspr:
; Line 937
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR n$3[rsp], eax
	jae	SHORT $LN62@stbsp_vspr
; Line 938
	mov	eax, DWORD PTR n$3[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR sn$13[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 939
	mov	eax, DWORD PTR n$3[rsp]
	inc	eax
	mov	DWORD PTR n$3[rsp], eax
; Line 940
	jmp	SHORT $LN61@stbsp_vspr
$LN62@stbsp_vspr:
; Line 941
	mov	eax, DWORD PTR dp$6[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN234@stbsp_vspr:
$LN228@stbsp_vspr:
; Line 944
	mov	DWORD PTR pr$2[rsp], 0
; Line 947
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	$LN249@stbsp_vspr
; Line 949
	mov	BYTE PTR idx$7[rsp], 1
; Line 950
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1024				; 00000400H
	test	eax, eax
	je	SHORT $LN250@stbsp_vspr
; Line 951
	mov	BYTE PTR idx$7[rsp], 0
$LN250@stbsp_vspr:
; Line 952
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
; Line 953
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR tail$63[rsp+rax], 32		; 00000020H
; Line 955
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	test	eax, eax
	je	$LN251@stbsp_vspr
; Line 956
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN252@stbsp_vspr
; Line 957
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG44152
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
	jmp	SHORT $LN253@stbsp_vspr
$LN252@stbsp_vspr:
; Line 959
	mov	eax, DWORD PTR fl$1[rsp]
	shr	eax, 24
	mov	eax, eax
	lea	rcx, OFFSET FLAT:$SG44153
	movsx	edx, BYTE PTR idx$7[rsp]
	inc	edx
	movsxd	rdx, edx
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tail$63[rsp+rdx], al
$LN253@stbsp_vspr:
; Line 960
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
; Line 962
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 2048				; 00000800H
	test	eax, eax
	je	SHORT $LN254@stbsp_vspr
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 4096				; 00001000H
	test	eax, eax
	jne	SHORT $LN254@stbsp_vspr
; Line 963
	movsx	eax, BYTE PTR idx$7[rsp]
	inc	eax
	cdqe
	mov	BYTE PTR tail$63[rsp+rax], 105		; 00000069H
; Line 964
	movzx	eax, BYTE PTR idx$7[rsp]
	inc	al
	mov	BYTE PTR idx$7[rsp], al
$LN254@stbsp_vspr:
; Line 966
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR idx$7[rsp]
	mov	BYTE PTR tail$63[rsp+rax], cl
$LN251@stbsp_vspr:
$LN249@stbsp_vspr:
$LN218@stbsp_vspr:
$flt_lead$471:
; Line 973
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	rcx, QWORD PTR s$4[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$5[rsp], eax
; Line 974
	lea	rax, QWORD PTR num$64[rsp+64]
	mov	QWORD PTR s$4[rsp], rax
; Line 975
	jmp	$LN255@stbsp_vspr
	jmp	$scopy$468
$LN256@stbsp_vspr:
$LN257@stbsp_vspr:
; Line 980
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN423@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv760[rsp], rax
	jmp	SHORT $LN424@stbsp_vspr
$LN423@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv760[rsp], rax
$LN424@stbsp_vspr:
	mov	rax, QWORD PTR tv760[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 981
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T55[rsp], rax
	cmp	QWORD PTR $T55[rsp], 8
	jae	SHORT $LN425@stbsp_vspr
	jmp	SHORT $LN426@stbsp_vspr
$LN425@stbsp_vspr:
	call	__report_rangecheckfailure
$LN426@stbsp_vspr:
	mov	rax, QWORD PTR $T55[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 982
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN258@stbsp_vspr
; Line 983
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 984
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 985
	mov	eax, 1
	imul	rax, rax, 11
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN258@stbsp_vspr:
; Line 987
	mov	DWORD PTR l$5[rsp], 384			; 00000180H
; Line 988
	jmp	$LN259@stbsp_vspr
	jmp	$radixnum$473
$LN260@stbsp_vspr:
; Line 991
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR h$21[rsp], rax
; Line 992
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T56[rsp], rax
	cmp	QWORD PTR $T56[rsp], 8
	jae	SHORT $LN427@stbsp_vspr
	jmp	SHORT $LN428@stbsp_vspr
$LN427@stbsp_vspr:
	call	__report_rangecheckfailure
$LN428@stbsp_vspr:
	mov	rax, QWORD PTR $T56[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 993
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN261@stbsp_vspr
; Line 994
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 1
; Line 995
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
$LN261@stbsp_vspr:
; Line 997
	mov	DWORD PTR l$5[rsp], 816			; 00000330H
; Line 998
	jmp	$LN262@stbsp_vspr
	jmp	$radixnum$473
$LN263@stbsp_vspr:
; Line 1001
	mov	eax, DWORD PTR fl$1[rsp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR fl$1[rsp], eax
; Line 1002
	mov	DWORD PTR pr$2[rsp], 16
; Line 1003
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -17				; ffffffefH
	mov	DWORD PTR fl$1[rsp], eax
$LN264@stbsp_vspr:
$LN265@stbsp_vspr:
; Line 1008
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 88					; 00000058H
	jne	SHORT $LN429@stbsp_vspr
	lea	rax, OFFSET FLAT:?hexu@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv789[rsp], rax
	jmp	SHORT $LN430@stbsp_vspr
$LN429@stbsp_vspr:
	lea	rax, OFFSET FLAT:?hex@?1??stbsp_vsprintfcb@@9@4PADA
	mov	QWORD PTR tv789[rsp], rax
$LN430@stbsp_vspr:
	mov	rax, QWORD PTR tv789[rsp]
	mov	QWORD PTR h$21[rsp], rax
; Line 1009
	mov	DWORD PTR l$5[rsp], 1088		; 00000440H
; Line 1010
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T57[rsp], rax
	cmp	QWORD PTR $T57[rsp], 8
	jae	SHORT $LN431@stbsp_vspr
	jmp	SHORT $LN432@stbsp_vspr
$LN431@stbsp_vspr:
	call	__report_rangecheckfailure
$LN432@stbsp_vspr:
	mov	rax, QWORD PTR $T57[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1011
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN266@stbsp_vspr
; Line 1012
	mov	eax, 1
	imul	rax, rax, 0
	mov	BYTE PTR lead$62[rsp+rax], 2
; Line 1013
	mov	eax, 1
	imul	rax, rax, 1
	mov	BYTE PTR lead$62[rsp+rax], 48		; 00000030H
; Line 1014
	mov	eax, 1
	imul	rax, rax, 16
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN266@stbsp_vspr:
$LN259@stbsp_vspr:
$LN262@stbsp_vspr:
$radixnum$473:
; Line 1018
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN267@stbsp_vspr
; Line 1019
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN433@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv811[rsp], rax
	jmp	SHORT $LN434@stbsp_vspr
$LN433@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv811[rsp], rax
$LN434@stbsp_vspr:
	mov	rax, QWORD PTR tv811[rsp]
	mov	QWORD PTR n64$11[rsp], rax
	jmp	SHORT $LN268@stbsp_vspr
$LN267@stbsp_vspr:
; Line 1021
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN435@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv818[rsp], eax
	jmp	SHORT $LN436@stbsp_vspr
$LN435@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv818[rsp], eax
$LN436@stbsp_vspr:
	mov	eax, DWORD PTR tv818[rsp]
	mov	QWORD PTR n64$11[rsp], rax
$LN268@stbsp_vspr:
; Line 1023
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1024
	mov	DWORD PTR dp$6[rsp], 0
; Line 1026
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T58[rsp], rax
	cmp	QWORD PTR $T58[rsp], 8
	jae	SHORT $LN437@stbsp_vspr
	jmp	SHORT $LN438@stbsp_vspr
$LN437@stbsp_vspr:
	call	__report_rangecheckfailure
$LN438@stbsp_vspr:
	mov	rax, QWORD PTR $T58[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1027
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN269@stbsp_vspr
; Line 1028
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T59[rsp], rax
	cmp	QWORD PTR $T59[rsp], 8
	jae	SHORT $LN439@stbsp_vspr
	jmp	SHORT $LN440@stbsp_vspr
$LN439@stbsp_vspr:
	call	__report_rangecheckfailure
$LN440@stbsp_vspr:
	mov	rax, QWORD PTR $T59[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1029
	cmp	DWORD PTR pr$2[rsp], 0
	jne	SHORT $LN270@stbsp_vspr
; Line 1030
	mov	DWORD PTR l$5[rsp], 0
; Line 1031
	mov	DWORD PTR cs$8[rsp], 0
; Line 1032
	jmp	$LN271@stbsp_vspr
	jmp	$scopy$468
$LN270@stbsp_vspr:
$LN269@stbsp_vspr:
$LN63@stbsp_vspr:
; Line 1037
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	ecx, 1
	mov	DWORD PTR tv1941[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1941[rsp]
	shl	eax, cl
	dec	eax
	cdqe
	mov	rcx, QWORD PTR n64$11[rsp]
	and	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR h$21[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1038
	mov	eax, DWORD PTR l$5[rsp]
	shr	eax, 8
	mov	eax, eax
	movzx	ecx, al
	mov	rax, QWORD PTR n64$11[rsp]
	shr	rax, cl
	mov	QWORD PTR n64$11[rsp], rax
; Line 1039
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN272@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	cmp	eax, DWORD PTR pr$2[rsp]
	jl	SHORT $LN272@stbsp_vspr
; Line 1040
	jmp	SHORT $LN64@stbsp_vspr
$LN272@stbsp_vspr:
; Line 1041
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN273@stbsp_vspr
; Line 1042
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
; Line 1043
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, 15
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	cmp	eax, ecx
	jne	SHORT $LN274@stbsp_vspr
; Line 1044
	mov	eax, DWORD PTR l$5[rsp]
	and	eax, -16				; fffffff0H
	mov	DWORD PTR l$5[rsp], eax
; Line 1045
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
$LN274@stbsp_vspr:
$LN273@stbsp_vspr:
; Line 1048
	jmp	$LN63@stbsp_vspr
$LN64@stbsp_vspr:
; Line 1050
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR l$5[rsp]
	shr	ecx, 4
	and	ecx, 15
	shl	ecx, 24
	add	eax, ecx
	mov	DWORD PTR cs$8[rsp], eax
; Line 1052
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1054
	jmp	$LN275@stbsp_vspr
	jmp	$scopy$468
$LN276@stbsp_vspr:
$LN277@stbsp_vspr:
$LN278@stbsp_vspr:
; Line 1060
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	$LN279@stbsp_vspr
; Line 1061
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN441@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv872[rsp], rax
	jmp	SHORT $LN442@stbsp_vspr
$LN441@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv872[rsp], rax
$LN442@stbsp_vspr:
	mov	rax, QWORD PTR tv872[rsp]
	mov	QWORD PTR i64$46[rsp], rax
; Line 1062
	mov	rax, QWORD PTR i64$46[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1063
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN281@stbsp_vspr
	cmp	QWORD PTR i64$46[rsp], 0
	jge	SHORT $LN281@stbsp_vspr
; Line 1064
	mov	rax, QWORD PTR i64$46[rsp]
	neg	rax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1065
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN281@stbsp_vspr:
; Line 1067
	jmp	$LN280@stbsp_vspr
$LN279@stbsp_vspr:
; Line 1068
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN443@stbsp_vspr
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv886[rsp], eax
	jmp	SHORT $LN444@stbsp_vspr
$LN443@stbsp_vspr:
	mov	rax, QWORD PTR va$[rsp]
	add	rax, 8
	mov	QWORD PTR va$[rsp], rax
	mov	rax, QWORD PTR va$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv886[rsp], eax
$LN444@stbsp_vspr:
	mov	eax, DWORD PTR tv886[rsp]
	mov	DWORD PTR i$33[rsp], eax
; Line 1069
	mov	eax, DWORD PTR i$33[rsp]
	mov	QWORD PTR n64$11[rsp], rax
; Line 1070
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR f$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 117				; 00000075H
	je	SHORT $LN282@stbsp_vspr
	cmp	DWORD PTR i$33[rsp], 0
	jge	SHORT $LN282@stbsp_vspr
; Line 1071
	mov	eax, DWORD PTR i$33[rsp]
	neg	eax
	mov	eax, eax
	mov	QWORD PTR n64$11[rsp], rax
; Line 1072
	mov	eax, DWORD PTR fl$1[rsp]
	bts	eax, 7
	mov	DWORD PTR fl$1[rsp], eax
$LN282@stbsp_vspr:
$LN280@stbsp_vspr:
; Line 1077
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 256				; 00000100H
	test	eax, eax
	je	SHORT $LN283@stbsp_vspr
; Line 1078
	cmp	QWORD PTR n64$11[rsp], 1024		; 00000400H
	jae	SHORT $LN284@stbsp_vspr
; Line 1079
	mov	DWORD PTR pr$2[rsp], 0
	jmp	SHORT $LN285@stbsp_vspr
$LN284@stbsp_vspr:
; Line 1080
	cmp	DWORD PTR pr$2[rsp], -1
	jne	SHORT $LN286@stbsp_vspr
; Line 1081
	mov	DWORD PTR pr$2[rsp], 1
$LN286@stbsp_vspr:
$LN285@stbsp_vspr:
; Line 1082
	cvtsi2sd xmm0, QWORD PTR n64$11[rsp]
	movsd	QWORD PTR fv$20[rsp], xmm0
; Line 1083
	jmp	$doafloat$472
$LN283@stbsp_vspr:
; Line 1088
	lea	rax, QWORD PTR num$64[rsp+512]
	mov	QWORD PTR s$4[rsp], rax
; Line 1089
	mov	DWORD PTR l$5[rsp], 0
$LN66@stbsp_vspr:
; Line 1093
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 8
	mov	QWORD PTR o$44[rsp], rax
; Line 1094
	cmp	QWORD PTR n64$11[rsp], 100000000	; 05f5e100H
	jb	SHORT $LN287@stbsp_vspr
; Line 1095
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	rax, rdx
	mov	DWORD PTR n$3[rsp], eax
; Line 1096
	xor	edx, edx
	mov	rax, QWORD PTR n64$11[rsp]
	mov	ecx, 100000000				; 05f5e100H
	div	rcx
	mov	QWORD PTR n64$11[rsp], rax
; Line 1097
	jmp	SHORT $LN288@stbsp_vspr
$LN287@stbsp_vspr:
; Line 1098
	mov	eax, DWORD PTR n64$11[rsp]
	mov	DWORD PTR n$3[rsp], eax
; Line 1099
	mov	QWORD PTR n64$11[rsp], 0
$LN288@stbsp_vspr:
; Line 1101
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN289@stbsp_vspr
$LN71@stbsp_vspr:
; Line 1103
	mov	rax, QWORD PTR s$4[rsp]
	sub	rax, 2
	mov	QWORD PTR s$4[rsp], rax
; Line 1104
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	eax, edx
	shl	eax, 1
	mov	eax, eax
	lea	rcx, OFFSET FLAT:stbsp__digitpair+2
	mov	rdx, QWORD PTR s$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	WORD PTR [rdx], ax
; Line 1105
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 100				; 00000064H
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1106
	cmp	DWORD PTR n$3[rsp], 0
	jne	SHORT $LN71@stbsp_vspr
$LN289@stbsp_vspr:
$LN72@stbsp_vspr:
; Line 1108
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN73@stbsp_vspr
; Line 1109
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN290@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv922[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv922[rsp], 3
	jne	SHORT $LN290@stbsp_vspr
; Line 1110
	mov	DWORD PTR l$5[rsp], 0
; Line 1111
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1112
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1113
	jmp	SHORT $LN291@stbsp_vspr
$LN290@stbsp_vspr:
; Line 1114
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	eax, edx
	movsx	eax, al
	add	eax, 48					; 00000030H
	mov	rcx, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rcx], al
; Line 1115
	xor	edx, edx
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, 10
	div	ecx
	mov	DWORD PTR n$3[rsp], eax
$LN291@stbsp_vspr:
; Line 1117
	jmp	$LN72@stbsp_vspr
$LN73@stbsp_vspr:
; Line 1118
	cmp	QWORD PTR n64$11[rsp], 0
	jne	SHORT $LN292@stbsp_vspr
; Line 1119
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 48					; 00000030H
	jne	SHORT $LN293@stbsp_vspr
	lea	rax, QWORD PTR num$64[rsp+512]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN293@stbsp_vspr
; Line 1120
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
$LN293@stbsp_vspr:
; Line 1121
	jmp	$LN67@stbsp_vspr
$LN292@stbsp_vspr:
$LN74@stbsp_vspr:
; Line 1123
	mov	rax, QWORD PTR o$44[rsp]
	cmp	QWORD PTR s$4[rsp], rax
	je	SHORT $LN75@stbsp_vspr
; Line 1124
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN294@stbsp_vspr
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR tv945[rsp], eax
	mov	eax, DWORD PTR l$5[rsp]
	inc	eax
	mov	DWORD PTR l$5[rsp], eax
	cmp	DWORD PTR tv945[rsp], 3
	jne	SHORT $LN294@stbsp_vspr
; Line 1125
	mov	DWORD PTR l$5[rsp], 0
; Line 1126
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
; Line 1127
	mov	rax, QWORD PTR o$44[rsp]
	dec	rax
	mov	QWORD PTR o$44[rsp], rax
; Line 1128
	jmp	SHORT $LN295@stbsp_vspr
$LN294@stbsp_vspr:
; Line 1129
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
$LN295@stbsp_vspr:
; Line 1130
	jmp	$LN74@stbsp_vspr
$LN75@stbsp_vspr:
; Line 1131
	jmp	$LN66@stbsp_vspr
$LN67@stbsp_vspr:
; Line 1133
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T60[rsp], rax
	cmp	QWORD PTR $T60[rsp], 8
	jae	SHORT $LN445@stbsp_vspr
	jmp	SHORT $LN446@stbsp_vspr
$LN445@stbsp_vspr:
	call	__report_rangecheckfailure
$LN446@stbsp_vspr:
	mov	rax, QWORD PTR $T60[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1134
	lea	rdx, QWORD PTR lead$62[rsp]
	mov	ecx, DWORD PTR fl$1[rsp]
	call	stbsp__lead_sign
; Line 1137
	lea	rax, QWORD PTR num$64[rsp+512]
	sub	rax, QWORD PTR s$4[rsp]
	mov	DWORD PTR l$5[rsp], eax
; Line 1138
	cmp	DWORD PTR l$5[rsp], 0
	jne	SHORT $LN296@stbsp_vspr
; Line 1139
	mov	rax, QWORD PTR s$4[rsp]
	dec	rax
	mov	QWORD PTR s$4[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
; Line 1140
	mov	DWORD PTR l$5[rsp], 1
$LN296@stbsp_vspr:
; Line 1142
	mov	eax, DWORD PTR l$5[rsp]
	add	eax, 50331648				; 03000000H
	mov	DWORD PTR cs$8[rsp], eax
; Line 1143
	cmp	DWORD PTR pr$2[rsp], 0
	jge	SHORT $LN297@stbsp_vspr
; Line 1144
	mov	DWORD PTR pr$2[rsp], 0
$LN297@stbsp_vspr:
$LN173@stbsp_vspr:
$LN175@stbsp_vspr:
$LN190@stbsp_vspr:
$LN212@stbsp_vspr:
$LN226@stbsp_vspr:
$LN255@stbsp_vspr:
$LN271@stbsp_vspr:
$LN275@stbsp_vspr:
$scopy$468:
; Line 1148
	mov	eax, DWORD PTR l$5[rsp]
	cmp	DWORD PTR pr$2[rsp], eax
	jge	SHORT $LN298@stbsp_vspr
; Line 1149
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR pr$2[rsp], eax
$LN298@stbsp_vspr:
; Line 1150
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsx	ecx, BYTE PTR tail$63[rsp+rcx]
	mov	edx, DWORD PTR tz$16[rsp]
	add	edx, eax
	mov	eax, edx
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
; Line 1151
	mov	eax, DWORD PTR n$3[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jge	SHORT $LN299@stbsp_vspr
; Line 1152
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR fw$10[rsp], eax
$LN299@stbsp_vspr:
; Line 1153
	mov	eax, DWORD PTR n$3[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
; Line 1154
	mov	eax, DWORD PTR l$5[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1157
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN300@stbsp_vspr
; Line 1158
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN301@stbsp_vspr
; Line 1160
	mov	eax, DWORD PTR pr$2[rsp]
	cmp	DWORD PTR fw$10[rsp], eax
	jle	SHORT $LN447@stbsp_vspr
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR tv979[rsp], eax
	jmp	SHORT $LN448@stbsp_vspr
$LN447@stbsp_vspr:
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR tv979[rsp], eax
$LN448@stbsp_vspr:
	mov	eax, DWORD PTR tv979[rsp]
	mov	DWORD PTR pr$2[rsp], eax
; Line 1161
	mov	DWORD PTR fw$10[rsp], 0
; Line 1162
	jmp	SHORT $LN302@stbsp_vspr
$LN301@stbsp_vspr:
; Line 1163
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, -65				; ffffffbfH
	mov	DWORD PTR fl$1[rsp], eax
$LN302@stbsp_vspr:
$LN300@stbsp_vspr:
; Line 1168
	mov	eax, DWORD PTR pr$2[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	$LN303@stbsp_vspr
; Line 1173
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN304@stbsp_vspr
$LN76@stbsp_vspr:
; Line 1174
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN77@stbsp_vspr
; Line 1175
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN305@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$35[rsp], eax
	mov	eax, DWORD PTR lg$35[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN306@stbsp_vspr
	mov	eax, DWORD PTR lg$35[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN306@stbsp_vspr:
$LN305@stbsp_vspr:
; Line 1176
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN78@stbsp_vspr:
; Line 1177
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN79@stbsp_vspr
; Line 1178
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN307@stbsp_vspr
; Line 1179
	jmp	SHORT $LN79@stbsp_vspr
$LN307@stbsp_vspr:
; Line 1180
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1181
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1182
	jmp	SHORT $LN78@stbsp_vspr
$LN79@stbsp_vspr:
$LN80@stbsp_vspr:
; Line 1183
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN81@stbsp_vspr
; Line 1184
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1185
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1186
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1187
	jmp	SHORT $LN80@stbsp_vspr
$LN81@stbsp_vspr:
$LN82@stbsp_vspr:
; Line 1188
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN83@stbsp_vspr
; Line 1189
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1191
	jmp	SHORT $LN82@stbsp_vspr
$LN83@stbsp_vspr:
; Line 1192
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN308@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$34[rsp], eax
	mov	eax, DWORD PTR len$34[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN309@stbsp_vspr
	mov	eax, DWORD PTR len$34[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$34[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN310@stbsp_vspr
	jmp	$LN311@stbsp_vspr
	jmp	$done$466
$LN310@stbsp_vspr:
$LN309@stbsp_vspr:
$LN308@stbsp_vspr:
; Line 1193
	jmp	$LN76@stbsp_vspr
$LN77@stbsp_vspr:
$LN304@stbsp_vspr:
; Line 1196
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN84@stbsp_vspr:
; Line 1197
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN85@stbsp_vspr
; Line 1198
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN312@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$36[rsp], eax
	mov	eax, DWORD PTR lg$36[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN313@stbsp_vspr
	mov	eax, DWORD PTR lg$36[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN313@stbsp_vspr:
$LN312@stbsp_vspr:
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$9[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN86@stbsp_vspr:
; Line 1200
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN87@stbsp_vspr
; Line 1201
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1202
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1203
	jmp	SHORT $LN86@stbsp_vspr
$LN87@stbsp_vspr:
; Line 1204
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN314@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$23[rsp], eax
	mov	eax, DWORD PTR len$23[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN315@stbsp_vspr
	mov	eax, DWORD PTR len$23[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$23[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN316@stbsp_vspr
	jmp	$LN317@stbsp_vspr
	jmp	$done$466
$LN316@stbsp_vspr:
$LN315@stbsp_vspr:
$LN314@stbsp_vspr:
; Line 1205
	jmp	$LN84@stbsp_vspr
$LN85@stbsp_vspr:
; Line 1208
	mov	eax, DWORD PTR cs$8[rsp]
	shr	eax, 24
	mov	DWORD PTR c$24[rsp], eax
; Line 1209
	mov	eax, DWORD PTR cs$8[rsp]
	and	eax, 16777215				; 00ffffffH
	mov	DWORD PTR cs$8[rsp], eax
; Line 1210
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN449@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR c$24[rsp]
	inc	ecx
	xor	edx, edx
	div	ecx
	mov	eax, edx
	mov	ecx, DWORD PTR c$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv1058[rsp], eax
	jmp	SHORT $LN450@stbsp_vspr
$LN449@stbsp_vspr:
	mov	DWORD PTR tv1058[rsp], 0
$LN450@stbsp_vspr:
	mov	eax, DWORD PTR tv1058[rsp]
	mov	DWORD PTR cs$8[rsp], eax
$LN88@stbsp_vspr:
; Line 1211
	cmp	DWORD PTR pr$2[rsp], 0
	jle	$LN89@stbsp_vspr
; Line 1212
	mov	eax, DWORD PTR pr$2[rsp]
	mov	DWORD PTR i$9[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN318@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$37[rsp], eax
	mov	eax, DWORD PTR lg$37[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jle	SHORT $LN319@stbsp_vspr
	mov	eax, DWORD PTR lg$37[rsp]
	mov	DWORD PTR i$9[rsp], eax
$LN319@stbsp_vspr:
$LN318@stbsp_vspr:
; Line 1213
	mov	eax, DWORD PTR i$9[rsp]
	mov	ecx, DWORD PTR pr$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR pr$2[rsp], eax
; Line 1214
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN320@stbsp_vspr
$LN90@stbsp_vspr:
; Line 1215
	cmp	DWORD PTR i$9[rsp], 0
	je	SHORT $LN91@stbsp_vspr
; Line 1216
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN321@stbsp_vspr
; Line 1217
	jmp	SHORT $LN91@stbsp_vspr
$LN321@stbsp_vspr:
; Line 1218
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1219
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1220
	jmp	SHORT $LN90@stbsp_vspr
$LN91@stbsp_vspr:
$LN92@stbsp_vspr:
; Line 1221
	cmp	DWORD PTR i$9[rsp], 4
	jl	SHORT $LN93@stbsp_vspr
; Line 1222
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1223
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1224
	mov	eax, DWORD PTR i$9[rsp]
	sub	eax, 4
	mov	DWORD PTR i$9[rsp], eax
; Line 1225
	jmp	SHORT $LN92@stbsp_vspr
$LN93@stbsp_vspr:
$LN320@stbsp_vspr:
$LN94@stbsp_vspr:
; Line 1227
	cmp	DWORD PTR i$9[rsp], 0
	je	$LN95@stbsp_vspr
; Line 1228
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN322@stbsp_vspr
	mov	eax, DWORD PTR cs$8[rsp]
	mov	DWORD PTR tv1081[rsp], eax
	mov	eax, DWORD PTR c$24[rsp]
	mov	DWORD PTR tv1082[rsp], eax
	mov	eax, DWORD PTR cs$8[rsp]
	inc	eax
	mov	DWORD PTR cs$8[rsp], eax
	mov	eax, DWORD PTR tv1082[rsp]
	cmp	DWORD PTR tv1081[rsp], eax
	jne	SHORT $LN322@stbsp_vspr
; Line 1229
	mov	DWORD PTR cs$8[rsp], 0
; Line 1230
	mov	rax, QWORD PTR bf$[rsp]
	movzx	ecx, BYTE PTR stbsp__comma
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1231
	jmp	SHORT $LN323@stbsp_vspr
$LN322@stbsp_vspr:
; Line 1232
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
$LN323@stbsp_vspr:
; Line 1233
	mov	eax, DWORD PTR i$9[rsp]
	dec	eax
	mov	DWORD PTR i$9[rsp], eax
; Line 1234
	jmp	$LN94@stbsp_vspr
$LN95@stbsp_vspr:
; Line 1235
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN324@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$25[rsp], eax
	mov	eax, DWORD PTR len$25[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN325@stbsp_vspr
	mov	eax, DWORD PTR len$25[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$25[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN326@stbsp_vspr
	jmp	$LN327@stbsp_vspr
	jmp	$done$466
$LN326@stbsp_vspr:
$LN325@stbsp_vspr:
$LN324@stbsp_vspr:
; Line 1236
	jmp	$LN88@stbsp_vspr
$LN89@stbsp_vspr:
$LN303@stbsp_vspr:
; Line 1240
	lea	rax, QWORD PTR lead$62[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN96@stbsp_vspr:
; Line 1241
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	test	eax, eax
	je	$LN97@stbsp_vspr
; Line 1243
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	mov	DWORD PTR i$18[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN328@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$43[rsp], eax
	mov	eax, DWORD PTR lg$43[rsp]
	cmp	DWORD PTR i$18[rsp], eax
	jle	SHORT $LN329@stbsp_vspr
	mov	eax, DWORD PTR lg$43[rsp]
	mov	DWORD PTR i$18[rsp], eax
$LN329@stbsp_vspr:
$LN328@stbsp_vspr:
; Line 1244
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$18[rsp]
	movsx	eax, BYTE PTR lead$62[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR lead$62[rsp+rcx], al
$LN98@stbsp_vspr:
; Line 1245
	cmp	DWORD PTR i$18[rsp], 0
	je	SHORT $LN99@stbsp_vspr
; Line 1246
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1247
	mov	eax, DWORD PTR i$18[rsp]
	dec	eax
	mov	DWORD PTR i$18[rsp], eax
; Line 1248
	jmp	SHORT $LN98@stbsp_vspr
$LN99@stbsp_vspr:
; Line 1249
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN330@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$26[rsp], eax
	mov	eax, DWORD PTR len$26[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN331@stbsp_vspr
	mov	eax, DWORD PTR len$26[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$26[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN332@stbsp_vspr
	jmp	$LN333@stbsp_vspr
	jmp	$done$466
$LN332@stbsp_vspr:
$LN331@stbsp_vspr:
$LN330@stbsp_vspr:
; Line 1250
	jmp	$LN96@stbsp_vspr
$LN97@stbsp_vspr:
; Line 1253
	mov	eax, DWORD PTR l$5[rsp]
	mov	DWORD PTR n$3[rsp], eax
$LN100@stbsp_vspr:
; Line 1254
	cmp	DWORD PTR n$3[rsp], 0
	je	$LN101@stbsp_vspr
; Line 1256
	mov	eax, DWORD PTR n$3[rsp]
	mov	DWORD PTR i$17[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN334@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$38[rsp], eax
	mov	eax, DWORD PTR lg$38[rsp]
	cmp	DWORD PTR i$17[rsp], eax
	jle	SHORT $LN335@stbsp_vspr
	mov	eax, DWORD PTR lg$38[rsp]
	mov	DWORD PTR i$17[rsp], eax
$LN335@stbsp_vspr:
$LN334@stbsp_vspr:
; Line 1257
	mov	eax, DWORD PTR i$17[rsp]
	mov	ecx, DWORD PTR n$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$3[rsp], eax
$LN102@stbsp_vspr:
; Line 1258
	cmp	DWORD PTR i$17[rsp], 4
	jl	SHORT $LN103@stbsp_vspr
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	add	rax, 4
	mov	QWORD PTR s$4[rsp], rax
	mov	eax, DWORD PTR i$17[rsp]
	sub	eax, 4
	mov	DWORD PTR i$17[rsp], eax
	jmp	SHORT $LN102@stbsp_vspr
$LN103@stbsp_vspr:
$LN104@stbsp_vspr:
; Line 1264
	cmp	DWORD PTR i$17[rsp], 0
	je	SHORT $LN105@stbsp_vspr
; Line 1265
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR s$4[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR s$4[rsp]
	inc	rax
	mov	QWORD PTR s$4[rsp], rax
; Line 1266
	mov	eax, DWORD PTR i$17[rsp]
	dec	eax
	mov	DWORD PTR i$17[rsp], eax
; Line 1267
	jmp	SHORT $LN104@stbsp_vspr
$LN105@stbsp_vspr:
; Line 1268
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN336@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$27[rsp], eax
	mov	eax, DWORD PTR len$27[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN337@stbsp_vspr
	mov	eax, DWORD PTR len$27[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$27[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN338@stbsp_vspr
	jmp	$LN339@stbsp_vspr
	jmp	$done$466
$LN338@stbsp_vspr:
$LN337@stbsp_vspr:
$LN336@stbsp_vspr:
; Line 1269
	jmp	$LN100@stbsp_vspr
$LN101@stbsp_vspr:
$LN106@stbsp_vspr:
; Line 1272
	cmp	DWORD PTR tz$16[rsp], 0
	je	$LN107@stbsp_vspr
; Line 1274
	mov	eax, DWORD PTR tz$16[rsp]
	mov	DWORD PTR i$14[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN340@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$39[rsp], eax
	mov	eax, DWORD PTR lg$39[rsp]
	cmp	DWORD PTR i$14[rsp], eax
	jle	SHORT $LN341@stbsp_vspr
	mov	eax, DWORD PTR lg$39[rsp]
	mov	DWORD PTR i$14[rsp], eax
$LN341@stbsp_vspr:
$LN340@stbsp_vspr:
; Line 1275
	mov	eax, DWORD PTR i$14[rsp]
	mov	ecx, DWORD PTR tz$16[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tz$16[rsp], eax
$LN108@stbsp_vspr:
; Line 1276
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN109@stbsp_vspr
; Line 1277
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN342@stbsp_vspr
; Line 1278
	jmp	SHORT $LN109@stbsp_vspr
$LN342@stbsp_vspr:
; Line 1279
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1280
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1281
	jmp	SHORT $LN108@stbsp_vspr
$LN109@stbsp_vspr:
$LN110@stbsp_vspr:
; Line 1282
	cmp	DWORD PTR i$14[rsp], 4
	jl	SHORT $LN111@stbsp_vspr
; Line 1283
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 808464432		; 30303030H
; Line 1284
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1285
	mov	eax, DWORD PTR i$14[rsp]
	sub	eax, 4
	mov	DWORD PTR i$14[rsp], eax
; Line 1286
	jmp	SHORT $LN110@stbsp_vspr
$LN111@stbsp_vspr:
$LN112@stbsp_vspr:
; Line 1287
	cmp	DWORD PTR i$14[rsp], 0
	je	SHORT $LN113@stbsp_vspr
; Line 1288
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 48			; 00000030H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1289
	mov	eax, DWORD PTR i$14[rsp]
	dec	eax
	mov	DWORD PTR i$14[rsp], eax
; Line 1290
	jmp	SHORT $LN112@stbsp_vspr
$LN113@stbsp_vspr:
; Line 1291
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN343@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$28[rsp], eax
	mov	eax, DWORD PTR len$28[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN344@stbsp_vspr
	mov	eax, DWORD PTR len$28[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$28[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN345@stbsp_vspr
	jmp	$LN346@stbsp_vspr
	jmp	$done$466
$LN345@stbsp_vspr:
$LN344@stbsp_vspr:
$LN343@stbsp_vspr:
; Line 1292
	jmp	$LN106@stbsp_vspr
$LN107@stbsp_vspr:
; Line 1295
	lea	rax, QWORD PTR tail$63[rsp+1]
	mov	QWORD PTR sn$13[rsp], rax
$LN114@stbsp_vspr:
; Line 1296
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	test	eax, eax
	je	$LN115@stbsp_vspr
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	mov	DWORD PTR i$19[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN347@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$40[rsp], eax
	mov	eax, DWORD PTR lg$40[rsp]
	cmp	DWORD PTR i$19[rsp], eax
	jle	SHORT $LN348@stbsp_vspr
	mov	eax, DWORD PTR lg$40[rsp]
	mov	DWORD PTR i$19[rsp], eax
$LN348@stbsp_vspr:
$LN347@stbsp_vspr:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	movsx	ecx, BYTE PTR i$19[rsp]
	movsx	eax, BYTE PTR tail$63[rsp+rax]
	sub	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR tail$63[rsp+rcx], al
$LN116@stbsp_vspr:
; Line 1300
	cmp	DWORD PTR i$19[rsp], 0
	je	SHORT $LN117@stbsp_vspr
; Line 1301
	mov	rax, QWORD PTR bf$[rsp]
	mov	rcx, QWORD PTR sn$13[rsp]
	movzx	ecx, BYTE PTR [rcx]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	mov	rax, QWORD PTR sn$13[rsp]
	inc	rax
	mov	QWORD PTR sn$13[rsp], rax
; Line 1302
	mov	eax, DWORD PTR i$19[rsp]
	dec	eax
	mov	DWORD PTR i$19[rsp], eax
; Line 1303
	jmp	SHORT $LN116@stbsp_vspr
$LN117@stbsp_vspr:
; Line 1304
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN349@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$29[rsp], eax
	mov	eax, DWORD PTR len$29[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN350@stbsp_vspr
	mov	eax, DWORD PTR len$29[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$29[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN351@stbsp_vspr
	jmp	$LN352@stbsp_vspr
	jmp	$done$466
$LN351@stbsp_vspr:
$LN350@stbsp_vspr:
$LN349@stbsp_vspr:
; Line 1305
	jmp	$LN114@stbsp_vspr
$LN115@stbsp_vspr:
; Line 1308
	mov	eax, DWORD PTR fl$1[rsp]
	and	eax, 1
	test	eax, eax
	je	$LN353@stbsp_vspr
; Line 1309
	cmp	DWORD PTR fw$10[rsp], 0
	jle	$LN354@stbsp_vspr
$LN118@stbsp_vspr:
; Line 1310
	cmp	DWORD PTR fw$10[rsp], 0
	je	$LN119@stbsp_vspr
; Line 1312
	mov	eax, DWORD PTR fw$10[rsp]
	mov	DWORD PTR i$15[rsp], eax
	cmp	QWORD PTR callback$[rsp], 0
	je	SHORT $LN355@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, 512				; 00000200H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR lg$41[rsp], eax
	mov	eax, DWORD PTR lg$41[rsp]
	cmp	DWORD PTR i$15[rsp], eax
	jle	SHORT $LN356@stbsp_vspr
	mov	eax, DWORD PTR lg$41[rsp]
	mov	DWORD PTR i$15[rsp], eax
$LN356@stbsp_vspr:
$LN355@stbsp_vspr:
; Line 1313
	mov	eax, DWORD PTR i$15[rsp]
	mov	ecx, DWORD PTR fw$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fw$10[rsp], eax
$LN120@stbsp_vspr:
; Line 1314
	cmp	DWORD PTR i$15[rsp], 0
	je	SHORT $LN121@stbsp_vspr
; Line 1315
	mov	rax, QWORD PTR bf$[rsp]
	and	rax, 3
	test	rax, rax
	jne	SHORT $LN357@stbsp_vspr
; Line 1316
	jmp	SHORT $LN121@stbsp_vspr
$LN357@stbsp_vspr:
; Line 1317
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
; Line 1318
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
; Line 1319
	jmp	SHORT $LN120@stbsp_vspr
$LN121@stbsp_vspr:
$LN122@stbsp_vspr:
; Line 1320
	cmp	DWORD PTR i$15[rsp], 4
	jl	SHORT $LN123@stbsp_vspr
; Line 1321
	mov	rax, QWORD PTR bf$[rsp]
	mov	DWORD PTR [rax], 538976288		; 20202020H
; Line 1322
	mov	rax, QWORD PTR bf$[rsp]
	add	rax, 4
	mov	QWORD PTR bf$[rsp], rax
; Line 1323
	mov	eax, DWORD PTR i$15[rsp]
	sub	eax, 4
	mov	DWORD PTR i$15[rsp], eax
; Line 1324
	jmp	SHORT $LN122@stbsp_vspr
$LN123@stbsp_vspr:
$LN124@stbsp_vspr:
; Line 1325
	mov	eax, DWORD PTR i$15[rsp]
	mov	DWORD PTR tv1277[rsp], eax
	mov	eax, DWORD PTR i$15[rsp]
	dec	eax
	mov	DWORD PTR i$15[rsp], eax
	cmp	DWORD PTR tv1277[rsp], 0
	je	SHORT $LN125@stbsp_vspr
; Line 1326
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR bf$[rsp]
	inc	rax
	mov	QWORD PTR bf$[rsp], rax
	jmp	SHORT $LN124@stbsp_vspr
$LN125@stbsp_vspr:
; Line 1327
	cmp	QWORD PTR callback$[rsp], 0
	je	$LN358@stbsp_vspr
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$30[rsp], eax
	mov	eax, DWORD PTR len$30[rsp]
	inc	eax
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN359@stbsp_vspr
	mov	eax, DWORD PTR len$30[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$30[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
	cmp	QWORD PTR bf$[rsp], 0
	jne	SHORT $LN360@stbsp_vspr
	jmp	$LN361@stbsp_vspr
	jmp	$done$466
$LN360@stbsp_vspr:
$LN359@stbsp_vspr:
$LN358@stbsp_vspr:
; Line 1328
	jmp	$LN118@stbsp_vspr
$LN119@stbsp_vspr:
$LN354@stbsp_vspr:
$LN353@stbsp_vspr:
; Line 1330
	jmp	$LN24@stbsp_vspr
$LN362@stbsp_vspr:
; Line 1333
	lea	rax, QWORD PTR num$64[rsp+511]
	mov	QWORD PTR s$4[rsp], rax
; Line 1334
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s$4[rsp]
	mov	rdx, QWORD PTR f$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
; Line 1335
	mov	DWORD PTR l$5[rsp], 1
; Line 1336
	mov	DWORD PTR fl$1[rsp], 0
	mov	eax, DWORD PTR fl$1[rsp]
	mov	DWORD PTR fw$10[rsp], eax
; Line 1337
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T47[rsp], rax
	cmp	QWORD PTR $T47[rsp], 8
	jae	SHORT $LN451@stbsp_vspr
	jmp	SHORT $LN452@stbsp_vspr
$LN451@stbsp_vspr:
	call	__report_rangecheckfailure
$LN452@stbsp_vspr:
	mov	rax, QWORD PTR $T47[rsp]
	mov	BYTE PTR lead$62[rsp+rax], 0
; Line 1338
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T48[rsp], rax
	cmp	QWORD PTR $T48[rsp], 8
	jae	SHORT $LN453@stbsp_vspr
	jmp	SHORT $LN454@stbsp_vspr
$LN453@stbsp_vspr:
	call	__report_rangecheckfailure
$LN454@stbsp_vspr:
	mov	rax, QWORD PTR $T48[rsp]
	mov	BYTE PTR tail$63[rsp+rax], 0
; Line 1339
	mov	DWORD PTR pr$2[rsp], 0
; Line 1340
	mov	DWORD PTR dp$6[rsp], 0
; Line 1341
	mov	DWORD PTR cs$8[rsp], 0
; Line 1342
	jmp	$scopy$468
$LN24@stbsp_vspr:
; Line 1344
	mov	rax, QWORD PTR f$[rsp]
	inc	rax
	mov	QWORD PTR f$[rsp], rax
; Line 1345
	jmp	$LN2@stbsp_vspr
$LN129@stbsp_vspr:
$endfmt$465:
; Line 1348
	cmp	QWORD PTR callback$[rsp], 0
	jne	SHORT $LN363@stbsp_vspr
; Line 1349
	mov	rax, QWORD PTR bf$[rsp]
	mov	BYTE PTR [rax], 0
	jmp	SHORT $LN364@stbsp_vspr
$LN363@stbsp_vspr:
; Line 1351
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$31[rsp], eax
	mov	eax, DWORD PTR len$31[rsp]
	add	eax, 511				; 000001ffH
	cmp	eax, 512				; 00000200H
	jl	SHORT $LN365@stbsp_vspr
	mov	eax, DWORD PTR len$31[rsp]
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tlen$[rsp], eax
	mov	r8d, DWORD PTR len$31[rsp]
	mov	rdx, QWORD PTR user$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	QWORD PTR callback$[rsp]
	mov	QWORD PTR buf$[rsp], rax
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR bf$[rsp], rax
$LN365@stbsp_vspr:
$LN364@stbsp_vspr:
$LN133@stbsp_vspr:
$LN311@stbsp_vspr:
$LN317@stbsp_vspr:
$LN327@stbsp_vspr:
$LN333@stbsp_vspr:
$LN339@stbsp_vspr:
$LN346@stbsp_vspr:
$LN352@stbsp_vspr:
$LN361@stbsp_vspr:
$done$466:
; Line 1354
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR bf$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR tlen$[rsp]
	add	ecx, eax
	mov	eax, ecx
$LN368@stbsp_vspr:
; Line 1355
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1208				; 000004b8H
	ret	0
$LN460@stbsp_vspr:
	DD	$LN140@stbsp_vspr
	DD	$LN141@stbsp_vspr
	DD	$LN143@stbsp_vspr
	DD	$LN142@stbsp_vspr
	DD	$LN139@stbsp_vspr
	DD	$LN138@stbsp_vspr
	DD	$LN149@stbsp_vspr
	DD	$LN148@stbsp_vspr
	DD	$LN151@stbsp_vspr
$LN459@stbsp_vspr:
	DB	0
	DB	8
	DB	8
	DB	1
	DB	2
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	8
	DB	4
	DB	8
	DB	5
	DB	8
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	7
$LN458@stbsp_vspr:
	DD	$LN165@stbsp_vspr
	DD	$LN158@stbsp_vspr
	DD	$LN162@stbsp_vspr
	DD	$LN160@stbsp_vspr
	DD	$LN164@stbsp_vspr
	DD	$LN163@stbsp_vspr
	DD	$LN170@stbsp_vspr
$LN457@stbsp_vspr:
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	2
	DB	6
	DB	3
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	npad	2
$LN456@stbsp_vspr:
	DD	$LN177@stbsp_vspr
	DD	$LN256@stbsp_vspr
	DD	$LN207@stbsp_vspr
	DD	$LN191@stbsp_vspr
	DD	$LN264@stbsp_vspr
	DD	$LN178@stbsp_vspr
	DD	$LN257@stbsp_vspr
	DD	$LN174@stbsp_vspr
	DD	$LN278@stbsp_vspr
	DD	$LN208@stbsp_vspr
	DD	$LN219@stbsp_vspr
	DD	$LN192@stbsp_vspr
	DD	$LN277@stbsp_vspr
	DD	$LN176@stbsp_vspr
	DD	$LN260@stbsp_vspr
	DD	$LN263@stbsp_vspr
	DD	$LN171@stbsp_vspr
	DD	$LN276@stbsp_vspr
	DD	$LN265@stbsp_vspr
	DD	$LN362@stbsp_vspr
$LN455@stbsp_vspr:
	DB	0
	DB	1
	DB	19
	DB	19
	DB	2
	DB	19
	DB	3
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	4
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	19
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
	DB	10
	DB	11
	DB	19
	DB	12
	DB	19
	DB	19
	DB	19
	DB	19
	DB	13
	DB	14
	DB	15
	DB	19
	DB	19
	DB	16
	DB	19
	DB	17
	DB	19
	DB	19
	DB	18
stbsp_vsprintfcb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
va$ = 40
buf$ = 64
count$ = 72
fmt$ = 80
stbsp_snprintf PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1461
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1464
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1466
	mov	r9, QWORD PTR va$[rsp]
	mov	r8, QWORD PTR fmt$[rsp]
	mov	edx, DWORD PTR count$[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	call	stbsp_vsnprintf
	mov	DWORD PTR result$[rsp], eax
; Line 1467
	mov	QWORD PTR va$[rsp], 0
; Line 1469
	mov	eax, DWORD PTR result$[rsp]
; Line 1470
	add	rsp, 56					; 00000038H
	ret	0
stbsp_snprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
va$ = 56
buf$ = 80
fmt$ = 88
stbsp_sprintf PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1377
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 1380
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR va$[rsp], rax
; Line 1381
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
	mov	DWORD PTR result$[rsp], eax
; Line 1382
	mov	QWORD PTR va$[rsp], 0
; Line 1383
	mov	eax, DWORD PTR result$[rsp]
; Line 1384
	add	rsp, 72					; 00000048H
	ret	0
stbsp_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
l$1 = 48
c$ = 64
__$ArrayPad$ = 592
buf$ = 624
count$ = 632
fmt$ = 640
va$ = 648
stbsp_vsnprintf PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1431
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 616				; 00000268H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1434
	cmp	DWORD PTR count$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
	cmp	QWORD PTR buf$[rsp], 0
	jne	SHORT $LN2@stbsp_vsnp
; Line 1436
	mov	DWORD PTR c$[rsp+12], 0
; Line 1438
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	lea	r8, QWORD PTR c$[rsp+16]
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__count_clamp_callback
	call	stbsp_vsprintfcb
; Line 1439
	jmp	$LN3@stbsp_vsnp
$LN2@stbsp_vsnp:
; Line 1444
	mov	rax, QWORD PTR buf$[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 1445
	mov	eax, DWORD PTR count$[rsp]
	mov	DWORD PTR c$[rsp+8], eax
; Line 1446
	mov	DWORD PTR c$[rsp+12], 0
; Line 1448
	xor	r8d, r8d
	lea	rdx, QWORD PTR c$[rsp]
	xor	ecx, ecx
	call	stbsp__clamp_callback
	mov	rcx, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, rax
	lea	rdx, QWORD PTR c$[rsp]
	lea	rcx, OFFSET FLAT:stbsp__clamp_callback
	call	stbsp_vsprintfcb
; Line 1451
	mov	rax, QWORD PTR buf$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR l$1[rsp], eax
; Line 1452
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR l$1[rsp], eax
	jl	SHORT $LN4@stbsp_vsnp
; Line 1453
	mov	eax, DWORD PTR count$[rsp]
	dec	eax
	mov	DWORD PTR l$1[rsp], eax
$LN4@stbsp_vsnp:
; Line 1454
	movsxd	rax, DWORD PTR l$1[rsp]
	mov	rcx, QWORD PTR buf$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN3@stbsp_vsnp:
; Line 1457
	mov	eax, DWORD PTR c$[rsp+12]
; Line 1458
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 616				; 00000268H
	ret	0
stbsp_vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buf$ = 64
fmt$ = 72
va$ = 80
stbsp_vsprintf PROC
; File W:\cpp\void\ktt-c\stb_sprintf.h
; Line 1473
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1474
	mov	rax, QWORD PTR va$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR fmt$[rsp]
	mov	r8, QWORD PTR buf$[rsp]
	xor	edx, edx
	xor	ecx, ecx
	call	stbsp_vsprintfcb
; Line 1475
	add	rsp, 56					; 00000038H
	ret	0
stbsp_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccfilesize PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 12
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	xor	edx, edx
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_GetFileSize
; Line 13
	add	rsp, 40					; 00000028H
	ret	0
ccfilesize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file_size$ = 48
file$ = 80
offset$ = 88
length$ = 96
file_data$ = 104
ccpushfile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 42
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN2@ccpushfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpushfile
$LN2@ccpushfile:
; Line 44
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfilesize
	mov	DWORD PTR file_size$[rsp], eax
; Line 45
	mov	eax, DWORD PTR offset$[rsp]
	cmp	DWORD PTR file_size$[rsp], eax
	jae	SHORT $LN3@ccpushfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpushfile
$LN3@ccpushfile:
; Line 46
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR file_data$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_WriteFile
	test	eax, eax
	jne	SHORT $LN4@ccpushfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpushfile
$LN4@ccpushfile:
; Line 47
	mov	eax, DWORD PTR length$[rsp]
$LN1@ccpushfile:
; Line 48
	add	rsp, 72					; 00000048H
	ret	0
ccpushfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
length$ = 48
tv70 = 52
file_size$ = 56
file_data$ = 64
file$ = 96
offset$ = 104
lplength$ = 112
ccpullfile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 28
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	jne	SHORT $LN2@ccpullfile
	xor	eax, eax
	jmp	$LN1@ccpullfile
$LN2@ccpullfile:
; Line 30
	mov	rcx, QWORD PTR file$[rsp]
	call	ccfilesize
	mov	DWORD PTR file_size$[rsp], eax
; Line 31
	cmp	QWORD PTR lplength$[rsp], 0
	je	SHORT $LN8@ccpullfile
	mov	rax, QWORD PTR lplength$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN9@ccpullfile
$LN8@ccpullfile:
	mov	DWORD PTR tv70[rsp], 0
$LN9@ccpullfile:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR length$[rsp], eax
; Line 32
	mov	eax, DWORD PTR length$[rsp]
	mov	ecx, DWORD PTR offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR file_size$[rsp], eax
	jae	SHORT $LN3@ccpullfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpullfile
$LN3@ccpullfile:
; Line 33
	cmp	DWORD PTR length$[rsp], 0
	jne	SHORT $LN4@ccpullfile
	mov	eax, DWORD PTR file_size$[rsp]
	mov	DWORD PTR length$[rsp], eax
$LN4@ccpullfile:
; Line 34
	mov	eax, DWORD PTR length$[rsp]
	mov	ecx, eax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR file_data$[rsp], rax
; Line 35
	cmp	QWORD PTR lplength$[rsp], 0
	jne	SHORT $LN5@ccpullfile
	lea	rax, QWORD PTR length$[rsp]
	mov	QWORD PTR lplength$[rsp], rax
$LN5@ccpullfile:
; Line 36
	mov	QWORD PTR [rsp+32], 0
	mov	r9, QWORD PTR lplength$[rsp]
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR file_data$[rsp]
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	jne	SHORT $LN6@ccpullfile
	xor	eax, eax
	jmp	SHORT $LN1@ccpullfile
$LN6@ccpullfile:
; Line 37
	mov	rax, QWORD PTR file_data$[rsp]
$LN1@ccpullfile:
; Line 38
	add	rsp, 88					; 00000058H
	ret	0
ccpullfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 64
tv75 = 72
name$ = 96
ccopenfile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 22
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 4
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, -1073741824			; c0000000H
	mov	rcx, QWORD PTR name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR file$[rsp], rax
; Line 23
	mov	rcx, QWORD PTR file$[rsp]
	call	ccrealfile
	test	eax, eax
	je	SHORT $LN3@ccopenfile
	mov	rax, QWORD PTR file$[rsp]
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN4@ccopenfile
$LN3@ccopenfile:
	mov	QWORD PTR tv75[rsp], 0
$LN4@ccopenfile:
	mov	rax, QWORD PTR tv75[rsp]
; Line 24
	add	rsp, 88					; 00000058H
	ret	0
ccopenfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
file$ = 48
ccclosefile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 17
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR file$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 18
	add	rsp, 40					; 00000028H
	ret	0
ccclosefile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
file$ = 32
ccrealfile PROC
; File W:\cpp\void\ktt-c\ccfio.c
; Line 7
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	cmp	QWORD PTR file$[rsp], -1
	je	SHORT $LN3@ccrealfile
	mov	DWORD PTR tv65[rsp], 1
	jmp	SHORT $LN4@ccrealfile
$LN3@ccrealfile:
	mov	DWORD PTR tv65[rsp], 0
$LN4@ccrealfile:
	mov	eax, DWORD PTR tv65[rsp]
; Line 8
	add	rsp, 24
	ret	0
ccrealfile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Format$ = 64
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 56					; 00000038H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
